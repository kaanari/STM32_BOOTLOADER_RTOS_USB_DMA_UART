
RTOS_USBFS2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b090  080402d0  080402d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b1c  0805b360  0805b360  0002b360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0805be7c  0805be7c  0002be7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0805be84  0805be84  0002be84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0805be88  0805be88  0002be88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000098  24000000  0805be8c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00007150  24000098  0805bf24  00030098  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  240071e8  0805bf24  000371e8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 10 .debug_info   00034453  00000000  00000000  000300c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006cf2  00000000  00000000  00064519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002388  00000000  00000000  0006b210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002100  00000000  00000000  0006d598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d1f9  00000000  00000000  0006f698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00037463  00000000  00000000  000ac891  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015e2b4  00000000  00000000  000e3cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00241fa8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009ea4  00000000  00000000  00241ff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080402d0 <__do_global_dtors_aux>:
 80402d0:	b510      	push	{r4, lr}
 80402d2:	4c05      	ldr	r4, [pc, #20]	; (80402e8 <__do_global_dtors_aux+0x18>)
 80402d4:	7823      	ldrb	r3, [r4, #0]
 80402d6:	b933      	cbnz	r3, 80402e6 <__do_global_dtors_aux+0x16>
 80402d8:	4b04      	ldr	r3, [pc, #16]	; (80402ec <__do_global_dtors_aux+0x1c>)
 80402da:	b113      	cbz	r3, 80402e2 <__do_global_dtors_aux+0x12>
 80402dc:	4804      	ldr	r0, [pc, #16]	; (80402f0 <__do_global_dtors_aux+0x20>)
 80402de:	f3af 8000 	nop.w
 80402e2:	2301      	movs	r3, #1
 80402e4:	7023      	strb	r3, [r4, #0]
 80402e6:	bd10      	pop	{r4, pc}
 80402e8:	24000098 	.word	0x24000098
 80402ec:	00000000 	.word	0x00000000
 80402f0:	0805b348 	.word	0x0805b348

080402f4 <frame_dummy>:
 80402f4:	b508      	push	{r3, lr}
 80402f6:	4b03      	ldr	r3, [pc, #12]	; (8040304 <frame_dummy+0x10>)
 80402f8:	b11b      	cbz	r3, 8040302 <frame_dummy+0xe>
 80402fa:	4903      	ldr	r1, [pc, #12]	; (8040308 <frame_dummy+0x14>)
 80402fc:	4803      	ldr	r0, [pc, #12]	; (804030c <frame_dummy+0x18>)
 80402fe:	f3af 8000 	nop.w
 8040302:	bd08      	pop	{r3, pc}
 8040304:	00000000 	.word	0x00000000
 8040308:	2400009c 	.word	0x2400009c
 804030c:	0805b348 	.word	0x0805b348

08040310 <strcmp>:
 8040310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8040314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8040318:	2a01      	cmp	r2, #1
 804031a:	bf28      	it	cs
 804031c:	429a      	cmpcs	r2, r3
 804031e:	d0f7      	beq.n	8040310 <strcmp>
 8040320:	1ad0      	subs	r0, r2, r3
 8040322:	4770      	bx	lr

08040324 <strlen>:
 8040324:	4603      	mov	r3, r0
 8040326:	f813 2b01 	ldrb.w	r2, [r3], #1
 804032a:	2a00      	cmp	r2, #0
 804032c:	d1fb      	bne.n	8040326 <strlen+0x2>
 804032e:	1a18      	subs	r0, r3, r0
 8040330:	3801      	subs	r0, #1
 8040332:	4770      	bx	lr
	...

08040340 <memchr>:
 8040340:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8040344:	2a10      	cmp	r2, #16
 8040346:	db2b      	blt.n	80403a0 <memchr+0x60>
 8040348:	f010 0f07 	tst.w	r0, #7
 804034c:	d008      	beq.n	8040360 <memchr+0x20>
 804034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040352:	3a01      	subs	r2, #1
 8040354:	428b      	cmp	r3, r1
 8040356:	d02d      	beq.n	80403b4 <memchr+0x74>
 8040358:	f010 0f07 	tst.w	r0, #7
 804035c:	b342      	cbz	r2, 80403b0 <memchr+0x70>
 804035e:	d1f6      	bne.n	804034e <memchr+0xe>
 8040360:	b4f0      	push	{r4, r5, r6, r7}
 8040362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8040366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 804036a:	f022 0407 	bic.w	r4, r2, #7
 804036e:	f07f 0700 	mvns.w	r7, #0
 8040372:	2300      	movs	r3, #0
 8040374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8040378:	3c08      	subs	r4, #8
 804037a:	ea85 0501 	eor.w	r5, r5, r1
 804037e:	ea86 0601 	eor.w	r6, r6, r1
 8040382:	fa85 f547 	uadd8	r5, r5, r7
 8040386:	faa3 f587 	sel	r5, r3, r7
 804038a:	fa86 f647 	uadd8	r6, r6, r7
 804038e:	faa5 f687 	sel	r6, r5, r7
 8040392:	b98e      	cbnz	r6, 80403b8 <memchr+0x78>
 8040394:	d1ee      	bne.n	8040374 <memchr+0x34>
 8040396:	bcf0      	pop	{r4, r5, r6, r7}
 8040398:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 804039c:	f002 0207 	and.w	r2, r2, #7
 80403a0:	b132      	cbz	r2, 80403b0 <memchr+0x70>
 80403a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80403a6:	3a01      	subs	r2, #1
 80403a8:	ea83 0301 	eor.w	r3, r3, r1
 80403ac:	b113      	cbz	r3, 80403b4 <memchr+0x74>
 80403ae:	d1f8      	bne.n	80403a2 <memchr+0x62>
 80403b0:	2000      	movs	r0, #0
 80403b2:	4770      	bx	lr
 80403b4:	3801      	subs	r0, #1
 80403b6:	4770      	bx	lr
 80403b8:	2d00      	cmp	r5, #0
 80403ba:	bf06      	itte	eq
 80403bc:	4635      	moveq	r5, r6
 80403be:	3803      	subeq	r0, #3
 80403c0:	3807      	subne	r0, #7
 80403c2:	f015 0f01 	tst.w	r5, #1
 80403c6:	d107      	bne.n	80403d8 <memchr+0x98>
 80403c8:	3001      	adds	r0, #1
 80403ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80403ce:	bf02      	ittt	eq
 80403d0:	3001      	addeq	r0, #1
 80403d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80403d6:	3001      	addeq	r0, #1
 80403d8:	bcf0      	pop	{r4, r5, r6, r7}
 80403da:	3801      	subs	r0, #1
 80403dc:	4770      	bx	lr
 80403de:	bf00      	nop

080403e0 <__aeabi_uldivmod>:
 80403e0:	b953      	cbnz	r3, 80403f8 <__aeabi_uldivmod+0x18>
 80403e2:	b94a      	cbnz	r2, 80403f8 <__aeabi_uldivmod+0x18>
 80403e4:	2900      	cmp	r1, #0
 80403e6:	bf08      	it	eq
 80403e8:	2800      	cmpeq	r0, #0
 80403ea:	bf1c      	itt	ne
 80403ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80403f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80403f4:	f000 b974 	b.w	80406e0 <__aeabi_idiv0>
 80403f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80403fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8040400:	f000 f806 	bl	8040410 <__udivmoddi4>
 8040404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 804040c:	b004      	add	sp, #16
 804040e:	4770      	bx	lr

08040410 <__udivmoddi4>:
 8040410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8040414:	9d08      	ldr	r5, [sp, #32]
 8040416:	4604      	mov	r4, r0
 8040418:	468e      	mov	lr, r1
 804041a:	2b00      	cmp	r3, #0
 804041c:	d14d      	bne.n	80404ba <__udivmoddi4+0xaa>
 804041e:	428a      	cmp	r2, r1
 8040420:	4694      	mov	ip, r2
 8040422:	d969      	bls.n	80404f8 <__udivmoddi4+0xe8>
 8040424:	fab2 f282 	clz	r2, r2
 8040428:	b152      	cbz	r2, 8040440 <__udivmoddi4+0x30>
 804042a:	fa01 f302 	lsl.w	r3, r1, r2
 804042e:	f1c2 0120 	rsb	r1, r2, #32
 8040432:	fa20 f101 	lsr.w	r1, r0, r1
 8040436:	fa0c fc02 	lsl.w	ip, ip, r2
 804043a:	ea41 0e03 	orr.w	lr, r1, r3
 804043e:	4094      	lsls	r4, r2
 8040440:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8040444:	0c21      	lsrs	r1, r4, #16
 8040446:	fbbe f6f8 	udiv	r6, lr, r8
 804044a:	fa1f f78c 	uxth.w	r7, ip
 804044e:	fb08 e316 	mls	r3, r8, r6, lr
 8040452:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8040456:	fb06 f107 	mul.w	r1, r6, r7
 804045a:	4299      	cmp	r1, r3
 804045c:	d90a      	bls.n	8040474 <__udivmoddi4+0x64>
 804045e:	eb1c 0303 	adds.w	r3, ip, r3
 8040462:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8040466:	f080 811f 	bcs.w	80406a8 <__udivmoddi4+0x298>
 804046a:	4299      	cmp	r1, r3
 804046c:	f240 811c 	bls.w	80406a8 <__udivmoddi4+0x298>
 8040470:	3e02      	subs	r6, #2
 8040472:	4463      	add	r3, ip
 8040474:	1a5b      	subs	r3, r3, r1
 8040476:	b2a4      	uxth	r4, r4
 8040478:	fbb3 f0f8 	udiv	r0, r3, r8
 804047c:	fb08 3310 	mls	r3, r8, r0, r3
 8040480:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8040484:	fb00 f707 	mul.w	r7, r0, r7
 8040488:	42a7      	cmp	r7, r4
 804048a:	d90a      	bls.n	80404a2 <__udivmoddi4+0x92>
 804048c:	eb1c 0404 	adds.w	r4, ip, r4
 8040490:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8040494:	f080 810a 	bcs.w	80406ac <__udivmoddi4+0x29c>
 8040498:	42a7      	cmp	r7, r4
 804049a:	f240 8107 	bls.w	80406ac <__udivmoddi4+0x29c>
 804049e:	4464      	add	r4, ip
 80404a0:	3802      	subs	r0, #2
 80404a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80404a6:	1be4      	subs	r4, r4, r7
 80404a8:	2600      	movs	r6, #0
 80404aa:	b11d      	cbz	r5, 80404b4 <__udivmoddi4+0xa4>
 80404ac:	40d4      	lsrs	r4, r2
 80404ae:	2300      	movs	r3, #0
 80404b0:	e9c5 4300 	strd	r4, r3, [r5]
 80404b4:	4631      	mov	r1, r6
 80404b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80404ba:	428b      	cmp	r3, r1
 80404bc:	d909      	bls.n	80404d2 <__udivmoddi4+0xc2>
 80404be:	2d00      	cmp	r5, #0
 80404c0:	f000 80ef 	beq.w	80406a2 <__udivmoddi4+0x292>
 80404c4:	2600      	movs	r6, #0
 80404c6:	e9c5 0100 	strd	r0, r1, [r5]
 80404ca:	4630      	mov	r0, r6
 80404cc:	4631      	mov	r1, r6
 80404ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80404d2:	fab3 f683 	clz	r6, r3
 80404d6:	2e00      	cmp	r6, #0
 80404d8:	d14a      	bne.n	8040570 <__udivmoddi4+0x160>
 80404da:	428b      	cmp	r3, r1
 80404dc:	d302      	bcc.n	80404e4 <__udivmoddi4+0xd4>
 80404de:	4282      	cmp	r2, r0
 80404e0:	f200 80f9 	bhi.w	80406d6 <__udivmoddi4+0x2c6>
 80404e4:	1a84      	subs	r4, r0, r2
 80404e6:	eb61 0303 	sbc.w	r3, r1, r3
 80404ea:	2001      	movs	r0, #1
 80404ec:	469e      	mov	lr, r3
 80404ee:	2d00      	cmp	r5, #0
 80404f0:	d0e0      	beq.n	80404b4 <__udivmoddi4+0xa4>
 80404f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80404f6:	e7dd      	b.n	80404b4 <__udivmoddi4+0xa4>
 80404f8:	b902      	cbnz	r2, 80404fc <__udivmoddi4+0xec>
 80404fa:	deff      	udf	#255	; 0xff
 80404fc:	fab2 f282 	clz	r2, r2
 8040500:	2a00      	cmp	r2, #0
 8040502:	f040 8092 	bne.w	804062a <__udivmoddi4+0x21a>
 8040506:	eba1 010c 	sub.w	r1, r1, ip
 804050a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 804050e:	fa1f fe8c 	uxth.w	lr, ip
 8040512:	2601      	movs	r6, #1
 8040514:	0c20      	lsrs	r0, r4, #16
 8040516:	fbb1 f3f7 	udiv	r3, r1, r7
 804051a:	fb07 1113 	mls	r1, r7, r3, r1
 804051e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8040522:	fb0e f003 	mul.w	r0, lr, r3
 8040526:	4288      	cmp	r0, r1
 8040528:	d908      	bls.n	804053c <__udivmoddi4+0x12c>
 804052a:	eb1c 0101 	adds.w	r1, ip, r1
 804052e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8040532:	d202      	bcs.n	804053a <__udivmoddi4+0x12a>
 8040534:	4288      	cmp	r0, r1
 8040536:	f200 80cb 	bhi.w	80406d0 <__udivmoddi4+0x2c0>
 804053a:	4643      	mov	r3, r8
 804053c:	1a09      	subs	r1, r1, r0
 804053e:	b2a4      	uxth	r4, r4
 8040540:	fbb1 f0f7 	udiv	r0, r1, r7
 8040544:	fb07 1110 	mls	r1, r7, r0, r1
 8040548:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 804054c:	fb0e fe00 	mul.w	lr, lr, r0
 8040550:	45a6      	cmp	lr, r4
 8040552:	d908      	bls.n	8040566 <__udivmoddi4+0x156>
 8040554:	eb1c 0404 	adds.w	r4, ip, r4
 8040558:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 804055c:	d202      	bcs.n	8040564 <__udivmoddi4+0x154>
 804055e:	45a6      	cmp	lr, r4
 8040560:	f200 80bb 	bhi.w	80406da <__udivmoddi4+0x2ca>
 8040564:	4608      	mov	r0, r1
 8040566:	eba4 040e 	sub.w	r4, r4, lr
 804056a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 804056e:	e79c      	b.n	80404aa <__udivmoddi4+0x9a>
 8040570:	f1c6 0720 	rsb	r7, r6, #32
 8040574:	40b3      	lsls	r3, r6
 8040576:	fa22 fc07 	lsr.w	ip, r2, r7
 804057a:	ea4c 0c03 	orr.w	ip, ip, r3
 804057e:	fa20 f407 	lsr.w	r4, r0, r7
 8040582:	fa01 f306 	lsl.w	r3, r1, r6
 8040586:	431c      	orrs	r4, r3
 8040588:	40f9      	lsrs	r1, r7
 804058a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 804058e:	fa00 f306 	lsl.w	r3, r0, r6
 8040592:	fbb1 f8f9 	udiv	r8, r1, r9
 8040596:	0c20      	lsrs	r0, r4, #16
 8040598:	fa1f fe8c 	uxth.w	lr, ip
 804059c:	fb09 1118 	mls	r1, r9, r8, r1
 80405a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80405a4:	fb08 f00e 	mul.w	r0, r8, lr
 80405a8:	4288      	cmp	r0, r1
 80405aa:	fa02 f206 	lsl.w	r2, r2, r6
 80405ae:	d90b      	bls.n	80405c8 <__udivmoddi4+0x1b8>
 80405b0:	eb1c 0101 	adds.w	r1, ip, r1
 80405b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80405b8:	f080 8088 	bcs.w	80406cc <__udivmoddi4+0x2bc>
 80405bc:	4288      	cmp	r0, r1
 80405be:	f240 8085 	bls.w	80406cc <__udivmoddi4+0x2bc>
 80405c2:	f1a8 0802 	sub.w	r8, r8, #2
 80405c6:	4461      	add	r1, ip
 80405c8:	1a09      	subs	r1, r1, r0
 80405ca:	b2a4      	uxth	r4, r4
 80405cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80405d0:	fb09 1110 	mls	r1, r9, r0, r1
 80405d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80405d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80405dc:	458e      	cmp	lr, r1
 80405de:	d908      	bls.n	80405f2 <__udivmoddi4+0x1e2>
 80405e0:	eb1c 0101 	adds.w	r1, ip, r1
 80405e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80405e8:	d26c      	bcs.n	80406c4 <__udivmoddi4+0x2b4>
 80405ea:	458e      	cmp	lr, r1
 80405ec:	d96a      	bls.n	80406c4 <__udivmoddi4+0x2b4>
 80405ee:	3802      	subs	r0, #2
 80405f0:	4461      	add	r1, ip
 80405f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80405f6:	fba0 9402 	umull	r9, r4, r0, r2
 80405fa:	eba1 010e 	sub.w	r1, r1, lr
 80405fe:	42a1      	cmp	r1, r4
 8040600:	46c8      	mov	r8, r9
 8040602:	46a6      	mov	lr, r4
 8040604:	d356      	bcc.n	80406b4 <__udivmoddi4+0x2a4>
 8040606:	d053      	beq.n	80406b0 <__udivmoddi4+0x2a0>
 8040608:	b15d      	cbz	r5, 8040622 <__udivmoddi4+0x212>
 804060a:	ebb3 0208 	subs.w	r2, r3, r8
 804060e:	eb61 010e 	sbc.w	r1, r1, lr
 8040612:	fa01 f707 	lsl.w	r7, r1, r7
 8040616:	fa22 f306 	lsr.w	r3, r2, r6
 804061a:	40f1      	lsrs	r1, r6
 804061c:	431f      	orrs	r7, r3
 804061e:	e9c5 7100 	strd	r7, r1, [r5]
 8040622:	2600      	movs	r6, #0
 8040624:	4631      	mov	r1, r6
 8040626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804062a:	f1c2 0320 	rsb	r3, r2, #32
 804062e:	40d8      	lsrs	r0, r3
 8040630:	fa0c fc02 	lsl.w	ip, ip, r2
 8040634:	fa21 f303 	lsr.w	r3, r1, r3
 8040638:	4091      	lsls	r1, r2
 804063a:	4301      	orrs	r1, r0
 804063c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8040640:	fa1f fe8c 	uxth.w	lr, ip
 8040644:	fbb3 f0f7 	udiv	r0, r3, r7
 8040648:	fb07 3610 	mls	r6, r7, r0, r3
 804064c:	0c0b      	lsrs	r3, r1, #16
 804064e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8040652:	fb00 f60e 	mul.w	r6, r0, lr
 8040656:	429e      	cmp	r6, r3
 8040658:	fa04 f402 	lsl.w	r4, r4, r2
 804065c:	d908      	bls.n	8040670 <__udivmoddi4+0x260>
 804065e:	eb1c 0303 	adds.w	r3, ip, r3
 8040662:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8040666:	d22f      	bcs.n	80406c8 <__udivmoddi4+0x2b8>
 8040668:	429e      	cmp	r6, r3
 804066a:	d92d      	bls.n	80406c8 <__udivmoddi4+0x2b8>
 804066c:	3802      	subs	r0, #2
 804066e:	4463      	add	r3, ip
 8040670:	1b9b      	subs	r3, r3, r6
 8040672:	b289      	uxth	r1, r1
 8040674:	fbb3 f6f7 	udiv	r6, r3, r7
 8040678:	fb07 3316 	mls	r3, r7, r6, r3
 804067c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8040680:	fb06 f30e 	mul.w	r3, r6, lr
 8040684:	428b      	cmp	r3, r1
 8040686:	d908      	bls.n	804069a <__udivmoddi4+0x28a>
 8040688:	eb1c 0101 	adds.w	r1, ip, r1
 804068c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8040690:	d216      	bcs.n	80406c0 <__udivmoddi4+0x2b0>
 8040692:	428b      	cmp	r3, r1
 8040694:	d914      	bls.n	80406c0 <__udivmoddi4+0x2b0>
 8040696:	3e02      	subs	r6, #2
 8040698:	4461      	add	r1, ip
 804069a:	1ac9      	subs	r1, r1, r3
 804069c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80406a0:	e738      	b.n	8040514 <__udivmoddi4+0x104>
 80406a2:	462e      	mov	r6, r5
 80406a4:	4628      	mov	r0, r5
 80406a6:	e705      	b.n	80404b4 <__udivmoddi4+0xa4>
 80406a8:	4606      	mov	r6, r0
 80406aa:	e6e3      	b.n	8040474 <__udivmoddi4+0x64>
 80406ac:	4618      	mov	r0, r3
 80406ae:	e6f8      	b.n	80404a2 <__udivmoddi4+0x92>
 80406b0:	454b      	cmp	r3, r9
 80406b2:	d2a9      	bcs.n	8040608 <__udivmoddi4+0x1f8>
 80406b4:	ebb9 0802 	subs.w	r8, r9, r2
 80406b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80406bc:	3801      	subs	r0, #1
 80406be:	e7a3      	b.n	8040608 <__udivmoddi4+0x1f8>
 80406c0:	4646      	mov	r6, r8
 80406c2:	e7ea      	b.n	804069a <__udivmoddi4+0x28a>
 80406c4:	4620      	mov	r0, r4
 80406c6:	e794      	b.n	80405f2 <__udivmoddi4+0x1e2>
 80406c8:	4640      	mov	r0, r8
 80406ca:	e7d1      	b.n	8040670 <__udivmoddi4+0x260>
 80406cc:	46d0      	mov	r8, sl
 80406ce:	e77b      	b.n	80405c8 <__udivmoddi4+0x1b8>
 80406d0:	3b02      	subs	r3, #2
 80406d2:	4461      	add	r1, ip
 80406d4:	e732      	b.n	804053c <__udivmoddi4+0x12c>
 80406d6:	4630      	mov	r0, r6
 80406d8:	e709      	b.n	80404ee <__udivmoddi4+0xde>
 80406da:	4464      	add	r4, ip
 80406dc:	3802      	subs	r0, #2
 80406de:	e742      	b.n	8040566 <__udivmoddi4+0x156>

080406e0 <__aeabi_idiv0>:
 80406e0:	4770      	bx	lr
 80406e2:	bf00      	nop

080406e4 <scan_all_files>:

uint8_t disk_mounted = 0;


FRESULT scan_all_files (char* path)        /* Start node to be scanned (***also used as work area***) */
{
 80406e4:	b580      	push	{r7, lr}
 80406e6:	b098      	sub	sp, #96	; 0x60
 80406e8:	af00      	add	r7, sp, #0
 80406ea:	6078      	str	r0, [r7, #4]
	DIR dir;
	UINT i;

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 80406ec:	f107 0308 	add.w	r3, r7, #8
 80406f0:	6879      	ldr	r1, [r7, #4]
 80406f2:	4618      	mov	r0, r3
 80406f4:	f014 fdd2 	bl	805529c <f_opendir>
 80406f8:	4603      	mov	r3, r0
 80406fa:	461a      	mov	r2, r3
 80406fc:	4b31      	ldr	r3, [pc, #196]	; (80407c4 <scan_all_files+0xe0>)
 80406fe:	701a      	strb	r2, [r3, #0]

    if (fresult == FR_OK) {
 8040700:	4b30      	ldr	r3, [pc, #192]	; (80407c4 <scan_all_files+0xe0>)
 8040702:	781b      	ldrb	r3, [r3, #0]
 8040704:	2b00      	cmp	r3, #0
 8040706:	d156      	bne.n	80407b6 <scan_all_files+0xd2>
            for (;;) {
            	fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8040708:	f107 0308 	add.w	r3, r7, #8
 804070c:	492e      	ldr	r1, [pc, #184]	; (80407c8 <scan_all_files+0xe4>)
 804070e:	4618      	mov	r0, r3
 8040710:	f014 feb8 	bl	8055484 <f_readdir>
 8040714:	4603      	mov	r3, r0
 8040716:	461a      	mov	r2, r3
 8040718:	4b2a      	ldr	r3, [pc, #168]	; (80407c4 <scan_all_files+0xe0>)
 804071a:	701a      	strb	r2, [r3, #0]
                if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 804071c:	4b29      	ldr	r3, [pc, #164]	; (80407c4 <scan_all_files+0xe0>)
 804071e:	781b      	ldrb	r3, [r3, #0]
 8040720:	2b00      	cmp	r3, #0
 8040722:	d143      	bne.n	80407ac <scan_all_files+0xc8>
 8040724:	4b28      	ldr	r3, [pc, #160]	; (80407c8 <scan_all_files+0xe4>)
 8040726:	7e9b      	ldrb	r3, [r3, #26]
 8040728:	2b00      	cmp	r3, #0
 804072a:	d03f      	beq.n	80407ac <scan_all_files+0xc8>
                if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 804072c:	4b26      	ldr	r3, [pc, #152]	; (80407c8 <scan_all_files+0xe4>)
 804072e:	7b1b      	ldrb	r3, [r3, #12]
 8040730:	f003 0310 	and.w	r3, r3, #16
 8040734:	2b00      	cmp	r3, #0
 8040736:	d02e      	beq.n	8040796 <scan_all_files+0xb2>
                	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8040738:	4924      	ldr	r1, [pc, #144]	; (80407cc <scan_all_files+0xe8>)
 804073a:	4825      	ldr	r0, [pc, #148]	; (80407d0 <scan_all_files+0xec>)
 804073c:	f7ff fde8 	bl	8040310 <strcmp>
 8040740:	4603      	mov	r3, r0
 8040742:	2b00      	cmp	r3, #0
 8040744:	d02d      	beq.n	80407a2 <scan_all_files+0xbe>
                	if (!(strcmp("System Volume Information", fno.fname))) continue;
 8040746:	4921      	ldr	r1, [pc, #132]	; (80407cc <scan_all_files+0xe8>)
 8040748:	4822      	ldr	r0, [pc, #136]	; (80407d4 <scan_all_files+0xf0>)
 804074a:	f7ff fde1 	bl	8040310 <strcmp>
 804074e:	4603      	mov	r3, r0
 8040750:	2b00      	cmp	r3, #0
 8040752:	d028      	beq.n	80407a6 <scan_all_files+0xc2>
                	i = strlen(path);
 8040754:	6878      	ldr	r0, [r7, #4]
 8040756:	f7ff fde5 	bl	8040324 <strlen>
 804075a:	65f8      	str	r0, [r7, #92]	; 0x5c
                    sprintf(&path[i], "/%s", fno.fname);
 804075c:	687a      	ldr	r2, [r7, #4]
 804075e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8040760:	4413      	add	r3, r2
 8040762:	4a1a      	ldr	r2, [pc, #104]	; (80407cc <scan_all_files+0xe8>)
 8040764:	491c      	ldr	r1, [pc, #112]	; (80407d8 <scan_all_files+0xf4>)
 8040766:	4618      	mov	r0, r3
 8040768:	f019 fd62 	bl	805a230 <siprintf>
                    printf("%s\r\n",path);
 804076c:	6879      	ldr	r1, [r7, #4]
 804076e:	481b      	ldr	r0, [pc, #108]	; (80407dc <scan_all_files+0xf8>)
 8040770:	f019 fcc0 	bl	805a0f4 <iprintf>
                    fresult = scan_all_files(path);                    /* Enter the directory */
 8040774:	6878      	ldr	r0, [r7, #4]
 8040776:	f7ff ffb5 	bl	80406e4 <scan_all_files>
 804077a:	4603      	mov	r3, r0
 804077c:	461a      	mov	r2, r3
 804077e:	4b11      	ldr	r3, [pc, #68]	; (80407c4 <scan_all_files+0xe0>)
 8040780:	701a      	strb	r2, [r3, #0]
                    if (fresult != FR_OK) break;
 8040782:	4b10      	ldr	r3, [pc, #64]	; (80407c4 <scan_all_files+0xe0>)
 8040784:	781b      	ldrb	r3, [r3, #0]
 8040786:	2b00      	cmp	r3, #0
 8040788:	d10f      	bne.n	80407aa <scan_all_files+0xc6>
                    path[i] = 0;
 804078a:	687a      	ldr	r2, [r7, #4]
 804078c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 804078e:	4413      	add	r3, r2
 8040790:	2200      	movs	r2, #0
 8040792:	701a      	strb	r2, [r3, #0]
 8040794:	e7b8      	b.n	8040708 <scan_all_files+0x24>
                } else {                                       /* It is a file. */
                	printf("%s/%s\r\n", path, fno.fname);
 8040796:	4a0d      	ldr	r2, [pc, #52]	; (80407cc <scan_all_files+0xe8>)
 8040798:	6879      	ldr	r1, [r7, #4]
 804079a:	4811      	ldr	r0, [pc, #68]	; (80407e0 <scan_all_files+0xfc>)
 804079c:	f019 fcaa 	bl	805a0f4 <iprintf>
 80407a0:	e7b2      	b.n	8040708 <scan_all_files+0x24>
                	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 80407a2:	bf00      	nop
 80407a4:	e7b0      	b.n	8040708 <scan_all_files+0x24>
                	if (!(strcmp("System Volume Information", fno.fname))) continue;
 80407a6:	bf00      	nop
            	fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 80407a8:	e7ae      	b.n	8040708 <scan_all_files+0x24>
                    if (fresult != FR_OK) break;
 80407aa:	bf00      	nop
                }
            }
            f_closedir(&dir);
 80407ac:	f107 0308 	add.w	r3, r7, #8
 80407b0:	4618      	mov	r0, r3
 80407b2:	f014 fe3c 	bl	805542e <f_closedir>
        }


    return fresult;
 80407b6:	4b03      	ldr	r3, [pc, #12]	; (80407c4 <scan_all_files+0xe0>)
 80407b8:	781b      	ldrb	r3, [r3, #0]
}
 80407ba:	4618      	mov	r0, r3
 80407bc:	3760      	adds	r7, #96	; 0x60
 80407be:	46bd      	mov	sp, r7
 80407c0:	bd80      	pop	{r7, pc}
 80407c2:	bf00      	nop
 80407c4:	240001d8 	.word	0x240001d8
 80407c8:	240000b8 	.word	0x240000b8
 80407cc:	240000d2 	.word	0x240000d2
 80407d0:	0805b360 	.word	0x0805b360
 80407d4:	0805b36c 	.word	0x0805b36c
 80407d8:	0805b388 	.word	0x0805b388
 80407dc:	0805b38c 	.word	0x0805b38c
 80407e0:	0805b394 	.word	0x0805b394

080407e4 <create_file>:

FRESULT create_file (char *name)
{
 80407e4:	b580      	push	{r7, lr}
 80407e6:	b084      	sub	sp, #16
 80407e8:	af00      	add	r7, sp, #0
 80407ea:	6078      	str	r0, [r7, #4]

	uint8_t filename_position = find_filename_argument(name);
 80407ec:	6878      	ldr	r0, [r7, #4]
 80407ee:	f000 fa1f 	bl	8040c30 <find_filename_argument>
 80407f2:	4603      	mov	r3, r0
 80407f4:	73fb      	strb	r3, [r7, #15]
	if(filename_position == ARG_ERR){
		printf("Please enter a proper filename!\r\n");
		return FR_INVALID_NAME;
	}

	name = name + filename_position;
 80407f6:	7bfb      	ldrb	r3, [r7, #15]
 80407f8:	687a      	ldr	r2, [r7, #4]
 80407fa:	4413      	add	r3, r2
 80407fc:	607b      	str	r3, [r7, #4]

	fresult = f_stat (name, &fno);
 80407fe:	4922      	ldr	r1, [pc, #136]	; (8040888 <create_file+0xa4>)
 8040800:	6878      	ldr	r0, [r7, #4]
 8040802:	f014 fe9c 	bl	805553e <f_stat>
 8040806:	4603      	mov	r3, r0
 8040808:	461a      	mov	r2, r3
 804080a:	4b20      	ldr	r3, [pc, #128]	; (804088c <create_file+0xa8>)
 804080c:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 804080e:	4b1f      	ldr	r3, [pc, #124]	; (804088c <create_file+0xa8>)
 8040810:	781b      	ldrb	r3, [r3, #0]
 8040812:	2b00      	cmp	r3, #0
 8040814:	d104      	bne.n	8040820 <create_file+0x3c>
	{
		printf("File '%s' already exists!\r\n",name);
 8040816:	6879      	ldr	r1, [r7, #4]
 8040818:	481d      	ldr	r0, [pc, #116]	; (8040890 <create_file+0xac>)
 804081a:	f019 fc6b 	bl	805a0f4 <iprintf>
 804081e:	e02c      	b.n	804087a <create_file+0x96>
	}
	else
	{
		fresult = f_open(&USBHFile, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8040820:	220b      	movs	r2, #11
 8040822:	6879      	ldr	r1, [r7, #4]
 8040824:	481b      	ldr	r0, [pc, #108]	; (8040894 <create_file+0xb0>)
 8040826:	f013 fb87 	bl	8053f38 <f_open>
 804082a:	4603      	mov	r3, r0
 804082c:	461a      	mov	r2, r3
 804082e:	4b17      	ldr	r3, [pc, #92]	; (804088c <create_file+0xa8>)
 8040830:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8040832:	4b16      	ldr	r3, [pc, #88]	; (804088c <create_file+0xa8>)
 8040834:	781b      	ldrb	r3, [r3, #0]
 8040836:	2b00      	cmp	r3, #0
 8040838:	d009      	beq.n	804084e <create_file+0x6a>
		{
			printf("Error(%d) when creating the file '%s'\r\n", fresult, name);
 804083a:	4b14      	ldr	r3, [pc, #80]	; (804088c <create_file+0xa8>)
 804083c:	781b      	ldrb	r3, [r3, #0]
 804083e:	687a      	ldr	r2, [r7, #4]
 8040840:	4619      	mov	r1, r3
 8040842:	4815      	ldr	r0, [pc, #84]	; (8040898 <create_file+0xb4>)
 8040844:	f019 fc56 	bl	805a0f4 <iprintf>
		    return fresult;
 8040848:	4b10      	ldr	r3, [pc, #64]	; (804088c <create_file+0xa8>)
 804084a:	781b      	ldrb	r3, [r3, #0]
 804084c:	e017      	b.n	804087e <create_file+0x9a>
		}
		else
		{
			printf("'%s' is created successfully\r\n",name);
 804084e:	6879      	ldr	r1, [r7, #4]
 8040850:	4812      	ldr	r0, [pc, #72]	; (804089c <create_file+0xb8>)
 8040852:	f019 fc4f 	bl	805a0f4 <iprintf>
		}

		fresult = f_close(&USBHFile);
 8040856:	480f      	ldr	r0, [pc, #60]	; (8040894 <create_file+0xb0>)
 8040858:	f014 fb77 	bl	8054f4a <f_close>
 804085c:	4603      	mov	r3, r0
 804085e:	461a      	mov	r2, r3
 8040860:	4b0a      	ldr	r3, [pc, #40]	; (804088c <create_file+0xa8>)
 8040862:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8040864:	4b09      	ldr	r3, [pc, #36]	; (804088c <create_file+0xa8>)
 8040866:	781b      	ldrb	r3, [r3, #0]
 8040868:	2b00      	cmp	r3, #0
 804086a:	d006      	beq.n	804087a <create_file+0x96>
		{
			printf("Error(%d) when closing the file '%s'\r\n", fresult, name);
 804086c:	4b07      	ldr	r3, [pc, #28]	; (804088c <create_file+0xa8>)
 804086e:	781b      	ldrb	r3, [r3, #0]
 8040870:	687a      	ldr	r2, [r7, #4]
 8040872:	4619      	mov	r1, r3
 8040874:	480a      	ldr	r0, [pc, #40]	; (80408a0 <create_file+0xbc>)
 8040876:	f019 fc3d 	bl	805a0f4 <iprintf>
		}
	}
    return fresult;
 804087a:	4b04      	ldr	r3, [pc, #16]	; (804088c <create_file+0xa8>)
 804087c:	781b      	ldrb	r3, [r3, #0]
}
 804087e:	4618      	mov	r0, r3
 8040880:	3710      	adds	r7, #16
 8040882:	46bd      	mov	sp, r7
 8040884:	bd80      	pop	{r7, pc}
 8040886:	bf00      	nop
 8040888:	240000b8 	.word	0x240000b8
 804088c:	240001d8 	.word	0x240001d8
 8040890:	0805b39c 	.word	0x0805b39c
 8040894:	24001ba8 	.word	0x24001ba8
 8040898:	0805b3b8 	.word	0x0805b3b8
 804089c:	0805b3e0 	.word	0x0805b3e0
 80408a0:	0805b400 	.word	0x0805b400

080408a4 <remove_file>:

FRESULT remove_file (char *name)
{
 80408a4:	b580      	push	{r7, lr}
 80408a6:	b084      	sub	sp, #16
 80408a8:	af00      	add	r7, sp, #0
 80408aa:	6078      	str	r0, [r7, #4]
	/**** check whether the file exists or not ****/

	uint8_t filename_position = find_filename_argument(name);
 80408ac:	6878      	ldr	r0, [r7, #4]
 80408ae:	f000 f9bf 	bl	8040c30 <find_filename_argument>
 80408b2:	4603      	mov	r3, r0
 80408b4:	73fb      	strb	r3, [r7, #15]
	if(filename_position == ARG_ERR){
		printf("Please enter a proper filename!\r\n");
		return FR_INVALID_NAME;
	}

	name = name + filename_position;
 80408b6:	7bfb      	ldrb	r3, [r7, #15]
 80408b8:	687a      	ldr	r2, [r7, #4]
 80408ba:	4413      	add	r3, r2
 80408bc:	607b      	str	r3, [r7, #4]

	fresult = f_stat (name, &fno);
 80408be:	4917      	ldr	r1, [pc, #92]	; (804091c <remove_file+0x78>)
 80408c0:	6878      	ldr	r0, [r7, #4]
 80408c2:	f014 fe3c 	bl	805553e <f_stat>
 80408c6:	4603      	mov	r3, r0
 80408c8:	461a      	mov	r2, r3
 80408ca:	4b15      	ldr	r3, [pc, #84]	; (8040920 <remove_file+0x7c>)
 80408cc:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80408ce:	4b14      	ldr	r3, [pc, #80]	; (8040920 <remove_file+0x7c>)
 80408d0:	781b      	ldrb	r3, [r3, #0]
 80408d2:	2b00      	cmp	r3, #0
 80408d4:	d004      	beq.n	80408e0 <remove_file+0x3c>
	{
		printf("File '%s' does not exists!\r\n", name);
 80408d6:	6879      	ldr	r1, [r7, #4]
 80408d8:	4812      	ldr	r0, [pc, #72]	; (8040924 <remove_file+0x80>)
 80408da:	f019 fc0b 	bl	805a0f4 <iprintf>
 80408de:	e016      	b.n	804090e <remove_file+0x6a>
	}
	else
	{
		fresult = f_unlink (name);
 80408e0:	6878      	ldr	r0, [r7, #4]
 80408e2:	f014 fe86 	bl	80555f2 <f_unlink>
 80408e6:	4603      	mov	r3, r0
 80408e8:	461a      	mov	r2, r3
 80408ea:	4b0d      	ldr	r3, [pc, #52]	; (8040920 <remove_file+0x7c>)
 80408ec:	701a      	strb	r2, [r3, #0]
		if (fresult == FR_OK)
 80408ee:	4b0c      	ldr	r3, [pc, #48]	; (8040920 <remove_file+0x7c>)
 80408f0:	781b      	ldrb	r3, [r3, #0]
 80408f2:	2b00      	cmp	r3, #0
 80408f4:	d104      	bne.n	8040900 <remove_file+0x5c>
		{
			printf("'%s' has been removed successfully.\r\n", name);
 80408f6:	6879      	ldr	r1, [r7, #4]
 80408f8:	480b      	ldr	r0, [pc, #44]	; (8040928 <remove_file+0x84>)
 80408fa:	f019 fbfb 	bl	805a0f4 <iprintf>
 80408fe:	e006      	b.n	804090e <remove_file+0x6a>
		}
		else
		{
			printf("Error(%d) when removing '%s'!\r\n",fresult, name);
 8040900:	4b07      	ldr	r3, [pc, #28]	; (8040920 <remove_file+0x7c>)
 8040902:	781b      	ldrb	r3, [r3, #0]
 8040904:	687a      	ldr	r2, [r7, #4]
 8040906:	4619      	mov	r1, r3
 8040908:	4808      	ldr	r0, [pc, #32]	; (804092c <remove_file+0x88>)
 804090a:	f019 fbf3 	bl	805a0f4 <iprintf>
		}
	}
	return fresult;
 804090e:	4b04      	ldr	r3, [pc, #16]	; (8040920 <remove_file+0x7c>)
 8040910:	781b      	ldrb	r3, [r3, #0]
}
 8040912:	4618      	mov	r0, r3
 8040914:	3710      	adds	r7, #16
 8040916:	46bd      	mov	sp, r7
 8040918:	bd80      	pop	{r7, pc}
 804091a:	bf00      	nop
 804091c:	240000b8 	.word	0x240000b8
 8040920:	240001d8 	.word	0x240001d8
 8040924:	0805b428 	.word	0x0805b428
 8040928:	0805b448 	.word	0x0805b448
 804092c:	0805b470 	.word	0x0805b470

08040930 <create_dir>:

FRESULT create_dir (char *name)
{
 8040930:	b580      	push	{r7, lr}
 8040932:	b084      	sub	sp, #16
 8040934:	af00      	add	r7, sp, #0
 8040936:	6078      	str	r0, [r7, #4]
	uint8_t filename_position = find_filename_argument(name);
 8040938:	6878      	ldr	r0, [r7, #4]
 804093a:	f000 f979 	bl	8040c30 <find_filename_argument>
 804093e:	4603      	mov	r3, r0
 8040940:	73fb      	strb	r3, [r7, #15]
	if(filename_position == ARG_ERR){
		printf("Please enter a proper filename!\r\n");
		return FR_INVALID_NAME;
	}

	name = name + filename_position;
 8040942:	7bfb      	ldrb	r3, [r7, #15]
 8040944:	687a      	ldr	r2, [r7, #4]
 8040946:	4413      	add	r3, r2
 8040948:	607b      	str	r3, [r7, #4]

    fresult = f_mkdir(name);
 804094a:	6878      	ldr	r0, [r7, #4]
 804094c:	f014 ff70 	bl	8055830 <f_mkdir>
 8040950:	4603      	mov	r3, r0
 8040952:	461a      	mov	r2, r3
 8040954:	4b0b      	ldr	r3, [pc, #44]	; (8040984 <create_dir+0x54>)
 8040956:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8040958:	4b0a      	ldr	r3, [pc, #40]	; (8040984 <create_dir+0x54>)
 804095a:	781b      	ldrb	r3, [r3, #0]
 804095c:	2b00      	cmp	r3, #0
 804095e:	d104      	bne.n	804096a <create_dir+0x3a>
    {
    	printf("'%s' has been created successfully.\r\n", name);
 8040960:	6879      	ldr	r1, [r7, #4]
 8040962:	4809      	ldr	r0, [pc, #36]	; (8040988 <create_dir+0x58>)
 8040964:	f019 fbc6 	bl	805a0f4 <iprintf>
 8040968:	e006      	b.n	8040978 <create_dir+0x48>
    }
    else
    {
    	printf("Error(%d) when creating directory '%s'\r\n", fresult,name);
 804096a:	4b06      	ldr	r3, [pc, #24]	; (8040984 <create_dir+0x54>)
 804096c:	781b      	ldrb	r3, [r3, #0]
 804096e:	687a      	ldr	r2, [r7, #4]
 8040970:	4619      	mov	r1, r3
 8040972:	4806      	ldr	r0, [pc, #24]	; (804098c <create_dir+0x5c>)
 8040974:	f019 fbbe 	bl	805a0f4 <iprintf>
    }
    return fresult;
 8040978:	4b02      	ldr	r3, [pc, #8]	; (8040984 <create_dir+0x54>)
 804097a:	781b      	ldrb	r3, [r3, #0]
}
 804097c:	4618      	mov	r0, r3
 804097e:	3710      	adds	r7, #16
 8040980:	46bd      	mov	sp, r7
 8040982:	bd80      	pop	{r7, pc}
 8040984:	240001d8 	.word	0x240001d8
 8040988:	0805b490 	.word	0x0805b490
 804098c:	0805b4b8 	.word	0x0805b4b8

08040990 <write_file>:

FRESULT write_file(char *filename, char* data, BYTE mode)
{
 8040990:	b580      	push	{r7, lr}
 8040992:	b084      	sub	sp, #16
 8040994:	af00      	add	r7, sp, #0
 8040996:	60f8      	str	r0, [r7, #12]
 8040998:	60b9      	str	r1, [r7, #8]
 804099a:	4613      	mov	r3, r2
 804099c:	71fb      	strb	r3, [r7, #7]

	fresult = f_open(&USBHFile, filename, mode);
 804099e:	79fb      	ldrb	r3, [r7, #7]
 80409a0:	461a      	mov	r2, r3
 80409a2:	68f9      	ldr	r1, [r7, #12]
 80409a4:	4826      	ldr	r0, [pc, #152]	; (8040a40 <write_file+0xb0>)
 80409a6:	f013 fac7 	bl	8053f38 <f_open>
 80409aa:	4603      	mov	r3, r0
 80409ac:	461a      	mov	r2, r3
 80409ae:	4b25      	ldr	r3, [pc, #148]	; (8040a44 <write_file+0xb4>)
 80409b0:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 80409b2:	4b24      	ldr	r3, [pc, #144]	; (8040a44 <write_file+0xb4>)
 80409b4:	781b      	ldrb	r3, [r3, #0]
 80409b6:	2b00      	cmp	r3, #0
 80409b8:	d009      	beq.n	80409ce <write_file+0x3e>
		printf("Error(%d) when opening file '%s'.\r\n", fresult, filename);
 80409ba:	4b22      	ldr	r3, [pc, #136]	; (8040a44 <write_file+0xb4>)
 80409bc:	781b      	ldrb	r3, [r3, #0]
 80409be:	68fa      	ldr	r2, [r7, #12]
 80409c0:	4619      	mov	r1, r3
 80409c2:	4821      	ldr	r0, [pc, #132]	; (8040a48 <write_file+0xb8>)
 80409c4:	f019 fb96 	bl	805a0f4 <iprintf>
		return fresult;
 80409c8:	4b1e      	ldr	r3, [pc, #120]	; (8040a44 <write_file+0xb4>)
 80409ca:	781b      	ldrb	r3, [r3, #0]
 80409cc:	e033      	b.n	8040a36 <write_file+0xa6>
	}

	fresult = f_write(&USBHFile, data, strlen(data), &bw);
 80409ce:	68b8      	ldr	r0, [r7, #8]
 80409d0:	f7ff fca8 	bl	8040324 <strlen>
 80409d4:	4602      	mov	r2, r0
 80409d6:	4b1d      	ldr	r3, [pc, #116]	; (8040a4c <write_file+0xbc>)
 80409d8:	68b9      	ldr	r1, [r7, #8]
 80409da:	4819      	ldr	r0, [pc, #100]	; (8040a40 <write_file+0xb0>)
 80409dc:	f013 ff6c 	bl	80548b8 <f_write>
 80409e0:	4603      	mov	r3, r0
 80409e2:	461a      	mov	r2, r3
 80409e4:	4b17      	ldr	r3, [pc, #92]	; (8040a44 <write_file+0xb4>)
 80409e6:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80409e8:	4b16      	ldr	r3, [pc, #88]	; (8040a44 <write_file+0xb4>)
 80409ea:	781b      	ldrb	r3, [r3, #0]
 80409ec:	2b00      	cmp	r3, #0
 80409ee:	d009      	beq.n	8040a04 <write_file+0x74>
	{
		printf("Error(%d) when opening file '%s'.\r\n", fresult, filename);
 80409f0:	4b14      	ldr	r3, [pc, #80]	; (8040a44 <write_file+0xb4>)
 80409f2:	781b      	ldrb	r3, [r3, #0]
 80409f4:	68fa      	ldr	r2, [r7, #12]
 80409f6:	4619      	mov	r1, r3
 80409f8:	4813      	ldr	r0, [pc, #76]	; (8040a48 <write_file+0xb8>)
 80409fa:	f019 fb7b 	bl	805a0f4 <iprintf>
		return fresult;
 80409fe:	4b11      	ldr	r3, [pc, #68]	; (8040a44 <write_file+0xb4>)
 8040a00:	781b      	ldrb	r3, [r3, #0]
 8040a02:	e018      	b.n	8040a36 <write_file+0xa6>
	}

	/* Close file */
	fresult = f_close(&USBHFile);
 8040a04:	480e      	ldr	r0, [pc, #56]	; (8040a40 <write_file+0xb0>)
 8040a06:	f014 faa0 	bl	8054f4a <f_close>
 8040a0a:	4603      	mov	r3, r0
 8040a0c:	461a      	mov	r2, r3
 8040a0e:	4b0d      	ldr	r3, [pc, #52]	; (8040a44 <write_file+0xb4>)
 8040a10:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8040a12:	4b0c      	ldr	r3, [pc, #48]	; (8040a44 <write_file+0xb4>)
 8040a14:	781b      	ldrb	r3, [r3, #0]
 8040a16:	2b00      	cmp	r3, #0
 8040a18:	d007      	beq.n	8040a2a <write_file+0x9a>
	{
		printf("Error(%d) when opening file '%s'.\r\n", fresult, filename);
 8040a1a:	4b0a      	ldr	r3, [pc, #40]	; (8040a44 <write_file+0xb4>)
 8040a1c:	781b      	ldrb	r3, [r3, #0]
 8040a1e:	68fa      	ldr	r2, [r7, #12]
 8040a20:	4619      	mov	r1, r3
 8040a22:	4809      	ldr	r0, [pc, #36]	; (8040a48 <write_file+0xb8>)
 8040a24:	f019 fb66 	bl	805a0f4 <iprintf>
 8040a28:	e003      	b.n	8040a32 <write_file+0xa2>
	}
	else
	{
		printf("File '%s' is written successfully.\r\n", filename);
 8040a2a:	68f9      	ldr	r1, [r7, #12]
 8040a2c:	4808      	ldr	r0, [pc, #32]	; (8040a50 <write_file+0xc0>)
 8040a2e:	f019 fb61 	bl	805a0f4 <iprintf>
	}

	return fresult;
 8040a32:	4b04      	ldr	r3, [pc, #16]	; (8040a44 <write_file+0xb4>)
 8040a34:	781b      	ldrb	r3, [r3, #0]
}
 8040a36:	4618      	mov	r0, r3
 8040a38:	3710      	adds	r7, #16
 8040a3a:	46bd      	mov	sp, r7
 8040a3c:	bd80      	pop	{r7, pc}
 8040a3e:	bf00      	nop
 8040a40:	24001ba8 	.word	0x24001ba8
 8040a44:	240001d8 	.word	0x240001d8
 8040a48:	0805b4e4 	.word	0x0805b4e4
 8040a4c:	240001e0 	.word	0x240001e0
 8040a50:	0805b508 	.word	0x0805b508

08040a54 <read_file>:

FRESULT read_file (char *filename)
{
 8040a54:	b580      	push	{r7, lr}
 8040a56:	b084      	sub	sp, #16
 8040a58:	af00      	add	r7, sp, #0
 8040a5a:	6078      	str	r0, [r7, #4]
	uint8_t filename_position = find_filename_argument(filename);
 8040a5c:	6878      	ldr	r0, [r7, #4]
 8040a5e:	f000 f8e7 	bl	8040c30 <find_filename_argument>
 8040a62:	4603      	mov	r3, r0
 8040a64:	73fb      	strb	r3, [r7, #15]
	if(filename_position == ARG_ERR){
		printf("Please enter a proper filename!\r\n");
		return FR_INVALID_NAME;
	}

	filename = filename + filename_position;
 8040a66:	7bfb      	ldrb	r3, [r7, #15]
 8040a68:	687a      	ldr	r2, [r7, #4]
 8040a6a:	4413      	add	r3, r2
 8040a6c:	607b      	str	r3, [r7, #4]


	/**** check whether the file exists or not ****/
	fresult = f_stat (filename, &fno);
 8040a6e:	4938      	ldr	r1, [pc, #224]	; (8040b50 <read_file+0xfc>)
 8040a70:	6878      	ldr	r0, [r7, #4]
 8040a72:	f014 fd64 	bl	805553e <f_stat>
 8040a76:	4603      	mov	r3, r0
 8040a78:	461a      	mov	r2, r3
 8040a7a:	4b36      	ldr	r3, [pc, #216]	; (8040b54 <read_file+0x100>)
 8040a7c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8040a7e:	4b35      	ldr	r3, [pc, #212]	; (8040b54 <read_file+0x100>)
 8040a80:	781b      	ldrb	r3, [r3, #0]
 8040a82:	2b00      	cmp	r3, #0
 8040a84:	d006      	beq.n	8040a94 <read_file+0x40>
	{
		printf("File '%s' does not exists\r\n", filename);
 8040a86:	6879      	ldr	r1, [r7, #4]
 8040a88:	4833      	ldr	r0, [pc, #204]	; (8040b58 <read_file+0x104>)
 8040a8a:	f019 fb33 	bl	805a0f4 <iprintf>
	    return fresult;
 8040a8e:	4b31      	ldr	r3, [pc, #196]	; (8040b54 <read_file+0x100>)
 8040a90:	781b      	ldrb	r3, [r3, #0]
 8040a92:	e059      	b.n	8040b48 <read_file+0xf4>
	}

	/* Open file to read */
	fresult = f_open(&USBHFile, filename, FA_READ);
 8040a94:	2201      	movs	r2, #1
 8040a96:	6879      	ldr	r1, [r7, #4]
 8040a98:	4830      	ldr	r0, [pc, #192]	; (8040b5c <read_file+0x108>)
 8040a9a:	f013 fa4d 	bl	8053f38 <f_open>
 8040a9e:	4603      	mov	r3, r0
 8040aa0:	461a      	mov	r2, r3
 8040aa2:	4b2c      	ldr	r3, [pc, #176]	; (8040b54 <read_file+0x100>)
 8040aa4:	701a      	strb	r2, [r3, #0]

	if (fresult != FR_OK)
 8040aa6:	4b2b      	ldr	r3, [pc, #172]	; (8040b54 <read_file+0x100>)
 8040aa8:	781b      	ldrb	r3, [r3, #0]
 8040aaa:	2b00      	cmp	r3, #0
 8040aac:	d009      	beq.n	8040ac2 <read_file+0x6e>
	{
		printf("Error(%d) when opening file '%s'\r\n", fresult, filename);
 8040aae:	4b29      	ldr	r3, [pc, #164]	; (8040b54 <read_file+0x100>)
 8040ab0:	781b      	ldrb	r3, [r3, #0]
 8040ab2:	687a      	ldr	r2, [r7, #4]
 8040ab4:	4619      	mov	r1, r3
 8040ab6:	482a      	ldr	r0, [pc, #168]	; (8040b60 <read_file+0x10c>)
 8040ab8:	f019 fb1c 	bl	805a0f4 <iprintf>
		return fresult;
 8040abc:	4b25      	ldr	r3, [pc, #148]	; (8040b54 <read_file+0x100>)
 8040abe:	781b      	ldrb	r3, [r3, #0]
 8040ac0:	e042      	b.n	8040b48 <read_file+0xf4>
	}

	char *buffer = malloc(f_size(&USBHFile)+1);
 8040ac2:	4b26      	ldr	r3, [pc, #152]	; (8040b5c <read_file+0x108>)
 8040ac4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8040ac8:	4613      	mov	r3, r2
 8040aca:	3301      	adds	r3, #1
 8040acc:	4618      	mov	r0, r3
 8040ace:	f019 fa0b 	bl	8059ee8 <malloc>
 8040ad2:	4603      	mov	r3, r0
 8040ad4:	60bb      	str	r3, [r7, #8]

	fresult = f_read(&USBHFile, buffer, f_size(&USBHFile), &br);
 8040ad6:	4b21      	ldr	r3, [pc, #132]	; (8040b5c <read_file+0x108>)
 8040ad8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8040adc:	4b21      	ldr	r3, [pc, #132]	; (8040b64 <read_file+0x110>)
 8040ade:	68b9      	ldr	r1, [r7, #8]
 8040ae0:	481e      	ldr	r0, [pc, #120]	; (8040b5c <read_file+0x108>)
 8040ae2:	f013 fd22 	bl	805452a <f_read>
 8040ae6:	4603      	mov	r3, r0
 8040ae8:	461a      	mov	r2, r3
 8040aea:	4b1a      	ldr	r3, [pc, #104]	; (8040b54 <read_file+0x100>)
 8040aec:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8040aee:	4b19      	ldr	r3, [pc, #100]	; (8040b54 <read_file+0x100>)
 8040af0:	781b      	ldrb	r3, [r3, #0]
 8040af2:	2b00      	cmp	r3, #0
 8040af4:	d009      	beq.n	8040b0a <read_file+0xb6>
	{
		printf("Error(%d) when reading file '%s'\r\n", fresult, filename);
 8040af6:	4b17      	ldr	r3, [pc, #92]	; (8040b54 <read_file+0x100>)
 8040af8:	781b      	ldrb	r3, [r3, #0]
 8040afa:	687a      	ldr	r2, [r7, #4]
 8040afc:	4619      	mov	r1, r3
 8040afe:	481a      	ldr	r0, [pc, #104]	; (8040b68 <read_file+0x114>)
 8040b00:	f019 faf8 	bl	805a0f4 <iprintf>
	    return fresult;
 8040b04:	4b13      	ldr	r3, [pc, #76]	; (8040b54 <read_file+0x100>)
 8040b06:	781b      	ldrb	r3, [r3, #0]
 8040b08:	e01e      	b.n	8040b48 <read_file+0xf4>
	}

	buffer[f_size(&USBHFile)] = '\0';
 8040b0a:	4b14      	ldr	r3, [pc, #80]	; (8040b5c <read_file+0x108>)
 8040b0c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8040b10:	68bb      	ldr	r3, [r7, #8]
 8040b12:	4413      	add	r3, r2
 8040b14:	2200      	movs	r2, #0
 8040b16:	701a      	strb	r2, [r3, #0]


	printf("%s\r\n", buffer);
 8040b18:	68b9      	ldr	r1, [r7, #8]
 8040b1a:	4814      	ldr	r0, [pc, #80]	; (8040b6c <read_file+0x118>)
 8040b1c:	f019 faea 	bl	805a0f4 <iprintf>
	/* Close file */
	fresult = f_close(&USBHFile);
 8040b20:	480e      	ldr	r0, [pc, #56]	; (8040b5c <read_file+0x108>)
 8040b22:	f014 fa12 	bl	8054f4a <f_close>
 8040b26:	4603      	mov	r3, r0
 8040b28:	461a      	mov	r2, r3
 8040b2a:	4b0a      	ldr	r3, [pc, #40]	; (8040b54 <read_file+0x100>)
 8040b2c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8040b2e:	4b09      	ldr	r3, [pc, #36]	; (8040b54 <read_file+0x100>)
 8040b30:	781b      	ldrb	r3, [r3, #0]
 8040b32:	2b00      	cmp	r3, #0
 8040b34:	d006      	beq.n	8040b44 <read_file+0xf0>
	{
		printf("Error(%d) when closing file '%s'\r\n", fresult, filename);
 8040b36:	4b07      	ldr	r3, [pc, #28]	; (8040b54 <read_file+0x100>)
 8040b38:	781b      	ldrb	r3, [r3, #0]
 8040b3a:	687a      	ldr	r2, [r7, #4]
 8040b3c:	4619      	mov	r1, r3
 8040b3e:	480c      	ldr	r0, [pc, #48]	; (8040b70 <read_file+0x11c>)
 8040b40:	f019 fad8 	bl	805a0f4 <iprintf>
	}

	return fresult;
 8040b44:	4b03      	ldr	r3, [pc, #12]	; (8040b54 <read_file+0x100>)
 8040b46:	781b      	ldrb	r3, [r3, #0]
}
 8040b48:	4618      	mov	r0, r3
 8040b4a:	3710      	adds	r7, #16
 8040b4c:	46bd      	mov	sp, r7
 8040b4e:	bd80      	pop	{r7, pc}
 8040b50:	240000b8 	.word	0x240000b8
 8040b54:	240001d8 	.word	0x240001d8
 8040b58:	0805b530 	.word	0x0805b530
 8040b5c:	24001ba8 	.word	0x24001ba8
 8040b60:	0805b54c 	.word	0x0805b54c
 8040b64:	240001dc 	.word	0x240001dc
 8040b68:	0805b570 	.word	0x0805b570
 8040b6c:	0805b38c 	.word	0x0805b38c
 8040b70:	0805b594 	.word	0x0805b594

08040b74 <echo>:


/* HIGH LEVEL FUNCTIONS */
FRESULT echo(char *arguments){
 8040b74:	b580      	push	{r7, lr}
 8040b76:	b088      	sub	sp, #32
 8040b78:	af00      	add	r7, sp, #0
 8040b7a:	6078      	str	r0, [r7, #4]
	uint8_t argument_position = find_filename_argument(arguments);
 8040b7c:	6878      	ldr	r0, [r7, #4]
 8040b7e:	f000 f857 	bl	8040c30 <find_filename_argument>
 8040b82:	4603      	mov	r3, r0
 8040b84:	77fb      	strb	r3, [r7, #31]
		return FR_INVALID_NAME;
	}

	char *data_field_start_ptr, *data_field_end_ptr, *file_name_ptr;

	data_field_start_ptr = strchr(arguments, '"');
 8040b86:	2122      	movs	r1, #34	; 0x22
 8040b88:	6878      	ldr	r0, [r7, #4]
 8040b8a:	f019 fb71 	bl	805a270 <strchr>
 8040b8e:	61b8      	str	r0, [r7, #24]
	if(!data_field_start_ptr){
 8040b90:	69bb      	ldr	r3, [r7, #24]
 8040b92:	2b00      	cmp	r3, #0
 8040b94:	d104      	bne.n	8040ba0 <echo+0x2c>
		printf("Specify the text to be written in the file!\r\n");
 8040b96:	4822      	ldr	r0, [pc, #136]	; (8040c20 <echo+0xac>)
 8040b98:	f019 fb32 	bl	805a200 <puts>
		return FR_INVALID_NAME;
 8040b9c:	2306      	movs	r3, #6
 8040b9e:	e03a      	b.n	8040c16 <echo+0xa2>
	}

	data_field_end_ptr = strchr(data_field_start_ptr+1, '"');
 8040ba0:	69bb      	ldr	r3, [r7, #24]
 8040ba2:	3301      	adds	r3, #1
 8040ba4:	2122      	movs	r1, #34	; 0x22
 8040ba6:	4618      	mov	r0, r3
 8040ba8:	f019 fb62 	bl	805a270 <strchr>
 8040bac:	6178      	str	r0, [r7, #20]


	if(!data_field_end_ptr){
 8040bae:	697b      	ldr	r3, [r7, #20]
 8040bb0:	2b00      	cmp	r3, #0
 8040bb2:	d104      	bne.n	8040bbe <echo+0x4a>
		printf("Specify the text to be written in the file!\r\n");
 8040bb4:	481a      	ldr	r0, [pc, #104]	; (8040c20 <echo+0xac>)
 8040bb6:	f019 fb23 	bl	805a200 <puts>
		return FR_INVALID_NAME;
 8040bba:	2306      	movs	r3, #6
 8040bbc:	e02b      	b.n	8040c16 <echo+0xa2>
	}
	data_field_start_ptr++;
 8040bbe:	69bb      	ldr	r3, [r7, #24]
 8040bc0:	3301      	adds	r3, #1
 8040bc2:	61bb      	str	r3, [r7, #24]
	*data_field_end_ptr = '\0';
 8040bc4:	697b      	ldr	r3, [r7, #20]
 8040bc6:	2200      	movs	r2, #0
 8040bc8:	701a      	strb	r2, [r3, #0]

	file_name_ptr = strstr(data_field_end_ptr+1, ">>");
 8040bca:	697b      	ldr	r3, [r7, #20]
 8040bcc:	3301      	adds	r3, #1
 8040bce:	4915      	ldr	r1, [pc, #84]	; (8040c24 <echo+0xb0>)
 8040bd0:	4618      	mov	r0, r3
 8040bd2:	f019 fb6e 	bl	805a2b2 <strstr>
 8040bd6:	6138      	str	r0, [r7, #16]
	if(!file_name_ptr){
 8040bd8:	693b      	ldr	r3, [r7, #16]
 8040bda:	2b00      	cmp	r3, #0
 8040bdc:	d104      	bne.n	8040be8 <echo+0x74>
		printf("Specify the filename to be written in the file!\r\n");
 8040bde:	4812      	ldr	r0, [pc, #72]	; (8040c28 <echo+0xb4>)
 8040be0:	f019 fb0e 	bl	805a200 <puts>
		return FR_INVALID_NAME;
 8040be4:	2306      	movs	r3, #6
 8040be6:	e016      	b.n	8040c16 <echo+0xa2>
	}

	uint8_t filename_position = find_filename_argument(file_name_ptr+2);
 8040be8:	693b      	ldr	r3, [r7, #16]
 8040bea:	3302      	adds	r3, #2
 8040bec:	4618      	mov	r0, r3
 8040bee:	f000 f81f 	bl	8040c30 <find_filename_argument>
 8040bf2:	4603      	mov	r3, r0
 8040bf4:	73fb      	strb	r3, [r7, #15]
	if(filename_position == ARG_ERR){
		printf("Specify the filename to be written in the file!\r\n");
		return FR_INVALID_NAME;
	}

	file_name_ptr = file_name_ptr + filename_position + 2;
 8040bf6:	7bfb      	ldrb	r3, [r7, #15]
 8040bf8:	3302      	adds	r3, #2
 8040bfa:	693a      	ldr	r2, [r7, #16]
 8040bfc:	4413      	add	r3, r2
 8040bfe:	613b      	str	r3, [r7, #16]

	fresult = write_file(file_name_ptr, data_field_start_ptr, FA_OPEN_ALWAYS | FA_WRITE);
 8040c00:	2212      	movs	r2, #18
 8040c02:	69b9      	ldr	r1, [r7, #24]
 8040c04:	6938      	ldr	r0, [r7, #16]
 8040c06:	f7ff fec3 	bl	8040990 <write_file>
 8040c0a:	4603      	mov	r3, r0
 8040c0c:	461a      	mov	r2, r3
 8040c0e:	4b07      	ldr	r3, [pc, #28]	; (8040c2c <echo+0xb8>)
 8040c10:	701a      	strb	r2, [r3, #0]
	return fresult;
 8040c12:	4b06      	ldr	r3, [pc, #24]	; (8040c2c <echo+0xb8>)
 8040c14:	781b      	ldrb	r3, [r3, #0]

}
 8040c16:	4618      	mov	r0, r3
 8040c18:	3720      	adds	r7, #32
 8040c1a:	46bd      	mov	sp, r7
 8040c1c:	bd80      	pop	{r7, pc}
 8040c1e:	bf00      	nop
 8040c20:	0805b5b8 	.word	0x0805b5b8
 8040c24:	0805b5e8 	.word	0x0805b5e8
 8040c28:	0805b5ec 	.word	0x0805b5ec
 8040c2c:	240001d8 	.word	0x240001d8

08040c30 <find_filename_argument>:

int8_t find_filename_argument(char* command)
{
 8040c30:	b580      	push	{r7, lr}
 8040c32:	b086      	sub	sp, #24
 8040c34:	af00      	add	r7, sp, #0
 8040c36:	6078      	str	r0, [r7, #4]
	char* args_start = command;
 8040c38:	687b      	ldr	r3, [r7, #4]
 8040c3a:	613b      	str	r3, [r7, #16]
	uint8_t len = strlen(args_start);
 8040c3c:	6938      	ldr	r0, [r7, #16]
 8040c3e:	f7ff fb71 	bl	8040324 <strlen>
 8040c42:	4603      	mov	r3, r0
 8040c44:	73fb      	strb	r3, [r7, #15]

	int8_t i = 0;
 8040c46:	2300      	movs	r3, #0
 8040c48:	75fb      	strb	r3, [r7, #23]

	if(len == 0){
 8040c4a:	7bfb      	ldrb	r3, [r7, #15]
 8040c4c:	2b00      	cmp	r3, #0
 8040c4e:	d102      	bne.n	8040c56 <find_filename_argument+0x26>
		return ARG_ERR;
 8040c50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8040c54:	e019      	b.n	8040c8a <find_filename_argument+0x5a>
	}

	for(i = 0; i <= len; i ++)
 8040c56:	2300      	movs	r3, #0
 8040c58:	75fb      	strb	r3, [r7, #23]
 8040c5a:	e00f      	b.n	8040c7c <find_filename_argument+0x4c>
	{
		if(args_start[i] != ' ')
 8040c5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8040c60:	693a      	ldr	r2, [r7, #16]
 8040c62:	4413      	add	r3, r2
 8040c64:	781b      	ldrb	r3, [r3, #0]
 8040c66:	2b20      	cmp	r3, #32
 8040c68:	d002      	beq.n	8040c70 <find_filename_argument+0x40>
		{
			return i;
 8040c6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8040c6e:	e00c      	b.n	8040c8a <find_filename_argument+0x5a>
	for(i = 0; i <= len; i ++)
 8040c70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8040c74:	b2db      	uxtb	r3, r3
 8040c76:	3301      	adds	r3, #1
 8040c78:	b2db      	uxtb	r3, r3
 8040c7a:	75fb      	strb	r3, [r7, #23]
 8040c7c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8040c80:	7bfb      	ldrb	r3, [r7, #15]
 8040c82:	429a      	cmp	r2, r3
 8040c84:	ddea      	ble.n	8040c5c <find_filename_argument+0x2c>
			break;
		}
	}

	return ARG_ERR;
 8040c86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8040c8a:	4618      	mov	r0, r3
 8040c8c:	3718      	adds	r7, #24
 8040c8e:	46bd      	mov	sp, r7
 8040c90:	bd80      	pop	{r7, pc}
	...

08040c94 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8040c94:	b480      	push	{r7}
 8040c96:	b085      	sub	sp, #20
 8040c98:	af00      	add	r7, sp, #0
 8040c9a:	60f8      	str	r0, [r7, #12]
 8040c9c:	60b9      	str	r1, [r7, #8]
 8040c9e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8040ca0:	68fb      	ldr	r3, [r7, #12]
 8040ca2:	4a07      	ldr	r2, [pc, #28]	; (8040cc0 <vApplicationGetIdleTaskMemory+0x2c>)
 8040ca4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8040ca6:	68bb      	ldr	r3, [r7, #8]
 8040ca8:	4a06      	ldr	r2, [pc, #24]	; (8040cc4 <vApplicationGetIdleTaskMemory+0x30>)
 8040caa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8040cac:	687b      	ldr	r3, [r7, #4]
 8040cae:	2280      	movs	r2, #128	; 0x80
 8040cb0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8040cb2:	bf00      	nop
 8040cb4:	3714      	adds	r7, #20
 8040cb6:	46bd      	mov	sp, r7
 8040cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040cbc:	4770      	bx	lr
 8040cbe:	bf00      	nop
 8040cc0:	240001e8 	.word	0x240001e8
 8040cc4:	2400023c 	.word	0x2400023c

08040cc8 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8040cc8:	b480      	push	{r7}
 8040cca:	b085      	sub	sp, #20
 8040ccc:	af00      	add	r7, sp, #0
 8040cce:	60f8      	str	r0, [r7, #12]
 8040cd0:	60b9      	str	r1, [r7, #8]
 8040cd2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8040cd4:	68fb      	ldr	r3, [r7, #12]
 8040cd6:	4a07      	ldr	r2, [pc, #28]	; (8040cf4 <vApplicationGetTimerTaskMemory+0x2c>)
 8040cd8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8040cda:	68bb      	ldr	r3, [r7, #8]
 8040cdc:	4a06      	ldr	r2, [pc, #24]	; (8040cf8 <vApplicationGetTimerTaskMemory+0x30>)
 8040cde:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8040ce0:	687b      	ldr	r3, [r7, #4]
 8040ce2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8040ce6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8040ce8:	bf00      	nop
 8040cea:	3714      	adds	r7, #20
 8040cec:	46bd      	mov	sp, r7
 8040cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040cf2:	4770      	bx	lr
 8040cf4:	2400043c 	.word	0x2400043c
 8040cf8:	24000490 	.word	0x24000490

08040cfc <_write>:

uint8_t UART_TX_BUFFER[UART_TX_BUFFER_LENGTH];
uint8_t UART_RX_BUFFER[UART_RX_BUFFER_LENGTH];

int _write(int file, uint8_t *data, int len)
{
 8040cfc:	b580      	push	{r7, lr}
 8040cfe:	b086      	sub	sp, #24
 8040d00:	af00      	add	r7, sp, #0
 8040d02:	60f8      	str	r0, [r7, #12]
 8040d04:	60b9      	str	r1, [r7, #8]
 8040d06:	607a      	str	r2, [r7, #4]

   /* Lock Semaphore to ensure print buffer is used just by one thread. */
   osSemaphoreWait(UART_TX_SemaphoreHandle, osWaitForever);
 8040d08:	4b0f      	ldr	r3, [pc, #60]	; (8040d48 <_write+0x4c>)
 8040d0a:	681b      	ldr	r3, [r3, #0]
 8040d0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8040d10:	4618      	mov	r0, r3
 8040d12:	f015 fa35 	bl	8056180 <osSemaphoreWait>

   memcpy(UART_TX_BUFFER, data, len);
 8040d16:	687b      	ldr	r3, [r7, #4]
 8040d18:	461a      	mov	r2, r3
 8040d1a:	68b9      	ldr	r1, [r7, #8]
 8040d1c:	480b      	ldr	r0, [pc, #44]	; (8040d4c <_write+0x50>)
 8040d1e:	f019 f8f3 	bl	8059f08 <memcpy>

   HAL_StatusTypeDef status =
      HAL_UART_Transmit_DMA(&huart3, (uint8_t*)UART_TX_BUFFER, len);
 8040d22:	687b      	ldr	r3, [r7, #4]
 8040d24:	b29b      	uxth	r3, r3
 8040d26:	461a      	mov	r2, r3
 8040d28:	4908      	ldr	r1, [pc, #32]	; (8040d4c <_write+0x50>)
 8040d2a:	4809      	ldr	r0, [pc, #36]	; (8040d50 <_write+0x54>)
 8040d2c:	f008 fd2c 	bl	8049788 <HAL_UART_Transmit_DMA>
 8040d30:	4603      	mov	r3, r0
 8040d32:	75fb      	strb	r3, [r7, #23]

   // return # of bytes written - as best we can tell
   return (status == HAL_OK ? len : 0);
 8040d34:	7dfb      	ldrb	r3, [r7, #23]
 8040d36:	2b00      	cmp	r3, #0
 8040d38:	d101      	bne.n	8040d3e <_write+0x42>
 8040d3a:	687b      	ldr	r3, [r7, #4]
 8040d3c:	e000      	b.n	8040d40 <_write+0x44>
 8040d3e:	2300      	movs	r3, #0
}
 8040d40:	4618      	mov	r0, r3
 8040d42:	3718      	adds	r7, #24
 8040d44:	46bd      	mov	sp, r7
 8040d46:	bd80      	pop	{r7, pc}
 8040d48:	24000a20 	.word	0x24000a20
 8040d4c:	24000a24 	.word	0x24000a24
 8040d50:	24000890 	.word	0x24000890

08040d54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8040d54:	b5b0      	push	{r4, r5, r7, lr}
 8040d56:	b09a      	sub	sp, #104	; 0x68
 8040d58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8040d5a:	f001 f96f 	bl	804203c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8040d5e:	f000 f86f 	bl	8040e40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8040d62:	f000 f951 	bl	8041008 <MX_GPIO_Init>
  MX_FATFS_Init();
 8040d66:	f00b fdc9 	bl	804c8fc <MX_FATFS_Init>
  MX_DMA_Init();
 8040d6a:	f000 f925 	bl	8040fb8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8040d6e:	f000 f8d7 	bl	8040f20 <MX_USART3_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of UART_TX_Semaphore */
  osSemaphoreDef(UART_TX_Semaphore);
 8040d72:	2300      	movs	r3, #0
 8040d74:	663b      	str	r3, [r7, #96]	; 0x60
 8040d76:	2300      	movs	r3, #0
 8040d78:	667b      	str	r3, [r7, #100]	; 0x64
  UART_TX_SemaphoreHandle = osSemaphoreCreate(osSemaphore(UART_TX_Semaphore), 1);
 8040d7a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8040d7e:	2101      	movs	r1, #1
 8040d80:	4618      	mov	r0, r3
 8040d82:	f015 f9ca 	bl	805611a <osSemaphoreCreate>
 8040d86:	4603      	mov	r3, r0
 8040d88:	4a24      	ldr	r2, [pc, #144]	; (8040e1c <main+0xc8>)
 8040d8a:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of Timer1 */
  osTimerDef(Timer1, Timer1_Callback);
 8040d8c:	4b24      	ldr	r3, [pc, #144]	; (8040e20 <main+0xcc>)
 8040d8e:	65bb      	str	r3, [r7, #88]	; 0x58
 8040d90:	2300      	movs	r3, #0
 8040d92:	65fb      	str	r3, [r7, #92]	; 0x5c
  Timer1Handle = osTimerCreate(osTimer(Timer1), osTimerPeriodic, NULL);
 8040d94:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8040d98:	2200      	movs	r2, #0
 8040d9a:	2101      	movs	r1, #1
 8040d9c:	4618      	mov	r0, r3
 8040d9e:	f015 f8d9 	bl	8055f54 <osTimerCreate>
 8040da2:	4603      	mov	r3, r0
 8040da4:	4a1f      	ldr	r2, [pc, #124]	; (8040e24 <main+0xd0>)
 8040da6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8040da8:	4b1f      	ldr	r3, [pc, #124]	; (8040e28 <main+0xd4>)
 8040daa:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8040dae:	461d      	mov	r5, r3
 8040db0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8040db2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8040db4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8040db8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8040dbc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8040dc0:	2100      	movs	r1, #0
 8040dc2:	4618      	mov	r0, r3
 8040dc4:	f015 f865 	bl	8055e92 <osThreadCreate>
 8040dc8:	4603      	mov	r3, r0
 8040dca:	4a18      	ldr	r2, [pc, #96]	; (8040e2c <main+0xd8>)
 8040dcc:	6013      	str	r3, [r2, #0]

  /* definition and creation of USBFileSystemTa */
  osThreadDef(USBFileSystemTa, USBFileSystemTask_Start, osPriorityNormal, 0, 128);
 8040dce:	4b18      	ldr	r3, [pc, #96]	; (8040e30 <main+0xdc>)
 8040dd0:	f107 0420 	add.w	r4, r7, #32
 8040dd4:	461d      	mov	r5, r3
 8040dd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8040dd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8040dda:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8040dde:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USBFileSystemTaHandle = osThreadCreate(osThread(USBFileSystemTa), NULL);
 8040de2:	f107 0320 	add.w	r3, r7, #32
 8040de6:	2100      	movs	r1, #0
 8040de8:	4618      	mov	r0, r3
 8040dea:	f015 f852 	bl	8055e92 <osThreadCreate>
 8040dee:	4603      	mov	r3, r0
 8040df0:	4a10      	ldr	r2, [pc, #64]	; (8040e34 <main+0xe0>)
 8040df2:	6013      	str	r3, [r2, #0]

  /* definition and creation of ConsoleTask */
  osThreadDef(ConsoleTask, ConsoleTask_Start, osPriorityNormal, 0, 1024);
 8040df4:	4b10      	ldr	r3, [pc, #64]	; (8040e38 <main+0xe4>)
 8040df6:	1d3c      	adds	r4, r7, #4
 8040df8:	461d      	mov	r5, r3
 8040dfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8040dfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8040dfe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8040e02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ConsoleTaskHandle = osThreadCreate(osThread(ConsoleTask), NULL);
 8040e06:	1d3b      	adds	r3, r7, #4
 8040e08:	2100      	movs	r1, #0
 8040e0a:	4618      	mov	r0, r3
 8040e0c:	f015 f841 	bl	8055e92 <osThreadCreate>
 8040e10:	4603      	mov	r3, r0
 8040e12:	4a0a      	ldr	r2, [pc, #40]	; (8040e3c <main+0xe8>)
 8040e14:	6013      	str	r3, [r2, #0]
  /* add threads, ... */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8040e16:	f015 f835 	bl	8055e84 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8040e1a:	e7fe      	b.n	8040e1a <main+0xc6>
 8040e1c:	24000a20 	.word	0x24000a20
 8040e20:	08041a65 	.word	0x08041a65
 8040e24:	24000a1c 	.word	0x24000a1c
 8040e28:	0805b648 	.word	0x0805b648
 8040e2c:	24000a10 	.word	0x24000a10
 8040e30:	0805b664 	.word	0x0805b664
 8040e34:	24000a14 	.word	0x24000a14
 8040e38:	0805b680 	.word	0x0805b680
 8040e3c:	24000a18 	.word	0x24000a18

08040e40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8040e40:	b580      	push	{r7, lr}
 8040e42:	b09c      	sub	sp, #112	; 0x70
 8040e44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8040e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040e4a:	224c      	movs	r2, #76	; 0x4c
 8040e4c:	2100      	movs	r1, #0
 8040e4e:	4618      	mov	r0, r3
 8040e50:	f019 f868 	bl	8059f24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8040e54:	1d3b      	adds	r3, r7, #4
 8040e56:	2220      	movs	r2, #32
 8040e58:	2100      	movs	r1, #0
 8040e5a:	4618      	mov	r0, r3
 8040e5c:	f019 f862 	bl	8059f24 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8040e60:	2002      	movs	r0, #2
 8040e62:	f005 fe6b 	bl	8046b3c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8040e66:	2300      	movs	r3, #0
 8040e68:	603b      	str	r3, [r7, #0]
 8040e6a:	4b2c      	ldr	r3, [pc, #176]	; (8040f1c <SystemClock_Config+0xdc>)
 8040e6c:	699b      	ldr	r3, [r3, #24]
 8040e6e:	4a2b      	ldr	r2, [pc, #172]	; (8040f1c <SystemClock_Config+0xdc>)
 8040e70:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8040e74:	6193      	str	r3, [r2, #24]
 8040e76:	4b29      	ldr	r3, [pc, #164]	; (8040f1c <SystemClock_Config+0xdc>)
 8040e78:	699b      	ldr	r3, [r3, #24]
 8040e7a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8040e7e:	603b      	str	r3, [r7, #0]
 8040e80:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8040e82:	bf00      	nop
 8040e84:	4b25      	ldr	r3, [pc, #148]	; (8040f1c <SystemClock_Config+0xdc>)
 8040e86:	699b      	ldr	r3, [r3, #24]
 8040e88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8040e8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8040e90:	d1f8      	bne.n	8040e84 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8040e92:	2321      	movs	r3, #33	; 0x21
 8040e94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8040e96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8040e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8040e9c:	2301      	movs	r3, #1
 8040e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8040ea0:	2302      	movs	r3, #2
 8040ea2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8040ea4:	2302      	movs	r3, #2
 8040ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8040ea8:	2304      	movs	r3, #4
 8040eaa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8040eac:	f240 1313 	movw	r3, #275	; 0x113
 8040eb0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8040eb2:	2301      	movs	r3, #1
 8040eb4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8040eb6:	2304      	movs	r3, #4
 8040eb8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8040eba:	2302      	movs	r3, #2
 8040ebc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8040ebe:	2304      	movs	r3, #4
 8040ec0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8040ec2:	2300      	movs	r3, #0
 8040ec4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8040ec6:	2300      	movs	r3, #0
 8040ec8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8040eca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040ece:	4618      	mov	r0, r3
 8040ed0:	f005 fe7e 	bl	8046bd0 <HAL_RCC_OscConfig>
 8040ed4:	4603      	mov	r3, r0
 8040ed6:	2b00      	cmp	r3, #0
 8040ed8:	d001      	beq.n	8040ede <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8040eda:	f000 fddf 	bl	8041a9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8040ede:	233f      	movs	r3, #63	; 0x3f
 8040ee0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8040ee2:	2303      	movs	r3, #3
 8040ee4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8040ee6:	2300      	movs	r3, #0
 8040ee8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8040eea:	2308      	movs	r3, #8
 8040eec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8040eee:	2340      	movs	r3, #64	; 0x40
 8040ef0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8040ef2:	2340      	movs	r3, #64	; 0x40
 8040ef4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8040ef6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8040efa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8040efc:	2340      	movs	r3, #64	; 0x40
 8040efe:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8040f00:	1d3b      	adds	r3, r7, #4
 8040f02:	2103      	movs	r1, #3
 8040f04:	4618      	mov	r0, r3
 8040f06:	f006 fa11 	bl	804732c <HAL_RCC_ClockConfig>
 8040f0a:	4603      	mov	r3, r0
 8040f0c:	2b00      	cmp	r3, #0
 8040f0e:	d001      	beq.n	8040f14 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8040f10:	f000 fdc4 	bl	8041a9c <Error_Handler>
  }
}
 8040f14:	bf00      	nop
 8040f16:	3770      	adds	r7, #112	; 0x70
 8040f18:	46bd      	mov	sp, r7
 8040f1a:	bd80      	pop	{r7, pc}
 8040f1c:	58024800 	.word	0x58024800

08040f20 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8040f20:	b580      	push	{r7, lr}
 8040f22:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8040f24:	4b22      	ldr	r3, [pc, #136]	; (8040fb0 <MX_USART3_UART_Init+0x90>)
 8040f26:	4a23      	ldr	r2, [pc, #140]	; (8040fb4 <MX_USART3_UART_Init+0x94>)
 8040f28:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8040f2a:	4b21      	ldr	r3, [pc, #132]	; (8040fb0 <MX_USART3_UART_Init+0x90>)
 8040f2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8040f30:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8040f32:	4b1f      	ldr	r3, [pc, #124]	; (8040fb0 <MX_USART3_UART_Init+0x90>)
 8040f34:	2200      	movs	r2, #0
 8040f36:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8040f38:	4b1d      	ldr	r3, [pc, #116]	; (8040fb0 <MX_USART3_UART_Init+0x90>)
 8040f3a:	2200      	movs	r2, #0
 8040f3c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8040f3e:	4b1c      	ldr	r3, [pc, #112]	; (8040fb0 <MX_USART3_UART_Init+0x90>)
 8040f40:	2200      	movs	r2, #0
 8040f42:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8040f44:	4b1a      	ldr	r3, [pc, #104]	; (8040fb0 <MX_USART3_UART_Init+0x90>)
 8040f46:	220c      	movs	r2, #12
 8040f48:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8040f4a:	4b19      	ldr	r3, [pc, #100]	; (8040fb0 <MX_USART3_UART_Init+0x90>)
 8040f4c:	2200      	movs	r2, #0
 8040f4e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8040f50:	4b17      	ldr	r3, [pc, #92]	; (8040fb0 <MX_USART3_UART_Init+0x90>)
 8040f52:	2200      	movs	r2, #0
 8040f54:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8040f56:	4b16      	ldr	r3, [pc, #88]	; (8040fb0 <MX_USART3_UART_Init+0x90>)
 8040f58:	2200      	movs	r2, #0
 8040f5a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8040f5c:	4b14      	ldr	r3, [pc, #80]	; (8040fb0 <MX_USART3_UART_Init+0x90>)
 8040f5e:	2200      	movs	r2, #0
 8040f60:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8040f62:	4b13      	ldr	r3, [pc, #76]	; (8040fb0 <MX_USART3_UART_Init+0x90>)
 8040f64:	2200      	movs	r2, #0
 8040f66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8040f68:	4811      	ldr	r0, [pc, #68]	; (8040fb0 <MX_USART3_UART_Init+0x90>)
 8040f6a:	f008 fbbd 	bl	80496e8 <HAL_UART_Init>
 8040f6e:	4603      	mov	r3, r0
 8040f70:	2b00      	cmp	r3, #0
 8040f72:	d001      	beq.n	8040f78 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8040f74:	f000 fd92 	bl	8041a9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8040f78:	2100      	movs	r1, #0
 8040f7a:	480d      	ldr	r0, [pc, #52]	; (8040fb0 <MX_USART3_UART_Init+0x90>)
 8040f7c:	f00a fbac 	bl	804b6d8 <HAL_UARTEx_SetTxFifoThreshold>
 8040f80:	4603      	mov	r3, r0
 8040f82:	2b00      	cmp	r3, #0
 8040f84:	d001      	beq.n	8040f8a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8040f86:	f000 fd89 	bl	8041a9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8040f8a:	2100      	movs	r1, #0
 8040f8c:	4808      	ldr	r0, [pc, #32]	; (8040fb0 <MX_USART3_UART_Init+0x90>)
 8040f8e:	f00a fbe1 	bl	804b754 <HAL_UARTEx_SetRxFifoThreshold>
 8040f92:	4603      	mov	r3, r0
 8040f94:	2b00      	cmp	r3, #0
 8040f96:	d001      	beq.n	8040f9c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8040f98:	f000 fd80 	bl	8041a9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8040f9c:	4804      	ldr	r0, [pc, #16]	; (8040fb0 <MX_USART3_UART_Init+0x90>)
 8040f9e:	f00a fb62 	bl	804b666 <HAL_UARTEx_DisableFifoMode>
 8040fa2:	4603      	mov	r3, r0
 8040fa4:	2b00      	cmp	r3, #0
 8040fa6:	d001      	beq.n	8040fac <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8040fa8:	f000 fd78 	bl	8041a9c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8040fac:	bf00      	nop
 8040fae:	bd80      	pop	{r7, pc}
 8040fb0:	24000890 	.word	0x24000890
 8040fb4:	40004800 	.word	0x40004800

08040fb8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8040fb8:	b580      	push	{r7, lr}
 8040fba:	b082      	sub	sp, #8
 8040fbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8040fbe:	4b11      	ldr	r3, [pc, #68]	; (8041004 <MX_DMA_Init+0x4c>)
 8040fc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8040fc4:	4a0f      	ldr	r2, [pc, #60]	; (8041004 <MX_DMA_Init+0x4c>)
 8040fc6:	f043 0301 	orr.w	r3, r3, #1
 8040fca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8040fce:	4b0d      	ldr	r3, [pc, #52]	; (8041004 <MX_DMA_Init+0x4c>)
 8040fd0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8040fd4:	f003 0301 	and.w	r3, r3, #1
 8040fd8:	607b      	str	r3, [r7, #4]
 8040fda:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8040fdc:	2200      	movs	r2, #0
 8040fde:	2105      	movs	r1, #5
 8040fe0:	200b      	movs	r0, #11
 8040fe2:	f001 f963 	bl	80422ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8040fe6:	200b      	movs	r0, #11
 8040fe8:	f001 f97a 	bl	80422e0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8040fec:	2200      	movs	r2, #0
 8040fee:	2105      	movs	r1, #5
 8040ff0:	200c      	movs	r0, #12
 8040ff2:	f001 f95b 	bl	80422ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8040ff6:	200c      	movs	r0, #12
 8040ff8:	f001 f972 	bl	80422e0 <HAL_NVIC_EnableIRQ>

}
 8040ffc:	bf00      	nop
 8040ffe:	3708      	adds	r7, #8
 8041000:	46bd      	mov	sp, r7
 8041002:	bd80      	pop	{r7, pc}
 8041004:	58024400 	.word	0x58024400

08041008 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8041008:	b580      	push	{r7, lr}
 804100a:	b08c      	sub	sp, #48	; 0x30
 804100c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804100e:	f107 031c 	add.w	r3, r7, #28
 8041012:	2200      	movs	r2, #0
 8041014:	601a      	str	r2, [r3, #0]
 8041016:	605a      	str	r2, [r3, #4]
 8041018:	609a      	str	r2, [r3, #8]
 804101a:	60da      	str	r2, [r3, #12]
 804101c:	611a      	str	r2, [r3, #16]


  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 804101e:	4b83      	ldr	r3, [pc, #524]	; (804122c <MX_GPIO_Init+0x224>)
 8041020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8041024:	4a81      	ldr	r2, [pc, #516]	; (804122c <MX_GPIO_Init+0x224>)
 8041026:	f043 0304 	orr.w	r3, r3, #4
 804102a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 804102e:	4b7f      	ldr	r3, [pc, #508]	; (804122c <MX_GPIO_Init+0x224>)
 8041030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8041034:	f003 0304 	and.w	r3, r3, #4
 8041038:	61bb      	str	r3, [r7, #24]
 804103a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 804103c:	4b7b      	ldr	r3, [pc, #492]	; (804122c <MX_GPIO_Init+0x224>)
 804103e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8041042:	4a7a      	ldr	r2, [pc, #488]	; (804122c <MX_GPIO_Init+0x224>)
 8041044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8041048:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 804104c:	4b77      	ldr	r3, [pc, #476]	; (804122c <MX_GPIO_Init+0x224>)
 804104e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8041052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8041056:	617b      	str	r3, [r7, #20]
 8041058:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 804105a:	4b74      	ldr	r3, [pc, #464]	; (804122c <MX_GPIO_Init+0x224>)
 804105c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8041060:	4a72      	ldr	r2, [pc, #456]	; (804122c <MX_GPIO_Init+0x224>)
 8041062:	f043 0301 	orr.w	r3, r3, #1
 8041066:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 804106a:	4b70      	ldr	r3, [pc, #448]	; (804122c <MX_GPIO_Init+0x224>)
 804106c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8041070:	f003 0301 	and.w	r3, r3, #1
 8041074:	613b      	str	r3, [r7, #16]
 8041076:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8041078:	4b6c      	ldr	r3, [pc, #432]	; (804122c <MX_GPIO_Init+0x224>)
 804107a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 804107e:	4a6b      	ldr	r2, [pc, #428]	; (804122c <MX_GPIO_Init+0x224>)
 8041080:	f043 0302 	orr.w	r3, r3, #2
 8041084:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8041088:	4b68      	ldr	r3, [pc, #416]	; (804122c <MX_GPIO_Init+0x224>)
 804108a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 804108e:	f003 0302 	and.w	r3, r3, #2
 8041092:	60fb      	str	r3, [r7, #12]
 8041094:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8041096:	4b65      	ldr	r3, [pc, #404]	; (804122c <MX_GPIO_Init+0x224>)
 8041098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 804109c:	4a63      	ldr	r2, [pc, #396]	; (804122c <MX_GPIO_Init+0x224>)
 804109e:	f043 0308 	orr.w	r3, r3, #8
 80410a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80410a6:	4b61      	ldr	r3, [pc, #388]	; (804122c <MX_GPIO_Init+0x224>)
 80410a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80410ac:	f003 0308 	and.w	r3, r3, #8
 80410b0:	60bb      	str	r3, [r7, #8]
 80410b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80410b4:	4b5d      	ldr	r3, [pc, #372]	; (804122c <MX_GPIO_Init+0x224>)
 80410b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80410ba:	4a5c      	ldr	r2, [pc, #368]	; (804122c <MX_GPIO_Init+0x224>)
 80410bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80410c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80410c4:	4b59      	ldr	r3, [pc, #356]	; (804122c <MX_GPIO_Init+0x224>)
 80410c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80410ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80410ce:	607b      	str	r3, [r7, #4]
 80410d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80410d2:	4b56      	ldr	r3, [pc, #344]	; (804122c <MX_GPIO_Init+0x224>)
 80410d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80410d8:	4a54      	ldr	r2, [pc, #336]	; (804122c <MX_GPIO_Init+0x224>)
 80410da:	f043 0310 	orr.w	r3, r3, #16
 80410de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80410e2:	4b52      	ldr	r3, [pc, #328]	; (804122c <MX_GPIO_Init+0x224>)
 80410e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80410e8:	f003 0310 	and.w	r3, r3, #16
 80410ec:	603b      	str	r3, [r7, #0]
 80410ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80410f0:	2200      	movs	r2, #0
 80410f2:	f244 0101 	movw	r1, #16385	; 0x4001
 80410f6:	484e      	ldr	r0, [pc, #312]	; (8041230 <MX_GPIO_Init+0x228>)
 80410f8:	f004 f8e2 	bl	80452c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80410fc:	2200      	movs	r2, #0
 80410fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8041102:	484c      	ldr	r0, [pc, #304]	; (8041234 <MX_GPIO_Init+0x22c>)
 8041104:	f004 f8dc 	bl	80452c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, USB_VBUS_Pin|LED_YELLOW_Pin, GPIO_PIN_SET);
 8041108:	2201      	movs	r2, #1
 804110a:	2103      	movs	r1, #3
 804110c:	484a      	ldr	r0, [pc, #296]	; (8041238 <MX_GPIO_Init+0x230>)
 804110e:	f004 f8d7 	bl	80452c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8041112:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8041116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8041118:	2300      	movs	r3, #0
 804111a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 804111c:	2300      	movs	r3, #0
 804111e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8041120:	f107 031c 	add.w	r3, r7, #28
 8041124:	4619      	mov	r1, r3
 8041126:	4845      	ldr	r0, [pc, #276]	; (804123c <MX_GPIO_Init+0x234>)
 8041128:	f003 ff22 	bl	8044f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 804112c:	2332      	movs	r3, #50	; 0x32
 804112e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041130:	2302      	movs	r3, #2
 8041132:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041134:	2300      	movs	r3, #0
 8041136:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041138:	2300      	movs	r3, #0
 804113a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 804113c:	230b      	movs	r3, #11
 804113e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8041140:	f107 031c 	add.w	r3, r7, #28
 8041144:	4619      	mov	r1, r3
 8041146:	483d      	ldr	r0, [pc, #244]	; (804123c <MX_GPIO_Init+0x234>)
 8041148:	f003 ff12 	bl	8044f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 804114c:	2386      	movs	r3, #134	; 0x86
 804114e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041150:	2302      	movs	r3, #2
 8041152:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041154:	2300      	movs	r3, #0
 8041156:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041158:	2300      	movs	r3, #0
 804115a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 804115c:	230b      	movs	r3, #11
 804115e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8041160:	f107 031c 	add.w	r3, r7, #28
 8041164:	4619      	mov	r1, r3
 8041166:	4836      	ldr	r0, [pc, #216]	; (8041240 <MX_GPIO_Init+0x238>)
 8041168:	f003 ff02 	bl	8044f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 804116c:	f244 0301 	movw	r3, #16385	; 0x4001
 8041170:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8041172:	2301      	movs	r3, #1
 8041174:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041176:	2300      	movs	r3, #0
 8041178:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804117a:	2300      	movs	r3, #0
 804117c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 804117e:	f107 031c 	add.w	r3, r7, #28
 8041182:	4619      	mov	r1, r3
 8041184:	482a      	ldr	r0, [pc, #168]	; (8041230 <MX_GPIO_Init+0x228>)
 8041186:	f003 fef3 	bl	8044f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 804118a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 804118e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041190:	2302      	movs	r3, #2
 8041192:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041194:	2300      	movs	r3, #0
 8041196:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041198:	2300      	movs	r3, #0
 804119a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 804119c:	230b      	movs	r3, #11
 804119e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80411a0:	f107 031c 	add.w	r3, r7, #28
 80411a4:	4619      	mov	r1, r3
 80411a6:	4822      	ldr	r0, [pc, #136]	; (8041230 <MX_GPIO_Init+0x228>)
 80411a8:	f003 fee2 	bl	8044f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80411ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80411b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80411b2:	2301      	movs	r3, #1
 80411b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80411b6:	2300      	movs	r3, #0
 80411b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80411ba:	2300      	movs	r3, #0
 80411bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80411be:	f107 031c 	add.w	r3, r7, #28
 80411c2:	4619      	mov	r1, r3
 80411c4:	481b      	ldr	r0, [pc, #108]	; (8041234 <MX_GPIO_Init+0x22c>)
 80411c6:	f003 fed3 	bl	8044f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80411ca:	2380      	movs	r3, #128	; 0x80
 80411cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80411ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80411d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80411d4:	2300      	movs	r3, #0
 80411d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80411d8:	f107 031c 	add.w	r3, r7, #28
 80411dc:	4619      	mov	r1, r3
 80411de:	4819      	ldr	r0, [pc, #100]	; (8041244 <MX_GPIO_Init+0x23c>)
 80411e0:	f003 fec6 	bl	8044f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80411e4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80411e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80411ea:	2302      	movs	r3, #2
 80411ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80411ee:	2300      	movs	r3, #0
 80411f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80411f2:	2300      	movs	r3, #0
 80411f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80411f6:	230b      	movs	r3, #11
 80411f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80411fa:	f107 031c 	add.w	r3, r7, #28
 80411fe:	4619      	mov	r1, r3
 8041200:	4810      	ldr	r0, [pc, #64]	; (8041244 <MX_GPIO_Init+0x23c>)
 8041202:	f003 feb5 	bl	8044f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_VBUS_Pin LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin|LED_YELLOW_Pin;
 8041206:	2303      	movs	r3, #3
 8041208:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 804120a:	2301      	movs	r3, #1
 804120c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 804120e:	2300      	movs	r3, #0
 8041210:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041212:	2300      	movs	r3, #0
 8041214:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8041216:	f107 031c 	add.w	r3, r7, #28
 804121a:	4619      	mov	r1, r3
 804121c:	4806      	ldr	r0, [pc, #24]	; (8041238 <MX_GPIO_Init+0x230>)
 804121e:	f003 fea7 	bl	8044f70 <HAL_GPIO_Init>

}
 8041222:	bf00      	nop
 8041224:	3730      	adds	r7, #48	; 0x30
 8041226:	46bd      	mov	sp, r7
 8041228:	bd80      	pop	{r7, pc}
 804122a:	bf00      	nop
 804122c:	58024400 	.word	0x58024400
 8041230:	58020400 	.word	0x58020400
 8041234:	58020c00 	.word	0x58020c00
 8041238:	58021000 	.word	0x58021000
 804123c:	58020800 	.word	0x58020800
 8041240:	58020000 	.word	0x58020000
 8041244:	58021800 	.word	0x58021800

08041248 <HAL_UART_TxCpltCallback>:

char received_command[UART_RX_BUFFER_LENGTH];

/* This function release the semaphore if the TX event is finished. */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8041248:	b580      	push	{r7, lr}
 804124a:	b082      	sub	sp, #8
 804124c:	af00      	add	r7, sp, #0
 804124e:	6078      	str	r0, [r7, #4]

	/* Release Semaphore to execute next print operation */
	osSemaphoreRelease(UART_TX_SemaphoreHandle);
 8041250:	4b06      	ldr	r3, [pc, #24]	; (804126c <HAL_UART_TxCpltCallback+0x24>)
 8041252:	681b      	ldr	r3, [r3, #0]
 8041254:	4618      	mov	r0, r3
 8041256:	f014 ffe1 	bl	805621c <osSemaphoreRelease>
	HAL_GPIO_TogglePin(GPIOB,LED_GREEN_Pin);
 804125a:	2101      	movs	r1, #1
 804125c:	4804      	ldr	r0, [pc, #16]	; (8041270 <HAL_UART_TxCpltCallback+0x28>)
 804125e:	f004 f848 	bl	80452f2 <HAL_GPIO_TogglePin>
}
 8041262:	bf00      	nop
 8041264:	3708      	adds	r7, #8
 8041266:	46bd      	mov	sp, r7
 8041268:	bd80      	pop	{r7, pc}
 804126a:	bf00      	nop
 804126c:	24000a20 	.word	0x24000a20
 8041270:	58020400 	.word	0x58020400

08041274 <HAL_UARTEx_RxEventCallback>:

/* UART RX DMA CALLBACK FUNCTION */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8041274:	b580      	push	{r7, lr}
 8041276:	b084      	sub	sp, #16
 8041278:	af00      	add	r7, sp, #0
 804127a:	6078      	str	r0, [r7, #4]
 804127c:	460b      	mov	r3, r1
 804127e:	807b      	strh	r3, [r7, #2]

	HAL_GPIO_TogglePin(GPIOB,LED_GREEN_Pin);
 8041280:	2101      	movs	r1, #1
 8041282:	4883      	ldr	r0, [pc, #524]	; (8041490 <HAL_UARTEx_RxEventCallback+0x21c>)
 8041284:	f004 f835 	bl	80452f2 <HAL_GPIO_TogglePin>


	current_RX_buffer_position = Size; // Size parameter is not working as expected at first sight.
 8041288:	887b      	ldrh	r3, [r7, #2]
 804128a:	4a82      	ldr	r2, [pc, #520]	; (8041494 <HAL_UARTEx_RxEventCallback+0x220>)
 804128c:	6013      	str	r3, [r2, #0]

	/* Receive Command from RX BUFFER */

	if(current_RX_buffer_position > old_RX_buffer_position){
 804128e:	4b81      	ldr	r3, [pc, #516]	; (8041494 <HAL_UARTEx_RxEventCallback+0x220>)
 8041290:	681a      	ldr	r2, [r3, #0]
 8041292:	4b81      	ldr	r3, [pc, #516]	; (8041498 <HAL_UARTEx_RxEventCallback+0x224>)
 8041294:	681b      	ldr	r3, [r3, #0]
 8041296:	429a      	cmp	r2, r3
 8041298:	d917      	bls.n	80412ca <HAL_UARTEx_RxEventCallback+0x56>
		* [   5   ]            |------------------------------------|
		* [   6   ] <- pos
		* [   7   ]
		* [ N - 1 ]
		*/
	  memcpy(received_command, UART_RX_BUFFER+old_RX_buffer_position, current_RX_buffer_position - old_RX_buffer_position -1);
 804129a:	4b7f      	ldr	r3, [pc, #508]	; (8041498 <HAL_UARTEx_RxEventCallback+0x224>)
 804129c:	681b      	ldr	r3, [r3, #0]
 804129e:	4a7f      	ldr	r2, [pc, #508]	; (804149c <HAL_UARTEx_RxEventCallback+0x228>)
 80412a0:	1899      	adds	r1, r3, r2
 80412a2:	4b7c      	ldr	r3, [pc, #496]	; (8041494 <HAL_UARTEx_RxEventCallback+0x220>)
 80412a4:	681a      	ldr	r2, [r3, #0]
 80412a6:	4b7c      	ldr	r3, [pc, #496]	; (8041498 <HAL_UARTEx_RxEventCallback+0x224>)
 80412a8:	681b      	ldr	r3, [r3, #0]
 80412aa:	1ad3      	subs	r3, r2, r3
 80412ac:	3b01      	subs	r3, #1
 80412ae:	461a      	mov	r2, r3
 80412b0:	487b      	ldr	r0, [pc, #492]	; (80414a0 <HAL_UARTEx_RxEventCallback+0x22c>)
 80412b2:	f018 fe29 	bl	8059f08 <memcpy>

	  received_command[current_RX_buffer_position - old_RX_buffer_position -1] = '\0';
 80412b6:	4b77      	ldr	r3, [pc, #476]	; (8041494 <HAL_UARTEx_RxEventCallback+0x220>)
 80412b8:	681a      	ldr	r2, [r3, #0]
 80412ba:	4b77      	ldr	r3, [pc, #476]	; (8041498 <HAL_UARTEx_RxEventCallback+0x224>)
 80412bc:	681b      	ldr	r3, [r3, #0]
 80412be:	1ad3      	subs	r3, r2, r3
 80412c0:	3b01      	subs	r3, #1
 80412c2:	4a77      	ldr	r2, [pc, #476]	; (80414a0 <HAL_UARTEx_RxEventCallback+0x22c>)
 80412c4:	2100      	movs	r1, #0
 80412c6:	54d1      	strb	r1, [r2, r3]
 80412c8:	e01f      	b.n	804130a <HAL_UARTEx_RxEventCallback+0x96>
        * [   7   ]            |                                 |
        * [ N - 1 ]            |---------------------------------|
        */


	  memcpy(received_command, UART_RX_BUFFER+old_RX_buffer_position, UART_RX_BUFFER_LENGTH-old_RX_buffer_position);
 80412ca:	4b73      	ldr	r3, [pc, #460]	; (8041498 <HAL_UARTEx_RxEventCallback+0x224>)
 80412cc:	681b      	ldr	r3, [r3, #0]
 80412ce:	4a73      	ldr	r2, [pc, #460]	; (804149c <HAL_UARTEx_RxEventCallback+0x228>)
 80412d0:	1899      	adds	r1, r3, r2
 80412d2:	4b71      	ldr	r3, [pc, #452]	; (8041498 <HAL_UARTEx_RxEventCallback+0x224>)
 80412d4:	681b      	ldr	r3, [r3, #0]
 80412d6:	f1c3 0342 	rsb	r3, r3, #66	; 0x42
 80412da:	461a      	mov	r2, r3
 80412dc:	4870      	ldr	r0, [pc, #448]	; (80414a0 <HAL_UARTEx_RxEventCallback+0x22c>)
 80412de:	f018 fe13 	bl	8059f08 <memcpy>

	  memcpy(received_command+UART_RX_BUFFER_LENGTH-old_RX_buffer_position, UART_RX_BUFFER, Size-1);
 80412e2:	4b6d      	ldr	r3, [pc, #436]	; (8041498 <HAL_UARTEx_RxEventCallback+0x224>)
 80412e4:	681b      	ldr	r3, [r3, #0]
 80412e6:	f1c3 0342 	rsb	r3, r3, #66	; 0x42
 80412ea:	4a6d      	ldr	r2, [pc, #436]	; (80414a0 <HAL_UARTEx_RxEventCallback+0x22c>)
 80412ec:	1898      	adds	r0, r3, r2
 80412ee:	887b      	ldrh	r3, [r7, #2]
 80412f0:	3b01      	subs	r3, #1
 80412f2:	461a      	mov	r2, r3
 80412f4:	4969      	ldr	r1, [pc, #420]	; (804149c <HAL_UARTEx_RxEventCallback+0x228>)
 80412f6:	f018 fe07 	bl	8059f08 <memcpy>

	  received_command[UART_RX_BUFFER_LENGTH-old_RX_buffer_position + Size - 1] = '\0';
 80412fa:	887a      	ldrh	r2, [r7, #2]
 80412fc:	4b66      	ldr	r3, [pc, #408]	; (8041498 <HAL_UARTEx_RxEventCallback+0x224>)
 80412fe:	681b      	ldr	r3, [r3, #0]
 8041300:	1ad3      	subs	r3, r2, r3
 8041302:	3341      	adds	r3, #65	; 0x41
 8041304:	4a66      	ldr	r2, [pc, #408]	; (80414a0 <HAL_UARTEx_RxEventCallback+0x22c>)
 8041306:	2100      	movs	r1, #0
 8041308:	54d1      	strb	r1, [r2, r3]
	}

	old_RX_buffer_position = current_RX_buffer_position;
 804130a:	4b62      	ldr	r3, [pc, #392]	; (8041494 <HAL_UARTEx_RxEventCallback+0x220>)
 804130c:	681b      	ldr	r3, [r3, #0]
 804130e:	4a62      	ldr	r2, [pc, #392]	; (8041498 <HAL_UARTEx_RxEventCallback+0x224>)
 8041310:	6013      	str	r3, [r2, #0]


	/* Start DMA Reception again */

	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, UART_RX_BUFFER, UART_RX_BUFFER_LENGTH);
 8041312:	2242      	movs	r2, #66	; 0x42
 8041314:	4961      	ldr	r1, [pc, #388]	; (804149c <HAL_UARTEx_RxEventCallback+0x228>)
 8041316:	4863      	ldr	r0, [pc, #396]	; (80414a4 <HAL_UARTEx_RxEventCallback+0x230>)
 8041318:	f00a fa5a 	bl	804b7d0 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 804131c:	4b62      	ldr	r3, [pc, #392]	; (80414a8 <HAL_UARTEx_RxEventCallback+0x234>)
 804131e:	681b      	ldr	r3, [r3, #0]
 8041320:	4a62      	ldr	r2, [pc, #392]	; (80414ac <HAL_UARTEx_RxEventCallback+0x238>)
 8041322:	4293      	cmp	r3, r2
 8041324:	d04a      	beq.n	80413bc <HAL_UARTEx_RxEventCallback+0x148>
 8041326:	4b60      	ldr	r3, [pc, #384]	; (80414a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8041328:	681b      	ldr	r3, [r3, #0]
 804132a:	4a61      	ldr	r2, [pc, #388]	; (80414b0 <HAL_UARTEx_RxEventCallback+0x23c>)
 804132c:	4293      	cmp	r3, r2
 804132e:	d045      	beq.n	80413bc <HAL_UARTEx_RxEventCallback+0x148>
 8041330:	4b5d      	ldr	r3, [pc, #372]	; (80414a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8041332:	681b      	ldr	r3, [r3, #0]
 8041334:	4a5f      	ldr	r2, [pc, #380]	; (80414b4 <HAL_UARTEx_RxEventCallback+0x240>)
 8041336:	4293      	cmp	r3, r2
 8041338:	d040      	beq.n	80413bc <HAL_UARTEx_RxEventCallback+0x148>
 804133a:	4b5b      	ldr	r3, [pc, #364]	; (80414a8 <HAL_UARTEx_RxEventCallback+0x234>)
 804133c:	681b      	ldr	r3, [r3, #0]
 804133e:	4a5e      	ldr	r2, [pc, #376]	; (80414b8 <HAL_UARTEx_RxEventCallback+0x244>)
 8041340:	4293      	cmp	r3, r2
 8041342:	d03b      	beq.n	80413bc <HAL_UARTEx_RxEventCallback+0x148>
 8041344:	4b58      	ldr	r3, [pc, #352]	; (80414a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8041346:	681b      	ldr	r3, [r3, #0]
 8041348:	4a5c      	ldr	r2, [pc, #368]	; (80414bc <HAL_UARTEx_RxEventCallback+0x248>)
 804134a:	4293      	cmp	r3, r2
 804134c:	d036      	beq.n	80413bc <HAL_UARTEx_RxEventCallback+0x148>
 804134e:	4b56      	ldr	r3, [pc, #344]	; (80414a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8041350:	681b      	ldr	r3, [r3, #0]
 8041352:	4a5b      	ldr	r2, [pc, #364]	; (80414c0 <HAL_UARTEx_RxEventCallback+0x24c>)
 8041354:	4293      	cmp	r3, r2
 8041356:	d031      	beq.n	80413bc <HAL_UARTEx_RxEventCallback+0x148>
 8041358:	4b53      	ldr	r3, [pc, #332]	; (80414a8 <HAL_UARTEx_RxEventCallback+0x234>)
 804135a:	681b      	ldr	r3, [r3, #0]
 804135c:	4a59      	ldr	r2, [pc, #356]	; (80414c4 <HAL_UARTEx_RxEventCallback+0x250>)
 804135e:	4293      	cmp	r3, r2
 8041360:	d02c      	beq.n	80413bc <HAL_UARTEx_RxEventCallback+0x148>
 8041362:	4b51      	ldr	r3, [pc, #324]	; (80414a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8041364:	681b      	ldr	r3, [r3, #0]
 8041366:	4a58      	ldr	r2, [pc, #352]	; (80414c8 <HAL_UARTEx_RxEventCallback+0x254>)
 8041368:	4293      	cmp	r3, r2
 804136a:	d027      	beq.n	80413bc <HAL_UARTEx_RxEventCallback+0x148>
 804136c:	4b4e      	ldr	r3, [pc, #312]	; (80414a8 <HAL_UARTEx_RxEventCallback+0x234>)
 804136e:	681b      	ldr	r3, [r3, #0]
 8041370:	4a56      	ldr	r2, [pc, #344]	; (80414cc <HAL_UARTEx_RxEventCallback+0x258>)
 8041372:	4293      	cmp	r3, r2
 8041374:	d022      	beq.n	80413bc <HAL_UARTEx_RxEventCallback+0x148>
 8041376:	4b4c      	ldr	r3, [pc, #304]	; (80414a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8041378:	681b      	ldr	r3, [r3, #0]
 804137a:	4a55      	ldr	r2, [pc, #340]	; (80414d0 <HAL_UARTEx_RxEventCallback+0x25c>)
 804137c:	4293      	cmp	r3, r2
 804137e:	d01d      	beq.n	80413bc <HAL_UARTEx_RxEventCallback+0x148>
 8041380:	4b49      	ldr	r3, [pc, #292]	; (80414a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8041382:	681b      	ldr	r3, [r3, #0]
 8041384:	4a53      	ldr	r2, [pc, #332]	; (80414d4 <HAL_UARTEx_RxEventCallback+0x260>)
 8041386:	4293      	cmp	r3, r2
 8041388:	d018      	beq.n	80413bc <HAL_UARTEx_RxEventCallback+0x148>
 804138a:	4b47      	ldr	r3, [pc, #284]	; (80414a8 <HAL_UARTEx_RxEventCallback+0x234>)
 804138c:	681b      	ldr	r3, [r3, #0]
 804138e:	4a52      	ldr	r2, [pc, #328]	; (80414d8 <HAL_UARTEx_RxEventCallback+0x264>)
 8041390:	4293      	cmp	r3, r2
 8041392:	d013      	beq.n	80413bc <HAL_UARTEx_RxEventCallback+0x148>
 8041394:	4b44      	ldr	r3, [pc, #272]	; (80414a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8041396:	681b      	ldr	r3, [r3, #0]
 8041398:	4a50      	ldr	r2, [pc, #320]	; (80414dc <HAL_UARTEx_RxEventCallback+0x268>)
 804139a:	4293      	cmp	r3, r2
 804139c:	d00e      	beq.n	80413bc <HAL_UARTEx_RxEventCallback+0x148>
 804139e:	4b42      	ldr	r3, [pc, #264]	; (80414a8 <HAL_UARTEx_RxEventCallback+0x234>)
 80413a0:	681b      	ldr	r3, [r3, #0]
 80413a2:	4a4f      	ldr	r2, [pc, #316]	; (80414e0 <HAL_UARTEx_RxEventCallback+0x26c>)
 80413a4:	4293      	cmp	r3, r2
 80413a6:	d009      	beq.n	80413bc <HAL_UARTEx_RxEventCallback+0x148>
 80413a8:	4b3f      	ldr	r3, [pc, #252]	; (80414a8 <HAL_UARTEx_RxEventCallback+0x234>)
 80413aa:	681b      	ldr	r3, [r3, #0]
 80413ac:	4a4d      	ldr	r2, [pc, #308]	; (80414e4 <HAL_UARTEx_RxEventCallback+0x270>)
 80413ae:	4293      	cmp	r3, r2
 80413b0:	d004      	beq.n	80413bc <HAL_UARTEx_RxEventCallback+0x148>
 80413b2:	4b3d      	ldr	r3, [pc, #244]	; (80414a8 <HAL_UARTEx_RxEventCallback+0x234>)
 80413b4:	681b      	ldr	r3, [r3, #0]
 80413b6:	4a4c      	ldr	r2, [pc, #304]	; (80414e8 <HAL_UARTEx_RxEventCallback+0x274>)
 80413b8:	4293      	cmp	r3, r2
 80413ba:	d108      	bne.n	80413ce <HAL_UARTEx_RxEventCallback+0x15a>
 80413bc:	4b3a      	ldr	r3, [pc, #232]	; (80414a8 <HAL_UARTEx_RxEventCallback+0x234>)
 80413be:	681b      	ldr	r3, [r3, #0]
 80413c0:	681a      	ldr	r2, [r3, #0]
 80413c2:	4b39      	ldr	r3, [pc, #228]	; (80414a8 <HAL_UARTEx_RxEventCallback+0x234>)
 80413c4:	681b      	ldr	r3, [r3, #0]
 80413c6:	f022 0208 	bic.w	r2, r2, #8
 80413ca:	601a      	str	r2, [r3, #0]
 80413cc:	e007      	b.n	80413de <HAL_UARTEx_RxEventCallback+0x16a>
 80413ce:	4b36      	ldr	r3, [pc, #216]	; (80414a8 <HAL_UARTEx_RxEventCallback+0x234>)
 80413d0:	681b      	ldr	r3, [r3, #0]
 80413d2:	681a      	ldr	r2, [r3, #0]
 80413d4:	4b34      	ldr	r3, [pc, #208]	; (80414a8 <HAL_UARTEx_RxEventCallback+0x234>)
 80413d6:	681b      	ldr	r3, [r3, #0]
 80413d8:	f022 0204 	bic.w	r2, r2, #4
 80413dc:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_TC);
 80413de:	4b32      	ldr	r3, [pc, #200]	; (80414a8 <HAL_UARTEx_RxEventCallback+0x234>)
 80413e0:	681b      	ldr	r3, [r3, #0]
 80413e2:	4a32      	ldr	r2, [pc, #200]	; (80414ac <HAL_UARTEx_RxEventCallback+0x238>)
 80413e4:	4293      	cmp	r3, r2
 80413e6:	d04a      	beq.n	804147e <HAL_UARTEx_RxEventCallback+0x20a>
 80413e8:	4b2f      	ldr	r3, [pc, #188]	; (80414a8 <HAL_UARTEx_RxEventCallback+0x234>)
 80413ea:	681b      	ldr	r3, [r3, #0]
 80413ec:	4a30      	ldr	r2, [pc, #192]	; (80414b0 <HAL_UARTEx_RxEventCallback+0x23c>)
 80413ee:	4293      	cmp	r3, r2
 80413f0:	d045      	beq.n	804147e <HAL_UARTEx_RxEventCallback+0x20a>
 80413f2:	4b2d      	ldr	r3, [pc, #180]	; (80414a8 <HAL_UARTEx_RxEventCallback+0x234>)
 80413f4:	681b      	ldr	r3, [r3, #0]
 80413f6:	4a2f      	ldr	r2, [pc, #188]	; (80414b4 <HAL_UARTEx_RxEventCallback+0x240>)
 80413f8:	4293      	cmp	r3, r2
 80413fa:	d040      	beq.n	804147e <HAL_UARTEx_RxEventCallback+0x20a>
 80413fc:	4b2a      	ldr	r3, [pc, #168]	; (80414a8 <HAL_UARTEx_RxEventCallback+0x234>)
 80413fe:	681b      	ldr	r3, [r3, #0]
 8041400:	4a2d      	ldr	r2, [pc, #180]	; (80414b8 <HAL_UARTEx_RxEventCallback+0x244>)
 8041402:	4293      	cmp	r3, r2
 8041404:	d03b      	beq.n	804147e <HAL_UARTEx_RxEventCallback+0x20a>
 8041406:	4b28      	ldr	r3, [pc, #160]	; (80414a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8041408:	681b      	ldr	r3, [r3, #0]
 804140a:	4a2c      	ldr	r2, [pc, #176]	; (80414bc <HAL_UARTEx_RxEventCallback+0x248>)
 804140c:	4293      	cmp	r3, r2
 804140e:	d036      	beq.n	804147e <HAL_UARTEx_RxEventCallback+0x20a>
 8041410:	4b25      	ldr	r3, [pc, #148]	; (80414a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8041412:	681b      	ldr	r3, [r3, #0]
 8041414:	4a2a      	ldr	r2, [pc, #168]	; (80414c0 <HAL_UARTEx_RxEventCallback+0x24c>)
 8041416:	4293      	cmp	r3, r2
 8041418:	d031      	beq.n	804147e <HAL_UARTEx_RxEventCallback+0x20a>
 804141a:	4b23      	ldr	r3, [pc, #140]	; (80414a8 <HAL_UARTEx_RxEventCallback+0x234>)
 804141c:	681b      	ldr	r3, [r3, #0]
 804141e:	4a29      	ldr	r2, [pc, #164]	; (80414c4 <HAL_UARTEx_RxEventCallback+0x250>)
 8041420:	4293      	cmp	r3, r2
 8041422:	d02c      	beq.n	804147e <HAL_UARTEx_RxEventCallback+0x20a>
 8041424:	4b20      	ldr	r3, [pc, #128]	; (80414a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8041426:	681b      	ldr	r3, [r3, #0]
 8041428:	4a27      	ldr	r2, [pc, #156]	; (80414c8 <HAL_UARTEx_RxEventCallback+0x254>)
 804142a:	4293      	cmp	r3, r2
 804142c:	d027      	beq.n	804147e <HAL_UARTEx_RxEventCallback+0x20a>
 804142e:	4b1e      	ldr	r3, [pc, #120]	; (80414a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8041430:	681b      	ldr	r3, [r3, #0]
 8041432:	4a26      	ldr	r2, [pc, #152]	; (80414cc <HAL_UARTEx_RxEventCallback+0x258>)
 8041434:	4293      	cmp	r3, r2
 8041436:	d022      	beq.n	804147e <HAL_UARTEx_RxEventCallback+0x20a>
 8041438:	4b1b      	ldr	r3, [pc, #108]	; (80414a8 <HAL_UARTEx_RxEventCallback+0x234>)
 804143a:	681b      	ldr	r3, [r3, #0]
 804143c:	4a24      	ldr	r2, [pc, #144]	; (80414d0 <HAL_UARTEx_RxEventCallback+0x25c>)
 804143e:	4293      	cmp	r3, r2
 8041440:	d01d      	beq.n	804147e <HAL_UARTEx_RxEventCallback+0x20a>
 8041442:	4b19      	ldr	r3, [pc, #100]	; (80414a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8041444:	681b      	ldr	r3, [r3, #0]
 8041446:	4a23      	ldr	r2, [pc, #140]	; (80414d4 <HAL_UARTEx_RxEventCallback+0x260>)
 8041448:	4293      	cmp	r3, r2
 804144a:	d018      	beq.n	804147e <HAL_UARTEx_RxEventCallback+0x20a>
 804144c:	4b16      	ldr	r3, [pc, #88]	; (80414a8 <HAL_UARTEx_RxEventCallback+0x234>)
 804144e:	681b      	ldr	r3, [r3, #0]
 8041450:	4a21      	ldr	r2, [pc, #132]	; (80414d8 <HAL_UARTEx_RxEventCallback+0x264>)
 8041452:	4293      	cmp	r3, r2
 8041454:	d013      	beq.n	804147e <HAL_UARTEx_RxEventCallback+0x20a>
 8041456:	4b14      	ldr	r3, [pc, #80]	; (80414a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8041458:	681b      	ldr	r3, [r3, #0]
 804145a:	4a20      	ldr	r2, [pc, #128]	; (80414dc <HAL_UARTEx_RxEventCallback+0x268>)
 804145c:	4293      	cmp	r3, r2
 804145e:	d00e      	beq.n	804147e <HAL_UARTEx_RxEventCallback+0x20a>
 8041460:	4b11      	ldr	r3, [pc, #68]	; (80414a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8041462:	681b      	ldr	r3, [r3, #0]
 8041464:	4a1e      	ldr	r2, [pc, #120]	; (80414e0 <HAL_UARTEx_RxEventCallback+0x26c>)
 8041466:	4293      	cmp	r3, r2
 8041468:	d009      	beq.n	804147e <HAL_UARTEx_RxEventCallback+0x20a>
 804146a:	4b0f      	ldr	r3, [pc, #60]	; (80414a8 <HAL_UARTEx_RxEventCallback+0x234>)
 804146c:	681b      	ldr	r3, [r3, #0]
 804146e:	4a1d      	ldr	r2, [pc, #116]	; (80414e4 <HAL_UARTEx_RxEventCallback+0x270>)
 8041470:	4293      	cmp	r3, r2
 8041472:	d004      	beq.n	804147e <HAL_UARTEx_RxEventCallback+0x20a>
 8041474:	4b0c      	ldr	r3, [pc, #48]	; (80414a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8041476:	681b      	ldr	r3, [r3, #0]
 8041478:	4a1b      	ldr	r2, [pc, #108]	; (80414e8 <HAL_UARTEx_RxEventCallback+0x274>)
 804147a:	4293      	cmp	r3, r2
 804147c:	d136      	bne.n	80414ec <HAL_UARTEx_RxEventCallback+0x278>
 804147e:	4b0a      	ldr	r3, [pc, #40]	; (80414a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8041480:	681b      	ldr	r3, [r3, #0]
 8041482:	681a      	ldr	r2, [r3, #0]
 8041484:	4b08      	ldr	r3, [pc, #32]	; (80414a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8041486:	681b      	ldr	r3, [r3, #0]
 8041488:	f022 0210 	bic.w	r2, r2, #16
 804148c:	601a      	str	r2, [r3, #0]
 804148e:	e035      	b.n	80414fc <HAL_UARTEx_RxEventCallback+0x288>
 8041490:	58020400 	.word	0x58020400
 8041494:	24000ab0 	.word	0x24000ab0
 8041498:	24000aac 	.word	0x24000aac
 804149c:	24000a68 	.word	0x24000a68
 80414a0:	24000ab4 	.word	0x24000ab4
 80414a4:	24000890 	.word	0x24000890
 80414a8:	24000998 	.word	0x24000998
 80414ac:	40020010 	.word	0x40020010
 80414b0:	40020028 	.word	0x40020028
 80414b4:	40020040 	.word	0x40020040
 80414b8:	40020058 	.word	0x40020058
 80414bc:	40020070 	.word	0x40020070
 80414c0:	40020088 	.word	0x40020088
 80414c4:	400200a0 	.word	0x400200a0
 80414c8:	400200b8 	.word	0x400200b8
 80414cc:	40020410 	.word	0x40020410
 80414d0:	40020428 	.word	0x40020428
 80414d4:	40020440 	.word	0x40020440
 80414d8:	40020458 	.word	0x40020458
 80414dc:	40020470 	.word	0x40020470
 80414e0:	40020488 	.word	0x40020488
 80414e4:	400204a0 	.word	0x400204a0
 80414e8:	400204b8 	.word	0x400204b8
 80414ec:	4b10      	ldr	r3, [pc, #64]	; (8041530 <HAL_UARTEx_RxEventCallback+0x2bc>)
 80414ee:	681b      	ldr	r3, [r3, #0]
 80414f0:	681a      	ldr	r2, [r3, #0]
 80414f2:	4b0f      	ldr	r3, [pc, #60]	; (8041530 <HAL_UARTEx_RxEventCallback+0x2bc>)
 80414f4:	681b      	ldr	r3, [r3, #0]
 80414f6:	f022 0202 	bic.w	r2, r2, #2
 80414fa:	601a      	str	r2, [r3, #0]

	/* xHigherPriorityTaskWoken must be initialised to pdFALSE.  If calling
	vTaskNotifyGiveFromISR() unblocks the handling task, and the priority of
	the handling task is higher than the priority of the currently running task,
	then xHigherPriorityTaskWoken will automatically get set to pdTRUE. */
	xHigherPriorityTaskWoken = pdFALSE;
 80414fc:	2300      	movs	r3, #0
 80414fe:	60fb      	str	r3, [r7, #12]

	/* Unblock the handling task so the task can perform any processing necessitated
	by the interrupt.  xHandlingTask is the task's handle, which was obtained
	when the task was created. */
	vTaskNotifyGiveFromISR(ConsoleTaskHandle, &xHigherPriorityTaskWoken );
 8041500:	4b0c      	ldr	r3, [pc, #48]	; (8041534 <HAL_UARTEx_RxEventCallback+0x2c0>)
 8041502:	681b      	ldr	r3, [r3, #0]
 8041504:	f107 020c 	add.w	r2, r7, #12
 8041508:	4611      	mov	r1, r2
 804150a:	4618      	mov	r0, r3
 804150c:	f017 f844 	bl	8058598 <vTaskNotifyGiveFromISR>

	/* Force a context switch if xHigherPriorityTaskWoken is now set to pdTRUE.
	The macro used to do this is dependent on the port and may be called
	portEND_SWITCHING_ISR. */
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8041510:	68fb      	ldr	r3, [r7, #12]
 8041512:	2b00      	cmp	r3, #0
 8041514:	d007      	beq.n	8041526 <HAL_UARTEx_RxEventCallback+0x2b2>
 8041516:	4b08      	ldr	r3, [pc, #32]	; (8041538 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8041518:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 804151c:	601a      	str	r2, [r3, #0]
 804151e:	f3bf 8f4f 	dsb	sy
 8041522:	f3bf 8f6f 	isb	sy

}
 8041526:	bf00      	nop
 8041528:	3710      	adds	r7, #16
 804152a:	46bd      	mov	sp, r7
 804152c:	bd80      	pop	{r7, pc}
 804152e:	bf00      	nop
 8041530:	24000998 	.word	0x24000998
 8041534:	24000a18 	.word	0x24000a18
 8041538:	e000ed04 	.word	0xe000ed04

0804153c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 804153c:	b580      	push	{r7, lr}
 804153e:	b082      	sub	sp, #8
 8041540:	af00      	add	r7, sp, #0
 8041542:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8041544:	f018 f942 	bl	80597cc <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */

  /* USRT RX INITIATE */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, UART_RX_BUFFER, UART_RX_BUFFER_LENGTH);
 8041548:	2242      	movs	r2, #66	; 0x42
 804154a:	4965      	ldr	r1, [pc, #404]	; (80416e0 <StartDefaultTask+0x1a4>)
 804154c:	4865      	ldr	r0, [pc, #404]	; (80416e4 <StartDefaultTask+0x1a8>)
 804154e:	f00a f93f 	bl	804b7d0 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8041552:	4b65      	ldr	r3, [pc, #404]	; (80416e8 <StartDefaultTask+0x1ac>)
 8041554:	681b      	ldr	r3, [r3, #0]
 8041556:	4a65      	ldr	r2, [pc, #404]	; (80416ec <StartDefaultTask+0x1b0>)
 8041558:	4293      	cmp	r3, r2
 804155a:	d04a      	beq.n	80415f2 <StartDefaultTask+0xb6>
 804155c:	4b62      	ldr	r3, [pc, #392]	; (80416e8 <StartDefaultTask+0x1ac>)
 804155e:	681b      	ldr	r3, [r3, #0]
 8041560:	4a63      	ldr	r2, [pc, #396]	; (80416f0 <StartDefaultTask+0x1b4>)
 8041562:	4293      	cmp	r3, r2
 8041564:	d045      	beq.n	80415f2 <StartDefaultTask+0xb6>
 8041566:	4b60      	ldr	r3, [pc, #384]	; (80416e8 <StartDefaultTask+0x1ac>)
 8041568:	681b      	ldr	r3, [r3, #0]
 804156a:	4a62      	ldr	r2, [pc, #392]	; (80416f4 <StartDefaultTask+0x1b8>)
 804156c:	4293      	cmp	r3, r2
 804156e:	d040      	beq.n	80415f2 <StartDefaultTask+0xb6>
 8041570:	4b5d      	ldr	r3, [pc, #372]	; (80416e8 <StartDefaultTask+0x1ac>)
 8041572:	681b      	ldr	r3, [r3, #0]
 8041574:	4a60      	ldr	r2, [pc, #384]	; (80416f8 <StartDefaultTask+0x1bc>)
 8041576:	4293      	cmp	r3, r2
 8041578:	d03b      	beq.n	80415f2 <StartDefaultTask+0xb6>
 804157a:	4b5b      	ldr	r3, [pc, #364]	; (80416e8 <StartDefaultTask+0x1ac>)
 804157c:	681b      	ldr	r3, [r3, #0]
 804157e:	4a5f      	ldr	r2, [pc, #380]	; (80416fc <StartDefaultTask+0x1c0>)
 8041580:	4293      	cmp	r3, r2
 8041582:	d036      	beq.n	80415f2 <StartDefaultTask+0xb6>
 8041584:	4b58      	ldr	r3, [pc, #352]	; (80416e8 <StartDefaultTask+0x1ac>)
 8041586:	681b      	ldr	r3, [r3, #0]
 8041588:	4a5d      	ldr	r2, [pc, #372]	; (8041700 <StartDefaultTask+0x1c4>)
 804158a:	4293      	cmp	r3, r2
 804158c:	d031      	beq.n	80415f2 <StartDefaultTask+0xb6>
 804158e:	4b56      	ldr	r3, [pc, #344]	; (80416e8 <StartDefaultTask+0x1ac>)
 8041590:	681b      	ldr	r3, [r3, #0]
 8041592:	4a5c      	ldr	r2, [pc, #368]	; (8041704 <StartDefaultTask+0x1c8>)
 8041594:	4293      	cmp	r3, r2
 8041596:	d02c      	beq.n	80415f2 <StartDefaultTask+0xb6>
 8041598:	4b53      	ldr	r3, [pc, #332]	; (80416e8 <StartDefaultTask+0x1ac>)
 804159a:	681b      	ldr	r3, [r3, #0]
 804159c:	4a5a      	ldr	r2, [pc, #360]	; (8041708 <StartDefaultTask+0x1cc>)
 804159e:	4293      	cmp	r3, r2
 80415a0:	d027      	beq.n	80415f2 <StartDefaultTask+0xb6>
 80415a2:	4b51      	ldr	r3, [pc, #324]	; (80416e8 <StartDefaultTask+0x1ac>)
 80415a4:	681b      	ldr	r3, [r3, #0]
 80415a6:	4a59      	ldr	r2, [pc, #356]	; (804170c <StartDefaultTask+0x1d0>)
 80415a8:	4293      	cmp	r3, r2
 80415aa:	d022      	beq.n	80415f2 <StartDefaultTask+0xb6>
 80415ac:	4b4e      	ldr	r3, [pc, #312]	; (80416e8 <StartDefaultTask+0x1ac>)
 80415ae:	681b      	ldr	r3, [r3, #0]
 80415b0:	4a57      	ldr	r2, [pc, #348]	; (8041710 <StartDefaultTask+0x1d4>)
 80415b2:	4293      	cmp	r3, r2
 80415b4:	d01d      	beq.n	80415f2 <StartDefaultTask+0xb6>
 80415b6:	4b4c      	ldr	r3, [pc, #304]	; (80416e8 <StartDefaultTask+0x1ac>)
 80415b8:	681b      	ldr	r3, [r3, #0]
 80415ba:	4a56      	ldr	r2, [pc, #344]	; (8041714 <StartDefaultTask+0x1d8>)
 80415bc:	4293      	cmp	r3, r2
 80415be:	d018      	beq.n	80415f2 <StartDefaultTask+0xb6>
 80415c0:	4b49      	ldr	r3, [pc, #292]	; (80416e8 <StartDefaultTask+0x1ac>)
 80415c2:	681b      	ldr	r3, [r3, #0]
 80415c4:	4a54      	ldr	r2, [pc, #336]	; (8041718 <StartDefaultTask+0x1dc>)
 80415c6:	4293      	cmp	r3, r2
 80415c8:	d013      	beq.n	80415f2 <StartDefaultTask+0xb6>
 80415ca:	4b47      	ldr	r3, [pc, #284]	; (80416e8 <StartDefaultTask+0x1ac>)
 80415cc:	681b      	ldr	r3, [r3, #0]
 80415ce:	4a53      	ldr	r2, [pc, #332]	; (804171c <StartDefaultTask+0x1e0>)
 80415d0:	4293      	cmp	r3, r2
 80415d2:	d00e      	beq.n	80415f2 <StartDefaultTask+0xb6>
 80415d4:	4b44      	ldr	r3, [pc, #272]	; (80416e8 <StartDefaultTask+0x1ac>)
 80415d6:	681b      	ldr	r3, [r3, #0]
 80415d8:	4a51      	ldr	r2, [pc, #324]	; (8041720 <StartDefaultTask+0x1e4>)
 80415da:	4293      	cmp	r3, r2
 80415dc:	d009      	beq.n	80415f2 <StartDefaultTask+0xb6>
 80415de:	4b42      	ldr	r3, [pc, #264]	; (80416e8 <StartDefaultTask+0x1ac>)
 80415e0:	681b      	ldr	r3, [r3, #0]
 80415e2:	4a50      	ldr	r2, [pc, #320]	; (8041724 <StartDefaultTask+0x1e8>)
 80415e4:	4293      	cmp	r3, r2
 80415e6:	d004      	beq.n	80415f2 <StartDefaultTask+0xb6>
 80415e8:	4b3f      	ldr	r3, [pc, #252]	; (80416e8 <StartDefaultTask+0x1ac>)
 80415ea:	681b      	ldr	r3, [r3, #0]
 80415ec:	4a4e      	ldr	r2, [pc, #312]	; (8041728 <StartDefaultTask+0x1ec>)
 80415ee:	4293      	cmp	r3, r2
 80415f0:	d108      	bne.n	8041604 <StartDefaultTask+0xc8>
 80415f2:	4b3d      	ldr	r3, [pc, #244]	; (80416e8 <StartDefaultTask+0x1ac>)
 80415f4:	681b      	ldr	r3, [r3, #0]
 80415f6:	681a      	ldr	r2, [r3, #0]
 80415f8:	4b3b      	ldr	r3, [pc, #236]	; (80416e8 <StartDefaultTask+0x1ac>)
 80415fa:	681b      	ldr	r3, [r3, #0]
 80415fc:	f022 0208 	bic.w	r2, r2, #8
 8041600:	601a      	str	r2, [r3, #0]
 8041602:	e007      	b.n	8041614 <StartDefaultTask+0xd8>
 8041604:	4b38      	ldr	r3, [pc, #224]	; (80416e8 <StartDefaultTask+0x1ac>)
 8041606:	681b      	ldr	r3, [r3, #0]
 8041608:	681a      	ldr	r2, [r3, #0]
 804160a:	4b37      	ldr	r3, [pc, #220]	; (80416e8 <StartDefaultTask+0x1ac>)
 804160c:	681b      	ldr	r3, [r3, #0]
 804160e:	f022 0204 	bic.w	r2, r2, #4
 8041612:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_TC);
 8041614:	4b34      	ldr	r3, [pc, #208]	; (80416e8 <StartDefaultTask+0x1ac>)
 8041616:	681b      	ldr	r3, [r3, #0]
 8041618:	4a34      	ldr	r2, [pc, #208]	; (80416ec <StartDefaultTask+0x1b0>)
 804161a:	4293      	cmp	r3, r2
 804161c:	d04a      	beq.n	80416b4 <StartDefaultTask+0x178>
 804161e:	4b32      	ldr	r3, [pc, #200]	; (80416e8 <StartDefaultTask+0x1ac>)
 8041620:	681b      	ldr	r3, [r3, #0]
 8041622:	4a33      	ldr	r2, [pc, #204]	; (80416f0 <StartDefaultTask+0x1b4>)
 8041624:	4293      	cmp	r3, r2
 8041626:	d045      	beq.n	80416b4 <StartDefaultTask+0x178>
 8041628:	4b2f      	ldr	r3, [pc, #188]	; (80416e8 <StartDefaultTask+0x1ac>)
 804162a:	681b      	ldr	r3, [r3, #0]
 804162c:	4a31      	ldr	r2, [pc, #196]	; (80416f4 <StartDefaultTask+0x1b8>)
 804162e:	4293      	cmp	r3, r2
 8041630:	d040      	beq.n	80416b4 <StartDefaultTask+0x178>
 8041632:	4b2d      	ldr	r3, [pc, #180]	; (80416e8 <StartDefaultTask+0x1ac>)
 8041634:	681b      	ldr	r3, [r3, #0]
 8041636:	4a30      	ldr	r2, [pc, #192]	; (80416f8 <StartDefaultTask+0x1bc>)
 8041638:	4293      	cmp	r3, r2
 804163a:	d03b      	beq.n	80416b4 <StartDefaultTask+0x178>
 804163c:	4b2a      	ldr	r3, [pc, #168]	; (80416e8 <StartDefaultTask+0x1ac>)
 804163e:	681b      	ldr	r3, [r3, #0]
 8041640:	4a2e      	ldr	r2, [pc, #184]	; (80416fc <StartDefaultTask+0x1c0>)
 8041642:	4293      	cmp	r3, r2
 8041644:	d036      	beq.n	80416b4 <StartDefaultTask+0x178>
 8041646:	4b28      	ldr	r3, [pc, #160]	; (80416e8 <StartDefaultTask+0x1ac>)
 8041648:	681b      	ldr	r3, [r3, #0]
 804164a:	4a2d      	ldr	r2, [pc, #180]	; (8041700 <StartDefaultTask+0x1c4>)
 804164c:	4293      	cmp	r3, r2
 804164e:	d031      	beq.n	80416b4 <StartDefaultTask+0x178>
 8041650:	4b25      	ldr	r3, [pc, #148]	; (80416e8 <StartDefaultTask+0x1ac>)
 8041652:	681b      	ldr	r3, [r3, #0]
 8041654:	4a2b      	ldr	r2, [pc, #172]	; (8041704 <StartDefaultTask+0x1c8>)
 8041656:	4293      	cmp	r3, r2
 8041658:	d02c      	beq.n	80416b4 <StartDefaultTask+0x178>
 804165a:	4b23      	ldr	r3, [pc, #140]	; (80416e8 <StartDefaultTask+0x1ac>)
 804165c:	681b      	ldr	r3, [r3, #0]
 804165e:	4a2a      	ldr	r2, [pc, #168]	; (8041708 <StartDefaultTask+0x1cc>)
 8041660:	4293      	cmp	r3, r2
 8041662:	d027      	beq.n	80416b4 <StartDefaultTask+0x178>
 8041664:	4b20      	ldr	r3, [pc, #128]	; (80416e8 <StartDefaultTask+0x1ac>)
 8041666:	681b      	ldr	r3, [r3, #0]
 8041668:	4a28      	ldr	r2, [pc, #160]	; (804170c <StartDefaultTask+0x1d0>)
 804166a:	4293      	cmp	r3, r2
 804166c:	d022      	beq.n	80416b4 <StartDefaultTask+0x178>
 804166e:	4b1e      	ldr	r3, [pc, #120]	; (80416e8 <StartDefaultTask+0x1ac>)
 8041670:	681b      	ldr	r3, [r3, #0]
 8041672:	4a27      	ldr	r2, [pc, #156]	; (8041710 <StartDefaultTask+0x1d4>)
 8041674:	4293      	cmp	r3, r2
 8041676:	d01d      	beq.n	80416b4 <StartDefaultTask+0x178>
 8041678:	4b1b      	ldr	r3, [pc, #108]	; (80416e8 <StartDefaultTask+0x1ac>)
 804167a:	681b      	ldr	r3, [r3, #0]
 804167c:	4a25      	ldr	r2, [pc, #148]	; (8041714 <StartDefaultTask+0x1d8>)
 804167e:	4293      	cmp	r3, r2
 8041680:	d018      	beq.n	80416b4 <StartDefaultTask+0x178>
 8041682:	4b19      	ldr	r3, [pc, #100]	; (80416e8 <StartDefaultTask+0x1ac>)
 8041684:	681b      	ldr	r3, [r3, #0]
 8041686:	4a24      	ldr	r2, [pc, #144]	; (8041718 <StartDefaultTask+0x1dc>)
 8041688:	4293      	cmp	r3, r2
 804168a:	d013      	beq.n	80416b4 <StartDefaultTask+0x178>
 804168c:	4b16      	ldr	r3, [pc, #88]	; (80416e8 <StartDefaultTask+0x1ac>)
 804168e:	681b      	ldr	r3, [r3, #0]
 8041690:	4a22      	ldr	r2, [pc, #136]	; (804171c <StartDefaultTask+0x1e0>)
 8041692:	4293      	cmp	r3, r2
 8041694:	d00e      	beq.n	80416b4 <StartDefaultTask+0x178>
 8041696:	4b14      	ldr	r3, [pc, #80]	; (80416e8 <StartDefaultTask+0x1ac>)
 8041698:	681b      	ldr	r3, [r3, #0]
 804169a:	4a21      	ldr	r2, [pc, #132]	; (8041720 <StartDefaultTask+0x1e4>)
 804169c:	4293      	cmp	r3, r2
 804169e:	d009      	beq.n	80416b4 <StartDefaultTask+0x178>
 80416a0:	4b11      	ldr	r3, [pc, #68]	; (80416e8 <StartDefaultTask+0x1ac>)
 80416a2:	681b      	ldr	r3, [r3, #0]
 80416a4:	4a1f      	ldr	r2, [pc, #124]	; (8041724 <StartDefaultTask+0x1e8>)
 80416a6:	4293      	cmp	r3, r2
 80416a8:	d004      	beq.n	80416b4 <StartDefaultTask+0x178>
 80416aa:	4b0f      	ldr	r3, [pc, #60]	; (80416e8 <StartDefaultTask+0x1ac>)
 80416ac:	681b      	ldr	r3, [r3, #0]
 80416ae:	4a1e      	ldr	r2, [pc, #120]	; (8041728 <StartDefaultTask+0x1ec>)
 80416b0:	4293      	cmp	r3, r2
 80416b2:	d108      	bne.n	80416c6 <StartDefaultTask+0x18a>
 80416b4:	4b0c      	ldr	r3, [pc, #48]	; (80416e8 <StartDefaultTask+0x1ac>)
 80416b6:	681b      	ldr	r3, [r3, #0]
 80416b8:	681a      	ldr	r2, [r3, #0]
 80416ba:	4b0b      	ldr	r3, [pc, #44]	; (80416e8 <StartDefaultTask+0x1ac>)
 80416bc:	681b      	ldr	r3, [r3, #0]
 80416be:	f022 0210 	bic.w	r2, r2, #16
 80416c2:	601a      	str	r2, [r3, #0]
 80416c4:	e007      	b.n	80416d6 <StartDefaultTask+0x19a>
 80416c6:	4b08      	ldr	r3, [pc, #32]	; (80416e8 <StartDefaultTask+0x1ac>)
 80416c8:	681b      	ldr	r3, [r3, #0]
 80416ca:	681a      	ldr	r2, [r3, #0]
 80416cc:	4b06      	ldr	r3, [pc, #24]	; (80416e8 <StartDefaultTask+0x1ac>)
 80416ce:	681b      	ldr	r3, [r3, #0]
 80416d0:	f022 0202 	bic.w	r2, r2, #2
 80416d4:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  for(;;)
  {
    //printf("Hello World! %d\r\n", count++);
    osDelay(2000);
 80416d6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80416da:	f014 fc26 	bl	8055f2a <osDelay>
 80416de:	e7fa      	b.n	80416d6 <StartDefaultTask+0x19a>
 80416e0:	24000a68 	.word	0x24000a68
 80416e4:	24000890 	.word	0x24000890
 80416e8:	24000998 	.word	0x24000998
 80416ec:	40020010 	.word	0x40020010
 80416f0:	40020028 	.word	0x40020028
 80416f4:	40020040 	.word	0x40020040
 80416f8:	40020058 	.word	0x40020058
 80416fc:	40020070 	.word	0x40020070
 8041700:	40020088 	.word	0x40020088
 8041704:	400200a0 	.word	0x400200a0
 8041708:	400200b8 	.word	0x400200b8
 804170c:	40020410 	.word	0x40020410
 8041710:	40020428 	.word	0x40020428
 8041714:	40020440 	.word	0x40020440
 8041718:	40020458 	.word	0x40020458
 804171c:	40020470 	.word	0x40020470
 8041720:	40020488 	.word	0x40020488
 8041724:	400204a0 	.word	0x400204a0
 8041728:	400204b8 	.word	0x400204b8

0804172c <USBFileSystemTask_Start>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_USBFileSystemTask_Start */
void USBFileSystemTask_Start(void const * argument)
{
 804172c:	b580      	push	{r7, lr}
 804172e:	b082      	sub	sp, #8
 8041730:	af00      	add	r7, sp, #0
 8041732:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBFileSystemTask_Start */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8041734:	2001      	movs	r0, #1
 8041736:	f014 fbf8 	bl	8055f2a <osDelay>
 804173a:	e7fb      	b.n	8041734 <USBFileSystemTask_Start+0x8>

0804173c <ConsoleTask_Start>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ConsoleTask_Start */
void ConsoleTask_Start(void const * argument)
{
 804173c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8041740:	b088      	sub	sp, #32
 8041742:	af00      	add	r7, sp, #0
 8041744:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN ConsoleTask_Start */
	// ToDo Add buffer full mechanism to UART TX.
	printf("\r\n\r\n[INFO]: APP%d is running...\r\n\r\n", APP_NUM);
 8041746:	2102      	movs	r1, #2
 8041748:	48a7      	ldr	r0, [pc, #668]	; (80419e8 <ConsoleTask_Start+0x2ac>)
 804174a:	f018 fcd3 	bl	805a0f4 <iprintf>

	printf("======================\r\n");
 804174e:	48a7      	ldr	r0, [pc, #668]	; (80419ec <ConsoleTask_Start+0x2b0>)
 8041750:	f018 fd56 	bl	805a200 <puts>
	printf(" Terminal is ready...\r\n");
 8041754:	48a6      	ldr	r0, [pc, #664]	; (80419f0 <ConsoleTask_Start+0x2b4>)
 8041756:	f018 fd53 	bl	805a200 <puts>
	printf(" Waiting commands... \r\n");
 804175a:	48a6      	ldr	r0, [pc, #664]	; (80419f4 <ConsoleTask_Start+0x2b8>)
 804175c:	f018 fd50 	bl	805a200 <puts>
	printf("======================\r\n");
 8041760:	48a2      	ldr	r0, [pc, #648]	; (80419ec <ConsoleTask_Start+0x2b0>)
 8041762:	f018 fd4d 	bl	805a200 <puts>

	uint8_t str_trim_start = 0;
 8041766:	2300      	movs	r3, #0
 8041768:	76bb      	strb	r3, [r7, #26]
	uint8_t str_trim_end = 0;
 804176a:	2300      	movs	r3, #0
 804176c:	76fb      	strb	r3, [r7, #27]

	UINT SZ_STR = 100;
 804176e:	2364      	movs	r3, #100	; 0x64
 8041770:	617b      	str	r3, [r7, #20]
	TCHAR str[SZ_STR];
 8041772:	6979      	ldr	r1, [r7, #20]
 8041774:	460b      	mov	r3, r1
 8041776:	3b01      	subs	r3, #1
 8041778:	613b      	str	r3, [r7, #16]
 804177a:	2300      	movs	r3, #0
 804177c:	4688      	mov	r8, r1
 804177e:	4699      	mov	r9, r3
 8041780:	f04f 0200 	mov.w	r2, #0
 8041784:	f04f 0300 	mov.w	r3, #0
 8041788:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 804178c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8041790:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8041794:	2300      	movs	r3, #0
 8041796:	460c      	mov	r4, r1
 8041798:	461d      	mov	r5, r3
 804179a:	f04f 0200 	mov.w	r2, #0
 804179e:	f04f 0300 	mov.w	r3, #0
 80417a2:	00eb      	lsls	r3, r5, #3
 80417a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80417a8:	00e2      	lsls	r2, r4, #3
 80417aa:	1dcb      	adds	r3, r1, #7
 80417ac:	08db      	lsrs	r3, r3, #3
 80417ae:	00db      	lsls	r3, r3, #3
 80417b0:	ebad 0d03 	sub.w	sp, sp, r3
 80417b4:	466b      	mov	r3, sp
 80417b6:	3300      	adds	r3, #0
 80417b8:	60fb      	str	r3, [r7, #12]

	char* trimmed_command = NULL;
 80417ba:	2300      	movs	r3, #0
 80417bc:	61fb      	str	r3, [r7, #28]
  /* Infinite loop */
  for(;;)
  {
	 /* Wait incoming command from UART */

	ulTaskNotifyTake(pdTRUE,          /* Clear the notification value before exiting. */
 80417be:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80417c2:	2001      	movs	r0, #1
 80417c4:	f016 fea0 	bl	8058508 <ulTaskNotifyTake>
	                 portMAX_DELAY ); /* Block indefinitely. */


	/* Trimming the coming command to delete empty spaces */

	for(str_trim_start = 0; str_trim_start <= strlen(received_command); str_trim_start ++)
 80417c8:	2300      	movs	r3, #0
 80417ca:	76bb      	strb	r3, [r7, #26]
 80417cc:	e00c      	b.n	80417e8 <ConsoleTask_Start+0xac>
	{
		if(received_command[str_trim_start] != ' ')
 80417ce:	7ebb      	ldrb	r3, [r7, #26]
 80417d0:	4a89      	ldr	r2, [pc, #548]	; (80419f8 <ConsoleTask_Start+0x2bc>)
 80417d2:	5cd3      	ldrb	r3, [r2, r3]
 80417d4:	2b20      	cmp	r3, #32
 80417d6:	d004      	beq.n	80417e2 <ConsoleTask_Start+0xa6>
		{
			trimmed_command = received_command + str_trim_start;
 80417d8:	7ebb      	ldrb	r3, [r7, #26]
 80417da:	4a87      	ldr	r2, [pc, #540]	; (80419f8 <ConsoleTask_Start+0x2bc>)
 80417dc:	4413      	add	r3, r2
 80417de:	61fb      	str	r3, [r7, #28]
			break;
 80417e0:	e009      	b.n	80417f6 <ConsoleTask_Start+0xba>
	for(str_trim_start = 0; str_trim_start <= strlen(received_command); str_trim_start ++)
 80417e2:	7ebb      	ldrb	r3, [r7, #26]
 80417e4:	3301      	adds	r3, #1
 80417e6:	76bb      	strb	r3, [r7, #26]
 80417e8:	7ebc      	ldrb	r4, [r7, #26]
 80417ea:	4883      	ldr	r0, [pc, #524]	; (80419f8 <ConsoleTask_Start+0x2bc>)
 80417ec:	f7fe fd9a 	bl	8040324 <strlen>
 80417f0:	4603      	mov	r3, r0
 80417f2:	429c      	cmp	r4, r3
 80417f4:	d9eb      	bls.n	80417ce <ConsoleTask_Start+0x92>
		}
	}

	for(str_trim_end = strlen(trimmed_command)-1; str_trim_end >= 0; str_trim_end--)
 80417f6:	69f8      	ldr	r0, [r7, #28]
 80417f8:	f7fe fd94 	bl	8040324 <strlen>
 80417fc:	4603      	mov	r3, r0
 80417fe:	b2db      	uxtb	r3, r3
 8041800:	3b01      	subs	r3, #1
 8041802:	76fb      	strb	r3, [r7, #27]
	{
		if(trimmed_command[str_trim_end] != ' ')
 8041804:	7efb      	ldrb	r3, [r7, #27]
 8041806:	69fa      	ldr	r2, [r7, #28]
 8041808:	4413      	add	r3, r2
 804180a:	781b      	ldrb	r3, [r3, #0]
 804180c:	2b20      	cmp	r3, #32
 804180e:	d00f      	beq.n	8041830 <ConsoleTask_Start+0xf4>
		{
			trimmed_command[str_trim_end+1] = '\0';
 8041810:	7efb      	ldrb	r3, [r7, #27]
 8041812:	3301      	adds	r3, #1
 8041814:	69fa      	ldr	r2, [r7, #28]
 8041816:	4413      	add	r3, r2
 8041818:	2200      	movs	r2, #0
 804181a:	701a      	strb	r2, [r3, #0]
			break;
 804181c:	bf00      	nop
		}
	}

	/* Handling Incoming Command */

	printf("CMD$: %s \r\n", trimmed_command);
 804181e:	69f9      	ldr	r1, [r7, #28]
 8041820:	4876      	ldr	r0, [pc, #472]	; (80419fc <ConsoleTask_Start+0x2c0>)
 8041822:	f018 fc67 	bl	805a0f4 <iprintf>

	if(Appli_state != APPLICATION_READY){
 8041826:	4b76      	ldr	r3, [pc, #472]	; (8041a00 <ConsoleTask_Start+0x2c4>)
 8041828:	781b      	ldrb	r3, [r3, #0]
 804182a:	2b02      	cmp	r3, #2
 804182c:	d008      	beq.n	8041840 <ConsoleTask_Start+0x104>
 804182e:	e003      	b.n	8041838 <ConsoleTask_Start+0xfc>
	for(str_trim_end = strlen(trimmed_command)-1; str_trim_end >= 0; str_trim_end--)
 8041830:	7efb      	ldrb	r3, [r7, #27]
 8041832:	3b01      	subs	r3, #1
 8041834:	76fb      	strb	r3, [r7, #27]
		if(trimmed_command[str_trim_end] != ' ')
 8041836:	e7e5      	b.n	8041804 <ConsoleTask_Start+0xc8>
		printf("USB is not connected!\r\n");
 8041838:	4872      	ldr	r0, [pc, #456]	; (8041a04 <ConsoleTask_Start+0x2c8>)
 804183a:	f018 fce1 	bl	805a200 <puts>
		continue;
 804183e:	e0d1      	b.n	80419e4 <ConsoleTask_Start+0x2a8>
	}



	if(strlen(trimmed_command) > 0)
 8041840:	69fb      	ldr	r3, [r7, #28]
 8041842:	781b      	ldrb	r3, [r3, #0]
 8041844:	2b00      	cmp	r3, #0
 8041846:	f000 80ca 	beq.w	80419de <ConsoleTask_Start+0x2a2>
	{

		if(!strncmp(trimmed_command , "mount" , 5))
 804184a:	2205      	movs	r2, #5
 804184c:	496e      	ldr	r1, [pc, #440]	; (8041a08 <ConsoleTask_Start+0x2cc>)
 804184e:	69f8      	ldr	r0, [r7, #28]
 8041850:	f018 fd1b 	bl	805a28a <strncmp>
 8041854:	4603      	mov	r3, r0
 8041856:	2b00      	cmp	r3, #0
 8041858:	d11e      	bne.n	8041898 <ConsoleTask_Start+0x15c>
		{
			if(disk_mounted){
 804185a:	4b6c      	ldr	r3, [pc, #432]	; (8041a0c <ConsoleTask_Start+0x2d0>)
 804185c:	781b      	ldrb	r3, [r3, #0]
 804185e:	2b00      	cmp	r3, #0
 8041860:	d003      	beq.n	804186a <ConsoleTask_Start+0x12e>
				printf("USB is mounted already.\r\n");
 8041862:	486b      	ldr	r0, [pc, #428]	; (8041a10 <ConsoleTask_Start+0x2d4>)
 8041864:	f018 fccc 	bl	805a200 <puts>
				continue;
 8041868:	e0bc      	b.n	80419e4 <ConsoleTask_Start+0x2a8>
			}

			printf("Mounting the USB...\r\n");
 804186a:	486a      	ldr	r0, [pc, #424]	; (8041a14 <ConsoleTask_Start+0x2d8>)
 804186c:	f018 fcc8 	bl	805a200 <puts>

			if(f_mount(&USBHFatFS, (TCHAR const*)USBHPath, 0) != FR_OK)
 8041870:	2200      	movs	r2, #0
 8041872:	4969      	ldr	r1, [pc, #420]	; (8041a18 <ConsoleTask_Start+0x2dc>)
 8041874:	4869      	ldr	r0, [pc, #420]	; (8041a1c <ConsoleTask_Start+0x2e0>)
 8041876:	f012 fafb 	bl	8053e70 <f_mount>
 804187a:	4603      	mov	r3, r0
 804187c:	2b00      	cmp	r3, #0
 804187e:	d004      	beq.n	804188a <ConsoleTask_Start+0x14e>
			{
				printf("Mounting error!\r\n");
 8041880:	4867      	ldr	r0, [pc, #412]	; (8041a20 <ConsoleTask_Start+0x2e4>)
 8041882:	f018 fcbd 	bl	805a200 <puts>
				Error_Handler();
 8041886:	f000 f909 	bl	8041a9c <Error_Handler>
			}

			disk_mounted = 1;
 804188a:	4b60      	ldr	r3, [pc, #384]	; (8041a0c <ConsoleTask_Start+0x2d0>)
 804188c:	2201      	movs	r2, #1
 804188e:	701a      	strb	r2, [r3, #0]
			printf("Mounting the USB is done.\r\n");
 8041890:	4864      	ldr	r0, [pc, #400]	; (8041a24 <ConsoleTask_Start+0x2e8>)
 8041892:	f018 fcb5 	bl	805a200 <puts>
			continue;
 8041896:	e0a5      	b.n	80419e4 <ConsoleTask_Start+0x2a8>
		}
		else if(!strncmp(trimmed_command , "unmount" , 7))
 8041898:	2207      	movs	r2, #7
 804189a:	4963      	ldr	r1, [pc, #396]	; (8041a28 <ConsoleTask_Start+0x2ec>)
 804189c:	69f8      	ldr	r0, [r7, #28]
 804189e:	f018 fcf4 	bl	805a28a <strncmp>
 80418a2:	4603      	mov	r3, r0
 80418a4:	2b00      	cmp	r3, #0
 80418a6:	d11e      	bne.n	80418e6 <ConsoleTask_Start+0x1aa>
		{
			if(!disk_mounted){
 80418a8:	4b58      	ldr	r3, [pc, #352]	; (8041a0c <ConsoleTask_Start+0x2d0>)
 80418aa:	781b      	ldrb	r3, [r3, #0]
 80418ac:	2b00      	cmp	r3, #0
 80418ae:	d103      	bne.n	80418b8 <ConsoleTask_Start+0x17c>
				printf("USB is not mounted yet. Mount it first!\r\n");
 80418b0:	485e      	ldr	r0, [pc, #376]	; (8041a2c <ConsoleTask_Start+0x2f0>)
 80418b2:	f018 fca5 	bl	805a200 <puts>
				continue;
 80418b6:	e095      	b.n	80419e4 <ConsoleTask_Start+0x2a8>
			}

			printf("Unmounting the USB...\r\n");
 80418b8:	485d      	ldr	r0, [pc, #372]	; (8041a30 <ConsoleTask_Start+0x2f4>)
 80418ba:	f018 fca1 	bl	805a200 <puts>

			if(f_mount(NULL, (TCHAR const*)USBHPath, 0) != FR_OK)
 80418be:	2200      	movs	r2, #0
 80418c0:	4955      	ldr	r1, [pc, #340]	; (8041a18 <ConsoleTask_Start+0x2dc>)
 80418c2:	2000      	movs	r0, #0
 80418c4:	f012 fad4 	bl	8053e70 <f_mount>
 80418c8:	4603      	mov	r3, r0
 80418ca:	2b00      	cmp	r3, #0
 80418cc:	d004      	beq.n	80418d8 <ConsoleTask_Start+0x19c>
			{
				printf("Unmounting error!\r\n");
 80418ce:	4859      	ldr	r0, [pc, #356]	; (8041a34 <ConsoleTask_Start+0x2f8>)
 80418d0:	f018 fc96 	bl	805a200 <puts>
				Error_Handler();
 80418d4:	f000 f8e2 	bl	8041a9c <Error_Handler>
			}

			disk_mounted = 0;
 80418d8:	4b4c      	ldr	r3, [pc, #304]	; (8041a0c <ConsoleTask_Start+0x2d0>)
 80418da:	2200      	movs	r2, #0
 80418dc:	701a      	strb	r2, [r3, #0]
			printf("Unmounting the USB is done.\r\n");
 80418de:	4856      	ldr	r0, [pc, #344]	; (8041a38 <ConsoleTask_Start+0x2fc>)
 80418e0:	f018 fc8e 	bl	805a200 <puts>
			continue;
 80418e4:	e07e      	b.n	80419e4 <ConsoleTask_Start+0x2a8>
		}

		/* Check Mount Stat */
		if(!disk_mounted){
 80418e6:	4b49      	ldr	r3, [pc, #292]	; (8041a0c <ConsoleTask_Start+0x2d0>)
 80418e8:	781b      	ldrb	r3, [r3, #0]
 80418ea:	2b00      	cmp	r3, #0
 80418ec:	d103      	bne.n	80418f6 <ConsoleTask_Start+0x1ba>
			printf("USB is not mounted yet. Mount it first!\r\n");
 80418ee:	484f      	ldr	r0, [pc, #316]	; (8041a2c <ConsoleTask_Start+0x2f0>)
 80418f0:	f018 fc86 	bl	805a200 <puts>
			continue;
 80418f4:	e076      	b.n	80419e4 <ConsoleTask_Start+0x2a8>
		}

		/* Branch into Applications */

		if(!strncmp(trimmed_command , "pwd" , 3))
 80418f6:	2203      	movs	r2, #3
 80418f8:	4950      	ldr	r1, [pc, #320]	; (8041a3c <ConsoleTask_Start+0x300>)
 80418fa:	69f8      	ldr	r0, [r7, #28]
 80418fc:	f018 fcc5 	bl	805a28a <strncmp>
 8041900:	4603      	mov	r3, r0
 8041902:	2b00      	cmp	r3, #0
 8041904:	d108      	bne.n	8041918 <ConsoleTask_Start+0x1dc>
		{
			f_getcwd(str, SZ_STR);  /* Get current directory path */
 8041906:	6979      	ldr	r1, [r7, #20]
 8041908:	68f8      	ldr	r0, [r7, #12]
 804190a:	f013 fb4d 	bl	8054fa8 <f_getcwd>
			printf("%s\r\n", str);
 804190e:	68f9      	ldr	r1, [r7, #12]
 8041910:	484b      	ldr	r0, [pc, #300]	; (8041a40 <ConsoleTask_Start+0x304>)
 8041912:	f018 fbef 	bl	805a0f4 <iprintf>
 8041916:	e062      	b.n	80419de <ConsoleTask_Start+0x2a2>
		}
		else if(!strncmp(trimmed_command , "ls" , 2)){
 8041918:	2202      	movs	r2, #2
 804191a:	494a      	ldr	r1, [pc, #296]	; (8041a44 <ConsoleTask_Start+0x308>)
 804191c:	69f8      	ldr	r0, [r7, #28]
 804191e:	f018 fcb4 	bl	805a28a <strncmp>
 8041922:	4603      	mov	r3, r0
 8041924:	2b00      	cmp	r3, #0
 8041926:	d111      	bne.n	804194c <ConsoleTask_Start+0x210>
			char *buf = malloc(30*sizeof(char));
 8041928:	201e      	movs	r0, #30
 804192a:	f018 fadd 	bl	8059ee8 <malloc>
 804192e:	4603      	mov	r3, r0
 8041930:	60bb      	str	r3, [r7, #8]
			strcpy(buf, "/");
 8041932:	68bb      	ldr	r3, [r7, #8]
 8041934:	4944      	ldr	r1, [pc, #272]	; (8041a48 <ConsoleTask_Start+0x30c>)
 8041936:	461a      	mov	r2, r3
 8041938:	460b      	mov	r3, r1
 804193a:	881b      	ldrh	r3, [r3, #0]
 804193c:	8013      	strh	r3, [r2, #0]
			scan_all_files(buf);
 804193e:	68b8      	ldr	r0, [r7, #8]
 8041940:	f7fe fed0 	bl	80406e4 <scan_all_files>
			free(buf);
 8041944:	68b8      	ldr	r0, [r7, #8]
 8041946:	f018 fad7 	bl	8059ef8 <free>
 804194a:	e048      	b.n	80419de <ConsoleTask_Start+0x2a2>
		}
		else if(!strncmp(trimmed_command , "touch" , 5))
 804194c:	2205      	movs	r2, #5
 804194e:	493f      	ldr	r1, [pc, #252]	; (8041a4c <ConsoleTask_Start+0x310>)
 8041950:	69f8      	ldr	r0, [r7, #28]
 8041952:	f018 fc9a 	bl	805a28a <strncmp>
 8041956:	4603      	mov	r3, r0
 8041958:	2b00      	cmp	r3, #0
 804195a:	d105      	bne.n	8041968 <ConsoleTask_Start+0x22c>
		{
			create_file(trimmed_command + 5);
 804195c:	69fb      	ldr	r3, [r7, #28]
 804195e:	3305      	adds	r3, #5
 8041960:	4618      	mov	r0, r3
 8041962:	f7fe ff3f 	bl	80407e4 <create_file>
 8041966:	e03a      	b.n	80419de <ConsoleTask_Start+0x2a2>
		}
		else if(!strncmp(trimmed_command , "rm" , 2))
 8041968:	2202      	movs	r2, #2
 804196a:	4939      	ldr	r1, [pc, #228]	; (8041a50 <ConsoleTask_Start+0x314>)
 804196c:	69f8      	ldr	r0, [r7, #28]
 804196e:	f018 fc8c 	bl	805a28a <strncmp>
 8041972:	4603      	mov	r3, r0
 8041974:	2b00      	cmp	r3, #0
 8041976:	d105      	bne.n	8041984 <ConsoleTask_Start+0x248>
		{
			remove_file(trimmed_command+2);
 8041978:	69fb      	ldr	r3, [r7, #28]
 804197a:	3302      	adds	r3, #2
 804197c:	4618      	mov	r0, r3
 804197e:	f7fe ff91 	bl	80408a4 <remove_file>
 8041982:	e02c      	b.n	80419de <ConsoleTask_Start+0x2a2>
		}
		else if(!strncmp(trimmed_command , "mkdir" , 5))
 8041984:	2205      	movs	r2, #5
 8041986:	4933      	ldr	r1, [pc, #204]	; (8041a54 <ConsoleTask_Start+0x318>)
 8041988:	69f8      	ldr	r0, [r7, #28]
 804198a:	f018 fc7e 	bl	805a28a <strncmp>
 804198e:	4603      	mov	r3, r0
 8041990:	2b00      	cmp	r3, #0
 8041992:	d105      	bne.n	80419a0 <ConsoleTask_Start+0x264>
		{
			create_dir(trimmed_command+5);
 8041994:	69fb      	ldr	r3, [r7, #28]
 8041996:	3305      	adds	r3, #5
 8041998:	4618      	mov	r0, r3
 804199a:	f7fe ffc9 	bl	8040930 <create_dir>
 804199e:	e01e      	b.n	80419de <ConsoleTask_Start+0x2a2>
		}else if(!strncmp(trimmed_command , "echo" , 4))
 80419a0:	2204      	movs	r2, #4
 80419a2:	492d      	ldr	r1, [pc, #180]	; (8041a58 <ConsoleTask_Start+0x31c>)
 80419a4:	69f8      	ldr	r0, [r7, #28]
 80419a6:	f018 fc70 	bl	805a28a <strncmp>
 80419aa:	4603      	mov	r3, r0
 80419ac:	2b00      	cmp	r3, #0
 80419ae:	d105      	bne.n	80419bc <ConsoleTask_Start+0x280>
		{
			echo(trimmed_command+4);
 80419b0:	69fb      	ldr	r3, [r7, #28]
 80419b2:	3304      	adds	r3, #4
 80419b4:	4618      	mov	r0, r3
 80419b6:	f7ff f8dd 	bl	8040b74 <echo>
 80419ba:	e010      	b.n	80419de <ConsoleTask_Start+0x2a2>
		}else if(!strncmp(trimmed_command , "cat" , 3))
 80419bc:	2203      	movs	r2, #3
 80419be:	4927      	ldr	r1, [pc, #156]	; (8041a5c <ConsoleTask_Start+0x320>)
 80419c0:	69f8      	ldr	r0, [r7, #28]
 80419c2:	f018 fc62 	bl	805a28a <strncmp>
 80419c6:	4603      	mov	r3, r0
 80419c8:	2b00      	cmp	r3, #0
 80419ca:	d105      	bne.n	80419d8 <ConsoleTask_Start+0x29c>
		{
			read_file(trimmed_command+3);
 80419cc:	69fb      	ldr	r3, [r7, #28]
 80419ce:	3303      	adds	r3, #3
 80419d0:	4618      	mov	r0, r3
 80419d2:	f7ff f83f 	bl	8040a54 <read_file>
 80419d6:	e002      	b.n	80419de <ConsoleTask_Start+0x2a2>
		}else{
			printf("Unknown Command!\r\n");
 80419d8:	4821      	ldr	r0, [pc, #132]	; (8041a60 <ConsoleTask_Start+0x324>)
 80419da:	f018 fc11 	bl	805a200 <puts>
		}

	}

    osDelay(1);
 80419de:	2001      	movs	r0, #1
 80419e0:	f014 faa3 	bl	8055f2a <osDelay>
	ulTaskNotifyTake(pdTRUE,          /* Clear the notification value before exiting. */
 80419e4:	e6eb      	b.n	80417be <ConsoleTask_Start+0x82>
 80419e6:	bf00      	nop
 80419e8:	0805b69c 	.word	0x0805b69c
 80419ec:	0805b6c0 	.word	0x0805b6c0
 80419f0:	0805b6d8 	.word	0x0805b6d8
 80419f4:	0805b6f0 	.word	0x0805b6f0
 80419f8:	24000ab4 	.word	0x24000ab4
 80419fc:	0805b708 	.word	0x0805b708
 8041a00:	24006ed0 	.word	0x24006ed0
 8041a04:	0805b714 	.word	0x0805b714
 8041a08:	0805b72c 	.word	0x0805b72c
 8041a0c:	240001e4 	.word	0x240001e4
 8041a10:	0805b734 	.word	0x0805b734
 8041a14:	0805b750 	.word	0x0805b750
 8041a18:	24000b50 	.word	0x24000b50
 8041a1c:	24000b54 	.word	0x24000b54
 8041a20:	0805b768 	.word	0x0805b768
 8041a24:	0805b77c 	.word	0x0805b77c
 8041a28:	0805b798 	.word	0x0805b798
 8041a2c:	0805b7a0 	.word	0x0805b7a0
 8041a30:	0805b7cc 	.word	0x0805b7cc
 8041a34:	0805b7e4 	.word	0x0805b7e4
 8041a38:	0805b7f8 	.word	0x0805b7f8
 8041a3c:	0805b818 	.word	0x0805b818
 8041a40:	0805b81c 	.word	0x0805b81c
 8041a44:	0805b824 	.word	0x0805b824
 8041a48:	0805b828 	.word	0x0805b828
 8041a4c:	0805b82c 	.word	0x0805b82c
 8041a50:	0805b834 	.word	0x0805b834
 8041a54:	0805b838 	.word	0x0805b838
 8041a58:	0805b840 	.word	0x0805b840
 8041a5c:	0805b848 	.word	0x0805b848
 8041a60:	0805b84c 	.word	0x0805b84c

08041a64 <Timer1_Callback>:
  /* USER CODE END ConsoleTask_Start */
}

/* Timer1_Callback function */
void Timer1_Callback(void const * argument)
{
 8041a64:	b480      	push	{r7}
 8041a66:	b083      	sub	sp, #12
 8041a68:	af00      	add	r7, sp, #0
 8041a6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Timer1_Callback */

  /* USER CODE END Timer1_Callback */
}
 8041a6c:	bf00      	nop
 8041a6e:	370c      	adds	r7, #12
 8041a70:	46bd      	mov	sp, r7
 8041a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041a76:	4770      	bx	lr

08041a78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8041a78:	b580      	push	{r7, lr}
 8041a7a:	b082      	sub	sp, #8
 8041a7c:	af00      	add	r7, sp, #0
 8041a7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8041a80:	687b      	ldr	r3, [r7, #4]
 8041a82:	681b      	ldr	r3, [r3, #0]
 8041a84:	4a04      	ldr	r2, [pc, #16]	; (8041a98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8041a86:	4293      	cmp	r3, r2
 8041a88:	d101      	bne.n	8041a8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8041a8a:	f000 fb13 	bl	80420b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8041a8e:	bf00      	nop
 8041a90:	3708      	adds	r7, #8
 8041a92:	46bd      	mov	sp, r7
 8041a94:	bd80      	pop	{r7, pc}
 8041a96:	bf00      	nop
 8041a98:	40010000 	.word	0x40010000

08041a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8041a9c:	b480      	push	{r7}
 8041a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8041aa0:	b672      	cpsid	i
}
 8041aa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8041aa4:	e7fe      	b.n	8041aa4 <Error_Handler+0x8>
	...

08041aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8041aa8:	b580      	push	{r7, lr}
 8041aaa:	b082      	sub	sp, #8
 8041aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8041aae:	4b0c      	ldr	r3, [pc, #48]	; (8041ae0 <HAL_MspInit+0x38>)
 8041ab0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8041ab4:	4a0a      	ldr	r2, [pc, #40]	; (8041ae0 <HAL_MspInit+0x38>)
 8041ab6:	f043 0302 	orr.w	r3, r3, #2
 8041aba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8041abe:	4b08      	ldr	r3, [pc, #32]	; (8041ae0 <HAL_MspInit+0x38>)
 8041ac0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8041ac4:	f003 0302 	and.w	r3, r3, #2
 8041ac8:	607b      	str	r3, [r7, #4]
 8041aca:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8041acc:	2200      	movs	r2, #0
 8041ace:	210f      	movs	r1, #15
 8041ad0:	f06f 0001 	mvn.w	r0, #1
 8041ad4:	f000 fbea 	bl	80422ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8041ad8:	bf00      	nop
 8041ada:	3708      	adds	r7, #8
 8041adc:	46bd      	mov	sp, r7
 8041ade:	bd80      	pop	{r7, pc}
 8041ae0:	58024400 	.word	0x58024400

08041ae4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8041ae4:	b580      	push	{r7, lr}
 8041ae6:	b0b6      	sub	sp, #216	; 0xd8
 8041ae8:	af00      	add	r7, sp, #0
 8041aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8041aec:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8041af0:	2200      	movs	r2, #0
 8041af2:	601a      	str	r2, [r3, #0]
 8041af4:	605a      	str	r2, [r3, #4]
 8041af6:	609a      	str	r2, [r3, #8]
 8041af8:	60da      	str	r2, [r3, #12]
 8041afa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8041afc:	f107 0310 	add.w	r3, r7, #16
 8041b00:	22b4      	movs	r2, #180	; 0xb4
 8041b02:	2100      	movs	r1, #0
 8041b04:	4618      	mov	r0, r3
 8041b06:	f018 fa0d 	bl	8059f24 <memset>
  if(huart->Instance==USART3)
 8041b0a:	687b      	ldr	r3, [r7, #4]
 8041b0c:	681b      	ldr	r3, [r3, #0]
 8041b0e:	4a57      	ldr	r2, [pc, #348]	; (8041c6c <HAL_UART_MspInit+0x188>)
 8041b10:	4293      	cmp	r3, r2
 8041b12:	f040 80a6 	bne.w	8041c62 <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8041b16:	2302      	movs	r3, #2
 8041b18:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8041b1a:	2300      	movs	r3, #0
 8041b1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8041b20:	f107 0310 	add.w	r3, r7, #16
 8041b24:	4618      	mov	r0, r3
 8041b26:	f005 ffcf 	bl	8047ac8 <HAL_RCCEx_PeriphCLKConfig>
 8041b2a:	4603      	mov	r3, r0
 8041b2c:	2b00      	cmp	r3, #0
 8041b2e:	d001      	beq.n	8041b34 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8041b30:	f7ff ffb4 	bl	8041a9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8041b34:	4b4e      	ldr	r3, [pc, #312]	; (8041c70 <HAL_UART_MspInit+0x18c>)
 8041b36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8041b3a:	4a4d      	ldr	r2, [pc, #308]	; (8041c70 <HAL_UART_MspInit+0x18c>)
 8041b3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8041b40:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8041b44:	4b4a      	ldr	r3, [pc, #296]	; (8041c70 <HAL_UART_MspInit+0x18c>)
 8041b46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8041b4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8041b4e:	60fb      	str	r3, [r7, #12]
 8041b50:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8041b52:	4b47      	ldr	r3, [pc, #284]	; (8041c70 <HAL_UART_MspInit+0x18c>)
 8041b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8041b58:	4a45      	ldr	r2, [pc, #276]	; (8041c70 <HAL_UART_MspInit+0x18c>)
 8041b5a:	f043 0308 	orr.w	r3, r3, #8
 8041b5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8041b62:	4b43      	ldr	r3, [pc, #268]	; (8041c70 <HAL_UART_MspInit+0x18c>)
 8041b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8041b68:	f003 0308 	and.w	r3, r3, #8
 8041b6c:	60bb      	str	r3, [r7, #8]
 8041b6e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8041b70:	f44f 7340 	mov.w	r3, #768	; 0x300
 8041b74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041b78:	2302      	movs	r3, #2
 8041b7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041b7e:	2300      	movs	r3, #0
 8041b80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041b84:	2300      	movs	r3, #0
 8041b86:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8041b8a:	2307      	movs	r3, #7
 8041b8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8041b90:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8041b94:	4619      	mov	r1, r3
 8041b96:	4837      	ldr	r0, [pc, #220]	; (8041c74 <HAL_UART_MspInit+0x190>)
 8041b98:	f003 f9ea 	bl	8044f70 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream0;
 8041b9c:	4b36      	ldr	r3, [pc, #216]	; (8041c78 <HAL_UART_MspInit+0x194>)
 8041b9e:	4a37      	ldr	r2, [pc, #220]	; (8041c7c <HAL_UART_MspInit+0x198>)
 8041ba0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8041ba2:	4b35      	ldr	r3, [pc, #212]	; (8041c78 <HAL_UART_MspInit+0x194>)
 8041ba4:	222e      	movs	r2, #46	; 0x2e
 8041ba6:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8041ba8:	4b33      	ldr	r3, [pc, #204]	; (8041c78 <HAL_UART_MspInit+0x194>)
 8041baa:	2240      	movs	r2, #64	; 0x40
 8041bac:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8041bae:	4b32      	ldr	r3, [pc, #200]	; (8041c78 <HAL_UART_MspInit+0x194>)
 8041bb0:	2200      	movs	r2, #0
 8041bb2:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8041bb4:	4b30      	ldr	r3, [pc, #192]	; (8041c78 <HAL_UART_MspInit+0x194>)
 8041bb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8041bba:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8041bbc:	4b2e      	ldr	r3, [pc, #184]	; (8041c78 <HAL_UART_MspInit+0x194>)
 8041bbe:	2200      	movs	r2, #0
 8041bc0:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8041bc2:	4b2d      	ldr	r3, [pc, #180]	; (8041c78 <HAL_UART_MspInit+0x194>)
 8041bc4:	2200      	movs	r2, #0
 8041bc6:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8041bc8:	4b2b      	ldr	r3, [pc, #172]	; (8041c78 <HAL_UART_MspInit+0x194>)
 8041bca:	2200      	movs	r2, #0
 8041bcc:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8041bce:	4b2a      	ldr	r3, [pc, #168]	; (8041c78 <HAL_UART_MspInit+0x194>)
 8041bd0:	2200      	movs	r2, #0
 8041bd2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8041bd4:	4b28      	ldr	r3, [pc, #160]	; (8041c78 <HAL_UART_MspInit+0x194>)
 8041bd6:	2200      	movs	r2, #0
 8041bd8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8041bda:	4827      	ldr	r0, [pc, #156]	; (8041c78 <HAL_UART_MspInit+0x194>)
 8041bdc:	f000 fb8e 	bl	80422fc <HAL_DMA_Init>
 8041be0:	4603      	mov	r3, r0
 8041be2:	2b00      	cmp	r3, #0
 8041be4:	d001      	beq.n	8041bea <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 8041be6:	f7ff ff59 	bl	8041a9c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8041bea:	687b      	ldr	r3, [r7, #4]
 8041bec:	4a22      	ldr	r2, [pc, #136]	; (8041c78 <HAL_UART_MspInit+0x194>)
 8041bee:	679a      	str	r2, [r3, #120]	; 0x78
 8041bf0:	4a21      	ldr	r2, [pc, #132]	; (8041c78 <HAL_UART_MspInit+0x194>)
 8041bf2:	687b      	ldr	r3, [r7, #4]
 8041bf4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8041bf6:	4b22      	ldr	r3, [pc, #136]	; (8041c80 <HAL_UART_MspInit+0x19c>)
 8041bf8:	4a22      	ldr	r2, [pc, #136]	; (8041c84 <HAL_UART_MspInit+0x1a0>)
 8041bfa:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8041bfc:	4b20      	ldr	r3, [pc, #128]	; (8041c80 <HAL_UART_MspInit+0x19c>)
 8041bfe:	222d      	movs	r2, #45	; 0x2d
 8041c00:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8041c02:	4b1f      	ldr	r3, [pc, #124]	; (8041c80 <HAL_UART_MspInit+0x19c>)
 8041c04:	2200      	movs	r2, #0
 8041c06:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8041c08:	4b1d      	ldr	r3, [pc, #116]	; (8041c80 <HAL_UART_MspInit+0x19c>)
 8041c0a:	2200      	movs	r2, #0
 8041c0c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8041c0e:	4b1c      	ldr	r3, [pc, #112]	; (8041c80 <HAL_UART_MspInit+0x19c>)
 8041c10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8041c14:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8041c16:	4b1a      	ldr	r3, [pc, #104]	; (8041c80 <HAL_UART_MspInit+0x19c>)
 8041c18:	2200      	movs	r2, #0
 8041c1a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8041c1c:	4b18      	ldr	r3, [pc, #96]	; (8041c80 <HAL_UART_MspInit+0x19c>)
 8041c1e:	2200      	movs	r2, #0
 8041c20:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8041c22:	4b17      	ldr	r3, [pc, #92]	; (8041c80 <HAL_UART_MspInit+0x19c>)
 8041c24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8041c28:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8041c2a:	4b15      	ldr	r3, [pc, #84]	; (8041c80 <HAL_UART_MspInit+0x19c>)
 8041c2c:	2200      	movs	r2, #0
 8041c2e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8041c30:	4b13      	ldr	r3, [pc, #76]	; (8041c80 <HAL_UART_MspInit+0x19c>)
 8041c32:	2200      	movs	r2, #0
 8041c34:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8041c36:	4812      	ldr	r0, [pc, #72]	; (8041c80 <HAL_UART_MspInit+0x19c>)
 8041c38:	f000 fb60 	bl	80422fc <HAL_DMA_Init>
 8041c3c:	4603      	mov	r3, r0
 8041c3e:	2b00      	cmp	r3, #0
 8041c40:	d001      	beq.n	8041c46 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8041c42:	f7ff ff2b 	bl	8041a9c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8041c46:	687b      	ldr	r3, [r7, #4]
 8041c48:	4a0d      	ldr	r2, [pc, #52]	; (8041c80 <HAL_UART_MspInit+0x19c>)
 8041c4a:	67da      	str	r2, [r3, #124]	; 0x7c
 8041c4c:	4a0c      	ldr	r2, [pc, #48]	; (8041c80 <HAL_UART_MspInit+0x19c>)
 8041c4e:	687b      	ldr	r3, [r7, #4]
 8041c50:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8041c52:	2200      	movs	r2, #0
 8041c54:	2105      	movs	r1, #5
 8041c56:	2027      	movs	r0, #39	; 0x27
 8041c58:	f000 fb28 	bl	80422ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8041c5c:	2027      	movs	r0, #39	; 0x27
 8041c5e:	f000 fb3f 	bl	80422e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8041c62:	bf00      	nop
 8041c64:	37d8      	adds	r7, #216	; 0xd8
 8041c66:	46bd      	mov	sp, r7
 8041c68:	bd80      	pop	{r7, pc}
 8041c6a:	bf00      	nop
 8041c6c:	40004800 	.word	0x40004800
 8041c70:	58024400 	.word	0x58024400
 8041c74:	58020c00 	.word	0x58020c00
 8041c78:	24000920 	.word	0x24000920
 8041c7c:	40020010 	.word	0x40020010
 8041c80:	24000998 	.word	0x24000998
 8041c84:	40020028 	.word	0x40020028

08041c88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8041c88:	b580      	push	{r7, lr}
 8041c8a:	b08e      	sub	sp, #56	; 0x38
 8041c8c:	af00      	add	r7, sp, #0
 8041c8e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8041c90:	687b      	ldr	r3, [r7, #4]
 8041c92:	2b0f      	cmp	r3, #15
 8041c94:	d844      	bhi.n	8041d20 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8041c96:	2200      	movs	r2, #0
 8041c98:	6879      	ldr	r1, [r7, #4]
 8041c9a:	2019      	movs	r0, #25
 8041c9c:	f000 fb06 	bl	80422ac <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8041ca0:	2019      	movs	r0, #25
 8041ca2:	f000 fb1d 	bl	80422e0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8041ca6:	4a24      	ldr	r2, [pc, #144]	; (8041d38 <HAL_InitTick+0xb0>)
 8041ca8:	687b      	ldr	r3, [r7, #4]
 8041caa:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8041cac:	4b23      	ldr	r3, [pc, #140]	; (8041d3c <HAL_InitTick+0xb4>)
 8041cae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8041cb2:	4a22      	ldr	r2, [pc, #136]	; (8041d3c <HAL_InitTick+0xb4>)
 8041cb4:	f043 0301 	orr.w	r3, r3, #1
 8041cb8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8041cbc:	4b1f      	ldr	r3, [pc, #124]	; (8041d3c <HAL_InitTick+0xb4>)
 8041cbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8041cc2:	f003 0301 	and.w	r3, r3, #1
 8041cc6:	60bb      	str	r3, [r7, #8]
 8041cc8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8041cca:	f107 020c 	add.w	r2, r7, #12
 8041cce:	f107 0310 	add.w	r3, r7, #16
 8041cd2:	4611      	mov	r1, r2
 8041cd4:	4618      	mov	r0, r3
 8041cd6:	f005 feb5 	bl	8047a44 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8041cda:	f005 fe9d 	bl	8047a18 <HAL_RCC_GetPCLK2Freq>
 8041cde:	4603      	mov	r3, r0
 8041ce0:	005b      	lsls	r3, r3, #1
 8041ce2:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8041ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8041ce6:	4a16      	ldr	r2, [pc, #88]	; (8041d40 <HAL_InitTick+0xb8>)
 8041ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8041cec:	0c9b      	lsrs	r3, r3, #18
 8041cee:	3b01      	subs	r3, #1
 8041cf0:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8041cf2:	4b14      	ldr	r3, [pc, #80]	; (8041d44 <HAL_InitTick+0xbc>)
 8041cf4:	4a14      	ldr	r2, [pc, #80]	; (8041d48 <HAL_InitTick+0xc0>)
 8041cf6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8041cf8:	4b12      	ldr	r3, [pc, #72]	; (8041d44 <HAL_InitTick+0xbc>)
 8041cfa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8041cfe:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8041d00:	4a10      	ldr	r2, [pc, #64]	; (8041d44 <HAL_InitTick+0xbc>)
 8041d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8041d04:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8041d06:	4b0f      	ldr	r3, [pc, #60]	; (8041d44 <HAL_InitTick+0xbc>)
 8041d08:	2200      	movs	r2, #0
 8041d0a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8041d0c:	4b0d      	ldr	r3, [pc, #52]	; (8041d44 <HAL_InitTick+0xbc>)
 8041d0e:	2200      	movs	r2, #0
 8041d10:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8041d12:	480c      	ldr	r0, [pc, #48]	; (8041d44 <HAL_InitTick+0xbc>)
 8041d14:	f007 f9f4 	bl	8049100 <HAL_TIM_Base_Init>
 8041d18:	4603      	mov	r3, r0
 8041d1a:	2b00      	cmp	r3, #0
 8041d1c:	d107      	bne.n	8041d2e <HAL_InitTick+0xa6>
 8041d1e:	e001      	b.n	8041d24 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8041d20:	2301      	movs	r3, #1
 8041d22:	e005      	b.n	8041d30 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8041d24:	4807      	ldr	r0, [pc, #28]	; (8041d44 <HAL_InitTick+0xbc>)
 8041d26:	f007 fa4d 	bl	80491c4 <HAL_TIM_Base_Start_IT>
 8041d2a:	4603      	mov	r3, r0
 8041d2c:	e000      	b.n	8041d30 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8041d2e:	2301      	movs	r3, #1
}
 8041d30:	4618      	mov	r0, r3
 8041d32:	3738      	adds	r7, #56	; 0x38
 8041d34:	46bd      	mov	sp, r7
 8041d36:	bd80      	pop	{r7, pc}
 8041d38:	24000008 	.word	0x24000008
 8041d3c:	58024400 	.word	0x58024400
 8041d40:	431bde83 	.word	0x431bde83
 8041d44:	24000af8 	.word	0x24000af8
 8041d48:	40010000 	.word	0x40010000

08041d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8041d4c:	b480      	push	{r7}
 8041d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8041d50:	e7fe      	b.n	8041d50 <NMI_Handler+0x4>

08041d52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8041d52:	b480      	push	{r7}
 8041d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8041d56:	e7fe      	b.n	8041d56 <HardFault_Handler+0x4>

08041d58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8041d58:	b480      	push	{r7}
 8041d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8041d5c:	e7fe      	b.n	8041d5c <MemManage_Handler+0x4>

08041d5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8041d5e:	b480      	push	{r7}
 8041d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8041d62:	e7fe      	b.n	8041d62 <BusFault_Handler+0x4>

08041d64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8041d64:	b480      	push	{r7}
 8041d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8041d68:	e7fe      	b.n	8041d68 <UsageFault_Handler+0x4>

08041d6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8041d6a:	b480      	push	{r7}
 8041d6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8041d6e:	bf00      	nop
 8041d70:	46bd      	mov	sp, r7
 8041d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041d76:	4770      	bx	lr

08041d78 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8041d78:	b580      	push	{r7, lr}
 8041d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8041d7c:	4802      	ldr	r0, [pc, #8]	; (8041d88 <DMA1_Stream0_IRQHandler+0x10>)
 8041d7e:	f001 fde5 	bl	804394c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8041d82:	bf00      	nop
 8041d84:	bd80      	pop	{r7, pc}
 8041d86:	bf00      	nop
 8041d88:	24000920 	.word	0x24000920

08041d8c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8041d8c:	b580      	push	{r7, lr}
 8041d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8041d90:	4802      	ldr	r0, [pc, #8]	; (8041d9c <DMA1_Stream1_IRQHandler+0x10>)
 8041d92:	f001 fddb 	bl	804394c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8041d96:	bf00      	nop
 8041d98:	bd80      	pop	{r7, pc}
 8041d9a:	bf00      	nop
 8041d9c:	24000998 	.word	0x24000998

08041da0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8041da0:	b580      	push	{r7, lr}
 8041da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8041da4:	4802      	ldr	r0, [pc, #8]	; (8041db0 <TIM1_UP_IRQHandler+0x10>)
 8041da6:	f007 fa93 	bl	80492d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8041daa:	bf00      	nop
 8041dac:	bd80      	pop	{r7, pc}
 8041dae:	bf00      	nop
 8041db0:	24000af8 	.word	0x24000af8

08041db4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8041db4:	b580      	push	{r7, lr}
 8041db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8041db8:	4802      	ldr	r0, [pc, #8]	; (8041dc4 <USART3_IRQHandler+0x10>)
 8041dba:	f007 fd77 	bl	80498ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8041dbe:	bf00      	nop
 8041dc0:	bd80      	pop	{r7, pc}
 8041dc2:	bf00      	nop
 8041dc4:	24000890 	.word	0x24000890

08041dc8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8041dc8:	b580      	push	{r7, lr}
 8041dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8041dcc:	4802      	ldr	r0, [pc, #8]	; (8041dd8 <OTG_HS_IRQHandler+0x10>)
 8041dce:	f003 fd15 	bl	80457fc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8041dd2:	bf00      	nop
 8041dd4:	bd80      	pop	{r7, pc}
 8041dd6:	bf00      	nop
 8041dd8:	24006ed4 	.word	0x24006ed4

08041ddc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8041ddc:	b580      	push	{r7, lr}
 8041dde:	b086      	sub	sp, #24
 8041de0:	af00      	add	r7, sp, #0
 8041de2:	60f8      	str	r0, [r7, #12]
 8041de4:	60b9      	str	r1, [r7, #8]
 8041de6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8041de8:	2300      	movs	r3, #0
 8041dea:	617b      	str	r3, [r7, #20]
 8041dec:	e00a      	b.n	8041e04 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8041dee:	f3af 8000 	nop.w
 8041df2:	4601      	mov	r1, r0
 8041df4:	68bb      	ldr	r3, [r7, #8]
 8041df6:	1c5a      	adds	r2, r3, #1
 8041df8:	60ba      	str	r2, [r7, #8]
 8041dfa:	b2ca      	uxtb	r2, r1
 8041dfc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8041dfe:	697b      	ldr	r3, [r7, #20]
 8041e00:	3301      	adds	r3, #1
 8041e02:	617b      	str	r3, [r7, #20]
 8041e04:	697a      	ldr	r2, [r7, #20]
 8041e06:	687b      	ldr	r3, [r7, #4]
 8041e08:	429a      	cmp	r2, r3
 8041e0a:	dbf0      	blt.n	8041dee <_read+0x12>
	}

return len;
 8041e0c:	687b      	ldr	r3, [r7, #4]
}
 8041e0e:	4618      	mov	r0, r3
 8041e10:	3718      	adds	r7, #24
 8041e12:	46bd      	mov	sp, r7
 8041e14:	bd80      	pop	{r7, pc}

08041e16 <_close>:
	}
	return len;
}

int _close(int file)
{
 8041e16:	b480      	push	{r7}
 8041e18:	b083      	sub	sp, #12
 8041e1a:	af00      	add	r7, sp, #0
 8041e1c:	6078      	str	r0, [r7, #4]
	return -1;
 8041e1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8041e22:	4618      	mov	r0, r3
 8041e24:	370c      	adds	r7, #12
 8041e26:	46bd      	mov	sp, r7
 8041e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041e2c:	4770      	bx	lr

08041e2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8041e2e:	b480      	push	{r7}
 8041e30:	b083      	sub	sp, #12
 8041e32:	af00      	add	r7, sp, #0
 8041e34:	6078      	str	r0, [r7, #4]
 8041e36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8041e38:	683b      	ldr	r3, [r7, #0]
 8041e3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8041e3e:	605a      	str	r2, [r3, #4]
	return 0;
 8041e40:	2300      	movs	r3, #0
}
 8041e42:	4618      	mov	r0, r3
 8041e44:	370c      	adds	r7, #12
 8041e46:	46bd      	mov	sp, r7
 8041e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041e4c:	4770      	bx	lr

08041e4e <_isatty>:

int _isatty(int file)
{
 8041e4e:	b480      	push	{r7}
 8041e50:	b083      	sub	sp, #12
 8041e52:	af00      	add	r7, sp, #0
 8041e54:	6078      	str	r0, [r7, #4]
	return 1;
 8041e56:	2301      	movs	r3, #1
}
 8041e58:	4618      	mov	r0, r3
 8041e5a:	370c      	adds	r7, #12
 8041e5c:	46bd      	mov	sp, r7
 8041e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041e62:	4770      	bx	lr

08041e64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8041e64:	b480      	push	{r7}
 8041e66:	b085      	sub	sp, #20
 8041e68:	af00      	add	r7, sp, #0
 8041e6a:	60f8      	str	r0, [r7, #12]
 8041e6c:	60b9      	str	r1, [r7, #8]
 8041e6e:	607a      	str	r2, [r7, #4]
	return 0;
 8041e70:	2300      	movs	r3, #0
}
 8041e72:	4618      	mov	r0, r3
 8041e74:	3714      	adds	r7, #20
 8041e76:	46bd      	mov	sp, r7
 8041e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041e7c:	4770      	bx	lr
	...

08041e80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8041e80:	b580      	push	{r7, lr}
 8041e82:	b086      	sub	sp, #24
 8041e84:	af00      	add	r7, sp, #0
 8041e86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8041e88:	4a14      	ldr	r2, [pc, #80]	; (8041edc <_sbrk+0x5c>)
 8041e8a:	4b15      	ldr	r3, [pc, #84]	; (8041ee0 <_sbrk+0x60>)
 8041e8c:	1ad3      	subs	r3, r2, r3
 8041e8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8041e90:	697b      	ldr	r3, [r7, #20]
 8041e92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8041e94:	4b13      	ldr	r3, [pc, #76]	; (8041ee4 <_sbrk+0x64>)
 8041e96:	681b      	ldr	r3, [r3, #0]
 8041e98:	2b00      	cmp	r3, #0
 8041e9a:	d102      	bne.n	8041ea2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8041e9c:	4b11      	ldr	r3, [pc, #68]	; (8041ee4 <_sbrk+0x64>)
 8041e9e:	4a12      	ldr	r2, [pc, #72]	; (8041ee8 <_sbrk+0x68>)
 8041ea0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8041ea2:	4b10      	ldr	r3, [pc, #64]	; (8041ee4 <_sbrk+0x64>)
 8041ea4:	681a      	ldr	r2, [r3, #0]
 8041ea6:	687b      	ldr	r3, [r7, #4]
 8041ea8:	4413      	add	r3, r2
 8041eaa:	693a      	ldr	r2, [r7, #16]
 8041eac:	429a      	cmp	r2, r3
 8041eae:	d207      	bcs.n	8041ec0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8041eb0:	f017 fff0 	bl	8059e94 <__errno>
 8041eb4:	4603      	mov	r3, r0
 8041eb6:	220c      	movs	r2, #12
 8041eb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8041eba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8041ebe:	e009      	b.n	8041ed4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8041ec0:	4b08      	ldr	r3, [pc, #32]	; (8041ee4 <_sbrk+0x64>)
 8041ec2:	681b      	ldr	r3, [r3, #0]
 8041ec4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8041ec6:	4b07      	ldr	r3, [pc, #28]	; (8041ee4 <_sbrk+0x64>)
 8041ec8:	681a      	ldr	r2, [r3, #0]
 8041eca:	687b      	ldr	r3, [r7, #4]
 8041ecc:	4413      	add	r3, r2
 8041ece:	4a05      	ldr	r2, [pc, #20]	; (8041ee4 <_sbrk+0x64>)
 8041ed0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8041ed2:	68fb      	ldr	r3, [r7, #12]
}
 8041ed4:	4618      	mov	r0, r3
 8041ed6:	3718      	adds	r7, #24
 8041ed8:	46bd      	mov	sp, r7
 8041eda:	bd80      	pop	{r7, pc}
 8041edc:	24050000 	.word	0x24050000
 8041ee0:	00000400 	.word	0x00000400
 8041ee4:	24000b44 	.word	0x24000b44
 8041ee8:	240071e8 	.word	0x240071e8

08041eec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8041eec:	b480      	push	{r7}
 8041eee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8041ef0:	4b34      	ldr	r3, [pc, #208]	; (8041fc4 <SystemInit+0xd8>)
 8041ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041ef6:	4a33      	ldr	r2, [pc, #204]	; (8041fc4 <SystemInit+0xd8>)
 8041ef8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8041efc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8041f00:	4b31      	ldr	r3, [pc, #196]	; (8041fc8 <SystemInit+0xdc>)
 8041f02:	681b      	ldr	r3, [r3, #0]
 8041f04:	f003 030f 	and.w	r3, r3, #15
 8041f08:	2b06      	cmp	r3, #6
 8041f0a:	d807      	bhi.n	8041f1c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8041f0c:	4b2e      	ldr	r3, [pc, #184]	; (8041fc8 <SystemInit+0xdc>)
 8041f0e:	681b      	ldr	r3, [r3, #0]
 8041f10:	f023 030f 	bic.w	r3, r3, #15
 8041f14:	4a2c      	ldr	r2, [pc, #176]	; (8041fc8 <SystemInit+0xdc>)
 8041f16:	f043 0307 	orr.w	r3, r3, #7
 8041f1a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8041f1c:	4b2b      	ldr	r3, [pc, #172]	; (8041fcc <SystemInit+0xe0>)
 8041f1e:	681b      	ldr	r3, [r3, #0]
 8041f20:	4a2a      	ldr	r2, [pc, #168]	; (8041fcc <SystemInit+0xe0>)
 8041f22:	f043 0301 	orr.w	r3, r3, #1
 8041f26:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8041f28:	4b28      	ldr	r3, [pc, #160]	; (8041fcc <SystemInit+0xe0>)
 8041f2a:	2200      	movs	r2, #0
 8041f2c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8041f2e:	4b27      	ldr	r3, [pc, #156]	; (8041fcc <SystemInit+0xe0>)
 8041f30:	681a      	ldr	r2, [r3, #0]
 8041f32:	4926      	ldr	r1, [pc, #152]	; (8041fcc <SystemInit+0xe0>)
 8041f34:	4b26      	ldr	r3, [pc, #152]	; (8041fd0 <SystemInit+0xe4>)
 8041f36:	4013      	ands	r3, r2
 8041f38:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8041f3a:	4b23      	ldr	r3, [pc, #140]	; (8041fc8 <SystemInit+0xdc>)
 8041f3c:	681b      	ldr	r3, [r3, #0]
 8041f3e:	f003 0308 	and.w	r3, r3, #8
 8041f42:	2b00      	cmp	r3, #0
 8041f44:	d007      	beq.n	8041f56 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8041f46:	4b20      	ldr	r3, [pc, #128]	; (8041fc8 <SystemInit+0xdc>)
 8041f48:	681b      	ldr	r3, [r3, #0]
 8041f4a:	f023 030f 	bic.w	r3, r3, #15
 8041f4e:	4a1e      	ldr	r2, [pc, #120]	; (8041fc8 <SystemInit+0xdc>)
 8041f50:	f043 0307 	orr.w	r3, r3, #7
 8041f54:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8041f56:	4b1d      	ldr	r3, [pc, #116]	; (8041fcc <SystemInit+0xe0>)
 8041f58:	2200      	movs	r2, #0
 8041f5a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8041f5c:	4b1b      	ldr	r3, [pc, #108]	; (8041fcc <SystemInit+0xe0>)
 8041f5e:	2200      	movs	r2, #0
 8041f60:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8041f62:	4b1a      	ldr	r3, [pc, #104]	; (8041fcc <SystemInit+0xe0>)
 8041f64:	2200      	movs	r2, #0
 8041f66:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8041f68:	4b18      	ldr	r3, [pc, #96]	; (8041fcc <SystemInit+0xe0>)
 8041f6a:	4a1a      	ldr	r2, [pc, #104]	; (8041fd4 <SystemInit+0xe8>)
 8041f6c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8041f6e:	4b17      	ldr	r3, [pc, #92]	; (8041fcc <SystemInit+0xe0>)
 8041f70:	4a19      	ldr	r2, [pc, #100]	; (8041fd8 <SystemInit+0xec>)
 8041f72:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8041f74:	4b15      	ldr	r3, [pc, #84]	; (8041fcc <SystemInit+0xe0>)
 8041f76:	4a19      	ldr	r2, [pc, #100]	; (8041fdc <SystemInit+0xf0>)
 8041f78:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8041f7a:	4b14      	ldr	r3, [pc, #80]	; (8041fcc <SystemInit+0xe0>)
 8041f7c:	2200      	movs	r2, #0
 8041f7e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8041f80:	4b12      	ldr	r3, [pc, #72]	; (8041fcc <SystemInit+0xe0>)
 8041f82:	4a16      	ldr	r2, [pc, #88]	; (8041fdc <SystemInit+0xf0>)
 8041f84:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8041f86:	4b11      	ldr	r3, [pc, #68]	; (8041fcc <SystemInit+0xe0>)
 8041f88:	2200      	movs	r2, #0
 8041f8a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8041f8c:	4b0f      	ldr	r3, [pc, #60]	; (8041fcc <SystemInit+0xe0>)
 8041f8e:	4a13      	ldr	r2, [pc, #76]	; (8041fdc <SystemInit+0xf0>)
 8041f90:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8041f92:	4b0e      	ldr	r3, [pc, #56]	; (8041fcc <SystemInit+0xe0>)
 8041f94:	2200      	movs	r2, #0
 8041f96:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8041f98:	4b0c      	ldr	r3, [pc, #48]	; (8041fcc <SystemInit+0xe0>)
 8041f9a:	681b      	ldr	r3, [r3, #0]
 8041f9c:	4a0b      	ldr	r2, [pc, #44]	; (8041fcc <SystemInit+0xe0>)
 8041f9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8041fa2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8041fa4:	4b09      	ldr	r3, [pc, #36]	; (8041fcc <SystemInit+0xe0>)
 8041fa6:	2200      	movs	r2, #0
 8041fa8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8041faa:	4b0d      	ldr	r3, [pc, #52]	; (8041fe0 <SystemInit+0xf4>)
 8041fac:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8041fb0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
 8041fb2:	4b04      	ldr	r3, [pc, #16]	; (8041fc4 <SystemInit+0xd8>)
 8041fb4:	4a0b      	ldr	r2, [pc, #44]	; (8041fe4 <SystemInit+0xf8>)
 8041fb6:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8041fb8:	bf00      	nop
 8041fba:	46bd      	mov	sp, r7
 8041fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041fc0:	4770      	bx	lr
 8041fc2:	bf00      	nop
 8041fc4:	e000ed00 	.word	0xe000ed00
 8041fc8:	52002000 	.word	0x52002000
 8041fcc:	58024400 	.word	0x58024400
 8041fd0:	eaf6ed7f 	.word	0xeaf6ed7f
 8041fd4:	02020200 	.word	0x02020200
 8041fd8:	01ff0000 	.word	0x01ff0000
 8041fdc:	01010280 	.word	0x01010280
 8041fe0:	52004000 	.word	0x52004000
 8041fe4:	08040000 	.word	0x08040000

08041fe8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8041fe8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8042020 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8041fec:	f7ff ff7e 	bl	8041eec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8041ff0:	480c      	ldr	r0, [pc, #48]	; (8042024 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8041ff2:	490d      	ldr	r1, [pc, #52]	; (8042028 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8041ff4:	4a0d      	ldr	r2, [pc, #52]	; (804202c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8041ff6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8041ff8:	e002      	b.n	8042000 <LoopCopyDataInit>

08041ffa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8041ffa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8041ffc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8041ffe:	3304      	adds	r3, #4

08042000 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8042000:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8042002:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8042004:	d3f9      	bcc.n	8041ffa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8042006:	4a0a      	ldr	r2, [pc, #40]	; (8042030 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8042008:	4c0a      	ldr	r4, [pc, #40]	; (8042034 <LoopFillZerobss+0x22>)
  movs r3, #0
 804200a:	2300      	movs	r3, #0
  b LoopFillZerobss
 804200c:	e001      	b.n	8042012 <LoopFillZerobss>

0804200e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 804200e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8042010:	3204      	adds	r2, #4

08042012 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8042012:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8042014:	d3fb      	bcc.n	804200e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8042016:	f017 ff43 	bl	8059ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 804201a:	f7fe fe9b 	bl	8040d54 <main>
  bx  lr
 804201e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8042020:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8042024:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8042028:	24000098 	.word	0x24000098
  ldr r2, =_sidata
 804202c:	0805be8c 	.word	0x0805be8c
  ldr r2, =_sbss
 8042030:	24000098 	.word	0x24000098
  ldr r4, =_ebss
 8042034:	240071e8 	.word	0x240071e8

08042038 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8042038:	e7fe      	b.n	8042038 <ADC3_IRQHandler>
	...

0804203c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 804203c:	b580      	push	{r7, lr}
 804203e:	b082      	sub	sp, #8
 8042040:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8042042:	2003      	movs	r0, #3
 8042044:	f000 f927 	bl	8042296 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8042048:	f005 fb26 	bl	8047698 <HAL_RCC_GetSysClockFreq>
 804204c:	4602      	mov	r2, r0
 804204e:	4b15      	ldr	r3, [pc, #84]	; (80420a4 <HAL_Init+0x68>)
 8042050:	699b      	ldr	r3, [r3, #24]
 8042052:	0a1b      	lsrs	r3, r3, #8
 8042054:	f003 030f 	and.w	r3, r3, #15
 8042058:	4913      	ldr	r1, [pc, #76]	; (80420a8 <HAL_Init+0x6c>)
 804205a:	5ccb      	ldrb	r3, [r1, r3]
 804205c:	f003 031f 	and.w	r3, r3, #31
 8042060:	fa22 f303 	lsr.w	r3, r2, r3
 8042064:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8042066:	4b0f      	ldr	r3, [pc, #60]	; (80420a4 <HAL_Init+0x68>)
 8042068:	699b      	ldr	r3, [r3, #24]
 804206a:	f003 030f 	and.w	r3, r3, #15
 804206e:	4a0e      	ldr	r2, [pc, #56]	; (80420a8 <HAL_Init+0x6c>)
 8042070:	5cd3      	ldrb	r3, [r2, r3]
 8042072:	f003 031f 	and.w	r3, r3, #31
 8042076:	687a      	ldr	r2, [r7, #4]
 8042078:	fa22 f303 	lsr.w	r3, r2, r3
 804207c:	4a0b      	ldr	r2, [pc, #44]	; (80420ac <HAL_Init+0x70>)
 804207e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8042080:	4a0b      	ldr	r2, [pc, #44]	; (80420b0 <HAL_Init+0x74>)
 8042082:	687b      	ldr	r3, [r7, #4]
 8042084:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8042086:	200f      	movs	r0, #15
 8042088:	f7ff fdfe 	bl	8041c88 <HAL_InitTick>
 804208c:	4603      	mov	r3, r0
 804208e:	2b00      	cmp	r3, #0
 8042090:	d001      	beq.n	8042096 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8042092:	2301      	movs	r3, #1
 8042094:	e002      	b.n	804209c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8042096:	f7ff fd07 	bl	8041aa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 804209a:	2300      	movs	r3, #0
}
 804209c:	4618      	mov	r0, r3
 804209e:	3708      	adds	r7, #8
 80420a0:	46bd      	mov	sp, r7
 80420a2:	bd80      	pop	{r7, pc}
 80420a4:	58024400 	.word	0x58024400
 80420a8:	0805b950 	.word	0x0805b950
 80420ac:	24000004 	.word	0x24000004
 80420b0:	24000000 	.word	0x24000000

080420b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80420b4:	b480      	push	{r7}
 80420b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80420b8:	4b06      	ldr	r3, [pc, #24]	; (80420d4 <HAL_IncTick+0x20>)
 80420ba:	781b      	ldrb	r3, [r3, #0]
 80420bc:	461a      	mov	r2, r3
 80420be:	4b06      	ldr	r3, [pc, #24]	; (80420d8 <HAL_IncTick+0x24>)
 80420c0:	681b      	ldr	r3, [r3, #0]
 80420c2:	4413      	add	r3, r2
 80420c4:	4a04      	ldr	r2, [pc, #16]	; (80420d8 <HAL_IncTick+0x24>)
 80420c6:	6013      	str	r3, [r2, #0]
}
 80420c8:	bf00      	nop
 80420ca:	46bd      	mov	sp, r7
 80420cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80420d0:	4770      	bx	lr
 80420d2:	bf00      	nop
 80420d4:	2400000c 	.word	0x2400000c
 80420d8:	24000b48 	.word	0x24000b48

080420dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80420dc:	b480      	push	{r7}
 80420de:	af00      	add	r7, sp, #0
  return uwTick;
 80420e0:	4b03      	ldr	r3, [pc, #12]	; (80420f0 <HAL_GetTick+0x14>)
 80420e2:	681b      	ldr	r3, [r3, #0]
}
 80420e4:	4618      	mov	r0, r3
 80420e6:	46bd      	mov	sp, r7
 80420e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80420ec:	4770      	bx	lr
 80420ee:	bf00      	nop
 80420f0:	24000b48 	.word	0x24000b48

080420f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80420f4:	b580      	push	{r7, lr}
 80420f6:	b084      	sub	sp, #16
 80420f8:	af00      	add	r7, sp, #0
 80420fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80420fc:	f7ff ffee 	bl	80420dc <HAL_GetTick>
 8042100:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8042102:	687b      	ldr	r3, [r7, #4]
 8042104:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8042106:	68fb      	ldr	r3, [r7, #12]
 8042108:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 804210c:	d005      	beq.n	804211a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 804210e:	4b0a      	ldr	r3, [pc, #40]	; (8042138 <HAL_Delay+0x44>)
 8042110:	781b      	ldrb	r3, [r3, #0]
 8042112:	461a      	mov	r2, r3
 8042114:	68fb      	ldr	r3, [r7, #12]
 8042116:	4413      	add	r3, r2
 8042118:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 804211a:	bf00      	nop
 804211c:	f7ff ffde 	bl	80420dc <HAL_GetTick>
 8042120:	4602      	mov	r2, r0
 8042122:	68bb      	ldr	r3, [r7, #8]
 8042124:	1ad3      	subs	r3, r2, r3
 8042126:	68fa      	ldr	r2, [r7, #12]
 8042128:	429a      	cmp	r2, r3
 804212a:	d8f7      	bhi.n	804211c <HAL_Delay+0x28>
  {
  }
}
 804212c:	bf00      	nop
 804212e:	bf00      	nop
 8042130:	3710      	adds	r7, #16
 8042132:	46bd      	mov	sp, r7
 8042134:	bd80      	pop	{r7, pc}
 8042136:	bf00      	nop
 8042138:	2400000c 	.word	0x2400000c

0804213c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 804213c:	b480      	push	{r7}
 804213e:	b085      	sub	sp, #20
 8042140:	af00      	add	r7, sp, #0
 8042142:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8042144:	687b      	ldr	r3, [r7, #4]
 8042146:	f003 0307 	and.w	r3, r3, #7
 804214a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 804214c:	4b0b      	ldr	r3, [pc, #44]	; (804217c <__NVIC_SetPriorityGrouping+0x40>)
 804214e:	68db      	ldr	r3, [r3, #12]
 8042150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8042152:	68ba      	ldr	r2, [r7, #8]
 8042154:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8042158:	4013      	ands	r3, r2
 804215a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 804215c:	68fb      	ldr	r3, [r7, #12]
 804215e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8042160:	68bb      	ldr	r3, [r7, #8]
 8042162:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8042164:	4b06      	ldr	r3, [pc, #24]	; (8042180 <__NVIC_SetPriorityGrouping+0x44>)
 8042166:	4313      	orrs	r3, r2
 8042168:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 804216a:	4a04      	ldr	r2, [pc, #16]	; (804217c <__NVIC_SetPriorityGrouping+0x40>)
 804216c:	68bb      	ldr	r3, [r7, #8]
 804216e:	60d3      	str	r3, [r2, #12]
}
 8042170:	bf00      	nop
 8042172:	3714      	adds	r7, #20
 8042174:	46bd      	mov	sp, r7
 8042176:	f85d 7b04 	ldr.w	r7, [sp], #4
 804217a:	4770      	bx	lr
 804217c:	e000ed00 	.word	0xe000ed00
 8042180:	05fa0000 	.word	0x05fa0000

08042184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8042184:	b480      	push	{r7}
 8042186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8042188:	4b04      	ldr	r3, [pc, #16]	; (804219c <__NVIC_GetPriorityGrouping+0x18>)
 804218a:	68db      	ldr	r3, [r3, #12]
 804218c:	0a1b      	lsrs	r3, r3, #8
 804218e:	f003 0307 	and.w	r3, r3, #7
}
 8042192:	4618      	mov	r0, r3
 8042194:	46bd      	mov	sp, r7
 8042196:	f85d 7b04 	ldr.w	r7, [sp], #4
 804219a:	4770      	bx	lr
 804219c:	e000ed00 	.word	0xe000ed00

080421a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80421a0:	b480      	push	{r7}
 80421a2:	b083      	sub	sp, #12
 80421a4:	af00      	add	r7, sp, #0
 80421a6:	4603      	mov	r3, r0
 80421a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80421aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80421ae:	2b00      	cmp	r3, #0
 80421b0:	db0b      	blt.n	80421ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80421b2:	88fb      	ldrh	r3, [r7, #6]
 80421b4:	f003 021f 	and.w	r2, r3, #31
 80421b8:	4907      	ldr	r1, [pc, #28]	; (80421d8 <__NVIC_EnableIRQ+0x38>)
 80421ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80421be:	095b      	lsrs	r3, r3, #5
 80421c0:	2001      	movs	r0, #1
 80421c2:	fa00 f202 	lsl.w	r2, r0, r2
 80421c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80421ca:	bf00      	nop
 80421cc:	370c      	adds	r7, #12
 80421ce:	46bd      	mov	sp, r7
 80421d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80421d4:	4770      	bx	lr
 80421d6:	bf00      	nop
 80421d8:	e000e100 	.word	0xe000e100

080421dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80421dc:	b480      	push	{r7}
 80421de:	b083      	sub	sp, #12
 80421e0:	af00      	add	r7, sp, #0
 80421e2:	4603      	mov	r3, r0
 80421e4:	6039      	str	r1, [r7, #0]
 80421e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80421e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80421ec:	2b00      	cmp	r3, #0
 80421ee:	db0a      	blt.n	8042206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80421f0:	683b      	ldr	r3, [r7, #0]
 80421f2:	b2da      	uxtb	r2, r3
 80421f4:	490c      	ldr	r1, [pc, #48]	; (8042228 <__NVIC_SetPriority+0x4c>)
 80421f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80421fa:	0112      	lsls	r2, r2, #4
 80421fc:	b2d2      	uxtb	r2, r2
 80421fe:	440b      	add	r3, r1
 8042200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8042204:	e00a      	b.n	804221c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8042206:	683b      	ldr	r3, [r7, #0]
 8042208:	b2da      	uxtb	r2, r3
 804220a:	4908      	ldr	r1, [pc, #32]	; (804222c <__NVIC_SetPriority+0x50>)
 804220c:	88fb      	ldrh	r3, [r7, #6]
 804220e:	f003 030f 	and.w	r3, r3, #15
 8042212:	3b04      	subs	r3, #4
 8042214:	0112      	lsls	r2, r2, #4
 8042216:	b2d2      	uxtb	r2, r2
 8042218:	440b      	add	r3, r1
 804221a:	761a      	strb	r2, [r3, #24]
}
 804221c:	bf00      	nop
 804221e:	370c      	adds	r7, #12
 8042220:	46bd      	mov	sp, r7
 8042222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042226:	4770      	bx	lr
 8042228:	e000e100 	.word	0xe000e100
 804222c:	e000ed00 	.word	0xe000ed00

08042230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8042230:	b480      	push	{r7}
 8042232:	b089      	sub	sp, #36	; 0x24
 8042234:	af00      	add	r7, sp, #0
 8042236:	60f8      	str	r0, [r7, #12]
 8042238:	60b9      	str	r1, [r7, #8]
 804223a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 804223c:	68fb      	ldr	r3, [r7, #12]
 804223e:	f003 0307 	and.w	r3, r3, #7
 8042242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8042244:	69fb      	ldr	r3, [r7, #28]
 8042246:	f1c3 0307 	rsb	r3, r3, #7
 804224a:	2b04      	cmp	r3, #4
 804224c:	bf28      	it	cs
 804224e:	2304      	movcs	r3, #4
 8042250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8042252:	69fb      	ldr	r3, [r7, #28]
 8042254:	3304      	adds	r3, #4
 8042256:	2b06      	cmp	r3, #6
 8042258:	d902      	bls.n	8042260 <NVIC_EncodePriority+0x30>
 804225a:	69fb      	ldr	r3, [r7, #28]
 804225c:	3b03      	subs	r3, #3
 804225e:	e000      	b.n	8042262 <NVIC_EncodePriority+0x32>
 8042260:	2300      	movs	r3, #0
 8042262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8042264:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8042268:	69bb      	ldr	r3, [r7, #24]
 804226a:	fa02 f303 	lsl.w	r3, r2, r3
 804226e:	43da      	mvns	r2, r3
 8042270:	68bb      	ldr	r3, [r7, #8]
 8042272:	401a      	ands	r2, r3
 8042274:	697b      	ldr	r3, [r7, #20]
 8042276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8042278:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 804227c:	697b      	ldr	r3, [r7, #20]
 804227e:	fa01 f303 	lsl.w	r3, r1, r3
 8042282:	43d9      	mvns	r1, r3
 8042284:	687b      	ldr	r3, [r7, #4]
 8042286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8042288:	4313      	orrs	r3, r2
         );
}
 804228a:	4618      	mov	r0, r3
 804228c:	3724      	adds	r7, #36	; 0x24
 804228e:	46bd      	mov	sp, r7
 8042290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042294:	4770      	bx	lr

08042296 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8042296:	b580      	push	{r7, lr}
 8042298:	b082      	sub	sp, #8
 804229a:	af00      	add	r7, sp, #0
 804229c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 804229e:	6878      	ldr	r0, [r7, #4]
 80422a0:	f7ff ff4c 	bl	804213c <__NVIC_SetPriorityGrouping>
}
 80422a4:	bf00      	nop
 80422a6:	3708      	adds	r7, #8
 80422a8:	46bd      	mov	sp, r7
 80422aa:	bd80      	pop	{r7, pc}

080422ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80422ac:	b580      	push	{r7, lr}
 80422ae:	b086      	sub	sp, #24
 80422b0:	af00      	add	r7, sp, #0
 80422b2:	4603      	mov	r3, r0
 80422b4:	60b9      	str	r1, [r7, #8]
 80422b6:	607a      	str	r2, [r7, #4]
 80422b8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80422ba:	f7ff ff63 	bl	8042184 <__NVIC_GetPriorityGrouping>
 80422be:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80422c0:	687a      	ldr	r2, [r7, #4]
 80422c2:	68b9      	ldr	r1, [r7, #8]
 80422c4:	6978      	ldr	r0, [r7, #20]
 80422c6:	f7ff ffb3 	bl	8042230 <NVIC_EncodePriority>
 80422ca:	4602      	mov	r2, r0
 80422cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80422d0:	4611      	mov	r1, r2
 80422d2:	4618      	mov	r0, r3
 80422d4:	f7ff ff82 	bl	80421dc <__NVIC_SetPriority>
}
 80422d8:	bf00      	nop
 80422da:	3718      	adds	r7, #24
 80422dc:	46bd      	mov	sp, r7
 80422de:	bd80      	pop	{r7, pc}

080422e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80422e0:	b580      	push	{r7, lr}
 80422e2:	b082      	sub	sp, #8
 80422e4:	af00      	add	r7, sp, #0
 80422e6:	4603      	mov	r3, r0
 80422e8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80422ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80422ee:	4618      	mov	r0, r3
 80422f0:	f7ff ff56 	bl	80421a0 <__NVIC_EnableIRQ>
}
 80422f4:	bf00      	nop
 80422f6:	3708      	adds	r7, #8
 80422f8:	46bd      	mov	sp, r7
 80422fa:	bd80      	pop	{r7, pc}

080422fc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80422fc:	b580      	push	{r7, lr}
 80422fe:	b086      	sub	sp, #24
 8042300:	af00      	add	r7, sp, #0
 8042302:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8042304:	f7ff feea 	bl	80420dc <HAL_GetTick>
 8042308:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 804230a:	687b      	ldr	r3, [r7, #4]
 804230c:	2b00      	cmp	r3, #0
 804230e:	d101      	bne.n	8042314 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8042310:	2301      	movs	r3, #1
 8042312:	e314      	b.n	804293e <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8042314:	687b      	ldr	r3, [r7, #4]
 8042316:	681b      	ldr	r3, [r3, #0]
 8042318:	4a66      	ldr	r2, [pc, #408]	; (80424b4 <HAL_DMA_Init+0x1b8>)
 804231a:	4293      	cmp	r3, r2
 804231c:	d04a      	beq.n	80423b4 <HAL_DMA_Init+0xb8>
 804231e:	687b      	ldr	r3, [r7, #4]
 8042320:	681b      	ldr	r3, [r3, #0]
 8042322:	4a65      	ldr	r2, [pc, #404]	; (80424b8 <HAL_DMA_Init+0x1bc>)
 8042324:	4293      	cmp	r3, r2
 8042326:	d045      	beq.n	80423b4 <HAL_DMA_Init+0xb8>
 8042328:	687b      	ldr	r3, [r7, #4]
 804232a:	681b      	ldr	r3, [r3, #0]
 804232c:	4a63      	ldr	r2, [pc, #396]	; (80424bc <HAL_DMA_Init+0x1c0>)
 804232e:	4293      	cmp	r3, r2
 8042330:	d040      	beq.n	80423b4 <HAL_DMA_Init+0xb8>
 8042332:	687b      	ldr	r3, [r7, #4]
 8042334:	681b      	ldr	r3, [r3, #0]
 8042336:	4a62      	ldr	r2, [pc, #392]	; (80424c0 <HAL_DMA_Init+0x1c4>)
 8042338:	4293      	cmp	r3, r2
 804233a:	d03b      	beq.n	80423b4 <HAL_DMA_Init+0xb8>
 804233c:	687b      	ldr	r3, [r7, #4]
 804233e:	681b      	ldr	r3, [r3, #0]
 8042340:	4a60      	ldr	r2, [pc, #384]	; (80424c4 <HAL_DMA_Init+0x1c8>)
 8042342:	4293      	cmp	r3, r2
 8042344:	d036      	beq.n	80423b4 <HAL_DMA_Init+0xb8>
 8042346:	687b      	ldr	r3, [r7, #4]
 8042348:	681b      	ldr	r3, [r3, #0]
 804234a:	4a5f      	ldr	r2, [pc, #380]	; (80424c8 <HAL_DMA_Init+0x1cc>)
 804234c:	4293      	cmp	r3, r2
 804234e:	d031      	beq.n	80423b4 <HAL_DMA_Init+0xb8>
 8042350:	687b      	ldr	r3, [r7, #4]
 8042352:	681b      	ldr	r3, [r3, #0]
 8042354:	4a5d      	ldr	r2, [pc, #372]	; (80424cc <HAL_DMA_Init+0x1d0>)
 8042356:	4293      	cmp	r3, r2
 8042358:	d02c      	beq.n	80423b4 <HAL_DMA_Init+0xb8>
 804235a:	687b      	ldr	r3, [r7, #4]
 804235c:	681b      	ldr	r3, [r3, #0]
 804235e:	4a5c      	ldr	r2, [pc, #368]	; (80424d0 <HAL_DMA_Init+0x1d4>)
 8042360:	4293      	cmp	r3, r2
 8042362:	d027      	beq.n	80423b4 <HAL_DMA_Init+0xb8>
 8042364:	687b      	ldr	r3, [r7, #4]
 8042366:	681b      	ldr	r3, [r3, #0]
 8042368:	4a5a      	ldr	r2, [pc, #360]	; (80424d4 <HAL_DMA_Init+0x1d8>)
 804236a:	4293      	cmp	r3, r2
 804236c:	d022      	beq.n	80423b4 <HAL_DMA_Init+0xb8>
 804236e:	687b      	ldr	r3, [r7, #4]
 8042370:	681b      	ldr	r3, [r3, #0]
 8042372:	4a59      	ldr	r2, [pc, #356]	; (80424d8 <HAL_DMA_Init+0x1dc>)
 8042374:	4293      	cmp	r3, r2
 8042376:	d01d      	beq.n	80423b4 <HAL_DMA_Init+0xb8>
 8042378:	687b      	ldr	r3, [r7, #4]
 804237a:	681b      	ldr	r3, [r3, #0]
 804237c:	4a57      	ldr	r2, [pc, #348]	; (80424dc <HAL_DMA_Init+0x1e0>)
 804237e:	4293      	cmp	r3, r2
 8042380:	d018      	beq.n	80423b4 <HAL_DMA_Init+0xb8>
 8042382:	687b      	ldr	r3, [r7, #4]
 8042384:	681b      	ldr	r3, [r3, #0]
 8042386:	4a56      	ldr	r2, [pc, #344]	; (80424e0 <HAL_DMA_Init+0x1e4>)
 8042388:	4293      	cmp	r3, r2
 804238a:	d013      	beq.n	80423b4 <HAL_DMA_Init+0xb8>
 804238c:	687b      	ldr	r3, [r7, #4]
 804238e:	681b      	ldr	r3, [r3, #0]
 8042390:	4a54      	ldr	r2, [pc, #336]	; (80424e4 <HAL_DMA_Init+0x1e8>)
 8042392:	4293      	cmp	r3, r2
 8042394:	d00e      	beq.n	80423b4 <HAL_DMA_Init+0xb8>
 8042396:	687b      	ldr	r3, [r7, #4]
 8042398:	681b      	ldr	r3, [r3, #0]
 804239a:	4a53      	ldr	r2, [pc, #332]	; (80424e8 <HAL_DMA_Init+0x1ec>)
 804239c:	4293      	cmp	r3, r2
 804239e:	d009      	beq.n	80423b4 <HAL_DMA_Init+0xb8>
 80423a0:	687b      	ldr	r3, [r7, #4]
 80423a2:	681b      	ldr	r3, [r3, #0]
 80423a4:	4a51      	ldr	r2, [pc, #324]	; (80424ec <HAL_DMA_Init+0x1f0>)
 80423a6:	4293      	cmp	r3, r2
 80423a8:	d004      	beq.n	80423b4 <HAL_DMA_Init+0xb8>
 80423aa:	687b      	ldr	r3, [r7, #4]
 80423ac:	681b      	ldr	r3, [r3, #0]
 80423ae:	4a50      	ldr	r2, [pc, #320]	; (80424f0 <HAL_DMA_Init+0x1f4>)
 80423b0:	4293      	cmp	r3, r2
 80423b2:	d101      	bne.n	80423b8 <HAL_DMA_Init+0xbc>
 80423b4:	2301      	movs	r3, #1
 80423b6:	e000      	b.n	80423ba <HAL_DMA_Init+0xbe>
 80423b8:	2300      	movs	r3, #0
 80423ba:	2b00      	cmp	r3, #0
 80423bc:	f000 813c 	beq.w	8042638 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80423c0:	687b      	ldr	r3, [r7, #4]
 80423c2:	2202      	movs	r2, #2
 80423c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80423c8:	687b      	ldr	r3, [r7, #4]
 80423ca:	2200      	movs	r2, #0
 80423cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80423d0:	687b      	ldr	r3, [r7, #4]
 80423d2:	681b      	ldr	r3, [r3, #0]
 80423d4:	4a37      	ldr	r2, [pc, #220]	; (80424b4 <HAL_DMA_Init+0x1b8>)
 80423d6:	4293      	cmp	r3, r2
 80423d8:	d04a      	beq.n	8042470 <HAL_DMA_Init+0x174>
 80423da:	687b      	ldr	r3, [r7, #4]
 80423dc:	681b      	ldr	r3, [r3, #0]
 80423de:	4a36      	ldr	r2, [pc, #216]	; (80424b8 <HAL_DMA_Init+0x1bc>)
 80423e0:	4293      	cmp	r3, r2
 80423e2:	d045      	beq.n	8042470 <HAL_DMA_Init+0x174>
 80423e4:	687b      	ldr	r3, [r7, #4]
 80423e6:	681b      	ldr	r3, [r3, #0]
 80423e8:	4a34      	ldr	r2, [pc, #208]	; (80424bc <HAL_DMA_Init+0x1c0>)
 80423ea:	4293      	cmp	r3, r2
 80423ec:	d040      	beq.n	8042470 <HAL_DMA_Init+0x174>
 80423ee:	687b      	ldr	r3, [r7, #4]
 80423f0:	681b      	ldr	r3, [r3, #0]
 80423f2:	4a33      	ldr	r2, [pc, #204]	; (80424c0 <HAL_DMA_Init+0x1c4>)
 80423f4:	4293      	cmp	r3, r2
 80423f6:	d03b      	beq.n	8042470 <HAL_DMA_Init+0x174>
 80423f8:	687b      	ldr	r3, [r7, #4]
 80423fa:	681b      	ldr	r3, [r3, #0]
 80423fc:	4a31      	ldr	r2, [pc, #196]	; (80424c4 <HAL_DMA_Init+0x1c8>)
 80423fe:	4293      	cmp	r3, r2
 8042400:	d036      	beq.n	8042470 <HAL_DMA_Init+0x174>
 8042402:	687b      	ldr	r3, [r7, #4]
 8042404:	681b      	ldr	r3, [r3, #0]
 8042406:	4a30      	ldr	r2, [pc, #192]	; (80424c8 <HAL_DMA_Init+0x1cc>)
 8042408:	4293      	cmp	r3, r2
 804240a:	d031      	beq.n	8042470 <HAL_DMA_Init+0x174>
 804240c:	687b      	ldr	r3, [r7, #4]
 804240e:	681b      	ldr	r3, [r3, #0]
 8042410:	4a2e      	ldr	r2, [pc, #184]	; (80424cc <HAL_DMA_Init+0x1d0>)
 8042412:	4293      	cmp	r3, r2
 8042414:	d02c      	beq.n	8042470 <HAL_DMA_Init+0x174>
 8042416:	687b      	ldr	r3, [r7, #4]
 8042418:	681b      	ldr	r3, [r3, #0]
 804241a:	4a2d      	ldr	r2, [pc, #180]	; (80424d0 <HAL_DMA_Init+0x1d4>)
 804241c:	4293      	cmp	r3, r2
 804241e:	d027      	beq.n	8042470 <HAL_DMA_Init+0x174>
 8042420:	687b      	ldr	r3, [r7, #4]
 8042422:	681b      	ldr	r3, [r3, #0]
 8042424:	4a2b      	ldr	r2, [pc, #172]	; (80424d4 <HAL_DMA_Init+0x1d8>)
 8042426:	4293      	cmp	r3, r2
 8042428:	d022      	beq.n	8042470 <HAL_DMA_Init+0x174>
 804242a:	687b      	ldr	r3, [r7, #4]
 804242c:	681b      	ldr	r3, [r3, #0]
 804242e:	4a2a      	ldr	r2, [pc, #168]	; (80424d8 <HAL_DMA_Init+0x1dc>)
 8042430:	4293      	cmp	r3, r2
 8042432:	d01d      	beq.n	8042470 <HAL_DMA_Init+0x174>
 8042434:	687b      	ldr	r3, [r7, #4]
 8042436:	681b      	ldr	r3, [r3, #0]
 8042438:	4a28      	ldr	r2, [pc, #160]	; (80424dc <HAL_DMA_Init+0x1e0>)
 804243a:	4293      	cmp	r3, r2
 804243c:	d018      	beq.n	8042470 <HAL_DMA_Init+0x174>
 804243e:	687b      	ldr	r3, [r7, #4]
 8042440:	681b      	ldr	r3, [r3, #0]
 8042442:	4a27      	ldr	r2, [pc, #156]	; (80424e0 <HAL_DMA_Init+0x1e4>)
 8042444:	4293      	cmp	r3, r2
 8042446:	d013      	beq.n	8042470 <HAL_DMA_Init+0x174>
 8042448:	687b      	ldr	r3, [r7, #4]
 804244a:	681b      	ldr	r3, [r3, #0]
 804244c:	4a25      	ldr	r2, [pc, #148]	; (80424e4 <HAL_DMA_Init+0x1e8>)
 804244e:	4293      	cmp	r3, r2
 8042450:	d00e      	beq.n	8042470 <HAL_DMA_Init+0x174>
 8042452:	687b      	ldr	r3, [r7, #4]
 8042454:	681b      	ldr	r3, [r3, #0]
 8042456:	4a24      	ldr	r2, [pc, #144]	; (80424e8 <HAL_DMA_Init+0x1ec>)
 8042458:	4293      	cmp	r3, r2
 804245a:	d009      	beq.n	8042470 <HAL_DMA_Init+0x174>
 804245c:	687b      	ldr	r3, [r7, #4]
 804245e:	681b      	ldr	r3, [r3, #0]
 8042460:	4a22      	ldr	r2, [pc, #136]	; (80424ec <HAL_DMA_Init+0x1f0>)
 8042462:	4293      	cmp	r3, r2
 8042464:	d004      	beq.n	8042470 <HAL_DMA_Init+0x174>
 8042466:	687b      	ldr	r3, [r7, #4]
 8042468:	681b      	ldr	r3, [r3, #0]
 804246a:	4a21      	ldr	r2, [pc, #132]	; (80424f0 <HAL_DMA_Init+0x1f4>)
 804246c:	4293      	cmp	r3, r2
 804246e:	d108      	bne.n	8042482 <HAL_DMA_Init+0x186>
 8042470:	687b      	ldr	r3, [r7, #4]
 8042472:	681b      	ldr	r3, [r3, #0]
 8042474:	681a      	ldr	r2, [r3, #0]
 8042476:	687b      	ldr	r3, [r7, #4]
 8042478:	681b      	ldr	r3, [r3, #0]
 804247a:	f022 0201 	bic.w	r2, r2, #1
 804247e:	601a      	str	r2, [r3, #0]
 8042480:	e007      	b.n	8042492 <HAL_DMA_Init+0x196>
 8042482:	687b      	ldr	r3, [r7, #4]
 8042484:	681b      	ldr	r3, [r3, #0]
 8042486:	681a      	ldr	r2, [r3, #0]
 8042488:	687b      	ldr	r3, [r7, #4]
 804248a:	681b      	ldr	r3, [r3, #0]
 804248c:	f022 0201 	bic.w	r2, r2, #1
 8042490:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8042492:	e02f      	b.n	80424f4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8042494:	f7ff fe22 	bl	80420dc <HAL_GetTick>
 8042498:	4602      	mov	r2, r0
 804249a:	693b      	ldr	r3, [r7, #16]
 804249c:	1ad3      	subs	r3, r2, r3
 804249e:	2b05      	cmp	r3, #5
 80424a0:	d928      	bls.n	80424f4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80424a2:	687b      	ldr	r3, [r7, #4]
 80424a4:	2220      	movs	r2, #32
 80424a6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80424a8:	687b      	ldr	r3, [r7, #4]
 80424aa:	2203      	movs	r2, #3
 80424ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80424b0:	2301      	movs	r3, #1
 80424b2:	e244      	b.n	804293e <HAL_DMA_Init+0x642>
 80424b4:	40020010 	.word	0x40020010
 80424b8:	40020028 	.word	0x40020028
 80424bc:	40020040 	.word	0x40020040
 80424c0:	40020058 	.word	0x40020058
 80424c4:	40020070 	.word	0x40020070
 80424c8:	40020088 	.word	0x40020088
 80424cc:	400200a0 	.word	0x400200a0
 80424d0:	400200b8 	.word	0x400200b8
 80424d4:	40020410 	.word	0x40020410
 80424d8:	40020428 	.word	0x40020428
 80424dc:	40020440 	.word	0x40020440
 80424e0:	40020458 	.word	0x40020458
 80424e4:	40020470 	.word	0x40020470
 80424e8:	40020488 	.word	0x40020488
 80424ec:	400204a0 	.word	0x400204a0
 80424f0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80424f4:	687b      	ldr	r3, [r7, #4]
 80424f6:	681b      	ldr	r3, [r3, #0]
 80424f8:	681b      	ldr	r3, [r3, #0]
 80424fa:	f003 0301 	and.w	r3, r3, #1
 80424fe:	2b00      	cmp	r3, #0
 8042500:	d1c8      	bne.n	8042494 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8042502:	687b      	ldr	r3, [r7, #4]
 8042504:	681b      	ldr	r3, [r3, #0]
 8042506:	681b      	ldr	r3, [r3, #0]
 8042508:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 804250a:	697a      	ldr	r2, [r7, #20]
 804250c:	4b84      	ldr	r3, [pc, #528]	; (8042720 <HAL_DMA_Init+0x424>)
 804250e:	4013      	ands	r3, r2
 8042510:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8042512:	687b      	ldr	r3, [r7, #4]
 8042514:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8042516:	687b      	ldr	r3, [r7, #4]
 8042518:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 804251a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 804251c:	687b      	ldr	r3, [r7, #4]
 804251e:	691b      	ldr	r3, [r3, #16]
 8042520:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8042522:	687b      	ldr	r3, [r7, #4]
 8042524:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8042526:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8042528:	687b      	ldr	r3, [r7, #4]
 804252a:	699b      	ldr	r3, [r3, #24]
 804252c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 804252e:	687b      	ldr	r3, [r7, #4]
 8042530:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8042532:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8042534:	687b      	ldr	r3, [r7, #4]
 8042536:	6a1b      	ldr	r3, [r3, #32]
 8042538:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 804253a:	697a      	ldr	r2, [r7, #20]
 804253c:	4313      	orrs	r3, r2
 804253e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8042540:	687b      	ldr	r3, [r7, #4]
 8042542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042544:	2b04      	cmp	r3, #4
 8042546:	d107      	bne.n	8042558 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8042548:	687b      	ldr	r3, [r7, #4]
 804254a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 804254c:	687b      	ldr	r3, [r7, #4]
 804254e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042550:	4313      	orrs	r3, r2
 8042552:	697a      	ldr	r2, [r7, #20]
 8042554:	4313      	orrs	r3, r2
 8042556:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8042558:	687b      	ldr	r3, [r7, #4]
 804255a:	685b      	ldr	r3, [r3, #4]
 804255c:	2b28      	cmp	r3, #40	; 0x28
 804255e:	d903      	bls.n	8042568 <HAL_DMA_Init+0x26c>
 8042560:	687b      	ldr	r3, [r7, #4]
 8042562:	685b      	ldr	r3, [r3, #4]
 8042564:	2b2e      	cmp	r3, #46	; 0x2e
 8042566:	d91f      	bls.n	80425a8 <HAL_DMA_Init+0x2ac>
 8042568:	687b      	ldr	r3, [r7, #4]
 804256a:	685b      	ldr	r3, [r3, #4]
 804256c:	2b3e      	cmp	r3, #62	; 0x3e
 804256e:	d903      	bls.n	8042578 <HAL_DMA_Init+0x27c>
 8042570:	687b      	ldr	r3, [r7, #4]
 8042572:	685b      	ldr	r3, [r3, #4]
 8042574:	2b42      	cmp	r3, #66	; 0x42
 8042576:	d917      	bls.n	80425a8 <HAL_DMA_Init+0x2ac>
 8042578:	687b      	ldr	r3, [r7, #4]
 804257a:	685b      	ldr	r3, [r3, #4]
 804257c:	2b46      	cmp	r3, #70	; 0x46
 804257e:	d903      	bls.n	8042588 <HAL_DMA_Init+0x28c>
 8042580:	687b      	ldr	r3, [r7, #4]
 8042582:	685b      	ldr	r3, [r3, #4]
 8042584:	2b48      	cmp	r3, #72	; 0x48
 8042586:	d90f      	bls.n	80425a8 <HAL_DMA_Init+0x2ac>
 8042588:	687b      	ldr	r3, [r7, #4]
 804258a:	685b      	ldr	r3, [r3, #4]
 804258c:	2b4e      	cmp	r3, #78	; 0x4e
 804258e:	d903      	bls.n	8042598 <HAL_DMA_Init+0x29c>
 8042590:	687b      	ldr	r3, [r7, #4]
 8042592:	685b      	ldr	r3, [r3, #4]
 8042594:	2b52      	cmp	r3, #82	; 0x52
 8042596:	d907      	bls.n	80425a8 <HAL_DMA_Init+0x2ac>
 8042598:	687b      	ldr	r3, [r7, #4]
 804259a:	685b      	ldr	r3, [r3, #4]
 804259c:	2b73      	cmp	r3, #115	; 0x73
 804259e:	d905      	bls.n	80425ac <HAL_DMA_Init+0x2b0>
 80425a0:	687b      	ldr	r3, [r7, #4]
 80425a2:	685b      	ldr	r3, [r3, #4]
 80425a4:	2b77      	cmp	r3, #119	; 0x77
 80425a6:	d801      	bhi.n	80425ac <HAL_DMA_Init+0x2b0>
 80425a8:	2301      	movs	r3, #1
 80425aa:	e000      	b.n	80425ae <HAL_DMA_Init+0x2b2>
 80425ac:	2300      	movs	r3, #0
 80425ae:	2b00      	cmp	r3, #0
 80425b0:	d003      	beq.n	80425ba <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80425b2:	697b      	ldr	r3, [r7, #20]
 80425b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80425b8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80425ba:	687b      	ldr	r3, [r7, #4]
 80425bc:	681b      	ldr	r3, [r3, #0]
 80425be:	697a      	ldr	r2, [r7, #20]
 80425c0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80425c2:	687b      	ldr	r3, [r7, #4]
 80425c4:	681b      	ldr	r3, [r3, #0]
 80425c6:	695b      	ldr	r3, [r3, #20]
 80425c8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80425ca:	697b      	ldr	r3, [r7, #20]
 80425cc:	f023 0307 	bic.w	r3, r3, #7
 80425d0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80425d2:	687b      	ldr	r3, [r7, #4]
 80425d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80425d6:	697a      	ldr	r2, [r7, #20]
 80425d8:	4313      	orrs	r3, r2
 80425da:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80425dc:	687b      	ldr	r3, [r7, #4]
 80425de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80425e0:	2b04      	cmp	r3, #4
 80425e2:	d117      	bne.n	8042614 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80425e4:	687b      	ldr	r3, [r7, #4]
 80425e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80425e8:	697a      	ldr	r2, [r7, #20]
 80425ea:	4313      	orrs	r3, r2
 80425ec:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80425ee:	687b      	ldr	r3, [r7, #4]
 80425f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80425f2:	2b00      	cmp	r3, #0
 80425f4:	d00e      	beq.n	8042614 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80425f6:	6878      	ldr	r0, [r7, #4]
 80425f8:	f002 fb30 	bl	8044c5c <DMA_CheckFifoParam>
 80425fc:	4603      	mov	r3, r0
 80425fe:	2b00      	cmp	r3, #0
 8042600:	d008      	beq.n	8042614 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8042602:	687b      	ldr	r3, [r7, #4]
 8042604:	2240      	movs	r2, #64	; 0x40
 8042606:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8042608:	687b      	ldr	r3, [r7, #4]
 804260a:	2201      	movs	r2, #1
 804260c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8042610:	2301      	movs	r3, #1
 8042612:	e194      	b.n	804293e <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8042614:	687b      	ldr	r3, [r7, #4]
 8042616:	681b      	ldr	r3, [r3, #0]
 8042618:	697a      	ldr	r2, [r7, #20]
 804261a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 804261c:	6878      	ldr	r0, [r7, #4]
 804261e:	f002 fa6b 	bl	8044af8 <DMA_CalcBaseAndBitshift>
 8042622:	4603      	mov	r3, r0
 8042624:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8042626:	687b      	ldr	r3, [r7, #4]
 8042628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 804262a:	f003 031f 	and.w	r3, r3, #31
 804262e:	223f      	movs	r2, #63	; 0x3f
 8042630:	409a      	lsls	r2, r3
 8042632:	68bb      	ldr	r3, [r7, #8]
 8042634:	609a      	str	r2, [r3, #8]
 8042636:	e0ca      	b.n	80427ce <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8042638:	687b      	ldr	r3, [r7, #4]
 804263a:	681b      	ldr	r3, [r3, #0]
 804263c:	4a39      	ldr	r2, [pc, #228]	; (8042724 <HAL_DMA_Init+0x428>)
 804263e:	4293      	cmp	r3, r2
 8042640:	d022      	beq.n	8042688 <HAL_DMA_Init+0x38c>
 8042642:	687b      	ldr	r3, [r7, #4]
 8042644:	681b      	ldr	r3, [r3, #0]
 8042646:	4a38      	ldr	r2, [pc, #224]	; (8042728 <HAL_DMA_Init+0x42c>)
 8042648:	4293      	cmp	r3, r2
 804264a:	d01d      	beq.n	8042688 <HAL_DMA_Init+0x38c>
 804264c:	687b      	ldr	r3, [r7, #4]
 804264e:	681b      	ldr	r3, [r3, #0]
 8042650:	4a36      	ldr	r2, [pc, #216]	; (804272c <HAL_DMA_Init+0x430>)
 8042652:	4293      	cmp	r3, r2
 8042654:	d018      	beq.n	8042688 <HAL_DMA_Init+0x38c>
 8042656:	687b      	ldr	r3, [r7, #4]
 8042658:	681b      	ldr	r3, [r3, #0]
 804265a:	4a35      	ldr	r2, [pc, #212]	; (8042730 <HAL_DMA_Init+0x434>)
 804265c:	4293      	cmp	r3, r2
 804265e:	d013      	beq.n	8042688 <HAL_DMA_Init+0x38c>
 8042660:	687b      	ldr	r3, [r7, #4]
 8042662:	681b      	ldr	r3, [r3, #0]
 8042664:	4a33      	ldr	r2, [pc, #204]	; (8042734 <HAL_DMA_Init+0x438>)
 8042666:	4293      	cmp	r3, r2
 8042668:	d00e      	beq.n	8042688 <HAL_DMA_Init+0x38c>
 804266a:	687b      	ldr	r3, [r7, #4]
 804266c:	681b      	ldr	r3, [r3, #0]
 804266e:	4a32      	ldr	r2, [pc, #200]	; (8042738 <HAL_DMA_Init+0x43c>)
 8042670:	4293      	cmp	r3, r2
 8042672:	d009      	beq.n	8042688 <HAL_DMA_Init+0x38c>
 8042674:	687b      	ldr	r3, [r7, #4]
 8042676:	681b      	ldr	r3, [r3, #0]
 8042678:	4a30      	ldr	r2, [pc, #192]	; (804273c <HAL_DMA_Init+0x440>)
 804267a:	4293      	cmp	r3, r2
 804267c:	d004      	beq.n	8042688 <HAL_DMA_Init+0x38c>
 804267e:	687b      	ldr	r3, [r7, #4]
 8042680:	681b      	ldr	r3, [r3, #0]
 8042682:	4a2f      	ldr	r2, [pc, #188]	; (8042740 <HAL_DMA_Init+0x444>)
 8042684:	4293      	cmp	r3, r2
 8042686:	d101      	bne.n	804268c <HAL_DMA_Init+0x390>
 8042688:	2301      	movs	r3, #1
 804268a:	e000      	b.n	804268e <HAL_DMA_Init+0x392>
 804268c:	2300      	movs	r3, #0
 804268e:	2b00      	cmp	r3, #0
 8042690:	f000 8094 	beq.w	80427bc <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8042694:	687b      	ldr	r3, [r7, #4]
 8042696:	681b      	ldr	r3, [r3, #0]
 8042698:	4a22      	ldr	r2, [pc, #136]	; (8042724 <HAL_DMA_Init+0x428>)
 804269a:	4293      	cmp	r3, r2
 804269c:	d021      	beq.n	80426e2 <HAL_DMA_Init+0x3e6>
 804269e:	687b      	ldr	r3, [r7, #4]
 80426a0:	681b      	ldr	r3, [r3, #0]
 80426a2:	4a21      	ldr	r2, [pc, #132]	; (8042728 <HAL_DMA_Init+0x42c>)
 80426a4:	4293      	cmp	r3, r2
 80426a6:	d01c      	beq.n	80426e2 <HAL_DMA_Init+0x3e6>
 80426a8:	687b      	ldr	r3, [r7, #4]
 80426aa:	681b      	ldr	r3, [r3, #0]
 80426ac:	4a1f      	ldr	r2, [pc, #124]	; (804272c <HAL_DMA_Init+0x430>)
 80426ae:	4293      	cmp	r3, r2
 80426b0:	d017      	beq.n	80426e2 <HAL_DMA_Init+0x3e6>
 80426b2:	687b      	ldr	r3, [r7, #4]
 80426b4:	681b      	ldr	r3, [r3, #0]
 80426b6:	4a1e      	ldr	r2, [pc, #120]	; (8042730 <HAL_DMA_Init+0x434>)
 80426b8:	4293      	cmp	r3, r2
 80426ba:	d012      	beq.n	80426e2 <HAL_DMA_Init+0x3e6>
 80426bc:	687b      	ldr	r3, [r7, #4]
 80426be:	681b      	ldr	r3, [r3, #0]
 80426c0:	4a1c      	ldr	r2, [pc, #112]	; (8042734 <HAL_DMA_Init+0x438>)
 80426c2:	4293      	cmp	r3, r2
 80426c4:	d00d      	beq.n	80426e2 <HAL_DMA_Init+0x3e6>
 80426c6:	687b      	ldr	r3, [r7, #4]
 80426c8:	681b      	ldr	r3, [r3, #0]
 80426ca:	4a1b      	ldr	r2, [pc, #108]	; (8042738 <HAL_DMA_Init+0x43c>)
 80426cc:	4293      	cmp	r3, r2
 80426ce:	d008      	beq.n	80426e2 <HAL_DMA_Init+0x3e6>
 80426d0:	687b      	ldr	r3, [r7, #4]
 80426d2:	681b      	ldr	r3, [r3, #0]
 80426d4:	4a19      	ldr	r2, [pc, #100]	; (804273c <HAL_DMA_Init+0x440>)
 80426d6:	4293      	cmp	r3, r2
 80426d8:	d003      	beq.n	80426e2 <HAL_DMA_Init+0x3e6>
 80426da:	687b      	ldr	r3, [r7, #4]
 80426dc:	681b      	ldr	r3, [r3, #0]
 80426de:	4a18      	ldr	r2, [pc, #96]	; (8042740 <HAL_DMA_Init+0x444>)
 80426e0:	4293      	cmp	r3, r2
 80426e2:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80426e4:	687b      	ldr	r3, [r7, #4]
 80426e6:	2202      	movs	r2, #2
 80426e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80426ec:	687b      	ldr	r3, [r7, #4]
 80426ee:	2200      	movs	r2, #0
 80426f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80426f4:	687b      	ldr	r3, [r7, #4]
 80426f6:	681b      	ldr	r3, [r3, #0]
 80426f8:	681b      	ldr	r3, [r3, #0]
 80426fa:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80426fc:	697a      	ldr	r2, [r7, #20]
 80426fe:	4b11      	ldr	r3, [pc, #68]	; (8042744 <HAL_DMA_Init+0x448>)
 8042700:	4013      	ands	r3, r2
 8042702:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8042704:	687b      	ldr	r3, [r7, #4]
 8042706:	689b      	ldr	r3, [r3, #8]
 8042708:	2b40      	cmp	r3, #64	; 0x40
 804270a:	d01d      	beq.n	8042748 <HAL_DMA_Init+0x44c>
 804270c:	687b      	ldr	r3, [r7, #4]
 804270e:	689b      	ldr	r3, [r3, #8]
 8042710:	2b80      	cmp	r3, #128	; 0x80
 8042712:	d102      	bne.n	804271a <HAL_DMA_Init+0x41e>
 8042714:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8042718:	e017      	b.n	804274a <HAL_DMA_Init+0x44e>
 804271a:	2300      	movs	r3, #0
 804271c:	e015      	b.n	804274a <HAL_DMA_Init+0x44e>
 804271e:	bf00      	nop
 8042720:	fe10803f 	.word	0xfe10803f
 8042724:	58025408 	.word	0x58025408
 8042728:	5802541c 	.word	0x5802541c
 804272c:	58025430 	.word	0x58025430
 8042730:	58025444 	.word	0x58025444
 8042734:	58025458 	.word	0x58025458
 8042738:	5802546c 	.word	0x5802546c
 804273c:	58025480 	.word	0x58025480
 8042740:	58025494 	.word	0x58025494
 8042744:	fffe000f 	.word	0xfffe000f
 8042748:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 804274a:	687a      	ldr	r2, [r7, #4]
 804274c:	68d2      	ldr	r2, [r2, #12]
 804274e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8042750:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8042752:	687b      	ldr	r3, [r7, #4]
 8042754:	691b      	ldr	r3, [r3, #16]
 8042756:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8042758:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 804275a:	687b      	ldr	r3, [r7, #4]
 804275c:	695b      	ldr	r3, [r3, #20]
 804275e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8042760:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8042762:	687b      	ldr	r3, [r7, #4]
 8042764:	699b      	ldr	r3, [r3, #24]
 8042766:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8042768:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 804276a:	687b      	ldr	r3, [r7, #4]
 804276c:	69db      	ldr	r3, [r3, #28]
 804276e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8042770:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8042772:	687b      	ldr	r3, [r7, #4]
 8042774:	6a1b      	ldr	r3, [r3, #32]
 8042776:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8042778:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 804277a:	697a      	ldr	r2, [r7, #20]
 804277c:	4313      	orrs	r3, r2
 804277e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8042780:	687b      	ldr	r3, [r7, #4]
 8042782:	681b      	ldr	r3, [r3, #0]
 8042784:	697a      	ldr	r2, [r7, #20]
 8042786:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8042788:	687b      	ldr	r3, [r7, #4]
 804278a:	681b      	ldr	r3, [r3, #0]
 804278c:	461a      	mov	r2, r3
 804278e:	4b6e      	ldr	r3, [pc, #440]	; (8042948 <HAL_DMA_Init+0x64c>)
 8042790:	4413      	add	r3, r2
 8042792:	4a6e      	ldr	r2, [pc, #440]	; (804294c <HAL_DMA_Init+0x650>)
 8042794:	fba2 2303 	umull	r2, r3, r2, r3
 8042798:	091b      	lsrs	r3, r3, #4
 804279a:	009a      	lsls	r2, r3, #2
 804279c:	687b      	ldr	r3, [r7, #4]
 804279e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80427a0:	6878      	ldr	r0, [r7, #4]
 80427a2:	f002 f9a9 	bl	8044af8 <DMA_CalcBaseAndBitshift>
 80427a6:	4603      	mov	r3, r0
 80427a8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80427aa:	687b      	ldr	r3, [r7, #4]
 80427ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80427ae:	f003 031f 	and.w	r3, r3, #31
 80427b2:	2201      	movs	r2, #1
 80427b4:	409a      	lsls	r2, r3
 80427b6:	68fb      	ldr	r3, [r7, #12]
 80427b8:	605a      	str	r2, [r3, #4]
 80427ba:	e008      	b.n	80427ce <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80427bc:	687b      	ldr	r3, [r7, #4]
 80427be:	2240      	movs	r2, #64	; 0x40
 80427c0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80427c2:	687b      	ldr	r3, [r7, #4]
 80427c4:	2203      	movs	r2, #3
 80427c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80427ca:	2301      	movs	r3, #1
 80427cc:	e0b7      	b.n	804293e <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80427ce:	687b      	ldr	r3, [r7, #4]
 80427d0:	681b      	ldr	r3, [r3, #0]
 80427d2:	4a5f      	ldr	r2, [pc, #380]	; (8042950 <HAL_DMA_Init+0x654>)
 80427d4:	4293      	cmp	r3, r2
 80427d6:	d072      	beq.n	80428be <HAL_DMA_Init+0x5c2>
 80427d8:	687b      	ldr	r3, [r7, #4]
 80427da:	681b      	ldr	r3, [r3, #0]
 80427dc:	4a5d      	ldr	r2, [pc, #372]	; (8042954 <HAL_DMA_Init+0x658>)
 80427de:	4293      	cmp	r3, r2
 80427e0:	d06d      	beq.n	80428be <HAL_DMA_Init+0x5c2>
 80427e2:	687b      	ldr	r3, [r7, #4]
 80427e4:	681b      	ldr	r3, [r3, #0]
 80427e6:	4a5c      	ldr	r2, [pc, #368]	; (8042958 <HAL_DMA_Init+0x65c>)
 80427e8:	4293      	cmp	r3, r2
 80427ea:	d068      	beq.n	80428be <HAL_DMA_Init+0x5c2>
 80427ec:	687b      	ldr	r3, [r7, #4]
 80427ee:	681b      	ldr	r3, [r3, #0]
 80427f0:	4a5a      	ldr	r2, [pc, #360]	; (804295c <HAL_DMA_Init+0x660>)
 80427f2:	4293      	cmp	r3, r2
 80427f4:	d063      	beq.n	80428be <HAL_DMA_Init+0x5c2>
 80427f6:	687b      	ldr	r3, [r7, #4]
 80427f8:	681b      	ldr	r3, [r3, #0]
 80427fa:	4a59      	ldr	r2, [pc, #356]	; (8042960 <HAL_DMA_Init+0x664>)
 80427fc:	4293      	cmp	r3, r2
 80427fe:	d05e      	beq.n	80428be <HAL_DMA_Init+0x5c2>
 8042800:	687b      	ldr	r3, [r7, #4]
 8042802:	681b      	ldr	r3, [r3, #0]
 8042804:	4a57      	ldr	r2, [pc, #348]	; (8042964 <HAL_DMA_Init+0x668>)
 8042806:	4293      	cmp	r3, r2
 8042808:	d059      	beq.n	80428be <HAL_DMA_Init+0x5c2>
 804280a:	687b      	ldr	r3, [r7, #4]
 804280c:	681b      	ldr	r3, [r3, #0]
 804280e:	4a56      	ldr	r2, [pc, #344]	; (8042968 <HAL_DMA_Init+0x66c>)
 8042810:	4293      	cmp	r3, r2
 8042812:	d054      	beq.n	80428be <HAL_DMA_Init+0x5c2>
 8042814:	687b      	ldr	r3, [r7, #4]
 8042816:	681b      	ldr	r3, [r3, #0]
 8042818:	4a54      	ldr	r2, [pc, #336]	; (804296c <HAL_DMA_Init+0x670>)
 804281a:	4293      	cmp	r3, r2
 804281c:	d04f      	beq.n	80428be <HAL_DMA_Init+0x5c2>
 804281e:	687b      	ldr	r3, [r7, #4]
 8042820:	681b      	ldr	r3, [r3, #0]
 8042822:	4a53      	ldr	r2, [pc, #332]	; (8042970 <HAL_DMA_Init+0x674>)
 8042824:	4293      	cmp	r3, r2
 8042826:	d04a      	beq.n	80428be <HAL_DMA_Init+0x5c2>
 8042828:	687b      	ldr	r3, [r7, #4]
 804282a:	681b      	ldr	r3, [r3, #0]
 804282c:	4a51      	ldr	r2, [pc, #324]	; (8042974 <HAL_DMA_Init+0x678>)
 804282e:	4293      	cmp	r3, r2
 8042830:	d045      	beq.n	80428be <HAL_DMA_Init+0x5c2>
 8042832:	687b      	ldr	r3, [r7, #4]
 8042834:	681b      	ldr	r3, [r3, #0]
 8042836:	4a50      	ldr	r2, [pc, #320]	; (8042978 <HAL_DMA_Init+0x67c>)
 8042838:	4293      	cmp	r3, r2
 804283a:	d040      	beq.n	80428be <HAL_DMA_Init+0x5c2>
 804283c:	687b      	ldr	r3, [r7, #4]
 804283e:	681b      	ldr	r3, [r3, #0]
 8042840:	4a4e      	ldr	r2, [pc, #312]	; (804297c <HAL_DMA_Init+0x680>)
 8042842:	4293      	cmp	r3, r2
 8042844:	d03b      	beq.n	80428be <HAL_DMA_Init+0x5c2>
 8042846:	687b      	ldr	r3, [r7, #4]
 8042848:	681b      	ldr	r3, [r3, #0]
 804284a:	4a4d      	ldr	r2, [pc, #308]	; (8042980 <HAL_DMA_Init+0x684>)
 804284c:	4293      	cmp	r3, r2
 804284e:	d036      	beq.n	80428be <HAL_DMA_Init+0x5c2>
 8042850:	687b      	ldr	r3, [r7, #4]
 8042852:	681b      	ldr	r3, [r3, #0]
 8042854:	4a4b      	ldr	r2, [pc, #300]	; (8042984 <HAL_DMA_Init+0x688>)
 8042856:	4293      	cmp	r3, r2
 8042858:	d031      	beq.n	80428be <HAL_DMA_Init+0x5c2>
 804285a:	687b      	ldr	r3, [r7, #4]
 804285c:	681b      	ldr	r3, [r3, #0]
 804285e:	4a4a      	ldr	r2, [pc, #296]	; (8042988 <HAL_DMA_Init+0x68c>)
 8042860:	4293      	cmp	r3, r2
 8042862:	d02c      	beq.n	80428be <HAL_DMA_Init+0x5c2>
 8042864:	687b      	ldr	r3, [r7, #4]
 8042866:	681b      	ldr	r3, [r3, #0]
 8042868:	4a48      	ldr	r2, [pc, #288]	; (804298c <HAL_DMA_Init+0x690>)
 804286a:	4293      	cmp	r3, r2
 804286c:	d027      	beq.n	80428be <HAL_DMA_Init+0x5c2>
 804286e:	687b      	ldr	r3, [r7, #4]
 8042870:	681b      	ldr	r3, [r3, #0]
 8042872:	4a47      	ldr	r2, [pc, #284]	; (8042990 <HAL_DMA_Init+0x694>)
 8042874:	4293      	cmp	r3, r2
 8042876:	d022      	beq.n	80428be <HAL_DMA_Init+0x5c2>
 8042878:	687b      	ldr	r3, [r7, #4]
 804287a:	681b      	ldr	r3, [r3, #0]
 804287c:	4a45      	ldr	r2, [pc, #276]	; (8042994 <HAL_DMA_Init+0x698>)
 804287e:	4293      	cmp	r3, r2
 8042880:	d01d      	beq.n	80428be <HAL_DMA_Init+0x5c2>
 8042882:	687b      	ldr	r3, [r7, #4]
 8042884:	681b      	ldr	r3, [r3, #0]
 8042886:	4a44      	ldr	r2, [pc, #272]	; (8042998 <HAL_DMA_Init+0x69c>)
 8042888:	4293      	cmp	r3, r2
 804288a:	d018      	beq.n	80428be <HAL_DMA_Init+0x5c2>
 804288c:	687b      	ldr	r3, [r7, #4]
 804288e:	681b      	ldr	r3, [r3, #0]
 8042890:	4a42      	ldr	r2, [pc, #264]	; (804299c <HAL_DMA_Init+0x6a0>)
 8042892:	4293      	cmp	r3, r2
 8042894:	d013      	beq.n	80428be <HAL_DMA_Init+0x5c2>
 8042896:	687b      	ldr	r3, [r7, #4]
 8042898:	681b      	ldr	r3, [r3, #0]
 804289a:	4a41      	ldr	r2, [pc, #260]	; (80429a0 <HAL_DMA_Init+0x6a4>)
 804289c:	4293      	cmp	r3, r2
 804289e:	d00e      	beq.n	80428be <HAL_DMA_Init+0x5c2>
 80428a0:	687b      	ldr	r3, [r7, #4]
 80428a2:	681b      	ldr	r3, [r3, #0]
 80428a4:	4a3f      	ldr	r2, [pc, #252]	; (80429a4 <HAL_DMA_Init+0x6a8>)
 80428a6:	4293      	cmp	r3, r2
 80428a8:	d009      	beq.n	80428be <HAL_DMA_Init+0x5c2>
 80428aa:	687b      	ldr	r3, [r7, #4]
 80428ac:	681b      	ldr	r3, [r3, #0]
 80428ae:	4a3e      	ldr	r2, [pc, #248]	; (80429a8 <HAL_DMA_Init+0x6ac>)
 80428b0:	4293      	cmp	r3, r2
 80428b2:	d004      	beq.n	80428be <HAL_DMA_Init+0x5c2>
 80428b4:	687b      	ldr	r3, [r7, #4]
 80428b6:	681b      	ldr	r3, [r3, #0]
 80428b8:	4a3c      	ldr	r2, [pc, #240]	; (80429ac <HAL_DMA_Init+0x6b0>)
 80428ba:	4293      	cmp	r3, r2
 80428bc:	d101      	bne.n	80428c2 <HAL_DMA_Init+0x5c6>
 80428be:	2301      	movs	r3, #1
 80428c0:	e000      	b.n	80428c4 <HAL_DMA_Init+0x5c8>
 80428c2:	2300      	movs	r3, #0
 80428c4:	2b00      	cmp	r3, #0
 80428c6:	d032      	beq.n	804292e <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80428c8:	6878      	ldr	r0, [r7, #4]
 80428ca:	f002 fa43 	bl	8044d54 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80428ce:	687b      	ldr	r3, [r7, #4]
 80428d0:	689b      	ldr	r3, [r3, #8]
 80428d2:	2b80      	cmp	r3, #128	; 0x80
 80428d4:	d102      	bne.n	80428dc <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80428d6:	687b      	ldr	r3, [r7, #4]
 80428d8:	2200      	movs	r2, #0
 80428da:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80428dc:	687b      	ldr	r3, [r7, #4]
 80428de:	685a      	ldr	r2, [r3, #4]
 80428e0:	687b      	ldr	r3, [r7, #4]
 80428e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80428e4:	b2d2      	uxtb	r2, r2
 80428e6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80428e8:	687b      	ldr	r3, [r7, #4]
 80428ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80428ec:	687a      	ldr	r2, [r7, #4]
 80428ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80428f0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80428f2:	687b      	ldr	r3, [r7, #4]
 80428f4:	685b      	ldr	r3, [r3, #4]
 80428f6:	2b00      	cmp	r3, #0
 80428f8:	d010      	beq.n	804291c <HAL_DMA_Init+0x620>
 80428fa:	687b      	ldr	r3, [r7, #4]
 80428fc:	685b      	ldr	r3, [r3, #4]
 80428fe:	2b08      	cmp	r3, #8
 8042900:	d80c      	bhi.n	804291c <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8042902:	6878      	ldr	r0, [r7, #4]
 8042904:	f002 fac0 	bl	8044e88 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8042908:	687b      	ldr	r3, [r7, #4]
 804290a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804290c:	2200      	movs	r2, #0
 804290e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8042910:	687b      	ldr	r3, [r7, #4]
 8042912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042914:	687a      	ldr	r2, [r7, #4]
 8042916:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8042918:	605a      	str	r2, [r3, #4]
 804291a:	e008      	b.n	804292e <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 804291c:	687b      	ldr	r3, [r7, #4]
 804291e:	2200      	movs	r2, #0
 8042920:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8042922:	687b      	ldr	r3, [r7, #4]
 8042924:	2200      	movs	r2, #0
 8042926:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8042928:	687b      	ldr	r3, [r7, #4]
 804292a:	2200      	movs	r2, #0
 804292c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 804292e:	687b      	ldr	r3, [r7, #4]
 8042930:	2200      	movs	r2, #0
 8042932:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8042934:	687b      	ldr	r3, [r7, #4]
 8042936:	2201      	movs	r2, #1
 8042938:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 804293c:	2300      	movs	r3, #0
}
 804293e:	4618      	mov	r0, r3
 8042940:	3718      	adds	r7, #24
 8042942:	46bd      	mov	sp, r7
 8042944:	bd80      	pop	{r7, pc}
 8042946:	bf00      	nop
 8042948:	a7fdabf8 	.word	0xa7fdabf8
 804294c:	cccccccd 	.word	0xcccccccd
 8042950:	40020010 	.word	0x40020010
 8042954:	40020028 	.word	0x40020028
 8042958:	40020040 	.word	0x40020040
 804295c:	40020058 	.word	0x40020058
 8042960:	40020070 	.word	0x40020070
 8042964:	40020088 	.word	0x40020088
 8042968:	400200a0 	.word	0x400200a0
 804296c:	400200b8 	.word	0x400200b8
 8042970:	40020410 	.word	0x40020410
 8042974:	40020428 	.word	0x40020428
 8042978:	40020440 	.word	0x40020440
 804297c:	40020458 	.word	0x40020458
 8042980:	40020470 	.word	0x40020470
 8042984:	40020488 	.word	0x40020488
 8042988:	400204a0 	.word	0x400204a0
 804298c:	400204b8 	.word	0x400204b8
 8042990:	58025408 	.word	0x58025408
 8042994:	5802541c 	.word	0x5802541c
 8042998:	58025430 	.word	0x58025430
 804299c:	58025444 	.word	0x58025444
 80429a0:	58025458 	.word	0x58025458
 80429a4:	5802546c 	.word	0x5802546c
 80429a8:	58025480 	.word	0x58025480
 80429ac:	58025494 	.word	0x58025494

080429b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80429b0:	b580      	push	{r7, lr}
 80429b2:	b086      	sub	sp, #24
 80429b4:	af00      	add	r7, sp, #0
 80429b6:	60f8      	str	r0, [r7, #12]
 80429b8:	60b9      	str	r1, [r7, #8]
 80429ba:	607a      	str	r2, [r7, #4]
 80429bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80429be:	2300      	movs	r3, #0
 80429c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80429c2:	68fb      	ldr	r3, [r7, #12]
 80429c4:	2b00      	cmp	r3, #0
 80429c6:	d101      	bne.n	80429cc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80429c8:	2301      	movs	r3, #1
 80429ca:	e226      	b.n	8042e1a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80429cc:	68fb      	ldr	r3, [r7, #12]
 80429ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80429d2:	2b01      	cmp	r3, #1
 80429d4:	d101      	bne.n	80429da <HAL_DMA_Start_IT+0x2a>
 80429d6:	2302      	movs	r3, #2
 80429d8:	e21f      	b.n	8042e1a <HAL_DMA_Start_IT+0x46a>
 80429da:	68fb      	ldr	r3, [r7, #12]
 80429dc:	2201      	movs	r2, #1
 80429de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80429e2:	68fb      	ldr	r3, [r7, #12]
 80429e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80429e8:	b2db      	uxtb	r3, r3
 80429ea:	2b01      	cmp	r3, #1
 80429ec:	f040 820a 	bne.w	8042e04 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80429f0:	68fb      	ldr	r3, [r7, #12]
 80429f2:	2202      	movs	r2, #2
 80429f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80429f8:	68fb      	ldr	r3, [r7, #12]
 80429fa:	2200      	movs	r2, #0
 80429fc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80429fe:	68fb      	ldr	r3, [r7, #12]
 8042a00:	681b      	ldr	r3, [r3, #0]
 8042a02:	4a68      	ldr	r2, [pc, #416]	; (8042ba4 <HAL_DMA_Start_IT+0x1f4>)
 8042a04:	4293      	cmp	r3, r2
 8042a06:	d04a      	beq.n	8042a9e <HAL_DMA_Start_IT+0xee>
 8042a08:	68fb      	ldr	r3, [r7, #12]
 8042a0a:	681b      	ldr	r3, [r3, #0]
 8042a0c:	4a66      	ldr	r2, [pc, #408]	; (8042ba8 <HAL_DMA_Start_IT+0x1f8>)
 8042a0e:	4293      	cmp	r3, r2
 8042a10:	d045      	beq.n	8042a9e <HAL_DMA_Start_IT+0xee>
 8042a12:	68fb      	ldr	r3, [r7, #12]
 8042a14:	681b      	ldr	r3, [r3, #0]
 8042a16:	4a65      	ldr	r2, [pc, #404]	; (8042bac <HAL_DMA_Start_IT+0x1fc>)
 8042a18:	4293      	cmp	r3, r2
 8042a1a:	d040      	beq.n	8042a9e <HAL_DMA_Start_IT+0xee>
 8042a1c:	68fb      	ldr	r3, [r7, #12]
 8042a1e:	681b      	ldr	r3, [r3, #0]
 8042a20:	4a63      	ldr	r2, [pc, #396]	; (8042bb0 <HAL_DMA_Start_IT+0x200>)
 8042a22:	4293      	cmp	r3, r2
 8042a24:	d03b      	beq.n	8042a9e <HAL_DMA_Start_IT+0xee>
 8042a26:	68fb      	ldr	r3, [r7, #12]
 8042a28:	681b      	ldr	r3, [r3, #0]
 8042a2a:	4a62      	ldr	r2, [pc, #392]	; (8042bb4 <HAL_DMA_Start_IT+0x204>)
 8042a2c:	4293      	cmp	r3, r2
 8042a2e:	d036      	beq.n	8042a9e <HAL_DMA_Start_IT+0xee>
 8042a30:	68fb      	ldr	r3, [r7, #12]
 8042a32:	681b      	ldr	r3, [r3, #0]
 8042a34:	4a60      	ldr	r2, [pc, #384]	; (8042bb8 <HAL_DMA_Start_IT+0x208>)
 8042a36:	4293      	cmp	r3, r2
 8042a38:	d031      	beq.n	8042a9e <HAL_DMA_Start_IT+0xee>
 8042a3a:	68fb      	ldr	r3, [r7, #12]
 8042a3c:	681b      	ldr	r3, [r3, #0]
 8042a3e:	4a5f      	ldr	r2, [pc, #380]	; (8042bbc <HAL_DMA_Start_IT+0x20c>)
 8042a40:	4293      	cmp	r3, r2
 8042a42:	d02c      	beq.n	8042a9e <HAL_DMA_Start_IT+0xee>
 8042a44:	68fb      	ldr	r3, [r7, #12]
 8042a46:	681b      	ldr	r3, [r3, #0]
 8042a48:	4a5d      	ldr	r2, [pc, #372]	; (8042bc0 <HAL_DMA_Start_IT+0x210>)
 8042a4a:	4293      	cmp	r3, r2
 8042a4c:	d027      	beq.n	8042a9e <HAL_DMA_Start_IT+0xee>
 8042a4e:	68fb      	ldr	r3, [r7, #12]
 8042a50:	681b      	ldr	r3, [r3, #0]
 8042a52:	4a5c      	ldr	r2, [pc, #368]	; (8042bc4 <HAL_DMA_Start_IT+0x214>)
 8042a54:	4293      	cmp	r3, r2
 8042a56:	d022      	beq.n	8042a9e <HAL_DMA_Start_IT+0xee>
 8042a58:	68fb      	ldr	r3, [r7, #12]
 8042a5a:	681b      	ldr	r3, [r3, #0]
 8042a5c:	4a5a      	ldr	r2, [pc, #360]	; (8042bc8 <HAL_DMA_Start_IT+0x218>)
 8042a5e:	4293      	cmp	r3, r2
 8042a60:	d01d      	beq.n	8042a9e <HAL_DMA_Start_IT+0xee>
 8042a62:	68fb      	ldr	r3, [r7, #12]
 8042a64:	681b      	ldr	r3, [r3, #0]
 8042a66:	4a59      	ldr	r2, [pc, #356]	; (8042bcc <HAL_DMA_Start_IT+0x21c>)
 8042a68:	4293      	cmp	r3, r2
 8042a6a:	d018      	beq.n	8042a9e <HAL_DMA_Start_IT+0xee>
 8042a6c:	68fb      	ldr	r3, [r7, #12]
 8042a6e:	681b      	ldr	r3, [r3, #0]
 8042a70:	4a57      	ldr	r2, [pc, #348]	; (8042bd0 <HAL_DMA_Start_IT+0x220>)
 8042a72:	4293      	cmp	r3, r2
 8042a74:	d013      	beq.n	8042a9e <HAL_DMA_Start_IT+0xee>
 8042a76:	68fb      	ldr	r3, [r7, #12]
 8042a78:	681b      	ldr	r3, [r3, #0]
 8042a7a:	4a56      	ldr	r2, [pc, #344]	; (8042bd4 <HAL_DMA_Start_IT+0x224>)
 8042a7c:	4293      	cmp	r3, r2
 8042a7e:	d00e      	beq.n	8042a9e <HAL_DMA_Start_IT+0xee>
 8042a80:	68fb      	ldr	r3, [r7, #12]
 8042a82:	681b      	ldr	r3, [r3, #0]
 8042a84:	4a54      	ldr	r2, [pc, #336]	; (8042bd8 <HAL_DMA_Start_IT+0x228>)
 8042a86:	4293      	cmp	r3, r2
 8042a88:	d009      	beq.n	8042a9e <HAL_DMA_Start_IT+0xee>
 8042a8a:	68fb      	ldr	r3, [r7, #12]
 8042a8c:	681b      	ldr	r3, [r3, #0]
 8042a8e:	4a53      	ldr	r2, [pc, #332]	; (8042bdc <HAL_DMA_Start_IT+0x22c>)
 8042a90:	4293      	cmp	r3, r2
 8042a92:	d004      	beq.n	8042a9e <HAL_DMA_Start_IT+0xee>
 8042a94:	68fb      	ldr	r3, [r7, #12]
 8042a96:	681b      	ldr	r3, [r3, #0]
 8042a98:	4a51      	ldr	r2, [pc, #324]	; (8042be0 <HAL_DMA_Start_IT+0x230>)
 8042a9a:	4293      	cmp	r3, r2
 8042a9c:	d108      	bne.n	8042ab0 <HAL_DMA_Start_IT+0x100>
 8042a9e:	68fb      	ldr	r3, [r7, #12]
 8042aa0:	681b      	ldr	r3, [r3, #0]
 8042aa2:	681a      	ldr	r2, [r3, #0]
 8042aa4:	68fb      	ldr	r3, [r7, #12]
 8042aa6:	681b      	ldr	r3, [r3, #0]
 8042aa8:	f022 0201 	bic.w	r2, r2, #1
 8042aac:	601a      	str	r2, [r3, #0]
 8042aae:	e007      	b.n	8042ac0 <HAL_DMA_Start_IT+0x110>
 8042ab0:	68fb      	ldr	r3, [r7, #12]
 8042ab2:	681b      	ldr	r3, [r3, #0]
 8042ab4:	681a      	ldr	r2, [r3, #0]
 8042ab6:	68fb      	ldr	r3, [r7, #12]
 8042ab8:	681b      	ldr	r3, [r3, #0]
 8042aba:	f022 0201 	bic.w	r2, r2, #1
 8042abe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8042ac0:	683b      	ldr	r3, [r7, #0]
 8042ac2:	687a      	ldr	r2, [r7, #4]
 8042ac4:	68b9      	ldr	r1, [r7, #8]
 8042ac6:	68f8      	ldr	r0, [r7, #12]
 8042ac8:	f001 fe6a 	bl	80447a0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8042acc:	68fb      	ldr	r3, [r7, #12]
 8042ace:	681b      	ldr	r3, [r3, #0]
 8042ad0:	4a34      	ldr	r2, [pc, #208]	; (8042ba4 <HAL_DMA_Start_IT+0x1f4>)
 8042ad2:	4293      	cmp	r3, r2
 8042ad4:	d04a      	beq.n	8042b6c <HAL_DMA_Start_IT+0x1bc>
 8042ad6:	68fb      	ldr	r3, [r7, #12]
 8042ad8:	681b      	ldr	r3, [r3, #0]
 8042ada:	4a33      	ldr	r2, [pc, #204]	; (8042ba8 <HAL_DMA_Start_IT+0x1f8>)
 8042adc:	4293      	cmp	r3, r2
 8042ade:	d045      	beq.n	8042b6c <HAL_DMA_Start_IT+0x1bc>
 8042ae0:	68fb      	ldr	r3, [r7, #12]
 8042ae2:	681b      	ldr	r3, [r3, #0]
 8042ae4:	4a31      	ldr	r2, [pc, #196]	; (8042bac <HAL_DMA_Start_IT+0x1fc>)
 8042ae6:	4293      	cmp	r3, r2
 8042ae8:	d040      	beq.n	8042b6c <HAL_DMA_Start_IT+0x1bc>
 8042aea:	68fb      	ldr	r3, [r7, #12]
 8042aec:	681b      	ldr	r3, [r3, #0]
 8042aee:	4a30      	ldr	r2, [pc, #192]	; (8042bb0 <HAL_DMA_Start_IT+0x200>)
 8042af0:	4293      	cmp	r3, r2
 8042af2:	d03b      	beq.n	8042b6c <HAL_DMA_Start_IT+0x1bc>
 8042af4:	68fb      	ldr	r3, [r7, #12]
 8042af6:	681b      	ldr	r3, [r3, #0]
 8042af8:	4a2e      	ldr	r2, [pc, #184]	; (8042bb4 <HAL_DMA_Start_IT+0x204>)
 8042afa:	4293      	cmp	r3, r2
 8042afc:	d036      	beq.n	8042b6c <HAL_DMA_Start_IT+0x1bc>
 8042afe:	68fb      	ldr	r3, [r7, #12]
 8042b00:	681b      	ldr	r3, [r3, #0]
 8042b02:	4a2d      	ldr	r2, [pc, #180]	; (8042bb8 <HAL_DMA_Start_IT+0x208>)
 8042b04:	4293      	cmp	r3, r2
 8042b06:	d031      	beq.n	8042b6c <HAL_DMA_Start_IT+0x1bc>
 8042b08:	68fb      	ldr	r3, [r7, #12]
 8042b0a:	681b      	ldr	r3, [r3, #0]
 8042b0c:	4a2b      	ldr	r2, [pc, #172]	; (8042bbc <HAL_DMA_Start_IT+0x20c>)
 8042b0e:	4293      	cmp	r3, r2
 8042b10:	d02c      	beq.n	8042b6c <HAL_DMA_Start_IT+0x1bc>
 8042b12:	68fb      	ldr	r3, [r7, #12]
 8042b14:	681b      	ldr	r3, [r3, #0]
 8042b16:	4a2a      	ldr	r2, [pc, #168]	; (8042bc0 <HAL_DMA_Start_IT+0x210>)
 8042b18:	4293      	cmp	r3, r2
 8042b1a:	d027      	beq.n	8042b6c <HAL_DMA_Start_IT+0x1bc>
 8042b1c:	68fb      	ldr	r3, [r7, #12]
 8042b1e:	681b      	ldr	r3, [r3, #0]
 8042b20:	4a28      	ldr	r2, [pc, #160]	; (8042bc4 <HAL_DMA_Start_IT+0x214>)
 8042b22:	4293      	cmp	r3, r2
 8042b24:	d022      	beq.n	8042b6c <HAL_DMA_Start_IT+0x1bc>
 8042b26:	68fb      	ldr	r3, [r7, #12]
 8042b28:	681b      	ldr	r3, [r3, #0]
 8042b2a:	4a27      	ldr	r2, [pc, #156]	; (8042bc8 <HAL_DMA_Start_IT+0x218>)
 8042b2c:	4293      	cmp	r3, r2
 8042b2e:	d01d      	beq.n	8042b6c <HAL_DMA_Start_IT+0x1bc>
 8042b30:	68fb      	ldr	r3, [r7, #12]
 8042b32:	681b      	ldr	r3, [r3, #0]
 8042b34:	4a25      	ldr	r2, [pc, #148]	; (8042bcc <HAL_DMA_Start_IT+0x21c>)
 8042b36:	4293      	cmp	r3, r2
 8042b38:	d018      	beq.n	8042b6c <HAL_DMA_Start_IT+0x1bc>
 8042b3a:	68fb      	ldr	r3, [r7, #12]
 8042b3c:	681b      	ldr	r3, [r3, #0]
 8042b3e:	4a24      	ldr	r2, [pc, #144]	; (8042bd0 <HAL_DMA_Start_IT+0x220>)
 8042b40:	4293      	cmp	r3, r2
 8042b42:	d013      	beq.n	8042b6c <HAL_DMA_Start_IT+0x1bc>
 8042b44:	68fb      	ldr	r3, [r7, #12]
 8042b46:	681b      	ldr	r3, [r3, #0]
 8042b48:	4a22      	ldr	r2, [pc, #136]	; (8042bd4 <HAL_DMA_Start_IT+0x224>)
 8042b4a:	4293      	cmp	r3, r2
 8042b4c:	d00e      	beq.n	8042b6c <HAL_DMA_Start_IT+0x1bc>
 8042b4e:	68fb      	ldr	r3, [r7, #12]
 8042b50:	681b      	ldr	r3, [r3, #0]
 8042b52:	4a21      	ldr	r2, [pc, #132]	; (8042bd8 <HAL_DMA_Start_IT+0x228>)
 8042b54:	4293      	cmp	r3, r2
 8042b56:	d009      	beq.n	8042b6c <HAL_DMA_Start_IT+0x1bc>
 8042b58:	68fb      	ldr	r3, [r7, #12]
 8042b5a:	681b      	ldr	r3, [r3, #0]
 8042b5c:	4a1f      	ldr	r2, [pc, #124]	; (8042bdc <HAL_DMA_Start_IT+0x22c>)
 8042b5e:	4293      	cmp	r3, r2
 8042b60:	d004      	beq.n	8042b6c <HAL_DMA_Start_IT+0x1bc>
 8042b62:	68fb      	ldr	r3, [r7, #12]
 8042b64:	681b      	ldr	r3, [r3, #0]
 8042b66:	4a1e      	ldr	r2, [pc, #120]	; (8042be0 <HAL_DMA_Start_IT+0x230>)
 8042b68:	4293      	cmp	r3, r2
 8042b6a:	d101      	bne.n	8042b70 <HAL_DMA_Start_IT+0x1c0>
 8042b6c:	2301      	movs	r3, #1
 8042b6e:	e000      	b.n	8042b72 <HAL_DMA_Start_IT+0x1c2>
 8042b70:	2300      	movs	r3, #0
 8042b72:	2b00      	cmp	r3, #0
 8042b74:	d036      	beq.n	8042be4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8042b76:	68fb      	ldr	r3, [r7, #12]
 8042b78:	681b      	ldr	r3, [r3, #0]
 8042b7a:	681b      	ldr	r3, [r3, #0]
 8042b7c:	f023 021e 	bic.w	r2, r3, #30
 8042b80:	68fb      	ldr	r3, [r7, #12]
 8042b82:	681b      	ldr	r3, [r3, #0]
 8042b84:	f042 0216 	orr.w	r2, r2, #22
 8042b88:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8042b8a:	68fb      	ldr	r3, [r7, #12]
 8042b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042b8e:	2b00      	cmp	r3, #0
 8042b90:	d03e      	beq.n	8042c10 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8042b92:	68fb      	ldr	r3, [r7, #12]
 8042b94:	681b      	ldr	r3, [r3, #0]
 8042b96:	681a      	ldr	r2, [r3, #0]
 8042b98:	68fb      	ldr	r3, [r7, #12]
 8042b9a:	681b      	ldr	r3, [r3, #0]
 8042b9c:	f042 0208 	orr.w	r2, r2, #8
 8042ba0:	601a      	str	r2, [r3, #0]
 8042ba2:	e035      	b.n	8042c10 <HAL_DMA_Start_IT+0x260>
 8042ba4:	40020010 	.word	0x40020010
 8042ba8:	40020028 	.word	0x40020028
 8042bac:	40020040 	.word	0x40020040
 8042bb0:	40020058 	.word	0x40020058
 8042bb4:	40020070 	.word	0x40020070
 8042bb8:	40020088 	.word	0x40020088
 8042bbc:	400200a0 	.word	0x400200a0
 8042bc0:	400200b8 	.word	0x400200b8
 8042bc4:	40020410 	.word	0x40020410
 8042bc8:	40020428 	.word	0x40020428
 8042bcc:	40020440 	.word	0x40020440
 8042bd0:	40020458 	.word	0x40020458
 8042bd4:	40020470 	.word	0x40020470
 8042bd8:	40020488 	.word	0x40020488
 8042bdc:	400204a0 	.word	0x400204a0
 8042be0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8042be4:	68fb      	ldr	r3, [r7, #12]
 8042be6:	681b      	ldr	r3, [r3, #0]
 8042be8:	681b      	ldr	r3, [r3, #0]
 8042bea:	f023 020e 	bic.w	r2, r3, #14
 8042bee:	68fb      	ldr	r3, [r7, #12]
 8042bf0:	681b      	ldr	r3, [r3, #0]
 8042bf2:	f042 020a 	orr.w	r2, r2, #10
 8042bf6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8042bf8:	68fb      	ldr	r3, [r7, #12]
 8042bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042bfc:	2b00      	cmp	r3, #0
 8042bfe:	d007      	beq.n	8042c10 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8042c00:	68fb      	ldr	r3, [r7, #12]
 8042c02:	681b      	ldr	r3, [r3, #0]
 8042c04:	681a      	ldr	r2, [r3, #0]
 8042c06:	68fb      	ldr	r3, [r7, #12]
 8042c08:	681b      	ldr	r3, [r3, #0]
 8042c0a:	f042 0204 	orr.w	r2, r2, #4
 8042c0e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8042c10:	68fb      	ldr	r3, [r7, #12]
 8042c12:	681b      	ldr	r3, [r3, #0]
 8042c14:	4a83      	ldr	r2, [pc, #524]	; (8042e24 <HAL_DMA_Start_IT+0x474>)
 8042c16:	4293      	cmp	r3, r2
 8042c18:	d072      	beq.n	8042d00 <HAL_DMA_Start_IT+0x350>
 8042c1a:	68fb      	ldr	r3, [r7, #12]
 8042c1c:	681b      	ldr	r3, [r3, #0]
 8042c1e:	4a82      	ldr	r2, [pc, #520]	; (8042e28 <HAL_DMA_Start_IT+0x478>)
 8042c20:	4293      	cmp	r3, r2
 8042c22:	d06d      	beq.n	8042d00 <HAL_DMA_Start_IT+0x350>
 8042c24:	68fb      	ldr	r3, [r7, #12]
 8042c26:	681b      	ldr	r3, [r3, #0]
 8042c28:	4a80      	ldr	r2, [pc, #512]	; (8042e2c <HAL_DMA_Start_IT+0x47c>)
 8042c2a:	4293      	cmp	r3, r2
 8042c2c:	d068      	beq.n	8042d00 <HAL_DMA_Start_IT+0x350>
 8042c2e:	68fb      	ldr	r3, [r7, #12]
 8042c30:	681b      	ldr	r3, [r3, #0]
 8042c32:	4a7f      	ldr	r2, [pc, #508]	; (8042e30 <HAL_DMA_Start_IT+0x480>)
 8042c34:	4293      	cmp	r3, r2
 8042c36:	d063      	beq.n	8042d00 <HAL_DMA_Start_IT+0x350>
 8042c38:	68fb      	ldr	r3, [r7, #12]
 8042c3a:	681b      	ldr	r3, [r3, #0]
 8042c3c:	4a7d      	ldr	r2, [pc, #500]	; (8042e34 <HAL_DMA_Start_IT+0x484>)
 8042c3e:	4293      	cmp	r3, r2
 8042c40:	d05e      	beq.n	8042d00 <HAL_DMA_Start_IT+0x350>
 8042c42:	68fb      	ldr	r3, [r7, #12]
 8042c44:	681b      	ldr	r3, [r3, #0]
 8042c46:	4a7c      	ldr	r2, [pc, #496]	; (8042e38 <HAL_DMA_Start_IT+0x488>)
 8042c48:	4293      	cmp	r3, r2
 8042c4a:	d059      	beq.n	8042d00 <HAL_DMA_Start_IT+0x350>
 8042c4c:	68fb      	ldr	r3, [r7, #12]
 8042c4e:	681b      	ldr	r3, [r3, #0]
 8042c50:	4a7a      	ldr	r2, [pc, #488]	; (8042e3c <HAL_DMA_Start_IT+0x48c>)
 8042c52:	4293      	cmp	r3, r2
 8042c54:	d054      	beq.n	8042d00 <HAL_DMA_Start_IT+0x350>
 8042c56:	68fb      	ldr	r3, [r7, #12]
 8042c58:	681b      	ldr	r3, [r3, #0]
 8042c5a:	4a79      	ldr	r2, [pc, #484]	; (8042e40 <HAL_DMA_Start_IT+0x490>)
 8042c5c:	4293      	cmp	r3, r2
 8042c5e:	d04f      	beq.n	8042d00 <HAL_DMA_Start_IT+0x350>
 8042c60:	68fb      	ldr	r3, [r7, #12]
 8042c62:	681b      	ldr	r3, [r3, #0]
 8042c64:	4a77      	ldr	r2, [pc, #476]	; (8042e44 <HAL_DMA_Start_IT+0x494>)
 8042c66:	4293      	cmp	r3, r2
 8042c68:	d04a      	beq.n	8042d00 <HAL_DMA_Start_IT+0x350>
 8042c6a:	68fb      	ldr	r3, [r7, #12]
 8042c6c:	681b      	ldr	r3, [r3, #0]
 8042c6e:	4a76      	ldr	r2, [pc, #472]	; (8042e48 <HAL_DMA_Start_IT+0x498>)
 8042c70:	4293      	cmp	r3, r2
 8042c72:	d045      	beq.n	8042d00 <HAL_DMA_Start_IT+0x350>
 8042c74:	68fb      	ldr	r3, [r7, #12]
 8042c76:	681b      	ldr	r3, [r3, #0]
 8042c78:	4a74      	ldr	r2, [pc, #464]	; (8042e4c <HAL_DMA_Start_IT+0x49c>)
 8042c7a:	4293      	cmp	r3, r2
 8042c7c:	d040      	beq.n	8042d00 <HAL_DMA_Start_IT+0x350>
 8042c7e:	68fb      	ldr	r3, [r7, #12]
 8042c80:	681b      	ldr	r3, [r3, #0]
 8042c82:	4a73      	ldr	r2, [pc, #460]	; (8042e50 <HAL_DMA_Start_IT+0x4a0>)
 8042c84:	4293      	cmp	r3, r2
 8042c86:	d03b      	beq.n	8042d00 <HAL_DMA_Start_IT+0x350>
 8042c88:	68fb      	ldr	r3, [r7, #12]
 8042c8a:	681b      	ldr	r3, [r3, #0]
 8042c8c:	4a71      	ldr	r2, [pc, #452]	; (8042e54 <HAL_DMA_Start_IT+0x4a4>)
 8042c8e:	4293      	cmp	r3, r2
 8042c90:	d036      	beq.n	8042d00 <HAL_DMA_Start_IT+0x350>
 8042c92:	68fb      	ldr	r3, [r7, #12]
 8042c94:	681b      	ldr	r3, [r3, #0]
 8042c96:	4a70      	ldr	r2, [pc, #448]	; (8042e58 <HAL_DMA_Start_IT+0x4a8>)
 8042c98:	4293      	cmp	r3, r2
 8042c9a:	d031      	beq.n	8042d00 <HAL_DMA_Start_IT+0x350>
 8042c9c:	68fb      	ldr	r3, [r7, #12]
 8042c9e:	681b      	ldr	r3, [r3, #0]
 8042ca0:	4a6e      	ldr	r2, [pc, #440]	; (8042e5c <HAL_DMA_Start_IT+0x4ac>)
 8042ca2:	4293      	cmp	r3, r2
 8042ca4:	d02c      	beq.n	8042d00 <HAL_DMA_Start_IT+0x350>
 8042ca6:	68fb      	ldr	r3, [r7, #12]
 8042ca8:	681b      	ldr	r3, [r3, #0]
 8042caa:	4a6d      	ldr	r2, [pc, #436]	; (8042e60 <HAL_DMA_Start_IT+0x4b0>)
 8042cac:	4293      	cmp	r3, r2
 8042cae:	d027      	beq.n	8042d00 <HAL_DMA_Start_IT+0x350>
 8042cb0:	68fb      	ldr	r3, [r7, #12]
 8042cb2:	681b      	ldr	r3, [r3, #0]
 8042cb4:	4a6b      	ldr	r2, [pc, #428]	; (8042e64 <HAL_DMA_Start_IT+0x4b4>)
 8042cb6:	4293      	cmp	r3, r2
 8042cb8:	d022      	beq.n	8042d00 <HAL_DMA_Start_IT+0x350>
 8042cba:	68fb      	ldr	r3, [r7, #12]
 8042cbc:	681b      	ldr	r3, [r3, #0]
 8042cbe:	4a6a      	ldr	r2, [pc, #424]	; (8042e68 <HAL_DMA_Start_IT+0x4b8>)
 8042cc0:	4293      	cmp	r3, r2
 8042cc2:	d01d      	beq.n	8042d00 <HAL_DMA_Start_IT+0x350>
 8042cc4:	68fb      	ldr	r3, [r7, #12]
 8042cc6:	681b      	ldr	r3, [r3, #0]
 8042cc8:	4a68      	ldr	r2, [pc, #416]	; (8042e6c <HAL_DMA_Start_IT+0x4bc>)
 8042cca:	4293      	cmp	r3, r2
 8042ccc:	d018      	beq.n	8042d00 <HAL_DMA_Start_IT+0x350>
 8042cce:	68fb      	ldr	r3, [r7, #12]
 8042cd0:	681b      	ldr	r3, [r3, #0]
 8042cd2:	4a67      	ldr	r2, [pc, #412]	; (8042e70 <HAL_DMA_Start_IT+0x4c0>)
 8042cd4:	4293      	cmp	r3, r2
 8042cd6:	d013      	beq.n	8042d00 <HAL_DMA_Start_IT+0x350>
 8042cd8:	68fb      	ldr	r3, [r7, #12]
 8042cda:	681b      	ldr	r3, [r3, #0]
 8042cdc:	4a65      	ldr	r2, [pc, #404]	; (8042e74 <HAL_DMA_Start_IT+0x4c4>)
 8042cde:	4293      	cmp	r3, r2
 8042ce0:	d00e      	beq.n	8042d00 <HAL_DMA_Start_IT+0x350>
 8042ce2:	68fb      	ldr	r3, [r7, #12]
 8042ce4:	681b      	ldr	r3, [r3, #0]
 8042ce6:	4a64      	ldr	r2, [pc, #400]	; (8042e78 <HAL_DMA_Start_IT+0x4c8>)
 8042ce8:	4293      	cmp	r3, r2
 8042cea:	d009      	beq.n	8042d00 <HAL_DMA_Start_IT+0x350>
 8042cec:	68fb      	ldr	r3, [r7, #12]
 8042cee:	681b      	ldr	r3, [r3, #0]
 8042cf0:	4a62      	ldr	r2, [pc, #392]	; (8042e7c <HAL_DMA_Start_IT+0x4cc>)
 8042cf2:	4293      	cmp	r3, r2
 8042cf4:	d004      	beq.n	8042d00 <HAL_DMA_Start_IT+0x350>
 8042cf6:	68fb      	ldr	r3, [r7, #12]
 8042cf8:	681b      	ldr	r3, [r3, #0]
 8042cfa:	4a61      	ldr	r2, [pc, #388]	; (8042e80 <HAL_DMA_Start_IT+0x4d0>)
 8042cfc:	4293      	cmp	r3, r2
 8042cfe:	d101      	bne.n	8042d04 <HAL_DMA_Start_IT+0x354>
 8042d00:	2301      	movs	r3, #1
 8042d02:	e000      	b.n	8042d06 <HAL_DMA_Start_IT+0x356>
 8042d04:	2300      	movs	r3, #0
 8042d06:	2b00      	cmp	r3, #0
 8042d08:	d01a      	beq.n	8042d40 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8042d0a:	68fb      	ldr	r3, [r7, #12]
 8042d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8042d0e:	681b      	ldr	r3, [r3, #0]
 8042d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8042d14:	2b00      	cmp	r3, #0
 8042d16:	d007      	beq.n	8042d28 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8042d18:	68fb      	ldr	r3, [r7, #12]
 8042d1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8042d1c:	681a      	ldr	r2, [r3, #0]
 8042d1e:	68fb      	ldr	r3, [r7, #12]
 8042d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8042d22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8042d26:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8042d28:	68fb      	ldr	r3, [r7, #12]
 8042d2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8042d2c:	2b00      	cmp	r3, #0
 8042d2e:	d007      	beq.n	8042d40 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8042d30:	68fb      	ldr	r3, [r7, #12]
 8042d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8042d34:	681a      	ldr	r2, [r3, #0]
 8042d36:	68fb      	ldr	r3, [r7, #12]
 8042d38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8042d3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8042d3e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8042d40:	68fb      	ldr	r3, [r7, #12]
 8042d42:	681b      	ldr	r3, [r3, #0]
 8042d44:	4a37      	ldr	r2, [pc, #220]	; (8042e24 <HAL_DMA_Start_IT+0x474>)
 8042d46:	4293      	cmp	r3, r2
 8042d48:	d04a      	beq.n	8042de0 <HAL_DMA_Start_IT+0x430>
 8042d4a:	68fb      	ldr	r3, [r7, #12]
 8042d4c:	681b      	ldr	r3, [r3, #0]
 8042d4e:	4a36      	ldr	r2, [pc, #216]	; (8042e28 <HAL_DMA_Start_IT+0x478>)
 8042d50:	4293      	cmp	r3, r2
 8042d52:	d045      	beq.n	8042de0 <HAL_DMA_Start_IT+0x430>
 8042d54:	68fb      	ldr	r3, [r7, #12]
 8042d56:	681b      	ldr	r3, [r3, #0]
 8042d58:	4a34      	ldr	r2, [pc, #208]	; (8042e2c <HAL_DMA_Start_IT+0x47c>)
 8042d5a:	4293      	cmp	r3, r2
 8042d5c:	d040      	beq.n	8042de0 <HAL_DMA_Start_IT+0x430>
 8042d5e:	68fb      	ldr	r3, [r7, #12]
 8042d60:	681b      	ldr	r3, [r3, #0]
 8042d62:	4a33      	ldr	r2, [pc, #204]	; (8042e30 <HAL_DMA_Start_IT+0x480>)
 8042d64:	4293      	cmp	r3, r2
 8042d66:	d03b      	beq.n	8042de0 <HAL_DMA_Start_IT+0x430>
 8042d68:	68fb      	ldr	r3, [r7, #12]
 8042d6a:	681b      	ldr	r3, [r3, #0]
 8042d6c:	4a31      	ldr	r2, [pc, #196]	; (8042e34 <HAL_DMA_Start_IT+0x484>)
 8042d6e:	4293      	cmp	r3, r2
 8042d70:	d036      	beq.n	8042de0 <HAL_DMA_Start_IT+0x430>
 8042d72:	68fb      	ldr	r3, [r7, #12]
 8042d74:	681b      	ldr	r3, [r3, #0]
 8042d76:	4a30      	ldr	r2, [pc, #192]	; (8042e38 <HAL_DMA_Start_IT+0x488>)
 8042d78:	4293      	cmp	r3, r2
 8042d7a:	d031      	beq.n	8042de0 <HAL_DMA_Start_IT+0x430>
 8042d7c:	68fb      	ldr	r3, [r7, #12]
 8042d7e:	681b      	ldr	r3, [r3, #0]
 8042d80:	4a2e      	ldr	r2, [pc, #184]	; (8042e3c <HAL_DMA_Start_IT+0x48c>)
 8042d82:	4293      	cmp	r3, r2
 8042d84:	d02c      	beq.n	8042de0 <HAL_DMA_Start_IT+0x430>
 8042d86:	68fb      	ldr	r3, [r7, #12]
 8042d88:	681b      	ldr	r3, [r3, #0]
 8042d8a:	4a2d      	ldr	r2, [pc, #180]	; (8042e40 <HAL_DMA_Start_IT+0x490>)
 8042d8c:	4293      	cmp	r3, r2
 8042d8e:	d027      	beq.n	8042de0 <HAL_DMA_Start_IT+0x430>
 8042d90:	68fb      	ldr	r3, [r7, #12]
 8042d92:	681b      	ldr	r3, [r3, #0]
 8042d94:	4a2b      	ldr	r2, [pc, #172]	; (8042e44 <HAL_DMA_Start_IT+0x494>)
 8042d96:	4293      	cmp	r3, r2
 8042d98:	d022      	beq.n	8042de0 <HAL_DMA_Start_IT+0x430>
 8042d9a:	68fb      	ldr	r3, [r7, #12]
 8042d9c:	681b      	ldr	r3, [r3, #0]
 8042d9e:	4a2a      	ldr	r2, [pc, #168]	; (8042e48 <HAL_DMA_Start_IT+0x498>)
 8042da0:	4293      	cmp	r3, r2
 8042da2:	d01d      	beq.n	8042de0 <HAL_DMA_Start_IT+0x430>
 8042da4:	68fb      	ldr	r3, [r7, #12]
 8042da6:	681b      	ldr	r3, [r3, #0]
 8042da8:	4a28      	ldr	r2, [pc, #160]	; (8042e4c <HAL_DMA_Start_IT+0x49c>)
 8042daa:	4293      	cmp	r3, r2
 8042dac:	d018      	beq.n	8042de0 <HAL_DMA_Start_IT+0x430>
 8042dae:	68fb      	ldr	r3, [r7, #12]
 8042db0:	681b      	ldr	r3, [r3, #0]
 8042db2:	4a27      	ldr	r2, [pc, #156]	; (8042e50 <HAL_DMA_Start_IT+0x4a0>)
 8042db4:	4293      	cmp	r3, r2
 8042db6:	d013      	beq.n	8042de0 <HAL_DMA_Start_IT+0x430>
 8042db8:	68fb      	ldr	r3, [r7, #12]
 8042dba:	681b      	ldr	r3, [r3, #0]
 8042dbc:	4a25      	ldr	r2, [pc, #148]	; (8042e54 <HAL_DMA_Start_IT+0x4a4>)
 8042dbe:	4293      	cmp	r3, r2
 8042dc0:	d00e      	beq.n	8042de0 <HAL_DMA_Start_IT+0x430>
 8042dc2:	68fb      	ldr	r3, [r7, #12]
 8042dc4:	681b      	ldr	r3, [r3, #0]
 8042dc6:	4a24      	ldr	r2, [pc, #144]	; (8042e58 <HAL_DMA_Start_IT+0x4a8>)
 8042dc8:	4293      	cmp	r3, r2
 8042dca:	d009      	beq.n	8042de0 <HAL_DMA_Start_IT+0x430>
 8042dcc:	68fb      	ldr	r3, [r7, #12]
 8042dce:	681b      	ldr	r3, [r3, #0]
 8042dd0:	4a22      	ldr	r2, [pc, #136]	; (8042e5c <HAL_DMA_Start_IT+0x4ac>)
 8042dd2:	4293      	cmp	r3, r2
 8042dd4:	d004      	beq.n	8042de0 <HAL_DMA_Start_IT+0x430>
 8042dd6:	68fb      	ldr	r3, [r7, #12]
 8042dd8:	681b      	ldr	r3, [r3, #0]
 8042dda:	4a21      	ldr	r2, [pc, #132]	; (8042e60 <HAL_DMA_Start_IT+0x4b0>)
 8042ddc:	4293      	cmp	r3, r2
 8042dde:	d108      	bne.n	8042df2 <HAL_DMA_Start_IT+0x442>
 8042de0:	68fb      	ldr	r3, [r7, #12]
 8042de2:	681b      	ldr	r3, [r3, #0]
 8042de4:	681a      	ldr	r2, [r3, #0]
 8042de6:	68fb      	ldr	r3, [r7, #12]
 8042de8:	681b      	ldr	r3, [r3, #0]
 8042dea:	f042 0201 	orr.w	r2, r2, #1
 8042dee:	601a      	str	r2, [r3, #0]
 8042df0:	e012      	b.n	8042e18 <HAL_DMA_Start_IT+0x468>
 8042df2:	68fb      	ldr	r3, [r7, #12]
 8042df4:	681b      	ldr	r3, [r3, #0]
 8042df6:	681a      	ldr	r2, [r3, #0]
 8042df8:	68fb      	ldr	r3, [r7, #12]
 8042dfa:	681b      	ldr	r3, [r3, #0]
 8042dfc:	f042 0201 	orr.w	r2, r2, #1
 8042e00:	601a      	str	r2, [r3, #0]
 8042e02:	e009      	b.n	8042e18 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8042e04:	68fb      	ldr	r3, [r7, #12]
 8042e06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8042e0a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8042e0c:	68fb      	ldr	r3, [r7, #12]
 8042e0e:	2200      	movs	r2, #0
 8042e10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8042e14:	2301      	movs	r3, #1
 8042e16:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8042e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8042e1a:	4618      	mov	r0, r3
 8042e1c:	3718      	adds	r7, #24
 8042e1e:	46bd      	mov	sp, r7
 8042e20:	bd80      	pop	{r7, pc}
 8042e22:	bf00      	nop
 8042e24:	40020010 	.word	0x40020010
 8042e28:	40020028 	.word	0x40020028
 8042e2c:	40020040 	.word	0x40020040
 8042e30:	40020058 	.word	0x40020058
 8042e34:	40020070 	.word	0x40020070
 8042e38:	40020088 	.word	0x40020088
 8042e3c:	400200a0 	.word	0x400200a0
 8042e40:	400200b8 	.word	0x400200b8
 8042e44:	40020410 	.word	0x40020410
 8042e48:	40020428 	.word	0x40020428
 8042e4c:	40020440 	.word	0x40020440
 8042e50:	40020458 	.word	0x40020458
 8042e54:	40020470 	.word	0x40020470
 8042e58:	40020488 	.word	0x40020488
 8042e5c:	400204a0 	.word	0x400204a0
 8042e60:	400204b8 	.word	0x400204b8
 8042e64:	58025408 	.word	0x58025408
 8042e68:	5802541c 	.word	0x5802541c
 8042e6c:	58025430 	.word	0x58025430
 8042e70:	58025444 	.word	0x58025444
 8042e74:	58025458 	.word	0x58025458
 8042e78:	5802546c 	.word	0x5802546c
 8042e7c:	58025480 	.word	0x58025480
 8042e80:	58025494 	.word	0x58025494

08042e84 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8042e84:	b580      	push	{r7, lr}
 8042e86:	b086      	sub	sp, #24
 8042e88:	af00      	add	r7, sp, #0
 8042e8a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8042e8c:	f7ff f926 	bl	80420dc <HAL_GetTick>
 8042e90:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8042e92:	687b      	ldr	r3, [r7, #4]
 8042e94:	2b00      	cmp	r3, #0
 8042e96:	d101      	bne.n	8042e9c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8042e98:	2301      	movs	r3, #1
 8042e9a:	e2dc      	b.n	8043456 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8042e9c:	687b      	ldr	r3, [r7, #4]
 8042e9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8042ea2:	b2db      	uxtb	r3, r3
 8042ea4:	2b02      	cmp	r3, #2
 8042ea6:	d008      	beq.n	8042eba <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8042ea8:	687b      	ldr	r3, [r7, #4]
 8042eaa:	2280      	movs	r2, #128	; 0x80
 8042eac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8042eae:	687b      	ldr	r3, [r7, #4]
 8042eb0:	2200      	movs	r2, #0
 8042eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8042eb6:	2301      	movs	r3, #1
 8042eb8:	e2cd      	b.n	8043456 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8042eba:	687b      	ldr	r3, [r7, #4]
 8042ebc:	681b      	ldr	r3, [r3, #0]
 8042ebe:	4a76      	ldr	r2, [pc, #472]	; (8043098 <HAL_DMA_Abort+0x214>)
 8042ec0:	4293      	cmp	r3, r2
 8042ec2:	d04a      	beq.n	8042f5a <HAL_DMA_Abort+0xd6>
 8042ec4:	687b      	ldr	r3, [r7, #4]
 8042ec6:	681b      	ldr	r3, [r3, #0]
 8042ec8:	4a74      	ldr	r2, [pc, #464]	; (804309c <HAL_DMA_Abort+0x218>)
 8042eca:	4293      	cmp	r3, r2
 8042ecc:	d045      	beq.n	8042f5a <HAL_DMA_Abort+0xd6>
 8042ece:	687b      	ldr	r3, [r7, #4]
 8042ed0:	681b      	ldr	r3, [r3, #0]
 8042ed2:	4a73      	ldr	r2, [pc, #460]	; (80430a0 <HAL_DMA_Abort+0x21c>)
 8042ed4:	4293      	cmp	r3, r2
 8042ed6:	d040      	beq.n	8042f5a <HAL_DMA_Abort+0xd6>
 8042ed8:	687b      	ldr	r3, [r7, #4]
 8042eda:	681b      	ldr	r3, [r3, #0]
 8042edc:	4a71      	ldr	r2, [pc, #452]	; (80430a4 <HAL_DMA_Abort+0x220>)
 8042ede:	4293      	cmp	r3, r2
 8042ee0:	d03b      	beq.n	8042f5a <HAL_DMA_Abort+0xd6>
 8042ee2:	687b      	ldr	r3, [r7, #4]
 8042ee4:	681b      	ldr	r3, [r3, #0]
 8042ee6:	4a70      	ldr	r2, [pc, #448]	; (80430a8 <HAL_DMA_Abort+0x224>)
 8042ee8:	4293      	cmp	r3, r2
 8042eea:	d036      	beq.n	8042f5a <HAL_DMA_Abort+0xd6>
 8042eec:	687b      	ldr	r3, [r7, #4]
 8042eee:	681b      	ldr	r3, [r3, #0]
 8042ef0:	4a6e      	ldr	r2, [pc, #440]	; (80430ac <HAL_DMA_Abort+0x228>)
 8042ef2:	4293      	cmp	r3, r2
 8042ef4:	d031      	beq.n	8042f5a <HAL_DMA_Abort+0xd6>
 8042ef6:	687b      	ldr	r3, [r7, #4]
 8042ef8:	681b      	ldr	r3, [r3, #0]
 8042efa:	4a6d      	ldr	r2, [pc, #436]	; (80430b0 <HAL_DMA_Abort+0x22c>)
 8042efc:	4293      	cmp	r3, r2
 8042efe:	d02c      	beq.n	8042f5a <HAL_DMA_Abort+0xd6>
 8042f00:	687b      	ldr	r3, [r7, #4]
 8042f02:	681b      	ldr	r3, [r3, #0]
 8042f04:	4a6b      	ldr	r2, [pc, #428]	; (80430b4 <HAL_DMA_Abort+0x230>)
 8042f06:	4293      	cmp	r3, r2
 8042f08:	d027      	beq.n	8042f5a <HAL_DMA_Abort+0xd6>
 8042f0a:	687b      	ldr	r3, [r7, #4]
 8042f0c:	681b      	ldr	r3, [r3, #0]
 8042f0e:	4a6a      	ldr	r2, [pc, #424]	; (80430b8 <HAL_DMA_Abort+0x234>)
 8042f10:	4293      	cmp	r3, r2
 8042f12:	d022      	beq.n	8042f5a <HAL_DMA_Abort+0xd6>
 8042f14:	687b      	ldr	r3, [r7, #4]
 8042f16:	681b      	ldr	r3, [r3, #0]
 8042f18:	4a68      	ldr	r2, [pc, #416]	; (80430bc <HAL_DMA_Abort+0x238>)
 8042f1a:	4293      	cmp	r3, r2
 8042f1c:	d01d      	beq.n	8042f5a <HAL_DMA_Abort+0xd6>
 8042f1e:	687b      	ldr	r3, [r7, #4]
 8042f20:	681b      	ldr	r3, [r3, #0]
 8042f22:	4a67      	ldr	r2, [pc, #412]	; (80430c0 <HAL_DMA_Abort+0x23c>)
 8042f24:	4293      	cmp	r3, r2
 8042f26:	d018      	beq.n	8042f5a <HAL_DMA_Abort+0xd6>
 8042f28:	687b      	ldr	r3, [r7, #4]
 8042f2a:	681b      	ldr	r3, [r3, #0]
 8042f2c:	4a65      	ldr	r2, [pc, #404]	; (80430c4 <HAL_DMA_Abort+0x240>)
 8042f2e:	4293      	cmp	r3, r2
 8042f30:	d013      	beq.n	8042f5a <HAL_DMA_Abort+0xd6>
 8042f32:	687b      	ldr	r3, [r7, #4]
 8042f34:	681b      	ldr	r3, [r3, #0]
 8042f36:	4a64      	ldr	r2, [pc, #400]	; (80430c8 <HAL_DMA_Abort+0x244>)
 8042f38:	4293      	cmp	r3, r2
 8042f3a:	d00e      	beq.n	8042f5a <HAL_DMA_Abort+0xd6>
 8042f3c:	687b      	ldr	r3, [r7, #4]
 8042f3e:	681b      	ldr	r3, [r3, #0]
 8042f40:	4a62      	ldr	r2, [pc, #392]	; (80430cc <HAL_DMA_Abort+0x248>)
 8042f42:	4293      	cmp	r3, r2
 8042f44:	d009      	beq.n	8042f5a <HAL_DMA_Abort+0xd6>
 8042f46:	687b      	ldr	r3, [r7, #4]
 8042f48:	681b      	ldr	r3, [r3, #0]
 8042f4a:	4a61      	ldr	r2, [pc, #388]	; (80430d0 <HAL_DMA_Abort+0x24c>)
 8042f4c:	4293      	cmp	r3, r2
 8042f4e:	d004      	beq.n	8042f5a <HAL_DMA_Abort+0xd6>
 8042f50:	687b      	ldr	r3, [r7, #4]
 8042f52:	681b      	ldr	r3, [r3, #0]
 8042f54:	4a5f      	ldr	r2, [pc, #380]	; (80430d4 <HAL_DMA_Abort+0x250>)
 8042f56:	4293      	cmp	r3, r2
 8042f58:	d101      	bne.n	8042f5e <HAL_DMA_Abort+0xda>
 8042f5a:	2301      	movs	r3, #1
 8042f5c:	e000      	b.n	8042f60 <HAL_DMA_Abort+0xdc>
 8042f5e:	2300      	movs	r3, #0
 8042f60:	2b00      	cmp	r3, #0
 8042f62:	d013      	beq.n	8042f8c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8042f64:	687b      	ldr	r3, [r7, #4]
 8042f66:	681b      	ldr	r3, [r3, #0]
 8042f68:	681a      	ldr	r2, [r3, #0]
 8042f6a:	687b      	ldr	r3, [r7, #4]
 8042f6c:	681b      	ldr	r3, [r3, #0]
 8042f6e:	f022 021e 	bic.w	r2, r2, #30
 8042f72:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8042f74:	687b      	ldr	r3, [r7, #4]
 8042f76:	681b      	ldr	r3, [r3, #0]
 8042f78:	695a      	ldr	r2, [r3, #20]
 8042f7a:	687b      	ldr	r3, [r7, #4]
 8042f7c:	681b      	ldr	r3, [r3, #0]
 8042f7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8042f82:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8042f84:	687b      	ldr	r3, [r7, #4]
 8042f86:	681b      	ldr	r3, [r3, #0]
 8042f88:	617b      	str	r3, [r7, #20]
 8042f8a:	e00a      	b.n	8042fa2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8042f8c:	687b      	ldr	r3, [r7, #4]
 8042f8e:	681b      	ldr	r3, [r3, #0]
 8042f90:	681a      	ldr	r2, [r3, #0]
 8042f92:	687b      	ldr	r3, [r7, #4]
 8042f94:	681b      	ldr	r3, [r3, #0]
 8042f96:	f022 020e 	bic.w	r2, r2, #14
 8042f9a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8042f9c:	687b      	ldr	r3, [r7, #4]
 8042f9e:	681b      	ldr	r3, [r3, #0]
 8042fa0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8042fa2:	687b      	ldr	r3, [r7, #4]
 8042fa4:	681b      	ldr	r3, [r3, #0]
 8042fa6:	4a3c      	ldr	r2, [pc, #240]	; (8043098 <HAL_DMA_Abort+0x214>)
 8042fa8:	4293      	cmp	r3, r2
 8042faa:	d072      	beq.n	8043092 <HAL_DMA_Abort+0x20e>
 8042fac:	687b      	ldr	r3, [r7, #4]
 8042fae:	681b      	ldr	r3, [r3, #0]
 8042fb0:	4a3a      	ldr	r2, [pc, #232]	; (804309c <HAL_DMA_Abort+0x218>)
 8042fb2:	4293      	cmp	r3, r2
 8042fb4:	d06d      	beq.n	8043092 <HAL_DMA_Abort+0x20e>
 8042fb6:	687b      	ldr	r3, [r7, #4]
 8042fb8:	681b      	ldr	r3, [r3, #0]
 8042fba:	4a39      	ldr	r2, [pc, #228]	; (80430a0 <HAL_DMA_Abort+0x21c>)
 8042fbc:	4293      	cmp	r3, r2
 8042fbe:	d068      	beq.n	8043092 <HAL_DMA_Abort+0x20e>
 8042fc0:	687b      	ldr	r3, [r7, #4]
 8042fc2:	681b      	ldr	r3, [r3, #0]
 8042fc4:	4a37      	ldr	r2, [pc, #220]	; (80430a4 <HAL_DMA_Abort+0x220>)
 8042fc6:	4293      	cmp	r3, r2
 8042fc8:	d063      	beq.n	8043092 <HAL_DMA_Abort+0x20e>
 8042fca:	687b      	ldr	r3, [r7, #4]
 8042fcc:	681b      	ldr	r3, [r3, #0]
 8042fce:	4a36      	ldr	r2, [pc, #216]	; (80430a8 <HAL_DMA_Abort+0x224>)
 8042fd0:	4293      	cmp	r3, r2
 8042fd2:	d05e      	beq.n	8043092 <HAL_DMA_Abort+0x20e>
 8042fd4:	687b      	ldr	r3, [r7, #4]
 8042fd6:	681b      	ldr	r3, [r3, #0]
 8042fd8:	4a34      	ldr	r2, [pc, #208]	; (80430ac <HAL_DMA_Abort+0x228>)
 8042fda:	4293      	cmp	r3, r2
 8042fdc:	d059      	beq.n	8043092 <HAL_DMA_Abort+0x20e>
 8042fde:	687b      	ldr	r3, [r7, #4]
 8042fe0:	681b      	ldr	r3, [r3, #0]
 8042fe2:	4a33      	ldr	r2, [pc, #204]	; (80430b0 <HAL_DMA_Abort+0x22c>)
 8042fe4:	4293      	cmp	r3, r2
 8042fe6:	d054      	beq.n	8043092 <HAL_DMA_Abort+0x20e>
 8042fe8:	687b      	ldr	r3, [r7, #4]
 8042fea:	681b      	ldr	r3, [r3, #0]
 8042fec:	4a31      	ldr	r2, [pc, #196]	; (80430b4 <HAL_DMA_Abort+0x230>)
 8042fee:	4293      	cmp	r3, r2
 8042ff0:	d04f      	beq.n	8043092 <HAL_DMA_Abort+0x20e>
 8042ff2:	687b      	ldr	r3, [r7, #4]
 8042ff4:	681b      	ldr	r3, [r3, #0]
 8042ff6:	4a30      	ldr	r2, [pc, #192]	; (80430b8 <HAL_DMA_Abort+0x234>)
 8042ff8:	4293      	cmp	r3, r2
 8042ffa:	d04a      	beq.n	8043092 <HAL_DMA_Abort+0x20e>
 8042ffc:	687b      	ldr	r3, [r7, #4]
 8042ffe:	681b      	ldr	r3, [r3, #0]
 8043000:	4a2e      	ldr	r2, [pc, #184]	; (80430bc <HAL_DMA_Abort+0x238>)
 8043002:	4293      	cmp	r3, r2
 8043004:	d045      	beq.n	8043092 <HAL_DMA_Abort+0x20e>
 8043006:	687b      	ldr	r3, [r7, #4]
 8043008:	681b      	ldr	r3, [r3, #0]
 804300a:	4a2d      	ldr	r2, [pc, #180]	; (80430c0 <HAL_DMA_Abort+0x23c>)
 804300c:	4293      	cmp	r3, r2
 804300e:	d040      	beq.n	8043092 <HAL_DMA_Abort+0x20e>
 8043010:	687b      	ldr	r3, [r7, #4]
 8043012:	681b      	ldr	r3, [r3, #0]
 8043014:	4a2b      	ldr	r2, [pc, #172]	; (80430c4 <HAL_DMA_Abort+0x240>)
 8043016:	4293      	cmp	r3, r2
 8043018:	d03b      	beq.n	8043092 <HAL_DMA_Abort+0x20e>
 804301a:	687b      	ldr	r3, [r7, #4]
 804301c:	681b      	ldr	r3, [r3, #0]
 804301e:	4a2a      	ldr	r2, [pc, #168]	; (80430c8 <HAL_DMA_Abort+0x244>)
 8043020:	4293      	cmp	r3, r2
 8043022:	d036      	beq.n	8043092 <HAL_DMA_Abort+0x20e>
 8043024:	687b      	ldr	r3, [r7, #4]
 8043026:	681b      	ldr	r3, [r3, #0]
 8043028:	4a28      	ldr	r2, [pc, #160]	; (80430cc <HAL_DMA_Abort+0x248>)
 804302a:	4293      	cmp	r3, r2
 804302c:	d031      	beq.n	8043092 <HAL_DMA_Abort+0x20e>
 804302e:	687b      	ldr	r3, [r7, #4]
 8043030:	681b      	ldr	r3, [r3, #0]
 8043032:	4a27      	ldr	r2, [pc, #156]	; (80430d0 <HAL_DMA_Abort+0x24c>)
 8043034:	4293      	cmp	r3, r2
 8043036:	d02c      	beq.n	8043092 <HAL_DMA_Abort+0x20e>
 8043038:	687b      	ldr	r3, [r7, #4]
 804303a:	681b      	ldr	r3, [r3, #0]
 804303c:	4a25      	ldr	r2, [pc, #148]	; (80430d4 <HAL_DMA_Abort+0x250>)
 804303e:	4293      	cmp	r3, r2
 8043040:	d027      	beq.n	8043092 <HAL_DMA_Abort+0x20e>
 8043042:	687b      	ldr	r3, [r7, #4]
 8043044:	681b      	ldr	r3, [r3, #0]
 8043046:	4a24      	ldr	r2, [pc, #144]	; (80430d8 <HAL_DMA_Abort+0x254>)
 8043048:	4293      	cmp	r3, r2
 804304a:	d022      	beq.n	8043092 <HAL_DMA_Abort+0x20e>
 804304c:	687b      	ldr	r3, [r7, #4]
 804304e:	681b      	ldr	r3, [r3, #0]
 8043050:	4a22      	ldr	r2, [pc, #136]	; (80430dc <HAL_DMA_Abort+0x258>)
 8043052:	4293      	cmp	r3, r2
 8043054:	d01d      	beq.n	8043092 <HAL_DMA_Abort+0x20e>
 8043056:	687b      	ldr	r3, [r7, #4]
 8043058:	681b      	ldr	r3, [r3, #0]
 804305a:	4a21      	ldr	r2, [pc, #132]	; (80430e0 <HAL_DMA_Abort+0x25c>)
 804305c:	4293      	cmp	r3, r2
 804305e:	d018      	beq.n	8043092 <HAL_DMA_Abort+0x20e>
 8043060:	687b      	ldr	r3, [r7, #4]
 8043062:	681b      	ldr	r3, [r3, #0]
 8043064:	4a1f      	ldr	r2, [pc, #124]	; (80430e4 <HAL_DMA_Abort+0x260>)
 8043066:	4293      	cmp	r3, r2
 8043068:	d013      	beq.n	8043092 <HAL_DMA_Abort+0x20e>
 804306a:	687b      	ldr	r3, [r7, #4]
 804306c:	681b      	ldr	r3, [r3, #0]
 804306e:	4a1e      	ldr	r2, [pc, #120]	; (80430e8 <HAL_DMA_Abort+0x264>)
 8043070:	4293      	cmp	r3, r2
 8043072:	d00e      	beq.n	8043092 <HAL_DMA_Abort+0x20e>
 8043074:	687b      	ldr	r3, [r7, #4]
 8043076:	681b      	ldr	r3, [r3, #0]
 8043078:	4a1c      	ldr	r2, [pc, #112]	; (80430ec <HAL_DMA_Abort+0x268>)
 804307a:	4293      	cmp	r3, r2
 804307c:	d009      	beq.n	8043092 <HAL_DMA_Abort+0x20e>
 804307e:	687b      	ldr	r3, [r7, #4]
 8043080:	681b      	ldr	r3, [r3, #0]
 8043082:	4a1b      	ldr	r2, [pc, #108]	; (80430f0 <HAL_DMA_Abort+0x26c>)
 8043084:	4293      	cmp	r3, r2
 8043086:	d004      	beq.n	8043092 <HAL_DMA_Abort+0x20e>
 8043088:	687b      	ldr	r3, [r7, #4]
 804308a:	681b      	ldr	r3, [r3, #0]
 804308c:	4a19      	ldr	r2, [pc, #100]	; (80430f4 <HAL_DMA_Abort+0x270>)
 804308e:	4293      	cmp	r3, r2
 8043090:	d132      	bne.n	80430f8 <HAL_DMA_Abort+0x274>
 8043092:	2301      	movs	r3, #1
 8043094:	e031      	b.n	80430fa <HAL_DMA_Abort+0x276>
 8043096:	bf00      	nop
 8043098:	40020010 	.word	0x40020010
 804309c:	40020028 	.word	0x40020028
 80430a0:	40020040 	.word	0x40020040
 80430a4:	40020058 	.word	0x40020058
 80430a8:	40020070 	.word	0x40020070
 80430ac:	40020088 	.word	0x40020088
 80430b0:	400200a0 	.word	0x400200a0
 80430b4:	400200b8 	.word	0x400200b8
 80430b8:	40020410 	.word	0x40020410
 80430bc:	40020428 	.word	0x40020428
 80430c0:	40020440 	.word	0x40020440
 80430c4:	40020458 	.word	0x40020458
 80430c8:	40020470 	.word	0x40020470
 80430cc:	40020488 	.word	0x40020488
 80430d0:	400204a0 	.word	0x400204a0
 80430d4:	400204b8 	.word	0x400204b8
 80430d8:	58025408 	.word	0x58025408
 80430dc:	5802541c 	.word	0x5802541c
 80430e0:	58025430 	.word	0x58025430
 80430e4:	58025444 	.word	0x58025444
 80430e8:	58025458 	.word	0x58025458
 80430ec:	5802546c 	.word	0x5802546c
 80430f0:	58025480 	.word	0x58025480
 80430f4:	58025494 	.word	0x58025494
 80430f8:	2300      	movs	r3, #0
 80430fa:	2b00      	cmp	r3, #0
 80430fc:	d007      	beq.n	804310e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80430fe:	687b      	ldr	r3, [r7, #4]
 8043100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8043102:	681a      	ldr	r2, [r3, #0]
 8043104:	687b      	ldr	r3, [r7, #4]
 8043106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8043108:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 804310c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 804310e:	687b      	ldr	r3, [r7, #4]
 8043110:	681b      	ldr	r3, [r3, #0]
 8043112:	4a6d      	ldr	r2, [pc, #436]	; (80432c8 <HAL_DMA_Abort+0x444>)
 8043114:	4293      	cmp	r3, r2
 8043116:	d04a      	beq.n	80431ae <HAL_DMA_Abort+0x32a>
 8043118:	687b      	ldr	r3, [r7, #4]
 804311a:	681b      	ldr	r3, [r3, #0]
 804311c:	4a6b      	ldr	r2, [pc, #428]	; (80432cc <HAL_DMA_Abort+0x448>)
 804311e:	4293      	cmp	r3, r2
 8043120:	d045      	beq.n	80431ae <HAL_DMA_Abort+0x32a>
 8043122:	687b      	ldr	r3, [r7, #4]
 8043124:	681b      	ldr	r3, [r3, #0]
 8043126:	4a6a      	ldr	r2, [pc, #424]	; (80432d0 <HAL_DMA_Abort+0x44c>)
 8043128:	4293      	cmp	r3, r2
 804312a:	d040      	beq.n	80431ae <HAL_DMA_Abort+0x32a>
 804312c:	687b      	ldr	r3, [r7, #4]
 804312e:	681b      	ldr	r3, [r3, #0]
 8043130:	4a68      	ldr	r2, [pc, #416]	; (80432d4 <HAL_DMA_Abort+0x450>)
 8043132:	4293      	cmp	r3, r2
 8043134:	d03b      	beq.n	80431ae <HAL_DMA_Abort+0x32a>
 8043136:	687b      	ldr	r3, [r7, #4]
 8043138:	681b      	ldr	r3, [r3, #0]
 804313a:	4a67      	ldr	r2, [pc, #412]	; (80432d8 <HAL_DMA_Abort+0x454>)
 804313c:	4293      	cmp	r3, r2
 804313e:	d036      	beq.n	80431ae <HAL_DMA_Abort+0x32a>
 8043140:	687b      	ldr	r3, [r7, #4]
 8043142:	681b      	ldr	r3, [r3, #0]
 8043144:	4a65      	ldr	r2, [pc, #404]	; (80432dc <HAL_DMA_Abort+0x458>)
 8043146:	4293      	cmp	r3, r2
 8043148:	d031      	beq.n	80431ae <HAL_DMA_Abort+0x32a>
 804314a:	687b      	ldr	r3, [r7, #4]
 804314c:	681b      	ldr	r3, [r3, #0]
 804314e:	4a64      	ldr	r2, [pc, #400]	; (80432e0 <HAL_DMA_Abort+0x45c>)
 8043150:	4293      	cmp	r3, r2
 8043152:	d02c      	beq.n	80431ae <HAL_DMA_Abort+0x32a>
 8043154:	687b      	ldr	r3, [r7, #4]
 8043156:	681b      	ldr	r3, [r3, #0]
 8043158:	4a62      	ldr	r2, [pc, #392]	; (80432e4 <HAL_DMA_Abort+0x460>)
 804315a:	4293      	cmp	r3, r2
 804315c:	d027      	beq.n	80431ae <HAL_DMA_Abort+0x32a>
 804315e:	687b      	ldr	r3, [r7, #4]
 8043160:	681b      	ldr	r3, [r3, #0]
 8043162:	4a61      	ldr	r2, [pc, #388]	; (80432e8 <HAL_DMA_Abort+0x464>)
 8043164:	4293      	cmp	r3, r2
 8043166:	d022      	beq.n	80431ae <HAL_DMA_Abort+0x32a>
 8043168:	687b      	ldr	r3, [r7, #4]
 804316a:	681b      	ldr	r3, [r3, #0]
 804316c:	4a5f      	ldr	r2, [pc, #380]	; (80432ec <HAL_DMA_Abort+0x468>)
 804316e:	4293      	cmp	r3, r2
 8043170:	d01d      	beq.n	80431ae <HAL_DMA_Abort+0x32a>
 8043172:	687b      	ldr	r3, [r7, #4]
 8043174:	681b      	ldr	r3, [r3, #0]
 8043176:	4a5e      	ldr	r2, [pc, #376]	; (80432f0 <HAL_DMA_Abort+0x46c>)
 8043178:	4293      	cmp	r3, r2
 804317a:	d018      	beq.n	80431ae <HAL_DMA_Abort+0x32a>
 804317c:	687b      	ldr	r3, [r7, #4]
 804317e:	681b      	ldr	r3, [r3, #0]
 8043180:	4a5c      	ldr	r2, [pc, #368]	; (80432f4 <HAL_DMA_Abort+0x470>)
 8043182:	4293      	cmp	r3, r2
 8043184:	d013      	beq.n	80431ae <HAL_DMA_Abort+0x32a>
 8043186:	687b      	ldr	r3, [r7, #4]
 8043188:	681b      	ldr	r3, [r3, #0]
 804318a:	4a5b      	ldr	r2, [pc, #364]	; (80432f8 <HAL_DMA_Abort+0x474>)
 804318c:	4293      	cmp	r3, r2
 804318e:	d00e      	beq.n	80431ae <HAL_DMA_Abort+0x32a>
 8043190:	687b      	ldr	r3, [r7, #4]
 8043192:	681b      	ldr	r3, [r3, #0]
 8043194:	4a59      	ldr	r2, [pc, #356]	; (80432fc <HAL_DMA_Abort+0x478>)
 8043196:	4293      	cmp	r3, r2
 8043198:	d009      	beq.n	80431ae <HAL_DMA_Abort+0x32a>
 804319a:	687b      	ldr	r3, [r7, #4]
 804319c:	681b      	ldr	r3, [r3, #0]
 804319e:	4a58      	ldr	r2, [pc, #352]	; (8043300 <HAL_DMA_Abort+0x47c>)
 80431a0:	4293      	cmp	r3, r2
 80431a2:	d004      	beq.n	80431ae <HAL_DMA_Abort+0x32a>
 80431a4:	687b      	ldr	r3, [r7, #4]
 80431a6:	681b      	ldr	r3, [r3, #0]
 80431a8:	4a56      	ldr	r2, [pc, #344]	; (8043304 <HAL_DMA_Abort+0x480>)
 80431aa:	4293      	cmp	r3, r2
 80431ac:	d108      	bne.n	80431c0 <HAL_DMA_Abort+0x33c>
 80431ae:	687b      	ldr	r3, [r7, #4]
 80431b0:	681b      	ldr	r3, [r3, #0]
 80431b2:	681a      	ldr	r2, [r3, #0]
 80431b4:	687b      	ldr	r3, [r7, #4]
 80431b6:	681b      	ldr	r3, [r3, #0]
 80431b8:	f022 0201 	bic.w	r2, r2, #1
 80431bc:	601a      	str	r2, [r3, #0]
 80431be:	e007      	b.n	80431d0 <HAL_DMA_Abort+0x34c>
 80431c0:	687b      	ldr	r3, [r7, #4]
 80431c2:	681b      	ldr	r3, [r3, #0]
 80431c4:	681a      	ldr	r2, [r3, #0]
 80431c6:	687b      	ldr	r3, [r7, #4]
 80431c8:	681b      	ldr	r3, [r3, #0]
 80431ca:	f022 0201 	bic.w	r2, r2, #1
 80431ce:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80431d0:	e013      	b.n	80431fa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80431d2:	f7fe ff83 	bl	80420dc <HAL_GetTick>
 80431d6:	4602      	mov	r2, r0
 80431d8:	693b      	ldr	r3, [r7, #16]
 80431da:	1ad3      	subs	r3, r2, r3
 80431dc:	2b05      	cmp	r3, #5
 80431de:	d90c      	bls.n	80431fa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80431e0:	687b      	ldr	r3, [r7, #4]
 80431e2:	2220      	movs	r2, #32
 80431e4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80431e6:	687b      	ldr	r3, [r7, #4]
 80431e8:	2203      	movs	r2, #3
 80431ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80431ee:	687b      	ldr	r3, [r7, #4]
 80431f0:	2200      	movs	r2, #0
 80431f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80431f6:	2301      	movs	r3, #1
 80431f8:	e12d      	b.n	8043456 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80431fa:	697b      	ldr	r3, [r7, #20]
 80431fc:	681b      	ldr	r3, [r3, #0]
 80431fe:	f003 0301 	and.w	r3, r3, #1
 8043202:	2b00      	cmp	r3, #0
 8043204:	d1e5      	bne.n	80431d2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8043206:	687b      	ldr	r3, [r7, #4]
 8043208:	681b      	ldr	r3, [r3, #0]
 804320a:	4a2f      	ldr	r2, [pc, #188]	; (80432c8 <HAL_DMA_Abort+0x444>)
 804320c:	4293      	cmp	r3, r2
 804320e:	d04a      	beq.n	80432a6 <HAL_DMA_Abort+0x422>
 8043210:	687b      	ldr	r3, [r7, #4]
 8043212:	681b      	ldr	r3, [r3, #0]
 8043214:	4a2d      	ldr	r2, [pc, #180]	; (80432cc <HAL_DMA_Abort+0x448>)
 8043216:	4293      	cmp	r3, r2
 8043218:	d045      	beq.n	80432a6 <HAL_DMA_Abort+0x422>
 804321a:	687b      	ldr	r3, [r7, #4]
 804321c:	681b      	ldr	r3, [r3, #0]
 804321e:	4a2c      	ldr	r2, [pc, #176]	; (80432d0 <HAL_DMA_Abort+0x44c>)
 8043220:	4293      	cmp	r3, r2
 8043222:	d040      	beq.n	80432a6 <HAL_DMA_Abort+0x422>
 8043224:	687b      	ldr	r3, [r7, #4]
 8043226:	681b      	ldr	r3, [r3, #0]
 8043228:	4a2a      	ldr	r2, [pc, #168]	; (80432d4 <HAL_DMA_Abort+0x450>)
 804322a:	4293      	cmp	r3, r2
 804322c:	d03b      	beq.n	80432a6 <HAL_DMA_Abort+0x422>
 804322e:	687b      	ldr	r3, [r7, #4]
 8043230:	681b      	ldr	r3, [r3, #0]
 8043232:	4a29      	ldr	r2, [pc, #164]	; (80432d8 <HAL_DMA_Abort+0x454>)
 8043234:	4293      	cmp	r3, r2
 8043236:	d036      	beq.n	80432a6 <HAL_DMA_Abort+0x422>
 8043238:	687b      	ldr	r3, [r7, #4]
 804323a:	681b      	ldr	r3, [r3, #0]
 804323c:	4a27      	ldr	r2, [pc, #156]	; (80432dc <HAL_DMA_Abort+0x458>)
 804323e:	4293      	cmp	r3, r2
 8043240:	d031      	beq.n	80432a6 <HAL_DMA_Abort+0x422>
 8043242:	687b      	ldr	r3, [r7, #4]
 8043244:	681b      	ldr	r3, [r3, #0]
 8043246:	4a26      	ldr	r2, [pc, #152]	; (80432e0 <HAL_DMA_Abort+0x45c>)
 8043248:	4293      	cmp	r3, r2
 804324a:	d02c      	beq.n	80432a6 <HAL_DMA_Abort+0x422>
 804324c:	687b      	ldr	r3, [r7, #4]
 804324e:	681b      	ldr	r3, [r3, #0]
 8043250:	4a24      	ldr	r2, [pc, #144]	; (80432e4 <HAL_DMA_Abort+0x460>)
 8043252:	4293      	cmp	r3, r2
 8043254:	d027      	beq.n	80432a6 <HAL_DMA_Abort+0x422>
 8043256:	687b      	ldr	r3, [r7, #4]
 8043258:	681b      	ldr	r3, [r3, #0]
 804325a:	4a23      	ldr	r2, [pc, #140]	; (80432e8 <HAL_DMA_Abort+0x464>)
 804325c:	4293      	cmp	r3, r2
 804325e:	d022      	beq.n	80432a6 <HAL_DMA_Abort+0x422>
 8043260:	687b      	ldr	r3, [r7, #4]
 8043262:	681b      	ldr	r3, [r3, #0]
 8043264:	4a21      	ldr	r2, [pc, #132]	; (80432ec <HAL_DMA_Abort+0x468>)
 8043266:	4293      	cmp	r3, r2
 8043268:	d01d      	beq.n	80432a6 <HAL_DMA_Abort+0x422>
 804326a:	687b      	ldr	r3, [r7, #4]
 804326c:	681b      	ldr	r3, [r3, #0]
 804326e:	4a20      	ldr	r2, [pc, #128]	; (80432f0 <HAL_DMA_Abort+0x46c>)
 8043270:	4293      	cmp	r3, r2
 8043272:	d018      	beq.n	80432a6 <HAL_DMA_Abort+0x422>
 8043274:	687b      	ldr	r3, [r7, #4]
 8043276:	681b      	ldr	r3, [r3, #0]
 8043278:	4a1e      	ldr	r2, [pc, #120]	; (80432f4 <HAL_DMA_Abort+0x470>)
 804327a:	4293      	cmp	r3, r2
 804327c:	d013      	beq.n	80432a6 <HAL_DMA_Abort+0x422>
 804327e:	687b      	ldr	r3, [r7, #4]
 8043280:	681b      	ldr	r3, [r3, #0]
 8043282:	4a1d      	ldr	r2, [pc, #116]	; (80432f8 <HAL_DMA_Abort+0x474>)
 8043284:	4293      	cmp	r3, r2
 8043286:	d00e      	beq.n	80432a6 <HAL_DMA_Abort+0x422>
 8043288:	687b      	ldr	r3, [r7, #4]
 804328a:	681b      	ldr	r3, [r3, #0]
 804328c:	4a1b      	ldr	r2, [pc, #108]	; (80432fc <HAL_DMA_Abort+0x478>)
 804328e:	4293      	cmp	r3, r2
 8043290:	d009      	beq.n	80432a6 <HAL_DMA_Abort+0x422>
 8043292:	687b      	ldr	r3, [r7, #4]
 8043294:	681b      	ldr	r3, [r3, #0]
 8043296:	4a1a      	ldr	r2, [pc, #104]	; (8043300 <HAL_DMA_Abort+0x47c>)
 8043298:	4293      	cmp	r3, r2
 804329a:	d004      	beq.n	80432a6 <HAL_DMA_Abort+0x422>
 804329c:	687b      	ldr	r3, [r7, #4]
 804329e:	681b      	ldr	r3, [r3, #0]
 80432a0:	4a18      	ldr	r2, [pc, #96]	; (8043304 <HAL_DMA_Abort+0x480>)
 80432a2:	4293      	cmp	r3, r2
 80432a4:	d101      	bne.n	80432aa <HAL_DMA_Abort+0x426>
 80432a6:	2301      	movs	r3, #1
 80432a8:	e000      	b.n	80432ac <HAL_DMA_Abort+0x428>
 80432aa:	2300      	movs	r3, #0
 80432ac:	2b00      	cmp	r3, #0
 80432ae:	d02b      	beq.n	8043308 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80432b0:	687b      	ldr	r3, [r7, #4]
 80432b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80432b4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80432b6:	687b      	ldr	r3, [r7, #4]
 80432b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80432ba:	f003 031f 	and.w	r3, r3, #31
 80432be:	223f      	movs	r2, #63	; 0x3f
 80432c0:	409a      	lsls	r2, r3
 80432c2:	68bb      	ldr	r3, [r7, #8]
 80432c4:	609a      	str	r2, [r3, #8]
 80432c6:	e02a      	b.n	804331e <HAL_DMA_Abort+0x49a>
 80432c8:	40020010 	.word	0x40020010
 80432cc:	40020028 	.word	0x40020028
 80432d0:	40020040 	.word	0x40020040
 80432d4:	40020058 	.word	0x40020058
 80432d8:	40020070 	.word	0x40020070
 80432dc:	40020088 	.word	0x40020088
 80432e0:	400200a0 	.word	0x400200a0
 80432e4:	400200b8 	.word	0x400200b8
 80432e8:	40020410 	.word	0x40020410
 80432ec:	40020428 	.word	0x40020428
 80432f0:	40020440 	.word	0x40020440
 80432f4:	40020458 	.word	0x40020458
 80432f8:	40020470 	.word	0x40020470
 80432fc:	40020488 	.word	0x40020488
 8043300:	400204a0 	.word	0x400204a0
 8043304:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8043308:	687b      	ldr	r3, [r7, #4]
 804330a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804330c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 804330e:	687b      	ldr	r3, [r7, #4]
 8043310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8043312:	f003 031f 	and.w	r3, r3, #31
 8043316:	2201      	movs	r2, #1
 8043318:	409a      	lsls	r2, r3
 804331a:	68fb      	ldr	r3, [r7, #12]
 804331c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 804331e:	687b      	ldr	r3, [r7, #4]
 8043320:	681b      	ldr	r3, [r3, #0]
 8043322:	4a4f      	ldr	r2, [pc, #316]	; (8043460 <HAL_DMA_Abort+0x5dc>)
 8043324:	4293      	cmp	r3, r2
 8043326:	d072      	beq.n	804340e <HAL_DMA_Abort+0x58a>
 8043328:	687b      	ldr	r3, [r7, #4]
 804332a:	681b      	ldr	r3, [r3, #0]
 804332c:	4a4d      	ldr	r2, [pc, #308]	; (8043464 <HAL_DMA_Abort+0x5e0>)
 804332e:	4293      	cmp	r3, r2
 8043330:	d06d      	beq.n	804340e <HAL_DMA_Abort+0x58a>
 8043332:	687b      	ldr	r3, [r7, #4]
 8043334:	681b      	ldr	r3, [r3, #0]
 8043336:	4a4c      	ldr	r2, [pc, #304]	; (8043468 <HAL_DMA_Abort+0x5e4>)
 8043338:	4293      	cmp	r3, r2
 804333a:	d068      	beq.n	804340e <HAL_DMA_Abort+0x58a>
 804333c:	687b      	ldr	r3, [r7, #4]
 804333e:	681b      	ldr	r3, [r3, #0]
 8043340:	4a4a      	ldr	r2, [pc, #296]	; (804346c <HAL_DMA_Abort+0x5e8>)
 8043342:	4293      	cmp	r3, r2
 8043344:	d063      	beq.n	804340e <HAL_DMA_Abort+0x58a>
 8043346:	687b      	ldr	r3, [r7, #4]
 8043348:	681b      	ldr	r3, [r3, #0]
 804334a:	4a49      	ldr	r2, [pc, #292]	; (8043470 <HAL_DMA_Abort+0x5ec>)
 804334c:	4293      	cmp	r3, r2
 804334e:	d05e      	beq.n	804340e <HAL_DMA_Abort+0x58a>
 8043350:	687b      	ldr	r3, [r7, #4]
 8043352:	681b      	ldr	r3, [r3, #0]
 8043354:	4a47      	ldr	r2, [pc, #284]	; (8043474 <HAL_DMA_Abort+0x5f0>)
 8043356:	4293      	cmp	r3, r2
 8043358:	d059      	beq.n	804340e <HAL_DMA_Abort+0x58a>
 804335a:	687b      	ldr	r3, [r7, #4]
 804335c:	681b      	ldr	r3, [r3, #0]
 804335e:	4a46      	ldr	r2, [pc, #280]	; (8043478 <HAL_DMA_Abort+0x5f4>)
 8043360:	4293      	cmp	r3, r2
 8043362:	d054      	beq.n	804340e <HAL_DMA_Abort+0x58a>
 8043364:	687b      	ldr	r3, [r7, #4]
 8043366:	681b      	ldr	r3, [r3, #0]
 8043368:	4a44      	ldr	r2, [pc, #272]	; (804347c <HAL_DMA_Abort+0x5f8>)
 804336a:	4293      	cmp	r3, r2
 804336c:	d04f      	beq.n	804340e <HAL_DMA_Abort+0x58a>
 804336e:	687b      	ldr	r3, [r7, #4]
 8043370:	681b      	ldr	r3, [r3, #0]
 8043372:	4a43      	ldr	r2, [pc, #268]	; (8043480 <HAL_DMA_Abort+0x5fc>)
 8043374:	4293      	cmp	r3, r2
 8043376:	d04a      	beq.n	804340e <HAL_DMA_Abort+0x58a>
 8043378:	687b      	ldr	r3, [r7, #4]
 804337a:	681b      	ldr	r3, [r3, #0]
 804337c:	4a41      	ldr	r2, [pc, #260]	; (8043484 <HAL_DMA_Abort+0x600>)
 804337e:	4293      	cmp	r3, r2
 8043380:	d045      	beq.n	804340e <HAL_DMA_Abort+0x58a>
 8043382:	687b      	ldr	r3, [r7, #4]
 8043384:	681b      	ldr	r3, [r3, #0]
 8043386:	4a40      	ldr	r2, [pc, #256]	; (8043488 <HAL_DMA_Abort+0x604>)
 8043388:	4293      	cmp	r3, r2
 804338a:	d040      	beq.n	804340e <HAL_DMA_Abort+0x58a>
 804338c:	687b      	ldr	r3, [r7, #4]
 804338e:	681b      	ldr	r3, [r3, #0]
 8043390:	4a3e      	ldr	r2, [pc, #248]	; (804348c <HAL_DMA_Abort+0x608>)
 8043392:	4293      	cmp	r3, r2
 8043394:	d03b      	beq.n	804340e <HAL_DMA_Abort+0x58a>
 8043396:	687b      	ldr	r3, [r7, #4]
 8043398:	681b      	ldr	r3, [r3, #0]
 804339a:	4a3d      	ldr	r2, [pc, #244]	; (8043490 <HAL_DMA_Abort+0x60c>)
 804339c:	4293      	cmp	r3, r2
 804339e:	d036      	beq.n	804340e <HAL_DMA_Abort+0x58a>
 80433a0:	687b      	ldr	r3, [r7, #4]
 80433a2:	681b      	ldr	r3, [r3, #0]
 80433a4:	4a3b      	ldr	r2, [pc, #236]	; (8043494 <HAL_DMA_Abort+0x610>)
 80433a6:	4293      	cmp	r3, r2
 80433a8:	d031      	beq.n	804340e <HAL_DMA_Abort+0x58a>
 80433aa:	687b      	ldr	r3, [r7, #4]
 80433ac:	681b      	ldr	r3, [r3, #0]
 80433ae:	4a3a      	ldr	r2, [pc, #232]	; (8043498 <HAL_DMA_Abort+0x614>)
 80433b0:	4293      	cmp	r3, r2
 80433b2:	d02c      	beq.n	804340e <HAL_DMA_Abort+0x58a>
 80433b4:	687b      	ldr	r3, [r7, #4]
 80433b6:	681b      	ldr	r3, [r3, #0]
 80433b8:	4a38      	ldr	r2, [pc, #224]	; (804349c <HAL_DMA_Abort+0x618>)
 80433ba:	4293      	cmp	r3, r2
 80433bc:	d027      	beq.n	804340e <HAL_DMA_Abort+0x58a>
 80433be:	687b      	ldr	r3, [r7, #4]
 80433c0:	681b      	ldr	r3, [r3, #0]
 80433c2:	4a37      	ldr	r2, [pc, #220]	; (80434a0 <HAL_DMA_Abort+0x61c>)
 80433c4:	4293      	cmp	r3, r2
 80433c6:	d022      	beq.n	804340e <HAL_DMA_Abort+0x58a>
 80433c8:	687b      	ldr	r3, [r7, #4]
 80433ca:	681b      	ldr	r3, [r3, #0]
 80433cc:	4a35      	ldr	r2, [pc, #212]	; (80434a4 <HAL_DMA_Abort+0x620>)
 80433ce:	4293      	cmp	r3, r2
 80433d0:	d01d      	beq.n	804340e <HAL_DMA_Abort+0x58a>
 80433d2:	687b      	ldr	r3, [r7, #4]
 80433d4:	681b      	ldr	r3, [r3, #0]
 80433d6:	4a34      	ldr	r2, [pc, #208]	; (80434a8 <HAL_DMA_Abort+0x624>)
 80433d8:	4293      	cmp	r3, r2
 80433da:	d018      	beq.n	804340e <HAL_DMA_Abort+0x58a>
 80433dc:	687b      	ldr	r3, [r7, #4]
 80433de:	681b      	ldr	r3, [r3, #0]
 80433e0:	4a32      	ldr	r2, [pc, #200]	; (80434ac <HAL_DMA_Abort+0x628>)
 80433e2:	4293      	cmp	r3, r2
 80433e4:	d013      	beq.n	804340e <HAL_DMA_Abort+0x58a>
 80433e6:	687b      	ldr	r3, [r7, #4]
 80433e8:	681b      	ldr	r3, [r3, #0]
 80433ea:	4a31      	ldr	r2, [pc, #196]	; (80434b0 <HAL_DMA_Abort+0x62c>)
 80433ec:	4293      	cmp	r3, r2
 80433ee:	d00e      	beq.n	804340e <HAL_DMA_Abort+0x58a>
 80433f0:	687b      	ldr	r3, [r7, #4]
 80433f2:	681b      	ldr	r3, [r3, #0]
 80433f4:	4a2f      	ldr	r2, [pc, #188]	; (80434b4 <HAL_DMA_Abort+0x630>)
 80433f6:	4293      	cmp	r3, r2
 80433f8:	d009      	beq.n	804340e <HAL_DMA_Abort+0x58a>
 80433fa:	687b      	ldr	r3, [r7, #4]
 80433fc:	681b      	ldr	r3, [r3, #0]
 80433fe:	4a2e      	ldr	r2, [pc, #184]	; (80434b8 <HAL_DMA_Abort+0x634>)
 8043400:	4293      	cmp	r3, r2
 8043402:	d004      	beq.n	804340e <HAL_DMA_Abort+0x58a>
 8043404:	687b      	ldr	r3, [r7, #4]
 8043406:	681b      	ldr	r3, [r3, #0]
 8043408:	4a2c      	ldr	r2, [pc, #176]	; (80434bc <HAL_DMA_Abort+0x638>)
 804340a:	4293      	cmp	r3, r2
 804340c:	d101      	bne.n	8043412 <HAL_DMA_Abort+0x58e>
 804340e:	2301      	movs	r3, #1
 8043410:	e000      	b.n	8043414 <HAL_DMA_Abort+0x590>
 8043412:	2300      	movs	r3, #0
 8043414:	2b00      	cmp	r3, #0
 8043416:	d015      	beq.n	8043444 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8043418:	687b      	ldr	r3, [r7, #4]
 804341a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 804341c:	687a      	ldr	r2, [r7, #4]
 804341e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8043420:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8043422:	687b      	ldr	r3, [r7, #4]
 8043424:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8043426:	2b00      	cmp	r3, #0
 8043428:	d00c      	beq.n	8043444 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 804342a:	687b      	ldr	r3, [r7, #4]
 804342c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804342e:	681a      	ldr	r2, [r3, #0]
 8043430:	687b      	ldr	r3, [r7, #4]
 8043432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8043434:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8043438:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 804343a:	687b      	ldr	r3, [r7, #4]
 804343c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804343e:	687a      	ldr	r2, [r7, #4]
 8043440:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8043442:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8043444:	687b      	ldr	r3, [r7, #4]
 8043446:	2201      	movs	r2, #1
 8043448:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 804344c:	687b      	ldr	r3, [r7, #4]
 804344e:	2200      	movs	r2, #0
 8043450:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8043454:	2300      	movs	r3, #0
}
 8043456:	4618      	mov	r0, r3
 8043458:	3718      	adds	r7, #24
 804345a:	46bd      	mov	sp, r7
 804345c:	bd80      	pop	{r7, pc}
 804345e:	bf00      	nop
 8043460:	40020010 	.word	0x40020010
 8043464:	40020028 	.word	0x40020028
 8043468:	40020040 	.word	0x40020040
 804346c:	40020058 	.word	0x40020058
 8043470:	40020070 	.word	0x40020070
 8043474:	40020088 	.word	0x40020088
 8043478:	400200a0 	.word	0x400200a0
 804347c:	400200b8 	.word	0x400200b8
 8043480:	40020410 	.word	0x40020410
 8043484:	40020428 	.word	0x40020428
 8043488:	40020440 	.word	0x40020440
 804348c:	40020458 	.word	0x40020458
 8043490:	40020470 	.word	0x40020470
 8043494:	40020488 	.word	0x40020488
 8043498:	400204a0 	.word	0x400204a0
 804349c:	400204b8 	.word	0x400204b8
 80434a0:	58025408 	.word	0x58025408
 80434a4:	5802541c 	.word	0x5802541c
 80434a8:	58025430 	.word	0x58025430
 80434ac:	58025444 	.word	0x58025444
 80434b0:	58025458 	.word	0x58025458
 80434b4:	5802546c 	.word	0x5802546c
 80434b8:	58025480 	.word	0x58025480
 80434bc:	58025494 	.word	0x58025494

080434c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80434c0:	b580      	push	{r7, lr}
 80434c2:	b084      	sub	sp, #16
 80434c4:	af00      	add	r7, sp, #0
 80434c6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80434c8:	687b      	ldr	r3, [r7, #4]
 80434ca:	2b00      	cmp	r3, #0
 80434cc:	d101      	bne.n	80434d2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80434ce:	2301      	movs	r3, #1
 80434d0:	e237      	b.n	8043942 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80434d2:	687b      	ldr	r3, [r7, #4]
 80434d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80434d8:	b2db      	uxtb	r3, r3
 80434da:	2b02      	cmp	r3, #2
 80434dc:	d004      	beq.n	80434e8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80434de:	687b      	ldr	r3, [r7, #4]
 80434e0:	2280      	movs	r2, #128	; 0x80
 80434e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80434e4:	2301      	movs	r3, #1
 80434e6:	e22c      	b.n	8043942 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80434e8:	687b      	ldr	r3, [r7, #4]
 80434ea:	681b      	ldr	r3, [r3, #0]
 80434ec:	4a5c      	ldr	r2, [pc, #368]	; (8043660 <HAL_DMA_Abort_IT+0x1a0>)
 80434ee:	4293      	cmp	r3, r2
 80434f0:	d04a      	beq.n	8043588 <HAL_DMA_Abort_IT+0xc8>
 80434f2:	687b      	ldr	r3, [r7, #4]
 80434f4:	681b      	ldr	r3, [r3, #0]
 80434f6:	4a5b      	ldr	r2, [pc, #364]	; (8043664 <HAL_DMA_Abort_IT+0x1a4>)
 80434f8:	4293      	cmp	r3, r2
 80434fa:	d045      	beq.n	8043588 <HAL_DMA_Abort_IT+0xc8>
 80434fc:	687b      	ldr	r3, [r7, #4]
 80434fe:	681b      	ldr	r3, [r3, #0]
 8043500:	4a59      	ldr	r2, [pc, #356]	; (8043668 <HAL_DMA_Abort_IT+0x1a8>)
 8043502:	4293      	cmp	r3, r2
 8043504:	d040      	beq.n	8043588 <HAL_DMA_Abort_IT+0xc8>
 8043506:	687b      	ldr	r3, [r7, #4]
 8043508:	681b      	ldr	r3, [r3, #0]
 804350a:	4a58      	ldr	r2, [pc, #352]	; (804366c <HAL_DMA_Abort_IT+0x1ac>)
 804350c:	4293      	cmp	r3, r2
 804350e:	d03b      	beq.n	8043588 <HAL_DMA_Abort_IT+0xc8>
 8043510:	687b      	ldr	r3, [r7, #4]
 8043512:	681b      	ldr	r3, [r3, #0]
 8043514:	4a56      	ldr	r2, [pc, #344]	; (8043670 <HAL_DMA_Abort_IT+0x1b0>)
 8043516:	4293      	cmp	r3, r2
 8043518:	d036      	beq.n	8043588 <HAL_DMA_Abort_IT+0xc8>
 804351a:	687b      	ldr	r3, [r7, #4]
 804351c:	681b      	ldr	r3, [r3, #0]
 804351e:	4a55      	ldr	r2, [pc, #340]	; (8043674 <HAL_DMA_Abort_IT+0x1b4>)
 8043520:	4293      	cmp	r3, r2
 8043522:	d031      	beq.n	8043588 <HAL_DMA_Abort_IT+0xc8>
 8043524:	687b      	ldr	r3, [r7, #4]
 8043526:	681b      	ldr	r3, [r3, #0]
 8043528:	4a53      	ldr	r2, [pc, #332]	; (8043678 <HAL_DMA_Abort_IT+0x1b8>)
 804352a:	4293      	cmp	r3, r2
 804352c:	d02c      	beq.n	8043588 <HAL_DMA_Abort_IT+0xc8>
 804352e:	687b      	ldr	r3, [r7, #4]
 8043530:	681b      	ldr	r3, [r3, #0]
 8043532:	4a52      	ldr	r2, [pc, #328]	; (804367c <HAL_DMA_Abort_IT+0x1bc>)
 8043534:	4293      	cmp	r3, r2
 8043536:	d027      	beq.n	8043588 <HAL_DMA_Abort_IT+0xc8>
 8043538:	687b      	ldr	r3, [r7, #4]
 804353a:	681b      	ldr	r3, [r3, #0]
 804353c:	4a50      	ldr	r2, [pc, #320]	; (8043680 <HAL_DMA_Abort_IT+0x1c0>)
 804353e:	4293      	cmp	r3, r2
 8043540:	d022      	beq.n	8043588 <HAL_DMA_Abort_IT+0xc8>
 8043542:	687b      	ldr	r3, [r7, #4]
 8043544:	681b      	ldr	r3, [r3, #0]
 8043546:	4a4f      	ldr	r2, [pc, #316]	; (8043684 <HAL_DMA_Abort_IT+0x1c4>)
 8043548:	4293      	cmp	r3, r2
 804354a:	d01d      	beq.n	8043588 <HAL_DMA_Abort_IT+0xc8>
 804354c:	687b      	ldr	r3, [r7, #4]
 804354e:	681b      	ldr	r3, [r3, #0]
 8043550:	4a4d      	ldr	r2, [pc, #308]	; (8043688 <HAL_DMA_Abort_IT+0x1c8>)
 8043552:	4293      	cmp	r3, r2
 8043554:	d018      	beq.n	8043588 <HAL_DMA_Abort_IT+0xc8>
 8043556:	687b      	ldr	r3, [r7, #4]
 8043558:	681b      	ldr	r3, [r3, #0]
 804355a:	4a4c      	ldr	r2, [pc, #304]	; (804368c <HAL_DMA_Abort_IT+0x1cc>)
 804355c:	4293      	cmp	r3, r2
 804355e:	d013      	beq.n	8043588 <HAL_DMA_Abort_IT+0xc8>
 8043560:	687b      	ldr	r3, [r7, #4]
 8043562:	681b      	ldr	r3, [r3, #0]
 8043564:	4a4a      	ldr	r2, [pc, #296]	; (8043690 <HAL_DMA_Abort_IT+0x1d0>)
 8043566:	4293      	cmp	r3, r2
 8043568:	d00e      	beq.n	8043588 <HAL_DMA_Abort_IT+0xc8>
 804356a:	687b      	ldr	r3, [r7, #4]
 804356c:	681b      	ldr	r3, [r3, #0]
 804356e:	4a49      	ldr	r2, [pc, #292]	; (8043694 <HAL_DMA_Abort_IT+0x1d4>)
 8043570:	4293      	cmp	r3, r2
 8043572:	d009      	beq.n	8043588 <HAL_DMA_Abort_IT+0xc8>
 8043574:	687b      	ldr	r3, [r7, #4]
 8043576:	681b      	ldr	r3, [r3, #0]
 8043578:	4a47      	ldr	r2, [pc, #284]	; (8043698 <HAL_DMA_Abort_IT+0x1d8>)
 804357a:	4293      	cmp	r3, r2
 804357c:	d004      	beq.n	8043588 <HAL_DMA_Abort_IT+0xc8>
 804357e:	687b      	ldr	r3, [r7, #4]
 8043580:	681b      	ldr	r3, [r3, #0]
 8043582:	4a46      	ldr	r2, [pc, #280]	; (804369c <HAL_DMA_Abort_IT+0x1dc>)
 8043584:	4293      	cmp	r3, r2
 8043586:	d101      	bne.n	804358c <HAL_DMA_Abort_IT+0xcc>
 8043588:	2301      	movs	r3, #1
 804358a:	e000      	b.n	804358e <HAL_DMA_Abort_IT+0xce>
 804358c:	2300      	movs	r3, #0
 804358e:	2b00      	cmp	r3, #0
 8043590:	f000 8086 	beq.w	80436a0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8043594:	687b      	ldr	r3, [r7, #4]
 8043596:	2204      	movs	r2, #4
 8043598:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 804359c:	687b      	ldr	r3, [r7, #4]
 804359e:	681b      	ldr	r3, [r3, #0]
 80435a0:	4a2f      	ldr	r2, [pc, #188]	; (8043660 <HAL_DMA_Abort_IT+0x1a0>)
 80435a2:	4293      	cmp	r3, r2
 80435a4:	d04a      	beq.n	804363c <HAL_DMA_Abort_IT+0x17c>
 80435a6:	687b      	ldr	r3, [r7, #4]
 80435a8:	681b      	ldr	r3, [r3, #0]
 80435aa:	4a2e      	ldr	r2, [pc, #184]	; (8043664 <HAL_DMA_Abort_IT+0x1a4>)
 80435ac:	4293      	cmp	r3, r2
 80435ae:	d045      	beq.n	804363c <HAL_DMA_Abort_IT+0x17c>
 80435b0:	687b      	ldr	r3, [r7, #4]
 80435b2:	681b      	ldr	r3, [r3, #0]
 80435b4:	4a2c      	ldr	r2, [pc, #176]	; (8043668 <HAL_DMA_Abort_IT+0x1a8>)
 80435b6:	4293      	cmp	r3, r2
 80435b8:	d040      	beq.n	804363c <HAL_DMA_Abort_IT+0x17c>
 80435ba:	687b      	ldr	r3, [r7, #4]
 80435bc:	681b      	ldr	r3, [r3, #0]
 80435be:	4a2b      	ldr	r2, [pc, #172]	; (804366c <HAL_DMA_Abort_IT+0x1ac>)
 80435c0:	4293      	cmp	r3, r2
 80435c2:	d03b      	beq.n	804363c <HAL_DMA_Abort_IT+0x17c>
 80435c4:	687b      	ldr	r3, [r7, #4]
 80435c6:	681b      	ldr	r3, [r3, #0]
 80435c8:	4a29      	ldr	r2, [pc, #164]	; (8043670 <HAL_DMA_Abort_IT+0x1b0>)
 80435ca:	4293      	cmp	r3, r2
 80435cc:	d036      	beq.n	804363c <HAL_DMA_Abort_IT+0x17c>
 80435ce:	687b      	ldr	r3, [r7, #4]
 80435d0:	681b      	ldr	r3, [r3, #0]
 80435d2:	4a28      	ldr	r2, [pc, #160]	; (8043674 <HAL_DMA_Abort_IT+0x1b4>)
 80435d4:	4293      	cmp	r3, r2
 80435d6:	d031      	beq.n	804363c <HAL_DMA_Abort_IT+0x17c>
 80435d8:	687b      	ldr	r3, [r7, #4]
 80435da:	681b      	ldr	r3, [r3, #0]
 80435dc:	4a26      	ldr	r2, [pc, #152]	; (8043678 <HAL_DMA_Abort_IT+0x1b8>)
 80435de:	4293      	cmp	r3, r2
 80435e0:	d02c      	beq.n	804363c <HAL_DMA_Abort_IT+0x17c>
 80435e2:	687b      	ldr	r3, [r7, #4]
 80435e4:	681b      	ldr	r3, [r3, #0]
 80435e6:	4a25      	ldr	r2, [pc, #148]	; (804367c <HAL_DMA_Abort_IT+0x1bc>)
 80435e8:	4293      	cmp	r3, r2
 80435ea:	d027      	beq.n	804363c <HAL_DMA_Abort_IT+0x17c>
 80435ec:	687b      	ldr	r3, [r7, #4]
 80435ee:	681b      	ldr	r3, [r3, #0]
 80435f0:	4a23      	ldr	r2, [pc, #140]	; (8043680 <HAL_DMA_Abort_IT+0x1c0>)
 80435f2:	4293      	cmp	r3, r2
 80435f4:	d022      	beq.n	804363c <HAL_DMA_Abort_IT+0x17c>
 80435f6:	687b      	ldr	r3, [r7, #4]
 80435f8:	681b      	ldr	r3, [r3, #0]
 80435fa:	4a22      	ldr	r2, [pc, #136]	; (8043684 <HAL_DMA_Abort_IT+0x1c4>)
 80435fc:	4293      	cmp	r3, r2
 80435fe:	d01d      	beq.n	804363c <HAL_DMA_Abort_IT+0x17c>
 8043600:	687b      	ldr	r3, [r7, #4]
 8043602:	681b      	ldr	r3, [r3, #0]
 8043604:	4a20      	ldr	r2, [pc, #128]	; (8043688 <HAL_DMA_Abort_IT+0x1c8>)
 8043606:	4293      	cmp	r3, r2
 8043608:	d018      	beq.n	804363c <HAL_DMA_Abort_IT+0x17c>
 804360a:	687b      	ldr	r3, [r7, #4]
 804360c:	681b      	ldr	r3, [r3, #0]
 804360e:	4a1f      	ldr	r2, [pc, #124]	; (804368c <HAL_DMA_Abort_IT+0x1cc>)
 8043610:	4293      	cmp	r3, r2
 8043612:	d013      	beq.n	804363c <HAL_DMA_Abort_IT+0x17c>
 8043614:	687b      	ldr	r3, [r7, #4]
 8043616:	681b      	ldr	r3, [r3, #0]
 8043618:	4a1d      	ldr	r2, [pc, #116]	; (8043690 <HAL_DMA_Abort_IT+0x1d0>)
 804361a:	4293      	cmp	r3, r2
 804361c:	d00e      	beq.n	804363c <HAL_DMA_Abort_IT+0x17c>
 804361e:	687b      	ldr	r3, [r7, #4]
 8043620:	681b      	ldr	r3, [r3, #0]
 8043622:	4a1c      	ldr	r2, [pc, #112]	; (8043694 <HAL_DMA_Abort_IT+0x1d4>)
 8043624:	4293      	cmp	r3, r2
 8043626:	d009      	beq.n	804363c <HAL_DMA_Abort_IT+0x17c>
 8043628:	687b      	ldr	r3, [r7, #4]
 804362a:	681b      	ldr	r3, [r3, #0]
 804362c:	4a1a      	ldr	r2, [pc, #104]	; (8043698 <HAL_DMA_Abort_IT+0x1d8>)
 804362e:	4293      	cmp	r3, r2
 8043630:	d004      	beq.n	804363c <HAL_DMA_Abort_IT+0x17c>
 8043632:	687b      	ldr	r3, [r7, #4]
 8043634:	681b      	ldr	r3, [r3, #0]
 8043636:	4a19      	ldr	r2, [pc, #100]	; (804369c <HAL_DMA_Abort_IT+0x1dc>)
 8043638:	4293      	cmp	r3, r2
 804363a:	d108      	bne.n	804364e <HAL_DMA_Abort_IT+0x18e>
 804363c:	687b      	ldr	r3, [r7, #4]
 804363e:	681b      	ldr	r3, [r3, #0]
 8043640:	681a      	ldr	r2, [r3, #0]
 8043642:	687b      	ldr	r3, [r7, #4]
 8043644:	681b      	ldr	r3, [r3, #0]
 8043646:	f022 0201 	bic.w	r2, r2, #1
 804364a:	601a      	str	r2, [r3, #0]
 804364c:	e178      	b.n	8043940 <HAL_DMA_Abort_IT+0x480>
 804364e:	687b      	ldr	r3, [r7, #4]
 8043650:	681b      	ldr	r3, [r3, #0]
 8043652:	681a      	ldr	r2, [r3, #0]
 8043654:	687b      	ldr	r3, [r7, #4]
 8043656:	681b      	ldr	r3, [r3, #0]
 8043658:	f022 0201 	bic.w	r2, r2, #1
 804365c:	601a      	str	r2, [r3, #0]
 804365e:	e16f      	b.n	8043940 <HAL_DMA_Abort_IT+0x480>
 8043660:	40020010 	.word	0x40020010
 8043664:	40020028 	.word	0x40020028
 8043668:	40020040 	.word	0x40020040
 804366c:	40020058 	.word	0x40020058
 8043670:	40020070 	.word	0x40020070
 8043674:	40020088 	.word	0x40020088
 8043678:	400200a0 	.word	0x400200a0
 804367c:	400200b8 	.word	0x400200b8
 8043680:	40020410 	.word	0x40020410
 8043684:	40020428 	.word	0x40020428
 8043688:	40020440 	.word	0x40020440
 804368c:	40020458 	.word	0x40020458
 8043690:	40020470 	.word	0x40020470
 8043694:	40020488 	.word	0x40020488
 8043698:	400204a0 	.word	0x400204a0
 804369c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80436a0:	687b      	ldr	r3, [r7, #4]
 80436a2:	681b      	ldr	r3, [r3, #0]
 80436a4:	681a      	ldr	r2, [r3, #0]
 80436a6:	687b      	ldr	r3, [r7, #4]
 80436a8:	681b      	ldr	r3, [r3, #0]
 80436aa:	f022 020e 	bic.w	r2, r2, #14
 80436ae:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80436b0:	687b      	ldr	r3, [r7, #4]
 80436b2:	681b      	ldr	r3, [r3, #0]
 80436b4:	4a6c      	ldr	r2, [pc, #432]	; (8043868 <HAL_DMA_Abort_IT+0x3a8>)
 80436b6:	4293      	cmp	r3, r2
 80436b8:	d04a      	beq.n	8043750 <HAL_DMA_Abort_IT+0x290>
 80436ba:	687b      	ldr	r3, [r7, #4]
 80436bc:	681b      	ldr	r3, [r3, #0]
 80436be:	4a6b      	ldr	r2, [pc, #428]	; (804386c <HAL_DMA_Abort_IT+0x3ac>)
 80436c0:	4293      	cmp	r3, r2
 80436c2:	d045      	beq.n	8043750 <HAL_DMA_Abort_IT+0x290>
 80436c4:	687b      	ldr	r3, [r7, #4]
 80436c6:	681b      	ldr	r3, [r3, #0]
 80436c8:	4a69      	ldr	r2, [pc, #420]	; (8043870 <HAL_DMA_Abort_IT+0x3b0>)
 80436ca:	4293      	cmp	r3, r2
 80436cc:	d040      	beq.n	8043750 <HAL_DMA_Abort_IT+0x290>
 80436ce:	687b      	ldr	r3, [r7, #4]
 80436d0:	681b      	ldr	r3, [r3, #0]
 80436d2:	4a68      	ldr	r2, [pc, #416]	; (8043874 <HAL_DMA_Abort_IT+0x3b4>)
 80436d4:	4293      	cmp	r3, r2
 80436d6:	d03b      	beq.n	8043750 <HAL_DMA_Abort_IT+0x290>
 80436d8:	687b      	ldr	r3, [r7, #4]
 80436da:	681b      	ldr	r3, [r3, #0]
 80436dc:	4a66      	ldr	r2, [pc, #408]	; (8043878 <HAL_DMA_Abort_IT+0x3b8>)
 80436de:	4293      	cmp	r3, r2
 80436e0:	d036      	beq.n	8043750 <HAL_DMA_Abort_IT+0x290>
 80436e2:	687b      	ldr	r3, [r7, #4]
 80436e4:	681b      	ldr	r3, [r3, #0]
 80436e6:	4a65      	ldr	r2, [pc, #404]	; (804387c <HAL_DMA_Abort_IT+0x3bc>)
 80436e8:	4293      	cmp	r3, r2
 80436ea:	d031      	beq.n	8043750 <HAL_DMA_Abort_IT+0x290>
 80436ec:	687b      	ldr	r3, [r7, #4]
 80436ee:	681b      	ldr	r3, [r3, #0]
 80436f0:	4a63      	ldr	r2, [pc, #396]	; (8043880 <HAL_DMA_Abort_IT+0x3c0>)
 80436f2:	4293      	cmp	r3, r2
 80436f4:	d02c      	beq.n	8043750 <HAL_DMA_Abort_IT+0x290>
 80436f6:	687b      	ldr	r3, [r7, #4]
 80436f8:	681b      	ldr	r3, [r3, #0]
 80436fa:	4a62      	ldr	r2, [pc, #392]	; (8043884 <HAL_DMA_Abort_IT+0x3c4>)
 80436fc:	4293      	cmp	r3, r2
 80436fe:	d027      	beq.n	8043750 <HAL_DMA_Abort_IT+0x290>
 8043700:	687b      	ldr	r3, [r7, #4]
 8043702:	681b      	ldr	r3, [r3, #0]
 8043704:	4a60      	ldr	r2, [pc, #384]	; (8043888 <HAL_DMA_Abort_IT+0x3c8>)
 8043706:	4293      	cmp	r3, r2
 8043708:	d022      	beq.n	8043750 <HAL_DMA_Abort_IT+0x290>
 804370a:	687b      	ldr	r3, [r7, #4]
 804370c:	681b      	ldr	r3, [r3, #0]
 804370e:	4a5f      	ldr	r2, [pc, #380]	; (804388c <HAL_DMA_Abort_IT+0x3cc>)
 8043710:	4293      	cmp	r3, r2
 8043712:	d01d      	beq.n	8043750 <HAL_DMA_Abort_IT+0x290>
 8043714:	687b      	ldr	r3, [r7, #4]
 8043716:	681b      	ldr	r3, [r3, #0]
 8043718:	4a5d      	ldr	r2, [pc, #372]	; (8043890 <HAL_DMA_Abort_IT+0x3d0>)
 804371a:	4293      	cmp	r3, r2
 804371c:	d018      	beq.n	8043750 <HAL_DMA_Abort_IT+0x290>
 804371e:	687b      	ldr	r3, [r7, #4]
 8043720:	681b      	ldr	r3, [r3, #0]
 8043722:	4a5c      	ldr	r2, [pc, #368]	; (8043894 <HAL_DMA_Abort_IT+0x3d4>)
 8043724:	4293      	cmp	r3, r2
 8043726:	d013      	beq.n	8043750 <HAL_DMA_Abort_IT+0x290>
 8043728:	687b      	ldr	r3, [r7, #4]
 804372a:	681b      	ldr	r3, [r3, #0]
 804372c:	4a5a      	ldr	r2, [pc, #360]	; (8043898 <HAL_DMA_Abort_IT+0x3d8>)
 804372e:	4293      	cmp	r3, r2
 8043730:	d00e      	beq.n	8043750 <HAL_DMA_Abort_IT+0x290>
 8043732:	687b      	ldr	r3, [r7, #4]
 8043734:	681b      	ldr	r3, [r3, #0]
 8043736:	4a59      	ldr	r2, [pc, #356]	; (804389c <HAL_DMA_Abort_IT+0x3dc>)
 8043738:	4293      	cmp	r3, r2
 804373a:	d009      	beq.n	8043750 <HAL_DMA_Abort_IT+0x290>
 804373c:	687b      	ldr	r3, [r7, #4]
 804373e:	681b      	ldr	r3, [r3, #0]
 8043740:	4a57      	ldr	r2, [pc, #348]	; (80438a0 <HAL_DMA_Abort_IT+0x3e0>)
 8043742:	4293      	cmp	r3, r2
 8043744:	d004      	beq.n	8043750 <HAL_DMA_Abort_IT+0x290>
 8043746:	687b      	ldr	r3, [r7, #4]
 8043748:	681b      	ldr	r3, [r3, #0]
 804374a:	4a56      	ldr	r2, [pc, #344]	; (80438a4 <HAL_DMA_Abort_IT+0x3e4>)
 804374c:	4293      	cmp	r3, r2
 804374e:	d108      	bne.n	8043762 <HAL_DMA_Abort_IT+0x2a2>
 8043750:	687b      	ldr	r3, [r7, #4]
 8043752:	681b      	ldr	r3, [r3, #0]
 8043754:	681a      	ldr	r2, [r3, #0]
 8043756:	687b      	ldr	r3, [r7, #4]
 8043758:	681b      	ldr	r3, [r3, #0]
 804375a:	f022 0201 	bic.w	r2, r2, #1
 804375e:	601a      	str	r2, [r3, #0]
 8043760:	e007      	b.n	8043772 <HAL_DMA_Abort_IT+0x2b2>
 8043762:	687b      	ldr	r3, [r7, #4]
 8043764:	681b      	ldr	r3, [r3, #0]
 8043766:	681a      	ldr	r2, [r3, #0]
 8043768:	687b      	ldr	r3, [r7, #4]
 804376a:	681b      	ldr	r3, [r3, #0]
 804376c:	f022 0201 	bic.w	r2, r2, #1
 8043770:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8043772:	687b      	ldr	r3, [r7, #4]
 8043774:	681b      	ldr	r3, [r3, #0]
 8043776:	4a3c      	ldr	r2, [pc, #240]	; (8043868 <HAL_DMA_Abort_IT+0x3a8>)
 8043778:	4293      	cmp	r3, r2
 804377a:	d072      	beq.n	8043862 <HAL_DMA_Abort_IT+0x3a2>
 804377c:	687b      	ldr	r3, [r7, #4]
 804377e:	681b      	ldr	r3, [r3, #0]
 8043780:	4a3a      	ldr	r2, [pc, #232]	; (804386c <HAL_DMA_Abort_IT+0x3ac>)
 8043782:	4293      	cmp	r3, r2
 8043784:	d06d      	beq.n	8043862 <HAL_DMA_Abort_IT+0x3a2>
 8043786:	687b      	ldr	r3, [r7, #4]
 8043788:	681b      	ldr	r3, [r3, #0]
 804378a:	4a39      	ldr	r2, [pc, #228]	; (8043870 <HAL_DMA_Abort_IT+0x3b0>)
 804378c:	4293      	cmp	r3, r2
 804378e:	d068      	beq.n	8043862 <HAL_DMA_Abort_IT+0x3a2>
 8043790:	687b      	ldr	r3, [r7, #4]
 8043792:	681b      	ldr	r3, [r3, #0]
 8043794:	4a37      	ldr	r2, [pc, #220]	; (8043874 <HAL_DMA_Abort_IT+0x3b4>)
 8043796:	4293      	cmp	r3, r2
 8043798:	d063      	beq.n	8043862 <HAL_DMA_Abort_IT+0x3a2>
 804379a:	687b      	ldr	r3, [r7, #4]
 804379c:	681b      	ldr	r3, [r3, #0]
 804379e:	4a36      	ldr	r2, [pc, #216]	; (8043878 <HAL_DMA_Abort_IT+0x3b8>)
 80437a0:	4293      	cmp	r3, r2
 80437a2:	d05e      	beq.n	8043862 <HAL_DMA_Abort_IT+0x3a2>
 80437a4:	687b      	ldr	r3, [r7, #4]
 80437a6:	681b      	ldr	r3, [r3, #0]
 80437a8:	4a34      	ldr	r2, [pc, #208]	; (804387c <HAL_DMA_Abort_IT+0x3bc>)
 80437aa:	4293      	cmp	r3, r2
 80437ac:	d059      	beq.n	8043862 <HAL_DMA_Abort_IT+0x3a2>
 80437ae:	687b      	ldr	r3, [r7, #4]
 80437b0:	681b      	ldr	r3, [r3, #0]
 80437b2:	4a33      	ldr	r2, [pc, #204]	; (8043880 <HAL_DMA_Abort_IT+0x3c0>)
 80437b4:	4293      	cmp	r3, r2
 80437b6:	d054      	beq.n	8043862 <HAL_DMA_Abort_IT+0x3a2>
 80437b8:	687b      	ldr	r3, [r7, #4]
 80437ba:	681b      	ldr	r3, [r3, #0]
 80437bc:	4a31      	ldr	r2, [pc, #196]	; (8043884 <HAL_DMA_Abort_IT+0x3c4>)
 80437be:	4293      	cmp	r3, r2
 80437c0:	d04f      	beq.n	8043862 <HAL_DMA_Abort_IT+0x3a2>
 80437c2:	687b      	ldr	r3, [r7, #4]
 80437c4:	681b      	ldr	r3, [r3, #0]
 80437c6:	4a30      	ldr	r2, [pc, #192]	; (8043888 <HAL_DMA_Abort_IT+0x3c8>)
 80437c8:	4293      	cmp	r3, r2
 80437ca:	d04a      	beq.n	8043862 <HAL_DMA_Abort_IT+0x3a2>
 80437cc:	687b      	ldr	r3, [r7, #4]
 80437ce:	681b      	ldr	r3, [r3, #0]
 80437d0:	4a2e      	ldr	r2, [pc, #184]	; (804388c <HAL_DMA_Abort_IT+0x3cc>)
 80437d2:	4293      	cmp	r3, r2
 80437d4:	d045      	beq.n	8043862 <HAL_DMA_Abort_IT+0x3a2>
 80437d6:	687b      	ldr	r3, [r7, #4]
 80437d8:	681b      	ldr	r3, [r3, #0]
 80437da:	4a2d      	ldr	r2, [pc, #180]	; (8043890 <HAL_DMA_Abort_IT+0x3d0>)
 80437dc:	4293      	cmp	r3, r2
 80437de:	d040      	beq.n	8043862 <HAL_DMA_Abort_IT+0x3a2>
 80437e0:	687b      	ldr	r3, [r7, #4]
 80437e2:	681b      	ldr	r3, [r3, #0]
 80437e4:	4a2b      	ldr	r2, [pc, #172]	; (8043894 <HAL_DMA_Abort_IT+0x3d4>)
 80437e6:	4293      	cmp	r3, r2
 80437e8:	d03b      	beq.n	8043862 <HAL_DMA_Abort_IT+0x3a2>
 80437ea:	687b      	ldr	r3, [r7, #4]
 80437ec:	681b      	ldr	r3, [r3, #0]
 80437ee:	4a2a      	ldr	r2, [pc, #168]	; (8043898 <HAL_DMA_Abort_IT+0x3d8>)
 80437f0:	4293      	cmp	r3, r2
 80437f2:	d036      	beq.n	8043862 <HAL_DMA_Abort_IT+0x3a2>
 80437f4:	687b      	ldr	r3, [r7, #4]
 80437f6:	681b      	ldr	r3, [r3, #0]
 80437f8:	4a28      	ldr	r2, [pc, #160]	; (804389c <HAL_DMA_Abort_IT+0x3dc>)
 80437fa:	4293      	cmp	r3, r2
 80437fc:	d031      	beq.n	8043862 <HAL_DMA_Abort_IT+0x3a2>
 80437fe:	687b      	ldr	r3, [r7, #4]
 8043800:	681b      	ldr	r3, [r3, #0]
 8043802:	4a27      	ldr	r2, [pc, #156]	; (80438a0 <HAL_DMA_Abort_IT+0x3e0>)
 8043804:	4293      	cmp	r3, r2
 8043806:	d02c      	beq.n	8043862 <HAL_DMA_Abort_IT+0x3a2>
 8043808:	687b      	ldr	r3, [r7, #4]
 804380a:	681b      	ldr	r3, [r3, #0]
 804380c:	4a25      	ldr	r2, [pc, #148]	; (80438a4 <HAL_DMA_Abort_IT+0x3e4>)
 804380e:	4293      	cmp	r3, r2
 8043810:	d027      	beq.n	8043862 <HAL_DMA_Abort_IT+0x3a2>
 8043812:	687b      	ldr	r3, [r7, #4]
 8043814:	681b      	ldr	r3, [r3, #0]
 8043816:	4a24      	ldr	r2, [pc, #144]	; (80438a8 <HAL_DMA_Abort_IT+0x3e8>)
 8043818:	4293      	cmp	r3, r2
 804381a:	d022      	beq.n	8043862 <HAL_DMA_Abort_IT+0x3a2>
 804381c:	687b      	ldr	r3, [r7, #4]
 804381e:	681b      	ldr	r3, [r3, #0]
 8043820:	4a22      	ldr	r2, [pc, #136]	; (80438ac <HAL_DMA_Abort_IT+0x3ec>)
 8043822:	4293      	cmp	r3, r2
 8043824:	d01d      	beq.n	8043862 <HAL_DMA_Abort_IT+0x3a2>
 8043826:	687b      	ldr	r3, [r7, #4]
 8043828:	681b      	ldr	r3, [r3, #0]
 804382a:	4a21      	ldr	r2, [pc, #132]	; (80438b0 <HAL_DMA_Abort_IT+0x3f0>)
 804382c:	4293      	cmp	r3, r2
 804382e:	d018      	beq.n	8043862 <HAL_DMA_Abort_IT+0x3a2>
 8043830:	687b      	ldr	r3, [r7, #4]
 8043832:	681b      	ldr	r3, [r3, #0]
 8043834:	4a1f      	ldr	r2, [pc, #124]	; (80438b4 <HAL_DMA_Abort_IT+0x3f4>)
 8043836:	4293      	cmp	r3, r2
 8043838:	d013      	beq.n	8043862 <HAL_DMA_Abort_IT+0x3a2>
 804383a:	687b      	ldr	r3, [r7, #4]
 804383c:	681b      	ldr	r3, [r3, #0]
 804383e:	4a1e      	ldr	r2, [pc, #120]	; (80438b8 <HAL_DMA_Abort_IT+0x3f8>)
 8043840:	4293      	cmp	r3, r2
 8043842:	d00e      	beq.n	8043862 <HAL_DMA_Abort_IT+0x3a2>
 8043844:	687b      	ldr	r3, [r7, #4]
 8043846:	681b      	ldr	r3, [r3, #0]
 8043848:	4a1c      	ldr	r2, [pc, #112]	; (80438bc <HAL_DMA_Abort_IT+0x3fc>)
 804384a:	4293      	cmp	r3, r2
 804384c:	d009      	beq.n	8043862 <HAL_DMA_Abort_IT+0x3a2>
 804384e:	687b      	ldr	r3, [r7, #4]
 8043850:	681b      	ldr	r3, [r3, #0]
 8043852:	4a1b      	ldr	r2, [pc, #108]	; (80438c0 <HAL_DMA_Abort_IT+0x400>)
 8043854:	4293      	cmp	r3, r2
 8043856:	d004      	beq.n	8043862 <HAL_DMA_Abort_IT+0x3a2>
 8043858:	687b      	ldr	r3, [r7, #4]
 804385a:	681b      	ldr	r3, [r3, #0]
 804385c:	4a19      	ldr	r2, [pc, #100]	; (80438c4 <HAL_DMA_Abort_IT+0x404>)
 804385e:	4293      	cmp	r3, r2
 8043860:	d132      	bne.n	80438c8 <HAL_DMA_Abort_IT+0x408>
 8043862:	2301      	movs	r3, #1
 8043864:	e031      	b.n	80438ca <HAL_DMA_Abort_IT+0x40a>
 8043866:	bf00      	nop
 8043868:	40020010 	.word	0x40020010
 804386c:	40020028 	.word	0x40020028
 8043870:	40020040 	.word	0x40020040
 8043874:	40020058 	.word	0x40020058
 8043878:	40020070 	.word	0x40020070
 804387c:	40020088 	.word	0x40020088
 8043880:	400200a0 	.word	0x400200a0
 8043884:	400200b8 	.word	0x400200b8
 8043888:	40020410 	.word	0x40020410
 804388c:	40020428 	.word	0x40020428
 8043890:	40020440 	.word	0x40020440
 8043894:	40020458 	.word	0x40020458
 8043898:	40020470 	.word	0x40020470
 804389c:	40020488 	.word	0x40020488
 80438a0:	400204a0 	.word	0x400204a0
 80438a4:	400204b8 	.word	0x400204b8
 80438a8:	58025408 	.word	0x58025408
 80438ac:	5802541c 	.word	0x5802541c
 80438b0:	58025430 	.word	0x58025430
 80438b4:	58025444 	.word	0x58025444
 80438b8:	58025458 	.word	0x58025458
 80438bc:	5802546c 	.word	0x5802546c
 80438c0:	58025480 	.word	0x58025480
 80438c4:	58025494 	.word	0x58025494
 80438c8:	2300      	movs	r3, #0
 80438ca:	2b00      	cmp	r3, #0
 80438cc:	d028      	beq.n	8043920 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80438ce:	687b      	ldr	r3, [r7, #4]
 80438d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80438d2:	681a      	ldr	r2, [r3, #0]
 80438d4:	687b      	ldr	r3, [r7, #4]
 80438d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80438d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80438dc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80438de:	687b      	ldr	r3, [r7, #4]
 80438e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80438e2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80438e4:	687b      	ldr	r3, [r7, #4]
 80438e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80438e8:	f003 031f 	and.w	r3, r3, #31
 80438ec:	2201      	movs	r2, #1
 80438ee:	409a      	lsls	r2, r3
 80438f0:	68fb      	ldr	r3, [r7, #12]
 80438f2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80438f4:	687b      	ldr	r3, [r7, #4]
 80438f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80438f8:	687a      	ldr	r2, [r7, #4]
 80438fa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80438fc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80438fe:	687b      	ldr	r3, [r7, #4]
 8043900:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8043902:	2b00      	cmp	r3, #0
 8043904:	d00c      	beq.n	8043920 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8043906:	687b      	ldr	r3, [r7, #4]
 8043908:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804390a:	681a      	ldr	r2, [r3, #0]
 804390c:	687b      	ldr	r3, [r7, #4]
 804390e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8043910:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8043914:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8043916:	687b      	ldr	r3, [r7, #4]
 8043918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804391a:	687a      	ldr	r2, [r7, #4]
 804391c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 804391e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8043920:	687b      	ldr	r3, [r7, #4]
 8043922:	2201      	movs	r2, #1
 8043924:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8043928:	687b      	ldr	r3, [r7, #4]
 804392a:	2200      	movs	r2, #0
 804392c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8043930:	687b      	ldr	r3, [r7, #4]
 8043932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8043934:	2b00      	cmp	r3, #0
 8043936:	d003      	beq.n	8043940 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8043938:	687b      	ldr	r3, [r7, #4]
 804393a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 804393c:	6878      	ldr	r0, [r7, #4]
 804393e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8043940:	2300      	movs	r3, #0
}
 8043942:	4618      	mov	r0, r3
 8043944:	3710      	adds	r7, #16
 8043946:	46bd      	mov	sp, r7
 8043948:	bd80      	pop	{r7, pc}
 804394a:	bf00      	nop

0804394c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 804394c:	b580      	push	{r7, lr}
 804394e:	b08a      	sub	sp, #40	; 0x28
 8043950:	af00      	add	r7, sp, #0
 8043952:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8043954:	2300      	movs	r3, #0
 8043956:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8043958:	4b67      	ldr	r3, [pc, #412]	; (8043af8 <HAL_DMA_IRQHandler+0x1ac>)
 804395a:	681b      	ldr	r3, [r3, #0]
 804395c:	4a67      	ldr	r2, [pc, #412]	; (8043afc <HAL_DMA_IRQHandler+0x1b0>)
 804395e:	fba2 2303 	umull	r2, r3, r2, r3
 8043962:	0a9b      	lsrs	r3, r3, #10
 8043964:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8043966:	687b      	ldr	r3, [r7, #4]
 8043968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804396a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 804396c:	687b      	ldr	r3, [r7, #4]
 804396e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8043970:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8043972:	6a3b      	ldr	r3, [r7, #32]
 8043974:	681b      	ldr	r3, [r3, #0]
 8043976:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8043978:	69fb      	ldr	r3, [r7, #28]
 804397a:	681b      	ldr	r3, [r3, #0]
 804397c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 804397e:	687b      	ldr	r3, [r7, #4]
 8043980:	681b      	ldr	r3, [r3, #0]
 8043982:	4a5f      	ldr	r2, [pc, #380]	; (8043b00 <HAL_DMA_IRQHandler+0x1b4>)
 8043984:	4293      	cmp	r3, r2
 8043986:	d04a      	beq.n	8043a1e <HAL_DMA_IRQHandler+0xd2>
 8043988:	687b      	ldr	r3, [r7, #4]
 804398a:	681b      	ldr	r3, [r3, #0]
 804398c:	4a5d      	ldr	r2, [pc, #372]	; (8043b04 <HAL_DMA_IRQHandler+0x1b8>)
 804398e:	4293      	cmp	r3, r2
 8043990:	d045      	beq.n	8043a1e <HAL_DMA_IRQHandler+0xd2>
 8043992:	687b      	ldr	r3, [r7, #4]
 8043994:	681b      	ldr	r3, [r3, #0]
 8043996:	4a5c      	ldr	r2, [pc, #368]	; (8043b08 <HAL_DMA_IRQHandler+0x1bc>)
 8043998:	4293      	cmp	r3, r2
 804399a:	d040      	beq.n	8043a1e <HAL_DMA_IRQHandler+0xd2>
 804399c:	687b      	ldr	r3, [r7, #4]
 804399e:	681b      	ldr	r3, [r3, #0]
 80439a0:	4a5a      	ldr	r2, [pc, #360]	; (8043b0c <HAL_DMA_IRQHandler+0x1c0>)
 80439a2:	4293      	cmp	r3, r2
 80439a4:	d03b      	beq.n	8043a1e <HAL_DMA_IRQHandler+0xd2>
 80439a6:	687b      	ldr	r3, [r7, #4]
 80439a8:	681b      	ldr	r3, [r3, #0]
 80439aa:	4a59      	ldr	r2, [pc, #356]	; (8043b10 <HAL_DMA_IRQHandler+0x1c4>)
 80439ac:	4293      	cmp	r3, r2
 80439ae:	d036      	beq.n	8043a1e <HAL_DMA_IRQHandler+0xd2>
 80439b0:	687b      	ldr	r3, [r7, #4]
 80439b2:	681b      	ldr	r3, [r3, #0]
 80439b4:	4a57      	ldr	r2, [pc, #348]	; (8043b14 <HAL_DMA_IRQHandler+0x1c8>)
 80439b6:	4293      	cmp	r3, r2
 80439b8:	d031      	beq.n	8043a1e <HAL_DMA_IRQHandler+0xd2>
 80439ba:	687b      	ldr	r3, [r7, #4]
 80439bc:	681b      	ldr	r3, [r3, #0]
 80439be:	4a56      	ldr	r2, [pc, #344]	; (8043b18 <HAL_DMA_IRQHandler+0x1cc>)
 80439c0:	4293      	cmp	r3, r2
 80439c2:	d02c      	beq.n	8043a1e <HAL_DMA_IRQHandler+0xd2>
 80439c4:	687b      	ldr	r3, [r7, #4]
 80439c6:	681b      	ldr	r3, [r3, #0]
 80439c8:	4a54      	ldr	r2, [pc, #336]	; (8043b1c <HAL_DMA_IRQHandler+0x1d0>)
 80439ca:	4293      	cmp	r3, r2
 80439cc:	d027      	beq.n	8043a1e <HAL_DMA_IRQHandler+0xd2>
 80439ce:	687b      	ldr	r3, [r7, #4]
 80439d0:	681b      	ldr	r3, [r3, #0]
 80439d2:	4a53      	ldr	r2, [pc, #332]	; (8043b20 <HAL_DMA_IRQHandler+0x1d4>)
 80439d4:	4293      	cmp	r3, r2
 80439d6:	d022      	beq.n	8043a1e <HAL_DMA_IRQHandler+0xd2>
 80439d8:	687b      	ldr	r3, [r7, #4]
 80439da:	681b      	ldr	r3, [r3, #0]
 80439dc:	4a51      	ldr	r2, [pc, #324]	; (8043b24 <HAL_DMA_IRQHandler+0x1d8>)
 80439de:	4293      	cmp	r3, r2
 80439e0:	d01d      	beq.n	8043a1e <HAL_DMA_IRQHandler+0xd2>
 80439e2:	687b      	ldr	r3, [r7, #4]
 80439e4:	681b      	ldr	r3, [r3, #0]
 80439e6:	4a50      	ldr	r2, [pc, #320]	; (8043b28 <HAL_DMA_IRQHandler+0x1dc>)
 80439e8:	4293      	cmp	r3, r2
 80439ea:	d018      	beq.n	8043a1e <HAL_DMA_IRQHandler+0xd2>
 80439ec:	687b      	ldr	r3, [r7, #4]
 80439ee:	681b      	ldr	r3, [r3, #0]
 80439f0:	4a4e      	ldr	r2, [pc, #312]	; (8043b2c <HAL_DMA_IRQHandler+0x1e0>)
 80439f2:	4293      	cmp	r3, r2
 80439f4:	d013      	beq.n	8043a1e <HAL_DMA_IRQHandler+0xd2>
 80439f6:	687b      	ldr	r3, [r7, #4]
 80439f8:	681b      	ldr	r3, [r3, #0]
 80439fa:	4a4d      	ldr	r2, [pc, #308]	; (8043b30 <HAL_DMA_IRQHandler+0x1e4>)
 80439fc:	4293      	cmp	r3, r2
 80439fe:	d00e      	beq.n	8043a1e <HAL_DMA_IRQHandler+0xd2>
 8043a00:	687b      	ldr	r3, [r7, #4]
 8043a02:	681b      	ldr	r3, [r3, #0]
 8043a04:	4a4b      	ldr	r2, [pc, #300]	; (8043b34 <HAL_DMA_IRQHandler+0x1e8>)
 8043a06:	4293      	cmp	r3, r2
 8043a08:	d009      	beq.n	8043a1e <HAL_DMA_IRQHandler+0xd2>
 8043a0a:	687b      	ldr	r3, [r7, #4]
 8043a0c:	681b      	ldr	r3, [r3, #0]
 8043a0e:	4a4a      	ldr	r2, [pc, #296]	; (8043b38 <HAL_DMA_IRQHandler+0x1ec>)
 8043a10:	4293      	cmp	r3, r2
 8043a12:	d004      	beq.n	8043a1e <HAL_DMA_IRQHandler+0xd2>
 8043a14:	687b      	ldr	r3, [r7, #4]
 8043a16:	681b      	ldr	r3, [r3, #0]
 8043a18:	4a48      	ldr	r2, [pc, #288]	; (8043b3c <HAL_DMA_IRQHandler+0x1f0>)
 8043a1a:	4293      	cmp	r3, r2
 8043a1c:	d101      	bne.n	8043a22 <HAL_DMA_IRQHandler+0xd6>
 8043a1e:	2301      	movs	r3, #1
 8043a20:	e000      	b.n	8043a24 <HAL_DMA_IRQHandler+0xd8>
 8043a22:	2300      	movs	r3, #0
 8043a24:	2b00      	cmp	r3, #0
 8043a26:	f000 842b 	beq.w	8044280 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8043a2a:	687b      	ldr	r3, [r7, #4]
 8043a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8043a2e:	f003 031f 	and.w	r3, r3, #31
 8043a32:	2208      	movs	r2, #8
 8043a34:	409a      	lsls	r2, r3
 8043a36:	69bb      	ldr	r3, [r7, #24]
 8043a38:	4013      	ands	r3, r2
 8043a3a:	2b00      	cmp	r3, #0
 8043a3c:	f000 80a2 	beq.w	8043b84 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8043a40:	687b      	ldr	r3, [r7, #4]
 8043a42:	681b      	ldr	r3, [r3, #0]
 8043a44:	4a2e      	ldr	r2, [pc, #184]	; (8043b00 <HAL_DMA_IRQHandler+0x1b4>)
 8043a46:	4293      	cmp	r3, r2
 8043a48:	d04a      	beq.n	8043ae0 <HAL_DMA_IRQHandler+0x194>
 8043a4a:	687b      	ldr	r3, [r7, #4]
 8043a4c:	681b      	ldr	r3, [r3, #0]
 8043a4e:	4a2d      	ldr	r2, [pc, #180]	; (8043b04 <HAL_DMA_IRQHandler+0x1b8>)
 8043a50:	4293      	cmp	r3, r2
 8043a52:	d045      	beq.n	8043ae0 <HAL_DMA_IRQHandler+0x194>
 8043a54:	687b      	ldr	r3, [r7, #4]
 8043a56:	681b      	ldr	r3, [r3, #0]
 8043a58:	4a2b      	ldr	r2, [pc, #172]	; (8043b08 <HAL_DMA_IRQHandler+0x1bc>)
 8043a5a:	4293      	cmp	r3, r2
 8043a5c:	d040      	beq.n	8043ae0 <HAL_DMA_IRQHandler+0x194>
 8043a5e:	687b      	ldr	r3, [r7, #4]
 8043a60:	681b      	ldr	r3, [r3, #0]
 8043a62:	4a2a      	ldr	r2, [pc, #168]	; (8043b0c <HAL_DMA_IRQHandler+0x1c0>)
 8043a64:	4293      	cmp	r3, r2
 8043a66:	d03b      	beq.n	8043ae0 <HAL_DMA_IRQHandler+0x194>
 8043a68:	687b      	ldr	r3, [r7, #4]
 8043a6a:	681b      	ldr	r3, [r3, #0]
 8043a6c:	4a28      	ldr	r2, [pc, #160]	; (8043b10 <HAL_DMA_IRQHandler+0x1c4>)
 8043a6e:	4293      	cmp	r3, r2
 8043a70:	d036      	beq.n	8043ae0 <HAL_DMA_IRQHandler+0x194>
 8043a72:	687b      	ldr	r3, [r7, #4]
 8043a74:	681b      	ldr	r3, [r3, #0]
 8043a76:	4a27      	ldr	r2, [pc, #156]	; (8043b14 <HAL_DMA_IRQHandler+0x1c8>)
 8043a78:	4293      	cmp	r3, r2
 8043a7a:	d031      	beq.n	8043ae0 <HAL_DMA_IRQHandler+0x194>
 8043a7c:	687b      	ldr	r3, [r7, #4]
 8043a7e:	681b      	ldr	r3, [r3, #0]
 8043a80:	4a25      	ldr	r2, [pc, #148]	; (8043b18 <HAL_DMA_IRQHandler+0x1cc>)
 8043a82:	4293      	cmp	r3, r2
 8043a84:	d02c      	beq.n	8043ae0 <HAL_DMA_IRQHandler+0x194>
 8043a86:	687b      	ldr	r3, [r7, #4]
 8043a88:	681b      	ldr	r3, [r3, #0]
 8043a8a:	4a24      	ldr	r2, [pc, #144]	; (8043b1c <HAL_DMA_IRQHandler+0x1d0>)
 8043a8c:	4293      	cmp	r3, r2
 8043a8e:	d027      	beq.n	8043ae0 <HAL_DMA_IRQHandler+0x194>
 8043a90:	687b      	ldr	r3, [r7, #4]
 8043a92:	681b      	ldr	r3, [r3, #0]
 8043a94:	4a22      	ldr	r2, [pc, #136]	; (8043b20 <HAL_DMA_IRQHandler+0x1d4>)
 8043a96:	4293      	cmp	r3, r2
 8043a98:	d022      	beq.n	8043ae0 <HAL_DMA_IRQHandler+0x194>
 8043a9a:	687b      	ldr	r3, [r7, #4]
 8043a9c:	681b      	ldr	r3, [r3, #0]
 8043a9e:	4a21      	ldr	r2, [pc, #132]	; (8043b24 <HAL_DMA_IRQHandler+0x1d8>)
 8043aa0:	4293      	cmp	r3, r2
 8043aa2:	d01d      	beq.n	8043ae0 <HAL_DMA_IRQHandler+0x194>
 8043aa4:	687b      	ldr	r3, [r7, #4]
 8043aa6:	681b      	ldr	r3, [r3, #0]
 8043aa8:	4a1f      	ldr	r2, [pc, #124]	; (8043b28 <HAL_DMA_IRQHandler+0x1dc>)
 8043aaa:	4293      	cmp	r3, r2
 8043aac:	d018      	beq.n	8043ae0 <HAL_DMA_IRQHandler+0x194>
 8043aae:	687b      	ldr	r3, [r7, #4]
 8043ab0:	681b      	ldr	r3, [r3, #0]
 8043ab2:	4a1e      	ldr	r2, [pc, #120]	; (8043b2c <HAL_DMA_IRQHandler+0x1e0>)
 8043ab4:	4293      	cmp	r3, r2
 8043ab6:	d013      	beq.n	8043ae0 <HAL_DMA_IRQHandler+0x194>
 8043ab8:	687b      	ldr	r3, [r7, #4]
 8043aba:	681b      	ldr	r3, [r3, #0]
 8043abc:	4a1c      	ldr	r2, [pc, #112]	; (8043b30 <HAL_DMA_IRQHandler+0x1e4>)
 8043abe:	4293      	cmp	r3, r2
 8043ac0:	d00e      	beq.n	8043ae0 <HAL_DMA_IRQHandler+0x194>
 8043ac2:	687b      	ldr	r3, [r7, #4]
 8043ac4:	681b      	ldr	r3, [r3, #0]
 8043ac6:	4a1b      	ldr	r2, [pc, #108]	; (8043b34 <HAL_DMA_IRQHandler+0x1e8>)
 8043ac8:	4293      	cmp	r3, r2
 8043aca:	d009      	beq.n	8043ae0 <HAL_DMA_IRQHandler+0x194>
 8043acc:	687b      	ldr	r3, [r7, #4]
 8043ace:	681b      	ldr	r3, [r3, #0]
 8043ad0:	4a19      	ldr	r2, [pc, #100]	; (8043b38 <HAL_DMA_IRQHandler+0x1ec>)
 8043ad2:	4293      	cmp	r3, r2
 8043ad4:	d004      	beq.n	8043ae0 <HAL_DMA_IRQHandler+0x194>
 8043ad6:	687b      	ldr	r3, [r7, #4]
 8043ad8:	681b      	ldr	r3, [r3, #0]
 8043ada:	4a18      	ldr	r2, [pc, #96]	; (8043b3c <HAL_DMA_IRQHandler+0x1f0>)
 8043adc:	4293      	cmp	r3, r2
 8043ade:	d12f      	bne.n	8043b40 <HAL_DMA_IRQHandler+0x1f4>
 8043ae0:	687b      	ldr	r3, [r7, #4]
 8043ae2:	681b      	ldr	r3, [r3, #0]
 8043ae4:	681b      	ldr	r3, [r3, #0]
 8043ae6:	f003 0304 	and.w	r3, r3, #4
 8043aea:	2b00      	cmp	r3, #0
 8043aec:	bf14      	ite	ne
 8043aee:	2301      	movne	r3, #1
 8043af0:	2300      	moveq	r3, #0
 8043af2:	b2db      	uxtb	r3, r3
 8043af4:	e02e      	b.n	8043b54 <HAL_DMA_IRQHandler+0x208>
 8043af6:	bf00      	nop
 8043af8:	24000000 	.word	0x24000000
 8043afc:	1b4e81b5 	.word	0x1b4e81b5
 8043b00:	40020010 	.word	0x40020010
 8043b04:	40020028 	.word	0x40020028
 8043b08:	40020040 	.word	0x40020040
 8043b0c:	40020058 	.word	0x40020058
 8043b10:	40020070 	.word	0x40020070
 8043b14:	40020088 	.word	0x40020088
 8043b18:	400200a0 	.word	0x400200a0
 8043b1c:	400200b8 	.word	0x400200b8
 8043b20:	40020410 	.word	0x40020410
 8043b24:	40020428 	.word	0x40020428
 8043b28:	40020440 	.word	0x40020440
 8043b2c:	40020458 	.word	0x40020458
 8043b30:	40020470 	.word	0x40020470
 8043b34:	40020488 	.word	0x40020488
 8043b38:	400204a0 	.word	0x400204a0
 8043b3c:	400204b8 	.word	0x400204b8
 8043b40:	687b      	ldr	r3, [r7, #4]
 8043b42:	681b      	ldr	r3, [r3, #0]
 8043b44:	681b      	ldr	r3, [r3, #0]
 8043b46:	f003 0308 	and.w	r3, r3, #8
 8043b4a:	2b00      	cmp	r3, #0
 8043b4c:	bf14      	ite	ne
 8043b4e:	2301      	movne	r3, #1
 8043b50:	2300      	moveq	r3, #0
 8043b52:	b2db      	uxtb	r3, r3
 8043b54:	2b00      	cmp	r3, #0
 8043b56:	d015      	beq.n	8043b84 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8043b58:	687b      	ldr	r3, [r7, #4]
 8043b5a:	681b      	ldr	r3, [r3, #0]
 8043b5c:	681a      	ldr	r2, [r3, #0]
 8043b5e:	687b      	ldr	r3, [r7, #4]
 8043b60:	681b      	ldr	r3, [r3, #0]
 8043b62:	f022 0204 	bic.w	r2, r2, #4
 8043b66:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8043b68:	687b      	ldr	r3, [r7, #4]
 8043b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8043b6c:	f003 031f 	and.w	r3, r3, #31
 8043b70:	2208      	movs	r2, #8
 8043b72:	409a      	lsls	r2, r3
 8043b74:	6a3b      	ldr	r3, [r7, #32]
 8043b76:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8043b78:	687b      	ldr	r3, [r7, #4]
 8043b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8043b7c:	f043 0201 	orr.w	r2, r3, #1
 8043b80:	687b      	ldr	r3, [r7, #4]
 8043b82:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8043b84:	687b      	ldr	r3, [r7, #4]
 8043b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8043b88:	f003 031f 	and.w	r3, r3, #31
 8043b8c:	69ba      	ldr	r2, [r7, #24]
 8043b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8043b92:	f003 0301 	and.w	r3, r3, #1
 8043b96:	2b00      	cmp	r3, #0
 8043b98:	d06e      	beq.n	8043c78 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8043b9a:	687b      	ldr	r3, [r7, #4]
 8043b9c:	681b      	ldr	r3, [r3, #0]
 8043b9e:	4a69      	ldr	r2, [pc, #420]	; (8043d44 <HAL_DMA_IRQHandler+0x3f8>)
 8043ba0:	4293      	cmp	r3, r2
 8043ba2:	d04a      	beq.n	8043c3a <HAL_DMA_IRQHandler+0x2ee>
 8043ba4:	687b      	ldr	r3, [r7, #4]
 8043ba6:	681b      	ldr	r3, [r3, #0]
 8043ba8:	4a67      	ldr	r2, [pc, #412]	; (8043d48 <HAL_DMA_IRQHandler+0x3fc>)
 8043baa:	4293      	cmp	r3, r2
 8043bac:	d045      	beq.n	8043c3a <HAL_DMA_IRQHandler+0x2ee>
 8043bae:	687b      	ldr	r3, [r7, #4]
 8043bb0:	681b      	ldr	r3, [r3, #0]
 8043bb2:	4a66      	ldr	r2, [pc, #408]	; (8043d4c <HAL_DMA_IRQHandler+0x400>)
 8043bb4:	4293      	cmp	r3, r2
 8043bb6:	d040      	beq.n	8043c3a <HAL_DMA_IRQHandler+0x2ee>
 8043bb8:	687b      	ldr	r3, [r7, #4]
 8043bba:	681b      	ldr	r3, [r3, #0]
 8043bbc:	4a64      	ldr	r2, [pc, #400]	; (8043d50 <HAL_DMA_IRQHandler+0x404>)
 8043bbe:	4293      	cmp	r3, r2
 8043bc0:	d03b      	beq.n	8043c3a <HAL_DMA_IRQHandler+0x2ee>
 8043bc2:	687b      	ldr	r3, [r7, #4]
 8043bc4:	681b      	ldr	r3, [r3, #0]
 8043bc6:	4a63      	ldr	r2, [pc, #396]	; (8043d54 <HAL_DMA_IRQHandler+0x408>)
 8043bc8:	4293      	cmp	r3, r2
 8043bca:	d036      	beq.n	8043c3a <HAL_DMA_IRQHandler+0x2ee>
 8043bcc:	687b      	ldr	r3, [r7, #4]
 8043bce:	681b      	ldr	r3, [r3, #0]
 8043bd0:	4a61      	ldr	r2, [pc, #388]	; (8043d58 <HAL_DMA_IRQHandler+0x40c>)
 8043bd2:	4293      	cmp	r3, r2
 8043bd4:	d031      	beq.n	8043c3a <HAL_DMA_IRQHandler+0x2ee>
 8043bd6:	687b      	ldr	r3, [r7, #4]
 8043bd8:	681b      	ldr	r3, [r3, #0]
 8043bda:	4a60      	ldr	r2, [pc, #384]	; (8043d5c <HAL_DMA_IRQHandler+0x410>)
 8043bdc:	4293      	cmp	r3, r2
 8043bde:	d02c      	beq.n	8043c3a <HAL_DMA_IRQHandler+0x2ee>
 8043be0:	687b      	ldr	r3, [r7, #4]
 8043be2:	681b      	ldr	r3, [r3, #0]
 8043be4:	4a5e      	ldr	r2, [pc, #376]	; (8043d60 <HAL_DMA_IRQHandler+0x414>)
 8043be6:	4293      	cmp	r3, r2
 8043be8:	d027      	beq.n	8043c3a <HAL_DMA_IRQHandler+0x2ee>
 8043bea:	687b      	ldr	r3, [r7, #4]
 8043bec:	681b      	ldr	r3, [r3, #0]
 8043bee:	4a5d      	ldr	r2, [pc, #372]	; (8043d64 <HAL_DMA_IRQHandler+0x418>)
 8043bf0:	4293      	cmp	r3, r2
 8043bf2:	d022      	beq.n	8043c3a <HAL_DMA_IRQHandler+0x2ee>
 8043bf4:	687b      	ldr	r3, [r7, #4]
 8043bf6:	681b      	ldr	r3, [r3, #0]
 8043bf8:	4a5b      	ldr	r2, [pc, #364]	; (8043d68 <HAL_DMA_IRQHandler+0x41c>)
 8043bfa:	4293      	cmp	r3, r2
 8043bfc:	d01d      	beq.n	8043c3a <HAL_DMA_IRQHandler+0x2ee>
 8043bfe:	687b      	ldr	r3, [r7, #4]
 8043c00:	681b      	ldr	r3, [r3, #0]
 8043c02:	4a5a      	ldr	r2, [pc, #360]	; (8043d6c <HAL_DMA_IRQHandler+0x420>)
 8043c04:	4293      	cmp	r3, r2
 8043c06:	d018      	beq.n	8043c3a <HAL_DMA_IRQHandler+0x2ee>
 8043c08:	687b      	ldr	r3, [r7, #4]
 8043c0a:	681b      	ldr	r3, [r3, #0]
 8043c0c:	4a58      	ldr	r2, [pc, #352]	; (8043d70 <HAL_DMA_IRQHandler+0x424>)
 8043c0e:	4293      	cmp	r3, r2
 8043c10:	d013      	beq.n	8043c3a <HAL_DMA_IRQHandler+0x2ee>
 8043c12:	687b      	ldr	r3, [r7, #4]
 8043c14:	681b      	ldr	r3, [r3, #0]
 8043c16:	4a57      	ldr	r2, [pc, #348]	; (8043d74 <HAL_DMA_IRQHandler+0x428>)
 8043c18:	4293      	cmp	r3, r2
 8043c1a:	d00e      	beq.n	8043c3a <HAL_DMA_IRQHandler+0x2ee>
 8043c1c:	687b      	ldr	r3, [r7, #4]
 8043c1e:	681b      	ldr	r3, [r3, #0]
 8043c20:	4a55      	ldr	r2, [pc, #340]	; (8043d78 <HAL_DMA_IRQHandler+0x42c>)
 8043c22:	4293      	cmp	r3, r2
 8043c24:	d009      	beq.n	8043c3a <HAL_DMA_IRQHandler+0x2ee>
 8043c26:	687b      	ldr	r3, [r7, #4]
 8043c28:	681b      	ldr	r3, [r3, #0]
 8043c2a:	4a54      	ldr	r2, [pc, #336]	; (8043d7c <HAL_DMA_IRQHandler+0x430>)
 8043c2c:	4293      	cmp	r3, r2
 8043c2e:	d004      	beq.n	8043c3a <HAL_DMA_IRQHandler+0x2ee>
 8043c30:	687b      	ldr	r3, [r7, #4]
 8043c32:	681b      	ldr	r3, [r3, #0]
 8043c34:	4a52      	ldr	r2, [pc, #328]	; (8043d80 <HAL_DMA_IRQHandler+0x434>)
 8043c36:	4293      	cmp	r3, r2
 8043c38:	d10a      	bne.n	8043c50 <HAL_DMA_IRQHandler+0x304>
 8043c3a:	687b      	ldr	r3, [r7, #4]
 8043c3c:	681b      	ldr	r3, [r3, #0]
 8043c3e:	695b      	ldr	r3, [r3, #20]
 8043c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8043c44:	2b00      	cmp	r3, #0
 8043c46:	bf14      	ite	ne
 8043c48:	2301      	movne	r3, #1
 8043c4a:	2300      	moveq	r3, #0
 8043c4c:	b2db      	uxtb	r3, r3
 8043c4e:	e003      	b.n	8043c58 <HAL_DMA_IRQHandler+0x30c>
 8043c50:	687b      	ldr	r3, [r7, #4]
 8043c52:	681b      	ldr	r3, [r3, #0]
 8043c54:	681b      	ldr	r3, [r3, #0]
 8043c56:	2300      	movs	r3, #0
 8043c58:	2b00      	cmp	r3, #0
 8043c5a:	d00d      	beq.n	8043c78 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8043c5c:	687b      	ldr	r3, [r7, #4]
 8043c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8043c60:	f003 031f 	and.w	r3, r3, #31
 8043c64:	2201      	movs	r2, #1
 8043c66:	409a      	lsls	r2, r3
 8043c68:	6a3b      	ldr	r3, [r7, #32]
 8043c6a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8043c6c:	687b      	ldr	r3, [r7, #4]
 8043c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8043c70:	f043 0202 	orr.w	r2, r3, #2
 8043c74:	687b      	ldr	r3, [r7, #4]
 8043c76:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8043c78:	687b      	ldr	r3, [r7, #4]
 8043c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8043c7c:	f003 031f 	and.w	r3, r3, #31
 8043c80:	2204      	movs	r2, #4
 8043c82:	409a      	lsls	r2, r3
 8043c84:	69bb      	ldr	r3, [r7, #24]
 8043c86:	4013      	ands	r3, r2
 8043c88:	2b00      	cmp	r3, #0
 8043c8a:	f000 808f 	beq.w	8043dac <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8043c8e:	687b      	ldr	r3, [r7, #4]
 8043c90:	681b      	ldr	r3, [r3, #0]
 8043c92:	4a2c      	ldr	r2, [pc, #176]	; (8043d44 <HAL_DMA_IRQHandler+0x3f8>)
 8043c94:	4293      	cmp	r3, r2
 8043c96:	d04a      	beq.n	8043d2e <HAL_DMA_IRQHandler+0x3e2>
 8043c98:	687b      	ldr	r3, [r7, #4]
 8043c9a:	681b      	ldr	r3, [r3, #0]
 8043c9c:	4a2a      	ldr	r2, [pc, #168]	; (8043d48 <HAL_DMA_IRQHandler+0x3fc>)
 8043c9e:	4293      	cmp	r3, r2
 8043ca0:	d045      	beq.n	8043d2e <HAL_DMA_IRQHandler+0x3e2>
 8043ca2:	687b      	ldr	r3, [r7, #4]
 8043ca4:	681b      	ldr	r3, [r3, #0]
 8043ca6:	4a29      	ldr	r2, [pc, #164]	; (8043d4c <HAL_DMA_IRQHandler+0x400>)
 8043ca8:	4293      	cmp	r3, r2
 8043caa:	d040      	beq.n	8043d2e <HAL_DMA_IRQHandler+0x3e2>
 8043cac:	687b      	ldr	r3, [r7, #4]
 8043cae:	681b      	ldr	r3, [r3, #0]
 8043cb0:	4a27      	ldr	r2, [pc, #156]	; (8043d50 <HAL_DMA_IRQHandler+0x404>)
 8043cb2:	4293      	cmp	r3, r2
 8043cb4:	d03b      	beq.n	8043d2e <HAL_DMA_IRQHandler+0x3e2>
 8043cb6:	687b      	ldr	r3, [r7, #4]
 8043cb8:	681b      	ldr	r3, [r3, #0]
 8043cba:	4a26      	ldr	r2, [pc, #152]	; (8043d54 <HAL_DMA_IRQHandler+0x408>)
 8043cbc:	4293      	cmp	r3, r2
 8043cbe:	d036      	beq.n	8043d2e <HAL_DMA_IRQHandler+0x3e2>
 8043cc0:	687b      	ldr	r3, [r7, #4]
 8043cc2:	681b      	ldr	r3, [r3, #0]
 8043cc4:	4a24      	ldr	r2, [pc, #144]	; (8043d58 <HAL_DMA_IRQHandler+0x40c>)
 8043cc6:	4293      	cmp	r3, r2
 8043cc8:	d031      	beq.n	8043d2e <HAL_DMA_IRQHandler+0x3e2>
 8043cca:	687b      	ldr	r3, [r7, #4]
 8043ccc:	681b      	ldr	r3, [r3, #0]
 8043cce:	4a23      	ldr	r2, [pc, #140]	; (8043d5c <HAL_DMA_IRQHandler+0x410>)
 8043cd0:	4293      	cmp	r3, r2
 8043cd2:	d02c      	beq.n	8043d2e <HAL_DMA_IRQHandler+0x3e2>
 8043cd4:	687b      	ldr	r3, [r7, #4]
 8043cd6:	681b      	ldr	r3, [r3, #0]
 8043cd8:	4a21      	ldr	r2, [pc, #132]	; (8043d60 <HAL_DMA_IRQHandler+0x414>)
 8043cda:	4293      	cmp	r3, r2
 8043cdc:	d027      	beq.n	8043d2e <HAL_DMA_IRQHandler+0x3e2>
 8043cde:	687b      	ldr	r3, [r7, #4]
 8043ce0:	681b      	ldr	r3, [r3, #0]
 8043ce2:	4a20      	ldr	r2, [pc, #128]	; (8043d64 <HAL_DMA_IRQHandler+0x418>)
 8043ce4:	4293      	cmp	r3, r2
 8043ce6:	d022      	beq.n	8043d2e <HAL_DMA_IRQHandler+0x3e2>
 8043ce8:	687b      	ldr	r3, [r7, #4]
 8043cea:	681b      	ldr	r3, [r3, #0]
 8043cec:	4a1e      	ldr	r2, [pc, #120]	; (8043d68 <HAL_DMA_IRQHandler+0x41c>)
 8043cee:	4293      	cmp	r3, r2
 8043cf0:	d01d      	beq.n	8043d2e <HAL_DMA_IRQHandler+0x3e2>
 8043cf2:	687b      	ldr	r3, [r7, #4]
 8043cf4:	681b      	ldr	r3, [r3, #0]
 8043cf6:	4a1d      	ldr	r2, [pc, #116]	; (8043d6c <HAL_DMA_IRQHandler+0x420>)
 8043cf8:	4293      	cmp	r3, r2
 8043cfa:	d018      	beq.n	8043d2e <HAL_DMA_IRQHandler+0x3e2>
 8043cfc:	687b      	ldr	r3, [r7, #4]
 8043cfe:	681b      	ldr	r3, [r3, #0]
 8043d00:	4a1b      	ldr	r2, [pc, #108]	; (8043d70 <HAL_DMA_IRQHandler+0x424>)
 8043d02:	4293      	cmp	r3, r2
 8043d04:	d013      	beq.n	8043d2e <HAL_DMA_IRQHandler+0x3e2>
 8043d06:	687b      	ldr	r3, [r7, #4]
 8043d08:	681b      	ldr	r3, [r3, #0]
 8043d0a:	4a1a      	ldr	r2, [pc, #104]	; (8043d74 <HAL_DMA_IRQHandler+0x428>)
 8043d0c:	4293      	cmp	r3, r2
 8043d0e:	d00e      	beq.n	8043d2e <HAL_DMA_IRQHandler+0x3e2>
 8043d10:	687b      	ldr	r3, [r7, #4]
 8043d12:	681b      	ldr	r3, [r3, #0]
 8043d14:	4a18      	ldr	r2, [pc, #96]	; (8043d78 <HAL_DMA_IRQHandler+0x42c>)
 8043d16:	4293      	cmp	r3, r2
 8043d18:	d009      	beq.n	8043d2e <HAL_DMA_IRQHandler+0x3e2>
 8043d1a:	687b      	ldr	r3, [r7, #4]
 8043d1c:	681b      	ldr	r3, [r3, #0]
 8043d1e:	4a17      	ldr	r2, [pc, #92]	; (8043d7c <HAL_DMA_IRQHandler+0x430>)
 8043d20:	4293      	cmp	r3, r2
 8043d22:	d004      	beq.n	8043d2e <HAL_DMA_IRQHandler+0x3e2>
 8043d24:	687b      	ldr	r3, [r7, #4]
 8043d26:	681b      	ldr	r3, [r3, #0]
 8043d28:	4a15      	ldr	r2, [pc, #84]	; (8043d80 <HAL_DMA_IRQHandler+0x434>)
 8043d2a:	4293      	cmp	r3, r2
 8043d2c:	d12a      	bne.n	8043d84 <HAL_DMA_IRQHandler+0x438>
 8043d2e:	687b      	ldr	r3, [r7, #4]
 8043d30:	681b      	ldr	r3, [r3, #0]
 8043d32:	681b      	ldr	r3, [r3, #0]
 8043d34:	f003 0302 	and.w	r3, r3, #2
 8043d38:	2b00      	cmp	r3, #0
 8043d3a:	bf14      	ite	ne
 8043d3c:	2301      	movne	r3, #1
 8043d3e:	2300      	moveq	r3, #0
 8043d40:	b2db      	uxtb	r3, r3
 8043d42:	e023      	b.n	8043d8c <HAL_DMA_IRQHandler+0x440>
 8043d44:	40020010 	.word	0x40020010
 8043d48:	40020028 	.word	0x40020028
 8043d4c:	40020040 	.word	0x40020040
 8043d50:	40020058 	.word	0x40020058
 8043d54:	40020070 	.word	0x40020070
 8043d58:	40020088 	.word	0x40020088
 8043d5c:	400200a0 	.word	0x400200a0
 8043d60:	400200b8 	.word	0x400200b8
 8043d64:	40020410 	.word	0x40020410
 8043d68:	40020428 	.word	0x40020428
 8043d6c:	40020440 	.word	0x40020440
 8043d70:	40020458 	.word	0x40020458
 8043d74:	40020470 	.word	0x40020470
 8043d78:	40020488 	.word	0x40020488
 8043d7c:	400204a0 	.word	0x400204a0
 8043d80:	400204b8 	.word	0x400204b8
 8043d84:	687b      	ldr	r3, [r7, #4]
 8043d86:	681b      	ldr	r3, [r3, #0]
 8043d88:	681b      	ldr	r3, [r3, #0]
 8043d8a:	2300      	movs	r3, #0
 8043d8c:	2b00      	cmp	r3, #0
 8043d8e:	d00d      	beq.n	8043dac <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8043d90:	687b      	ldr	r3, [r7, #4]
 8043d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8043d94:	f003 031f 	and.w	r3, r3, #31
 8043d98:	2204      	movs	r2, #4
 8043d9a:	409a      	lsls	r2, r3
 8043d9c:	6a3b      	ldr	r3, [r7, #32]
 8043d9e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8043da0:	687b      	ldr	r3, [r7, #4]
 8043da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8043da4:	f043 0204 	orr.w	r2, r3, #4
 8043da8:	687b      	ldr	r3, [r7, #4]
 8043daa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8043dac:	687b      	ldr	r3, [r7, #4]
 8043dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8043db0:	f003 031f 	and.w	r3, r3, #31
 8043db4:	2210      	movs	r2, #16
 8043db6:	409a      	lsls	r2, r3
 8043db8:	69bb      	ldr	r3, [r7, #24]
 8043dba:	4013      	ands	r3, r2
 8043dbc:	2b00      	cmp	r3, #0
 8043dbe:	f000 80a6 	beq.w	8043f0e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8043dc2:	687b      	ldr	r3, [r7, #4]
 8043dc4:	681b      	ldr	r3, [r3, #0]
 8043dc6:	4a85      	ldr	r2, [pc, #532]	; (8043fdc <HAL_DMA_IRQHandler+0x690>)
 8043dc8:	4293      	cmp	r3, r2
 8043dca:	d04a      	beq.n	8043e62 <HAL_DMA_IRQHandler+0x516>
 8043dcc:	687b      	ldr	r3, [r7, #4]
 8043dce:	681b      	ldr	r3, [r3, #0]
 8043dd0:	4a83      	ldr	r2, [pc, #524]	; (8043fe0 <HAL_DMA_IRQHandler+0x694>)
 8043dd2:	4293      	cmp	r3, r2
 8043dd4:	d045      	beq.n	8043e62 <HAL_DMA_IRQHandler+0x516>
 8043dd6:	687b      	ldr	r3, [r7, #4]
 8043dd8:	681b      	ldr	r3, [r3, #0]
 8043dda:	4a82      	ldr	r2, [pc, #520]	; (8043fe4 <HAL_DMA_IRQHandler+0x698>)
 8043ddc:	4293      	cmp	r3, r2
 8043dde:	d040      	beq.n	8043e62 <HAL_DMA_IRQHandler+0x516>
 8043de0:	687b      	ldr	r3, [r7, #4]
 8043de2:	681b      	ldr	r3, [r3, #0]
 8043de4:	4a80      	ldr	r2, [pc, #512]	; (8043fe8 <HAL_DMA_IRQHandler+0x69c>)
 8043de6:	4293      	cmp	r3, r2
 8043de8:	d03b      	beq.n	8043e62 <HAL_DMA_IRQHandler+0x516>
 8043dea:	687b      	ldr	r3, [r7, #4]
 8043dec:	681b      	ldr	r3, [r3, #0]
 8043dee:	4a7f      	ldr	r2, [pc, #508]	; (8043fec <HAL_DMA_IRQHandler+0x6a0>)
 8043df0:	4293      	cmp	r3, r2
 8043df2:	d036      	beq.n	8043e62 <HAL_DMA_IRQHandler+0x516>
 8043df4:	687b      	ldr	r3, [r7, #4]
 8043df6:	681b      	ldr	r3, [r3, #0]
 8043df8:	4a7d      	ldr	r2, [pc, #500]	; (8043ff0 <HAL_DMA_IRQHandler+0x6a4>)
 8043dfa:	4293      	cmp	r3, r2
 8043dfc:	d031      	beq.n	8043e62 <HAL_DMA_IRQHandler+0x516>
 8043dfe:	687b      	ldr	r3, [r7, #4]
 8043e00:	681b      	ldr	r3, [r3, #0]
 8043e02:	4a7c      	ldr	r2, [pc, #496]	; (8043ff4 <HAL_DMA_IRQHandler+0x6a8>)
 8043e04:	4293      	cmp	r3, r2
 8043e06:	d02c      	beq.n	8043e62 <HAL_DMA_IRQHandler+0x516>
 8043e08:	687b      	ldr	r3, [r7, #4]
 8043e0a:	681b      	ldr	r3, [r3, #0]
 8043e0c:	4a7a      	ldr	r2, [pc, #488]	; (8043ff8 <HAL_DMA_IRQHandler+0x6ac>)
 8043e0e:	4293      	cmp	r3, r2
 8043e10:	d027      	beq.n	8043e62 <HAL_DMA_IRQHandler+0x516>
 8043e12:	687b      	ldr	r3, [r7, #4]
 8043e14:	681b      	ldr	r3, [r3, #0]
 8043e16:	4a79      	ldr	r2, [pc, #484]	; (8043ffc <HAL_DMA_IRQHandler+0x6b0>)
 8043e18:	4293      	cmp	r3, r2
 8043e1a:	d022      	beq.n	8043e62 <HAL_DMA_IRQHandler+0x516>
 8043e1c:	687b      	ldr	r3, [r7, #4]
 8043e1e:	681b      	ldr	r3, [r3, #0]
 8043e20:	4a77      	ldr	r2, [pc, #476]	; (8044000 <HAL_DMA_IRQHandler+0x6b4>)
 8043e22:	4293      	cmp	r3, r2
 8043e24:	d01d      	beq.n	8043e62 <HAL_DMA_IRQHandler+0x516>
 8043e26:	687b      	ldr	r3, [r7, #4]
 8043e28:	681b      	ldr	r3, [r3, #0]
 8043e2a:	4a76      	ldr	r2, [pc, #472]	; (8044004 <HAL_DMA_IRQHandler+0x6b8>)
 8043e2c:	4293      	cmp	r3, r2
 8043e2e:	d018      	beq.n	8043e62 <HAL_DMA_IRQHandler+0x516>
 8043e30:	687b      	ldr	r3, [r7, #4]
 8043e32:	681b      	ldr	r3, [r3, #0]
 8043e34:	4a74      	ldr	r2, [pc, #464]	; (8044008 <HAL_DMA_IRQHandler+0x6bc>)
 8043e36:	4293      	cmp	r3, r2
 8043e38:	d013      	beq.n	8043e62 <HAL_DMA_IRQHandler+0x516>
 8043e3a:	687b      	ldr	r3, [r7, #4]
 8043e3c:	681b      	ldr	r3, [r3, #0]
 8043e3e:	4a73      	ldr	r2, [pc, #460]	; (804400c <HAL_DMA_IRQHandler+0x6c0>)
 8043e40:	4293      	cmp	r3, r2
 8043e42:	d00e      	beq.n	8043e62 <HAL_DMA_IRQHandler+0x516>
 8043e44:	687b      	ldr	r3, [r7, #4]
 8043e46:	681b      	ldr	r3, [r3, #0]
 8043e48:	4a71      	ldr	r2, [pc, #452]	; (8044010 <HAL_DMA_IRQHandler+0x6c4>)
 8043e4a:	4293      	cmp	r3, r2
 8043e4c:	d009      	beq.n	8043e62 <HAL_DMA_IRQHandler+0x516>
 8043e4e:	687b      	ldr	r3, [r7, #4]
 8043e50:	681b      	ldr	r3, [r3, #0]
 8043e52:	4a70      	ldr	r2, [pc, #448]	; (8044014 <HAL_DMA_IRQHandler+0x6c8>)
 8043e54:	4293      	cmp	r3, r2
 8043e56:	d004      	beq.n	8043e62 <HAL_DMA_IRQHandler+0x516>
 8043e58:	687b      	ldr	r3, [r7, #4]
 8043e5a:	681b      	ldr	r3, [r3, #0]
 8043e5c:	4a6e      	ldr	r2, [pc, #440]	; (8044018 <HAL_DMA_IRQHandler+0x6cc>)
 8043e5e:	4293      	cmp	r3, r2
 8043e60:	d10a      	bne.n	8043e78 <HAL_DMA_IRQHandler+0x52c>
 8043e62:	687b      	ldr	r3, [r7, #4]
 8043e64:	681b      	ldr	r3, [r3, #0]
 8043e66:	681b      	ldr	r3, [r3, #0]
 8043e68:	f003 0308 	and.w	r3, r3, #8
 8043e6c:	2b00      	cmp	r3, #0
 8043e6e:	bf14      	ite	ne
 8043e70:	2301      	movne	r3, #1
 8043e72:	2300      	moveq	r3, #0
 8043e74:	b2db      	uxtb	r3, r3
 8043e76:	e009      	b.n	8043e8c <HAL_DMA_IRQHandler+0x540>
 8043e78:	687b      	ldr	r3, [r7, #4]
 8043e7a:	681b      	ldr	r3, [r3, #0]
 8043e7c:	681b      	ldr	r3, [r3, #0]
 8043e7e:	f003 0304 	and.w	r3, r3, #4
 8043e82:	2b00      	cmp	r3, #0
 8043e84:	bf14      	ite	ne
 8043e86:	2301      	movne	r3, #1
 8043e88:	2300      	moveq	r3, #0
 8043e8a:	b2db      	uxtb	r3, r3
 8043e8c:	2b00      	cmp	r3, #0
 8043e8e:	d03e      	beq.n	8043f0e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8043e90:	687b      	ldr	r3, [r7, #4]
 8043e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8043e94:	f003 031f 	and.w	r3, r3, #31
 8043e98:	2210      	movs	r2, #16
 8043e9a:	409a      	lsls	r2, r3
 8043e9c:	6a3b      	ldr	r3, [r7, #32]
 8043e9e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8043ea0:	687b      	ldr	r3, [r7, #4]
 8043ea2:	681b      	ldr	r3, [r3, #0]
 8043ea4:	681b      	ldr	r3, [r3, #0]
 8043ea6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8043eaa:	2b00      	cmp	r3, #0
 8043eac:	d018      	beq.n	8043ee0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8043eae:	687b      	ldr	r3, [r7, #4]
 8043eb0:	681b      	ldr	r3, [r3, #0]
 8043eb2:	681b      	ldr	r3, [r3, #0]
 8043eb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8043eb8:	2b00      	cmp	r3, #0
 8043eba:	d108      	bne.n	8043ece <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8043ebc:	687b      	ldr	r3, [r7, #4]
 8043ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043ec0:	2b00      	cmp	r3, #0
 8043ec2:	d024      	beq.n	8043f0e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8043ec4:	687b      	ldr	r3, [r7, #4]
 8043ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043ec8:	6878      	ldr	r0, [r7, #4]
 8043eca:	4798      	blx	r3
 8043ecc:	e01f      	b.n	8043f0e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8043ece:	687b      	ldr	r3, [r7, #4]
 8043ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8043ed2:	2b00      	cmp	r3, #0
 8043ed4:	d01b      	beq.n	8043f0e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8043ed6:	687b      	ldr	r3, [r7, #4]
 8043ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8043eda:	6878      	ldr	r0, [r7, #4]
 8043edc:	4798      	blx	r3
 8043ede:	e016      	b.n	8043f0e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8043ee0:	687b      	ldr	r3, [r7, #4]
 8043ee2:	681b      	ldr	r3, [r3, #0]
 8043ee4:	681b      	ldr	r3, [r3, #0]
 8043ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8043eea:	2b00      	cmp	r3, #0
 8043eec:	d107      	bne.n	8043efe <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8043eee:	687b      	ldr	r3, [r7, #4]
 8043ef0:	681b      	ldr	r3, [r3, #0]
 8043ef2:	681a      	ldr	r2, [r3, #0]
 8043ef4:	687b      	ldr	r3, [r7, #4]
 8043ef6:	681b      	ldr	r3, [r3, #0]
 8043ef8:	f022 0208 	bic.w	r2, r2, #8
 8043efc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8043efe:	687b      	ldr	r3, [r7, #4]
 8043f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043f02:	2b00      	cmp	r3, #0
 8043f04:	d003      	beq.n	8043f0e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8043f06:	687b      	ldr	r3, [r7, #4]
 8043f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043f0a:	6878      	ldr	r0, [r7, #4]
 8043f0c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8043f0e:	687b      	ldr	r3, [r7, #4]
 8043f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8043f12:	f003 031f 	and.w	r3, r3, #31
 8043f16:	2220      	movs	r2, #32
 8043f18:	409a      	lsls	r2, r3
 8043f1a:	69bb      	ldr	r3, [r7, #24]
 8043f1c:	4013      	ands	r3, r2
 8043f1e:	2b00      	cmp	r3, #0
 8043f20:	f000 8110 	beq.w	8044144 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8043f24:	687b      	ldr	r3, [r7, #4]
 8043f26:	681b      	ldr	r3, [r3, #0]
 8043f28:	4a2c      	ldr	r2, [pc, #176]	; (8043fdc <HAL_DMA_IRQHandler+0x690>)
 8043f2a:	4293      	cmp	r3, r2
 8043f2c:	d04a      	beq.n	8043fc4 <HAL_DMA_IRQHandler+0x678>
 8043f2e:	687b      	ldr	r3, [r7, #4]
 8043f30:	681b      	ldr	r3, [r3, #0]
 8043f32:	4a2b      	ldr	r2, [pc, #172]	; (8043fe0 <HAL_DMA_IRQHandler+0x694>)
 8043f34:	4293      	cmp	r3, r2
 8043f36:	d045      	beq.n	8043fc4 <HAL_DMA_IRQHandler+0x678>
 8043f38:	687b      	ldr	r3, [r7, #4]
 8043f3a:	681b      	ldr	r3, [r3, #0]
 8043f3c:	4a29      	ldr	r2, [pc, #164]	; (8043fe4 <HAL_DMA_IRQHandler+0x698>)
 8043f3e:	4293      	cmp	r3, r2
 8043f40:	d040      	beq.n	8043fc4 <HAL_DMA_IRQHandler+0x678>
 8043f42:	687b      	ldr	r3, [r7, #4]
 8043f44:	681b      	ldr	r3, [r3, #0]
 8043f46:	4a28      	ldr	r2, [pc, #160]	; (8043fe8 <HAL_DMA_IRQHandler+0x69c>)
 8043f48:	4293      	cmp	r3, r2
 8043f4a:	d03b      	beq.n	8043fc4 <HAL_DMA_IRQHandler+0x678>
 8043f4c:	687b      	ldr	r3, [r7, #4]
 8043f4e:	681b      	ldr	r3, [r3, #0]
 8043f50:	4a26      	ldr	r2, [pc, #152]	; (8043fec <HAL_DMA_IRQHandler+0x6a0>)
 8043f52:	4293      	cmp	r3, r2
 8043f54:	d036      	beq.n	8043fc4 <HAL_DMA_IRQHandler+0x678>
 8043f56:	687b      	ldr	r3, [r7, #4]
 8043f58:	681b      	ldr	r3, [r3, #0]
 8043f5a:	4a25      	ldr	r2, [pc, #148]	; (8043ff0 <HAL_DMA_IRQHandler+0x6a4>)
 8043f5c:	4293      	cmp	r3, r2
 8043f5e:	d031      	beq.n	8043fc4 <HAL_DMA_IRQHandler+0x678>
 8043f60:	687b      	ldr	r3, [r7, #4]
 8043f62:	681b      	ldr	r3, [r3, #0]
 8043f64:	4a23      	ldr	r2, [pc, #140]	; (8043ff4 <HAL_DMA_IRQHandler+0x6a8>)
 8043f66:	4293      	cmp	r3, r2
 8043f68:	d02c      	beq.n	8043fc4 <HAL_DMA_IRQHandler+0x678>
 8043f6a:	687b      	ldr	r3, [r7, #4]
 8043f6c:	681b      	ldr	r3, [r3, #0]
 8043f6e:	4a22      	ldr	r2, [pc, #136]	; (8043ff8 <HAL_DMA_IRQHandler+0x6ac>)
 8043f70:	4293      	cmp	r3, r2
 8043f72:	d027      	beq.n	8043fc4 <HAL_DMA_IRQHandler+0x678>
 8043f74:	687b      	ldr	r3, [r7, #4]
 8043f76:	681b      	ldr	r3, [r3, #0]
 8043f78:	4a20      	ldr	r2, [pc, #128]	; (8043ffc <HAL_DMA_IRQHandler+0x6b0>)
 8043f7a:	4293      	cmp	r3, r2
 8043f7c:	d022      	beq.n	8043fc4 <HAL_DMA_IRQHandler+0x678>
 8043f7e:	687b      	ldr	r3, [r7, #4]
 8043f80:	681b      	ldr	r3, [r3, #0]
 8043f82:	4a1f      	ldr	r2, [pc, #124]	; (8044000 <HAL_DMA_IRQHandler+0x6b4>)
 8043f84:	4293      	cmp	r3, r2
 8043f86:	d01d      	beq.n	8043fc4 <HAL_DMA_IRQHandler+0x678>
 8043f88:	687b      	ldr	r3, [r7, #4]
 8043f8a:	681b      	ldr	r3, [r3, #0]
 8043f8c:	4a1d      	ldr	r2, [pc, #116]	; (8044004 <HAL_DMA_IRQHandler+0x6b8>)
 8043f8e:	4293      	cmp	r3, r2
 8043f90:	d018      	beq.n	8043fc4 <HAL_DMA_IRQHandler+0x678>
 8043f92:	687b      	ldr	r3, [r7, #4]
 8043f94:	681b      	ldr	r3, [r3, #0]
 8043f96:	4a1c      	ldr	r2, [pc, #112]	; (8044008 <HAL_DMA_IRQHandler+0x6bc>)
 8043f98:	4293      	cmp	r3, r2
 8043f9a:	d013      	beq.n	8043fc4 <HAL_DMA_IRQHandler+0x678>
 8043f9c:	687b      	ldr	r3, [r7, #4]
 8043f9e:	681b      	ldr	r3, [r3, #0]
 8043fa0:	4a1a      	ldr	r2, [pc, #104]	; (804400c <HAL_DMA_IRQHandler+0x6c0>)
 8043fa2:	4293      	cmp	r3, r2
 8043fa4:	d00e      	beq.n	8043fc4 <HAL_DMA_IRQHandler+0x678>
 8043fa6:	687b      	ldr	r3, [r7, #4]
 8043fa8:	681b      	ldr	r3, [r3, #0]
 8043faa:	4a19      	ldr	r2, [pc, #100]	; (8044010 <HAL_DMA_IRQHandler+0x6c4>)
 8043fac:	4293      	cmp	r3, r2
 8043fae:	d009      	beq.n	8043fc4 <HAL_DMA_IRQHandler+0x678>
 8043fb0:	687b      	ldr	r3, [r7, #4]
 8043fb2:	681b      	ldr	r3, [r3, #0]
 8043fb4:	4a17      	ldr	r2, [pc, #92]	; (8044014 <HAL_DMA_IRQHandler+0x6c8>)
 8043fb6:	4293      	cmp	r3, r2
 8043fb8:	d004      	beq.n	8043fc4 <HAL_DMA_IRQHandler+0x678>
 8043fba:	687b      	ldr	r3, [r7, #4]
 8043fbc:	681b      	ldr	r3, [r3, #0]
 8043fbe:	4a16      	ldr	r2, [pc, #88]	; (8044018 <HAL_DMA_IRQHandler+0x6cc>)
 8043fc0:	4293      	cmp	r3, r2
 8043fc2:	d12b      	bne.n	804401c <HAL_DMA_IRQHandler+0x6d0>
 8043fc4:	687b      	ldr	r3, [r7, #4]
 8043fc6:	681b      	ldr	r3, [r3, #0]
 8043fc8:	681b      	ldr	r3, [r3, #0]
 8043fca:	f003 0310 	and.w	r3, r3, #16
 8043fce:	2b00      	cmp	r3, #0
 8043fd0:	bf14      	ite	ne
 8043fd2:	2301      	movne	r3, #1
 8043fd4:	2300      	moveq	r3, #0
 8043fd6:	b2db      	uxtb	r3, r3
 8043fd8:	e02a      	b.n	8044030 <HAL_DMA_IRQHandler+0x6e4>
 8043fda:	bf00      	nop
 8043fdc:	40020010 	.word	0x40020010
 8043fe0:	40020028 	.word	0x40020028
 8043fe4:	40020040 	.word	0x40020040
 8043fe8:	40020058 	.word	0x40020058
 8043fec:	40020070 	.word	0x40020070
 8043ff0:	40020088 	.word	0x40020088
 8043ff4:	400200a0 	.word	0x400200a0
 8043ff8:	400200b8 	.word	0x400200b8
 8043ffc:	40020410 	.word	0x40020410
 8044000:	40020428 	.word	0x40020428
 8044004:	40020440 	.word	0x40020440
 8044008:	40020458 	.word	0x40020458
 804400c:	40020470 	.word	0x40020470
 8044010:	40020488 	.word	0x40020488
 8044014:	400204a0 	.word	0x400204a0
 8044018:	400204b8 	.word	0x400204b8
 804401c:	687b      	ldr	r3, [r7, #4]
 804401e:	681b      	ldr	r3, [r3, #0]
 8044020:	681b      	ldr	r3, [r3, #0]
 8044022:	f003 0302 	and.w	r3, r3, #2
 8044026:	2b00      	cmp	r3, #0
 8044028:	bf14      	ite	ne
 804402a:	2301      	movne	r3, #1
 804402c:	2300      	moveq	r3, #0
 804402e:	b2db      	uxtb	r3, r3
 8044030:	2b00      	cmp	r3, #0
 8044032:	f000 8087 	beq.w	8044144 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8044036:	687b      	ldr	r3, [r7, #4]
 8044038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 804403a:	f003 031f 	and.w	r3, r3, #31
 804403e:	2220      	movs	r2, #32
 8044040:	409a      	lsls	r2, r3
 8044042:	6a3b      	ldr	r3, [r7, #32]
 8044044:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8044046:	687b      	ldr	r3, [r7, #4]
 8044048:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 804404c:	b2db      	uxtb	r3, r3
 804404e:	2b04      	cmp	r3, #4
 8044050:	d139      	bne.n	80440c6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8044052:	687b      	ldr	r3, [r7, #4]
 8044054:	681b      	ldr	r3, [r3, #0]
 8044056:	681a      	ldr	r2, [r3, #0]
 8044058:	687b      	ldr	r3, [r7, #4]
 804405a:	681b      	ldr	r3, [r3, #0]
 804405c:	f022 0216 	bic.w	r2, r2, #22
 8044060:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8044062:	687b      	ldr	r3, [r7, #4]
 8044064:	681b      	ldr	r3, [r3, #0]
 8044066:	695a      	ldr	r2, [r3, #20]
 8044068:	687b      	ldr	r3, [r7, #4]
 804406a:	681b      	ldr	r3, [r3, #0]
 804406c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8044070:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8044072:	687b      	ldr	r3, [r7, #4]
 8044074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8044076:	2b00      	cmp	r3, #0
 8044078:	d103      	bne.n	8044082 <HAL_DMA_IRQHandler+0x736>
 804407a:	687b      	ldr	r3, [r7, #4]
 804407c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804407e:	2b00      	cmp	r3, #0
 8044080:	d007      	beq.n	8044092 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8044082:	687b      	ldr	r3, [r7, #4]
 8044084:	681b      	ldr	r3, [r3, #0]
 8044086:	681a      	ldr	r2, [r3, #0]
 8044088:	687b      	ldr	r3, [r7, #4]
 804408a:	681b      	ldr	r3, [r3, #0]
 804408c:	f022 0208 	bic.w	r2, r2, #8
 8044090:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8044092:	687b      	ldr	r3, [r7, #4]
 8044094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8044096:	f003 031f 	and.w	r3, r3, #31
 804409a:	223f      	movs	r2, #63	; 0x3f
 804409c:	409a      	lsls	r2, r3
 804409e:	6a3b      	ldr	r3, [r7, #32]
 80440a0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80440a2:	687b      	ldr	r3, [r7, #4]
 80440a4:	2201      	movs	r2, #1
 80440a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80440aa:	687b      	ldr	r3, [r7, #4]
 80440ac:	2200      	movs	r2, #0
 80440ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80440b2:	687b      	ldr	r3, [r7, #4]
 80440b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80440b6:	2b00      	cmp	r3, #0
 80440b8:	f000 834a 	beq.w	8044750 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80440bc:	687b      	ldr	r3, [r7, #4]
 80440be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80440c0:	6878      	ldr	r0, [r7, #4]
 80440c2:	4798      	blx	r3
          }
          return;
 80440c4:	e344      	b.n	8044750 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80440c6:	687b      	ldr	r3, [r7, #4]
 80440c8:	681b      	ldr	r3, [r3, #0]
 80440ca:	681b      	ldr	r3, [r3, #0]
 80440cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80440d0:	2b00      	cmp	r3, #0
 80440d2:	d018      	beq.n	8044106 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80440d4:	687b      	ldr	r3, [r7, #4]
 80440d6:	681b      	ldr	r3, [r3, #0]
 80440d8:	681b      	ldr	r3, [r3, #0]
 80440da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80440de:	2b00      	cmp	r3, #0
 80440e0:	d108      	bne.n	80440f4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80440e2:	687b      	ldr	r3, [r7, #4]
 80440e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80440e6:	2b00      	cmp	r3, #0
 80440e8:	d02c      	beq.n	8044144 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80440ea:	687b      	ldr	r3, [r7, #4]
 80440ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80440ee:	6878      	ldr	r0, [r7, #4]
 80440f0:	4798      	blx	r3
 80440f2:	e027      	b.n	8044144 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80440f4:	687b      	ldr	r3, [r7, #4]
 80440f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80440f8:	2b00      	cmp	r3, #0
 80440fa:	d023      	beq.n	8044144 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80440fc:	687b      	ldr	r3, [r7, #4]
 80440fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8044100:	6878      	ldr	r0, [r7, #4]
 8044102:	4798      	blx	r3
 8044104:	e01e      	b.n	8044144 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8044106:	687b      	ldr	r3, [r7, #4]
 8044108:	681b      	ldr	r3, [r3, #0]
 804410a:	681b      	ldr	r3, [r3, #0]
 804410c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8044110:	2b00      	cmp	r3, #0
 8044112:	d10f      	bne.n	8044134 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8044114:	687b      	ldr	r3, [r7, #4]
 8044116:	681b      	ldr	r3, [r3, #0]
 8044118:	681a      	ldr	r2, [r3, #0]
 804411a:	687b      	ldr	r3, [r7, #4]
 804411c:	681b      	ldr	r3, [r3, #0]
 804411e:	f022 0210 	bic.w	r2, r2, #16
 8044122:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8044124:	687b      	ldr	r3, [r7, #4]
 8044126:	2201      	movs	r2, #1
 8044128:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 804412c:	687b      	ldr	r3, [r7, #4]
 804412e:	2200      	movs	r2, #0
 8044130:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8044134:	687b      	ldr	r3, [r7, #4]
 8044136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8044138:	2b00      	cmp	r3, #0
 804413a:	d003      	beq.n	8044144 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 804413c:	687b      	ldr	r3, [r7, #4]
 804413e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8044140:	6878      	ldr	r0, [r7, #4]
 8044142:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8044144:	687b      	ldr	r3, [r7, #4]
 8044146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8044148:	2b00      	cmp	r3, #0
 804414a:	f000 8306 	beq.w	804475a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 804414e:	687b      	ldr	r3, [r7, #4]
 8044150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8044152:	f003 0301 	and.w	r3, r3, #1
 8044156:	2b00      	cmp	r3, #0
 8044158:	f000 8088 	beq.w	804426c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 804415c:	687b      	ldr	r3, [r7, #4]
 804415e:	2204      	movs	r2, #4
 8044160:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8044164:	687b      	ldr	r3, [r7, #4]
 8044166:	681b      	ldr	r3, [r3, #0]
 8044168:	4a7a      	ldr	r2, [pc, #488]	; (8044354 <HAL_DMA_IRQHandler+0xa08>)
 804416a:	4293      	cmp	r3, r2
 804416c:	d04a      	beq.n	8044204 <HAL_DMA_IRQHandler+0x8b8>
 804416e:	687b      	ldr	r3, [r7, #4]
 8044170:	681b      	ldr	r3, [r3, #0]
 8044172:	4a79      	ldr	r2, [pc, #484]	; (8044358 <HAL_DMA_IRQHandler+0xa0c>)
 8044174:	4293      	cmp	r3, r2
 8044176:	d045      	beq.n	8044204 <HAL_DMA_IRQHandler+0x8b8>
 8044178:	687b      	ldr	r3, [r7, #4]
 804417a:	681b      	ldr	r3, [r3, #0]
 804417c:	4a77      	ldr	r2, [pc, #476]	; (804435c <HAL_DMA_IRQHandler+0xa10>)
 804417e:	4293      	cmp	r3, r2
 8044180:	d040      	beq.n	8044204 <HAL_DMA_IRQHandler+0x8b8>
 8044182:	687b      	ldr	r3, [r7, #4]
 8044184:	681b      	ldr	r3, [r3, #0]
 8044186:	4a76      	ldr	r2, [pc, #472]	; (8044360 <HAL_DMA_IRQHandler+0xa14>)
 8044188:	4293      	cmp	r3, r2
 804418a:	d03b      	beq.n	8044204 <HAL_DMA_IRQHandler+0x8b8>
 804418c:	687b      	ldr	r3, [r7, #4]
 804418e:	681b      	ldr	r3, [r3, #0]
 8044190:	4a74      	ldr	r2, [pc, #464]	; (8044364 <HAL_DMA_IRQHandler+0xa18>)
 8044192:	4293      	cmp	r3, r2
 8044194:	d036      	beq.n	8044204 <HAL_DMA_IRQHandler+0x8b8>
 8044196:	687b      	ldr	r3, [r7, #4]
 8044198:	681b      	ldr	r3, [r3, #0]
 804419a:	4a73      	ldr	r2, [pc, #460]	; (8044368 <HAL_DMA_IRQHandler+0xa1c>)
 804419c:	4293      	cmp	r3, r2
 804419e:	d031      	beq.n	8044204 <HAL_DMA_IRQHandler+0x8b8>
 80441a0:	687b      	ldr	r3, [r7, #4]
 80441a2:	681b      	ldr	r3, [r3, #0]
 80441a4:	4a71      	ldr	r2, [pc, #452]	; (804436c <HAL_DMA_IRQHandler+0xa20>)
 80441a6:	4293      	cmp	r3, r2
 80441a8:	d02c      	beq.n	8044204 <HAL_DMA_IRQHandler+0x8b8>
 80441aa:	687b      	ldr	r3, [r7, #4]
 80441ac:	681b      	ldr	r3, [r3, #0]
 80441ae:	4a70      	ldr	r2, [pc, #448]	; (8044370 <HAL_DMA_IRQHandler+0xa24>)
 80441b0:	4293      	cmp	r3, r2
 80441b2:	d027      	beq.n	8044204 <HAL_DMA_IRQHandler+0x8b8>
 80441b4:	687b      	ldr	r3, [r7, #4]
 80441b6:	681b      	ldr	r3, [r3, #0]
 80441b8:	4a6e      	ldr	r2, [pc, #440]	; (8044374 <HAL_DMA_IRQHandler+0xa28>)
 80441ba:	4293      	cmp	r3, r2
 80441bc:	d022      	beq.n	8044204 <HAL_DMA_IRQHandler+0x8b8>
 80441be:	687b      	ldr	r3, [r7, #4]
 80441c0:	681b      	ldr	r3, [r3, #0]
 80441c2:	4a6d      	ldr	r2, [pc, #436]	; (8044378 <HAL_DMA_IRQHandler+0xa2c>)
 80441c4:	4293      	cmp	r3, r2
 80441c6:	d01d      	beq.n	8044204 <HAL_DMA_IRQHandler+0x8b8>
 80441c8:	687b      	ldr	r3, [r7, #4]
 80441ca:	681b      	ldr	r3, [r3, #0]
 80441cc:	4a6b      	ldr	r2, [pc, #428]	; (804437c <HAL_DMA_IRQHandler+0xa30>)
 80441ce:	4293      	cmp	r3, r2
 80441d0:	d018      	beq.n	8044204 <HAL_DMA_IRQHandler+0x8b8>
 80441d2:	687b      	ldr	r3, [r7, #4]
 80441d4:	681b      	ldr	r3, [r3, #0]
 80441d6:	4a6a      	ldr	r2, [pc, #424]	; (8044380 <HAL_DMA_IRQHandler+0xa34>)
 80441d8:	4293      	cmp	r3, r2
 80441da:	d013      	beq.n	8044204 <HAL_DMA_IRQHandler+0x8b8>
 80441dc:	687b      	ldr	r3, [r7, #4]
 80441de:	681b      	ldr	r3, [r3, #0]
 80441e0:	4a68      	ldr	r2, [pc, #416]	; (8044384 <HAL_DMA_IRQHandler+0xa38>)
 80441e2:	4293      	cmp	r3, r2
 80441e4:	d00e      	beq.n	8044204 <HAL_DMA_IRQHandler+0x8b8>
 80441e6:	687b      	ldr	r3, [r7, #4]
 80441e8:	681b      	ldr	r3, [r3, #0]
 80441ea:	4a67      	ldr	r2, [pc, #412]	; (8044388 <HAL_DMA_IRQHandler+0xa3c>)
 80441ec:	4293      	cmp	r3, r2
 80441ee:	d009      	beq.n	8044204 <HAL_DMA_IRQHandler+0x8b8>
 80441f0:	687b      	ldr	r3, [r7, #4]
 80441f2:	681b      	ldr	r3, [r3, #0]
 80441f4:	4a65      	ldr	r2, [pc, #404]	; (804438c <HAL_DMA_IRQHandler+0xa40>)
 80441f6:	4293      	cmp	r3, r2
 80441f8:	d004      	beq.n	8044204 <HAL_DMA_IRQHandler+0x8b8>
 80441fa:	687b      	ldr	r3, [r7, #4]
 80441fc:	681b      	ldr	r3, [r3, #0]
 80441fe:	4a64      	ldr	r2, [pc, #400]	; (8044390 <HAL_DMA_IRQHandler+0xa44>)
 8044200:	4293      	cmp	r3, r2
 8044202:	d108      	bne.n	8044216 <HAL_DMA_IRQHandler+0x8ca>
 8044204:	687b      	ldr	r3, [r7, #4]
 8044206:	681b      	ldr	r3, [r3, #0]
 8044208:	681a      	ldr	r2, [r3, #0]
 804420a:	687b      	ldr	r3, [r7, #4]
 804420c:	681b      	ldr	r3, [r3, #0]
 804420e:	f022 0201 	bic.w	r2, r2, #1
 8044212:	601a      	str	r2, [r3, #0]
 8044214:	e007      	b.n	8044226 <HAL_DMA_IRQHandler+0x8da>
 8044216:	687b      	ldr	r3, [r7, #4]
 8044218:	681b      	ldr	r3, [r3, #0]
 804421a:	681a      	ldr	r2, [r3, #0]
 804421c:	687b      	ldr	r3, [r7, #4]
 804421e:	681b      	ldr	r3, [r3, #0]
 8044220:	f022 0201 	bic.w	r2, r2, #1
 8044224:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8044226:	68fb      	ldr	r3, [r7, #12]
 8044228:	3301      	adds	r3, #1
 804422a:	60fb      	str	r3, [r7, #12]
 804422c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 804422e:	429a      	cmp	r2, r3
 8044230:	d307      	bcc.n	8044242 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8044232:	687b      	ldr	r3, [r7, #4]
 8044234:	681b      	ldr	r3, [r3, #0]
 8044236:	681b      	ldr	r3, [r3, #0]
 8044238:	f003 0301 	and.w	r3, r3, #1
 804423c:	2b00      	cmp	r3, #0
 804423e:	d1f2      	bne.n	8044226 <HAL_DMA_IRQHandler+0x8da>
 8044240:	e000      	b.n	8044244 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8044242:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8044244:	687b      	ldr	r3, [r7, #4]
 8044246:	681b      	ldr	r3, [r3, #0]
 8044248:	681b      	ldr	r3, [r3, #0]
 804424a:	f003 0301 	and.w	r3, r3, #1
 804424e:	2b00      	cmp	r3, #0
 8044250:	d004      	beq.n	804425c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8044252:	687b      	ldr	r3, [r7, #4]
 8044254:	2203      	movs	r2, #3
 8044256:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 804425a:	e003      	b.n	8044264 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 804425c:	687b      	ldr	r3, [r7, #4]
 804425e:	2201      	movs	r2, #1
 8044260:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8044264:	687b      	ldr	r3, [r7, #4]
 8044266:	2200      	movs	r2, #0
 8044268:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 804426c:	687b      	ldr	r3, [r7, #4]
 804426e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8044270:	2b00      	cmp	r3, #0
 8044272:	f000 8272 	beq.w	804475a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8044276:	687b      	ldr	r3, [r7, #4]
 8044278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804427a:	6878      	ldr	r0, [r7, #4]
 804427c:	4798      	blx	r3
 804427e:	e26c      	b.n	804475a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8044280:	687b      	ldr	r3, [r7, #4]
 8044282:	681b      	ldr	r3, [r3, #0]
 8044284:	4a43      	ldr	r2, [pc, #268]	; (8044394 <HAL_DMA_IRQHandler+0xa48>)
 8044286:	4293      	cmp	r3, r2
 8044288:	d022      	beq.n	80442d0 <HAL_DMA_IRQHandler+0x984>
 804428a:	687b      	ldr	r3, [r7, #4]
 804428c:	681b      	ldr	r3, [r3, #0]
 804428e:	4a42      	ldr	r2, [pc, #264]	; (8044398 <HAL_DMA_IRQHandler+0xa4c>)
 8044290:	4293      	cmp	r3, r2
 8044292:	d01d      	beq.n	80442d0 <HAL_DMA_IRQHandler+0x984>
 8044294:	687b      	ldr	r3, [r7, #4]
 8044296:	681b      	ldr	r3, [r3, #0]
 8044298:	4a40      	ldr	r2, [pc, #256]	; (804439c <HAL_DMA_IRQHandler+0xa50>)
 804429a:	4293      	cmp	r3, r2
 804429c:	d018      	beq.n	80442d0 <HAL_DMA_IRQHandler+0x984>
 804429e:	687b      	ldr	r3, [r7, #4]
 80442a0:	681b      	ldr	r3, [r3, #0]
 80442a2:	4a3f      	ldr	r2, [pc, #252]	; (80443a0 <HAL_DMA_IRQHandler+0xa54>)
 80442a4:	4293      	cmp	r3, r2
 80442a6:	d013      	beq.n	80442d0 <HAL_DMA_IRQHandler+0x984>
 80442a8:	687b      	ldr	r3, [r7, #4]
 80442aa:	681b      	ldr	r3, [r3, #0]
 80442ac:	4a3d      	ldr	r2, [pc, #244]	; (80443a4 <HAL_DMA_IRQHandler+0xa58>)
 80442ae:	4293      	cmp	r3, r2
 80442b0:	d00e      	beq.n	80442d0 <HAL_DMA_IRQHandler+0x984>
 80442b2:	687b      	ldr	r3, [r7, #4]
 80442b4:	681b      	ldr	r3, [r3, #0]
 80442b6:	4a3c      	ldr	r2, [pc, #240]	; (80443a8 <HAL_DMA_IRQHandler+0xa5c>)
 80442b8:	4293      	cmp	r3, r2
 80442ba:	d009      	beq.n	80442d0 <HAL_DMA_IRQHandler+0x984>
 80442bc:	687b      	ldr	r3, [r7, #4]
 80442be:	681b      	ldr	r3, [r3, #0]
 80442c0:	4a3a      	ldr	r2, [pc, #232]	; (80443ac <HAL_DMA_IRQHandler+0xa60>)
 80442c2:	4293      	cmp	r3, r2
 80442c4:	d004      	beq.n	80442d0 <HAL_DMA_IRQHandler+0x984>
 80442c6:	687b      	ldr	r3, [r7, #4]
 80442c8:	681b      	ldr	r3, [r3, #0]
 80442ca:	4a39      	ldr	r2, [pc, #228]	; (80443b0 <HAL_DMA_IRQHandler+0xa64>)
 80442cc:	4293      	cmp	r3, r2
 80442ce:	d101      	bne.n	80442d4 <HAL_DMA_IRQHandler+0x988>
 80442d0:	2301      	movs	r3, #1
 80442d2:	e000      	b.n	80442d6 <HAL_DMA_IRQHandler+0x98a>
 80442d4:	2300      	movs	r3, #0
 80442d6:	2b00      	cmp	r3, #0
 80442d8:	f000 823f 	beq.w	804475a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80442dc:	687b      	ldr	r3, [r7, #4]
 80442de:	681b      	ldr	r3, [r3, #0]
 80442e0:	681b      	ldr	r3, [r3, #0]
 80442e2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80442e4:	687b      	ldr	r3, [r7, #4]
 80442e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80442e8:	f003 031f 	and.w	r3, r3, #31
 80442ec:	2204      	movs	r2, #4
 80442ee:	409a      	lsls	r2, r3
 80442f0:	697b      	ldr	r3, [r7, #20]
 80442f2:	4013      	ands	r3, r2
 80442f4:	2b00      	cmp	r3, #0
 80442f6:	f000 80cd 	beq.w	8044494 <HAL_DMA_IRQHandler+0xb48>
 80442fa:	693b      	ldr	r3, [r7, #16]
 80442fc:	f003 0304 	and.w	r3, r3, #4
 8044300:	2b00      	cmp	r3, #0
 8044302:	f000 80c7 	beq.w	8044494 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8044306:	687b      	ldr	r3, [r7, #4]
 8044308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 804430a:	f003 031f 	and.w	r3, r3, #31
 804430e:	2204      	movs	r2, #4
 8044310:	409a      	lsls	r2, r3
 8044312:	69fb      	ldr	r3, [r7, #28]
 8044314:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8044316:	693b      	ldr	r3, [r7, #16]
 8044318:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 804431c:	2b00      	cmp	r3, #0
 804431e:	d049      	beq.n	80443b4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8044320:	693b      	ldr	r3, [r7, #16]
 8044322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8044326:	2b00      	cmp	r3, #0
 8044328:	d109      	bne.n	804433e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 804432a:	687b      	ldr	r3, [r7, #4]
 804432c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804432e:	2b00      	cmp	r3, #0
 8044330:	f000 8210 	beq.w	8044754 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8044334:	687b      	ldr	r3, [r7, #4]
 8044336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8044338:	6878      	ldr	r0, [r7, #4]
 804433a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 804433c:	e20a      	b.n	8044754 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 804433e:	687b      	ldr	r3, [r7, #4]
 8044340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8044342:	2b00      	cmp	r3, #0
 8044344:	f000 8206 	beq.w	8044754 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8044348:	687b      	ldr	r3, [r7, #4]
 804434a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804434c:	6878      	ldr	r0, [r7, #4]
 804434e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8044350:	e200      	b.n	8044754 <HAL_DMA_IRQHandler+0xe08>
 8044352:	bf00      	nop
 8044354:	40020010 	.word	0x40020010
 8044358:	40020028 	.word	0x40020028
 804435c:	40020040 	.word	0x40020040
 8044360:	40020058 	.word	0x40020058
 8044364:	40020070 	.word	0x40020070
 8044368:	40020088 	.word	0x40020088
 804436c:	400200a0 	.word	0x400200a0
 8044370:	400200b8 	.word	0x400200b8
 8044374:	40020410 	.word	0x40020410
 8044378:	40020428 	.word	0x40020428
 804437c:	40020440 	.word	0x40020440
 8044380:	40020458 	.word	0x40020458
 8044384:	40020470 	.word	0x40020470
 8044388:	40020488 	.word	0x40020488
 804438c:	400204a0 	.word	0x400204a0
 8044390:	400204b8 	.word	0x400204b8
 8044394:	58025408 	.word	0x58025408
 8044398:	5802541c 	.word	0x5802541c
 804439c:	58025430 	.word	0x58025430
 80443a0:	58025444 	.word	0x58025444
 80443a4:	58025458 	.word	0x58025458
 80443a8:	5802546c 	.word	0x5802546c
 80443ac:	58025480 	.word	0x58025480
 80443b0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80443b4:	693b      	ldr	r3, [r7, #16]
 80443b6:	f003 0320 	and.w	r3, r3, #32
 80443ba:	2b00      	cmp	r3, #0
 80443bc:	d160      	bne.n	8044480 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80443be:	687b      	ldr	r3, [r7, #4]
 80443c0:	681b      	ldr	r3, [r3, #0]
 80443c2:	4a7f      	ldr	r2, [pc, #508]	; (80445c0 <HAL_DMA_IRQHandler+0xc74>)
 80443c4:	4293      	cmp	r3, r2
 80443c6:	d04a      	beq.n	804445e <HAL_DMA_IRQHandler+0xb12>
 80443c8:	687b      	ldr	r3, [r7, #4]
 80443ca:	681b      	ldr	r3, [r3, #0]
 80443cc:	4a7d      	ldr	r2, [pc, #500]	; (80445c4 <HAL_DMA_IRQHandler+0xc78>)
 80443ce:	4293      	cmp	r3, r2
 80443d0:	d045      	beq.n	804445e <HAL_DMA_IRQHandler+0xb12>
 80443d2:	687b      	ldr	r3, [r7, #4]
 80443d4:	681b      	ldr	r3, [r3, #0]
 80443d6:	4a7c      	ldr	r2, [pc, #496]	; (80445c8 <HAL_DMA_IRQHandler+0xc7c>)
 80443d8:	4293      	cmp	r3, r2
 80443da:	d040      	beq.n	804445e <HAL_DMA_IRQHandler+0xb12>
 80443dc:	687b      	ldr	r3, [r7, #4]
 80443de:	681b      	ldr	r3, [r3, #0]
 80443e0:	4a7a      	ldr	r2, [pc, #488]	; (80445cc <HAL_DMA_IRQHandler+0xc80>)
 80443e2:	4293      	cmp	r3, r2
 80443e4:	d03b      	beq.n	804445e <HAL_DMA_IRQHandler+0xb12>
 80443e6:	687b      	ldr	r3, [r7, #4]
 80443e8:	681b      	ldr	r3, [r3, #0]
 80443ea:	4a79      	ldr	r2, [pc, #484]	; (80445d0 <HAL_DMA_IRQHandler+0xc84>)
 80443ec:	4293      	cmp	r3, r2
 80443ee:	d036      	beq.n	804445e <HAL_DMA_IRQHandler+0xb12>
 80443f0:	687b      	ldr	r3, [r7, #4]
 80443f2:	681b      	ldr	r3, [r3, #0]
 80443f4:	4a77      	ldr	r2, [pc, #476]	; (80445d4 <HAL_DMA_IRQHandler+0xc88>)
 80443f6:	4293      	cmp	r3, r2
 80443f8:	d031      	beq.n	804445e <HAL_DMA_IRQHandler+0xb12>
 80443fa:	687b      	ldr	r3, [r7, #4]
 80443fc:	681b      	ldr	r3, [r3, #0]
 80443fe:	4a76      	ldr	r2, [pc, #472]	; (80445d8 <HAL_DMA_IRQHandler+0xc8c>)
 8044400:	4293      	cmp	r3, r2
 8044402:	d02c      	beq.n	804445e <HAL_DMA_IRQHandler+0xb12>
 8044404:	687b      	ldr	r3, [r7, #4]
 8044406:	681b      	ldr	r3, [r3, #0]
 8044408:	4a74      	ldr	r2, [pc, #464]	; (80445dc <HAL_DMA_IRQHandler+0xc90>)
 804440a:	4293      	cmp	r3, r2
 804440c:	d027      	beq.n	804445e <HAL_DMA_IRQHandler+0xb12>
 804440e:	687b      	ldr	r3, [r7, #4]
 8044410:	681b      	ldr	r3, [r3, #0]
 8044412:	4a73      	ldr	r2, [pc, #460]	; (80445e0 <HAL_DMA_IRQHandler+0xc94>)
 8044414:	4293      	cmp	r3, r2
 8044416:	d022      	beq.n	804445e <HAL_DMA_IRQHandler+0xb12>
 8044418:	687b      	ldr	r3, [r7, #4]
 804441a:	681b      	ldr	r3, [r3, #0]
 804441c:	4a71      	ldr	r2, [pc, #452]	; (80445e4 <HAL_DMA_IRQHandler+0xc98>)
 804441e:	4293      	cmp	r3, r2
 8044420:	d01d      	beq.n	804445e <HAL_DMA_IRQHandler+0xb12>
 8044422:	687b      	ldr	r3, [r7, #4]
 8044424:	681b      	ldr	r3, [r3, #0]
 8044426:	4a70      	ldr	r2, [pc, #448]	; (80445e8 <HAL_DMA_IRQHandler+0xc9c>)
 8044428:	4293      	cmp	r3, r2
 804442a:	d018      	beq.n	804445e <HAL_DMA_IRQHandler+0xb12>
 804442c:	687b      	ldr	r3, [r7, #4]
 804442e:	681b      	ldr	r3, [r3, #0]
 8044430:	4a6e      	ldr	r2, [pc, #440]	; (80445ec <HAL_DMA_IRQHandler+0xca0>)
 8044432:	4293      	cmp	r3, r2
 8044434:	d013      	beq.n	804445e <HAL_DMA_IRQHandler+0xb12>
 8044436:	687b      	ldr	r3, [r7, #4]
 8044438:	681b      	ldr	r3, [r3, #0]
 804443a:	4a6d      	ldr	r2, [pc, #436]	; (80445f0 <HAL_DMA_IRQHandler+0xca4>)
 804443c:	4293      	cmp	r3, r2
 804443e:	d00e      	beq.n	804445e <HAL_DMA_IRQHandler+0xb12>
 8044440:	687b      	ldr	r3, [r7, #4]
 8044442:	681b      	ldr	r3, [r3, #0]
 8044444:	4a6b      	ldr	r2, [pc, #428]	; (80445f4 <HAL_DMA_IRQHandler+0xca8>)
 8044446:	4293      	cmp	r3, r2
 8044448:	d009      	beq.n	804445e <HAL_DMA_IRQHandler+0xb12>
 804444a:	687b      	ldr	r3, [r7, #4]
 804444c:	681b      	ldr	r3, [r3, #0]
 804444e:	4a6a      	ldr	r2, [pc, #424]	; (80445f8 <HAL_DMA_IRQHandler+0xcac>)
 8044450:	4293      	cmp	r3, r2
 8044452:	d004      	beq.n	804445e <HAL_DMA_IRQHandler+0xb12>
 8044454:	687b      	ldr	r3, [r7, #4]
 8044456:	681b      	ldr	r3, [r3, #0]
 8044458:	4a68      	ldr	r2, [pc, #416]	; (80445fc <HAL_DMA_IRQHandler+0xcb0>)
 804445a:	4293      	cmp	r3, r2
 804445c:	d108      	bne.n	8044470 <HAL_DMA_IRQHandler+0xb24>
 804445e:	687b      	ldr	r3, [r7, #4]
 8044460:	681b      	ldr	r3, [r3, #0]
 8044462:	681a      	ldr	r2, [r3, #0]
 8044464:	687b      	ldr	r3, [r7, #4]
 8044466:	681b      	ldr	r3, [r3, #0]
 8044468:	f022 0208 	bic.w	r2, r2, #8
 804446c:	601a      	str	r2, [r3, #0]
 804446e:	e007      	b.n	8044480 <HAL_DMA_IRQHandler+0xb34>
 8044470:	687b      	ldr	r3, [r7, #4]
 8044472:	681b      	ldr	r3, [r3, #0]
 8044474:	681a      	ldr	r2, [r3, #0]
 8044476:	687b      	ldr	r3, [r7, #4]
 8044478:	681b      	ldr	r3, [r3, #0]
 804447a:	f022 0204 	bic.w	r2, r2, #4
 804447e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8044480:	687b      	ldr	r3, [r7, #4]
 8044482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8044484:	2b00      	cmp	r3, #0
 8044486:	f000 8165 	beq.w	8044754 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 804448a:	687b      	ldr	r3, [r7, #4]
 804448c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804448e:	6878      	ldr	r0, [r7, #4]
 8044490:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8044492:	e15f      	b.n	8044754 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8044494:	687b      	ldr	r3, [r7, #4]
 8044496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8044498:	f003 031f 	and.w	r3, r3, #31
 804449c:	2202      	movs	r2, #2
 804449e:	409a      	lsls	r2, r3
 80444a0:	697b      	ldr	r3, [r7, #20]
 80444a2:	4013      	ands	r3, r2
 80444a4:	2b00      	cmp	r3, #0
 80444a6:	f000 80c5 	beq.w	8044634 <HAL_DMA_IRQHandler+0xce8>
 80444aa:	693b      	ldr	r3, [r7, #16]
 80444ac:	f003 0302 	and.w	r3, r3, #2
 80444b0:	2b00      	cmp	r3, #0
 80444b2:	f000 80bf 	beq.w	8044634 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80444b6:	687b      	ldr	r3, [r7, #4]
 80444b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80444ba:	f003 031f 	and.w	r3, r3, #31
 80444be:	2202      	movs	r2, #2
 80444c0:	409a      	lsls	r2, r3
 80444c2:	69fb      	ldr	r3, [r7, #28]
 80444c4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80444c6:	693b      	ldr	r3, [r7, #16]
 80444c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80444cc:	2b00      	cmp	r3, #0
 80444ce:	d018      	beq.n	8044502 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80444d0:	693b      	ldr	r3, [r7, #16]
 80444d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80444d6:	2b00      	cmp	r3, #0
 80444d8:	d109      	bne.n	80444ee <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80444da:	687b      	ldr	r3, [r7, #4]
 80444dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80444de:	2b00      	cmp	r3, #0
 80444e0:	f000 813a 	beq.w	8044758 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80444e4:	687b      	ldr	r3, [r7, #4]
 80444e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80444e8:	6878      	ldr	r0, [r7, #4]
 80444ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80444ec:	e134      	b.n	8044758 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80444ee:	687b      	ldr	r3, [r7, #4]
 80444f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80444f2:	2b00      	cmp	r3, #0
 80444f4:	f000 8130 	beq.w	8044758 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80444f8:	687b      	ldr	r3, [r7, #4]
 80444fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80444fc:	6878      	ldr	r0, [r7, #4]
 80444fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8044500:	e12a      	b.n	8044758 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8044502:	693b      	ldr	r3, [r7, #16]
 8044504:	f003 0320 	and.w	r3, r3, #32
 8044508:	2b00      	cmp	r3, #0
 804450a:	f040 8089 	bne.w	8044620 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 804450e:	687b      	ldr	r3, [r7, #4]
 8044510:	681b      	ldr	r3, [r3, #0]
 8044512:	4a2b      	ldr	r2, [pc, #172]	; (80445c0 <HAL_DMA_IRQHandler+0xc74>)
 8044514:	4293      	cmp	r3, r2
 8044516:	d04a      	beq.n	80445ae <HAL_DMA_IRQHandler+0xc62>
 8044518:	687b      	ldr	r3, [r7, #4]
 804451a:	681b      	ldr	r3, [r3, #0]
 804451c:	4a29      	ldr	r2, [pc, #164]	; (80445c4 <HAL_DMA_IRQHandler+0xc78>)
 804451e:	4293      	cmp	r3, r2
 8044520:	d045      	beq.n	80445ae <HAL_DMA_IRQHandler+0xc62>
 8044522:	687b      	ldr	r3, [r7, #4]
 8044524:	681b      	ldr	r3, [r3, #0]
 8044526:	4a28      	ldr	r2, [pc, #160]	; (80445c8 <HAL_DMA_IRQHandler+0xc7c>)
 8044528:	4293      	cmp	r3, r2
 804452a:	d040      	beq.n	80445ae <HAL_DMA_IRQHandler+0xc62>
 804452c:	687b      	ldr	r3, [r7, #4]
 804452e:	681b      	ldr	r3, [r3, #0]
 8044530:	4a26      	ldr	r2, [pc, #152]	; (80445cc <HAL_DMA_IRQHandler+0xc80>)
 8044532:	4293      	cmp	r3, r2
 8044534:	d03b      	beq.n	80445ae <HAL_DMA_IRQHandler+0xc62>
 8044536:	687b      	ldr	r3, [r7, #4]
 8044538:	681b      	ldr	r3, [r3, #0]
 804453a:	4a25      	ldr	r2, [pc, #148]	; (80445d0 <HAL_DMA_IRQHandler+0xc84>)
 804453c:	4293      	cmp	r3, r2
 804453e:	d036      	beq.n	80445ae <HAL_DMA_IRQHandler+0xc62>
 8044540:	687b      	ldr	r3, [r7, #4]
 8044542:	681b      	ldr	r3, [r3, #0]
 8044544:	4a23      	ldr	r2, [pc, #140]	; (80445d4 <HAL_DMA_IRQHandler+0xc88>)
 8044546:	4293      	cmp	r3, r2
 8044548:	d031      	beq.n	80445ae <HAL_DMA_IRQHandler+0xc62>
 804454a:	687b      	ldr	r3, [r7, #4]
 804454c:	681b      	ldr	r3, [r3, #0]
 804454e:	4a22      	ldr	r2, [pc, #136]	; (80445d8 <HAL_DMA_IRQHandler+0xc8c>)
 8044550:	4293      	cmp	r3, r2
 8044552:	d02c      	beq.n	80445ae <HAL_DMA_IRQHandler+0xc62>
 8044554:	687b      	ldr	r3, [r7, #4]
 8044556:	681b      	ldr	r3, [r3, #0]
 8044558:	4a20      	ldr	r2, [pc, #128]	; (80445dc <HAL_DMA_IRQHandler+0xc90>)
 804455a:	4293      	cmp	r3, r2
 804455c:	d027      	beq.n	80445ae <HAL_DMA_IRQHandler+0xc62>
 804455e:	687b      	ldr	r3, [r7, #4]
 8044560:	681b      	ldr	r3, [r3, #0]
 8044562:	4a1f      	ldr	r2, [pc, #124]	; (80445e0 <HAL_DMA_IRQHandler+0xc94>)
 8044564:	4293      	cmp	r3, r2
 8044566:	d022      	beq.n	80445ae <HAL_DMA_IRQHandler+0xc62>
 8044568:	687b      	ldr	r3, [r7, #4]
 804456a:	681b      	ldr	r3, [r3, #0]
 804456c:	4a1d      	ldr	r2, [pc, #116]	; (80445e4 <HAL_DMA_IRQHandler+0xc98>)
 804456e:	4293      	cmp	r3, r2
 8044570:	d01d      	beq.n	80445ae <HAL_DMA_IRQHandler+0xc62>
 8044572:	687b      	ldr	r3, [r7, #4]
 8044574:	681b      	ldr	r3, [r3, #0]
 8044576:	4a1c      	ldr	r2, [pc, #112]	; (80445e8 <HAL_DMA_IRQHandler+0xc9c>)
 8044578:	4293      	cmp	r3, r2
 804457a:	d018      	beq.n	80445ae <HAL_DMA_IRQHandler+0xc62>
 804457c:	687b      	ldr	r3, [r7, #4]
 804457e:	681b      	ldr	r3, [r3, #0]
 8044580:	4a1a      	ldr	r2, [pc, #104]	; (80445ec <HAL_DMA_IRQHandler+0xca0>)
 8044582:	4293      	cmp	r3, r2
 8044584:	d013      	beq.n	80445ae <HAL_DMA_IRQHandler+0xc62>
 8044586:	687b      	ldr	r3, [r7, #4]
 8044588:	681b      	ldr	r3, [r3, #0]
 804458a:	4a19      	ldr	r2, [pc, #100]	; (80445f0 <HAL_DMA_IRQHandler+0xca4>)
 804458c:	4293      	cmp	r3, r2
 804458e:	d00e      	beq.n	80445ae <HAL_DMA_IRQHandler+0xc62>
 8044590:	687b      	ldr	r3, [r7, #4]
 8044592:	681b      	ldr	r3, [r3, #0]
 8044594:	4a17      	ldr	r2, [pc, #92]	; (80445f4 <HAL_DMA_IRQHandler+0xca8>)
 8044596:	4293      	cmp	r3, r2
 8044598:	d009      	beq.n	80445ae <HAL_DMA_IRQHandler+0xc62>
 804459a:	687b      	ldr	r3, [r7, #4]
 804459c:	681b      	ldr	r3, [r3, #0]
 804459e:	4a16      	ldr	r2, [pc, #88]	; (80445f8 <HAL_DMA_IRQHandler+0xcac>)
 80445a0:	4293      	cmp	r3, r2
 80445a2:	d004      	beq.n	80445ae <HAL_DMA_IRQHandler+0xc62>
 80445a4:	687b      	ldr	r3, [r7, #4]
 80445a6:	681b      	ldr	r3, [r3, #0]
 80445a8:	4a14      	ldr	r2, [pc, #80]	; (80445fc <HAL_DMA_IRQHandler+0xcb0>)
 80445aa:	4293      	cmp	r3, r2
 80445ac:	d128      	bne.n	8044600 <HAL_DMA_IRQHandler+0xcb4>
 80445ae:	687b      	ldr	r3, [r7, #4]
 80445b0:	681b      	ldr	r3, [r3, #0]
 80445b2:	681a      	ldr	r2, [r3, #0]
 80445b4:	687b      	ldr	r3, [r7, #4]
 80445b6:	681b      	ldr	r3, [r3, #0]
 80445b8:	f022 0214 	bic.w	r2, r2, #20
 80445bc:	601a      	str	r2, [r3, #0]
 80445be:	e027      	b.n	8044610 <HAL_DMA_IRQHandler+0xcc4>
 80445c0:	40020010 	.word	0x40020010
 80445c4:	40020028 	.word	0x40020028
 80445c8:	40020040 	.word	0x40020040
 80445cc:	40020058 	.word	0x40020058
 80445d0:	40020070 	.word	0x40020070
 80445d4:	40020088 	.word	0x40020088
 80445d8:	400200a0 	.word	0x400200a0
 80445dc:	400200b8 	.word	0x400200b8
 80445e0:	40020410 	.word	0x40020410
 80445e4:	40020428 	.word	0x40020428
 80445e8:	40020440 	.word	0x40020440
 80445ec:	40020458 	.word	0x40020458
 80445f0:	40020470 	.word	0x40020470
 80445f4:	40020488 	.word	0x40020488
 80445f8:	400204a0 	.word	0x400204a0
 80445fc:	400204b8 	.word	0x400204b8
 8044600:	687b      	ldr	r3, [r7, #4]
 8044602:	681b      	ldr	r3, [r3, #0]
 8044604:	681a      	ldr	r2, [r3, #0]
 8044606:	687b      	ldr	r3, [r7, #4]
 8044608:	681b      	ldr	r3, [r3, #0]
 804460a:	f022 020a 	bic.w	r2, r2, #10
 804460e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8044610:	687b      	ldr	r3, [r7, #4]
 8044612:	2201      	movs	r2, #1
 8044614:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8044618:	687b      	ldr	r3, [r7, #4]
 804461a:	2200      	movs	r2, #0
 804461c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8044620:	687b      	ldr	r3, [r7, #4]
 8044622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8044624:	2b00      	cmp	r3, #0
 8044626:	f000 8097 	beq.w	8044758 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 804462a:	687b      	ldr	r3, [r7, #4]
 804462c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804462e:	6878      	ldr	r0, [r7, #4]
 8044630:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8044632:	e091      	b.n	8044758 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8044634:	687b      	ldr	r3, [r7, #4]
 8044636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8044638:	f003 031f 	and.w	r3, r3, #31
 804463c:	2208      	movs	r2, #8
 804463e:	409a      	lsls	r2, r3
 8044640:	697b      	ldr	r3, [r7, #20]
 8044642:	4013      	ands	r3, r2
 8044644:	2b00      	cmp	r3, #0
 8044646:	f000 8088 	beq.w	804475a <HAL_DMA_IRQHandler+0xe0e>
 804464a:	693b      	ldr	r3, [r7, #16]
 804464c:	f003 0308 	and.w	r3, r3, #8
 8044650:	2b00      	cmp	r3, #0
 8044652:	f000 8082 	beq.w	804475a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8044656:	687b      	ldr	r3, [r7, #4]
 8044658:	681b      	ldr	r3, [r3, #0]
 804465a:	4a41      	ldr	r2, [pc, #260]	; (8044760 <HAL_DMA_IRQHandler+0xe14>)
 804465c:	4293      	cmp	r3, r2
 804465e:	d04a      	beq.n	80446f6 <HAL_DMA_IRQHandler+0xdaa>
 8044660:	687b      	ldr	r3, [r7, #4]
 8044662:	681b      	ldr	r3, [r3, #0]
 8044664:	4a3f      	ldr	r2, [pc, #252]	; (8044764 <HAL_DMA_IRQHandler+0xe18>)
 8044666:	4293      	cmp	r3, r2
 8044668:	d045      	beq.n	80446f6 <HAL_DMA_IRQHandler+0xdaa>
 804466a:	687b      	ldr	r3, [r7, #4]
 804466c:	681b      	ldr	r3, [r3, #0]
 804466e:	4a3e      	ldr	r2, [pc, #248]	; (8044768 <HAL_DMA_IRQHandler+0xe1c>)
 8044670:	4293      	cmp	r3, r2
 8044672:	d040      	beq.n	80446f6 <HAL_DMA_IRQHandler+0xdaa>
 8044674:	687b      	ldr	r3, [r7, #4]
 8044676:	681b      	ldr	r3, [r3, #0]
 8044678:	4a3c      	ldr	r2, [pc, #240]	; (804476c <HAL_DMA_IRQHandler+0xe20>)
 804467a:	4293      	cmp	r3, r2
 804467c:	d03b      	beq.n	80446f6 <HAL_DMA_IRQHandler+0xdaa>
 804467e:	687b      	ldr	r3, [r7, #4]
 8044680:	681b      	ldr	r3, [r3, #0]
 8044682:	4a3b      	ldr	r2, [pc, #236]	; (8044770 <HAL_DMA_IRQHandler+0xe24>)
 8044684:	4293      	cmp	r3, r2
 8044686:	d036      	beq.n	80446f6 <HAL_DMA_IRQHandler+0xdaa>
 8044688:	687b      	ldr	r3, [r7, #4]
 804468a:	681b      	ldr	r3, [r3, #0]
 804468c:	4a39      	ldr	r2, [pc, #228]	; (8044774 <HAL_DMA_IRQHandler+0xe28>)
 804468e:	4293      	cmp	r3, r2
 8044690:	d031      	beq.n	80446f6 <HAL_DMA_IRQHandler+0xdaa>
 8044692:	687b      	ldr	r3, [r7, #4]
 8044694:	681b      	ldr	r3, [r3, #0]
 8044696:	4a38      	ldr	r2, [pc, #224]	; (8044778 <HAL_DMA_IRQHandler+0xe2c>)
 8044698:	4293      	cmp	r3, r2
 804469a:	d02c      	beq.n	80446f6 <HAL_DMA_IRQHandler+0xdaa>
 804469c:	687b      	ldr	r3, [r7, #4]
 804469e:	681b      	ldr	r3, [r3, #0]
 80446a0:	4a36      	ldr	r2, [pc, #216]	; (804477c <HAL_DMA_IRQHandler+0xe30>)
 80446a2:	4293      	cmp	r3, r2
 80446a4:	d027      	beq.n	80446f6 <HAL_DMA_IRQHandler+0xdaa>
 80446a6:	687b      	ldr	r3, [r7, #4]
 80446a8:	681b      	ldr	r3, [r3, #0]
 80446aa:	4a35      	ldr	r2, [pc, #212]	; (8044780 <HAL_DMA_IRQHandler+0xe34>)
 80446ac:	4293      	cmp	r3, r2
 80446ae:	d022      	beq.n	80446f6 <HAL_DMA_IRQHandler+0xdaa>
 80446b0:	687b      	ldr	r3, [r7, #4]
 80446b2:	681b      	ldr	r3, [r3, #0]
 80446b4:	4a33      	ldr	r2, [pc, #204]	; (8044784 <HAL_DMA_IRQHandler+0xe38>)
 80446b6:	4293      	cmp	r3, r2
 80446b8:	d01d      	beq.n	80446f6 <HAL_DMA_IRQHandler+0xdaa>
 80446ba:	687b      	ldr	r3, [r7, #4]
 80446bc:	681b      	ldr	r3, [r3, #0]
 80446be:	4a32      	ldr	r2, [pc, #200]	; (8044788 <HAL_DMA_IRQHandler+0xe3c>)
 80446c0:	4293      	cmp	r3, r2
 80446c2:	d018      	beq.n	80446f6 <HAL_DMA_IRQHandler+0xdaa>
 80446c4:	687b      	ldr	r3, [r7, #4]
 80446c6:	681b      	ldr	r3, [r3, #0]
 80446c8:	4a30      	ldr	r2, [pc, #192]	; (804478c <HAL_DMA_IRQHandler+0xe40>)
 80446ca:	4293      	cmp	r3, r2
 80446cc:	d013      	beq.n	80446f6 <HAL_DMA_IRQHandler+0xdaa>
 80446ce:	687b      	ldr	r3, [r7, #4]
 80446d0:	681b      	ldr	r3, [r3, #0]
 80446d2:	4a2f      	ldr	r2, [pc, #188]	; (8044790 <HAL_DMA_IRQHandler+0xe44>)
 80446d4:	4293      	cmp	r3, r2
 80446d6:	d00e      	beq.n	80446f6 <HAL_DMA_IRQHandler+0xdaa>
 80446d8:	687b      	ldr	r3, [r7, #4]
 80446da:	681b      	ldr	r3, [r3, #0]
 80446dc:	4a2d      	ldr	r2, [pc, #180]	; (8044794 <HAL_DMA_IRQHandler+0xe48>)
 80446de:	4293      	cmp	r3, r2
 80446e0:	d009      	beq.n	80446f6 <HAL_DMA_IRQHandler+0xdaa>
 80446e2:	687b      	ldr	r3, [r7, #4]
 80446e4:	681b      	ldr	r3, [r3, #0]
 80446e6:	4a2c      	ldr	r2, [pc, #176]	; (8044798 <HAL_DMA_IRQHandler+0xe4c>)
 80446e8:	4293      	cmp	r3, r2
 80446ea:	d004      	beq.n	80446f6 <HAL_DMA_IRQHandler+0xdaa>
 80446ec:	687b      	ldr	r3, [r7, #4]
 80446ee:	681b      	ldr	r3, [r3, #0]
 80446f0:	4a2a      	ldr	r2, [pc, #168]	; (804479c <HAL_DMA_IRQHandler+0xe50>)
 80446f2:	4293      	cmp	r3, r2
 80446f4:	d108      	bne.n	8044708 <HAL_DMA_IRQHandler+0xdbc>
 80446f6:	687b      	ldr	r3, [r7, #4]
 80446f8:	681b      	ldr	r3, [r3, #0]
 80446fa:	681a      	ldr	r2, [r3, #0]
 80446fc:	687b      	ldr	r3, [r7, #4]
 80446fe:	681b      	ldr	r3, [r3, #0]
 8044700:	f022 021c 	bic.w	r2, r2, #28
 8044704:	601a      	str	r2, [r3, #0]
 8044706:	e007      	b.n	8044718 <HAL_DMA_IRQHandler+0xdcc>
 8044708:	687b      	ldr	r3, [r7, #4]
 804470a:	681b      	ldr	r3, [r3, #0]
 804470c:	681a      	ldr	r2, [r3, #0]
 804470e:	687b      	ldr	r3, [r7, #4]
 8044710:	681b      	ldr	r3, [r3, #0]
 8044712:	f022 020e 	bic.w	r2, r2, #14
 8044716:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8044718:	687b      	ldr	r3, [r7, #4]
 804471a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 804471c:	f003 031f 	and.w	r3, r3, #31
 8044720:	2201      	movs	r2, #1
 8044722:	409a      	lsls	r2, r3
 8044724:	69fb      	ldr	r3, [r7, #28]
 8044726:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8044728:	687b      	ldr	r3, [r7, #4]
 804472a:	2201      	movs	r2, #1
 804472c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 804472e:	687b      	ldr	r3, [r7, #4]
 8044730:	2201      	movs	r2, #1
 8044732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8044736:	687b      	ldr	r3, [r7, #4]
 8044738:	2200      	movs	r2, #0
 804473a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 804473e:	687b      	ldr	r3, [r7, #4]
 8044740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8044742:	2b00      	cmp	r3, #0
 8044744:	d009      	beq.n	804475a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8044746:	687b      	ldr	r3, [r7, #4]
 8044748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804474a:	6878      	ldr	r0, [r7, #4]
 804474c:	4798      	blx	r3
 804474e:	e004      	b.n	804475a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8044750:	bf00      	nop
 8044752:	e002      	b.n	804475a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8044754:	bf00      	nop
 8044756:	e000      	b.n	804475a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8044758:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 804475a:	3728      	adds	r7, #40	; 0x28
 804475c:	46bd      	mov	sp, r7
 804475e:	bd80      	pop	{r7, pc}
 8044760:	40020010 	.word	0x40020010
 8044764:	40020028 	.word	0x40020028
 8044768:	40020040 	.word	0x40020040
 804476c:	40020058 	.word	0x40020058
 8044770:	40020070 	.word	0x40020070
 8044774:	40020088 	.word	0x40020088
 8044778:	400200a0 	.word	0x400200a0
 804477c:	400200b8 	.word	0x400200b8
 8044780:	40020410 	.word	0x40020410
 8044784:	40020428 	.word	0x40020428
 8044788:	40020440 	.word	0x40020440
 804478c:	40020458 	.word	0x40020458
 8044790:	40020470 	.word	0x40020470
 8044794:	40020488 	.word	0x40020488
 8044798:	400204a0 	.word	0x400204a0
 804479c:	400204b8 	.word	0x400204b8

080447a0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80447a0:	b480      	push	{r7}
 80447a2:	b087      	sub	sp, #28
 80447a4:	af00      	add	r7, sp, #0
 80447a6:	60f8      	str	r0, [r7, #12]
 80447a8:	60b9      	str	r1, [r7, #8]
 80447aa:	607a      	str	r2, [r7, #4]
 80447ac:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80447ae:	68fb      	ldr	r3, [r7, #12]
 80447b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80447b2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80447b4:	68fb      	ldr	r3, [r7, #12]
 80447b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80447b8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80447ba:	68fb      	ldr	r3, [r7, #12]
 80447bc:	681b      	ldr	r3, [r3, #0]
 80447be:	4a7f      	ldr	r2, [pc, #508]	; (80449bc <DMA_SetConfig+0x21c>)
 80447c0:	4293      	cmp	r3, r2
 80447c2:	d072      	beq.n	80448aa <DMA_SetConfig+0x10a>
 80447c4:	68fb      	ldr	r3, [r7, #12]
 80447c6:	681b      	ldr	r3, [r3, #0]
 80447c8:	4a7d      	ldr	r2, [pc, #500]	; (80449c0 <DMA_SetConfig+0x220>)
 80447ca:	4293      	cmp	r3, r2
 80447cc:	d06d      	beq.n	80448aa <DMA_SetConfig+0x10a>
 80447ce:	68fb      	ldr	r3, [r7, #12]
 80447d0:	681b      	ldr	r3, [r3, #0]
 80447d2:	4a7c      	ldr	r2, [pc, #496]	; (80449c4 <DMA_SetConfig+0x224>)
 80447d4:	4293      	cmp	r3, r2
 80447d6:	d068      	beq.n	80448aa <DMA_SetConfig+0x10a>
 80447d8:	68fb      	ldr	r3, [r7, #12]
 80447da:	681b      	ldr	r3, [r3, #0]
 80447dc:	4a7a      	ldr	r2, [pc, #488]	; (80449c8 <DMA_SetConfig+0x228>)
 80447de:	4293      	cmp	r3, r2
 80447e0:	d063      	beq.n	80448aa <DMA_SetConfig+0x10a>
 80447e2:	68fb      	ldr	r3, [r7, #12]
 80447e4:	681b      	ldr	r3, [r3, #0]
 80447e6:	4a79      	ldr	r2, [pc, #484]	; (80449cc <DMA_SetConfig+0x22c>)
 80447e8:	4293      	cmp	r3, r2
 80447ea:	d05e      	beq.n	80448aa <DMA_SetConfig+0x10a>
 80447ec:	68fb      	ldr	r3, [r7, #12]
 80447ee:	681b      	ldr	r3, [r3, #0]
 80447f0:	4a77      	ldr	r2, [pc, #476]	; (80449d0 <DMA_SetConfig+0x230>)
 80447f2:	4293      	cmp	r3, r2
 80447f4:	d059      	beq.n	80448aa <DMA_SetConfig+0x10a>
 80447f6:	68fb      	ldr	r3, [r7, #12]
 80447f8:	681b      	ldr	r3, [r3, #0]
 80447fa:	4a76      	ldr	r2, [pc, #472]	; (80449d4 <DMA_SetConfig+0x234>)
 80447fc:	4293      	cmp	r3, r2
 80447fe:	d054      	beq.n	80448aa <DMA_SetConfig+0x10a>
 8044800:	68fb      	ldr	r3, [r7, #12]
 8044802:	681b      	ldr	r3, [r3, #0]
 8044804:	4a74      	ldr	r2, [pc, #464]	; (80449d8 <DMA_SetConfig+0x238>)
 8044806:	4293      	cmp	r3, r2
 8044808:	d04f      	beq.n	80448aa <DMA_SetConfig+0x10a>
 804480a:	68fb      	ldr	r3, [r7, #12]
 804480c:	681b      	ldr	r3, [r3, #0]
 804480e:	4a73      	ldr	r2, [pc, #460]	; (80449dc <DMA_SetConfig+0x23c>)
 8044810:	4293      	cmp	r3, r2
 8044812:	d04a      	beq.n	80448aa <DMA_SetConfig+0x10a>
 8044814:	68fb      	ldr	r3, [r7, #12]
 8044816:	681b      	ldr	r3, [r3, #0]
 8044818:	4a71      	ldr	r2, [pc, #452]	; (80449e0 <DMA_SetConfig+0x240>)
 804481a:	4293      	cmp	r3, r2
 804481c:	d045      	beq.n	80448aa <DMA_SetConfig+0x10a>
 804481e:	68fb      	ldr	r3, [r7, #12]
 8044820:	681b      	ldr	r3, [r3, #0]
 8044822:	4a70      	ldr	r2, [pc, #448]	; (80449e4 <DMA_SetConfig+0x244>)
 8044824:	4293      	cmp	r3, r2
 8044826:	d040      	beq.n	80448aa <DMA_SetConfig+0x10a>
 8044828:	68fb      	ldr	r3, [r7, #12]
 804482a:	681b      	ldr	r3, [r3, #0]
 804482c:	4a6e      	ldr	r2, [pc, #440]	; (80449e8 <DMA_SetConfig+0x248>)
 804482e:	4293      	cmp	r3, r2
 8044830:	d03b      	beq.n	80448aa <DMA_SetConfig+0x10a>
 8044832:	68fb      	ldr	r3, [r7, #12]
 8044834:	681b      	ldr	r3, [r3, #0]
 8044836:	4a6d      	ldr	r2, [pc, #436]	; (80449ec <DMA_SetConfig+0x24c>)
 8044838:	4293      	cmp	r3, r2
 804483a:	d036      	beq.n	80448aa <DMA_SetConfig+0x10a>
 804483c:	68fb      	ldr	r3, [r7, #12]
 804483e:	681b      	ldr	r3, [r3, #0]
 8044840:	4a6b      	ldr	r2, [pc, #428]	; (80449f0 <DMA_SetConfig+0x250>)
 8044842:	4293      	cmp	r3, r2
 8044844:	d031      	beq.n	80448aa <DMA_SetConfig+0x10a>
 8044846:	68fb      	ldr	r3, [r7, #12]
 8044848:	681b      	ldr	r3, [r3, #0]
 804484a:	4a6a      	ldr	r2, [pc, #424]	; (80449f4 <DMA_SetConfig+0x254>)
 804484c:	4293      	cmp	r3, r2
 804484e:	d02c      	beq.n	80448aa <DMA_SetConfig+0x10a>
 8044850:	68fb      	ldr	r3, [r7, #12]
 8044852:	681b      	ldr	r3, [r3, #0]
 8044854:	4a68      	ldr	r2, [pc, #416]	; (80449f8 <DMA_SetConfig+0x258>)
 8044856:	4293      	cmp	r3, r2
 8044858:	d027      	beq.n	80448aa <DMA_SetConfig+0x10a>
 804485a:	68fb      	ldr	r3, [r7, #12]
 804485c:	681b      	ldr	r3, [r3, #0]
 804485e:	4a67      	ldr	r2, [pc, #412]	; (80449fc <DMA_SetConfig+0x25c>)
 8044860:	4293      	cmp	r3, r2
 8044862:	d022      	beq.n	80448aa <DMA_SetConfig+0x10a>
 8044864:	68fb      	ldr	r3, [r7, #12]
 8044866:	681b      	ldr	r3, [r3, #0]
 8044868:	4a65      	ldr	r2, [pc, #404]	; (8044a00 <DMA_SetConfig+0x260>)
 804486a:	4293      	cmp	r3, r2
 804486c:	d01d      	beq.n	80448aa <DMA_SetConfig+0x10a>
 804486e:	68fb      	ldr	r3, [r7, #12]
 8044870:	681b      	ldr	r3, [r3, #0]
 8044872:	4a64      	ldr	r2, [pc, #400]	; (8044a04 <DMA_SetConfig+0x264>)
 8044874:	4293      	cmp	r3, r2
 8044876:	d018      	beq.n	80448aa <DMA_SetConfig+0x10a>
 8044878:	68fb      	ldr	r3, [r7, #12]
 804487a:	681b      	ldr	r3, [r3, #0]
 804487c:	4a62      	ldr	r2, [pc, #392]	; (8044a08 <DMA_SetConfig+0x268>)
 804487e:	4293      	cmp	r3, r2
 8044880:	d013      	beq.n	80448aa <DMA_SetConfig+0x10a>
 8044882:	68fb      	ldr	r3, [r7, #12]
 8044884:	681b      	ldr	r3, [r3, #0]
 8044886:	4a61      	ldr	r2, [pc, #388]	; (8044a0c <DMA_SetConfig+0x26c>)
 8044888:	4293      	cmp	r3, r2
 804488a:	d00e      	beq.n	80448aa <DMA_SetConfig+0x10a>
 804488c:	68fb      	ldr	r3, [r7, #12]
 804488e:	681b      	ldr	r3, [r3, #0]
 8044890:	4a5f      	ldr	r2, [pc, #380]	; (8044a10 <DMA_SetConfig+0x270>)
 8044892:	4293      	cmp	r3, r2
 8044894:	d009      	beq.n	80448aa <DMA_SetConfig+0x10a>
 8044896:	68fb      	ldr	r3, [r7, #12]
 8044898:	681b      	ldr	r3, [r3, #0]
 804489a:	4a5e      	ldr	r2, [pc, #376]	; (8044a14 <DMA_SetConfig+0x274>)
 804489c:	4293      	cmp	r3, r2
 804489e:	d004      	beq.n	80448aa <DMA_SetConfig+0x10a>
 80448a0:	68fb      	ldr	r3, [r7, #12]
 80448a2:	681b      	ldr	r3, [r3, #0]
 80448a4:	4a5c      	ldr	r2, [pc, #368]	; (8044a18 <DMA_SetConfig+0x278>)
 80448a6:	4293      	cmp	r3, r2
 80448a8:	d101      	bne.n	80448ae <DMA_SetConfig+0x10e>
 80448aa:	2301      	movs	r3, #1
 80448ac:	e000      	b.n	80448b0 <DMA_SetConfig+0x110>
 80448ae:	2300      	movs	r3, #0
 80448b0:	2b00      	cmp	r3, #0
 80448b2:	d00d      	beq.n	80448d0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80448b4:	68fb      	ldr	r3, [r7, #12]
 80448b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80448b8:	68fa      	ldr	r2, [r7, #12]
 80448ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80448bc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80448be:	68fb      	ldr	r3, [r7, #12]
 80448c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80448c2:	2b00      	cmp	r3, #0
 80448c4:	d004      	beq.n	80448d0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80448c6:	68fb      	ldr	r3, [r7, #12]
 80448c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80448ca:	68fa      	ldr	r2, [r7, #12]
 80448cc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80448ce:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80448d0:	68fb      	ldr	r3, [r7, #12]
 80448d2:	681b      	ldr	r3, [r3, #0]
 80448d4:	4a39      	ldr	r2, [pc, #228]	; (80449bc <DMA_SetConfig+0x21c>)
 80448d6:	4293      	cmp	r3, r2
 80448d8:	d04a      	beq.n	8044970 <DMA_SetConfig+0x1d0>
 80448da:	68fb      	ldr	r3, [r7, #12]
 80448dc:	681b      	ldr	r3, [r3, #0]
 80448de:	4a38      	ldr	r2, [pc, #224]	; (80449c0 <DMA_SetConfig+0x220>)
 80448e0:	4293      	cmp	r3, r2
 80448e2:	d045      	beq.n	8044970 <DMA_SetConfig+0x1d0>
 80448e4:	68fb      	ldr	r3, [r7, #12]
 80448e6:	681b      	ldr	r3, [r3, #0]
 80448e8:	4a36      	ldr	r2, [pc, #216]	; (80449c4 <DMA_SetConfig+0x224>)
 80448ea:	4293      	cmp	r3, r2
 80448ec:	d040      	beq.n	8044970 <DMA_SetConfig+0x1d0>
 80448ee:	68fb      	ldr	r3, [r7, #12]
 80448f0:	681b      	ldr	r3, [r3, #0]
 80448f2:	4a35      	ldr	r2, [pc, #212]	; (80449c8 <DMA_SetConfig+0x228>)
 80448f4:	4293      	cmp	r3, r2
 80448f6:	d03b      	beq.n	8044970 <DMA_SetConfig+0x1d0>
 80448f8:	68fb      	ldr	r3, [r7, #12]
 80448fa:	681b      	ldr	r3, [r3, #0]
 80448fc:	4a33      	ldr	r2, [pc, #204]	; (80449cc <DMA_SetConfig+0x22c>)
 80448fe:	4293      	cmp	r3, r2
 8044900:	d036      	beq.n	8044970 <DMA_SetConfig+0x1d0>
 8044902:	68fb      	ldr	r3, [r7, #12]
 8044904:	681b      	ldr	r3, [r3, #0]
 8044906:	4a32      	ldr	r2, [pc, #200]	; (80449d0 <DMA_SetConfig+0x230>)
 8044908:	4293      	cmp	r3, r2
 804490a:	d031      	beq.n	8044970 <DMA_SetConfig+0x1d0>
 804490c:	68fb      	ldr	r3, [r7, #12]
 804490e:	681b      	ldr	r3, [r3, #0]
 8044910:	4a30      	ldr	r2, [pc, #192]	; (80449d4 <DMA_SetConfig+0x234>)
 8044912:	4293      	cmp	r3, r2
 8044914:	d02c      	beq.n	8044970 <DMA_SetConfig+0x1d0>
 8044916:	68fb      	ldr	r3, [r7, #12]
 8044918:	681b      	ldr	r3, [r3, #0]
 804491a:	4a2f      	ldr	r2, [pc, #188]	; (80449d8 <DMA_SetConfig+0x238>)
 804491c:	4293      	cmp	r3, r2
 804491e:	d027      	beq.n	8044970 <DMA_SetConfig+0x1d0>
 8044920:	68fb      	ldr	r3, [r7, #12]
 8044922:	681b      	ldr	r3, [r3, #0]
 8044924:	4a2d      	ldr	r2, [pc, #180]	; (80449dc <DMA_SetConfig+0x23c>)
 8044926:	4293      	cmp	r3, r2
 8044928:	d022      	beq.n	8044970 <DMA_SetConfig+0x1d0>
 804492a:	68fb      	ldr	r3, [r7, #12]
 804492c:	681b      	ldr	r3, [r3, #0]
 804492e:	4a2c      	ldr	r2, [pc, #176]	; (80449e0 <DMA_SetConfig+0x240>)
 8044930:	4293      	cmp	r3, r2
 8044932:	d01d      	beq.n	8044970 <DMA_SetConfig+0x1d0>
 8044934:	68fb      	ldr	r3, [r7, #12]
 8044936:	681b      	ldr	r3, [r3, #0]
 8044938:	4a2a      	ldr	r2, [pc, #168]	; (80449e4 <DMA_SetConfig+0x244>)
 804493a:	4293      	cmp	r3, r2
 804493c:	d018      	beq.n	8044970 <DMA_SetConfig+0x1d0>
 804493e:	68fb      	ldr	r3, [r7, #12]
 8044940:	681b      	ldr	r3, [r3, #0]
 8044942:	4a29      	ldr	r2, [pc, #164]	; (80449e8 <DMA_SetConfig+0x248>)
 8044944:	4293      	cmp	r3, r2
 8044946:	d013      	beq.n	8044970 <DMA_SetConfig+0x1d0>
 8044948:	68fb      	ldr	r3, [r7, #12]
 804494a:	681b      	ldr	r3, [r3, #0]
 804494c:	4a27      	ldr	r2, [pc, #156]	; (80449ec <DMA_SetConfig+0x24c>)
 804494e:	4293      	cmp	r3, r2
 8044950:	d00e      	beq.n	8044970 <DMA_SetConfig+0x1d0>
 8044952:	68fb      	ldr	r3, [r7, #12]
 8044954:	681b      	ldr	r3, [r3, #0]
 8044956:	4a26      	ldr	r2, [pc, #152]	; (80449f0 <DMA_SetConfig+0x250>)
 8044958:	4293      	cmp	r3, r2
 804495a:	d009      	beq.n	8044970 <DMA_SetConfig+0x1d0>
 804495c:	68fb      	ldr	r3, [r7, #12]
 804495e:	681b      	ldr	r3, [r3, #0]
 8044960:	4a24      	ldr	r2, [pc, #144]	; (80449f4 <DMA_SetConfig+0x254>)
 8044962:	4293      	cmp	r3, r2
 8044964:	d004      	beq.n	8044970 <DMA_SetConfig+0x1d0>
 8044966:	68fb      	ldr	r3, [r7, #12]
 8044968:	681b      	ldr	r3, [r3, #0]
 804496a:	4a23      	ldr	r2, [pc, #140]	; (80449f8 <DMA_SetConfig+0x258>)
 804496c:	4293      	cmp	r3, r2
 804496e:	d101      	bne.n	8044974 <DMA_SetConfig+0x1d4>
 8044970:	2301      	movs	r3, #1
 8044972:	e000      	b.n	8044976 <DMA_SetConfig+0x1d6>
 8044974:	2300      	movs	r3, #0
 8044976:	2b00      	cmp	r3, #0
 8044978:	d059      	beq.n	8044a2e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 804497a:	68fb      	ldr	r3, [r7, #12]
 804497c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 804497e:	f003 031f 	and.w	r3, r3, #31
 8044982:	223f      	movs	r2, #63	; 0x3f
 8044984:	409a      	lsls	r2, r3
 8044986:	697b      	ldr	r3, [r7, #20]
 8044988:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 804498a:	68fb      	ldr	r3, [r7, #12]
 804498c:	681b      	ldr	r3, [r3, #0]
 804498e:	681a      	ldr	r2, [r3, #0]
 8044990:	68fb      	ldr	r3, [r7, #12]
 8044992:	681b      	ldr	r3, [r3, #0]
 8044994:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8044998:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 804499a:	68fb      	ldr	r3, [r7, #12]
 804499c:	681b      	ldr	r3, [r3, #0]
 804499e:	683a      	ldr	r2, [r7, #0]
 80449a0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80449a2:	68fb      	ldr	r3, [r7, #12]
 80449a4:	689b      	ldr	r3, [r3, #8]
 80449a6:	2b40      	cmp	r3, #64	; 0x40
 80449a8:	d138      	bne.n	8044a1c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80449aa:	68fb      	ldr	r3, [r7, #12]
 80449ac:	681b      	ldr	r3, [r3, #0]
 80449ae:	687a      	ldr	r2, [r7, #4]
 80449b0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80449b2:	68fb      	ldr	r3, [r7, #12]
 80449b4:	681b      	ldr	r3, [r3, #0]
 80449b6:	68ba      	ldr	r2, [r7, #8]
 80449b8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80449ba:	e086      	b.n	8044aca <DMA_SetConfig+0x32a>
 80449bc:	40020010 	.word	0x40020010
 80449c0:	40020028 	.word	0x40020028
 80449c4:	40020040 	.word	0x40020040
 80449c8:	40020058 	.word	0x40020058
 80449cc:	40020070 	.word	0x40020070
 80449d0:	40020088 	.word	0x40020088
 80449d4:	400200a0 	.word	0x400200a0
 80449d8:	400200b8 	.word	0x400200b8
 80449dc:	40020410 	.word	0x40020410
 80449e0:	40020428 	.word	0x40020428
 80449e4:	40020440 	.word	0x40020440
 80449e8:	40020458 	.word	0x40020458
 80449ec:	40020470 	.word	0x40020470
 80449f0:	40020488 	.word	0x40020488
 80449f4:	400204a0 	.word	0x400204a0
 80449f8:	400204b8 	.word	0x400204b8
 80449fc:	58025408 	.word	0x58025408
 8044a00:	5802541c 	.word	0x5802541c
 8044a04:	58025430 	.word	0x58025430
 8044a08:	58025444 	.word	0x58025444
 8044a0c:	58025458 	.word	0x58025458
 8044a10:	5802546c 	.word	0x5802546c
 8044a14:	58025480 	.word	0x58025480
 8044a18:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8044a1c:	68fb      	ldr	r3, [r7, #12]
 8044a1e:	681b      	ldr	r3, [r3, #0]
 8044a20:	68ba      	ldr	r2, [r7, #8]
 8044a22:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8044a24:	68fb      	ldr	r3, [r7, #12]
 8044a26:	681b      	ldr	r3, [r3, #0]
 8044a28:	687a      	ldr	r2, [r7, #4]
 8044a2a:	60da      	str	r2, [r3, #12]
}
 8044a2c:	e04d      	b.n	8044aca <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8044a2e:	68fb      	ldr	r3, [r7, #12]
 8044a30:	681b      	ldr	r3, [r3, #0]
 8044a32:	4a29      	ldr	r2, [pc, #164]	; (8044ad8 <DMA_SetConfig+0x338>)
 8044a34:	4293      	cmp	r3, r2
 8044a36:	d022      	beq.n	8044a7e <DMA_SetConfig+0x2de>
 8044a38:	68fb      	ldr	r3, [r7, #12]
 8044a3a:	681b      	ldr	r3, [r3, #0]
 8044a3c:	4a27      	ldr	r2, [pc, #156]	; (8044adc <DMA_SetConfig+0x33c>)
 8044a3e:	4293      	cmp	r3, r2
 8044a40:	d01d      	beq.n	8044a7e <DMA_SetConfig+0x2de>
 8044a42:	68fb      	ldr	r3, [r7, #12]
 8044a44:	681b      	ldr	r3, [r3, #0]
 8044a46:	4a26      	ldr	r2, [pc, #152]	; (8044ae0 <DMA_SetConfig+0x340>)
 8044a48:	4293      	cmp	r3, r2
 8044a4a:	d018      	beq.n	8044a7e <DMA_SetConfig+0x2de>
 8044a4c:	68fb      	ldr	r3, [r7, #12]
 8044a4e:	681b      	ldr	r3, [r3, #0]
 8044a50:	4a24      	ldr	r2, [pc, #144]	; (8044ae4 <DMA_SetConfig+0x344>)
 8044a52:	4293      	cmp	r3, r2
 8044a54:	d013      	beq.n	8044a7e <DMA_SetConfig+0x2de>
 8044a56:	68fb      	ldr	r3, [r7, #12]
 8044a58:	681b      	ldr	r3, [r3, #0]
 8044a5a:	4a23      	ldr	r2, [pc, #140]	; (8044ae8 <DMA_SetConfig+0x348>)
 8044a5c:	4293      	cmp	r3, r2
 8044a5e:	d00e      	beq.n	8044a7e <DMA_SetConfig+0x2de>
 8044a60:	68fb      	ldr	r3, [r7, #12]
 8044a62:	681b      	ldr	r3, [r3, #0]
 8044a64:	4a21      	ldr	r2, [pc, #132]	; (8044aec <DMA_SetConfig+0x34c>)
 8044a66:	4293      	cmp	r3, r2
 8044a68:	d009      	beq.n	8044a7e <DMA_SetConfig+0x2de>
 8044a6a:	68fb      	ldr	r3, [r7, #12]
 8044a6c:	681b      	ldr	r3, [r3, #0]
 8044a6e:	4a20      	ldr	r2, [pc, #128]	; (8044af0 <DMA_SetConfig+0x350>)
 8044a70:	4293      	cmp	r3, r2
 8044a72:	d004      	beq.n	8044a7e <DMA_SetConfig+0x2de>
 8044a74:	68fb      	ldr	r3, [r7, #12]
 8044a76:	681b      	ldr	r3, [r3, #0]
 8044a78:	4a1e      	ldr	r2, [pc, #120]	; (8044af4 <DMA_SetConfig+0x354>)
 8044a7a:	4293      	cmp	r3, r2
 8044a7c:	d101      	bne.n	8044a82 <DMA_SetConfig+0x2e2>
 8044a7e:	2301      	movs	r3, #1
 8044a80:	e000      	b.n	8044a84 <DMA_SetConfig+0x2e4>
 8044a82:	2300      	movs	r3, #0
 8044a84:	2b00      	cmp	r3, #0
 8044a86:	d020      	beq.n	8044aca <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8044a88:	68fb      	ldr	r3, [r7, #12]
 8044a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8044a8c:	f003 031f 	and.w	r3, r3, #31
 8044a90:	2201      	movs	r2, #1
 8044a92:	409a      	lsls	r2, r3
 8044a94:	693b      	ldr	r3, [r7, #16]
 8044a96:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8044a98:	68fb      	ldr	r3, [r7, #12]
 8044a9a:	681b      	ldr	r3, [r3, #0]
 8044a9c:	683a      	ldr	r2, [r7, #0]
 8044a9e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8044aa0:	68fb      	ldr	r3, [r7, #12]
 8044aa2:	689b      	ldr	r3, [r3, #8]
 8044aa4:	2b40      	cmp	r3, #64	; 0x40
 8044aa6:	d108      	bne.n	8044aba <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8044aa8:	68fb      	ldr	r3, [r7, #12]
 8044aaa:	681b      	ldr	r3, [r3, #0]
 8044aac:	687a      	ldr	r2, [r7, #4]
 8044aae:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8044ab0:	68fb      	ldr	r3, [r7, #12]
 8044ab2:	681b      	ldr	r3, [r3, #0]
 8044ab4:	68ba      	ldr	r2, [r7, #8]
 8044ab6:	60da      	str	r2, [r3, #12]
}
 8044ab8:	e007      	b.n	8044aca <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8044aba:	68fb      	ldr	r3, [r7, #12]
 8044abc:	681b      	ldr	r3, [r3, #0]
 8044abe:	68ba      	ldr	r2, [r7, #8]
 8044ac0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8044ac2:	68fb      	ldr	r3, [r7, #12]
 8044ac4:	681b      	ldr	r3, [r3, #0]
 8044ac6:	687a      	ldr	r2, [r7, #4]
 8044ac8:	60da      	str	r2, [r3, #12]
}
 8044aca:	bf00      	nop
 8044acc:	371c      	adds	r7, #28
 8044ace:	46bd      	mov	sp, r7
 8044ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044ad4:	4770      	bx	lr
 8044ad6:	bf00      	nop
 8044ad8:	58025408 	.word	0x58025408
 8044adc:	5802541c 	.word	0x5802541c
 8044ae0:	58025430 	.word	0x58025430
 8044ae4:	58025444 	.word	0x58025444
 8044ae8:	58025458 	.word	0x58025458
 8044aec:	5802546c 	.word	0x5802546c
 8044af0:	58025480 	.word	0x58025480
 8044af4:	58025494 	.word	0x58025494

08044af8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8044af8:	b480      	push	{r7}
 8044afa:	b085      	sub	sp, #20
 8044afc:	af00      	add	r7, sp, #0
 8044afe:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8044b00:	687b      	ldr	r3, [r7, #4]
 8044b02:	681b      	ldr	r3, [r3, #0]
 8044b04:	4a42      	ldr	r2, [pc, #264]	; (8044c10 <DMA_CalcBaseAndBitshift+0x118>)
 8044b06:	4293      	cmp	r3, r2
 8044b08:	d04a      	beq.n	8044ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8044b0a:	687b      	ldr	r3, [r7, #4]
 8044b0c:	681b      	ldr	r3, [r3, #0]
 8044b0e:	4a41      	ldr	r2, [pc, #260]	; (8044c14 <DMA_CalcBaseAndBitshift+0x11c>)
 8044b10:	4293      	cmp	r3, r2
 8044b12:	d045      	beq.n	8044ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8044b14:	687b      	ldr	r3, [r7, #4]
 8044b16:	681b      	ldr	r3, [r3, #0]
 8044b18:	4a3f      	ldr	r2, [pc, #252]	; (8044c18 <DMA_CalcBaseAndBitshift+0x120>)
 8044b1a:	4293      	cmp	r3, r2
 8044b1c:	d040      	beq.n	8044ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8044b1e:	687b      	ldr	r3, [r7, #4]
 8044b20:	681b      	ldr	r3, [r3, #0]
 8044b22:	4a3e      	ldr	r2, [pc, #248]	; (8044c1c <DMA_CalcBaseAndBitshift+0x124>)
 8044b24:	4293      	cmp	r3, r2
 8044b26:	d03b      	beq.n	8044ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8044b28:	687b      	ldr	r3, [r7, #4]
 8044b2a:	681b      	ldr	r3, [r3, #0]
 8044b2c:	4a3c      	ldr	r2, [pc, #240]	; (8044c20 <DMA_CalcBaseAndBitshift+0x128>)
 8044b2e:	4293      	cmp	r3, r2
 8044b30:	d036      	beq.n	8044ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8044b32:	687b      	ldr	r3, [r7, #4]
 8044b34:	681b      	ldr	r3, [r3, #0]
 8044b36:	4a3b      	ldr	r2, [pc, #236]	; (8044c24 <DMA_CalcBaseAndBitshift+0x12c>)
 8044b38:	4293      	cmp	r3, r2
 8044b3a:	d031      	beq.n	8044ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8044b3c:	687b      	ldr	r3, [r7, #4]
 8044b3e:	681b      	ldr	r3, [r3, #0]
 8044b40:	4a39      	ldr	r2, [pc, #228]	; (8044c28 <DMA_CalcBaseAndBitshift+0x130>)
 8044b42:	4293      	cmp	r3, r2
 8044b44:	d02c      	beq.n	8044ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8044b46:	687b      	ldr	r3, [r7, #4]
 8044b48:	681b      	ldr	r3, [r3, #0]
 8044b4a:	4a38      	ldr	r2, [pc, #224]	; (8044c2c <DMA_CalcBaseAndBitshift+0x134>)
 8044b4c:	4293      	cmp	r3, r2
 8044b4e:	d027      	beq.n	8044ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8044b50:	687b      	ldr	r3, [r7, #4]
 8044b52:	681b      	ldr	r3, [r3, #0]
 8044b54:	4a36      	ldr	r2, [pc, #216]	; (8044c30 <DMA_CalcBaseAndBitshift+0x138>)
 8044b56:	4293      	cmp	r3, r2
 8044b58:	d022      	beq.n	8044ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8044b5a:	687b      	ldr	r3, [r7, #4]
 8044b5c:	681b      	ldr	r3, [r3, #0]
 8044b5e:	4a35      	ldr	r2, [pc, #212]	; (8044c34 <DMA_CalcBaseAndBitshift+0x13c>)
 8044b60:	4293      	cmp	r3, r2
 8044b62:	d01d      	beq.n	8044ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8044b64:	687b      	ldr	r3, [r7, #4]
 8044b66:	681b      	ldr	r3, [r3, #0]
 8044b68:	4a33      	ldr	r2, [pc, #204]	; (8044c38 <DMA_CalcBaseAndBitshift+0x140>)
 8044b6a:	4293      	cmp	r3, r2
 8044b6c:	d018      	beq.n	8044ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8044b6e:	687b      	ldr	r3, [r7, #4]
 8044b70:	681b      	ldr	r3, [r3, #0]
 8044b72:	4a32      	ldr	r2, [pc, #200]	; (8044c3c <DMA_CalcBaseAndBitshift+0x144>)
 8044b74:	4293      	cmp	r3, r2
 8044b76:	d013      	beq.n	8044ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8044b78:	687b      	ldr	r3, [r7, #4]
 8044b7a:	681b      	ldr	r3, [r3, #0]
 8044b7c:	4a30      	ldr	r2, [pc, #192]	; (8044c40 <DMA_CalcBaseAndBitshift+0x148>)
 8044b7e:	4293      	cmp	r3, r2
 8044b80:	d00e      	beq.n	8044ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8044b82:	687b      	ldr	r3, [r7, #4]
 8044b84:	681b      	ldr	r3, [r3, #0]
 8044b86:	4a2f      	ldr	r2, [pc, #188]	; (8044c44 <DMA_CalcBaseAndBitshift+0x14c>)
 8044b88:	4293      	cmp	r3, r2
 8044b8a:	d009      	beq.n	8044ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8044b8c:	687b      	ldr	r3, [r7, #4]
 8044b8e:	681b      	ldr	r3, [r3, #0]
 8044b90:	4a2d      	ldr	r2, [pc, #180]	; (8044c48 <DMA_CalcBaseAndBitshift+0x150>)
 8044b92:	4293      	cmp	r3, r2
 8044b94:	d004      	beq.n	8044ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8044b96:	687b      	ldr	r3, [r7, #4]
 8044b98:	681b      	ldr	r3, [r3, #0]
 8044b9a:	4a2c      	ldr	r2, [pc, #176]	; (8044c4c <DMA_CalcBaseAndBitshift+0x154>)
 8044b9c:	4293      	cmp	r3, r2
 8044b9e:	d101      	bne.n	8044ba4 <DMA_CalcBaseAndBitshift+0xac>
 8044ba0:	2301      	movs	r3, #1
 8044ba2:	e000      	b.n	8044ba6 <DMA_CalcBaseAndBitshift+0xae>
 8044ba4:	2300      	movs	r3, #0
 8044ba6:	2b00      	cmp	r3, #0
 8044ba8:	d024      	beq.n	8044bf4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8044baa:	687b      	ldr	r3, [r7, #4]
 8044bac:	681b      	ldr	r3, [r3, #0]
 8044bae:	b2db      	uxtb	r3, r3
 8044bb0:	3b10      	subs	r3, #16
 8044bb2:	4a27      	ldr	r2, [pc, #156]	; (8044c50 <DMA_CalcBaseAndBitshift+0x158>)
 8044bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8044bb8:	091b      	lsrs	r3, r3, #4
 8044bba:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8044bbc:	68fb      	ldr	r3, [r7, #12]
 8044bbe:	f003 0307 	and.w	r3, r3, #7
 8044bc2:	4a24      	ldr	r2, [pc, #144]	; (8044c54 <DMA_CalcBaseAndBitshift+0x15c>)
 8044bc4:	5cd3      	ldrb	r3, [r2, r3]
 8044bc6:	461a      	mov	r2, r3
 8044bc8:	687b      	ldr	r3, [r7, #4]
 8044bca:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8044bcc:	68fb      	ldr	r3, [r7, #12]
 8044bce:	2b03      	cmp	r3, #3
 8044bd0:	d908      	bls.n	8044be4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8044bd2:	687b      	ldr	r3, [r7, #4]
 8044bd4:	681b      	ldr	r3, [r3, #0]
 8044bd6:	461a      	mov	r2, r3
 8044bd8:	4b1f      	ldr	r3, [pc, #124]	; (8044c58 <DMA_CalcBaseAndBitshift+0x160>)
 8044bda:	4013      	ands	r3, r2
 8044bdc:	1d1a      	adds	r2, r3, #4
 8044bde:	687b      	ldr	r3, [r7, #4]
 8044be0:	659a      	str	r2, [r3, #88]	; 0x58
 8044be2:	e00d      	b.n	8044c00 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8044be4:	687b      	ldr	r3, [r7, #4]
 8044be6:	681b      	ldr	r3, [r3, #0]
 8044be8:	461a      	mov	r2, r3
 8044bea:	4b1b      	ldr	r3, [pc, #108]	; (8044c58 <DMA_CalcBaseAndBitshift+0x160>)
 8044bec:	4013      	ands	r3, r2
 8044bee:	687a      	ldr	r2, [r7, #4]
 8044bf0:	6593      	str	r3, [r2, #88]	; 0x58
 8044bf2:	e005      	b.n	8044c00 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8044bf4:	687b      	ldr	r3, [r7, #4]
 8044bf6:	681b      	ldr	r3, [r3, #0]
 8044bf8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8044bfc:	687b      	ldr	r3, [r7, #4]
 8044bfe:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8044c00:	687b      	ldr	r3, [r7, #4]
 8044c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8044c04:	4618      	mov	r0, r3
 8044c06:	3714      	adds	r7, #20
 8044c08:	46bd      	mov	sp, r7
 8044c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044c0e:	4770      	bx	lr
 8044c10:	40020010 	.word	0x40020010
 8044c14:	40020028 	.word	0x40020028
 8044c18:	40020040 	.word	0x40020040
 8044c1c:	40020058 	.word	0x40020058
 8044c20:	40020070 	.word	0x40020070
 8044c24:	40020088 	.word	0x40020088
 8044c28:	400200a0 	.word	0x400200a0
 8044c2c:	400200b8 	.word	0x400200b8
 8044c30:	40020410 	.word	0x40020410
 8044c34:	40020428 	.word	0x40020428
 8044c38:	40020440 	.word	0x40020440
 8044c3c:	40020458 	.word	0x40020458
 8044c40:	40020470 	.word	0x40020470
 8044c44:	40020488 	.word	0x40020488
 8044c48:	400204a0 	.word	0x400204a0
 8044c4c:	400204b8 	.word	0x400204b8
 8044c50:	aaaaaaab 	.word	0xaaaaaaab
 8044c54:	0805b960 	.word	0x0805b960
 8044c58:	fffffc00 	.word	0xfffffc00

08044c5c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8044c5c:	b480      	push	{r7}
 8044c5e:	b085      	sub	sp, #20
 8044c60:	af00      	add	r7, sp, #0
 8044c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8044c64:	2300      	movs	r3, #0
 8044c66:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8044c68:	687b      	ldr	r3, [r7, #4]
 8044c6a:	699b      	ldr	r3, [r3, #24]
 8044c6c:	2b00      	cmp	r3, #0
 8044c6e:	d120      	bne.n	8044cb2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8044c70:	687b      	ldr	r3, [r7, #4]
 8044c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8044c74:	2b03      	cmp	r3, #3
 8044c76:	d858      	bhi.n	8044d2a <DMA_CheckFifoParam+0xce>
 8044c78:	a201      	add	r2, pc, #4	; (adr r2, 8044c80 <DMA_CheckFifoParam+0x24>)
 8044c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8044c7e:	bf00      	nop
 8044c80:	08044c91 	.word	0x08044c91
 8044c84:	08044ca3 	.word	0x08044ca3
 8044c88:	08044c91 	.word	0x08044c91
 8044c8c:	08044d2b 	.word	0x08044d2b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8044c90:	687b      	ldr	r3, [r7, #4]
 8044c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8044c94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8044c98:	2b00      	cmp	r3, #0
 8044c9a:	d048      	beq.n	8044d2e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8044c9c:	2301      	movs	r3, #1
 8044c9e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8044ca0:	e045      	b.n	8044d2e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8044ca2:	687b      	ldr	r3, [r7, #4]
 8044ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8044ca6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8044caa:	d142      	bne.n	8044d32 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8044cac:	2301      	movs	r3, #1
 8044cae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8044cb0:	e03f      	b.n	8044d32 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8044cb2:	687b      	ldr	r3, [r7, #4]
 8044cb4:	699b      	ldr	r3, [r3, #24]
 8044cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8044cba:	d123      	bne.n	8044d04 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8044cbc:	687b      	ldr	r3, [r7, #4]
 8044cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8044cc0:	2b03      	cmp	r3, #3
 8044cc2:	d838      	bhi.n	8044d36 <DMA_CheckFifoParam+0xda>
 8044cc4:	a201      	add	r2, pc, #4	; (adr r2, 8044ccc <DMA_CheckFifoParam+0x70>)
 8044cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8044cca:	bf00      	nop
 8044ccc:	08044cdd 	.word	0x08044cdd
 8044cd0:	08044ce3 	.word	0x08044ce3
 8044cd4:	08044cdd 	.word	0x08044cdd
 8044cd8:	08044cf5 	.word	0x08044cf5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8044cdc:	2301      	movs	r3, #1
 8044cde:	73fb      	strb	r3, [r7, #15]
        break;
 8044ce0:	e030      	b.n	8044d44 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8044ce2:	687b      	ldr	r3, [r7, #4]
 8044ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8044ce6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8044cea:	2b00      	cmp	r3, #0
 8044cec:	d025      	beq.n	8044d3a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8044cee:	2301      	movs	r3, #1
 8044cf0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8044cf2:	e022      	b.n	8044d3a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8044cf4:	687b      	ldr	r3, [r7, #4]
 8044cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8044cf8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8044cfc:	d11f      	bne.n	8044d3e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8044cfe:	2301      	movs	r3, #1
 8044d00:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8044d02:	e01c      	b.n	8044d3e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8044d04:	687b      	ldr	r3, [r7, #4]
 8044d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8044d08:	2b02      	cmp	r3, #2
 8044d0a:	d902      	bls.n	8044d12 <DMA_CheckFifoParam+0xb6>
 8044d0c:	2b03      	cmp	r3, #3
 8044d0e:	d003      	beq.n	8044d18 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8044d10:	e018      	b.n	8044d44 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8044d12:	2301      	movs	r3, #1
 8044d14:	73fb      	strb	r3, [r7, #15]
        break;
 8044d16:	e015      	b.n	8044d44 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8044d18:	687b      	ldr	r3, [r7, #4]
 8044d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8044d1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8044d20:	2b00      	cmp	r3, #0
 8044d22:	d00e      	beq.n	8044d42 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8044d24:	2301      	movs	r3, #1
 8044d26:	73fb      	strb	r3, [r7, #15]
    break;
 8044d28:	e00b      	b.n	8044d42 <DMA_CheckFifoParam+0xe6>
        break;
 8044d2a:	bf00      	nop
 8044d2c:	e00a      	b.n	8044d44 <DMA_CheckFifoParam+0xe8>
        break;
 8044d2e:	bf00      	nop
 8044d30:	e008      	b.n	8044d44 <DMA_CheckFifoParam+0xe8>
        break;
 8044d32:	bf00      	nop
 8044d34:	e006      	b.n	8044d44 <DMA_CheckFifoParam+0xe8>
        break;
 8044d36:	bf00      	nop
 8044d38:	e004      	b.n	8044d44 <DMA_CheckFifoParam+0xe8>
        break;
 8044d3a:	bf00      	nop
 8044d3c:	e002      	b.n	8044d44 <DMA_CheckFifoParam+0xe8>
        break;
 8044d3e:	bf00      	nop
 8044d40:	e000      	b.n	8044d44 <DMA_CheckFifoParam+0xe8>
    break;
 8044d42:	bf00      	nop
    }
  }

  return status;
 8044d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8044d46:	4618      	mov	r0, r3
 8044d48:	3714      	adds	r7, #20
 8044d4a:	46bd      	mov	sp, r7
 8044d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044d50:	4770      	bx	lr
 8044d52:	bf00      	nop

08044d54 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8044d54:	b480      	push	{r7}
 8044d56:	b085      	sub	sp, #20
 8044d58:	af00      	add	r7, sp, #0
 8044d5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8044d5c:	687b      	ldr	r3, [r7, #4]
 8044d5e:	681b      	ldr	r3, [r3, #0]
 8044d60:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8044d62:	687b      	ldr	r3, [r7, #4]
 8044d64:	681b      	ldr	r3, [r3, #0]
 8044d66:	4a38      	ldr	r2, [pc, #224]	; (8044e48 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8044d68:	4293      	cmp	r3, r2
 8044d6a:	d022      	beq.n	8044db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8044d6c:	687b      	ldr	r3, [r7, #4]
 8044d6e:	681b      	ldr	r3, [r3, #0]
 8044d70:	4a36      	ldr	r2, [pc, #216]	; (8044e4c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8044d72:	4293      	cmp	r3, r2
 8044d74:	d01d      	beq.n	8044db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8044d76:	687b      	ldr	r3, [r7, #4]
 8044d78:	681b      	ldr	r3, [r3, #0]
 8044d7a:	4a35      	ldr	r2, [pc, #212]	; (8044e50 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8044d7c:	4293      	cmp	r3, r2
 8044d7e:	d018      	beq.n	8044db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8044d80:	687b      	ldr	r3, [r7, #4]
 8044d82:	681b      	ldr	r3, [r3, #0]
 8044d84:	4a33      	ldr	r2, [pc, #204]	; (8044e54 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8044d86:	4293      	cmp	r3, r2
 8044d88:	d013      	beq.n	8044db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8044d8a:	687b      	ldr	r3, [r7, #4]
 8044d8c:	681b      	ldr	r3, [r3, #0]
 8044d8e:	4a32      	ldr	r2, [pc, #200]	; (8044e58 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8044d90:	4293      	cmp	r3, r2
 8044d92:	d00e      	beq.n	8044db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8044d94:	687b      	ldr	r3, [r7, #4]
 8044d96:	681b      	ldr	r3, [r3, #0]
 8044d98:	4a30      	ldr	r2, [pc, #192]	; (8044e5c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8044d9a:	4293      	cmp	r3, r2
 8044d9c:	d009      	beq.n	8044db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8044d9e:	687b      	ldr	r3, [r7, #4]
 8044da0:	681b      	ldr	r3, [r3, #0]
 8044da2:	4a2f      	ldr	r2, [pc, #188]	; (8044e60 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8044da4:	4293      	cmp	r3, r2
 8044da6:	d004      	beq.n	8044db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8044da8:	687b      	ldr	r3, [r7, #4]
 8044daa:	681b      	ldr	r3, [r3, #0]
 8044dac:	4a2d      	ldr	r2, [pc, #180]	; (8044e64 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8044dae:	4293      	cmp	r3, r2
 8044db0:	d101      	bne.n	8044db6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8044db2:	2301      	movs	r3, #1
 8044db4:	e000      	b.n	8044db8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8044db6:	2300      	movs	r3, #0
 8044db8:	2b00      	cmp	r3, #0
 8044dba:	d01a      	beq.n	8044df2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8044dbc:	687b      	ldr	r3, [r7, #4]
 8044dbe:	681b      	ldr	r3, [r3, #0]
 8044dc0:	b2db      	uxtb	r3, r3
 8044dc2:	3b08      	subs	r3, #8
 8044dc4:	4a28      	ldr	r2, [pc, #160]	; (8044e68 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8044dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8044dca:	091b      	lsrs	r3, r3, #4
 8044dcc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8044dce:	68fa      	ldr	r2, [r7, #12]
 8044dd0:	4b26      	ldr	r3, [pc, #152]	; (8044e6c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8044dd2:	4413      	add	r3, r2
 8044dd4:	009b      	lsls	r3, r3, #2
 8044dd6:	461a      	mov	r2, r3
 8044dd8:	687b      	ldr	r3, [r7, #4]
 8044dda:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8044ddc:	687b      	ldr	r3, [r7, #4]
 8044dde:	4a24      	ldr	r2, [pc, #144]	; (8044e70 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8044de0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8044de2:	68fb      	ldr	r3, [r7, #12]
 8044de4:	f003 031f 	and.w	r3, r3, #31
 8044de8:	2201      	movs	r2, #1
 8044dea:	409a      	lsls	r2, r3
 8044dec:	687b      	ldr	r3, [r7, #4]
 8044dee:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8044df0:	e024      	b.n	8044e3c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8044df2:	687b      	ldr	r3, [r7, #4]
 8044df4:	681b      	ldr	r3, [r3, #0]
 8044df6:	b2db      	uxtb	r3, r3
 8044df8:	3b10      	subs	r3, #16
 8044dfa:	4a1e      	ldr	r2, [pc, #120]	; (8044e74 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8044dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8044e00:	091b      	lsrs	r3, r3, #4
 8044e02:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8044e04:	68bb      	ldr	r3, [r7, #8]
 8044e06:	4a1c      	ldr	r2, [pc, #112]	; (8044e78 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8044e08:	4293      	cmp	r3, r2
 8044e0a:	d806      	bhi.n	8044e1a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8044e0c:	68bb      	ldr	r3, [r7, #8]
 8044e0e:	4a1b      	ldr	r2, [pc, #108]	; (8044e7c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8044e10:	4293      	cmp	r3, r2
 8044e12:	d902      	bls.n	8044e1a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8044e14:	68fb      	ldr	r3, [r7, #12]
 8044e16:	3308      	adds	r3, #8
 8044e18:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8044e1a:	68fa      	ldr	r2, [r7, #12]
 8044e1c:	4b18      	ldr	r3, [pc, #96]	; (8044e80 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8044e1e:	4413      	add	r3, r2
 8044e20:	009b      	lsls	r3, r3, #2
 8044e22:	461a      	mov	r2, r3
 8044e24:	687b      	ldr	r3, [r7, #4]
 8044e26:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8044e28:	687b      	ldr	r3, [r7, #4]
 8044e2a:	4a16      	ldr	r2, [pc, #88]	; (8044e84 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8044e2c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8044e2e:	68fb      	ldr	r3, [r7, #12]
 8044e30:	f003 031f 	and.w	r3, r3, #31
 8044e34:	2201      	movs	r2, #1
 8044e36:	409a      	lsls	r2, r3
 8044e38:	687b      	ldr	r3, [r7, #4]
 8044e3a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8044e3c:	bf00      	nop
 8044e3e:	3714      	adds	r7, #20
 8044e40:	46bd      	mov	sp, r7
 8044e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044e46:	4770      	bx	lr
 8044e48:	58025408 	.word	0x58025408
 8044e4c:	5802541c 	.word	0x5802541c
 8044e50:	58025430 	.word	0x58025430
 8044e54:	58025444 	.word	0x58025444
 8044e58:	58025458 	.word	0x58025458
 8044e5c:	5802546c 	.word	0x5802546c
 8044e60:	58025480 	.word	0x58025480
 8044e64:	58025494 	.word	0x58025494
 8044e68:	cccccccd 	.word	0xcccccccd
 8044e6c:	16009600 	.word	0x16009600
 8044e70:	58025880 	.word	0x58025880
 8044e74:	aaaaaaab 	.word	0xaaaaaaab
 8044e78:	400204b8 	.word	0x400204b8
 8044e7c:	4002040f 	.word	0x4002040f
 8044e80:	10008200 	.word	0x10008200
 8044e84:	40020880 	.word	0x40020880

08044e88 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8044e88:	b480      	push	{r7}
 8044e8a:	b085      	sub	sp, #20
 8044e8c:	af00      	add	r7, sp, #0
 8044e8e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8044e90:	687b      	ldr	r3, [r7, #4]
 8044e92:	685b      	ldr	r3, [r3, #4]
 8044e94:	b2db      	uxtb	r3, r3
 8044e96:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8044e98:	68fb      	ldr	r3, [r7, #12]
 8044e9a:	2b00      	cmp	r3, #0
 8044e9c:	d04a      	beq.n	8044f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8044e9e:	68fb      	ldr	r3, [r7, #12]
 8044ea0:	2b08      	cmp	r3, #8
 8044ea2:	d847      	bhi.n	8044f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8044ea4:	687b      	ldr	r3, [r7, #4]
 8044ea6:	681b      	ldr	r3, [r3, #0]
 8044ea8:	4a25      	ldr	r2, [pc, #148]	; (8044f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8044eaa:	4293      	cmp	r3, r2
 8044eac:	d022      	beq.n	8044ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8044eae:	687b      	ldr	r3, [r7, #4]
 8044eb0:	681b      	ldr	r3, [r3, #0]
 8044eb2:	4a24      	ldr	r2, [pc, #144]	; (8044f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8044eb4:	4293      	cmp	r3, r2
 8044eb6:	d01d      	beq.n	8044ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8044eb8:	687b      	ldr	r3, [r7, #4]
 8044eba:	681b      	ldr	r3, [r3, #0]
 8044ebc:	4a22      	ldr	r2, [pc, #136]	; (8044f48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8044ebe:	4293      	cmp	r3, r2
 8044ec0:	d018      	beq.n	8044ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8044ec2:	687b      	ldr	r3, [r7, #4]
 8044ec4:	681b      	ldr	r3, [r3, #0]
 8044ec6:	4a21      	ldr	r2, [pc, #132]	; (8044f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8044ec8:	4293      	cmp	r3, r2
 8044eca:	d013      	beq.n	8044ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8044ecc:	687b      	ldr	r3, [r7, #4]
 8044ece:	681b      	ldr	r3, [r3, #0]
 8044ed0:	4a1f      	ldr	r2, [pc, #124]	; (8044f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8044ed2:	4293      	cmp	r3, r2
 8044ed4:	d00e      	beq.n	8044ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8044ed6:	687b      	ldr	r3, [r7, #4]
 8044ed8:	681b      	ldr	r3, [r3, #0]
 8044eda:	4a1e      	ldr	r2, [pc, #120]	; (8044f54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8044edc:	4293      	cmp	r3, r2
 8044ede:	d009      	beq.n	8044ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8044ee0:	687b      	ldr	r3, [r7, #4]
 8044ee2:	681b      	ldr	r3, [r3, #0]
 8044ee4:	4a1c      	ldr	r2, [pc, #112]	; (8044f58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8044ee6:	4293      	cmp	r3, r2
 8044ee8:	d004      	beq.n	8044ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8044eea:	687b      	ldr	r3, [r7, #4]
 8044eec:	681b      	ldr	r3, [r3, #0]
 8044eee:	4a1b      	ldr	r2, [pc, #108]	; (8044f5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8044ef0:	4293      	cmp	r3, r2
 8044ef2:	d101      	bne.n	8044ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8044ef4:	2301      	movs	r3, #1
 8044ef6:	e000      	b.n	8044efa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8044ef8:	2300      	movs	r3, #0
 8044efa:	2b00      	cmp	r3, #0
 8044efc:	d00a      	beq.n	8044f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8044efe:	68fa      	ldr	r2, [r7, #12]
 8044f00:	4b17      	ldr	r3, [pc, #92]	; (8044f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8044f02:	4413      	add	r3, r2
 8044f04:	009b      	lsls	r3, r3, #2
 8044f06:	461a      	mov	r2, r3
 8044f08:	687b      	ldr	r3, [r7, #4]
 8044f0a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8044f0c:	687b      	ldr	r3, [r7, #4]
 8044f0e:	4a15      	ldr	r2, [pc, #84]	; (8044f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8044f10:	671a      	str	r2, [r3, #112]	; 0x70
 8044f12:	e009      	b.n	8044f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8044f14:	68fa      	ldr	r2, [r7, #12]
 8044f16:	4b14      	ldr	r3, [pc, #80]	; (8044f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8044f18:	4413      	add	r3, r2
 8044f1a:	009b      	lsls	r3, r3, #2
 8044f1c:	461a      	mov	r2, r3
 8044f1e:	687b      	ldr	r3, [r7, #4]
 8044f20:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8044f22:	687b      	ldr	r3, [r7, #4]
 8044f24:	4a11      	ldr	r2, [pc, #68]	; (8044f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8044f26:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8044f28:	68fb      	ldr	r3, [r7, #12]
 8044f2a:	3b01      	subs	r3, #1
 8044f2c:	2201      	movs	r2, #1
 8044f2e:	409a      	lsls	r2, r3
 8044f30:	687b      	ldr	r3, [r7, #4]
 8044f32:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8044f34:	bf00      	nop
 8044f36:	3714      	adds	r7, #20
 8044f38:	46bd      	mov	sp, r7
 8044f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044f3e:	4770      	bx	lr
 8044f40:	58025408 	.word	0x58025408
 8044f44:	5802541c 	.word	0x5802541c
 8044f48:	58025430 	.word	0x58025430
 8044f4c:	58025444 	.word	0x58025444
 8044f50:	58025458 	.word	0x58025458
 8044f54:	5802546c 	.word	0x5802546c
 8044f58:	58025480 	.word	0x58025480
 8044f5c:	58025494 	.word	0x58025494
 8044f60:	1600963f 	.word	0x1600963f
 8044f64:	58025940 	.word	0x58025940
 8044f68:	1000823f 	.word	0x1000823f
 8044f6c:	40020940 	.word	0x40020940

08044f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8044f70:	b480      	push	{r7}
 8044f72:	b089      	sub	sp, #36	; 0x24
 8044f74:	af00      	add	r7, sp, #0
 8044f76:	6078      	str	r0, [r7, #4]
 8044f78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8044f7a:	2300      	movs	r3, #0
 8044f7c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8044f7e:	4b86      	ldr	r3, [pc, #536]	; (8045198 <HAL_GPIO_Init+0x228>)
 8044f80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8044f82:	e18c      	b.n	804529e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8044f84:	683b      	ldr	r3, [r7, #0]
 8044f86:	681a      	ldr	r2, [r3, #0]
 8044f88:	2101      	movs	r1, #1
 8044f8a:	69fb      	ldr	r3, [r7, #28]
 8044f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8044f90:	4013      	ands	r3, r2
 8044f92:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8044f94:	693b      	ldr	r3, [r7, #16]
 8044f96:	2b00      	cmp	r3, #0
 8044f98:	f000 817e 	beq.w	8045298 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8044f9c:	683b      	ldr	r3, [r7, #0]
 8044f9e:	685b      	ldr	r3, [r3, #4]
 8044fa0:	f003 0303 	and.w	r3, r3, #3
 8044fa4:	2b01      	cmp	r3, #1
 8044fa6:	d005      	beq.n	8044fb4 <HAL_GPIO_Init+0x44>
 8044fa8:	683b      	ldr	r3, [r7, #0]
 8044faa:	685b      	ldr	r3, [r3, #4]
 8044fac:	f003 0303 	and.w	r3, r3, #3
 8044fb0:	2b02      	cmp	r3, #2
 8044fb2:	d130      	bne.n	8045016 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8044fb4:	687b      	ldr	r3, [r7, #4]
 8044fb6:	689b      	ldr	r3, [r3, #8]
 8044fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8044fba:	69fb      	ldr	r3, [r7, #28]
 8044fbc:	005b      	lsls	r3, r3, #1
 8044fbe:	2203      	movs	r2, #3
 8044fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8044fc4:	43db      	mvns	r3, r3
 8044fc6:	69ba      	ldr	r2, [r7, #24]
 8044fc8:	4013      	ands	r3, r2
 8044fca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8044fcc:	683b      	ldr	r3, [r7, #0]
 8044fce:	68da      	ldr	r2, [r3, #12]
 8044fd0:	69fb      	ldr	r3, [r7, #28]
 8044fd2:	005b      	lsls	r3, r3, #1
 8044fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8044fd8:	69ba      	ldr	r2, [r7, #24]
 8044fda:	4313      	orrs	r3, r2
 8044fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8044fde:	687b      	ldr	r3, [r7, #4]
 8044fe0:	69ba      	ldr	r2, [r7, #24]
 8044fe2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8044fe4:	687b      	ldr	r3, [r7, #4]
 8044fe6:	685b      	ldr	r3, [r3, #4]
 8044fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8044fea:	2201      	movs	r2, #1
 8044fec:	69fb      	ldr	r3, [r7, #28]
 8044fee:	fa02 f303 	lsl.w	r3, r2, r3
 8044ff2:	43db      	mvns	r3, r3
 8044ff4:	69ba      	ldr	r2, [r7, #24]
 8044ff6:	4013      	ands	r3, r2
 8044ff8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8044ffa:	683b      	ldr	r3, [r7, #0]
 8044ffc:	685b      	ldr	r3, [r3, #4]
 8044ffe:	091b      	lsrs	r3, r3, #4
 8045000:	f003 0201 	and.w	r2, r3, #1
 8045004:	69fb      	ldr	r3, [r7, #28]
 8045006:	fa02 f303 	lsl.w	r3, r2, r3
 804500a:	69ba      	ldr	r2, [r7, #24]
 804500c:	4313      	orrs	r3, r2
 804500e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8045010:	687b      	ldr	r3, [r7, #4]
 8045012:	69ba      	ldr	r2, [r7, #24]
 8045014:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8045016:	683b      	ldr	r3, [r7, #0]
 8045018:	685b      	ldr	r3, [r3, #4]
 804501a:	f003 0303 	and.w	r3, r3, #3
 804501e:	2b03      	cmp	r3, #3
 8045020:	d017      	beq.n	8045052 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8045022:	687b      	ldr	r3, [r7, #4]
 8045024:	68db      	ldr	r3, [r3, #12]
 8045026:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8045028:	69fb      	ldr	r3, [r7, #28]
 804502a:	005b      	lsls	r3, r3, #1
 804502c:	2203      	movs	r2, #3
 804502e:	fa02 f303 	lsl.w	r3, r2, r3
 8045032:	43db      	mvns	r3, r3
 8045034:	69ba      	ldr	r2, [r7, #24]
 8045036:	4013      	ands	r3, r2
 8045038:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 804503a:	683b      	ldr	r3, [r7, #0]
 804503c:	689a      	ldr	r2, [r3, #8]
 804503e:	69fb      	ldr	r3, [r7, #28]
 8045040:	005b      	lsls	r3, r3, #1
 8045042:	fa02 f303 	lsl.w	r3, r2, r3
 8045046:	69ba      	ldr	r2, [r7, #24]
 8045048:	4313      	orrs	r3, r2
 804504a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 804504c:	687b      	ldr	r3, [r7, #4]
 804504e:	69ba      	ldr	r2, [r7, #24]
 8045050:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8045052:	683b      	ldr	r3, [r7, #0]
 8045054:	685b      	ldr	r3, [r3, #4]
 8045056:	f003 0303 	and.w	r3, r3, #3
 804505a:	2b02      	cmp	r3, #2
 804505c:	d123      	bne.n	80450a6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 804505e:	69fb      	ldr	r3, [r7, #28]
 8045060:	08da      	lsrs	r2, r3, #3
 8045062:	687b      	ldr	r3, [r7, #4]
 8045064:	3208      	adds	r2, #8
 8045066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804506a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 804506c:	69fb      	ldr	r3, [r7, #28]
 804506e:	f003 0307 	and.w	r3, r3, #7
 8045072:	009b      	lsls	r3, r3, #2
 8045074:	220f      	movs	r2, #15
 8045076:	fa02 f303 	lsl.w	r3, r2, r3
 804507a:	43db      	mvns	r3, r3
 804507c:	69ba      	ldr	r2, [r7, #24]
 804507e:	4013      	ands	r3, r2
 8045080:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8045082:	683b      	ldr	r3, [r7, #0]
 8045084:	691a      	ldr	r2, [r3, #16]
 8045086:	69fb      	ldr	r3, [r7, #28]
 8045088:	f003 0307 	and.w	r3, r3, #7
 804508c:	009b      	lsls	r3, r3, #2
 804508e:	fa02 f303 	lsl.w	r3, r2, r3
 8045092:	69ba      	ldr	r2, [r7, #24]
 8045094:	4313      	orrs	r3, r2
 8045096:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8045098:	69fb      	ldr	r3, [r7, #28]
 804509a:	08da      	lsrs	r2, r3, #3
 804509c:	687b      	ldr	r3, [r7, #4]
 804509e:	3208      	adds	r2, #8
 80450a0:	69b9      	ldr	r1, [r7, #24]
 80450a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80450a6:	687b      	ldr	r3, [r7, #4]
 80450a8:	681b      	ldr	r3, [r3, #0]
 80450aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80450ac:	69fb      	ldr	r3, [r7, #28]
 80450ae:	005b      	lsls	r3, r3, #1
 80450b0:	2203      	movs	r2, #3
 80450b2:	fa02 f303 	lsl.w	r3, r2, r3
 80450b6:	43db      	mvns	r3, r3
 80450b8:	69ba      	ldr	r2, [r7, #24]
 80450ba:	4013      	ands	r3, r2
 80450bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80450be:	683b      	ldr	r3, [r7, #0]
 80450c0:	685b      	ldr	r3, [r3, #4]
 80450c2:	f003 0203 	and.w	r2, r3, #3
 80450c6:	69fb      	ldr	r3, [r7, #28]
 80450c8:	005b      	lsls	r3, r3, #1
 80450ca:	fa02 f303 	lsl.w	r3, r2, r3
 80450ce:	69ba      	ldr	r2, [r7, #24]
 80450d0:	4313      	orrs	r3, r2
 80450d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80450d4:	687b      	ldr	r3, [r7, #4]
 80450d6:	69ba      	ldr	r2, [r7, #24]
 80450d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80450da:	683b      	ldr	r3, [r7, #0]
 80450dc:	685b      	ldr	r3, [r3, #4]
 80450de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80450e2:	2b00      	cmp	r3, #0
 80450e4:	f000 80d8 	beq.w	8045298 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80450e8:	4b2c      	ldr	r3, [pc, #176]	; (804519c <HAL_GPIO_Init+0x22c>)
 80450ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80450ee:	4a2b      	ldr	r2, [pc, #172]	; (804519c <HAL_GPIO_Init+0x22c>)
 80450f0:	f043 0302 	orr.w	r3, r3, #2
 80450f4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80450f8:	4b28      	ldr	r3, [pc, #160]	; (804519c <HAL_GPIO_Init+0x22c>)
 80450fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80450fe:	f003 0302 	and.w	r3, r3, #2
 8045102:	60fb      	str	r3, [r7, #12]
 8045104:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8045106:	4a26      	ldr	r2, [pc, #152]	; (80451a0 <HAL_GPIO_Init+0x230>)
 8045108:	69fb      	ldr	r3, [r7, #28]
 804510a:	089b      	lsrs	r3, r3, #2
 804510c:	3302      	adds	r3, #2
 804510e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8045112:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8045114:	69fb      	ldr	r3, [r7, #28]
 8045116:	f003 0303 	and.w	r3, r3, #3
 804511a:	009b      	lsls	r3, r3, #2
 804511c:	220f      	movs	r2, #15
 804511e:	fa02 f303 	lsl.w	r3, r2, r3
 8045122:	43db      	mvns	r3, r3
 8045124:	69ba      	ldr	r2, [r7, #24]
 8045126:	4013      	ands	r3, r2
 8045128:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 804512a:	687b      	ldr	r3, [r7, #4]
 804512c:	4a1d      	ldr	r2, [pc, #116]	; (80451a4 <HAL_GPIO_Init+0x234>)
 804512e:	4293      	cmp	r3, r2
 8045130:	d04a      	beq.n	80451c8 <HAL_GPIO_Init+0x258>
 8045132:	687b      	ldr	r3, [r7, #4]
 8045134:	4a1c      	ldr	r2, [pc, #112]	; (80451a8 <HAL_GPIO_Init+0x238>)
 8045136:	4293      	cmp	r3, r2
 8045138:	d02b      	beq.n	8045192 <HAL_GPIO_Init+0x222>
 804513a:	687b      	ldr	r3, [r7, #4]
 804513c:	4a1b      	ldr	r2, [pc, #108]	; (80451ac <HAL_GPIO_Init+0x23c>)
 804513e:	4293      	cmp	r3, r2
 8045140:	d025      	beq.n	804518e <HAL_GPIO_Init+0x21e>
 8045142:	687b      	ldr	r3, [r7, #4]
 8045144:	4a1a      	ldr	r2, [pc, #104]	; (80451b0 <HAL_GPIO_Init+0x240>)
 8045146:	4293      	cmp	r3, r2
 8045148:	d01f      	beq.n	804518a <HAL_GPIO_Init+0x21a>
 804514a:	687b      	ldr	r3, [r7, #4]
 804514c:	4a19      	ldr	r2, [pc, #100]	; (80451b4 <HAL_GPIO_Init+0x244>)
 804514e:	4293      	cmp	r3, r2
 8045150:	d019      	beq.n	8045186 <HAL_GPIO_Init+0x216>
 8045152:	687b      	ldr	r3, [r7, #4]
 8045154:	4a18      	ldr	r2, [pc, #96]	; (80451b8 <HAL_GPIO_Init+0x248>)
 8045156:	4293      	cmp	r3, r2
 8045158:	d013      	beq.n	8045182 <HAL_GPIO_Init+0x212>
 804515a:	687b      	ldr	r3, [r7, #4]
 804515c:	4a17      	ldr	r2, [pc, #92]	; (80451bc <HAL_GPIO_Init+0x24c>)
 804515e:	4293      	cmp	r3, r2
 8045160:	d00d      	beq.n	804517e <HAL_GPIO_Init+0x20e>
 8045162:	687b      	ldr	r3, [r7, #4]
 8045164:	4a16      	ldr	r2, [pc, #88]	; (80451c0 <HAL_GPIO_Init+0x250>)
 8045166:	4293      	cmp	r3, r2
 8045168:	d007      	beq.n	804517a <HAL_GPIO_Init+0x20a>
 804516a:	687b      	ldr	r3, [r7, #4]
 804516c:	4a15      	ldr	r2, [pc, #84]	; (80451c4 <HAL_GPIO_Init+0x254>)
 804516e:	4293      	cmp	r3, r2
 8045170:	d101      	bne.n	8045176 <HAL_GPIO_Init+0x206>
 8045172:	2309      	movs	r3, #9
 8045174:	e029      	b.n	80451ca <HAL_GPIO_Init+0x25a>
 8045176:	230a      	movs	r3, #10
 8045178:	e027      	b.n	80451ca <HAL_GPIO_Init+0x25a>
 804517a:	2307      	movs	r3, #7
 804517c:	e025      	b.n	80451ca <HAL_GPIO_Init+0x25a>
 804517e:	2306      	movs	r3, #6
 8045180:	e023      	b.n	80451ca <HAL_GPIO_Init+0x25a>
 8045182:	2305      	movs	r3, #5
 8045184:	e021      	b.n	80451ca <HAL_GPIO_Init+0x25a>
 8045186:	2304      	movs	r3, #4
 8045188:	e01f      	b.n	80451ca <HAL_GPIO_Init+0x25a>
 804518a:	2303      	movs	r3, #3
 804518c:	e01d      	b.n	80451ca <HAL_GPIO_Init+0x25a>
 804518e:	2302      	movs	r3, #2
 8045190:	e01b      	b.n	80451ca <HAL_GPIO_Init+0x25a>
 8045192:	2301      	movs	r3, #1
 8045194:	e019      	b.n	80451ca <HAL_GPIO_Init+0x25a>
 8045196:	bf00      	nop
 8045198:	58000080 	.word	0x58000080
 804519c:	58024400 	.word	0x58024400
 80451a0:	58000400 	.word	0x58000400
 80451a4:	58020000 	.word	0x58020000
 80451a8:	58020400 	.word	0x58020400
 80451ac:	58020800 	.word	0x58020800
 80451b0:	58020c00 	.word	0x58020c00
 80451b4:	58021000 	.word	0x58021000
 80451b8:	58021400 	.word	0x58021400
 80451bc:	58021800 	.word	0x58021800
 80451c0:	58021c00 	.word	0x58021c00
 80451c4:	58022400 	.word	0x58022400
 80451c8:	2300      	movs	r3, #0
 80451ca:	69fa      	ldr	r2, [r7, #28]
 80451cc:	f002 0203 	and.w	r2, r2, #3
 80451d0:	0092      	lsls	r2, r2, #2
 80451d2:	4093      	lsls	r3, r2
 80451d4:	69ba      	ldr	r2, [r7, #24]
 80451d6:	4313      	orrs	r3, r2
 80451d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80451da:	4938      	ldr	r1, [pc, #224]	; (80452bc <HAL_GPIO_Init+0x34c>)
 80451dc:	69fb      	ldr	r3, [r7, #28]
 80451de:	089b      	lsrs	r3, r3, #2
 80451e0:	3302      	adds	r3, #2
 80451e2:	69ba      	ldr	r2, [r7, #24]
 80451e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80451e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80451ec:	681b      	ldr	r3, [r3, #0]
 80451ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80451f0:	693b      	ldr	r3, [r7, #16]
 80451f2:	43db      	mvns	r3, r3
 80451f4:	69ba      	ldr	r2, [r7, #24]
 80451f6:	4013      	ands	r3, r2
 80451f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80451fa:	683b      	ldr	r3, [r7, #0]
 80451fc:	685b      	ldr	r3, [r3, #4]
 80451fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8045202:	2b00      	cmp	r3, #0
 8045204:	d003      	beq.n	804520e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8045206:	69ba      	ldr	r2, [r7, #24]
 8045208:	693b      	ldr	r3, [r7, #16]
 804520a:	4313      	orrs	r3, r2
 804520c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 804520e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8045212:	69bb      	ldr	r3, [r7, #24]
 8045214:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8045216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 804521a:	685b      	ldr	r3, [r3, #4]
 804521c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 804521e:	693b      	ldr	r3, [r7, #16]
 8045220:	43db      	mvns	r3, r3
 8045222:	69ba      	ldr	r2, [r7, #24]
 8045224:	4013      	ands	r3, r2
 8045226:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8045228:	683b      	ldr	r3, [r7, #0]
 804522a:	685b      	ldr	r3, [r3, #4]
 804522c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8045230:	2b00      	cmp	r3, #0
 8045232:	d003      	beq.n	804523c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8045234:	69ba      	ldr	r2, [r7, #24]
 8045236:	693b      	ldr	r3, [r7, #16]
 8045238:	4313      	orrs	r3, r2
 804523a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 804523c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8045240:	69bb      	ldr	r3, [r7, #24]
 8045242:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8045244:	697b      	ldr	r3, [r7, #20]
 8045246:	685b      	ldr	r3, [r3, #4]
 8045248:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 804524a:	693b      	ldr	r3, [r7, #16]
 804524c:	43db      	mvns	r3, r3
 804524e:	69ba      	ldr	r2, [r7, #24]
 8045250:	4013      	ands	r3, r2
 8045252:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8045254:	683b      	ldr	r3, [r7, #0]
 8045256:	685b      	ldr	r3, [r3, #4]
 8045258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804525c:	2b00      	cmp	r3, #0
 804525e:	d003      	beq.n	8045268 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8045260:	69ba      	ldr	r2, [r7, #24]
 8045262:	693b      	ldr	r3, [r7, #16]
 8045264:	4313      	orrs	r3, r2
 8045266:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8045268:	697b      	ldr	r3, [r7, #20]
 804526a:	69ba      	ldr	r2, [r7, #24]
 804526c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 804526e:	697b      	ldr	r3, [r7, #20]
 8045270:	681b      	ldr	r3, [r3, #0]
 8045272:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8045274:	693b      	ldr	r3, [r7, #16]
 8045276:	43db      	mvns	r3, r3
 8045278:	69ba      	ldr	r2, [r7, #24]
 804527a:	4013      	ands	r3, r2
 804527c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 804527e:	683b      	ldr	r3, [r7, #0]
 8045280:	685b      	ldr	r3, [r3, #4]
 8045282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8045286:	2b00      	cmp	r3, #0
 8045288:	d003      	beq.n	8045292 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 804528a:	69ba      	ldr	r2, [r7, #24]
 804528c:	693b      	ldr	r3, [r7, #16]
 804528e:	4313      	orrs	r3, r2
 8045290:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8045292:	697b      	ldr	r3, [r7, #20]
 8045294:	69ba      	ldr	r2, [r7, #24]
 8045296:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8045298:	69fb      	ldr	r3, [r7, #28]
 804529a:	3301      	adds	r3, #1
 804529c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 804529e:	683b      	ldr	r3, [r7, #0]
 80452a0:	681a      	ldr	r2, [r3, #0]
 80452a2:	69fb      	ldr	r3, [r7, #28]
 80452a4:	fa22 f303 	lsr.w	r3, r2, r3
 80452a8:	2b00      	cmp	r3, #0
 80452aa:	f47f ae6b 	bne.w	8044f84 <HAL_GPIO_Init+0x14>
  }
}
 80452ae:	bf00      	nop
 80452b0:	bf00      	nop
 80452b2:	3724      	adds	r7, #36	; 0x24
 80452b4:	46bd      	mov	sp, r7
 80452b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80452ba:	4770      	bx	lr
 80452bc:	58000400 	.word	0x58000400

080452c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80452c0:	b480      	push	{r7}
 80452c2:	b083      	sub	sp, #12
 80452c4:	af00      	add	r7, sp, #0
 80452c6:	6078      	str	r0, [r7, #4]
 80452c8:	460b      	mov	r3, r1
 80452ca:	807b      	strh	r3, [r7, #2]
 80452cc:	4613      	mov	r3, r2
 80452ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80452d0:	787b      	ldrb	r3, [r7, #1]
 80452d2:	2b00      	cmp	r3, #0
 80452d4:	d003      	beq.n	80452de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80452d6:	887a      	ldrh	r2, [r7, #2]
 80452d8:	687b      	ldr	r3, [r7, #4]
 80452da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80452dc:	e003      	b.n	80452e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80452de:	887b      	ldrh	r3, [r7, #2]
 80452e0:	041a      	lsls	r2, r3, #16
 80452e2:	687b      	ldr	r3, [r7, #4]
 80452e4:	619a      	str	r2, [r3, #24]
}
 80452e6:	bf00      	nop
 80452e8:	370c      	adds	r7, #12
 80452ea:	46bd      	mov	sp, r7
 80452ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80452f0:	4770      	bx	lr

080452f2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80452f2:	b480      	push	{r7}
 80452f4:	b085      	sub	sp, #20
 80452f6:	af00      	add	r7, sp, #0
 80452f8:	6078      	str	r0, [r7, #4]
 80452fa:	460b      	mov	r3, r1
 80452fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80452fe:	687b      	ldr	r3, [r7, #4]
 8045300:	695b      	ldr	r3, [r3, #20]
 8045302:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8045304:	887a      	ldrh	r2, [r7, #2]
 8045306:	68fb      	ldr	r3, [r7, #12]
 8045308:	4013      	ands	r3, r2
 804530a:	041a      	lsls	r2, r3, #16
 804530c:	68fb      	ldr	r3, [r7, #12]
 804530e:	43d9      	mvns	r1, r3
 8045310:	887b      	ldrh	r3, [r7, #2]
 8045312:	400b      	ands	r3, r1
 8045314:	431a      	orrs	r2, r3
 8045316:	687b      	ldr	r3, [r7, #4]
 8045318:	619a      	str	r2, [r3, #24]
}
 804531a:	bf00      	nop
 804531c:	3714      	adds	r7, #20
 804531e:	46bd      	mov	sp, r7
 8045320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045324:	4770      	bx	lr

08045326 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8045326:	b5f0      	push	{r4, r5, r6, r7, lr}
 8045328:	b08f      	sub	sp, #60	; 0x3c
 804532a:	af0a      	add	r7, sp, #40	; 0x28
 804532c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 804532e:	687b      	ldr	r3, [r7, #4]
 8045330:	2b00      	cmp	r3, #0
 8045332:	d101      	bne.n	8045338 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8045334:	2301      	movs	r3, #1
 8045336:	e054      	b.n	80453e2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8045338:	687b      	ldr	r3, [r7, #4]
 804533a:	681b      	ldr	r3, [r3, #0]
 804533c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 804533e:	687b      	ldr	r3, [r7, #4]
 8045340:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8045344:	b2db      	uxtb	r3, r3
 8045346:	2b00      	cmp	r3, #0
 8045348:	d106      	bne.n	8045358 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 804534a:	687b      	ldr	r3, [r7, #4]
 804534c:	2200      	movs	r2, #0
 804534e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8045352:	6878      	ldr	r0, [r7, #4]
 8045354:	f014 fa9a 	bl	805988c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8045358:	687b      	ldr	r3, [r7, #4]
 804535a:	2203      	movs	r2, #3
 804535c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8045360:	68fb      	ldr	r3, [r7, #12]
 8045362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8045364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8045368:	2b00      	cmp	r3, #0
 804536a:	d102      	bne.n	8045372 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 804536c:	687b      	ldr	r3, [r7, #4]
 804536e:	2200      	movs	r2, #0
 8045370:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8045372:	687b      	ldr	r3, [r7, #4]
 8045374:	681b      	ldr	r3, [r3, #0]
 8045376:	4618      	mov	r0, r3
 8045378:	f006 fb53 	bl	804ba22 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 804537c:	687b      	ldr	r3, [r7, #4]
 804537e:	681b      	ldr	r3, [r3, #0]
 8045380:	603b      	str	r3, [r7, #0]
 8045382:	687e      	ldr	r6, [r7, #4]
 8045384:	466d      	mov	r5, sp
 8045386:	f106 0410 	add.w	r4, r6, #16
 804538a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 804538c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 804538e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8045390:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8045392:	e894 0003 	ldmia.w	r4, {r0, r1}
 8045396:	e885 0003 	stmia.w	r5, {r0, r1}
 804539a:	1d33      	adds	r3, r6, #4
 804539c:	cb0e      	ldmia	r3, {r1, r2, r3}
 804539e:	6838      	ldr	r0, [r7, #0]
 80453a0:	f006 fac0 	bl	804b924 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80453a4:	687b      	ldr	r3, [r7, #4]
 80453a6:	681b      	ldr	r3, [r3, #0]
 80453a8:	2101      	movs	r1, #1
 80453aa:	4618      	mov	r0, r3
 80453ac:	f006 fb4a 	bl	804ba44 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80453b0:	687b      	ldr	r3, [r7, #4]
 80453b2:	681b      	ldr	r3, [r3, #0]
 80453b4:	603b      	str	r3, [r7, #0]
 80453b6:	687e      	ldr	r6, [r7, #4]
 80453b8:	466d      	mov	r5, sp
 80453ba:	f106 0410 	add.w	r4, r6, #16
 80453be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80453c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80453c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80453c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80453c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80453ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80453ce:	1d33      	adds	r3, r6, #4
 80453d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80453d2:	6838      	ldr	r0, [r7, #0]
 80453d4:	f006 fcd2 	bl	804bd7c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80453d8:	687b      	ldr	r3, [r7, #4]
 80453da:	2201      	movs	r2, #1
 80453dc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80453e0:	2300      	movs	r3, #0
}
 80453e2:	4618      	mov	r0, r3
 80453e4:	3714      	adds	r7, #20
 80453e6:	46bd      	mov	sp, r7
 80453e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080453ea <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80453ea:	b590      	push	{r4, r7, lr}
 80453ec:	b089      	sub	sp, #36	; 0x24
 80453ee:	af04      	add	r7, sp, #16
 80453f0:	6078      	str	r0, [r7, #4]
 80453f2:	4608      	mov	r0, r1
 80453f4:	4611      	mov	r1, r2
 80453f6:	461a      	mov	r2, r3
 80453f8:	4603      	mov	r3, r0
 80453fa:	70fb      	strb	r3, [r7, #3]
 80453fc:	460b      	mov	r3, r1
 80453fe:	70bb      	strb	r3, [r7, #2]
 8045400:	4613      	mov	r3, r2
 8045402:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8045404:	687b      	ldr	r3, [r7, #4]
 8045406:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 804540a:	2b01      	cmp	r3, #1
 804540c:	d101      	bne.n	8045412 <HAL_HCD_HC_Init+0x28>
 804540e:	2302      	movs	r3, #2
 8045410:	e076      	b.n	8045500 <HAL_HCD_HC_Init+0x116>
 8045412:	687b      	ldr	r3, [r7, #4]
 8045414:	2201      	movs	r2, #1
 8045416:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 804541a:	78fb      	ldrb	r3, [r7, #3]
 804541c:	687a      	ldr	r2, [r7, #4]
 804541e:	212c      	movs	r1, #44	; 0x2c
 8045420:	fb01 f303 	mul.w	r3, r1, r3
 8045424:	4413      	add	r3, r2
 8045426:	333d      	adds	r3, #61	; 0x3d
 8045428:	2200      	movs	r2, #0
 804542a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 804542c:	78fb      	ldrb	r3, [r7, #3]
 804542e:	687a      	ldr	r2, [r7, #4]
 8045430:	212c      	movs	r1, #44	; 0x2c
 8045432:	fb01 f303 	mul.w	r3, r1, r3
 8045436:	4413      	add	r3, r2
 8045438:	3338      	adds	r3, #56	; 0x38
 804543a:	787a      	ldrb	r2, [r7, #1]
 804543c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 804543e:	78fb      	ldrb	r3, [r7, #3]
 8045440:	687a      	ldr	r2, [r7, #4]
 8045442:	212c      	movs	r1, #44	; 0x2c
 8045444:	fb01 f303 	mul.w	r3, r1, r3
 8045448:	4413      	add	r3, r2
 804544a:	3340      	adds	r3, #64	; 0x40
 804544c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 804544e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8045450:	78fb      	ldrb	r3, [r7, #3]
 8045452:	687a      	ldr	r2, [r7, #4]
 8045454:	212c      	movs	r1, #44	; 0x2c
 8045456:	fb01 f303 	mul.w	r3, r1, r3
 804545a:	4413      	add	r3, r2
 804545c:	3339      	adds	r3, #57	; 0x39
 804545e:	78fa      	ldrb	r2, [r7, #3]
 8045460:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8045462:	78fb      	ldrb	r3, [r7, #3]
 8045464:	687a      	ldr	r2, [r7, #4]
 8045466:	212c      	movs	r1, #44	; 0x2c
 8045468:	fb01 f303 	mul.w	r3, r1, r3
 804546c:	4413      	add	r3, r2
 804546e:	333f      	adds	r3, #63	; 0x3f
 8045470:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8045474:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8045476:	78fb      	ldrb	r3, [r7, #3]
 8045478:	78ba      	ldrb	r2, [r7, #2]
 804547a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 804547e:	b2d0      	uxtb	r0, r2
 8045480:	687a      	ldr	r2, [r7, #4]
 8045482:	212c      	movs	r1, #44	; 0x2c
 8045484:	fb01 f303 	mul.w	r3, r1, r3
 8045488:	4413      	add	r3, r2
 804548a:	333a      	adds	r3, #58	; 0x3a
 804548c:	4602      	mov	r2, r0
 804548e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8045490:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8045494:	2b00      	cmp	r3, #0
 8045496:	da09      	bge.n	80454ac <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8045498:	78fb      	ldrb	r3, [r7, #3]
 804549a:	687a      	ldr	r2, [r7, #4]
 804549c:	212c      	movs	r1, #44	; 0x2c
 804549e:	fb01 f303 	mul.w	r3, r1, r3
 80454a2:	4413      	add	r3, r2
 80454a4:	333b      	adds	r3, #59	; 0x3b
 80454a6:	2201      	movs	r2, #1
 80454a8:	701a      	strb	r2, [r3, #0]
 80454aa:	e008      	b.n	80454be <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80454ac:	78fb      	ldrb	r3, [r7, #3]
 80454ae:	687a      	ldr	r2, [r7, #4]
 80454b0:	212c      	movs	r1, #44	; 0x2c
 80454b2:	fb01 f303 	mul.w	r3, r1, r3
 80454b6:	4413      	add	r3, r2
 80454b8:	333b      	adds	r3, #59	; 0x3b
 80454ba:	2200      	movs	r2, #0
 80454bc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80454be:	78fb      	ldrb	r3, [r7, #3]
 80454c0:	687a      	ldr	r2, [r7, #4]
 80454c2:	212c      	movs	r1, #44	; 0x2c
 80454c4:	fb01 f303 	mul.w	r3, r1, r3
 80454c8:	4413      	add	r3, r2
 80454ca:	333c      	adds	r3, #60	; 0x3c
 80454cc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80454d0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80454d2:	687b      	ldr	r3, [r7, #4]
 80454d4:	6818      	ldr	r0, [r3, #0]
 80454d6:	787c      	ldrb	r4, [r7, #1]
 80454d8:	78ba      	ldrb	r2, [r7, #2]
 80454da:	78f9      	ldrb	r1, [r7, #3]
 80454dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80454de:	9302      	str	r3, [sp, #8]
 80454e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80454e4:	9301      	str	r3, [sp, #4]
 80454e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80454ea:	9300      	str	r3, [sp, #0]
 80454ec:	4623      	mov	r3, r4
 80454ee:	f006 fdc5 	bl	804c07c <USB_HC_Init>
 80454f2:	4603      	mov	r3, r0
 80454f4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80454f6:	687b      	ldr	r3, [r7, #4]
 80454f8:	2200      	movs	r2, #0
 80454fa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80454fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8045500:	4618      	mov	r0, r3
 8045502:	3714      	adds	r7, #20
 8045504:	46bd      	mov	sp, r7
 8045506:	bd90      	pop	{r4, r7, pc}

08045508 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8045508:	b580      	push	{r7, lr}
 804550a:	b084      	sub	sp, #16
 804550c:	af00      	add	r7, sp, #0
 804550e:	6078      	str	r0, [r7, #4]
 8045510:	460b      	mov	r3, r1
 8045512:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8045514:	2300      	movs	r3, #0
 8045516:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8045518:	687b      	ldr	r3, [r7, #4]
 804551a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 804551e:	2b01      	cmp	r3, #1
 8045520:	d101      	bne.n	8045526 <HAL_HCD_HC_Halt+0x1e>
 8045522:	2302      	movs	r3, #2
 8045524:	e00f      	b.n	8045546 <HAL_HCD_HC_Halt+0x3e>
 8045526:	687b      	ldr	r3, [r7, #4]
 8045528:	2201      	movs	r2, #1
 804552a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 804552e:	687b      	ldr	r3, [r7, #4]
 8045530:	681b      	ldr	r3, [r3, #0]
 8045532:	78fa      	ldrb	r2, [r7, #3]
 8045534:	4611      	mov	r1, r2
 8045536:	4618      	mov	r0, r3
 8045538:	f007 f815 	bl	804c566 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 804553c:	687b      	ldr	r3, [r7, #4]
 804553e:	2200      	movs	r2, #0
 8045540:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8045544:	7bfb      	ldrb	r3, [r7, #15]
}
 8045546:	4618      	mov	r0, r3
 8045548:	3710      	adds	r7, #16
 804554a:	46bd      	mov	sp, r7
 804554c:	bd80      	pop	{r7, pc}
	...

08045550 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8045550:	b580      	push	{r7, lr}
 8045552:	b082      	sub	sp, #8
 8045554:	af00      	add	r7, sp, #0
 8045556:	6078      	str	r0, [r7, #4]
 8045558:	4608      	mov	r0, r1
 804555a:	4611      	mov	r1, r2
 804555c:	461a      	mov	r2, r3
 804555e:	4603      	mov	r3, r0
 8045560:	70fb      	strb	r3, [r7, #3]
 8045562:	460b      	mov	r3, r1
 8045564:	70bb      	strb	r3, [r7, #2]
 8045566:	4613      	mov	r3, r2
 8045568:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 804556a:	78fb      	ldrb	r3, [r7, #3]
 804556c:	687a      	ldr	r2, [r7, #4]
 804556e:	212c      	movs	r1, #44	; 0x2c
 8045570:	fb01 f303 	mul.w	r3, r1, r3
 8045574:	4413      	add	r3, r2
 8045576:	333b      	adds	r3, #59	; 0x3b
 8045578:	78ba      	ldrb	r2, [r7, #2]
 804557a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 804557c:	78fb      	ldrb	r3, [r7, #3]
 804557e:	687a      	ldr	r2, [r7, #4]
 8045580:	212c      	movs	r1, #44	; 0x2c
 8045582:	fb01 f303 	mul.w	r3, r1, r3
 8045586:	4413      	add	r3, r2
 8045588:	333f      	adds	r3, #63	; 0x3f
 804558a:	787a      	ldrb	r2, [r7, #1]
 804558c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 804558e:	7c3b      	ldrb	r3, [r7, #16]
 8045590:	2b00      	cmp	r3, #0
 8045592:	d112      	bne.n	80455ba <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8045594:	78fb      	ldrb	r3, [r7, #3]
 8045596:	687a      	ldr	r2, [r7, #4]
 8045598:	212c      	movs	r1, #44	; 0x2c
 804559a:	fb01 f303 	mul.w	r3, r1, r3
 804559e:	4413      	add	r3, r2
 80455a0:	3342      	adds	r3, #66	; 0x42
 80455a2:	2203      	movs	r2, #3
 80455a4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80455a6:	78fb      	ldrb	r3, [r7, #3]
 80455a8:	687a      	ldr	r2, [r7, #4]
 80455aa:	212c      	movs	r1, #44	; 0x2c
 80455ac:	fb01 f303 	mul.w	r3, r1, r3
 80455b0:	4413      	add	r3, r2
 80455b2:	333d      	adds	r3, #61	; 0x3d
 80455b4:	7f3a      	ldrb	r2, [r7, #28]
 80455b6:	701a      	strb	r2, [r3, #0]
 80455b8:	e008      	b.n	80455cc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80455ba:	78fb      	ldrb	r3, [r7, #3]
 80455bc:	687a      	ldr	r2, [r7, #4]
 80455be:	212c      	movs	r1, #44	; 0x2c
 80455c0:	fb01 f303 	mul.w	r3, r1, r3
 80455c4:	4413      	add	r3, r2
 80455c6:	3342      	adds	r3, #66	; 0x42
 80455c8:	2202      	movs	r2, #2
 80455ca:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80455cc:	787b      	ldrb	r3, [r7, #1]
 80455ce:	2b03      	cmp	r3, #3
 80455d0:	f200 80c6 	bhi.w	8045760 <HAL_HCD_HC_SubmitRequest+0x210>
 80455d4:	a201      	add	r2, pc, #4	; (adr r2, 80455dc <HAL_HCD_HC_SubmitRequest+0x8c>)
 80455d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80455da:	bf00      	nop
 80455dc:	080455ed 	.word	0x080455ed
 80455e0:	0804574d 	.word	0x0804574d
 80455e4:	08045651 	.word	0x08045651
 80455e8:	080456cf 	.word	0x080456cf
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80455ec:	7c3b      	ldrb	r3, [r7, #16]
 80455ee:	2b01      	cmp	r3, #1
 80455f0:	f040 80b8 	bne.w	8045764 <HAL_HCD_HC_SubmitRequest+0x214>
 80455f4:	78bb      	ldrb	r3, [r7, #2]
 80455f6:	2b00      	cmp	r3, #0
 80455f8:	f040 80b4 	bne.w	8045764 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80455fc:	8b3b      	ldrh	r3, [r7, #24]
 80455fe:	2b00      	cmp	r3, #0
 8045600:	d108      	bne.n	8045614 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8045602:	78fb      	ldrb	r3, [r7, #3]
 8045604:	687a      	ldr	r2, [r7, #4]
 8045606:	212c      	movs	r1, #44	; 0x2c
 8045608:	fb01 f303 	mul.w	r3, r1, r3
 804560c:	4413      	add	r3, r2
 804560e:	3355      	adds	r3, #85	; 0x55
 8045610:	2201      	movs	r2, #1
 8045612:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8045614:	78fb      	ldrb	r3, [r7, #3]
 8045616:	687a      	ldr	r2, [r7, #4]
 8045618:	212c      	movs	r1, #44	; 0x2c
 804561a:	fb01 f303 	mul.w	r3, r1, r3
 804561e:	4413      	add	r3, r2
 8045620:	3355      	adds	r3, #85	; 0x55
 8045622:	781b      	ldrb	r3, [r3, #0]
 8045624:	2b00      	cmp	r3, #0
 8045626:	d109      	bne.n	804563c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8045628:	78fb      	ldrb	r3, [r7, #3]
 804562a:	687a      	ldr	r2, [r7, #4]
 804562c:	212c      	movs	r1, #44	; 0x2c
 804562e:	fb01 f303 	mul.w	r3, r1, r3
 8045632:	4413      	add	r3, r2
 8045634:	3342      	adds	r3, #66	; 0x42
 8045636:	2200      	movs	r2, #0
 8045638:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 804563a:	e093      	b.n	8045764 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 804563c:	78fb      	ldrb	r3, [r7, #3]
 804563e:	687a      	ldr	r2, [r7, #4]
 8045640:	212c      	movs	r1, #44	; 0x2c
 8045642:	fb01 f303 	mul.w	r3, r1, r3
 8045646:	4413      	add	r3, r2
 8045648:	3342      	adds	r3, #66	; 0x42
 804564a:	2202      	movs	r2, #2
 804564c:	701a      	strb	r2, [r3, #0]
      break;
 804564e:	e089      	b.n	8045764 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8045650:	78bb      	ldrb	r3, [r7, #2]
 8045652:	2b00      	cmp	r3, #0
 8045654:	d11d      	bne.n	8045692 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8045656:	78fb      	ldrb	r3, [r7, #3]
 8045658:	687a      	ldr	r2, [r7, #4]
 804565a:	212c      	movs	r1, #44	; 0x2c
 804565c:	fb01 f303 	mul.w	r3, r1, r3
 8045660:	4413      	add	r3, r2
 8045662:	3355      	adds	r3, #85	; 0x55
 8045664:	781b      	ldrb	r3, [r3, #0]
 8045666:	2b00      	cmp	r3, #0
 8045668:	d109      	bne.n	804567e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 804566a:	78fb      	ldrb	r3, [r7, #3]
 804566c:	687a      	ldr	r2, [r7, #4]
 804566e:	212c      	movs	r1, #44	; 0x2c
 8045670:	fb01 f303 	mul.w	r3, r1, r3
 8045674:	4413      	add	r3, r2
 8045676:	3342      	adds	r3, #66	; 0x42
 8045678:	2200      	movs	r2, #0
 804567a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 804567c:	e073      	b.n	8045766 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 804567e:	78fb      	ldrb	r3, [r7, #3]
 8045680:	687a      	ldr	r2, [r7, #4]
 8045682:	212c      	movs	r1, #44	; 0x2c
 8045684:	fb01 f303 	mul.w	r3, r1, r3
 8045688:	4413      	add	r3, r2
 804568a:	3342      	adds	r3, #66	; 0x42
 804568c:	2202      	movs	r2, #2
 804568e:	701a      	strb	r2, [r3, #0]
      break;
 8045690:	e069      	b.n	8045766 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8045692:	78fb      	ldrb	r3, [r7, #3]
 8045694:	687a      	ldr	r2, [r7, #4]
 8045696:	212c      	movs	r1, #44	; 0x2c
 8045698:	fb01 f303 	mul.w	r3, r1, r3
 804569c:	4413      	add	r3, r2
 804569e:	3354      	adds	r3, #84	; 0x54
 80456a0:	781b      	ldrb	r3, [r3, #0]
 80456a2:	2b00      	cmp	r3, #0
 80456a4:	d109      	bne.n	80456ba <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80456a6:	78fb      	ldrb	r3, [r7, #3]
 80456a8:	687a      	ldr	r2, [r7, #4]
 80456aa:	212c      	movs	r1, #44	; 0x2c
 80456ac:	fb01 f303 	mul.w	r3, r1, r3
 80456b0:	4413      	add	r3, r2
 80456b2:	3342      	adds	r3, #66	; 0x42
 80456b4:	2200      	movs	r2, #0
 80456b6:	701a      	strb	r2, [r3, #0]
      break;
 80456b8:	e055      	b.n	8045766 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80456ba:	78fb      	ldrb	r3, [r7, #3]
 80456bc:	687a      	ldr	r2, [r7, #4]
 80456be:	212c      	movs	r1, #44	; 0x2c
 80456c0:	fb01 f303 	mul.w	r3, r1, r3
 80456c4:	4413      	add	r3, r2
 80456c6:	3342      	adds	r3, #66	; 0x42
 80456c8:	2202      	movs	r2, #2
 80456ca:	701a      	strb	r2, [r3, #0]
      break;
 80456cc:	e04b      	b.n	8045766 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80456ce:	78bb      	ldrb	r3, [r7, #2]
 80456d0:	2b00      	cmp	r3, #0
 80456d2:	d11d      	bne.n	8045710 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80456d4:	78fb      	ldrb	r3, [r7, #3]
 80456d6:	687a      	ldr	r2, [r7, #4]
 80456d8:	212c      	movs	r1, #44	; 0x2c
 80456da:	fb01 f303 	mul.w	r3, r1, r3
 80456de:	4413      	add	r3, r2
 80456e0:	3355      	adds	r3, #85	; 0x55
 80456e2:	781b      	ldrb	r3, [r3, #0]
 80456e4:	2b00      	cmp	r3, #0
 80456e6:	d109      	bne.n	80456fc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80456e8:	78fb      	ldrb	r3, [r7, #3]
 80456ea:	687a      	ldr	r2, [r7, #4]
 80456ec:	212c      	movs	r1, #44	; 0x2c
 80456ee:	fb01 f303 	mul.w	r3, r1, r3
 80456f2:	4413      	add	r3, r2
 80456f4:	3342      	adds	r3, #66	; 0x42
 80456f6:	2200      	movs	r2, #0
 80456f8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80456fa:	e034      	b.n	8045766 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80456fc:	78fb      	ldrb	r3, [r7, #3]
 80456fe:	687a      	ldr	r2, [r7, #4]
 8045700:	212c      	movs	r1, #44	; 0x2c
 8045702:	fb01 f303 	mul.w	r3, r1, r3
 8045706:	4413      	add	r3, r2
 8045708:	3342      	adds	r3, #66	; 0x42
 804570a:	2202      	movs	r2, #2
 804570c:	701a      	strb	r2, [r3, #0]
      break;
 804570e:	e02a      	b.n	8045766 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8045710:	78fb      	ldrb	r3, [r7, #3]
 8045712:	687a      	ldr	r2, [r7, #4]
 8045714:	212c      	movs	r1, #44	; 0x2c
 8045716:	fb01 f303 	mul.w	r3, r1, r3
 804571a:	4413      	add	r3, r2
 804571c:	3354      	adds	r3, #84	; 0x54
 804571e:	781b      	ldrb	r3, [r3, #0]
 8045720:	2b00      	cmp	r3, #0
 8045722:	d109      	bne.n	8045738 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8045724:	78fb      	ldrb	r3, [r7, #3]
 8045726:	687a      	ldr	r2, [r7, #4]
 8045728:	212c      	movs	r1, #44	; 0x2c
 804572a:	fb01 f303 	mul.w	r3, r1, r3
 804572e:	4413      	add	r3, r2
 8045730:	3342      	adds	r3, #66	; 0x42
 8045732:	2200      	movs	r2, #0
 8045734:	701a      	strb	r2, [r3, #0]
      break;
 8045736:	e016      	b.n	8045766 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8045738:	78fb      	ldrb	r3, [r7, #3]
 804573a:	687a      	ldr	r2, [r7, #4]
 804573c:	212c      	movs	r1, #44	; 0x2c
 804573e:	fb01 f303 	mul.w	r3, r1, r3
 8045742:	4413      	add	r3, r2
 8045744:	3342      	adds	r3, #66	; 0x42
 8045746:	2202      	movs	r2, #2
 8045748:	701a      	strb	r2, [r3, #0]
      break;
 804574a:	e00c      	b.n	8045766 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 804574c:	78fb      	ldrb	r3, [r7, #3]
 804574e:	687a      	ldr	r2, [r7, #4]
 8045750:	212c      	movs	r1, #44	; 0x2c
 8045752:	fb01 f303 	mul.w	r3, r1, r3
 8045756:	4413      	add	r3, r2
 8045758:	3342      	adds	r3, #66	; 0x42
 804575a:	2200      	movs	r2, #0
 804575c:	701a      	strb	r2, [r3, #0]
      break;
 804575e:	e002      	b.n	8045766 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8045760:	bf00      	nop
 8045762:	e000      	b.n	8045766 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8045764:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8045766:	78fb      	ldrb	r3, [r7, #3]
 8045768:	687a      	ldr	r2, [r7, #4]
 804576a:	212c      	movs	r1, #44	; 0x2c
 804576c:	fb01 f303 	mul.w	r3, r1, r3
 8045770:	4413      	add	r3, r2
 8045772:	3344      	adds	r3, #68	; 0x44
 8045774:	697a      	ldr	r2, [r7, #20]
 8045776:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8045778:	78fb      	ldrb	r3, [r7, #3]
 804577a:	8b3a      	ldrh	r2, [r7, #24]
 804577c:	6879      	ldr	r1, [r7, #4]
 804577e:	202c      	movs	r0, #44	; 0x2c
 8045780:	fb00 f303 	mul.w	r3, r0, r3
 8045784:	440b      	add	r3, r1
 8045786:	334c      	adds	r3, #76	; 0x4c
 8045788:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 804578a:	78fb      	ldrb	r3, [r7, #3]
 804578c:	687a      	ldr	r2, [r7, #4]
 804578e:	212c      	movs	r1, #44	; 0x2c
 8045790:	fb01 f303 	mul.w	r3, r1, r3
 8045794:	4413      	add	r3, r2
 8045796:	3360      	adds	r3, #96	; 0x60
 8045798:	2200      	movs	r2, #0
 804579a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 804579c:	78fb      	ldrb	r3, [r7, #3]
 804579e:	687a      	ldr	r2, [r7, #4]
 80457a0:	212c      	movs	r1, #44	; 0x2c
 80457a2:	fb01 f303 	mul.w	r3, r1, r3
 80457a6:	4413      	add	r3, r2
 80457a8:	3350      	adds	r3, #80	; 0x50
 80457aa:	2200      	movs	r2, #0
 80457ac:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80457ae:	78fb      	ldrb	r3, [r7, #3]
 80457b0:	687a      	ldr	r2, [r7, #4]
 80457b2:	212c      	movs	r1, #44	; 0x2c
 80457b4:	fb01 f303 	mul.w	r3, r1, r3
 80457b8:	4413      	add	r3, r2
 80457ba:	3339      	adds	r3, #57	; 0x39
 80457bc:	78fa      	ldrb	r2, [r7, #3]
 80457be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80457c0:	78fb      	ldrb	r3, [r7, #3]
 80457c2:	687a      	ldr	r2, [r7, #4]
 80457c4:	212c      	movs	r1, #44	; 0x2c
 80457c6:	fb01 f303 	mul.w	r3, r1, r3
 80457ca:	4413      	add	r3, r2
 80457cc:	3361      	adds	r3, #97	; 0x61
 80457ce:	2200      	movs	r2, #0
 80457d0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80457d2:	687b      	ldr	r3, [r7, #4]
 80457d4:	6818      	ldr	r0, [r3, #0]
 80457d6:	78fb      	ldrb	r3, [r7, #3]
 80457d8:	222c      	movs	r2, #44	; 0x2c
 80457da:	fb02 f303 	mul.w	r3, r2, r3
 80457de:	3338      	adds	r3, #56	; 0x38
 80457e0:	687a      	ldr	r2, [r7, #4]
 80457e2:	18d1      	adds	r1, r2, r3
 80457e4:	687b      	ldr	r3, [r7, #4]
 80457e6:	691b      	ldr	r3, [r3, #16]
 80457e8:	b2db      	uxtb	r3, r3
 80457ea:	461a      	mov	r2, r3
 80457ec:	f006 fd68 	bl	804c2c0 <USB_HC_StartXfer>
 80457f0:	4603      	mov	r3, r0
}
 80457f2:	4618      	mov	r0, r3
 80457f4:	3708      	adds	r7, #8
 80457f6:	46bd      	mov	sp, r7
 80457f8:	bd80      	pop	{r7, pc}
 80457fa:	bf00      	nop

080457fc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80457fc:	b580      	push	{r7, lr}
 80457fe:	b086      	sub	sp, #24
 8045800:	af00      	add	r7, sp, #0
 8045802:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8045804:	687b      	ldr	r3, [r7, #4]
 8045806:	681b      	ldr	r3, [r3, #0]
 8045808:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804580a:	693b      	ldr	r3, [r7, #16]
 804580c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 804580e:	687b      	ldr	r3, [r7, #4]
 8045810:	681b      	ldr	r3, [r3, #0]
 8045812:	4618      	mov	r0, r3
 8045814:	f006 fa6f 	bl	804bcf6 <USB_GetMode>
 8045818:	4603      	mov	r3, r0
 804581a:	2b01      	cmp	r3, #1
 804581c:	f040 80f6 	bne.w	8045a0c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8045820:	687b      	ldr	r3, [r7, #4]
 8045822:	681b      	ldr	r3, [r3, #0]
 8045824:	4618      	mov	r0, r3
 8045826:	f006 fa53 	bl	804bcd0 <USB_ReadInterrupts>
 804582a:	4603      	mov	r3, r0
 804582c:	2b00      	cmp	r3, #0
 804582e:	f000 80ec 	beq.w	8045a0a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8045832:	687b      	ldr	r3, [r7, #4]
 8045834:	681b      	ldr	r3, [r3, #0]
 8045836:	4618      	mov	r0, r3
 8045838:	f006 fa4a 	bl	804bcd0 <USB_ReadInterrupts>
 804583c:	4603      	mov	r3, r0
 804583e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8045842:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8045846:	d104      	bne.n	8045852 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8045848:	687b      	ldr	r3, [r7, #4]
 804584a:	681b      	ldr	r3, [r3, #0]
 804584c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8045850:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8045852:	687b      	ldr	r3, [r7, #4]
 8045854:	681b      	ldr	r3, [r3, #0]
 8045856:	4618      	mov	r0, r3
 8045858:	f006 fa3a 	bl	804bcd0 <USB_ReadInterrupts>
 804585c:	4603      	mov	r3, r0
 804585e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8045862:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8045866:	d104      	bne.n	8045872 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8045868:	687b      	ldr	r3, [r7, #4]
 804586a:	681b      	ldr	r3, [r3, #0]
 804586c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8045870:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8045872:	687b      	ldr	r3, [r7, #4]
 8045874:	681b      	ldr	r3, [r3, #0]
 8045876:	4618      	mov	r0, r3
 8045878:	f006 fa2a 	bl	804bcd0 <USB_ReadInterrupts>
 804587c:	4603      	mov	r3, r0
 804587e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8045882:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8045886:	d104      	bne.n	8045892 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8045888:	687b      	ldr	r3, [r7, #4]
 804588a:	681b      	ldr	r3, [r3, #0]
 804588c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8045890:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8045892:	687b      	ldr	r3, [r7, #4]
 8045894:	681b      	ldr	r3, [r3, #0]
 8045896:	4618      	mov	r0, r3
 8045898:	f006 fa1a 	bl	804bcd0 <USB_ReadInterrupts>
 804589c:	4603      	mov	r3, r0
 804589e:	f003 0302 	and.w	r3, r3, #2
 80458a2:	2b02      	cmp	r3, #2
 80458a4:	d103      	bne.n	80458ae <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80458a6:	687b      	ldr	r3, [r7, #4]
 80458a8:	681b      	ldr	r3, [r3, #0]
 80458aa:	2202      	movs	r2, #2
 80458ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80458ae:	687b      	ldr	r3, [r7, #4]
 80458b0:	681b      	ldr	r3, [r3, #0]
 80458b2:	4618      	mov	r0, r3
 80458b4:	f006 fa0c 	bl	804bcd0 <USB_ReadInterrupts>
 80458b8:	4603      	mov	r3, r0
 80458ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80458be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80458c2:	d11c      	bne.n	80458fe <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80458c4:	687b      	ldr	r3, [r7, #4]
 80458c6:	681b      	ldr	r3, [r3, #0]
 80458c8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80458cc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80458ce:	68fb      	ldr	r3, [r7, #12]
 80458d0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80458d4:	681b      	ldr	r3, [r3, #0]
 80458d6:	f003 0301 	and.w	r3, r3, #1
 80458da:	2b00      	cmp	r3, #0
 80458dc:	d10f      	bne.n	80458fe <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80458de:	2110      	movs	r1, #16
 80458e0:	6938      	ldr	r0, [r7, #16]
 80458e2:	f006 f8fb 	bl	804badc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80458e6:	6938      	ldr	r0, [r7, #16]
 80458e8:	f006 f92c 	bl	804bb44 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80458ec:	687b      	ldr	r3, [r7, #4]
 80458ee:	681b      	ldr	r3, [r3, #0]
 80458f0:	2101      	movs	r1, #1
 80458f2:	4618      	mov	r0, r3
 80458f4:	f006 fafc 	bl	804bef0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80458f8:	6878      	ldr	r0, [r7, #4]
 80458fa:	f014 f865 	bl	80599c8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80458fe:	687b      	ldr	r3, [r7, #4]
 8045900:	681b      	ldr	r3, [r3, #0]
 8045902:	4618      	mov	r0, r3
 8045904:	f006 f9e4 	bl	804bcd0 <USB_ReadInterrupts>
 8045908:	4603      	mov	r3, r0
 804590a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 804590e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8045912:	d102      	bne.n	804591a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8045914:	6878      	ldr	r0, [r7, #4]
 8045916:	f001 f89e 	bl	8046a56 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 804591a:	687b      	ldr	r3, [r7, #4]
 804591c:	681b      	ldr	r3, [r3, #0]
 804591e:	4618      	mov	r0, r3
 8045920:	f006 f9d6 	bl	804bcd0 <USB_ReadInterrupts>
 8045924:	4603      	mov	r3, r0
 8045926:	f003 0308 	and.w	r3, r3, #8
 804592a:	2b08      	cmp	r3, #8
 804592c:	d106      	bne.n	804593c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 804592e:	6878      	ldr	r0, [r7, #4]
 8045930:	f014 f82e 	bl	8059990 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8045934:	687b      	ldr	r3, [r7, #4]
 8045936:	681b      	ldr	r3, [r3, #0]
 8045938:	2208      	movs	r2, #8
 804593a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 804593c:	687b      	ldr	r3, [r7, #4]
 804593e:	681b      	ldr	r3, [r3, #0]
 8045940:	4618      	mov	r0, r3
 8045942:	f006 f9c5 	bl	804bcd0 <USB_ReadInterrupts>
 8045946:	4603      	mov	r3, r0
 8045948:	f003 0310 	and.w	r3, r3, #16
 804594c:	2b10      	cmp	r3, #16
 804594e:	d101      	bne.n	8045954 <HAL_HCD_IRQHandler+0x158>
 8045950:	2301      	movs	r3, #1
 8045952:	e000      	b.n	8045956 <HAL_HCD_IRQHandler+0x15a>
 8045954:	2300      	movs	r3, #0
 8045956:	2b00      	cmp	r3, #0
 8045958:	d012      	beq.n	8045980 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 804595a:	687b      	ldr	r3, [r7, #4]
 804595c:	681b      	ldr	r3, [r3, #0]
 804595e:	699a      	ldr	r2, [r3, #24]
 8045960:	687b      	ldr	r3, [r7, #4]
 8045962:	681b      	ldr	r3, [r3, #0]
 8045964:	f022 0210 	bic.w	r2, r2, #16
 8045968:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 804596a:	6878      	ldr	r0, [r7, #4]
 804596c:	f000 ffa1 	bl	80468b2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8045970:	687b      	ldr	r3, [r7, #4]
 8045972:	681b      	ldr	r3, [r3, #0]
 8045974:	699a      	ldr	r2, [r3, #24]
 8045976:	687b      	ldr	r3, [r7, #4]
 8045978:	681b      	ldr	r3, [r3, #0]
 804597a:	f042 0210 	orr.w	r2, r2, #16
 804597e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8045980:	687b      	ldr	r3, [r7, #4]
 8045982:	681b      	ldr	r3, [r3, #0]
 8045984:	4618      	mov	r0, r3
 8045986:	f006 f9a3 	bl	804bcd0 <USB_ReadInterrupts>
 804598a:	4603      	mov	r3, r0
 804598c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8045990:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8045994:	d13a      	bne.n	8045a0c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8045996:	687b      	ldr	r3, [r7, #4]
 8045998:	681b      	ldr	r3, [r3, #0]
 804599a:	4618      	mov	r0, r3
 804599c:	f006 fdd2 	bl	804c544 <USB_HC_ReadInterrupt>
 80459a0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80459a2:	2300      	movs	r3, #0
 80459a4:	617b      	str	r3, [r7, #20]
 80459a6:	e025      	b.n	80459f4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80459a8:	697b      	ldr	r3, [r7, #20]
 80459aa:	f003 030f 	and.w	r3, r3, #15
 80459ae:	68ba      	ldr	r2, [r7, #8]
 80459b0:	fa22 f303 	lsr.w	r3, r2, r3
 80459b4:	f003 0301 	and.w	r3, r3, #1
 80459b8:	2b00      	cmp	r3, #0
 80459ba:	d018      	beq.n	80459ee <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80459bc:	697b      	ldr	r3, [r7, #20]
 80459be:	015a      	lsls	r2, r3, #5
 80459c0:	68fb      	ldr	r3, [r7, #12]
 80459c2:	4413      	add	r3, r2
 80459c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80459c8:	681b      	ldr	r3, [r3, #0]
 80459ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80459ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80459d2:	d106      	bne.n	80459e2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80459d4:	697b      	ldr	r3, [r7, #20]
 80459d6:	b2db      	uxtb	r3, r3
 80459d8:	4619      	mov	r1, r3
 80459da:	6878      	ldr	r0, [r7, #4]
 80459dc:	f000 f8ab 	bl	8045b36 <HCD_HC_IN_IRQHandler>
 80459e0:	e005      	b.n	80459ee <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80459e2:	697b      	ldr	r3, [r7, #20]
 80459e4:	b2db      	uxtb	r3, r3
 80459e6:	4619      	mov	r1, r3
 80459e8:	6878      	ldr	r0, [r7, #4]
 80459ea:	f000 fbf9 	bl	80461e0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80459ee:	697b      	ldr	r3, [r7, #20]
 80459f0:	3301      	adds	r3, #1
 80459f2:	617b      	str	r3, [r7, #20]
 80459f4:	687b      	ldr	r3, [r7, #4]
 80459f6:	689b      	ldr	r3, [r3, #8]
 80459f8:	697a      	ldr	r2, [r7, #20]
 80459fa:	429a      	cmp	r2, r3
 80459fc:	d3d4      	bcc.n	80459a8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80459fe:	687b      	ldr	r3, [r7, #4]
 8045a00:	681b      	ldr	r3, [r3, #0]
 8045a02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8045a06:	615a      	str	r2, [r3, #20]
 8045a08:	e000      	b.n	8045a0c <HAL_HCD_IRQHandler+0x210>
      return;
 8045a0a:	bf00      	nop
    }
  }
}
 8045a0c:	3718      	adds	r7, #24
 8045a0e:	46bd      	mov	sp, r7
 8045a10:	bd80      	pop	{r7, pc}

08045a12 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8045a12:	b580      	push	{r7, lr}
 8045a14:	b082      	sub	sp, #8
 8045a16:	af00      	add	r7, sp, #0
 8045a18:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8045a1a:	687b      	ldr	r3, [r7, #4]
 8045a1c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8045a20:	2b01      	cmp	r3, #1
 8045a22:	d101      	bne.n	8045a28 <HAL_HCD_Start+0x16>
 8045a24:	2302      	movs	r3, #2
 8045a26:	e013      	b.n	8045a50 <HAL_HCD_Start+0x3e>
 8045a28:	687b      	ldr	r3, [r7, #4]
 8045a2a:	2201      	movs	r2, #1
 8045a2c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8045a30:	687b      	ldr	r3, [r7, #4]
 8045a32:	681b      	ldr	r3, [r3, #0]
 8045a34:	2101      	movs	r1, #1
 8045a36:	4618      	mov	r0, r3
 8045a38:	f006 fabe 	bl	804bfb8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8045a3c:	687b      	ldr	r3, [r7, #4]
 8045a3e:	681b      	ldr	r3, [r3, #0]
 8045a40:	4618      	mov	r0, r3
 8045a42:	f005 ffdd 	bl	804ba00 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8045a46:	687b      	ldr	r3, [r7, #4]
 8045a48:	2200      	movs	r2, #0
 8045a4a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8045a4e:	2300      	movs	r3, #0
}
 8045a50:	4618      	mov	r0, r3
 8045a52:	3708      	adds	r7, #8
 8045a54:	46bd      	mov	sp, r7
 8045a56:	bd80      	pop	{r7, pc}

08045a58 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8045a58:	b580      	push	{r7, lr}
 8045a5a:	b082      	sub	sp, #8
 8045a5c:	af00      	add	r7, sp, #0
 8045a5e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8045a60:	687b      	ldr	r3, [r7, #4]
 8045a62:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8045a66:	2b01      	cmp	r3, #1
 8045a68:	d101      	bne.n	8045a6e <HAL_HCD_Stop+0x16>
 8045a6a:	2302      	movs	r3, #2
 8045a6c:	e00d      	b.n	8045a8a <HAL_HCD_Stop+0x32>
 8045a6e:	687b      	ldr	r3, [r7, #4]
 8045a70:	2201      	movs	r2, #1
 8045a72:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8045a76:	687b      	ldr	r3, [r7, #4]
 8045a78:	681b      	ldr	r3, [r3, #0]
 8045a7a:	4618      	mov	r0, r3
 8045a7c:	f006 feac 	bl	804c7d8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8045a80:	687b      	ldr	r3, [r7, #4]
 8045a82:	2200      	movs	r2, #0
 8045a84:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8045a88:	2300      	movs	r3, #0
}
 8045a8a:	4618      	mov	r0, r3
 8045a8c:	3708      	adds	r7, #8
 8045a8e:	46bd      	mov	sp, r7
 8045a90:	bd80      	pop	{r7, pc}

08045a92 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8045a92:	b580      	push	{r7, lr}
 8045a94:	b082      	sub	sp, #8
 8045a96:	af00      	add	r7, sp, #0
 8045a98:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8045a9a:	687b      	ldr	r3, [r7, #4]
 8045a9c:	681b      	ldr	r3, [r3, #0]
 8045a9e:	4618      	mov	r0, r3
 8045aa0:	f006 fa60 	bl	804bf64 <USB_ResetPort>
 8045aa4:	4603      	mov	r3, r0
}
 8045aa6:	4618      	mov	r0, r3
 8045aa8:	3708      	adds	r7, #8
 8045aaa:	46bd      	mov	sp, r7
 8045aac:	bd80      	pop	{r7, pc}

08045aae <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8045aae:	b480      	push	{r7}
 8045ab0:	b083      	sub	sp, #12
 8045ab2:	af00      	add	r7, sp, #0
 8045ab4:	6078      	str	r0, [r7, #4]
 8045ab6:	460b      	mov	r3, r1
 8045ab8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8045aba:	78fb      	ldrb	r3, [r7, #3]
 8045abc:	687a      	ldr	r2, [r7, #4]
 8045abe:	212c      	movs	r1, #44	; 0x2c
 8045ac0:	fb01 f303 	mul.w	r3, r1, r3
 8045ac4:	4413      	add	r3, r2
 8045ac6:	3360      	adds	r3, #96	; 0x60
 8045ac8:	781b      	ldrb	r3, [r3, #0]
}
 8045aca:	4618      	mov	r0, r3
 8045acc:	370c      	adds	r7, #12
 8045ace:	46bd      	mov	sp, r7
 8045ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045ad4:	4770      	bx	lr

08045ad6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8045ad6:	b480      	push	{r7}
 8045ad8:	b083      	sub	sp, #12
 8045ada:	af00      	add	r7, sp, #0
 8045adc:	6078      	str	r0, [r7, #4]
 8045ade:	460b      	mov	r3, r1
 8045ae0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8045ae2:	78fb      	ldrb	r3, [r7, #3]
 8045ae4:	687a      	ldr	r2, [r7, #4]
 8045ae6:	212c      	movs	r1, #44	; 0x2c
 8045ae8:	fb01 f303 	mul.w	r3, r1, r3
 8045aec:	4413      	add	r3, r2
 8045aee:	3350      	adds	r3, #80	; 0x50
 8045af0:	681b      	ldr	r3, [r3, #0]
}
 8045af2:	4618      	mov	r0, r3
 8045af4:	370c      	adds	r7, #12
 8045af6:	46bd      	mov	sp, r7
 8045af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045afc:	4770      	bx	lr

08045afe <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8045afe:	b580      	push	{r7, lr}
 8045b00:	b082      	sub	sp, #8
 8045b02:	af00      	add	r7, sp, #0
 8045b04:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8045b06:	687b      	ldr	r3, [r7, #4]
 8045b08:	681b      	ldr	r3, [r3, #0]
 8045b0a:	4618      	mov	r0, r3
 8045b0c:	f006 faa4 	bl	804c058 <USB_GetCurrentFrame>
 8045b10:	4603      	mov	r3, r0
}
 8045b12:	4618      	mov	r0, r3
 8045b14:	3708      	adds	r7, #8
 8045b16:	46bd      	mov	sp, r7
 8045b18:	bd80      	pop	{r7, pc}

08045b1a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8045b1a:	b580      	push	{r7, lr}
 8045b1c:	b082      	sub	sp, #8
 8045b1e:	af00      	add	r7, sp, #0
 8045b20:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8045b22:	687b      	ldr	r3, [r7, #4]
 8045b24:	681b      	ldr	r3, [r3, #0]
 8045b26:	4618      	mov	r0, r3
 8045b28:	f006 fa7f 	bl	804c02a <USB_GetHostSpeed>
 8045b2c:	4603      	mov	r3, r0
}
 8045b2e:	4618      	mov	r0, r3
 8045b30:	3708      	adds	r7, #8
 8045b32:	46bd      	mov	sp, r7
 8045b34:	bd80      	pop	{r7, pc}

08045b36 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8045b36:	b580      	push	{r7, lr}
 8045b38:	b086      	sub	sp, #24
 8045b3a:	af00      	add	r7, sp, #0
 8045b3c:	6078      	str	r0, [r7, #4]
 8045b3e:	460b      	mov	r3, r1
 8045b40:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8045b42:	687b      	ldr	r3, [r7, #4]
 8045b44:	681b      	ldr	r3, [r3, #0]
 8045b46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8045b48:	697b      	ldr	r3, [r7, #20]
 8045b4a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8045b4c:	78fb      	ldrb	r3, [r7, #3]
 8045b4e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8045b50:	68fb      	ldr	r3, [r7, #12]
 8045b52:	015a      	lsls	r2, r3, #5
 8045b54:	693b      	ldr	r3, [r7, #16]
 8045b56:	4413      	add	r3, r2
 8045b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045b5c:	689b      	ldr	r3, [r3, #8]
 8045b5e:	f003 0304 	and.w	r3, r3, #4
 8045b62:	2b04      	cmp	r3, #4
 8045b64:	d11a      	bne.n	8045b9c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8045b66:	68fb      	ldr	r3, [r7, #12]
 8045b68:	015a      	lsls	r2, r3, #5
 8045b6a:	693b      	ldr	r3, [r7, #16]
 8045b6c:	4413      	add	r3, r2
 8045b6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045b72:	461a      	mov	r2, r3
 8045b74:	2304      	movs	r3, #4
 8045b76:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8045b78:	687a      	ldr	r2, [r7, #4]
 8045b7a:	68fb      	ldr	r3, [r7, #12]
 8045b7c:	212c      	movs	r1, #44	; 0x2c
 8045b7e:	fb01 f303 	mul.w	r3, r1, r3
 8045b82:	4413      	add	r3, r2
 8045b84:	3361      	adds	r3, #97	; 0x61
 8045b86:	2206      	movs	r2, #6
 8045b88:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8045b8a:	687b      	ldr	r3, [r7, #4]
 8045b8c:	681b      	ldr	r3, [r3, #0]
 8045b8e:	68fa      	ldr	r2, [r7, #12]
 8045b90:	b2d2      	uxtb	r2, r2
 8045b92:	4611      	mov	r1, r2
 8045b94:	4618      	mov	r0, r3
 8045b96:	f006 fce6 	bl	804c566 <USB_HC_Halt>
 8045b9a:	e0af      	b.n	8045cfc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8045b9c:	68fb      	ldr	r3, [r7, #12]
 8045b9e:	015a      	lsls	r2, r3, #5
 8045ba0:	693b      	ldr	r3, [r7, #16]
 8045ba2:	4413      	add	r3, r2
 8045ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045ba8:	689b      	ldr	r3, [r3, #8]
 8045baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8045bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8045bb2:	d11b      	bne.n	8045bec <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8045bb4:	68fb      	ldr	r3, [r7, #12]
 8045bb6:	015a      	lsls	r2, r3, #5
 8045bb8:	693b      	ldr	r3, [r7, #16]
 8045bba:	4413      	add	r3, r2
 8045bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045bc0:	461a      	mov	r2, r3
 8045bc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8045bc6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8045bc8:	687a      	ldr	r2, [r7, #4]
 8045bca:	68fb      	ldr	r3, [r7, #12]
 8045bcc:	212c      	movs	r1, #44	; 0x2c
 8045bce:	fb01 f303 	mul.w	r3, r1, r3
 8045bd2:	4413      	add	r3, r2
 8045bd4:	3361      	adds	r3, #97	; 0x61
 8045bd6:	2207      	movs	r2, #7
 8045bd8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8045bda:	687b      	ldr	r3, [r7, #4]
 8045bdc:	681b      	ldr	r3, [r3, #0]
 8045bde:	68fa      	ldr	r2, [r7, #12]
 8045be0:	b2d2      	uxtb	r2, r2
 8045be2:	4611      	mov	r1, r2
 8045be4:	4618      	mov	r0, r3
 8045be6:	f006 fcbe 	bl	804c566 <USB_HC_Halt>
 8045bea:	e087      	b.n	8045cfc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8045bec:	68fb      	ldr	r3, [r7, #12]
 8045bee:	015a      	lsls	r2, r3, #5
 8045bf0:	693b      	ldr	r3, [r7, #16]
 8045bf2:	4413      	add	r3, r2
 8045bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045bf8:	689b      	ldr	r3, [r3, #8]
 8045bfa:	f003 0320 	and.w	r3, r3, #32
 8045bfe:	2b20      	cmp	r3, #32
 8045c00:	d109      	bne.n	8045c16 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8045c02:	68fb      	ldr	r3, [r7, #12]
 8045c04:	015a      	lsls	r2, r3, #5
 8045c06:	693b      	ldr	r3, [r7, #16]
 8045c08:	4413      	add	r3, r2
 8045c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045c0e:	461a      	mov	r2, r3
 8045c10:	2320      	movs	r3, #32
 8045c12:	6093      	str	r3, [r2, #8]
 8045c14:	e072      	b.n	8045cfc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8045c16:	68fb      	ldr	r3, [r7, #12]
 8045c18:	015a      	lsls	r2, r3, #5
 8045c1a:	693b      	ldr	r3, [r7, #16]
 8045c1c:	4413      	add	r3, r2
 8045c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045c22:	689b      	ldr	r3, [r3, #8]
 8045c24:	f003 0308 	and.w	r3, r3, #8
 8045c28:	2b08      	cmp	r3, #8
 8045c2a:	d11a      	bne.n	8045c62 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8045c2c:	68fb      	ldr	r3, [r7, #12]
 8045c2e:	015a      	lsls	r2, r3, #5
 8045c30:	693b      	ldr	r3, [r7, #16]
 8045c32:	4413      	add	r3, r2
 8045c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045c38:	461a      	mov	r2, r3
 8045c3a:	2308      	movs	r3, #8
 8045c3c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8045c3e:	687a      	ldr	r2, [r7, #4]
 8045c40:	68fb      	ldr	r3, [r7, #12]
 8045c42:	212c      	movs	r1, #44	; 0x2c
 8045c44:	fb01 f303 	mul.w	r3, r1, r3
 8045c48:	4413      	add	r3, r2
 8045c4a:	3361      	adds	r3, #97	; 0x61
 8045c4c:	2205      	movs	r2, #5
 8045c4e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8045c50:	687b      	ldr	r3, [r7, #4]
 8045c52:	681b      	ldr	r3, [r3, #0]
 8045c54:	68fa      	ldr	r2, [r7, #12]
 8045c56:	b2d2      	uxtb	r2, r2
 8045c58:	4611      	mov	r1, r2
 8045c5a:	4618      	mov	r0, r3
 8045c5c:	f006 fc83 	bl	804c566 <USB_HC_Halt>
 8045c60:	e04c      	b.n	8045cfc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8045c62:	68fb      	ldr	r3, [r7, #12]
 8045c64:	015a      	lsls	r2, r3, #5
 8045c66:	693b      	ldr	r3, [r7, #16]
 8045c68:	4413      	add	r3, r2
 8045c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045c6e:	689b      	ldr	r3, [r3, #8]
 8045c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8045c74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8045c78:	d11b      	bne.n	8045cb2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8045c7a:	68fb      	ldr	r3, [r7, #12]
 8045c7c:	015a      	lsls	r2, r3, #5
 8045c7e:	693b      	ldr	r3, [r7, #16]
 8045c80:	4413      	add	r3, r2
 8045c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045c86:	461a      	mov	r2, r3
 8045c88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8045c8c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8045c8e:	687a      	ldr	r2, [r7, #4]
 8045c90:	68fb      	ldr	r3, [r7, #12]
 8045c92:	212c      	movs	r1, #44	; 0x2c
 8045c94:	fb01 f303 	mul.w	r3, r1, r3
 8045c98:	4413      	add	r3, r2
 8045c9a:	3361      	adds	r3, #97	; 0x61
 8045c9c:	2208      	movs	r2, #8
 8045c9e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8045ca0:	687b      	ldr	r3, [r7, #4]
 8045ca2:	681b      	ldr	r3, [r3, #0]
 8045ca4:	68fa      	ldr	r2, [r7, #12]
 8045ca6:	b2d2      	uxtb	r2, r2
 8045ca8:	4611      	mov	r1, r2
 8045caa:	4618      	mov	r0, r3
 8045cac:	f006 fc5b 	bl	804c566 <USB_HC_Halt>
 8045cb0:	e024      	b.n	8045cfc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8045cb2:	68fb      	ldr	r3, [r7, #12]
 8045cb4:	015a      	lsls	r2, r3, #5
 8045cb6:	693b      	ldr	r3, [r7, #16]
 8045cb8:	4413      	add	r3, r2
 8045cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045cbe:	689b      	ldr	r3, [r3, #8]
 8045cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8045cc4:	2b80      	cmp	r3, #128	; 0x80
 8045cc6:	d119      	bne.n	8045cfc <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8045cc8:	68fb      	ldr	r3, [r7, #12]
 8045cca:	015a      	lsls	r2, r3, #5
 8045ccc:	693b      	ldr	r3, [r7, #16]
 8045cce:	4413      	add	r3, r2
 8045cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045cd4:	461a      	mov	r2, r3
 8045cd6:	2380      	movs	r3, #128	; 0x80
 8045cd8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8045cda:	687a      	ldr	r2, [r7, #4]
 8045cdc:	68fb      	ldr	r3, [r7, #12]
 8045cde:	212c      	movs	r1, #44	; 0x2c
 8045ce0:	fb01 f303 	mul.w	r3, r1, r3
 8045ce4:	4413      	add	r3, r2
 8045ce6:	3361      	adds	r3, #97	; 0x61
 8045ce8:	2206      	movs	r2, #6
 8045cea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8045cec:	687b      	ldr	r3, [r7, #4]
 8045cee:	681b      	ldr	r3, [r3, #0]
 8045cf0:	68fa      	ldr	r2, [r7, #12]
 8045cf2:	b2d2      	uxtb	r2, r2
 8045cf4:	4611      	mov	r1, r2
 8045cf6:	4618      	mov	r0, r3
 8045cf8:	f006 fc35 	bl	804c566 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8045cfc:	68fb      	ldr	r3, [r7, #12]
 8045cfe:	015a      	lsls	r2, r3, #5
 8045d00:	693b      	ldr	r3, [r7, #16]
 8045d02:	4413      	add	r3, r2
 8045d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045d08:	689b      	ldr	r3, [r3, #8]
 8045d0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8045d0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8045d12:	d112      	bne.n	8045d3a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8045d14:	687b      	ldr	r3, [r7, #4]
 8045d16:	681b      	ldr	r3, [r3, #0]
 8045d18:	68fa      	ldr	r2, [r7, #12]
 8045d1a:	b2d2      	uxtb	r2, r2
 8045d1c:	4611      	mov	r1, r2
 8045d1e:	4618      	mov	r0, r3
 8045d20:	f006 fc21 	bl	804c566 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8045d24:	68fb      	ldr	r3, [r7, #12]
 8045d26:	015a      	lsls	r2, r3, #5
 8045d28:	693b      	ldr	r3, [r7, #16]
 8045d2a:	4413      	add	r3, r2
 8045d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045d30:	461a      	mov	r2, r3
 8045d32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8045d36:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8045d38:	e24e      	b.n	80461d8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8045d3a:	68fb      	ldr	r3, [r7, #12]
 8045d3c:	015a      	lsls	r2, r3, #5
 8045d3e:	693b      	ldr	r3, [r7, #16]
 8045d40:	4413      	add	r3, r2
 8045d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045d46:	689b      	ldr	r3, [r3, #8]
 8045d48:	f003 0301 	and.w	r3, r3, #1
 8045d4c:	2b01      	cmp	r3, #1
 8045d4e:	f040 80df 	bne.w	8045f10 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8045d52:	687b      	ldr	r3, [r7, #4]
 8045d54:	691b      	ldr	r3, [r3, #16]
 8045d56:	2b00      	cmp	r3, #0
 8045d58:	d019      	beq.n	8045d8e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8045d5a:	687a      	ldr	r2, [r7, #4]
 8045d5c:	68fb      	ldr	r3, [r7, #12]
 8045d5e:	212c      	movs	r1, #44	; 0x2c
 8045d60:	fb01 f303 	mul.w	r3, r1, r3
 8045d64:	4413      	add	r3, r2
 8045d66:	3348      	adds	r3, #72	; 0x48
 8045d68:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8045d6a:	68fb      	ldr	r3, [r7, #12]
 8045d6c:	0159      	lsls	r1, r3, #5
 8045d6e:	693b      	ldr	r3, [r7, #16]
 8045d70:	440b      	add	r3, r1
 8045d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045d76:	691b      	ldr	r3, [r3, #16]
 8045d78:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8045d7c:	1ad2      	subs	r2, r2, r3
 8045d7e:	6879      	ldr	r1, [r7, #4]
 8045d80:	68fb      	ldr	r3, [r7, #12]
 8045d82:	202c      	movs	r0, #44	; 0x2c
 8045d84:	fb00 f303 	mul.w	r3, r0, r3
 8045d88:	440b      	add	r3, r1
 8045d8a:	3350      	adds	r3, #80	; 0x50
 8045d8c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8045d8e:	687a      	ldr	r2, [r7, #4]
 8045d90:	68fb      	ldr	r3, [r7, #12]
 8045d92:	212c      	movs	r1, #44	; 0x2c
 8045d94:	fb01 f303 	mul.w	r3, r1, r3
 8045d98:	4413      	add	r3, r2
 8045d9a:	3361      	adds	r3, #97	; 0x61
 8045d9c:	2201      	movs	r2, #1
 8045d9e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8045da0:	687a      	ldr	r2, [r7, #4]
 8045da2:	68fb      	ldr	r3, [r7, #12]
 8045da4:	212c      	movs	r1, #44	; 0x2c
 8045da6:	fb01 f303 	mul.w	r3, r1, r3
 8045daa:	4413      	add	r3, r2
 8045dac:	335c      	adds	r3, #92	; 0x5c
 8045dae:	2200      	movs	r2, #0
 8045db0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8045db2:	68fb      	ldr	r3, [r7, #12]
 8045db4:	015a      	lsls	r2, r3, #5
 8045db6:	693b      	ldr	r3, [r7, #16]
 8045db8:	4413      	add	r3, r2
 8045dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045dbe:	461a      	mov	r2, r3
 8045dc0:	2301      	movs	r3, #1
 8045dc2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8045dc4:	687a      	ldr	r2, [r7, #4]
 8045dc6:	68fb      	ldr	r3, [r7, #12]
 8045dc8:	212c      	movs	r1, #44	; 0x2c
 8045dca:	fb01 f303 	mul.w	r3, r1, r3
 8045dce:	4413      	add	r3, r2
 8045dd0:	333f      	adds	r3, #63	; 0x3f
 8045dd2:	781b      	ldrb	r3, [r3, #0]
 8045dd4:	2b00      	cmp	r3, #0
 8045dd6:	d009      	beq.n	8045dec <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8045dd8:	687a      	ldr	r2, [r7, #4]
 8045dda:	68fb      	ldr	r3, [r7, #12]
 8045ddc:	212c      	movs	r1, #44	; 0x2c
 8045dde:	fb01 f303 	mul.w	r3, r1, r3
 8045de2:	4413      	add	r3, r2
 8045de4:	333f      	adds	r3, #63	; 0x3f
 8045de6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8045de8:	2b02      	cmp	r3, #2
 8045dea:	d111      	bne.n	8045e10 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8045dec:	687b      	ldr	r3, [r7, #4]
 8045dee:	681b      	ldr	r3, [r3, #0]
 8045df0:	68fa      	ldr	r2, [r7, #12]
 8045df2:	b2d2      	uxtb	r2, r2
 8045df4:	4611      	mov	r1, r2
 8045df6:	4618      	mov	r0, r3
 8045df8:	f006 fbb5 	bl	804c566 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8045dfc:	68fb      	ldr	r3, [r7, #12]
 8045dfe:	015a      	lsls	r2, r3, #5
 8045e00:	693b      	ldr	r3, [r7, #16]
 8045e02:	4413      	add	r3, r2
 8045e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045e08:	461a      	mov	r2, r3
 8045e0a:	2310      	movs	r3, #16
 8045e0c:	6093      	str	r3, [r2, #8]
 8045e0e:	e03a      	b.n	8045e86 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8045e10:	687a      	ldr	r2, [r7, #4]
 8045e12:	68fb      	ldr	r3, [r7, #12]
 8045e14:	212c      	movs	r1, #44	; 0x2c
 8045e16:	fb01 f303 	mul.w	r3, r1, r3
 8045e1a:	4413      	add	r3, r2
 8045e1c:	333f      	adds	r3, #63	; 0x3f
 8045e1e:	781b      	ldrb	r3, [r3, #0]
 8045e20:	2b03      	cmp	r3, #3
 8045e22:	d009      	beq.n	8045e38 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8045e24:	687a      	ldr	r2, [r7, #4]
 8045e26:	68fb      	ldr	r3, [r7, #12]
 8045e28:	212c      	movs	r1, #44	; 0x2c
 8045e2a:	fb01 f303 	mul.w	r3, r1, r3
 8045e2e:	4413      	add	r3, r2
 8045e30:	333f      	adds	r3, #63	; 0x3f
 8045e32:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8045e34:	2b01      	cmp	r3, #1
 8045e36:	d126      	bne.n	8045e86 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8045e38:	68fb      	ldr	r3, [r7, #12]
 8045e3a:	015a      	lsls	r2, r3, #5
 8045e3c:	693b      	ldr	r3, [r7, #16]
 8045e3e:	4413      	add	r3, r2
 8045e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045e44:	681b      	ldr	r3, [r3, #0]
 8045e46:	68fa      	ldr	r2, [r7, #12]
 8045e48:	0151      	lsls	r1, r2, #5
 8045e4a:	693a      	ldr	r2, [r7, #16]
 8045e4c:	440a      	add	r2, r1
 8045e4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8045e52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8045e56:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8045e58:	687a      	ldr	r2, [r7, #4]
 8045e5a:	68fb      	ldr	r3, [r7, #12]
 8045e5c:	212c      	movs	r1, #44	; 0x2c
 8045e5e:	fb01 f303 	mul.w	r3, r1, r3
 8045e62:	4413      	add	r3, r2
 8045e64:	3360      	adds	r3, #96	; 0x60
 8045e66:	2201      	movs	r2, #1
 8045e68:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8045e6a:	68fb      	ldr	r3, [r7, #12]
 8045e6c:	b2d9      	uxtb	r1, r3
 8045e6e:	687a      	ldr	r2, [r7, #4]
 8045e70:	68fb      	ldr	r3, [r7, #12]
 8045e72:	202c      	movs	r0, #44	; 0x2c
 8045e74:	fb00 f303 	mul.w	r3, r0, r3
 8045e78:	4413      	add	r3, r2
 8045e7a:	3360      	adds	r3, #96	; 0x60
 8045e7c:	781b      	ldrb	r3, [r3, #0]
 8045e7e:	461a      	mov	r2, r3
 8045e80:	6878      	ldr	r0, [r7, #4]
 8045e82:	f013 fdaf 	bl	80599e4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8045e86:	687b      	ldr	r3, [r7, #4]
 8045e88:	691b      	ldr	r3, [r3, #16]
 8045e8a:	2b01      	cmp	r3, #1
 8045e8c:	d12b      	bne.n	8045ee6 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8045e8e:	687a      	ldr	r2, [r7, #4]
 8045e90:	68fb      	ldr	r3, [r7, #12]
 8045e92:	212c      	movs	r1, #44	; 0x2c
 8045e94:	fb01 f303 	mul.w	r3, r1, r3
 8045e98:	4413      	add	r3, r2
 8045e9a:	3348      	adds	r3, #72	; 0x48
 8045e9c:	681b      	ldr	r3, [r3, #0]
 8045e9e:	6879      	ldr	r1, [r7, #4]
 8045ea0:	68fa      	ldr	r2, [r7, #12]
 8045ea2:	202c      	movs	r0, #44	; 0x2c
 8045ea4:	fb00 f202 	mul.w	r2, r0, r2
 8045ea8:	440a      	add	r2, r1
 8045eaa:	3240      	adds	r2, #64	; 0x40
 8045eac:	8812      	ldrh	r2, [r2, #0]
 8045eae:	fbb3 f3f2 	udiv	r3, r3, r2
 8045eb2:	f003 0301 	and.w	r3, r3, #1
 8045eb6:	2b00      	cmp	r3, #0
 8045eb8:	f000 818e 	beq.w	80461d8 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8045ebc:	687a      	ldr	r2, [r7, #4]
 8045ebe:	68fb      	ldr	r3, [r7, #12]
 8045ec0:	212c      	movs	r1, #44	; 0x2c
 8045ec2:	fb01 f303 	mul.w	r3, r1, r3
 8045ec6:	4413      	add	r3, r2
 8045ec8:	3354      	adds	r3, #84	; 0x54
 8045eca:	781b      	ldrb	r3, [r3, #0]
 8045ecc:	f083 0301 	eor.w	r3, r3, #1
 8045ed0:	b2d8      	uxtb	r0, r3
 8045ed2:	687a      	ldr	r2, [r7, #4]
 8045ed4:	68fb      	ldr	r3, [r7, #12]
 8045ed6:	212c      	movs	r1, #44	; 0x2c
 8045ed8:	fb01 f303 	mul.w	r3, r1, r3
 8045edc:	4413      	add	r3, r2
 8045ede:	3354      	adds	r3, #84	; 0x54
 8045ee0:	4602      	mov	r2, r0
 8045ee2:	701a      	strb	r2, [r3, #0]
}
 8045ee4:	e178      	b.n	80461d8 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8045ee6:	687a      	ldr	r2, [r7, #4]
 8045ee8:	68fb      	ldr	r3, [r7, #12]
 8045eea:	212c      	movs	r1, #44	; 0x2c
 8045eec:	fb01 f303 	mul.w	r3, r1, r3
 8045ef0:	4413      	add	r3, r2
 8045ef2:	3354      	adds	r3, #84	; 0x54
 8045ef4:	781b      	ldrb	r3, [r3, #0]
 8045ef6:	f083 0301 	eor.w	r3, r3, #1
 8045efa:	b2d8      	uxtb	r0, r3
 8045efc:	687a      	ldr	r2, [r7, #4]
 8045efe:	68fb      	ldr	r3, [r7, #12]
 8045f00:	212c      	movs	r1, #44	; 0x2c
 8045f02:	fb01 f303 	mul.w	r3, r1, r3
 8045f06:	4413      	add	r3, r2
 8045f08:	3354      	adds	r3, #84	; 0x54
 8045f0a:	4602      	mov	r2, r0
 8045f0c:	701a      	strb	r2, [r3, #0]
}
 8045f0e:	e163      	b.n	80461d8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8045f10:	68fb      	ldr	r3, [r7, #12]
 8045f12:	015a      	lsls	r2, r3, #5
 8045f14:	693b      	ldr	r3, [r7, #16]
 8045f16:	4413      	add	r3, r2
 8045f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045f1c:	689b      	ldr	r3, [r3, #8]
 8045f1e:	f003 0302 	and.w	r3, r3, #2
 8045f22:	2b02      	cmp	r3, #2
 8045f24:	f040 80f6 	bne.w	8046114 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8045f28:	687a      	ldr	r2, [r7, #4]
 8045f2a:	68fb      	ldr	r3, [r7, #12]
 8045f2c:	212c      	movs	r1, #44	; 0x2c
 8045f2e:	fb01 f303 	mul.w	r3, r1, r3
 8045f32:	4413      	add	r3, r2
 8045f34:	3361      	adds	r3, #97	; 0x61
 8045f36:	781b      	ldrb	r3, [r3, #0]
 8045f38:	2b01      	cmp	r3, #1
 8045f3a:	d109      	bne.n	8045f50 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8045f3c:	687a      	ldr	r2, [r7, #4]
 8045f3e:	68fb      	ldr	r3, [r7, #12]
 8045f40:	212c      	movs	r1, #44	; 0x2c
 8045f42:	fb01 f303 	mul.w	r3, r1, r3
 8045f46:	4413      	add	r3, r2
 8045f48:	3360      	adds	r3, #96	; 0x60
 8045f4a:	2201      	movs	r2, #1
 8045f4c:	701a      	strb	r2, [r3, #0]
 8045f4e:	e0c9      	b.n	80460e4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8045f50:	687a      	ldr	r2, [r7, #4]
 8045f52:	68fb      	ldr	r3, [r7, #12]
 8045f54:	212c      	movs	r1, #44	; 0x2c
 8045f56:	fb01 f303 	mul.w	r3, r1, r3
 8045f5a:	4413      	add	r3, r2
 8045f5c:	3361      	adds	r3, #97	; 0x61
 8045f5e:	781b      	ldrb	r3, [r3, #0]
 8045f60:	2b05      	cmp	r3, #5
 8045f62:	d109      	bne.n	8045f78 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8045f64:	687a      	ldr	r2, [r7, #4]
 8045f66:	68fb      	ldr	r3, [r7, #12]
 8045f68:	212c      	movs	r1, #44	; 0x2c
 8045f6a:	fb01 f303 	mul.w	r3, r1, r3
 8045f6e:	4413      	add	r3, r2
 8045f70:	3360      	adds	r3, #96	; 0x60
 8045f72:	2205      	movs	r2, #5
 8045f74:	701a      	strb	r2, [r3, #0]
 8045f76:	e0b5      	b.n	80460e4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8045f78:	687a      	ldr	r2, [r7, #4]
 8045f7a:	68fb      	ldr	r3, [r7, #12]
 8045f7c:	212c      	movs	r1, #44	; 0x2c
 8045f7e:	fb01 f303 	mul.w	r3, r1, r3
 8045f82:	4413      	add	r3, r2
 8045f84:	3361      	adds	r3, #97	; 0x61
 8045f86:	781b      	ldrb	r3, [r3, #0]
 8045f88:	2b06      	cmp	r3, #6
 8045f8a:	d009      	beq.n	8045fa0 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8045f8c:	687a      	ldr	r2, [r7, #4]
 8045f8e:	68fb      	ldr	r3, [r7, #12]
 8045f90:	212c      	movs	r1, #44	; 0x2c
 8045f92:	fb01 f303 	mul.w	r3, r1, r3
 8045f96:	4413      	add	r3, r2
 8045f98:	3361      	adds	r3, #97	; 0x61
 8045f9a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8045f9c:	2b08      	cmp	r3, #8
 8045f9e:	d150      	bne.n	8046042 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8045fa0:	687a      	ldr	r2, [r7, #4]
 8045fa2:	68fb      	ldr	r3, [r7, #12]
 8045fa4:	212c      	movs	r1, #44	; 0x2c
 8045fa6:	fb01 f303 	mul.w	r3, r1, r3
 8045faa:	4413      	add	r3, r2
 8045fac:	335c      	adds	r3, #92	; 0x5c
 8045fae:	681b      	ldr	r3, [r3, #0]
 8045fb0:	1c5a      	adds	r2, r3, #1
 8045fb2:	6879      	ldr	r1, [r7, #4]
 8045fb4:	68fb      	ldr	r3, [r7, #12]
 8045fb6:	202c      	movs	r0, #44	; 0x2c
 8045fb8:	fb00 f303 	mul.w	r3, r0, r3
 8045fbc:	440b      	add	r3, r1
 8045fbe:	335c      	adds	r3, #92	; 0x5c
 8045fc0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8045fc2:	687a      	ldr	r2, [r7, #4]
 8045fc4:	68fb      	ldr	r3, [r7, #12]
 8045fc6:	212c      	movs	r1, #44	; 0x2c
 8045fc8:	fb01 f303 	mul.w	r3, r1, r3
 8045fcc:	4413      	add	r3, r2
 8045fce:	335c      	adds	r3, #92	; 0x5c
 8045fd0:	681b      	ldr	r3, [r3, #0]
 8045fd2:	2b02      	cmp	r3, #2
 8045fd4:	d912      	bls.n	8045ffc <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8045fd6:	687a      	ldr	r2, [r7, #4]
 8045fd8:	68fb      	ldr	r3, [r7, #12]
 8045fda:	212c      	movs	r1, #44	; 0x2c
 8045fdc:	fb01 f303 	mul.w	r3, r1, r3
 8045fe0:	4413      	add	r3, r2
 8045fe2:	335c      	adds	r3, #92	; 0x5c
 8045fe4:	2200      	movs	r2, #0
 8045fe6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8045fe8:	687a      	ldr	r2, [r7, #4]
 8045fea:	68fb      	ldr	r3, [r7, #12]
 8045fec:	212c      	movs	r1, #44	; 0x2c
 8045fee:	fb01 f303 	mul.w	r3, r1, r3
 8045ff2:	4413      	add	r3, r2
 8045ff4:	3360      	adds	r3, #96	; 0x60
 8045ff6:	2204      	movs	r2, #4
 8045ff8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8045ffa:	e073      	b.n	80460e4 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8045ffc:	687a      	ldr	r2, [r7, #4]
 8045ffe:	68fb      	ldr	r3, [r7, #12]
 8046000:	212c      	movs	r1, #44	; 0x2c
 8046002:	fb01 f303 	mul.w	r3, r1, r3
 8046006:	4413      	add	r3, r2
 8046008:	3360      	adds	r3, #96	; 0x60
 804600a:	2202      	movs	r2, #2
 804600c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 804600e:	68fb      	ldr	r3, [r7, #12]
 8046010:	015a      	lsls	r2, r3, #5
 8046012:	693b      	ldr	r3, [r7, #16]
 8046014:	4413      	add	r3, r2
 8046016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804601a:	681b      	ldr	r3, [r3, #0]
 804601c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 804601e:	68bb      	ldr	r3, [r7, #8]
 8046020:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8046024:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8046026:	68bb      	ldr	r3, [r7, #8]
 8046028:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 804602c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 804602e:	68fb      	ldr	r3, [r7, #12]
 8046030:	015a      	lsls	r2, r3, #5
 8046032:	693b      	ldr	r3, [r7, #16]
 8046034:	4413      	add	r3, r2
 8046036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804603a:	461a      	mov	r2, r3
 804603c:	68bb      	ldr	r3, [r7, #8]
 804603e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8046040:	e050      	b.n	80460e4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8046042:	687a      	ldr	r2, [r7, #4]
 8046044:	68fb      	ldr	r3, [r7, #12]
 8046046:	212c      	movs	r1, #44	; 0x2c
 8046048:	fb01 f303 	mul.w	r3, r1, r3
 804604c:	4413      	add	r3, r2
 804604e:	3361      	adds	r3, #97	; 0x61
 8046050:	781b      	ldrb	r3, [r3, #0]
 8046052:	2b03      	cmp	r3, #3
 8046054:	d122      	bne.n	804609c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8046056:	687a      	ldr	r2, [r7, #4]
 8046058:	68fb      	ldr	r3, [r7, #12]
 804605a:	212c      	movs	r1, #44	; 0x2c
 804605c:	fb01 f303 	mul.w	r3, r1, r3
 8046060:	4413      	add	r3, r2
 8046062:	3360      	adds	r3, #96	; 0x60
 8046064:	2202      	movs	r2, #2
 8046066:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8046068:	68fb      	ldr	r3, [r7, #12]
 804606a:	015a      	lsls	r2, r3, #5
 804606c:	693b      	ldr	r3, [r7, #16]
 804606e:	4413      	add	r3, r2
 8046070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046074:	681b      	ldr	r3, [r3, #0]
 8046076:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8046078:	68bb      	ldr	r3, [r7, #8]
 804607a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 804607e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8046080:	68bb      	ldr	r3, [r7, #8]
 8046082:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8046086:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8046088:	68fb      	ldr	r3, [r7, #12]
 804608a:	015a      	lsls	r2, r3, #5
 804608c:	693b      	ldr	r3, [r7, #16]
 804608e:	4413      	add	r3, r2
 8046090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046094:	461a      	mov	r2, r3
 8046096:	68bb      	ldr	r3, [r7, #8]
 8046098:	6013      	str	r3, [r2, #0]
 804609a:	e023      	b.n	80460e4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 804609c:	687a      	ldr	r2, [r7, #4]
 804609e:	68fb      	ldr	r3, [r7, #12]
 80460a0:	212c      	movs	r1, #44	; 0x2c
 80460a2:	fb01 f303 	mul.w	r3, r1, r3
 80460a6:	4413      	add	r3, r2
 80460a8:	3361      	adds	r3, #97	; 0x61
 80460aa:	781b      	ldrb	r3, [r3, #0]
 80460ac:	2b07      	cmp	r3, #7
 80460ae:	d119      	bne.n	80460e4 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80460b0:	687a      	ldr	r2, [r7, #4]
 80460b2:	68fb      	ldr	r3, [r7, #12]
 80460b4:	212c      	movs	r1, #44	; 0x2c
 80460b6:	fb01 f303 	mul.w	r3, r1, r3
 80460ba:	4413      	add	r3, r2
 80460bc:	335c      	adds	r3, #92	; 0x5c
 80460be:	681b      	ldr	r3, [r3, #0]
 80460c0:	1c5a      	adds	r2, r3, #1
 80460c2:	6879      	ldr	r1, [r7, #4]
 80460c4:	68fb      	ldr	r3, [r7, #12]
 80460c6:	202c      	movs	r0, #44	; 0x2c
 80460c8:	fb00 f303 	mul.w	r3, r0, r3
 80460cc:	440b      	add	r3, r1
 80460ce:	335c      	adds	r3, #92	; 0x5c
 80460d0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80460d2:	687a      	ldr	r2, [r7, #4]
 80460d4:	68fb      	ldr	r3, [r7, #12]
 80460d6:	212c      	movs	r1, #44	; 0x2c
 80460d8:	fb01 f303 	mul.w	r3, r1, r3
 80460dc:	4413      	add	r3, r2
 80460de:	3360      	adds	r3, #96	; 0x60
 80460e0:	2204      	movs	r2, #4
 80460e2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80460e4:	68fb      	ldr	r3, [r7, #12]
 80460e6:	015a      	lsls	r2, r3, #5
 80460e8:	693b      	ldr	r3, [r7, #16]
 80460ea:	4413      	add	r3, r2
 80460ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80460f0:	461a      	mov	r2, r3
 80460f2:	2302      	movs	r3, #2
 80460f4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80460f6:	68fb      	ldr	r3, [r7, #12]
 80460f8:	b2d9      	uxtb	r1, r3
 80460fa:	687a      	ldr	r2, [r7, #4]
 80460fc:	68fb      	ldr	r3, [r7, #12]
 80460fe:	202c      	movs	r0, #44	; 0x2c
 8046100:	fb00 f303 	mul.w	r3, r0, r3
 8046104:	4413      	add	r3, r2
 8046106:	3360      	adds	r3, #96	; 0x60
 8046108:	781b      	ldrb	r3, [r3, #0]
 804610a:	461a      	mov	r2, r3
 804610c:	6878      	ldr	r0, [r7, #4]
 804610e:	f013 fc69 	bl	80599e4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8046112:	e061      	b.n	80461d8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8046114:	68fb      	ldr	r3, [r7, #12]
 8046116:	015a      	lsls	r2, r3, #5
 8046118:	693b      	ldr	r3, [r7, #16]
 804611a:	4413      	add	r3, r2
 804611c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046120:	689b      	ldr	r3, [r3, #8]
 8046122:	f003 0310 	and.w	r3, r3, #16
 8046126:	2b10      	cmp	r3, #16
 8046128:	d156      	bne.n	80461d8 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 804612a:	687a      	ldr	r2, [r7, #4]
 804612c:	68fb      	ldr	r3, [r7, #12]
 804612e:	212c      	movs	r1, #44	; 0x2c
 8046130:	fb01 f303 	mul.w	r3, r1, r3
 8046134:	4413      	add	r3, r2
 8046136:	333f      	adds	r3, #63	; 0x3f
 8046138:	781b      	ldrb	r3, [r3, #0]
 804613a:	2b03      	cmp	r3, #3
 804613c:	d111      	bne.n	8046162 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 804613e:	687a      	ldr	r2, [r7, #4]
 8046140:	68fb      	ldr	r3, [r7, #12]
 8046142:	212c      	movs	r1, #44	; 0x2c
 8046144:	fb01 f303 	mul.w	r3, r1, r3
 8046148:	4413      	add	r3, r2
 804614a:	335c      	adds	r3, #92	; 0x5c
 804614c:	2200      	movs	r2, #0
 804614e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8046150:	687b      	ldr	r3, [r7, #4]
 8046152:	681b      	ldr	r3, [r3, #0]
 8046154:	68fa      	ldr	r2, [r7, #12]
 8046156:	b2d2      	uxtb	r2, r2
 8046158:	4611      	mov	r1, r2
 804615a:	4618      	mov	r0, r3
 804615c:	f006 fa03 	bl	804c566 <USB_HC_Halt>
 8046160:	e031      	b.n	80461c6 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8046162:	687a      	ldr	r2, [r7, #4]
 8046164:	68fb      	ldr	r3, [r7, #12]
 8046166:	212c      	movs	r1, #44	; 0x2c
 8046168:	fb01 f303 	mul.w	r3, r1, r3
 804616c:	4413      	add	r3, r2
 804616e:	333f      	adds	r3, #63	; 0x3f
 8046170:	781b      	ldrb	r3, [r3, #0]
 8046172:	2b00      	cmp	r3, #0
 8046174:	d009      	beq.n	804618a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8046176:	687a      	ldr	r2, [r7, #4]
 8046178:	68fb      	ldr	r3, [r7, #12]
 804617a:	212c      	movs	r1, #44	; 0x2c
 804617c:	fb01 f303 	mul.w	r3, r1, r3
 8046180:	4413      	add	r3, r2
 8046182:	333f      	adds	r3, #63	; 0x3f
 8046184:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8046186:	2b02      	cmp	r3, #2
 8046188:	d11d      	bne.n	80461c6 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 804618a:	687a      	ldr	r2, [r7, #4]
 804618c:	68fb      	ldr	r3, [r7, #12]
 804618e:	212c      	movs	r1, #44	; 0x2c
 8046190:	fb01 f303 	mul.w	r3, r1, r3
 8046194:	4413      	add	r3, r2
 8046196:	335c      	adds	r3, #92	; 0x5c
 8046198:	2200      	movs	r2, #0
 804619a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 804619c:	687b      	ldr	r3, [r7, #4]
 804619e:	691b      	ldr	r3, [r3, #16]
 80461a0:	2b00      	cmp	r3, #0
 80461a2:	d110      	bne.n	80461c6 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80461a4:	687a      	ldr	r2, [r7, #4]
 80461a6:	68fb      	ldr	r3, [r7, #12]
 80461a8:	212c      	movs	r1, #44	; 0x2c
 80461aa:	fb01 f303 	mul.w	r3, r1, r3
 80461ae:	4413      	add	r3, r2
 80461b0:	3361      	adds	r3, #97	; 0x61
 80461b2:	2203      	movs	r2, #3
 80461b4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80461b6:	687b      	ldr	r3, [r7, #4]
 80461b8:	681b      	ldr	r3, [r3, #0]
 80461ba:	68fa      	ldr	r2, [r7, #12]
 80461bc:	b2d2      	uxtb	r2, r2
 80461be:	4611      	mov	r1, r2
 80461c0:	4618      	mov	r0, r3
 80461c2:	f006 f9d0 	bl	804c566 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80461c6:	68fb      	ldr	r3, [r7, #12]
 80461c8:	015a      	lsls	r2, r3, #5
 80461ca:	693b      	ldr	r3, [r7, #16]
 80461cc:	4413      	add	r3, r2
 80461ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80461d2:	461a      	mov	r2, r3
 80461d4:	2310      	movs	r3, #16
 80461d6:	6093      	str	r3, [r2, #8]
}
 80461d8:	bf00      	nop
 80461da:	3718      	adds	r7, #24
 80461dc:	46bd      	mov	sp, r7
 80461de:	bd80      	pop	{r7, pc}

080461e0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80461e0:	b580      	push	{r7, lr}
 80461e2:	b088      	sub	sp, #32
 80461e4:	af00      	add	r7, sp, #0
 80461e6:	6078      	str	r0, [r7, #4]
 80461e8:	460b      	mov	r3, r1
 80461ea:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80461ec:	687b      	ldr	r3, [r7, #4]
 80461ee:	681b      	ldr	r3, [r3, #0]
 80461f0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80461f2:	69fb      	ldr	r3, [r7, #28]
 80461f4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80461f6:	78fb      	ldrb	r3, [r7, #3]
 80461f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80461fa:	697b      	ldr	r3, [r7, #20]
 80461fc:	015a      	lsls	r2, r3, #5
 80461fe:	69bb      	ldr	r3, [r7, #24]
 8046200:	4413      	add	r3, r2
 8046202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046206:	689b      	ldr	r3, [r3, #8]
 8046208:	f003 0304 	and.w	r3, r3, #4
 804620c:	2b04      	cmp	r3, #4
 804620e:	d11a      	bne.n	8046246 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8046210:	697b      	ldr	r3, [r7, #20]
 8046212:	015a      	lsls	r2, r3, #5
 8046214:	69bb      	ldr	r3, [r7, #24]
 8046216:	4413      	add	r3, r2
 8046218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804621c:	461a      	mov	r2, r3
 804621e:	2304      	movs	r3, #4
 8046220:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8046222:	687a      	ldr	r2, [r7, #4]
 8046224:	697b      	ldr	r3, [r7, #20]
 8046226:	212c      	movs	r1, #44	; 0x2c
 8046228:	fb01 f303 	mul.w	r3, r1, r3
 804622c:	4413      	add	r3, r2
 804622e:	3361      	adds	r3, #97	; 0x61
 8046230:	2206      	movs	r2, #6
 8046232:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8046234:	687b      	ldr	r3, [r7, #4]
 8046236:	681b      	ldr	r3, [r3, #0]
 8046238:	697a      	ldr	r2, [r7, #20]
 804623a:	b2d2      	uxtb	r2, r2
 804623c:	4611      	mov	r1, r2
 804623e:	4618      	mov	r0, r3
 8046240:	f006 f991 	bl	804c566 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8046244:	e331      	b.n	80468aa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8046246:	697b      	ldr	r3, [r7, #20]
 8046248:	015a      	lsls	r2, r3, #5
 804624a:	69bb      	ldr	r3, [r7, #24]
 804624c:	4413      	add	r3, r2
 804624e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046252:	689b      	ldr	r3, [r3, #8]
 8046254:	f003 0320 	and.w	r3, r3, #32
 8046258:	2b20      	cmp	r3, #32
 804625a:	d12e      	bne.n	80462ba <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 804625c:	697b      	ldr	r3, [r7, #20]
 804625e:	015a      	lsls	r2, r3, #5
 8046260:	69bb      	ldr	r3, [r7, #24]
 8046262:	4413      	add	r3, r2
 8046264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046268:	461a      	mov	r2, r3
 804626a:	2320      	movs	r3, #32
 804626c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 804626e:	687a      	ldr	r2, [r7, #4]
 8046270:	697b      	ldr	r3, [r7, #20]
 8046272:	212c      	movs	r1, #44	; 0x2c
 8046274:	fb01 f303 	mul.w	r3, r1, r3
 8046278:	4413      	add	r3, r2
 804627a:	333d      	adds	r3, #61	; 0x3d
 804627c:	781b      	ldrb	r3, [r3, #0]
 804627e:	2b01      	cmp	r3, #1
 8046280:	f040 8313 	bne.w	80468aa <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8046284:	687a      	ldr	r2, [r7, #4]
 8046286:	697b      	ldr	r3, [r7, #20]
 8046288:	212c      	movs	r1, #44	; 0x2c
 804628a:	fb01 f303 	mul.w	r3, r1, r3
 804628e:	4413      	add	r3, r2
 8046290:	333d      	adds	r3, #61	; 0x3d
 8046292:	2200      	movs	r2, #0
 8046294:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8046296:	687a      	ldr	r2, [r7, #4]
 8046298:	697b      	ldr	r3, [r7, #20]
 804629a:	212c      	movs	r1, #44	; 0x2c
 804629c:	fb01 f303 	mul.w	r3, r1, r3
 80462a0:	4413      	add	r3, r2
 80462a2:	3360      	adds	r3, #96	; 0x60
 80462a4:	2202      	movs	r2, #2
 80462a6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80462a8:	687b      	ldr	r3, [r7, #4]
 80462aa:	681b      	ldr	r3, [r3, #0]
 80462ac:	697a      	ldr	r2, [r7, #20]
 80462ae:	b2d2      	uxtb	r2, r2
 80462b0:	4611      	mov	r1, r2
 80462b2:	4618      	mov	r0, r3
 80462b4:	f006 f957 	bl	804c566 <USB_HC_Halt>
}
 80462b8:	e2f7      	b.n	80468aa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80462ba:	697b      	ldr	r3, [r7, #20]
 80462bc:	015a      	lsls	r2, r3, #5
 80462be:	69bb      	ldr	r3, [r7, #24]
 80462c0:	4413      	add	r3, r2
 80462c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80462c6:	689b      	ldr	r3, [r3, #8]
 80462c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80462cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80462d0:	d112      	bne.n	80462f8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80462d2:	697b      	ldr	r3, [r7, #20]
 80462d4:	015a      	lsls	r2, r3, #5
 80462d6:	69bb      	ldr	r3, [r7, #24]
 80462d8:	4413      	add	r3, r2
 80462da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80462de:	461a      	mov	r2, r3
 80462e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80462e4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80462e6:	687b      	ldr	r3, [r7, #4]
 80462e8:	681b      	ldr	r3, [r3, #0]
 80462ea:	697a      	ldr	r2, [r7, #20]
 80462ec:	b2d2      	uxtb	r2, r2
 80462ee:	4611      	mov	r1, r2
 80462f0:	4618      	mov	r0, r3
 80462f2:	f006 f938 	bl	804c566 <USB_HC_Halt>
}
 80462f6:	e2d8      	b.n	80468aa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80462f8:	697b      	ldr	r3, [r7, #20]
 80462fa:	015a      	lsls	r2, r3, #5
 80462fc:	69bb      	ldr	r3, [r7, #24]
 80462fe:	4413      	add	r3, r2
 8046300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046304:	689b      	ldr	r3, [r3, #8]
 8046306:	f003 0301 	and.w	r3, r3, #1
 804630a:	2b01      	cmp	r3, #1
 804630c:	d140      	bne.n	8046390 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 804630e:	687a      	ldr	r2, [r7, #4]
 8046310:	697b      	ldr	r3, [r7, #20]
 8046312:	212c      	movs	r1, #44	; 0x2c
 8046314:	fb01 f303 	mul.w	r3, r1, r3
 8046318:	4413      	add	r3, r2
 804631a:	335c      	adds	r3, #92	; 0x5c
 804631c:	2200      	movs	r2, #0
 804631e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8046320:	697b      	ldr	r3, [r7, #20]
 8046322:	015a      	lsls	r2, r3, #5
 8046324:	69bb      	ldr	r3, [r7, #24]
 8046326:	4413      	add	r3, r2
 8046328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804632c:	689b      	ldr	r3, [r3, #8]
 804632e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8046332:	2b40      	cmp	r3, #64	; 0x40
 8046334:	d111      	bne.n	804635a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8046336:	687a      	ldr	r2, [r7, #4]
 8046338:	697b      	ldr	r3, [r7, #20]
 804633a:	212c      	movs	r1, #44	; 0x2c
 804633c:	fb01 f303 	mul.w	r3, r1, r3
 8046340:	4413      	add	r3, r2
 8046342:	333d      	adds	r3, #61	; 0x3d
 8046344:	2201      	movs	r2, #1
 8046346:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8046348:	697b      	ldr	r3, [r7, #20]
 804634a:	015a      	lsls	r2, r3, #5
 804634c:	69bb      	ldr	r3, [r7, #24]
 804634e:	4413      	add	r3, r2
 8046350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046354:	461a      	mov	r2, r3
 8046356:	2340      	movs	r3, #64	; 0x40
 8046358:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 804635a:	697b      	ldr	r3, [r7, #20]
 804635c:	015a      	lsls	r2, r3, #5
 804635e:	69bb      	ldr	r3, [r7, #24]
 8046360:	4413      	add	r3, r2
 8046362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046366:	461a      	mov	r2, r3
 8046368:	2301      	movs	r3, #1
 804636a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 804636c:	687a      	ldr	r2, [r7, #4]
 804636e:	697b      	ldr	r3, [r7, #20]
 8046370:	212c      	movs	r1, #44	; 0x2c
 8046372:	fb01 f303 	mul.w	r3, r1, r3
 8046376:	4413      	add	r3, r2
 8046378:	3361      	adds	r3, #97	; 0x61
 804637a:	2201      	movs	r2, #1
 804637c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 804637e:	687b      	ldr	r3, [r7, #4]
 8046380:	681b      	ldr	r3, [r3, #0]
 8046382:	697a      	ldr	r2, [r7, #20]
 8046384:	b2d2      	uxtb	r2, r2
 8046386:	4611      	mov	r1, r2
 8046388:	4618      	mov	r0, r3
 804638a:	f006 f8ec 	bl	804c566 <USB_HC_Halt>
}
 804638e:	e28c      	b.n	80468aa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8046390:	697b      	ldr	r3, [r7, #20]
 8046392:	015a      	lsls	r2, r3, #5
 8046394:	69bb      	ldr	r3, [r7, #24]
 8046396:	4413      	add	r3, r2
 8046398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804639c:	689b      	ldr	r3, [r3, #8]
 804639e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80463a2:	2b40      	cmp	r3, #64	; 0x40
 80463a4:	d12c      	bne.n	8046400 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80463a6:	687a      	ldr	r2, [r7, #4]
 80463a8:	697b      	ldr	r3, [r7, #20]
 80463aa:	212c      	movs	r1, #44	; 0x2c
 80463ac:	fb01 f303 	mul.w	r3, r1, r3
 80463b0:	4413      	add	r3, r2
 80463b2:	3361      	adds	r3, #97	; 0x61
 80463b4:	2204      	movs	r2, #4
 80463b6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80463b8:	687a      	ldr	r2, [r7, #4]
 80463ba:	697b      	ldr	r3, [r7, #20]
 80463bc:	212c      	movs	r1, #44	; 0x2c
 80463be:	fb01 f303 	mul.w	r3, r1, r3
 80463c2:	4413      	add	r3, r2
 80463c4:	333d      	adds	r3, #61	; 0x3d
 80463c6:	2201      	movs	r2, #1
 80463c8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80463ca:	687a      	ldr	r2, [r7, #4]
 80463cc:	697b      	ldr	r3, [r7, #20]
 80463ce:	212c      	movs	r1, #44	; 0x2c
 80463d0:	fb01 f303 	mul.w	r3, r1, r3
 80463d4:	4413      	add	r3, r2
 80463d6:	335c      	adds	r3, #92	; 0x5c
 80463d8:	2200      	movs	r2, #0
 80463da:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80463dc:	687b      	ldr	r3, [r7, #4]
 80463de:	681b      	ldr	r3, [r3, #0]
 80463e0:	697a      	ldr	r2, [r7, #20]
 80463e2:	b2d2      	uxtb	r2, r2
 80463e4:	4611      	mov	r1, r2
 80463e6:	4618      	mov	r0, r3
 80463e8:	f006 f8bd 	bl	804c566 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80463ec:	697b      	ldr	r3, [r7, #20]
 80463ee:	015a      	lsls	r2, r3, #5
 80463f0:	69bb      	ldr	r3, [r7, #24]
 80463f2:	4413      	add	r3, r2
 80463f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80463f8:	461a      	mov	r2, r3
 80463fa:	2340      	movs	r3, #64	; 0x40
 80463fc:	6093      	str	r3, [r2, #8]
}
 80463fe:	e254      	b.n	80468aa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8046400:	697b      	ldr	r3, [r7, #20]
 8046402:	015a      	lsls	r2, r3, #5
 8046404:	69bb      	ldr	r3, [r7, #24]
 8046406:	4413      	add	r3, r2
 8046408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804640c:	689b      	ldr	r3, [r3, #8]
 804640e:	f003 0308 	and.w	r3, r3, #8
 8046412:	2b08      	cmp	r3, #8
 8046414:	d11a      	bne.n	804644c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8046416:	697b      	ldr	r3, [r7, #20]
 8046418:	015a      	lsls	r2, r3, #5
 804641a:	69bb      	ldr	r3, [r7, #24]
 804641c:	4413      	add	r3, r2
 804641e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046422:	461a      	mov	r2, r3
 8046424:	2308      	movs	r3, #8
 8046426:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8046428:	687a      	ldr	r2, [r7, #4]
 804642a:	697b      	ldr	r3, [r7, #20]
 804642c:	212c      	movs	r1, #44	; 0x2c
 804642e:	fb01 f303 	mul.w	r3, r1, r3
 8046432:	4413      	add	r3, r2
 8046434:	3361      	adds	r3, #97	; 0x61
 8046436:	2205      	movs	r2, #5
 8046438:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 804643a:	687b      	ldr	r3, [r7, #4]
 804643c:	681b      	ldr	r3, [r3, #0]
 804643e:	697a      	ldr	r2, [r7, #20]
 8046440:	b2d2      	uxtb	r2, r2
 8046442:	4611      	mov	r1, r2
 8046444:	4618      	mov	r0, r3
 8046446:	f006 f88e 	bl	804c566 <USB_HC_Halt>
}
 804644a:	e22e      	b.n	80468aa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 804644c:	697b      	ldr	r3, [r7, #20]
 804644e:	015a      	lsls	r2, r3, #5
 8046450:	69bb      	ldr	r3, [r7, #24]
 8046452:	4413      	add	r3, r2
 8046454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046458:	689b      	ldr	r3, [r3, #8]
 804645a:	f003 0310 	and.w	r3, r3, #16
 804645e:	2b10      	cmp	r3, #16
 8046460:	d140      	bne.n	80464e4 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8046462:	687a      	ldr	r2, [r7, #4]
 8046464:	697b      	ldr	r3, [r7, #20]
 8046466:	212c      	movs	r1, #44	; 0x2c
 8046468:	fb01 f303 	mul.w	r3, r1, r3
 804646c:	4413      	add	r3, r2
 804646e:	335c      	adds	r3, #92	; 0x5c
 8046470:	2200      	movs	r2, #0
 8046472:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8046474:	687a      	ldr	r2, [r7, #4]
 8046476:	697b      	ldr	r3, [r7, #20]
 8046478:	212c      	movs	r1, #44	; 0x2c
 804647a:	fb01 f303 	mul.w	r3, r1, r3
 804647e:	4413      	add	r3, r2
 8046480:	3361      	adds	r3, #97	; 0x61
 8046482:	2203      	movs	r2, #3
 8046484:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8046486:	687a      	ldr	r2, [r7, #4]
 8046488:	697b      	ldr	r3, [r7, #20]
 804648a:	212c      	movs	r1, #44	; 0x2c
 804648c:	fb01 f303 	mul.w	r3, r1, r3
 8046490:	4413      	add	r3, r2
 8046492:	333d      	adds	r3, #61	; 0x3d
 8046494:	781b      	ldrb	r3, [r3, #0]
 8046496:	2b00      	cmp	r3, #0
 8046498:	d112      	bne.n	80464c0 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 804649a:	687a      	ldr	r2, [r7, #4]
 804649c:	697b      	ldr	r3, [r7, #20]
 804649e:	212c      	movs	r1, #44	; 0x2c
 80464a0:	fb01 f303 	mul.w	r3, r1, r3
 80464a4:	4413      	add	r3, r2
 80464a6:	333c      	adds	r3, #60	; 0x3c
 80464a8:	781b      	ldrb	r3, [r3, #0]
 80464aa:	2b00      	cmp	r3, #0
 80464ac:	d108      	bne.n	80464c0 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80464ae:	687a      	ldr	r2, [r7, #4]
 80464b0:	697b      	ldr	r3, [r7, #20]
 80464b2:	212c      	movs	r1, #44	; 0x2c
 80464b4:	fb01 f303 	mul.w	r3, r1, r3
 80464b8:	4413      	add	r3, r2
 80464ba:	333d      	adds	r3, #61	; 0x3d
 80464bc:	2201      	movs	r2, #1
 80464be:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80464c0:	687b      	ldr	r3, [r7, #4]
 80464c2:	681b      	ldr	r3, [r3, #0]
 80464c4:	697a      	ldr	r2, [r7, #20]
 80464c6:	b2d2      	uxtb	r2, r2
 80464c8:	4611      	mov	r1, r2
 80464ca:	4618      	mov	r0, r3
 80464cc:	f006 f84b 	bl	804c566 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80464d0:	697b      	ldr	r3, [r7, #20]
 80464d2:	015a      	lsls	r2, r3, #5
 80464d4:	69bb      	ldr	r3, [r7, #24]
 80464d6:	4413      	add	r3, r2
 80464d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80464dc:	461a      	mov	r2, r3
 80464de:	2310      	movs	r3, #16
 80464e0:	6093      	str	r3, [r2, #8]
}
 80464e2:	e1e2      	b.n	80468aa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80464e4:	697b      	ldr	r3, [r7, #20]
 80464e6:	015a      	lsls	r2, r3, #5
 80464e8:	69bb      	ldr	r3, [r7, #24]
 80464ea:	4413      	add	r3, r2
 80464ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80464f0:	689b      	ldr	r3, [r3, #8]
 80464f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80464f6:	2b80      	cmp	r3, #128	; 0x80
 80464f8:	d164      	bne.n	80465c4 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80464fa:	687b      	ldr	r3, [r7, #4]
 80464fc:	691b      	ldr	r3, [r3, #16]
 80464fe:	2b00      	cmp	r3, #0
 8046500:	d111      	bne.n	8046526 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8046502:	687a      	ldr	r2, [r7, #4]
 8046504:	697b      	ldr	r3, [r7, #20]
 8046506:	212c      	movs	r1, #44	; 0x2c
 8046508:	fb01 f303 	mul.w	r3, r1, r3
 804650c:	4413      	add	r3, r2
 804650e:	3361      	adds	r3, #97	; 0x61
 8046510:	2206      	movs	r2, #6
 8046512:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8046514:	687b      	ldr	r3, [r7, #4]
 8046516:	681b      	ldr	r3, [r3, #0]
 8046518:	697a      	ldr	r2, [r7, #20]
 804651a:	b2d2      	uxtb	r2, r2
 804651c:	4611      	mov	r1, r2
 804651e:	4618      	mov	r0, r3
 8046520:	f006 f821 	bl	804c566 <USB_HC_Halt>
 8046524:	e044      	b.n	80465b0 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8046526:	687a      	ldr	r2, [r7, #4]
 8046528:	697b      	ldr	r3, [r7, #20]
 804652a:	212c      	movs	r1, #44	; 0x2c
 804652c:	fb01 f303 	mul.w	r3, r1, r3
 8046530:	4413      	add	r3, r2
 8046532:	335c      	adds	r3, #92	; 0x5c
 8046534:	681b      	ldr	r3, [r3, #0]
 8046536:	1c5a      	adds	r2, r3, #1
 8046538:	6879      	ldr	r1, [r7, #4]
 804653a:	697b      	ldr	r3, [r7, #20]
 804653c:	202c      	movs	r0, #44	; 0x2c
 804653e:	fb00 f303 	mul.w	r3, r0, r3
 8046542:	440b      	add	r3, r1
 8046544:	335c      	adds	r3, #92	; 0x5c
 8046546:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8046548:	687a      	ldr	r2, [r7, #4]
 804654a:	697b      	ldr	r3, [r7, #20]
 804654c:	212c      	movs	r1, #44	; 0x2c
 804654e:	fb01 f303 	mul.w	r3, r1, r3
 8046552:	4413      	add	r3, r2
 8046554:	335c      	adds	r3, #92	; 0x5c
 8046556:	681b      	ldr	r3, [r3, #0]
 8046558:	2b02      	cmp	r3, #2
 804655a:	d920      	bls.n	804659e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 804655c:	687a      	ldr	r2, [r7, #4]
 804655e:	697b      	ldr	r3, [r7, #20]
 8046560:	212c      	movs	r1, #44	; 0x2c
 8046562:	fb01 f303 	mul.w	r3, r1, r3
 8046566:	4413      	add	r3, r2
 8046568:	335c      	adds	r3, #92	; 0x5c
 804656a:	2200      	movs	r2, #0
 804656c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 804656e:	687a      	ldr	r2, [r7, #4]
 8046570:	697b      	ldr	r3, [r7, #20]
 8046572:	212c      	movs	r1, #44	; 0x2c
 8046574:	fb01 f303 	mul.w	r3, r1, r3
 8046578:	4413      	add	r3, r2
 804657a:	3360      	adds	r3, #96	; 0x60
 804657c:	2204      	movs	r2, #4
 804657e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8046580:	697b      	ldr	r3, [r7, #20]
 8046582:	b2d9      	uxtb	r1, r3
 8046584:	687a      	ldr	r2, [r7, #4]
 8046586:	697b      	ldr	r3, [r7, #20]
 8046588:	202c      	movs	r0, #44	; 0x2c
 804658a:	fb00 f303 	mul.w	r3, r0, r3
 804658e:	4413      	add	r3, r2
 8046590:	3360      	adds	r3, #96	; 0x60
 8046592:	781b      	ldrb	r3, [r3, #0]
 8046594:	461a      	mov	r2, r3
 8046596:	6878      	ldr	r0, [r7, #4]
 8046598:	f013 fa24 	bl	80599e4 <HAL_HCD_HC_NotifyURBChange_Callback>
 804659c:	e008      	b.n	80465b0 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 804659e:	687a      	ldr	r2, [r7, #4]
 80465a0:	697b      	ldr	r3, [r7, #20]
 80465a2:	212c      	movs	r1, #44	; 0x2c
 80465a4:	fb01 f303 	mul.w	r3, r1, r3
 80465a8:	4413      	add	r3, r2
 80465aa:	3360      	adds	r3, #96	; 0x60
 80465ac:	2202      	movs	r2, #2
 80465ae:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80465b0:	697b      	ldr	r3, [r7, #20]
 80465b2:	015a      	lsls	r2, r3, #5
 80465b4:	69bb      	ldr	r3, [r7, #24]
 80465b6:	4413      	add	r3, r2
 80465b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80465bc:	461a      	mov	r2, r3
 80465be:	2380      	movs	r3, #128	; 0x80
 80465c0:	6093      	str	r3, [r2, #8]
}
 80465c2:	e172      	b.n	80468aa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80465c4:	697b      	ldr	r3, [r7, #20]
 80465c6:	015a      	lsls	r2, r3, #5
 80465c8:	69bb      	ldr	r3, [r7, #24]
 80465ca:	4413      	add	r3, r2
 80465cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80465d0:	689b      	ldr	r3, [r3, #8]
 80465d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80465d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80465da:	d11b      	bne.n	8046614 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80465dc:	687a      	ldr	r2, [r7, #4]
 80465de:	697b      	ldr	r3, [r7, #20]
 80465e0:	212c      	movs	r1, #44	; 0x2c
 80465e2:	fb01 f303 	mul.w	r3, r1, r3
 80465e6:	4413      	add	r3, r2
 80465e8:	3361      	adds	r3, #97	; 0x61
 80465ea:	2208      	movs	r2, #8
 80465ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80465ee:	687b      	ldr	r3, [r7, #4]
 80465f0:	681b      	ldr	r3, [r3, #0]
 80465f2:	697a      	ldr	r2, [r7, #20]
 80465f4:	b2d2      	uxtb	r2, r2
 80465f6:	4611      	mov	r1, r2
 80465f8:	4618      	mov	r0, r3
 80465fa:	f005 ffb4 	bl	804c566 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80465fe:	697b      	ldr	r3, [r7, #20]
 8046600:	015a      	lsls	r2, r3, #5
 8046602:	69bb      	ldr	r3, [r7, #24]
 8046604:	4413      	add	r3, r2
 8046606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804660a:	461a      	mov	r2, r3
 804660c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8046610:	6093      	str	r3, [r2, #8]
}
 8046612:	e14a      	b.n	80468aa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8046614:	697b      	ldr	r3, [r7, #20]
 8046616:	015a      	lsls	r2, r3, #5
 8046618:	69bb      	ldr	r3, [r7, #24]
 804661a:	4413      	add	r3, r2
 804661c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046620:	689b      	ldr	r3, [r3, #8]
 8046622:	f003 0302 	and.w	r3, r3, #2
 8046626:	2b02      	cmp	r3, #2
 8046628:	f040 813f 	bne.w	80468aa <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 804662c:	687a      	ldr	r2, [r7, #4]
 804662e:	697b      	ldr	r3, [r7, #20]
 8046630:	212c      	movs	r1, #44	; 0x2c
 8046632:	fb01 f303 	mul.w	r3, r1, r3
 8046636:	4413      	add	r3, r2
 8046638:	3361      	adds	r3, #97	; 0x61
 804663a:	781b      	ldrb	r3, [r3, #0]
 804663c:	2b01      	cmp	r3, #1
 804663e:	d17d      	bne.n	804673c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8046640:	687a      	ldr	r2, [r7, #4]
 8046642:	697b      	ldr	r3, [r7, #20]
 8046644:	212c      	movs	r1, #44	; 0x2c
 8046646:	fb01 f303 	mul.w	r3, r1, r3
 804664a:	4413      	add	r3, r2
 804664c:	3360      	adds	r3, #96	; 0x60
 804664e:	2201      	movs	r2, #1
 8046650:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8046652:	687a      	ldr	r2, [r7, #4]
 8046654:	697b      	ldr	r3, [r7, #20]
 8046656:	212c      	movs	r1, #44	; 0x2c
 8046658:	fb01 f303 	mul.w	r3, r1, r3
 804665c:	4413      	add	r3, r2
 804665e:	333f      	adds	r3, #63	; 0x3f
 8046660:	781b      	ldrb	r3, [r3, #0]
 8046662:	2b02      	cmp	r3, #2
 8046664:	d00a      	beq.n	804667c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8046666:	687a      	ldr	r2, [r7, #4]
 8046668:	697b      	ldr	r3, [r7, #20]
 804666a:	212c      	movs	r1, #44	; 0x2c
 804666c:	fb01 f303 	mul.w	r3, r1, r3
 8046670:	4413      	add	r3, r2
 8046672:	333f      	adds	r3, #63	; 0x3f
 8046674:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8046676:	2b03      	cmp	r3, #3
 8046678:	f040 8100 	bne.w	804687c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 804667c:	687b      	ldr	r3, [r7, #4]
 804667e:	691b      	ldr	r3, [r3, #16]
 8046680:	2b00      	cmp	r3, #0
 8046682:	d113      	bne.n	80466ac <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8046684:	687a      	ldr	r2, [r7, #4]
 8046686:	697b      	ldr	r3, [r7, #20]
 8046688:	212c      	movs	r1, #44	; 0x2c
 804668a:	fb01 f303 	mul.w	r3, r1, r3
 804668e:	4413      	add	r3, r2
 8046690:	3355      	adds	r3, #85	; 0x55
 8046692:	781b      	ldrb	r3, [r3, #0]
 8046694:	f083 0301 	eor.w	r3, r3, #1
 8046698:	b2d8      	uxtb	r0, r3
 804669a:	687a      	ldr	r2, [r7, #4]
 804669c:	697b      	ldr	r3, [r7, #20]
 804669e:	212c      	movs	r1, #44	; 0x2c
 80466a0:	fb01 f303 	mul.w	r3, r1, r3
 80466a4:	4413      	add	r3, r2
 80466a6:	3355      	adds	r3, #85	; 0x55
 80466a8:	4602      	mov	r2, r0
 80466aa:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80466ac:	687b      	ldr	r3, [r7, #4]
 80466ae:	691b      	ldr	r3, [r3, #16]
 80466b0:	2b01      	cmp	r3, #1
 80466b2:	f040 80e3 	bne.w	804687c <HCD_HC_OUT_IRQHandler+0x69c>
 80466b6:	687a      	ldr	r2, [r7, #4]
 80466b8:	697b      	ldr	r3, [r7, #20]
 80466ba:	212c      	movs	r1, #44	; 0x2c
 80466bc:	fb01 f303 	mul.w	r3, r1, r3
 80466c0:	4413      	add	r3, r2
 80466c2:	334c      	adds	r3, #76	; 0x4c
 80466c4:	681b      	ldr	r3, [r3, #0]
 80466c6:	2b00      	cmp	r3, #0
 80466c8:	f000 80d8 	beq.w	804687c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80466cc:	687a      	ldr	r2, [r7, #4]
 80466ce:	697b      	ldr	r3, [r7, #20]
 80466d0:	212c      	movs	r1, #44	; 0x2c
 80466d2:	fb01 f303 	mul.w	r3, r1, r3
 80466d6:	4413      	add	r3, r2
 80466d8:	334c      	adds	r3, #76	; 0x4c
 80466da:	681b      	ldr	r3, [r3, #0]
 80466dc:	6879      	ldr	r1, [r7, #4]
 80466de:	697a      	ldr	r2, [r7, #20]
 80466e0:	202c      	movs	r0, #44	; 0x2c
 80466e2:	fb00 f202 	mul.w	r2, r0, r2
 80466e6:	440a      	add	r2, r1
 80466e8:	3240      	adds	r2, #64	; 0x40
 80466ea:	8812      	ldrh	r2, [r2, #0]
 80466ec:	4413      	add	r3, r2
 80466ee:	3b01      	subs	r3, #1
 80466f0:	6879      	ldr	r1, [r7, #4]
 80466f2:	697a      	ldr	r2, [r7, #20]
 80466f4:	202c      	movs	r0, #44	; 0x2c
 80466f6:	fb00 f202 	mul.w	r2, r0, r2
 80466fa:	440a      	add	r2, r1
 80466fc:	3240      	adds	r2, #64	; 0x40
 80466fe:	8812      	ldrh	r2, [r2, #0]
 8046700:	fbb3 f3f2 	udiv	r3, r3, r2
 8046704:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8046706:	68fb      	ldr	r3, [r7, #12]
 8046708:	f003 0301 	and.w	r3, r3, #1
 804670c:	2b00      	cmp	r3, #0
 804670e:	f000 80b5 	beq.w	804687c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8046712:	687a      	ldr	r2, [r7, #4]
 8046714:	697b      	ldr	r3, [r7, #20]
 8046716:	212c      	movs	r1, #44	; 0x2c
 8046718:	fb01 f303 	mul.w	r3, r1, r3
 804671c:	4413      	add	r3, r2
 804671e:	3355      	adds	r3, #85	; 0x55
 8046720:	781b      	ldrb	r3, [r3, #0]
 8046722:	f083 0301 	eor.w	r3, r3, #1
 8046726:	b2d8      	uxtb	r0, r3
 8046728:	687a      	ldr	r2, [r7, #4]
 804672a:	697b      	ldr	r3, [r7, #20]
 804672c:	212c      	movs	r1, #44	; 0x2c
 804672e:	fb01 f303 	mul.w	r3, r1, r3
 8046732:	4413      	add	r3, r2
 8046734:	3355      	adds	r3, #85	; 0x55
 8046736:	4602      	mov	r2, r0
 8046738:	701a      	strb	r2, [r3, #0]
 804673a:	e09f      	b.n	804687c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 804673c:	687a      	ldr	r2, [r7, #4]
 804673e:	697b      	ldr	r3, [r7, #20]
 8046740:	212c      	movs	r1, #44	; 0x2c
 8046742:	fb01 f303 	mul.w	r3, r1, r3
 8046746:	4413      	add	r3, r2
 8046748:	3361      	adds	r3, #97	; 0x61
 804674a:	781b      	ldrb	r3, [r3, #0]
 804674c:	2b03      	cmp	r3, #3
 804674e:	d109      	bne.n	8046764 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8046750:	687a      	ldr	r2, [r7, #4]
 8046752:	697b      	ldr	r3, [r7, #20]
 8046754:	212c      	movs	r1, #44	; 0x2c
 8046756:	fb01 f303 	mul.w	r3, r1, r3
 804675a:	4413      	add	r3, r2
 804675c:	3360      	adds	r3, #96	; 0x60
 804675e:	2202      	movs	r2, #2
 8046760:	701a      	strb	r2, [r3, #0]
 8046762:	e08b      	b.n	804687c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8046764:	687a      	ldr	r2, [r7, #4]
 8046766:	697b      	ldr	r3, [r7, #20]
 8046768:	212c      	movs	r1, #44	; 0x2c
 804676a:	fb01 f303 	mul.w	r3, r1, r3
 804676e:	4413      	add	r3, r2
 8046770:	3361      	adds	r3, #97	; 0x61
 8046772:	781b      	ldrb	r3, [r3, #0]
 8046774:	2b04      	cmp	r3, #4
 8046776:	d109      	bne.n	804678c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8046778:	687a      	ldr	r2, [r7, #4]
 804677a:	697b      	ldr	r3, [r7, #20]
 804677c:	212c      	movs	r1, #44	; 0x2c
 804677e:	fb01 f303 	mul.w	r3, r1, r3
 8046782:	4413      	add	r3, r2
 8046784:	3360      	adds	r3, #96	; 0x60
 8046786:	2202      	movs	r2, #2
 8046788:	701a      	strb	r2, [r3, #0]
 804678a:	e077      	b.n	804687c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 804678c:	687a      	ldr	r2, [r7, #4]
 804678e:	697b      	ldr	r3, [r7, #20]
 8046790:	212c      	movs	r1, #44	; 0x2c
 8046792:	fb01 f303 	mul.w	r3, r1, r3
 8046796:	4413      	add	r3, r2
 8046798:	3361      	adds	r3, #97	; 0x61
 804679a:	781b      	ldrb	r3, [r3, #0]
 804679c:	2b05      	cmp	r3, #5
 804679e:	d109      	bne.n	80467b4 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80467a0:	687a      	ldr	r2, [r7, #4]
 80467a2:	697b      	ldr	r3, [r7, #20]
 80467a4:	212c      	movs	r1, #44	; 0x2c
 80467a6:	fb01 f303 	mul.w	r3, r1, r3
 80467aa:	4413      	add	r3, r2
 80467ac:	3360      	adds	r3, #96	; 0x60
 80467ae:	2205      	movs	r2, #5
 80467b0:	701a      	strb	r2, [r3, #0]
 80467b2:	e063      	b.n	804687c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80467b4:	687a      	ldr	r2, [r7, #4]
 80467b6:	697b      	ldr	r3, [r7, #20]
 80467b8:	212c      	movs	r1, #44	; 0x2c
 80467ba:	fb01 f303 	mul.w	r3, r1, r3
 80467be:	4413      	add	r3, r2
 80467c0:	3361      	adds	r3, #97	; 0x61
 80467c2:	781b      	ldrb	r3, [r3, #0]
 80467c4:	2b06      	cmp	r3, #6
 80467c6:	d009      	beq.n	80467dc <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80467c8:	687a      	ldr	r2, [r7, #4]
 80467ca:	697b      	ldr	r3, [r7, #20]
 80467cc:	212c      	movs	r1, #44	; 0x2c
 80467ce:	fb01 f303 	mul.w	r3, r1, r3
 80467d2:	4413      	add	r3, r2
 80467d4:	3361      	adds	r3, #97	; 0x61
 80467d6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80467d8:	2b08      	cmp	r3, #8
 80467da:	d14f      	bne.n	804687c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80467dc:	687a      	ldr	r2, [r7, #4]
 80467de:	697b      	ldr	r3, [r7, #20]
 80467e0:	212c      	movs	r1, #44	; 0x2c
 80467e2:	fb01 f303 	mul.w	r3, r1, r3
 80467e6:	4413      	add	r3, r2
 80467e8:	335c      	adds	r3, #92	; 0x5c
 80467ea:	681b      	ldr	r3, [r3, #0]
 80467ec:	1c5a      	adds	r2, r3, #1
 80467ee:	6879      	ldr	r1, [r7, #4]
 80467f0:	697b      	ldr	r3, [r7, #20]
 80467f2:	202c      	movs	r0, #44	; 0x2c
 80467f4:	fb00 f303 	mul.w	r3, r0, r3
 80467f8:	440b      	add	r3, r1
 80467fa:	335c      	adds	r3, #92	; 0x5c
 80467fc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80467fe:	687a      	ldr	r2, [r7, #4]
 8046800:	697b      	ldr	r3, [r7, #20]
 8046802:	212c      	movs	r1, #44	; 0x2c
 8046804:	fb01 f303 	mul.w	r3, r1, r3
 8046808:	4413      	add	r3, r2
 804680a:	335c      	adds	r3, #92	; 0x5c
 804680c:	681b      	ldr	r3, [r3, #0]
 804680e:	2b02      	cmp	r3, #2
 8046810:	d912      	bls.n	8046838 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8046812:	687a      	ldr	r2, [r7, #4]
 8046814:	697b      	ldr	r3, [r7, #20]
 8046816:	212c      	movs	r1, #44	; 0x2c
 8046818:	fb01 f303 	mul.w	r3, r1, r3
 804681c:	4413      	add	r3, r2
 804681e:	335c      	adds	r3, #92	; 0x5c
 8046820:	2200      	movs	r2, #0
 8046822:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8046824:	687a      	ldr	r2, [r7, #4]
 8046826:	697b      	ldr	r3, [r7, #20]
 8046828:	212c      	movs	r1, #44	; 0x2c
 804682a:	fb01 f303 	mul.w	r3, r1, r3
 804682e:	4413      	add	r3, r2
 8046830:	3360      	adds	r3, #96	; 0x60
 8046832:	2204      	movs	r2, #4
 8046834:	701a      	strb	r2, [r3, #0]
 8046836:	e021      	b.n	804687c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8046838:	687a      	ldr	r2, [r7, #4]
 804683a:	697b      	ldr	r3, [r7, #20]
 804683c:	212c      	movs	r1, #44	; 0x2c
 804683e:	fb01 f303 	mul.w	r3, r1, r3
 8046842:	4413      	add	r3, r2
 8046844:	3360      	adds	r3, #96	; 0x60
 8046846:	2202      	movs	r2, #2
 8046848:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 804684a:	697b      	ldr	r3, [r7, #20]
 804684c:	015a      	lsls	r2, r3, #5
 804684e:	69bb      	ldr	r3, [r7, #24]
 8046850:	4413      	add	r3, r2
 8046852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046856:	681b      	ldr	r3, [r3, #0]
 8046858:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 804685a:	693b      	ldr	r3, [r7, #16]
 804685c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8046860:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8046862:	693b      	ldr	r3, [r7, #16]
 8046864:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8046868:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 804686a:	697b      	ldr	r3, [r7, #20]
 804686c:	015a      	lsls	r2, r3, #5
 804686e:	69bb      	ldr	r3, [r7, #24]
 8046870:	4413      	add	r3, r2
 8046872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046876:	461a      	mov	r2, r3
 8046878:	693b      	ldr	r3, [r7, #16]
 804687a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 804687c:	697b      	ldr	r3, [r7, #20]
 804687e:	015a      	lsls	r2, r3, #5
 8046880:	69bb      	ldr	r3, [r7, #24]
 8046882:	4413      	add	r3, r2
 8046884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046888:	461a      	mov	r2, r3
 804688a:	2302      	movs	r3, #2
 804688c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 804688e:	697b      	ldr	r3, [r7, #20]
 8046890:	b2d9      	uxtb	r1, r3
 8046892:	687a      	ldr	r2, [r7, #4]
 8046894:	697b      	ldr	r3, [r7, #20]
 8046896:	202c      	movs	r0, #44	; 0x2c
 8046898:	fb00 f303 	mul.w	r3, r0, r3
 804689c:	4413      	add	r3, r2
 804689e:	3360      	adds	r3, #96	; 0x60
 80468a0:	781b      	ldrb	r3, [r3, #0]
 80468a2:	461a      	mov	r2, r3
 80468a4:	6878      	ldr	r0, [r7, #4]
 80468a6:	f013 f89d 	bl	80599e4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80468aa:	bf00      	nop
 80468ac:	3720      	adds	r7, #32
 80468ae:	46bd      	mov	sp, r7
 80468b0:	bd80      	pop	{r7, pc}

080468b2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80468b2:	b580      	push	{r7, lr}
 80468b4:	b08a      	sub	sp, #40	; 0x28
 80468b6:	af00      	add	r7, sp, #0
 80468b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80468ba:	687b      	ldr	r3, [r7, #4]
 80468bc:	681b      	ldr	r3, [r3, #0]
 80468be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80468c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80468c2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80468c4:	687b      	ldr	r3, [r7, #4]
 80468c6:	681b      	ldr	r3, [r3, #0]
 80468c8:	6a1b      	ldr	r3, [r3, #32]
 80468ca:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80468cc:	69fb      	ldr	r3, [r7, #28]
 80468ce:	f003 030f 	and.w	r3, r3, #15
 80468d2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80468d4:	69fb      	ldr	r3, [r7, #28]
 80468d6:	0c5b      	lsrs	r3, r3, #17
 80468d8:	f003 030f 	and.w	r3, r3, #15
 80468dc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80468de:	69fb      	ldr	r3, [r7, #28]
 80468e0:	091b      	lsrs	r3, r3, #4
 80468e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80468e6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80468e8:	697b      	ldr	r3, [r7, #20]
 80468ea:	2b02      	cmp	r3, #2
 80468ec:	d004      	beq.n	80468f8 <HCD_RXQLVL_IRQHandler+0x46>
 80468ee:	697b      	ldr	r3, [r7, #20]
 80468f0:	2b05      	cmp	r3, #5
 80468f2:	f000 80a9 	beq.w	8046a48 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80468f6:	e0aa      	b.n	8046a4e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80468f8:	693b      	ldr	r3, [r7, #16]
 80468fa:	2b00      	cmp	r3, #0
 80468fc:	f000 80a6 	beq.w	8046a4c <HCD_RXQLVL_IRQHandler+0x19a>
 8046900:	687a      	ldr	r2, [r7, #4]
 8046902:	69bb      	ldr	r3, [r7, #24]
 8046904:	212c      	movs	r1, #44	; 0x2c
 8046906:	fb01 f303 	mul.w	r3, r1, r3
 804690a:	4413      	add	r3, r2
 804690c:	3344      	adds	r3, #68	; 0x44
 804690e:	681b      	ldr	r3, [r3, #0]
 8046910:	2b00      	cmp	r3, #0
 8046912:	f000 809b 	beq.w	8046a4c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8046916:	687a      	ldr	r2, [r7, #4]
 8046918:	69bb      	ldr	r3, [r7, #24]
 804691a:	212c      	movs	r1, #44	; 0x2c
 804691c:	fb01 f303 	mul.w	r3, r1, r3
 8046920:	4413      	add	r3, r2
 8046922:	3350      	adds	r3, #80	; 0x50
 8046924:	681a      	ldr	r2, [r3, #0]
 8046926:	693b      	ldr	r3, [r7, #16]
 8046928:	441a      	add	r2, r3
 804692a:	6879      	ldr	r1, [r7, #4]
 804692c:	69bb      	ldr	r3, [r7, #24]
 804692e:	202c      	movs	r0, #44	; 0x2c
 8046930:	fb00 f303 	mul.w	r3, r0, r3
 8046934:	440b      	add	r3, r1
 8046936:	334c      	adds	r3, #76	; 0x4c
 8046938:	681b      	ldr	r3, [r3, #0]
 804693a:	429a      	cmp	r2, r3
 804693c:	d87a      	bhi.n	8046a34 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 804693e:	687b      	ldr	r3, [r7, #4]
 8046940:	6818      	ldr	r0, [r3, #0]
 8046942:	687a      	ldr	r2, [r7, #4]
 8046944:	69bb      	ldr	r3, [r7, #24]
 8046946:	212c      	movs	r1, #44	; 0x2c
 8046948:	fb01 f303 	mul.w	r3, r1, r3
 804694c:	4413      	add	r3, r2
 804694e:	3344      	adds	r3, #68	; 0x44
 8046950:	681b      	ldr	r3, [r3, #0]
 8046952:	693a      	ldr	r2, [r7, #16]
 8046954:	b292      	uxth	r2, r2
 8046956:	4619      	mov	r1, r3
 8046958:	f005 f962 	bl	804bc20 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 804695c:	687a      	ldr	r2, [r7, #4]
 804695e:	69bb      	ldr	r3, [r7, #24]
 8046960:	212c      	movs	r1, #44	; 0x2c
 8046962:	fb01 f303 	mul.w	r3, r1, r3
 8046966:	4413      	add	r3, r2
 8046968:	3344      	adds	r3, #68	; 0x44
 804696a:	681a      	ldr	r2, [r3, #0]
 804696c:	693b      	ldr	r3, [r7, #16]
 804696e:	441a      	add	r2, r3
 8046970:	6879      	ldr	r1, [r7, #4]
 8046972:	69bb      	ldr	r3, [r7, #24]
 8046974:	202c      	movs	r0, #44	; 0x2c
 8046976:	fb00 f303 	mul.w	r3, r0, r3
 804697a:	440b      	add	r3, r1
 804697c:	3344      	adds	r3, #68	; 0x44
 804697e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8046980:	687a      	ldr	r2, [r7, #4]
 8046982:	69bb      	ldr	r3, [r7, #24]
 8046984:	212c      	movs	r1, #44	; 0x2c
 8046986:	fb01 f303 	mul.w	r3, r1, r3
 804698a:	4413      	add	r3, r2
 804698c:	3350      	adds	r3, #80	; 0x50
 804698e:	681a      	ldr	r2, [r3, #0]
 8046990:	693b      	ldr	r3, [r7, #16]
 8046992:	441a      	add	r2, r3
 8046994:	6879      	ldr	r1, [r7, #4]
 8046996:	69bb      	ldr	r3, [r7, #24]
 8046998:	202c      	movs	r0, #44	; 0x2c
 804699a:	fb00 f303 	mul.w	r3, r0, r3
 804699e:	440b      	add	r3, r1
 80469a0:	3350      	adds	r3, #80	; 0x50
 80469a2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80469a4:	69bb      	ldr	r3, [r7, #24]
 80469a6:	015a      	lsls	r2, r3, #5
 80469a8:	6a3b      	ldr	r3, [r7, #32]
 80469aa:	4413      	add	r3, r2
 80469ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80469b0:	691b      	ldr	r3, [r3, #16]
 80469b2:	0cdb      	lsrs	r3, r3, #19
 80469b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80469b8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80469ba:	687a      	ldr	r2, [r7, #4]
 80469bc:	69bb      	ldr	r3, [r7, #24]
 80469be:	212c      	movs	r1, #44	; 0x2c
 80469c0:	fb01 f303 	mul.w	r3, r1, r3
 80469c4:	4413      	add	r3, r2
 80469c6:	3340      	adds	r3, #64	; 0x40
 80469c8:	881b      	ldrh	r3, [r3, #0]
 80469ca:	461a      	mov	r2, r3
 80469cc:	693b      	ldr	r3, [r7, #16]
 80469ce:	4293      	cmp	r3, r2
 80469d0:	d13c      	bne.n	8046a4c <HCD_RXQLVL_IRQHandler+0x19a>
 80469d2:	68fb      	ldr	r3, [r7, #12]
 80469d4:	2b00      	cmp	r3, #0
 80469d6:	d039      	beq.n	8046a4c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80469d8:	69bb      	ldr	r3, [r7, #24]
 80469da:	015a      	lsls	r2, r3, #5
 80469dc:	6a3b      	ldr	r3, [r7, #32]
 80469de:	4413      	add	r3, r2
 80469e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80469e4:	681b      	ldr	r3, [r3, #0]
 80469e6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80469e8:	68bb      	ldr	r3, [r7, #8]
 80469ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80469ee:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80469f0:	68bb      	ldr	r3, [r7, #8]
 80469f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80469f6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80469f8:	69bb      	ldr	r3, [r7, #24]
 80469fa:	015a      	lsls	r2, r3, #5
 80469fc:	6a3b      	ldr	r3, [r7, #32]
 80469fe:	4413      	add	r3, r2
 8046a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046a04:	461a      	mov	r2, r3
 8046a06:	68bb      	ldr	r3, [r7, #8]
 8046a08:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8046a0a:	687a      	ldr	r2, [r7, #4]
 8046a0c:	69bb      	ldr	r3, [r7, #24]
 8046a0e:	212c      	movs	r1, #44	; 0x2c
 8046a10:	fb01 f303 	mul.w	r3, r1, r3
 8046a14:	4413      	add	r3, r2
 8046a16:	3354      	adds	r3, #84	; 0x54
 8046a18:	781b      	ldrb	r3, [r3, #0]
 8046a1a:	f083 0301 	eor.w	r3, r3, #1
 8046a1e:	b2d8      	uxtb	r0, r3
 8046a20:	687a      	ldr	r2, [r7, #4]
 8046a22:	69bb      	ldr	r3, [r7, #24]
 8046a24:	212c      	movs	r1, #44	; 0x2c
 8046a26:	fb01 f303 	mul.w	r3, r1, r3
 8046a2a:	4413      	add	r3, r2
 8046a2c:	3354      	adds	r3, #84	; 0x54
 8046a2e:	4602      	mov	r2, r0
 8046a30:	701a      	strb	r2, [r3, #0]
      break;
 8046a32:	e00b      	b.n	8046a4c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8046a34:	687a      	ldr	r2, [r7, #4]
 8046a36:	69bb      	ldr	r3, [r7, #24]
 8046a38:	212c      	movs	r1, #44	; 0x2c
 8046a3a:	fb01 f303 	mul.w	r3, r1, r3
 8046a3e:	4413      	add	r3, r2
 8046a40:	3360      	adds	r3, #96	; 0x60
 8046a42:	2204      	movs	r2, #4
 8046a44:	701a      	strb	r2, [r3, #0]
      break;
 8046a46:	e001      	b.n	8046a4c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8046a48:	bf00      	nop
 8046a4a:	e000      	b.n	8046a4e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8046a4c:	bf00      	nop
  }
}
 8046a4e:	bf00      	nop
 8046a50:	3728      	adds	r7, #40	; 0x28
 8046a52:	46bd      	mov	sp, r7
 8046a54:	bd80      	pop	{r7, pc}

08046a56 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8046a56:	b580      	push	{r7, lr}
 8046a58:	b086      	sub	sp, #24
 8046a5a:	af00      	add	r7, sp, #0
 8046a5c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8046a5e:	687b      	ldr	r3, [r7, #4]
 8046a60:	681b      	ldr	r3, [r3, #0]
 8046a62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8046a64:	697b      	ldr	r3, [r7, #20]
 8046a66:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8046a68:	693b      	ldr	r3, [r7, #16]
 8046a6a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8046a6e:	681b      	ldr	r3, [r3, #0]
 8046a70:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8046a72:	693b      	ldr	r3, [r7, #16]
 8046a74:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8046a78:	681b      	ldr	r3, [r3, #0]
 8046a7a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8046a7c:	68bb      	ldr	r3, [r7, #8]
 8046a7e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8046a82:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8046a84:	68fb      	ldr	r3, [r7, #12]
 8046a86:	f003 0302 	and.w	r3, r3, #2
 8046a8a:	2b02      	cmp	r3, #2
 8046a8c:	d10b      	bne.n	8046aa6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8046a8e:	68fb      	ldr	r3, [r7, #12]
 8046a90:	f003 0301 	and.w	r3, r3, #1
 8046a94:	2b01      	cmp	r3, #1
 8046a96:	d102      	bne.n	8046a9e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8046a98:	6878      	ldr	r0, [r7, #4]
 8046a9a:	f012 ff87 	bl	80599ac <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8046a9e:	68bb      	ldr	r3, [r7, #8]
 8046aa0:	f043 0302 	orr.w	r3, r3, #2
 8046aa4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8046aa6:	68fb      	ldr	r3, [r7, #12]
 8046aa8:	f003 0308 	and.w	r3, r3, #8
 8046aac:	2b08      	cmp	r3, #8
 8046aae:	d132      	bne.n	8046b16 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8046ab0:	68bb      	ldr	r3, [r7, #8]
 8046ab2:	f043 0308 	orr.w	r3, r3, #8
 8046ab6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8046ab8:	68fb      	ldr	r3, [r7, #12]
 8046aba:	f003 0304 	and.w	r3, r3, #4
 8046abe:	2b04      	cmp	r3, #4
 8046ac0:	d126      	bne.n	8046b10 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8046ac2:	687b      	ldr	r3, [r7, #4]
 8046ac4:	699b      	ldr	r3, [r3, #24]
 8046ac6:	2b02      	cmp	r3, #2
 8046ac8:	d113      	bne.n	8046af2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8046aca:	68fb      	ldr	r3, [r7, #12]
 8046acc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8046ad0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8046ad4:	d106      	bne.n	8046ae4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8046ad6:	687b      	ldr	r3, [r7, #4]
 8046ad8:	681b      	ldr	r3, [r3, #0]
 8046ada:	2102      	movs	r1, #2
 8046adc:	4618      	mov	r0, r3
 8046ade:	f005 fa07 	bl	804bef0 <USB_InitFSLSPClkSel>
 8046ae2:	e011      	b.n	8046b08 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8046ae4:	687b      	ldr	r3, [r7, #4]
 8046ae6:	681b      	ldr	r3, [r3, #0]
 8046ae8:	2101      	movs	r1, #1
 8046aea:	4618      	mov	r0, r3
 8046aec:	f005 fa00 	bl	804bef0 <USB_InitFSLSPClkSel>
 8046af0:	e00a      	b.n	8046b08 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8046af2:	687b      	ldr	r3, [r7, #4]
 8046af4:	68db      	ldr	r3, [r3, #12]
 8046af6:	2b01      	cmp	r3, #1
 8046af8:	d106      	bne.n	8046b08 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8046afa:	693b      	ldr	r3, [r7, #16]
 8046afc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8046b00:	461a      	mov	r2, r3
 8046b02:	f64e 2360 	movw	r3, #60000	; 0xea60
 8046b06:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8046b08:	6878      	ldr	r0, [r7, #4]
 8046b0a:	f012 ff7d 	bl	8059a08 <HAL_HCD_PortEnabled_Callback>
 8046b0e:	e002      	b.n	8046b16 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8046b10:	6878      	ldr	r0, [r7, #4]
 8046b12:	f012 ff87 	bl	8059a24 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8046b16:	68fb      	ldr	r3, [r7, #12]
 8046b18:	f003 0320 	and.w	r3, r3, #32
 8046b1c:	2b20      	cmp	r3, #32
 8046b1e:	d103      	bne.n	8046b28 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8046b20:	68bb      	ldr	r3, [r7, #8]
 8046b22:	f043 0320 	orr.w	r3, r3, #32
 8046b26:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8046b28:	693b      	ldr	r3, [r7, #16]
 8046b2a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8046b2e:	461a      	mov	r2, r3
 8046b30:	68bb      	ldr	r3, [r7, #8]
 8046b32:	6013      	str	r3, [r2, #0]
}
 8046b34:	bf00      	nop
 8046b36:	3718      	adds	r7, #24
 8046b38:	46bd      	mov	sp, r7
 8046b3a:	bd80      	pop	{r7, pc}

08046b3c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8046b3c:	b580      	push	{r7, lr}
 8046b3e:	b084      	sub	sp, #16
 8046b40:	af00      	add	r7, sp, #0
 8046b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8046b44:	4b19      	ldr	r3, [pc, #100]	; (8046bac <HAL_PWREx_ConfigSupply+0x70>)
 8046b46:	68db      	ldr	r3, [r3, #12]
 8046b48:	f003 0304 	and.w	r3, r3, #4
 8046b4c:	2b04      	cmp	r3, #4
 8046b4e:	d00a      	beq.n	8046b66 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8046b50:	4b16      	ldr	r3, [pc, #88]	; (8046bac <HAL_PWREx_ConfigSupply+0x70>)
 8046b52:	68db      	ldr	r3, [r3, #12]
 8046b54:	f003 0307 	and.w	r3, r3, #7
 8046b58:	687a      	ldr	r2, [r7, #4]
 8046b5a:	429a      	cmp	r2, r3
 8046b5c:	d001      	beq.n	8046b62 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8046b5e:	2301      	movs	r3, #1
 8046b60:	e01f      	b.n	8046ba2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8046b62:	2300      	movs	r3, #0
 8046b64:	e01d      	b.n	8046ba2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8046b66:	4b11      	ldr	r3, [pc, #68]	; (8046bac <HAL_PWREx_ConfigSupply+0x70>)
 8046b68:	68db      	ldr	r3, [r3, #12]
 8046b6a:	f023 0207 	bic.w	r2, r3, #7
 8046b6e:	490f      	ldr	r1, [pc, #60]	; (8046bac <HAL_PWREx_ConfigSupply+0x70>)
 8046b70:	687b      	ldr	r3, [r7, #4]
 8046b72:	4313      	orrs	r3, r2
 8046b74:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8046b76:	f7fb fab1 	bl	80420dc <HAL_GetTick>
 8046b7a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8046b7c:	e009      	b.n	8046b92 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8046b7e:	f7fb faad 	bl	80420dc <HAL_GetTick>
 8046b82:	4602      	mov	r2, r0
 8046b84:	68fb      	ldr	r3, [r7, #12]
 8046b86:	1ad3      	subs	r3, r2, r3
 8046b88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8046b8c:	d901      	bls.n	8046b92 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8046b8e:	2301      	movs	r3, #1
 8046b90:	e007      	b.n	8046ba2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8046b92:	4b06      	ldr	r3, [pc, #24]	; (8046bac <HAL_PWREx_ConfigSupply+0x70>)
 8046b94:	685b      	ldr	r3, [r3, #4]
 8046b96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8046b9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8046b9e:	d1ee      	bne.n	8046b7e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8046ba0:	2300      	movs	r3, #0
}
 8046ba2:	4618      	mov	r0, r3
 8046ba4:	3710      	adds	r7, #16
 8046ba6:	46bd      	mov	sp, r7
 8046ba8:	bd80      	pop	{r7, pc}
 8046baa:	bf00      	nop
 8046bac:	58024800 	.word	0x58024800

08046bb0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8046bb0:	b480      	push	{r7}
 8046bb2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8046bb4:	4b05      	ldr	r3, [pc, #20]	; (8046bcc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8046bb6:	68db      	ldr	r3, [r3, #12]
 8046bb8:	4a04      	ldr	r2, [pc, #16]	; (8046bcc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8046bba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8046bbe:	60d3      	str	r3, [r2, #12]
}
 8046bc0:	bf00      	nop
 8046bc2:	46bd      	mov	sp, r7
 8046bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046bc8:	4770      	bx	lr
 8046bca:	bf00      	nop
 8046bcc:	58024800 	.word	0x58024800

08046bd0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8046bd0:	b580      	push	{r7, lr}
 8046bd2:	b08c      	sub	sp, #48	; 0x30
 8046bd4:	af00      	add	r7, sp, #0
 8046bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8046bd8:	687b      	ldr	r3, [r7, #4]
 8046bda:	2b00      	cmp	r3, #0
 8046bdc:	d101      	bne.n	8046be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8046bde:	2301      	movs	r3, #1
 8046be0:	e39d      	b.n	804731e <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8046be2:	687b      	ldr	r3, [r7, #4]
 8046be4:	681b      	ldr	r3, [r3, #0]
 8046be6:	f003 0301 	and.w	r3, r3, #1
 8046bea:	2b00      	cmp	r3, #0
 8046bec:	f000 8087 	beq.w	8046cfe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8046bf0:	4b88      	ldr	r3, [pc, #544]	; (8046e14 <HAL_RCC_OscConfig+0x244>)
 8046bf2:	691b      	ldr	r3, [r3, #16]
 8046bf4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8046bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8046bfa:	4b86      	ldr	r3, [pc, #536]	; (8046e14 <HAL_RCC_OscConfig+0x244>)
 8046bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8046bfe:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8046c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8046c02:	2b10      	cmp	r3, #16
 8046c04:	d007      	beq.n	8046c16 <HAL_RCC_OscConfig+0x46>
 8046c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8046c08:	2b18      	cmp	r3, #24
 8046c0a:	d110      	bne.n	8046c2e <HAL_RCC_OscConfig+0x5e>
 8046c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8046c0e:	f003 0303 	and.w	r3, r3, #3
 8046c12:	2b02      	cmp	r3, #2
 8046c14:	d10b      	bne.n	8046c2e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8046c16:	4b7f      	ldr	r3, [pc, #508]	; (8046e14 <HAL_RCC_OscConfig+0x244>)
 8046c18:	681b      	ldr	r3, [r3, #0]
 8046c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8046c1e:	2b00      	cmp	r3, #0
 8046c20:	d06c      	beq.n	8046cfc <HAL_RCC_OscConfig+0x12c>
 8046c22:	687b      	ldr	r3, [r7, #4]
 8046c24:	685b      	ldr	r3, [r3, #4]
 8046c26:	2b00      	cmp	r3, #0
 8046c28:	d168      	bne.n	8046cfc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8046c2a:	2301      	movs	r3, #1
 8046c2c:	e377      	b.n	804731e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8046c2e:	687b      	ldr	r3, [r7, #4]
 8046c30:	685b      	ldr	r3, [r3, #4]
 8046c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8046c36:	d106      	bne.n	8046c46 <HAL_RCC_OscConfig+0x76>
 8046c38:	4b76      	ldr	r3, [pc, #472]	; (8046e14 <HAL_RCC_OscConfig+0x244>)
 8046c3a:	681b      	ldr	r3, [r3, #0]
 8046c3c:	4a75      	ldr	r2, [pc, #468]	; (8046e14 <HAL_RCC_OscConfig+0x244>)
 8046c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8046c42:	6013      	str	r3, [r2, #0]
 8046c44:	e02e      	b.n	8046ca4 <HAL_RCC_OscConfig+0xd4>
 8046c46:	687b      	ldr	r3, [r7, #4]
 8046c48:	685b      	ldr	r3, [r3, #4]
 8046c4a:	2b00      	cmp	r3, #0
 8046c4c:	d10c      	bne.n	8046c68 <HAL_RCC_OscConfig+0x98>
 8046c4e:	4b71      	ldr	r3, [pc, #452]	; (8046e14 <HAL_RCC_OscConfig+0x244>)
 8046c50:	681b      	ldr	r3, [r3, #0]
 8046c52:	4a70      	ldr	r2, [pc, #448]	; (8046e14 <HAL_RCC_OscConfig+0x244>)
 8046c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8046c58:	6013      	str	r3, [r2, #0]
 8046c5a:	4b6e      	ldr	r3, [pc, #440]	; (8046e14 <HAL_RCC_OscConfig+0x244>)
 8046c5c:	681b      	ldr	r3, [r3, #0]
 8046c5e:	4a6d      	ldr	r2, [pc, #436]	; (8046e14 <HAL_RCC_OscConfig+0x244>)
 8046c60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8046c64:	6013      	str	r3, [r2, #0]
 8046c66:	e01d      	b.n	8046ca4 <HAL_RCC_OscConfig+0xd4>
 8046c68:	687b      	ldr	r3, [r7, #4]
 8046c6a:	685b      	ldr	r3, [r3, #4]
 8046c6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8046c70:	d10c      	bne.n	8046c8c <HAL_RCC_OscConfig+0xbc>
 8046c72:	4b68      	ldr	r3, [pc, #416]	; (8046e14 <HAL_RCC_OscConfig+0x244>)
 8046c74:	681b      	ldr	r3, [r3, #0]
 8046c76:	4a67      	ldr	r2, [pc, #412]	; (8046e14 <HAL_RCC_OscConfig+0x244>)
 8046c78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8046c7c:	6013      	str	r3, [r2, #0]
 8046c7e:	4b65      	ldr	r3, [pc, #404]	; (8046e14 <HAL_RCC_OscConfig+0x244>)
 8046c80:	681b      	ldr	r3, [r3, #0]
 8046c82:	4a64      	ldr	r2, [pc, #400]	; (8046e14 <HAL_RCC_OscConfig+0x244>)
 8046c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8046c88:	6013      	str	r3, [r2, #0]
 8046c8a:	e00b      	b.n	8046ca4 <HAL_RCC_OscConfig+0xd4>
 8046c8c:	4b61      	ldr	r3, [pc, #388]	; (8046e14 <HAL_RCC_OscConfig+0x244>)
 8046c8e:	681b      	ldr	r3, [r3, #0]
 8046c90:	4a60      	ldr	r2, [pc, #384]	; (8046e14 <HAL_RCC_OscConfig+0x244>)
 8046c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8046c96:	6013      	str	r3, [r2, #0]
 8046c98:	4b5e      	ldr	r3, [pc, #376]	; (8046e14 <HAL_RCC_OscConfig+0x244>)
 8046c9a:	681b      	ldr	r3, [r3, #0]
 8046c9c:	4a5d      	ldr	r2, [pc, #372]	; (8046e14 <HAL_RCC_OscConfig+0x244>)
 8046c9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8046ca2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8046ca4:	687b      	ldr	r3, [r7, #4]
 8046ca6:	685b      	ldr	r3, [r3, #4]
 8046ca8:	2b00      	cmp	r3, #0
 8046caa:	d013      	beq.n	8046cd4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8046cac:	f7fb fa16 	bl	80420dc <HAL_GetTick>
 8046cb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8046cb2:	e008      	b.n	8046cc6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8046cb4:	f7fb fa12 	bl	80420dc <HAL_GetTick>
 8046cb8:	4602      	mov	r2, r0
 8046cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8046cbc:	1ad3      	subs	r3, r2, r3
 8046cbe:	2b64      	cmp	r3, #100	; 0x64
 8046cc0:	d901      	bls.n	8046cc6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8046cc2:	2303      	movs	r3, #3
 8046cc4:	e32b      	b.n	804731e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8046cc6:	4b53      	ldr	r3, [pc, #332]	; (8046e14 <HAL_RCC_OscConfig+0x244>)
 8046cc8:	681b      	ldr	r3, [r3, #0]
 8046cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8046cce:	2b00      	cmp	r3, #0
 8046cd0:	d0f0      	beq.n	8046cb4 <HAL_RCC_OscConfig+0xe4>
 8046cd2:	e014      	b.n	8046cfe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8046cd4:	f7fb fa02 	bl	80420dc <HAL_GetTick>
 8046cd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8046cda:	e008      	b.n	8046cee <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8046cdc:	f7fb f9fe 	bl	80420dc <HAL_GetTick>
 8046ce0:	4602      	mov	r2, r0
 8046ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8046ce4:	1ad3      	subs	r3, r2, r3
 8046ce6:	2b64      	cmp	r3, #100	; 0x64
 8046ce8:	d901      	bls.n	8046cee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8046cea:	2303      	movs	r3, #3
 8046cec:	e317      	b.n	804731e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8046cee:	4b49      	ldr	r3, [pc, #292]	; (8046e14 <HAL_RCC_OscConfig+0x244>)
 8046cf0:	681b      	ldr	r3, [r3, #0]
 8046cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8046cf6:	2b00      	cmp	r3, #0
 8046cf8:	d1f0      	bne.n	8046cdc <HAL_RCC_OscConfig+0x10c>
 8046cfa:	e000      	b.n	8046cfe <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8046cfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8046cfe:	687b      	ldr	r3, [r7, #4]
 8046d00:	681b      	ldr	r3, [r3, #0]
 8046d02:	f003 0302 	and.w	r3, r3, #2
 8046d06:	2b00      	cmp	r3, #0
 8046d08:	f000 808c 	beq.w	8046e24 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8046d0c:	4b41      	ldr	r3, [pc, #260]	; (8046e14 <HAL_RCC_OscConfig+0x244>)
 8046d0e:	691b      	ldr	r3, [r3, #16]
 8046d10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8046d14:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8046d16:	4b3f      	ldr	r3, [pc, #252]	; (8046e14 <HAL_RCC_OscConfig+0x244>)
 8046d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8046d1a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8046d1c:	6a3b      	ldr	r3, [r7, #32]
 8046d1e:	2b00      	cmp	r3, #0
 8046d20:	d007      	beq.n	8046d32 <HAL_RCC_OscConfig+0x162>
 8046d22:	6a3b      	ldr	r3, [r7, #32]
 8046d24:	2b18      	cmp	r3, #24
 8046d26:	d137      	bne.n	8046d98 <HAL_RCC_OscConfig+0x1c8>
 8046d28:	69fb      	ldr	r3, [r7, #28]
 8046d2a:	f003 0303 	and.w	r3, r3, #3
 8046d2e:	2b00      	cmp	r3, #0
 8046d30:	d132      	bne.n	8046d98 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8046d32:	4b38      	ldr	r3, [pc, #224]	; (8046e14 <HAL_RCC_OscConfig+0x244>)
 8046d34:	681b      	ldr	r3, [r3, #0]
 8046d36:	f003 0304 	and.w	r3, r3, #4
 8046d3a:	2b00      	cmp	r3, #0
 8046d3c:	d005      	beq.n	8046d4a <HAL_RCC_OscConfig+0x17a>
 8046d3e:	687b      	ldr	r3, [r7, #4]
 8046d40:	68db      	ldr	r3, [r3, #12]
 8046d42:	2b00      	cmp	r3, #0
 8046d44:	d101      	bne.n	8046d4a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8046d46:	2301      	movs	r3, #1
 8046d48:	e2e9      	b.n	804731e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8046d4a:	4b32      	ldr	r3, [pc, #200]	; (8046e14 <HAL_RCC_OscConfig+0x244>)
 8046d4c:	681b      	ldr	r3, [r3, #0]
 8046d4e:	f023 0219 	bic.w	r2, r3, #25
 8046d52:	687b      	ldr	r3, [r7, #4]
 8046d54:	68db      	ldr	r3, [r3, #12]
 8046d56:	492f      	ldr	r1, [pc, #188]	; (8046e14 <HAL_RCC_OscConfig+0x244>)
 8046d58:	4313      	orrs	r3, r2
 8046d5a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8046d5c:	f7fb f9be 	bl	80420dc <HAL_GetTick>
 8046d60:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8046d62:	e008      	b.n	8046d76 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8046d64:	f7fb f9ba 	bl	80420dc <HAL_GetTick>
 8046d68:	4602      	mov	r2, r0
 8046d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8046d6c:	1ad3      	subs	r3, r2, r3
 8046d6e:	2b02      	cmp	r3, #2
 8046d70:	d901      	bls.n	8046d76 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8046d72:	2303      	movs	r3, #3
 8046d74:	e2d3      	b.n	804731e <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8046d76:	4b27      	ldr	r3, [pc, #156]	; (8046e14 <HAL_RCC_OscConfig+0x244>)
 8046d78:	681b      	ldr	r3, [r3, #0]
 8046d7a:	f003 0304 	and.w	r3, r3, #4
 8046d7e:	2b00      	cmp	r3, #0
 8046d80:	d0f0      	beq.n	8046d64 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8046d82:	4b24      	ldr	r3, [pc, #144]	; (8046e14 <HAL_RCC_OscConfig+0x244>)
 8046d84:	685b      	ldr	r3, [r3, #4]
 8046d86:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8046d8a:	687b      	ldr	r3, [r7, #4]
 8046d8c:	691b      	ldr	r3, [r3, #16]
 8046d8e:	061b      	lsls	r3, r3, #24
 8046d90:	4920      	ldr	r1, [pc, #128]	; (8046e14 <HAL_RCC_OscConfig+0x244>)
 8046d92:	4313      	orrs	r3, r2
 8046d94:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8046d96:	e045      	b.n	8046e24 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8046d98:	687b      	ldr	r3, [r7, #4]
 8046d9a:	68db      	ldr	r3, [r3, #12]
 8046d9c:	2b00      	cmp	r3, #0
 8046d9e:	d026      	beq.n	8046dee <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8046da0:	4b1c      	ldr	r3, [pc, #112]	; (8046e14 <HAL_RCC_OscConfig+0x244>)
 8046da2:	681b      	ldr	r3, [r3, #0]
 8046da4:	f023 0219 	bic.w	r2, r3, #25
 8046da8:	687b      	ldr	r3, [r7, #4]
 8046daa:	68db      	ldr	r3, [r3, #12]
 8046dac:	4919      	ldr	r1, [pc, #100]	; (8046e14 <HAL_RCC_OscConfig+0x244>)
 8046dae:	4313      	orrs	r3, r2
 8046db0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8046db2:	f7fb f993 	bl	80420dc <HAL_GetTick>
 8046db6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8046db8:	e008      	b.n	8046dcc <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8046dba:	f7fb f98f 	bl	80420dc <HAL_GetTick>
 8046dbe:	4602      	mov	r2, r0
 8046dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8046dc2:	1ad3      	subs	r3, r2, r3
 8046dc4:	2b02      	cmp	r3, #2
 8046dc6:	d901      	bls.n	8046dcc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8046dc8:	2303      	movs	r3, #3
 8046dca:	e2a8      	b.n	804731e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8046dcc:	4b11      	ldr	r3, [pc, #68]	; (8046e14 <HAL_RCC_OscConfig+0x244>)
 8046dce:	681b      	ldr	r3, [r3, #0]
 8046dd0:	f003 0304 	and.w	r3, r3, #4
 8046dd4:	2b00      	cmp	r3, #0
 8046dd6:	d0f0      	beq.n	8046dba <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8046dd8:	4b0e      	ldr	r3, [pc, #56]	; (8046e14 <HAL_RCC_OscConfig+0x244>)
 8046dda:	685b      	ldr	r3, [r3, #4]
 8046ddc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8046de0:	687b      	ldr	r3, [r7, #4]
 8046de2:	691b      	ldr	r3, [r3, #16]
 8046de4:	061b      	lsls	r3, r3, #24
 8046de6:	490b      	ldr	r1, [pc, #44]	; (8046e14 <HAL_RCC_OscConfig+0x244>)
 8046de8:	4313      	orrs	r3, r2
 8046dea:	604b      	str	r3, [r1, #4]
 8046dec:	e01a      	b.n	8046e24 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8046dee:	4b09      	ldr	r3, [pc, #36]	; (8046e14 <HAL_RCC_OscConfig+0x244>)
 8046df0:	681b      	ldr	r3, [r3, #0]
 8046df2:	4a08      	ldr	r2, [pc, #32]	; (8046e14 <HAL_RCC_OscConfig+0x244>)
 8046df4:	f023 0301 	bic.w	r3, r3, #1
 8046df8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8046dfa:	f7fb f96f 	bl	80420dc <HAL_GetTick>
 8046dfe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8046e00:	e00a      	b.n	8046e18 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8046e02:	f7fb f96b 	bl	80420dc <HAL_GetTick>
 8046e06:	4602      	mov	r2, r0
 8046e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8046e0a:	1ad3      	subs	r3, r2, r3
 8046e0c:	2b02      	cmp	r3, #2
 8046e0e:	d903      	bls.n	8046e18 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8046e10:	2303      	movs	r3, #3
 8046e12:	e284      	b.n	804731e <HAL_RCC_OscConfig+0x74e>
 8046e14:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8046e18:	4b96      	ldr	r3, [pc, #600]	; (8047074 <HAL_RCC_OscConfig+0x4a4>)
 8046e1a:	681b      	ldr	r3, [r3, #0]
 8046e1c:	f003 0304 	and.w	r3, r3, #4
 8046e20:	2b00      	cmp	r3, #0
 8046e22:	d1ee      	bne.n	8046e02 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8046e24:	687b      	ldr	r3, [r7, #4]
 8046e26:	681b      	ldr	r3, [r3, #0]
 8046e28:	f003 0310 	and.w	r3, r3, #16
 8046e2c:	2b00      	cmp	r3, #0
 8046e2e:	d06a      	beq.n	8046f06 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8046e30:	4b90      	ldr	r3, [pc, #576]	; (8047074 <HAL_RCC_OscConfig+0x4a4>)
 8046e32:	691b      	ldr	r3, [r3, #16]
 8046e34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8046e38:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8046e3a:	4b8e      	ldr	r3, [pc, #568]	; (8047074 <HAL_RCC_OscConfig+0x4a4>)
 8046e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8046e3e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8046e40:	69bb      	ldr	r3, [r7, #24]
 8046e42:	2b08      	cmp	r3, #8
 8046e44:	d007      	beq.n	8046e56 <HAL_RCC_OscConfig+0x286>
 8046e46:	69bb      	ldr	r3, [r7, #24]
 8046e48:	2b18      	cmp	r3, #24
 8046e4a:	d11b      	bne.n	8046e84 <HAL_RCC_OscConfig+0x2b4>
 8046e4c:	697b      	ldr	r3, [r7, #20]
 8046e4e:	f003 0303 	and.w	r3, r3, #3
 8046e52:	2b01      	cmp	r3, #1
 8046e54:	d116      	bne.n	8046e84 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8046e56:	4b87      	ldr	r3, [pc, #540]	; (8047074 <HAL_RCC_OscConfig+0x4a4>)
 8046e58:	681b      	ldr	r3, [r3, #0]
 8046e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8046e5e:	2b00      	cmp	r3, #0
 8046e60:	d005      	beq.n	8046e6e <HAL_RCC_OscConfig+0x29e>
 8046e62:	687b      	ldr	r3, [r7, #4]
 8046e64:	69db      	ldr	r3, [r3, #28]
 8046e66:	2b80      	cmp	r3, #128	; 0x80
 8046e68:	d001      	beq.n	8046e6e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8046e6a:	2301      	movs	r3, #1
 8046e6c:	e257      	b.n	804731e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8046e6e:	4b81      	ldr	r3, [pc, #516]	; (8047074 <HAL_RCC_OscConfig+0x4a4>)
 8046e70:	68db      	ldr	r3, [r3, #12]
 8046e72:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8046e76:	687b      	ldr	r3, [r7, #4]
 8046e78:	6a1b      	ldr	r3, [r3, #32]
 8046e7a:	061b      	lsls	r3, r3, #24
 8046e7c:	497d      	ldr	r1, [pc, #500]	; (8047074 <HAL_RCC_OscConfig+0x4a4>)
 8046e7e:	4313      	orrs	r3, r2
 8046e80:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8046e82:	e040      	b.n	8046f06 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8046e84:	687b      	ldr	r3, [r7, #4]
 8046e86:	69db      	ldr	r3, [r3, #28]
 8046e88:	2b00      	cmp	r3, #0
 8046e8a:	d023      	beq.n	8046ed4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8046e8c:	4b79      	ldr	r3, [pc, #484]	; (8047074 <HAL_RCC_OscConfig+0x4a4>)
 8046e8e:	681b      	ldr	r3, [r3, #0]
 8046e90:	4a78      	ldr	r2, [pc, #480]	; (8047074 <HAL_RCC_OscConfig+0x4a4>)
 8046e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8046e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8046e98:	f7fb f920 	bl	80420dc <HAL_GetTick>
 8046e9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8046e9e:	e008      	b.n	8046eb2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8046ea0:	f7fb f91c 	bl	80420dc <HAL_GetTick>
 8046ea4:	4602      	mov	r2, r0
 8046ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8046ea8:	1ad3      	subs	r3, r2, r3
 8046eaa:	2b02      	cmp	r3, #2
 8046eac:	d901      	bls.n	8046eb2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8046eae:	2303      	movs	r3, #3
 8046eb0:	e235      	b.n	804731e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8046eb2:	4b70      	ldr	r3, [pc, #448]	; (8047074 <HAL_RCC_OscConfig+0x4a4>)
 8046eb4:	681b      	ldr	r3, [r3, #0]
 8046eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8046eba:	2b00      	cmp	r3, #0
 8046ebc:	d0f0      	beq.n	8046ea0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8046ebe:	4b6d      	ldr	r3, [pc, #436]	; (8047074 <HAL_RCC_OscConfig+0x4a4>)
 8046ec0:	68db      	ldr	r3, [r3, #12]
 8046ec2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8046ec6:	687b      	ldr	r3, [r7, #4]
 8046ec8:	6a1b      	ldr	r3, [r3, #32]
 8046eca:	061b      	lsls	r3, r3, #24
 8046ecc:	4969      	ldr	r1, [pc, #420]	; (8047074 <HAL_RCC_OscConfig+0x4a4>)
 8046ece:	4313      	orrs	r3, r2
 8046ed0:	60cb      	str	r3, [r1, #12]
 8046ed2:	e018      	b.n	8046f06 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8046ed4:	4b67      	ldr	r3, [pc, #412]	; (8047074 <HAL_RCC_OscConfig+0x4a4>)
 8046ed6:	681b      	ldr	r3, [r3, #0]
 8046ed8:	4a66      	ldr	r2, [pc, #408]	; (8047074 <HAL_RCC_OscConfig+0x4a4>)
 8046eda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8046ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8046ee0:	f7fb f8fc 	bl	80420dc <HAL_GetTick>
 8046ee4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8046ee6:	e008      	b.n	8046efa <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8046ee8:	f7fb f8f8 	bl	80420dc <HAL_GetTick>
 8046eec:	4602      	mov	r2, r0
 8046eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8046ef0:	1ad3      	subs	r3, r2, r3
 8046ef2:	2b02      	cmp	r3, #2
 8046ef4:	d901      	bls.n	8046efa <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8046ef6:	2303      	movs	r3, #3
 8046ef8:	e211      	b.n	804731e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8046efa:	4b5e      	ldr	r3, [pc, #376]	; (8047074 <HAL_RCC_OscConfig+0x4a4>)
 8046efc:	681b      	ldr	r3, [r3, #0]
 8046efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8046f02:	2b00      	cmp	r3, #0
 8046f04:	d1f0      	bne.n	8046ee8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8046f06:	687b      	ldr	r3, [r7, #4]
 8046f08:	681b      	ldr	r3, [r3, #0]
 8046f0a:	f003 0308 	and.w	r3, r3, #8
 8046f0e:	2b00      	cmp	r3, #0
 8046f10:	d036      	beq.n	8046f80 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8046f12:	687b      	ldr	r3, [r7, #4]
 8046f14:	695b      	ldr	r3, [r3, #20]
 8046f16:	2b00      	cmp	r3, #0
 8046f18:	d019      	beq.n	8046f4e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8046f1a:	4b56      	ldr	r3, [pc, #344]	; (8047074 <HAL_RCC_OscConfig+0x4a4>)
 8046f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8046f1e:	4a55      	ldr	r2, [pc, #340]	; (8047074 <HAL_RCC_OscConfig+0x4a4>)
 8046f20:	f043 0301 	orr.w	r3, r3, #1
 8046f24:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8046f26:	f7fb f8d9 	bl	80420dc <HAL_GetTick>
 8046f2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8046f2c:	e008      	b.n	8046f40 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8046f2e:	f7fb f8d5 	bl	80420dc <HAL_GetTick>
 8046f32:	4602      	mov	r2, r0
 8046f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8046f36:	1ad3      	subs	r3, r2, r3
 8046f38:	2b02      	cmp	r3, #2
 8046f3a:	d901      	bls.n	8046f40 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8046f3c:	2303      	movs	r3, #3
 8046f3e:	e1ee      	b.n	804731e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8046f40:	4b4c      	ldr	r3, [pc, #304]	; (8047074 <HAL_RCC_OscConfig+0x4a4>)
 8046f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8046f44:	f003 0302 	and.w	r3, r3, #2
 8046f48:	2b00      	cmp	r3, #0
 8046f4a:	d0f0      	beq.n	8046f2e <HAL_RCC_OscConfig+0x35e>
 8046f4c:	e018      	b.n	8046f80 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8046f4e:	4b49      	ldr	r3, [pc, #292]	; (8047074 <HAL_RCC_OscConfig+0x4a4>)
 8046f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8046f52:	4a48      	ldr	r2, [pc, #288]	; (8047074 <HAL_RCC_OscConfig+0x4a4>)
 8046f54:	f023 0301 	bic.w	r3, r3, #1
 8046f58:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8046f5a:	f7fb f8bf 	bl	80420dc <HAL_GetTick>
 8046f5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8046f60:	e008      	b.n	8046f74 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8046f62:	f7fb f8bb 	bl	80420dc <HAL_GetTick>
 8046f66:	4602      	mov	r2, r0
 8046f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8046f6a:	1ad3      	subs	r3, r2, r3
 8046f6c:	2b02      	cmp	r3, #2
 8046f6e:	d901      	bls.n	8046f74 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8046f70:	2303      	movs	r3, #3
 8046f72:	e1d4      	b.n	804731e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8046f74:	4b3f      	ldr	r3, [pc, #252]	; (8047074 <HAL_RCC_OscConfig+0x4a4>)
 8046f76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8046f78:	f003 0302 	and.w	r3, r3, #2
 8046f7c:	2b00      	cmp	r3, #0
 8046f7e:	d1f0      	bne.n	8046f62 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8046f80:	687b      	ldr	r3, [r7, #4]
 8046f82:	681b      	ldr	r3, [r3, #0]
 8046f84:	f003 0320 	and.w	r3, r3, #32
 8046f88:	2b00      	cmp	r3, #0
 8046f8a:	d036      	beq.n	8046ffa <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8046f8c:	687b      	ldr	r3, [r7, #4]
 8046f8e:	699b      	ldr	r3, [r3, #24]
 8046f90:	2b00      	cmp	r3, #0
 8046f92:	d019      	beq.n	8046fc8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8046f94:	4b37      	ldr	r3, [pc, #220]	; (8047074 <HAL_RCC_OscConfig+0x4a4>)
 8046f96:	681b      	ldr	r3, [r3, #0]
 8046f98:	4a36      	ldr	r2, [pc, #216]	; (8047074 <HAL_RCC_OscConfig+0x4a4>)
 8046f9a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8046f9e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8046fa0:	f7fb f89c 	bl	80420dc <HAL_GetTick>
 8046fa4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8046fa6:	e008      	b.n	8046fba <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8046fa8:	f7fb f898 	bl	80420dc <HAL_GetTick>
 8046fac:	4602      	mov	r2, r0
 8046fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8046fb0:	1ad3      	subs	r3, r2, r3
 8046fb2:	2b02      	cmp	r3, #2
 8046fb4:	d901      	bls.n	8046fba <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8046fb6:	2303      	movs	r3, #3
 8046fb8:	e1b1      	b.n	804731e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8046fba:	4b2e      	ldr	r3, [pc, #184]	; (8047074 <HAL_RCC_OscConfig+0x4a4>)
 8046fbc:	681b      	ldr	r3, [r3, #0]
 8046fbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8046fc2:	2b00      	cmp	r3, #0
 8046fc4:	d0f0      	beq.n	8046fa8 <HAL_RCC_OscConfig+0x3d8>
 8046fc6:	e018      	b.n	8046ffa <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8046fc8:	4b2a      	ldr	r3, [pc, #168]	; (8047074 <HAL_RCC_OscConfig+0x4a4>)
 8046fca:	681b      	ldr	r3, [r3, #0]
 8046fcc:	4a29      	ldr	r2, [pc, #164]	; (8047074 <HAL_RCC_OscConfig+0x4a4>)
 8046fce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8046fd2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8046fd4:	f7fb f882 	bl	80420dc <HAL_GetTick>
 8046fd8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8046fda:	e008      	b.n	8046fee <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8046fdc:	f7fb f87e 	bl	80420dc <HAL_GetTick>
 8046fe0:	4602      	mov	r2, r0
 8046fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8046fe4:	1ad3      	subs	r3, r2, r3
 8046fe6:	2b02      	cmp	r3, #2
 8046fe8:	d901      	bls.n	8046fee <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8046fea:	2303      	movs	r3, #3
 8046fec:	e197      	b.n	804731e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8046fee:	4b21      	ldr	r3, [pc, #132]	; (8047074 <HAL_RCC_OscConfig+0x4a4>)
 8046ff0:	681b      	ldr	r3, [r3, #0]
 8046ff2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8046ff6:	2b00      	cmp	r3, #0
 8046ff8:	d1f0      	bne.n	8046fdc <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8046ffa:	687b      	ldr	r3, [r7, #4]
 8046ffc:	681b      	ldr	r3, [r3, #0]
 8046ffe:	f003 0304 	and.w	r3, r3, #4
 8047002:	2b00      	cmp	r3, #0
 8047004:	f000 8086 	beq.w	8047114 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8047008:	4b1b      	ldr	r3, [pc, #108]	; (8047078 <HAL_RCC_OscConfig+0x4a8>)
 804700a:	681b      	ldr	r3, [r3, #0]
 804700c:	4a1a      	ldr	r2, [pc, #104]	; (8047078 <HAL_RCC_OscConfig+0x4a8>)
 804700e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8047012:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8047014:	f7fb f862 	bl	80420dc <HAL_GetTick>
 8047018:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 804701a:	e008      	b.n	804702e <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 804701c:	f7fb f85e 	bl	80420dc <HAL_GetTick>
 8047020:	4602      	mov	r2, r0
 8047022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8047024:	1ad3      	subs	r3, r2, r3
 8047026:	2b64      	cmp	r3, #100	; 0x64
 8047028:	d901      	bls.n	804702e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 804702a:	2303      	movs	r3, #3
 804702c:	e177      	b.n	804731e <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 804702e:	4b12      	ldr	r3, [pc, #72]	; (8047078 <HAL_RCC_OscConfig+0x4a8>)
 8047030:	681b      	ldr	r3, [r3, #0]
 8047032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8047036:	2b00      	cmp	r3, #0
 8047038:	d0f0      	beq.n	804701c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 804703a:	687b      	ldr	r3, [r7, #4]
 804703c:	689b      	ldr	r3, [r3, #8]
 804703e:	2b01      	cmp	r3, #1
 8047040:	d106      	bne.n	8047050 <HAL_RCC_OscConfig+0x480>
 8047042:	4b0c      	ldr	r3, [pc, #48]	; (8047074 <HAL_RCC_OscConfig+0x4a4>)
 8047044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8047046:	4a0b      	ldr	r2, [pc, #44]	; (8047074 <HAL_RCC_OscConfig+0x4a4>)
 8047048:	f043 0301 	orr.w	r3, r3, #1
 804704c:	6713      	str	r3, [r2, #112]	; 0x70
 804704e:	e032      	b.n	80470b6 <HAL_RCC_OscConfig+0x4e6>
 8047050:	687b      	ldr	r3, [r7, #4]
 8047052:	689b      	ldr	r3, [r3, #8]
 8047054:	2b00      	cmp	r3, #0
 8047056:	d111      	bne.n	804707c <HAL_RCC_OscConfig+0x4ac>
 8047058:	4b06      	ldr	r3, [pc, #24]	; (8047074 <HAL_RCC_OscConfig+0x4a4>)
 804705a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804705c:	4a05      	ldr	r2, [pc, #20]	; (8047074 <HAL_RCC_OscConfig+0x4a4>)
 804705e:	f023 0301 	bic.w	r3, r3, #1
 8047062:	6713      	str	r3, [r2, #112]	; 0x70
 8047064:	4b03      	ldr	r3, [pc, #12]	; (8047074 <HAL_RCC_OscConfig+0x4a4>)
 8047066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8047068:	4a02      	ldr	r2, [pc, #8]	; (8047074 <HAL_RCC_OscConfig+0x4a4>)
 804706a:	f023 0304 	bic.w	r3, r3, #4
 804706e:	6713      	str	r3, [r2, #112]	; 0x70
 8047070:	e021      	b.n	80470b6 <HAL_RCC_OscConfig+0x4e6>
 8047072:	bf00      	nop
 8047074:	58024400 	.word	0x58024400
 8047078:	58024800 	.word	0x58024800
 804707c:	687b      	ldr	r3, [r7, #4]
 804707e:	689b      	ldr	r3, [r3, #8]
 8047080:	2b05      	cmp	r3, #5
 8047082:	d10c      	bne.n	804709e <HAL_RCC_OscConfig+0x4ce>
 8047084:	4b83      	ldr	r3, [pc, #524]	; (8047294 <HAL_RCC_OscConfig+0x6c4>)
 8047086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8047088:	4a82      	ldr	r2, [pc, #520]	; (8047294 <HAL_RCC_OscConfig+0x6c4>)
 804708a:	f043 0304 	orr.w	r3, r3, #4
 804708e:	6713      	str	r3, [r2, #112]	; 0x70
 8047090:	4b80      	ldr	r3, [pc, #512]	; (8047294 <HAL_RCC_OscConfig+0x6c4>)
 8047092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8047094:	4a7f      	ldr	r2, [pc, #508]	; (8047294 <HAL_RCC_OscConfig+0x6c4>)
 8047096:	f043 0301 	orr.w	r3, r3, #1
 804709a:	6713      	str	r3, [r2, #112]	; 0x70
 804709c:	e00b      	b.n	80470b6 <HAL_RCC_OscConfig+0x4e6>
 804709e:	4b7d      	ldr	r3, [pc, #500]	; (8047294 <HAL_RCC_OscConfig+0x6c4>)
 80470a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80470a2:	4a7c      	ldr	r2, [pc, #496]	; (8047294 <HAL_RCC_OscConfig+0x6c4>)
 80470a4:	f023 0301 	bic.w	r3, r3, #1
 80470a8:	6713      	str	r3, [r2, #112]	; 0x70
 80470aa:	4b7a      	ldr	r3, [pc, #488]	; (8047294 <HAL_RCC_OscConfig+0x6c4>)
 80470ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80470ae:	4a79      	ldr	r2, [pc, #484]	; (8047294 <HAL_RCC_OscConfig+0x6c4>)
 80470b0:	f023 0304 	bic.w	r3, r3, #4
 80470b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80470b6:	687b      	ldr	r3, [r7, #4]
 80470b8:	689b      	ldr	r3, [r3, #8]
 80470ba:	2b00      	cmp	r3, #0
 80470bc:	d015      	beq.n	80470ea <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80470be:	f7fb f80d 	bl	80420dc <HAL_GetTick>
 80470c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80470c4:	e00a      	b.n	80470dc <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80470c6:	f7fb f809 	bl	80420dc <HAL_GetTick>
 80470ca:	4602      	mov	r2, r0
 80470cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80470ce:	1ad3      	subs	r3, r2, r3
 80470d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80470d4:	4293      	cmp	r3, r2
 80470d6:	d901      	bls.n	80470dc <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80470d8:	2303      	movs	r3, #3
 80470da:	e120      	b.n	804731e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80470dc:	4b6d      	ldr	r3, [pc, #436]	; (8047294 <HAL_RCC_OscConfig+0x6c4>)
 80470de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80470e0:	f003 0302 	and.w	r3, r3, #2
 80470e4:	2b00      	cmp	r3, #0
 80470e6:	d0ee      	beq.n	80470c6 <HAL_RCC_OscConfig+0x4f6>
 80470e8:	e014      	b.n	8047114 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80470ea:	f7fa fff7 	bl	80420dc <HAL_GetTick>
 80470ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80470f0:	e00a      	b.n	8047108 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80470f2:	f7fa fff3 	bl	80420dc <HAL_GetTick>
 80470f6:	4602      	mov	r2, r0
 80470f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80470fa:	1ad3      	subs	r3, r2, r3
 80470fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8047100:	4293      	cmp	r3, r2
 8047102:	d901      	bls.n	8047108 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8047104:	2303      	movs	r3, #3
 8047106:	e10a      	b.n	804731e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8047108:	4b62      	ldr	r3, [pc, #392]	; (8047294 <HAL_RCC_OscConfig+0x6c4>)
 804710a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804710c:	f003 0302 	and.w	r3, r3, #2
 8047110:	2b00      	cmp	r3, #0
 8047112:	d1ee      	bne.n	80470f2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8047114:	687b      	ldr	r3, [r7, #4]
 8047116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8047118:	2b00      	cmp	r3, #0
 804711a:	f000 80ff 	beq.w	804731c <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 804711e:	4b5d      	ldr	r3, [pc, #372]	; (8047294 <HAL_RCC_OscConfig+0x6c4>)
 8047120:	691b      	ldr	r3, [r3, #16]
 8047122:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8047126:	2b18      	cmp	r3, #24
 8047128:	f000 80ba 	beq.w	80472a0 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 804712c:	687b      	ldr	r3, [r7, #4]
 804712e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8047130:	2b02      	cmp	r3, #2
 8047132:	f040 8095 	bne.w	8047260 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8047136:	4b57      	ldr	r3, [pc, #348]	; (8047294 <HAL_RCC_OscConfig+0x6c4>)
 8047138:	681b      	ldr	r3, [r3, #0]
 804713a:	4a56      	ldr	r2, [pc, #344]	; (8047294 <HAL_RCC_OscConfig+0x6c4>)
 804713c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8047140:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8047142:	f7fa ffcb 	bl	80420dc <HAL_GetTick>
 8047146:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8047148:	e008      	b.n	804715c <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 804714a:	f7fa ffc7 	bl	80420dc <HAL_GetTick>
 804714e:	4602      	mov	r2, r0
 8047150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8047152:	1ad3      	subs	r3, r2, r3
 8047154:	2b02      	cmp	r3, #2
 8047156:	d901      	bls.n	804715c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8047158:	2303      	movs	r3, #3
 804715a:	e0e0      	b.n	804731e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 804715c:	4b4d      	ldr	r3, [pc, #308]	; (8047294 <HAL_RCC_OscConfig+0x6c4>)
 804715e:	681b      	ldr	r3, [r3, #0]
 8047160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8047164:	2b00      	cmp	r3, #0
 8047166:	d1f0      	bne.n	804714a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8047168:	4b4a      	ldr	r3, [pc, #296]	; (8047294 <HAL_RCC_OscConfig+0x6c4>)
 804716a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 804716c:	4b4a      	ldr	r3, [pc, #296]	; (8047298 <HAL_RCC_OscConfig+0x6c8>)
 804716e:	4013      	ands	r3, r2
 8047170:	687a      	ldr	r2, [r7, #4]
 8047172:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8047174:	687a      	ldr	r2, [r7, #4]
 8047176:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8047178:	0112      	lsls	r2, r2, #4
 804717a:	430a      	orrs	r2, r1
 804717c:	4945      	ldr	r1, [pc, #276]	; (8047294 <HAL_RCC_OscConfig+0x6c4>)
 804717e:	4313      	orrs	r3, r2
 8047180:	628b      	str	r3, [r1, #40]	; 0x28
 8047182:	687b      	ldr	r3, [r7, #4]
 8047184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047186:	3b01      	subs	r3, #1
 8047188:	f3c3 0208 	ubfx	r2, r3, #0, #9
 804718c:	687b      	ldr	r3, [r7, #4]
 804718e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8047190:	3b01      	subs	r3, #1
 8047192:	025b      	lsls	r3, r3, #9
 8047194:	b29b      	uxth	r3, r3
 8047196:	431a      	orrs	r2, r3
 8047198:	687b      	ldr	r3, [r7, #4]
 804719a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804719c:	3b01      	subs	r3, #1
 804719e:	041b      	lsls	r3, r3, #16
 80471a0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80471a4:	431a      	orrs	r2, r3
 80471a6:	687b      	ldr	r3, [r7, #4]
 80471a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80471aa:	3b01      	subs	r3, #1
 80471ac:	061b      	lsls	r3, r3, #24
 80471ae:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80471b2:	4938      	ldr	r1, [pc, #224]	; (8047294 <HAL_RCC_OscConfig+0x6c4>)
 80471b4:	4313      	orrs	r3, r2
 80471b6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80471b8:	4b36      	ldr	r3, [pc, #216]	; (8047294 <HAL_RCC_OscConfig+0x6c4>)
 80471ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80471bc:	4a35      	ldr	r2, [pc, #212]	; (8047294 <HAL_RCC_OscConfig+0x6c4>)
 80471be:	f023 0301 	bic.w	r3, r3, #1
 80471c2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80471c4:	4b33      	ldr	r3, [pc, #204]	; (8047294 <HAL_RCC_OscConfig+0x6c4>)
 80471c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80471c8:	4b34      	ldr	r3, [pc, #208]	; (804729c <HAL_RCC_OscConfig+0x6cc>)
 80471ca:	4013      	ands	r3, r2
 80471cc:	687a      	ldr	r2, [r7, #4]
 80471ce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80471d0:	00d2      	lsls	r2, r2, #3
 80471d2:	4930      	ldr	r1, [pc, #192]	; (8047294 <HAL_RCC_OscConfig+0x6c4>)
 80471d4:	4313      	orrs	r3, r2
 80471d6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80471d8:	4b2e      	ldr	r3, [pc, #184]	; (8047294 <HAL_RCC_OscConfig+0x6c4>)
 80471da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80471dc:	f023 020c 	bic.w	r2, r3, #12
 80471e0:	687b      	ldr	r3, [r7, #4]
 80471e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80471e4:	492b      	ldr	r1, [pc, #172]	; (8047294 <HAL_RCC_OscConfig+0x6c4>)
 80471e6:	4313      	orrs	r3, r2
 80471e8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80471ea:	4b2a      	ldr	r3, [pc, #168]	; (8047294 <HAL_RCC_OscConfig+0x6c4>)
 80471ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80471ee:	f023 0202 	bic.w	r2, r3, #2
 80471f2:	687b      	ldr	r3, [r7, #4]
 80471f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80471f6:	4927      	ldr	r1, [pc, #156]	; (8047294 <HAL_RCC_OscConfig+0x6c4>)
 80471f8:	4313      	orrs	r3, r2
 80471fa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80471fc:	4b25      	ldr	r3, [pc, #148]	; (8047294 <HAL_RCC_OscConfig+0x6c4>)
 80471fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8047200:	4a24      	ldr	r2, [pc, #144]	; (8047294 <HAL_RCC_OscConfig+0x6c4>)
 8047202:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8047206:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8047208:	4b22      	ldr	r3, [pc, #136]	; (8047294 <HAL_RCC_OscConfig+0x6c4>)
 804720a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804720c:	4a21      	ldr	r2, [pc, #132]	; (8047294 <HAL_RCC_OscConfig+0x6c4>)
 804720e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8047212:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8047214:	4b1f      	ldr	r3, [pc, #124]	; (8047294 <HAL_RCC_OscConfig+0x6c4>)
 8047216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8047218:	4a1e      	ldr	r2, [pc, #120]	; (8047294 <HAL_RCC_OscConfig+0x6c4>)
 804721a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 804721e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8047220:	4b1c      	ldr	r3, [pc, #112]	; (8047294 <HAL_RCC_OscConfig+0x6c4>)
 8047222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8047224:	4a1b      	ldr	r2, [pc, #108]	; (8047294 <HAL_RCC_OscConfig+0x6c4>)
 8047226:	f043 0301 	orr.w	r3, r3, #1
 804722a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 804722c:	4b19      	ldr	r3, [pc, #100]	; (8047294 <HAL_RCC_OscConfig+0x6c4>)
 804722e:	681b      	ldr	r3, [r3, #0]
 8047230:	4a18      	ldr	r2, [pc, #96]	; (8047294 <HAL_RCC_OscConfig+0x6c4>)
 8047232:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8047236:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8047238:	f7fa ff50 	bl	80420dc <HAL_GetTick>
 804723c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 804723e:	e008      	b.n	8047252 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8047240:	f7fa ff4c 	bl	80420dc <HAL_GetTick>
 8047244:	4602      	mov	r2, r0
 8047246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8047248:	1ad3      	subs	r3, r2, r3
 804724a:	2b02      	cmp	r3, #2
 804724c:	d901      	bls.n	8047252 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 804724e:	2303      	movs	r3, #3
 8047250:	e065      	b.n	804731e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8047252:	4b10      	ldr	r3, [pc, #64]	; (8047294 <HAL_RCC_OscConfig+0x6c4>)
 8047254:	681b      	ldr	r3, [r3, #0]
 8047256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 804725a:	2b00      	cmp	r3, #0
 804725c:	d0f0      	beq.n	8047240 <HAL_RCC_OscConfig+0x670>
 804725e:	e05d      	b.n	804731c <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8047260:	4b0c      	ldr	r3, [pc, #48]	; (8047294 <HAL_RCC_OscConfig+0x6c4>)
 8047262:	681b      	ldr	r3, [r3, #0]
 8047264:	4a0b      	ldr	r2, [pc, #44]	; (8047294 <HAL_RCC_OscConfig+0x6c4>)
 8047266:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 804726a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804726c:	f7fa ff36 	bl	80420dc <HAL_GetTick>
 8047270:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8047272:	e008      	b.n	8047286 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8047274:	f7fa ff32 	bl	80420dc <HAL_GetTick>
 8047278:	4602      	mov	r2, r0
 804727a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804727c:	1ad3      	subs	r3, r2, r3
 804727e:	2b02      	cmp	r3, #2
 8047280:	d901      	bls.n	8047286 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8047282:	2303      	movs	r3, #3
 8047284:	e04b      	b.n	804731e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8047286:	4b03      	ldr	r3, [pc, #12]	; (8047294 <HAL_RCC_OscConfig+0x6c4>)
 8047288:	681b      	ldr	r3, [r3, #0]
 804728a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 804728e:	2b00      	cmp	r3, #0
 8047290:	d1f0      	bne.n	8047274 <HAL_RCC_OscConfig+0x6a4>
 8047292:	e043      	b.n	804731c <HAL_RCC_OscConfig+0x74c>
 8047294:	58024400 	.word	0x58024400
 8047298:	fffffc0c 	.word	0xfffffc0c
 804729c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80472a0:	4b21      	ldr	r3, [pc, #132]	; (8047328 <HAL_RCC_OscConfig+0x758>)
 80472a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80472a4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80472a6:	4b20      	ldr	r3, [pc, #128]	; (8047328 <HAL_RCC_OscConfig+0x758>)
 80472a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80472aa:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80472ac:	687b      	ldr	r3, [r7, #4]
 80472ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80472b0:	2b01      	cmp	r3, #1
 80472b2:	d031      	beq.n	8047318 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80472b4:	693b      	ldr	r3, [r7, #16]
 80472b6:	f003 0203 	and.w	r2, r3, #3
 80472ba:	687b      	ldr	r3, [r7, #4]
 80472bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80472be:	429a      	cmp	r2, r3
 80472c0:	d12a      	bne.n	8047318 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80472c2:	693b      	ldr	r3, [r7, #16]
 80472c4:	091b      	lsrs	r3, r3, #4
 80472c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80472ca:	687b      	ldr	r3, [r7, #4]
 80472cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80472ce:	429a      	cmp	r2, r3
 80472d0:	d122      	bne.n	8047318 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80472d2:	68fb      	ldr	r3, [r7, #12]
 80472d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80472d8:	687b      	ldr	r3, [r7, #4]
 80472da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80472dc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80472de:	429a      	cmp	r2, r3
 80472e0:	d11a      	bne.n	8047318 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80472e2:	68fb      	ldr	r3, [r7, #12]
 80472e4:	0a5b      	lsrs	r3, r3, #9
 80472e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80472ea:	687b      	ldr	r3, [r7, #4]
 80472ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80472ee:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80472f0:	429a      	cmp	r2, r3
 80472f2:	d111      	bne.n	8047318 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80472f4:	68fb      	ldr	r3, [r7, #12]
 80472f6:	0c1b      	lsrs	r3, r3, #16
 80472f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80472fc:	687b      	ldr	r3, [r7, #4]
 80472fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8047300:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8047302:	429a      	cmp	r2, r3
 8047304:	d108      	bne.n	8047318 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8047306:	68fb      	ldr	r3, [r7, #12]
 8047308:	0e1b      	lsrs	r3, r3, #24
 804730a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 804730e:	687b      	ldr	r3, [r7, #4]
 8047310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8047312:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8047314:	429a      	cmp	r2, r3
 8047316:	d001      	beq.n	804731c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8047318:	2301      	movs	r3, #1
 804731a:	e000      	b.n	804731e <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 804731c:	2300      	movs	r3, #0
}
 804731e:	4618      	mov	r0, r3
 8047320:	3730      	adds	r7, #48	; 0x30
 8047322:	46bd      	mov	sp, r7
 8047324:	bd80      	pop	{r7, pc}
 8047326:	bf00      	nop
 8047328:	58024400 	.word	0x58024400

0804732c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 804732c:	b580      	push	{r7, lr}
 804732e:	b086      	sub	sp, #24
 8047330:	af00      	add	r7, sp, #0
 8047332:	6078      	str	r0, [r7, #4]
 8047334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8047336:	687b      	ldr	r3, [r7, #4]
 8047338:	2b00      	cmp	r3, #0
 804733a:	d101      	bne.n	8047340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 804733c:	2301      	movs	r3, #1
 804733e:	e19c      	b.n	804767a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8047340:	4b8a      	ldr	r3, [pc, #552]	; (804756c <HAL_RCC_ClockConfig+0x240>)
 8047342:	681b      	ldr	r3, [r3, #0]
 8047344:	f003 030f 	and.w	r3, r3, #15
 8047348:	683a      	ldr	r2, [r7, #0]
 804734a:	429a      	cmp	r2, r3
 804734c:	d910      	bls.n	8047370 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 804734e:	4b87      	ldr	r3, [pc, #540]	; (804756c <HAL_RCC_ClockConfig+0x240>)
 8047350:	681b      	ldr	r3, [r3, #0]
 8047352:	f023 020f 	bic.w	r2, r3, #15
 8047356:	4985      	ldr	r1, [pc, #532]	; (804756c <HAL_RCC_ClockConfig+0x240>)
 8047358:	683b      	ldr	r3, [r7, #0]
 804735a:	4313      	orrs	r3, r2
 804735c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 804735e:	4b83      	ldr	r3, [pc, #524]	; (804756c <HAL_RCC_ClockConfig+0x240>)
 8047360:	681b      	ldr	r3, [r3, #0]
 8047362:	f003 030f 	and.w	r3, r3, #15
 8047366:	683a      	ldr	r2, [r7, #0]
 8047368:	429a      	cmp	r2, r3
 804736a:	d001      	beq.n	8047370 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 804736c:	2301      	movs	r3, #1
 804736e:	e184      	b.n	804767a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8047370:	687b      	ldr	r3, [r7, #4]
 8047372:	681b      	ldr	r3, [r3, #0]
 8047374:	f003 0304 	and.w	r3, r3, #4
 8047378:	2b00      	cmp	r3, #0
 804737a:	d010      	beq.n	804739e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 804737c:	687b      	ldr	r3, [r7, #4]
 804737e:	691a      	ldr	r2, [r3, #16]
 8047380:	4b7b      	ldr	r3, [pc, #492]	; (8047570 <HAL_RCC_ClockConfig+0x244>)
 8047382:	699b      	ldr	r3, [r3, #24]
 8047384:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8047388:	429a      	cmp	r2, r3
 804738a:	d908      	bls.n	804739e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 804738c:	4b78      	ldr	r3, [pc, #480]	; (8047570 <HAL_RCC_ClockConfig+0x244>)
 804738e:	699b      	ldr	r3, [r3, #24]
 8047390:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8047394:	687b      	ldr	r3, [r7, #4]
 8047396:	691b      	ldr	r3, [r3, #16]
 8047398:	4975      	ldr	r1, [pc, #468]	; (8047570 <HAL_RCC_ClockConfig+0x244>)
 804739a:	4313      	orrs	r3, r2
 804739c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 804739e:	687b      	ldr	r3, [r7, #4]
 80473a0:	681b      	ldr	r3, [r3, #0]
 80473a2:	f003 0308 	and.w	r3, r3, #8
 80473a6:	2b00      	cmp	r3, #0
 80473a8:	d010      	beq.n	80473cc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80473aa:	687b      	ldr	r3, [r7, #4]
 80473ac:	695a      	ldr	r2, [r3, #20]
 80473ae:	4b70      	ldr	r3, [pc, #448]	; (8047570 <HAL_RCC_ClockConfig+0x244>)
 80473b0:	69db      	ldr	r3, [r3, #28]
 80473b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80473b6:	429a      	cmp	r2, r3
 80473b8:	d908      	bls.n	80473cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80473ba:	4b6d      	ldr	r3, [pc, #436]	; (8047570 <HAL_RCC_ClockConfig+0x244>)
 80473bc:	69db      	ldr	r3, [r3, #28]
 80473be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80473c2:	687b      	ldr	r3, [r7, #4]
 80473c4:	695b      	ldr	r3, [r3, #20]
 80473c6:	496a      	ldr	r1, [pc, #424]	; (8047570 <HAL_RCC_ClockConfig+0x244>)
 80473c8:	4313      	orrs	r3, r2
 80473ca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80473cc:	687b      	ldr	r3, [r7, #4]
 80473ce:	681b      	ldr	r3, [r3, #0]
 80473d0:	f003 0310 	and.w	r3, r3, #16
 80473d4:	2b00      	cmp	r3, #0
 80473d6:	d010      	beq.n	80473fa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80473d8:	687b      	ldr	r3, [r7, #4]
 80473da:	699a      	ldr	r2, [r3, #24]
 80473dc:	4b64      	ldr	r3, [pc, #400]	; (8047570 <HAL_RCC_ClockConfig+0x244>)
 80473de:	69db      	ldr	r3, [r3, #28]
 80473e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80473e4:	429a      	cmp	r2, r3
 80473e6:	d908      	bls.n	80473fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80473e8:	4b61      	ldr	r3, [pc, #388]	; (8047570 <HAL_RCC_ClockConfig+0x244>)
 80473ea:	69db      	ldr	r3, [r3, #28]
 80473ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80473f0:	687b      	ldr	r3, [r7, #4]
 80473f2:	699b      	ldr	r3, [r3, #24]
 80473f4:	495e      	ldr	r1, [pc, #376]	; (8047570 <HAL_RCC_ClockConfig+0x244>)
 80473f6:	4313      	orrs	r3, r2
 80473f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80473fa:	687b      	ldr	r3, [r7, #4]
 80473fc:	681b      	ldr	r3, [r3, #0]
 80473fe:	f003 0320 	and.w	r3, r3, #32
 8047402:	2b00      	cmp	r3, #0
 8047404:	d010      	beq.n	8047428 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8047406:	687b      	ldr	r3, [r7, #4]
 8047408:	69da      	ldr	r2, [r3, #28]
 804740a:	4b59      	ldr	r3, [pc, #356]	; (8047570 <HAL_RCC_ClockConfig+0x244>)
 804740c:	6a1b      	ldr	r3, [r3, #32]
 804740e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8047412:	429a      	cmp	r2, r3
 8047414:	d908      	bls.n	8047428 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8047416:	4b56      	ldr	r3, [pc, #344]	; (8047570 <HAL_RCC_ClockConfig+0x244>)
 8047418:	6a1b      	ldr	r3, [r3, #32]
 804741a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 804741e:	687b      	ldr	r3, [r7, #4]
 8047420:	69db      	ldr	r3, [r3, #28]
 8047422:	4953      	ldr	r1, [pc, #332]	; (8047570 <HAL_RCC_ClockConfig+0x244>)
 8047424:	4313      	orrs	r3, r2
 8047426:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8047428:	687b      	ldr	r3, [r7, #4]
 804742a:	681b      	ldr	r3, [r3, #0]
 804742c:	f003 0302 	and.w	r3, r3, #2
 8047430:	2b00      	cmp	r3, #0
 8047432:	d010      	beq.n	8047456 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8047434:	687b      	ldr	r3, [r7, #4]
 8047436:	68da      	ldr	r2, [r3, #12]
 8047438:	4b4d      	ldr	r3, [pc, #308]	; (8047570 <HAL_RCC_ClockConfig+0x244>)
 804743a:	699b      	ldr	r3, [r3, #24]
 804743c:	f003 030f 	and.w	r3, r3, #15
 8047440:	429a      	cmp	r2, r3
 8047442:	d908      	bls.n	8047456 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8047444:	4b4a      	ldr	r3, [pc, #296]	; (8047570 <HAL_RCC_ClockConfig+0x244>)
 8047446:	699b      	ldr	r3, [r3, #24]
 8047448:	f023 020f 	bic.w	r2, r3, #15
 804744c:	687b      	ldr	r3, [r7, #4]
 804744e:	68db      	ldr	r3, [r3, #12]
 8047450:	4947      	ldr	r1, [pc, #284]	; (8047570 <HAL_RCC_ClockConfig+0x244>)
 8047452:	4313      	orrs	r3, r2
 8047454:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8047456:	687b      	ldr	r3, [r7, #4]
 8047458:	681b      	ldr	r3, [r3, #0]
 804745a:	f003 0301 	and.w	r3, r3, #1
 804745e:	2b00      	cmp	r3, #0
 8047460:	d055      	beq.n	804750e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8047462:	4b43      	ldr	r3, [pc, #268]	; (8047570 <HAL_RCC_ClockConfig+0x244>)
 8047464:	699b      	ldr	r3, [r3, #24]
 8047466:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 804746a:	687b      	ldr	r3, [r7, #4]
 804746c:	689b      	ldr	r3, [r3, #8]
 804746e:	4940      	ldr	r1, [pc, #256]	; (8047570 <HAL_RCC_ClockConfig+0x244>)
 8047470:	4313      	orrs	r3, r2
 8047472:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8047474:	687b      	ldr	r3, [r7, #4]
 8047476:	685b      	ldr	r3, [r3, #4]
 8047478:	2b02      	cmp	r3, #2
 804747a:	d107      	bne.n	804748c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 804747c:	4b3c      	ldr	r3, [pc, #240]	; (8047570 <HAL_RCC_ClockConfig+0x244>)
 804747e:	681b      	ldr	r3, [r3, #0]
 8047480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8047484:	2b00      	cmp	r3, #0
 8047486:	d121      	bne.n	80474cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8047488:	2301      	movs	r3, #1
 804748a:	e0f6      	b.n	804767a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 804748c:	687b      	ldr	r3, [r7, #4]
 804748e:	685b      	ldr	r3, [r3, #4]
 8047490:	2b03      	cmp	r3, #3
 8047492:	d107      	bne.n	80474a4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8047494:	4b36      	ldr	r3, [pc, #216]	; (8047570 <HAL_RCC_ClockConfig+0x244>)
 8047496:	681b      	ldr	r3, [r3, #0]
 8047498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 804749c:	2b00      	cmp	r3, #0
 804749e:	d115      	bne.n	80474cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80474a0:	2301      	movs	r3, #1
 80474a2:	e0ea      	b.n	804767a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80474a4:	687b      	ldr	r3, [r7, #4]
 80474a6:	685b      	ldr	r3, [r3, #4]
 80474a8:	2b01      	cmp	r3, #1
 80474aa:	d107      	bne.n	80474bc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80474ac:	4b30      	ldr	r3, [pc, #192]	; (8047570 <HAL_RCC_ClockConfig+0x244>)
 80474ae:	681b      	ldr	r3, [r3, #0]
 80474b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80474b4:	2b00      	cmp	r3, #0
 80474b6:	d109      	bne.n	80474cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80474b8:	2301      	movs	r3, #1
 80474ba:	e0de      	b.n	804767a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80474bc:	4b2c      	ldr	r3, [pc, #176]	; (8047570 <HAL_RCC_ClockConfig+0x244>)
 80474be:	681b      	ldr	r3, [r3, #0]
 80474c0:	f003 0304 	and.w	r3, r3, #4
 80474c4:	2b00      	cmp	r3, #0
 80474c6:	d101      	bne.n	80474cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80474c8:	2301      	movs	r3, #1
 80474ca:	e0d6      	b.n	804767a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80474cc:	4b28      	ldr	r3, [pc, #160]	; (8047570 <HAL_RCC_ClockConfig+0x244>)
 80474ce:	691b      	ldr	r3, [r3, #16]
 80474d0:	f023 0207 	bic.w	r2, r3, #7
 80474d4:	687b      	ldr	r3, [r7, #4]
 80474d6:	685b      	ldr	r3, [r3, #4]
 80474d8:	4925      	ldr	r1, [pc, #148]	; (8047570 <HAL_RCC_ClockConfig+0x244>)
 80474da:	4313      	orrs	r3, r2
 80474dc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80474de:	f7fa fdfd 	bl	80420dc <HAL_GetTick>
 80474e2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80474e4:	e00a      	b.n	80474fc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80474e6:	f7fa fdf9 	bl	80420dc <HAL_GetTick>
 80474ea:	4602      	mov	r2, r0
 80474ec:	697b      	ldr	r3, [r7, #20]
 80474ee:	1ad3      	subs	r3, r2, r3
 80474f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80474f4:	4293      	cmp	r3, r2
 80474f6:	d901      	bls.n	80474fc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80474f8:	2303      	movs	r3, #3
 80474fa:	e0be      	b.n	804767a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80474fc:	4b1c      	ldr	r3, [pc, #112]	; (8047570 <HAL_RCC_ClockConfig+0x244>)
 80474fe:	691b      	ldr	r3, [r3, #16]
 8047500:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8047504:	687b      	ldr	r3, [r7, #4]
 8047506:	685b      	ldr	r3, [r3, #4]
 8047508:	00db      	lsls	r3, r3, #3
 804750a:	429a      	cmp	r2, r3
 804750c:	d1eb      	bne.n	80474e6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 804750e:	687b      	ldr	r3, [r7, #4]
 8047510:	681b      	ldr	r3, [r3, #0]
 8047512:	f003 0302 	and.w	r3, r3, #2
 8047516:	2b00      	cmp	r3, #0
 8047518:	d010      	beq.n	804753c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 804751a:	687b      	ldr	r3, [r7, #4]
 804751c:	68da      	ldr	r2, [r3, #12]
 804751e:	4b14      	ldr	r3, [pc, #80]	; (8047570 <HAL_RCC_ClockConfig+0x244>)
 8047520:	699b      	ldr	r3, [r3, #24]
 8047522:	f003 030f 	and.w	r3, r3, #15
 8047526:	429a      	cmp	r2, r3
 8047528:	d208      	bcs.n	804753c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 804752a:	4b11      	ldr	r3, [pc, #68]	; (8047570 <HAL_RCC_ClockConfig+0x244>)
 804752c:	699b      	ldr	r3, [r3, #24]
 804752e:	f023 020f 	bic.w	r2, r3, #15
 8047532:	687b      	ldr	r3, [r7, #4]
 8047534:	68db      	ldr	r3, [r3, #12]
 8047536:	490e      	ldr	r1, [pc, #56]	; (8047570 <HAL_RCC_ClockConfig+0x244>)
 8047538:	4313      	orrs	r3, r2
 804753a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 804753c:	4b0b      	ldr	r3, [pc, #44]	; (804756c <HAL_RCC_ClockConfig+0x240>)
 804753e:	681b      	ldr	r3, [r3, #0]
 8047540:	f003 030f 	and.w	r3, r3, #15
 8047544:	683a      	ldr	r2, [r7, #0]
 8047546:	429a      	cmp	r2, r3
 8047548:	d214      	bcs.n	8047574 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 804754a:	4b08      	ldr	r3, [pc, #32]	; (804756c <HAL_RCC_ClockConfig+0x240>)
 804754c:	681b      	ldr	r3, [r3, #0]
 804754e:	f023 020f 	bic.w	r2, r3, #15
 8047552:	4906      	ldr	r1, [pc, #24]	; (804756c <HAL_RCC_ClockConfig+0x240>)
 8047554:	683b      	ldr	r3, [r7, #0]
 8047556:	4313      	orrs	r3, r2
 8047558:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 804755a:	4b04      	ldr	r3, [pc, #16]	; (804756c <HAL_RCC_ClockConfig+0x240>)
 804755c:	681b      	ldr	r3, [r3, #0]
 804755e:	f003 030f 	and.w	r3, r3, #15
 8047562:	683a      	ldr	r2, [r7, #0]
 8047564:	429a      	cmp	r2, r3
 8047566:	d005      	beq.n	8047574 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8047568:	2301      	movs	r3, #1
 804756a:	e086      	b.n	804767a <HAL_RCC_ClockConfig+0x34e>
 804756c:	52002000 	.word	0x52002000
 8047570:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8047574:	687b      	ldr	r3, [r7, #4]
 8047576:	681b      	ldr	r3, [r3, #0]
 8047578:	f003 0304 	and.w	r3, r3, #4
 804757c:	2b00      	cmp	r3, #0
 804757e:	d010      	beq.n	80475a2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8047580:	687b      	ldr	r3, [r7, #4]
 8047582:	691a      	ldr	r2, [r3, #16]
 8047584:	4b3f      	ldr	r3, [pc, #252]	; (8047684 <HAL_RCC_ClockConfig+0x358>)
 8047586:	699b      	ldr	r3, [r3, #24]
 8047588:	f003 0370 	and.w	r3, r3, #112	; 0x70
 804758c:	429a      	cmp	r2, r3
 804758e:	d208      	bcs.n	80475a2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8047590:	4b3c      	ldr	r3, [pc, #240]	; (8047684 <HAL_RCC_ClockConfig+0x358>)
 8047592:	699b      	ldr	r3, [r3, #24]
 8047594:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8047598:	687b      	ldr	r3, [r7, #4]
 804759a:	691b      	ldr	r3, [r3, #16]
 804759c:	4939      	ldr	r1, [pc, #228]	; (8047684 <HAL_RCC_ClockConfig+0x358>)
 804759e:	4313      	orrs	r3, r2
 80475a0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80475a2:	687b      	ldr	r3, [r7, #4]
 80475a4:	681b      	ldr	r3, [r3, #0]
 80475a6:	f003 0308 	and.w	r3, r3, #8
 80475aa:	2b00      	cmp	r3, #0
 80475ac:	d010      	beq.n	80475d0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80475ae:	687b      	ldr	r3, [r7, #4]
 80475b0:	695a      	ldr	r2, [r3, #20]
 80475b2:	4b34      	ldr	r3, [pc, #208]	; (8047684 <HAL_RCC_ClockConfig+0x358>)
 80475b4:	69db      	ldr	r3, [r3, #28]
 80475b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80475ba:	429a      	cmp	r2, r3
 80475bc:	d208      	bcs.n	80475d0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80475be:	4b31      	ldr	r3, [pc, #196]	; (8047684 <HAL_RCC_ClockConfig+0x358>)
 80475c0:	69db      	ldr	r3, [r3, #28]
 80475c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80475c6:	687b      	ldr	r3, [r7, #4]
 80475c8:	695b      	ldr	r3, [r3, #20]
 80475ca:	492e      	ldr	r1, [pc, #184]	; (8047684 <HAL_RCC_ClockConfig+0x358>)
 80475cc:	4313      	orrs	r3, r2
 80475ce:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80475d0:	687b      	ldr	r3, [r7, #4]
 80475d2:	681b      	ldr	r3, [r3, #0]
 80475d4:	f003 0310 	and.w	r3, r3, #16
 80475d8:	2b00      	cmp	r3, #0
 80475da:	d010      	beq.n	80475fe <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80475dc:	687b      	ldr	r3, [r7, #4]
 80475de:	699a      	ldr	r2, [r3, #24]
 80475e0:	4b28      	ldr	r3, [pc, #160]	; (8047684 <HAL_RCC_ClockConfig+0x358>)
 80475e2:	69db      	ldr	r3, [r3, #28]
 80475e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80475e8:	429a      	cmp	r2, r3
 80475ea:	d208      	bcs.n	80475fe <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80475ec:	4b25      	ldr	r3, [pc, #148]	; (8047684 <HAL_RCC_ClockConfig+0x358>)
 80475ee:	69db      	ldr	r3, [r3, #28]
 80475f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80475f4:	687b      	ldr	r3, [r7, #4]
 80475f6:	699b      	ldr	r3, [r3, #24]
 80475f8:	4922      	ldr	r1, [pc, #136]	; (8047684 <HAL_RCC_ClockConfig+0x358>)
 80475fa:	4313      	orrs	r3, r2
 80475fc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80475fe:	687b      	ldr	r3, [r7, #4]
 8047600:	681b      	ldr	r3, [r3, #0]
 8047602:	f003 0320 	and.w	r3, r3, #32
 8047606:	2b00      	cmp	r3, #0
 8047608:	d010      	beq.n	804762c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 804760a:	687b      	ldr	r3, [r7, #4]
 804760c:	69da      	ldr	r2, [r3, #28]
 804760e:	4b1d      	ldr	r3, [pc, #116]	; (8047684 <HAL_RCC_ClockConfig+0x358>)
 8047610:	6a1b      	ldr	r3, [r3, #32]
 8047612:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8047616:	429a      	cmp	r2, r3
 8047618:	d208      	bcs.n	804762c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 804761a:	4b1a      	ldr	r3, [pc, #104]	; (8047684 <HAL_RCC_ClockConfig+0x358>)
 804761c:	6a1b      	ldr	r3, [r3, #32]
 804761e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8047622:	687b      	ldr	r3, [r7, #4]
 8047624:	69db      	ldr	r3, [r3, #28]
 8047626:	4917      	ldr	r1, [pc, #92]	; (8047684 <HAL_RCC_ClockConfig+0x358>)
 8047628:	4313      	orrs	r3, r2
 804762a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 804762c:	f000 f834 	bl	8047698 <HAL_RCC_GetSysClockFreq>
 8047630:	4602      	mov	r2, r0
 8047632:	4b14      	ldr	r3, [pc, #80]	; (8047684 <HAL_RCC_ClockConfig+0x358>)
 8047634:	699b      	ldr	r3, [r3, #24]
 8047636:	0a1b      	lsrs	r3, r3, #8
 8047638:	f003 030f 	and.w	r3, r3, #15
 804763c:	4912      	ldr	r1, [pc, #72]	; (8047688 <HAL_RCC_ClockConfig+0x35c>)
 804763e:	5ccb      	ldrb	r3, [r1, r3]
 8047640:	f003 031f 	and.w	r3, r3, #31
 8047644:	fa22 f303 	lsr.w	r3, r2, r3
 8047648:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 804764a:	4b0e      	ldr	r3, [pc, #56]	; (8047684 <HAL_RCC_ClockConfig+0x358>)
 804764c:	699b      	ldr	r3, [r3, #24]
 804764e:	f003 030f 	and.w	r3, r3, #15
 8047652:	4a0d      	ldr	r2, [pc, #52]	; (8047688 <HAL_RCC_ClockConfig+0x35c>)
 8047654:	5cd3      	ldrb	r3, [r2, r3]
 8047656:	f003 031f 	and.w	r3, r3, #31
 804765a:	693a      	ldr	r2, [r7, #16]
 804765c:	fa22 f303 	lsr.w	r3, r2, r3
 8047660:	4a0a      	ldr	r2, [pc, #40]	; (804768c <HAL_RCC_ClockConfig+0x360>)
 8047662:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8047664:	4a0a      	ldr	r2, [pc, #40]	; (8047690 <HAL_RCC_ClockConfig+0x364>)
 8047666:	693b      	ldr	r3, [r7, #16]
 8047668:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 804766a:	4b0a      	ldr	r3, [pc, #40]	; (8047694 <HAL_RCC_ClockConfig+0x368>)
 804766c:	681b      	ldr	r3, [r3, #0]
 804766e:	4618      	mov	r0, r3
 8047670:	f7fa fb0a 	bl	8041c88 <HAL_InitTick>
 8047674:	4603      	mov	r3, r0
 8047676:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8047678:	7bfb      	ldrb	r3, [r7, #15]
}
 804767a:	4618      	mov	r0, r3
 804767c:	3718      	adds	r7, #24
 804767e:	46bd      	mov	sp, r7
 8047680:	bd80      	pop	{r7, pc}
 8047682:	bf00      	nop
 8047684:	58024400 	.word	0x58024400
 8047688:	0805b950 	.word	0x0805b950
 804768c:	24000004 	.word	0x24000004
 8047690:	24000000 	.word	0x24000000
 8047694:	24000008 	.word	0x24000008

08047698 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8047698:	b480      	push	{r7}
 804769a:	b089      	sub	sp, #36	; 0x24
 804769c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 804769e:	4bb3      	ldr	r3, [pc, #716]	; (804796c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80476a0:	691b      	ldr	r3, [r3, #16]
 80476a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80476a6:	2b18      	cmp	r3, #24
 80476a8:	f200 8155 	bhi.w	8047956 <HAL_RCC_GetSysClockFreq+0x2be>
 80476ac:	a201      	add	r2, pc, #4	; (adr r2, 80476b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80476ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80476b2:	bf00      	nop
 80476b4:	08047719 	.word	0x08047719
 80476b8:	08047957 	.word	0x08047957
 80476bc:	08047957 	.word	0x08047957
 80476c0:	08047957 	.word	0x08047957
 80476c4:	08047957 	.word	0x08047957
 80476c8:	08047957 	.word	0x08047957
 80476cc:	08047957 	.word	0x08047957
 80476d0:	08047957 	.word	0x08047957
 80476d4:	0804773f 	.word	0x0804773f
 80476d8:	08047957 	.word	0x08047957
 80476dc:	08047957 	.word	0x08047957
 80476e0:	08047957 	.word	0x08047957
 80476e4:	08047957 	.word	0x08047957
 80476e8:	08047957 	.word	0x08047957
 80476ec:	08047957 	.word	0x08047957
 80476f0:	08047957 	.word	0x08047957
 80476f4:	08047745 	.word	0x08047745
 80476f8:	08047957 	.word	0x08047957
 80476fc:	08047957 	.word	0x08047957
 8047700:	08047957 	.word	0x08047957
 8047704:	08047957 	.word	0x08047957
 8047708:	08047957 	.word	0x08047957
 804770c:	08047957 	.word	0x08047957
 8047710:	08047957 	.word	0x08047957
 8047714:	0804774b 	.word	0x0804774b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8047718:	4b94      	ldr	r3, [pc, #592]	; (804796c <HAL_RCC_GetSysClockFreq+0x2d4>)
 804771a:	681b      	ldr	r3, [r3, #0]
 804771c:	f003 0320 	and.w	r3, r3, #32
 8047720:	2b00      	cmp	r3, #0
 8047722:	d009      	beq.n	8047738 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8047724:	4b91      	ldr	r3, [pc, #580]	; (804796c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8047726:	681b      	ldr	r3, [r3, #0]
 8047728:	08db      	lsrs	r3, r3, #3
 804772a:	f003 0303 	and.w	r3, r3, #3
 804772e:	4a90      	ldr	r2, [pc, #576]	; (8047970 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8047730:	fa22 f303 	lsr.w	r3, r2, r3
 8047734:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8047736:	e111      	b.n	804795c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8047738:	4b8d      	ldr	r3, [pc, #564]	; (8047970 <HAL_RCC_GetSysClockFreq+0x2d8>)
 804773a:	61bb      	str	r3, [r7, #24]
    break;
 804773c:	e10e      	b.n	804795c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 804773e:	4b8d      	ldr	r3, [pc, #564]	; (8047974 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8047740:	61bb      	str	r3, [r7, #24]
    break;
 8047742:	e10b      	b.n	804795c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8047744:	4b8c      	ldr	r3, [pc, #560]	; (8047978 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8047746:	61bb      	str	r3, [r7, #24]
    break;
 8047748:	e108      	b.n	804795c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 804774a:	4b88      	ldr	r3, [pc, #544]	; (804796c <HAL_RCC_GetSysClockFreq+0x2d4>)
 804774c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804774e:	f003 0303 	and.w	r3, r3, #3
 8047752:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8047754:	4b85      	ldr	r3, [pc, #532]	; (804796c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8047756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8047758:	091b      	lsrs	r3, r3, #4
 804775a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 804775e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8047760:	4b82      	ldr	r3, [pc, #520]	; (804796c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8047762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8047764:	f003 0301 	and.w	r3, r3, #1
 8047768:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 804776a:	4b80      	ldr	r3, [pc, #512]	; (804796c <HAL_RCC_GetSysClockFreq+0x2d4>)
 804776c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 804776e:	08db      	lsrs	r3, r3, #3
 8047770:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8047774:	68fa      	ldr	r2, [r7, #12]
 8047776:	fb02 f303 	mul.w	r3, r2, r3
 804777a:	ee07 3a90 	vmov	s15, r3
 804777e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8047782:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8047786:	693b      	ldr	r3, [r7, #16]
 8047788:	2b00      	cmp	r3, #0
 804778a:	f000 80e1 	beq.w	8047950 <HAL_RCC_GetSysClockFreq+0x2b8>
 804778e:	697b      	ldr	r3, [r7, #20]
 8047790:	2b02      	cmp	r3, #2
 8047792:	f000 8083 	beq.w	804789c <HAL_RCC_GetSysClockFreq+0x204>
 8047796:	697b      	ldr	r3, [r7, #20]
 8047798:	2b02      	cmp	r3, #2
 804779a:	f200 80a1 	bhi.w	80478e0 <HAL_RCC_GetSysClockFreq+0x248>
 804779e:	697b      	ldr	r3, [r7, #20]
 80477a0:	2b00      	cmp	r3, #0
 80477a2:	d003      	beq.n	80477ac <HAL_RCC_GetSysClockFreq+0x114>
 80477a4:	697b      	ldr	r3, [r7, #20]
 80477a6:	2b01      	cmp	r3, #1
 80477a8:	d056      	beq.n	8047858 <HAL_RCC_GetSysClockFreq+0x1c0>
 80477aa:	e099      	b.n	80478e0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80477ac:	4b6f      	ldr	r3, [pc, #444]	; (804796c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80477ae:	681b      	ldr	r3, [r3, #0]
 80477b0:	f003 0320 	and.w	r3, r3, #32
 80477b4:	2b00      	cmp	r3, #0
 80477b6:	d02d      	beq.n	8047814 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80477b8:	4b6c      	ldr	r3, [pc, #432]	; (804796c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80477ba:	681b      	ldr	r3, [r3, #0]
 80477bc:	08db      	lsrs	r3, r3, #3
 80477be:	f003 0303 	and.w	r3, r3, #3
 80477c2:	4a6b      	ldr	r2, [pc, #428]	; (8047970 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80477c4:	fa22 f303 	lsr.w	r3, r2, r3
 80477c8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80477ca:	687b      	ldr	r3, [r7, #4]
 80477cc:	ee07 3a90 	vmov	s15, r3
 80477d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80477d4:	693b      	ldr	r3, [r7, #16]
 80477d6:	ee07 3a90 	vmov	s15, r3
 80477da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80477de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80477e2:	4b62      	ldr	r3, [pc, #392]	; (804796c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80477e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80477e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80477ea:	ee07 3a90 	vmov	s15, r3
 80477ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80477f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80477f6:	eddf 5a61 	vldr	s11, [pc, #388]	; 804797c <HAL_RCC_GetSysClockFreq+0x2e4>
 80477fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80477fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8047802:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8047806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 804780a:	ee67 7a27 	vmul.f32	s15, s14, s15
 804780e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8047812:	e087      	b.n	8047924 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8047814:	693b      	ldr	r3, [r7, #16]
 8047816:	ee07 3a90 	vmov	s15, r3
 804781a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 804781e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8047980 <HAL_RCC_GetSysClockFreq+0x2e8>
 8047822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8047826:	4b51      	ldr	r3, [pc, #324]	; (804796c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8047828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804782a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 804782e:	ee07 3a90 	vmov	s15, r3
 8047832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8047836:	ed97 6a02 	vldr	s12, [r7, #8]
 804783a:	eddf 5a50 	vldr	s11, [pc, #320]	; 804797c <HAL_RCC_GetSysClockFreq+0x2e4>
 804783e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8047842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8047846:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 804784a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 804784e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8047852:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8047856:	e065      	b.n	8047924 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8047858:	693b      	ldr	r3, [r7, #16]
 804785a:	ee07 3a90 	vmov	s15, r3
 804785e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8047862:	eddf 6a48 	vldr	s13, [pc, #288]	; 8047984 <HAL_RCC_GetSysClockFreq+0x2ec>
 8047866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 804786a:	4b40      	ldr	r3, [pc, #256]	; (804796c <HAL_RCC_GetSysClockFreq+0x2d4>)
 804786c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804786e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8047872:	ee07 3a90 	vmov	s15, r3
 8047876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 804787a:	ed97 6a02 	vldr	s12, [r7, #8]
 804787e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 804797c <HAL_RCC_GetSysClockFreq+0x2e4>
 8047882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8047886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 804788a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 804788e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8047892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8047896:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 804789a:	e043      	b.n	8047924 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 804789c:	693b      	ldr	r3, [r7, #16]
 804789e:	ee07 3a90 	vmov	s15, r3
 80478a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80478a6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8047988 <HAL_RCC_GetSysClockFreq+0x2f0>
 80478aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80478ae:	4b2f      	ldr	r3, [pc, #188]	; (804796c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80478b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80478b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80478b6:	ee07 3a90 	vmov	s15, r3
 80478ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80478be:	ed97 6a02 	vldr	s12, [r7, #8]
 80478c2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 804797c <HAL_RCC_GetSysClockFreq+0x2e4>
 80478c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80478ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80478ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80478d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80478d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80478da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80478de:	e021      	b.n	8047924 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80478e0:	693b      	ldr	r3, [r7, #16]
 80478e2:	ee07 3a90 	vmov	s15, r3
 80478e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80478ea:	eddf 6a26 	vldr	s13, [pc, #152]	; 8047984 <HAL_RCC_GetSysClockFreq+0x2ec>
 80478ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80478f2:	4b1e      	ldr	r3, [pc, #120]	; (804796c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80478f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80478f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80478fa:	ee07 3a90 	vmov	s15, r3
 80478fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8047902:	ed97 6a02 	vldr	s12, [r7, #8]
 8047906:	eddf 5a1d 	vldr	s11, [pc, #116]	; 804797c <HAL_RCC_GetSysClockFreq+0x2e4>
 804790a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 804790e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8047912:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8047916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 804791a:	ee67 7a27 	vmul.f32	s15, s14, s15
 804791e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8047922:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8047924:	4b11      	ldr	r3, [pc, #68]	; (804796c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8047926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047928:	0a5b      	lsrs	r3, r3, #9
 804792a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 804792e:	3301      	adds	r3, #1
 8047930:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8047932:	683b      	ldr	r3, [r7, #0]
 8047934:	ee07 3a90 	vmov	s15, r3
 8047938:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 804793c:	edd7 6a07 	vldr	s13, [r7, #28]
 8047940:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8047944:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8047948:	ee17 3a90 	vmov	r3, s15
 804794c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 804794e:	e005      	b.n	804795c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8047950:	2300      	movs	r3, #0
 8047952:	61bb      	str	r3, [r7, #24]
    break;
 8047954:	e002      	b.n	804795c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8047956:	4b07      	ldr	r3, [pc, #28]	; (8047974 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8047958:	61bb      	str	r3, [r7, #24]
    break;
 804795a:	bf00      	nop
  }

  return sysclockfreq;
 804795c:	69bb      	ldr	r3, [r7, #24]
}
 804795e:	4618      	mov	r0, r3
 8047960:	3724      	adds	r7, #36	; 0x24
 8047962:	46bd      	mov	sp, r7
 8047964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047968:	4770      	bx	lr
 804796a:	bf00      	nop
 804796c:	58024400 	.word	0x58024400
 8047970:	03d09000 	.word	0x03d09000
 8047974:	003d0900 	.word	0x003d0900
 8047978:	007a1200 	.word	0x007a1200
 804797c:	46000000 	.word	0x46000000
 8047980:	4c742400 	.word	0x4c742400
 8047984:	4a742400 	.word	0x4a742400
 8047988:	4af42400 	.word	0x4af42400

0804798c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 804798c:	b580      	push	{r7, lr}
 804798e:	b082      	sub	sp, #8
 8047990:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8047992:	f7ff fe81 	bl	8047698 <HAL_RCC_GetSysClockFreq>
 8047996:	4602      	mov	r2, r0
 8047998:	4b10      	ldr	r3, [pc, #64]	; (80479dc <HAL_RCC_GetHCLKFreq+0x50>)
 804799a:	699b      	ldr	r3, [r3, #24]
 804799c:	0a1b      	lsrs	r3, r3, #8
 804799e:	f003 030f 	and.w	r3, r3, #15
 80479a2:	490f      	ldr	r1, [pc, #60]	; (80479e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80479a4:	5ccb      	ldrb	r3, [r1, r3]
 80479a6:	f003 031f 	and.w	r3, r3, #31
 80479aa:	fa22 f303 	lsr.w	r3, r2, r3
 80479ae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80479b0:	4b0a      	ldr	r3, [pc, #40]	; (80479dc <HAL_RCC_GetHCLKFreq+0x50>)
 80479b2:	699b      	ldr	r3, [r3, #24]
 80479b4:	f003 030f 	and.w	r3, r3, #15
 80479b8:	4a09      	ldr	r2, [pc, #36]	; (80479e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80479ba:	5cd3      	ldrb	r3, [r2, r3]
 80479bc:	f003 031f 	and.w	r3, r3, #31
 80479c0:	687a      	ldr	r2, [r7, #4]
 80479c2:	fa22 f303 	lsr.w	r3, r2, r3
 80479c6:	4a07      	ldr	r2, [pc, #28]	; (80479e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80479c8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80479ca:	4a07      	ldr	r2, [pc, #28]	; (80479e8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80479cc:	687b      	ldr	r3, [r7, #4]
 80479ce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80479d0:	4b04      	ldr	r3, [pc, #16]	; (80479e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80479d2:	681b      	ldr	r3, [r3, #0]
}
 80479d4:	4618      	mov	r0, r3
 80479d6:	3708      	adds	r7, #8
 80479d8:	46bd      	mov	sp, r7
 80479da:	bd80      	pop	{r7, pc}
 80479dc:	58024400 	.word	0x58024400
 80479e0:	0805b950 	.word	0x0805b950
 80479e4:	24000004 	.word	0x24000004
 80479e8:	24000000 	.word	0x24000000

080479ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80479ec:	b580      	push	{r7, lr}
 80479ee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80479f0:	f7ff ffcc 	bl	804798c <HAL_RCC_GetHCLKFreq>
 80479f4:	4602      	mov	r2, r0
 80479f6:	4b06      	ldr	r3, [pc, #24]	; (8047a10 <HAL_RCC_GetPCLK1Freq+0x24>)
 80479f8:	69db      	ldr	r3, [r3, #28]
 80479fa:	091b      	lsrs	r3, r3, #4
 80479fc:	f003 0307 	and.w	r3, r3, #7
 8047a00:	4904      	ldr	r1, [pc, #16]	; (8047a14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8047a02:	5ccb      	ldrb	r3, [r1, r3]
 8047a04:	f003 031f 	and.w	r3, r3, #31
 8047a08:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8047a0c:	4618      	mov	r0, r3
 8047a0e:	bd80      	pop	{r7, pc}
 8047a10:	58024400 	.word	0x58024400
 8047a14:	0805b950 	.word	0x0805b950

08047a18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8047a18:	b580      	push	{r7, lr}
 8047a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8047a1c:	f7ff ffb6 	bl	804798c <HAL_RCC_GetHCLKFreq>
 8047a20:	4602      	mov	r2, r0
 8047a22:	4b06      	ldr	r3, [pc, #24]	; (8047a3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8047a24:	69db      	ldr	r3, [r3, #28]
 8047a26:	0a1b      	lsrs	r3, r3, #8
 8047a28:	f003 0307 	and.w	r3, r3, #7
 8047a2c:	4904      	ldr	r1, [pc, #16]	; (8047a40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8047a2e:	5ccb      	ldrb	r3, [r1, r3]
 8047a30:	f003 031f 	and.w	r3, r3, #31
 8047a34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8047a38:	4618      	mov	r0, r3
 8047a3a:	bd80      	pop	{r7, pc}
 8047a3c:	58024400 	.word	0x58024400
 8047a40:	0805b950 	.word	0x0805b950

08047a44 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8047a44:	b480      	push	{r7}
 8047a46:	b083      	sub	sp, #12
 8047a48:	af00      	add	r7, sp, #0
 8047a4a:	6078      	str	r0, [r7, #4]
 8047a4c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8047a4e:	687b      	ldr	r3, [r7, #4]
 8047a50:	223f      	movs	r2, #63	; 0x3f
 8047a52:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8047a54:	4b1a      	ldr	r3, [pc, #104]	; (8047ac0 <HAL_RCC_GetClockConfig+0x7c>)
 8047a56:	691b      	ldr	r3, [r3, #16]
 8047a58:	f003 0207 	and.w	r2, r3, #7
 8047a5c:	687b      	ldr	r3, [r7, #4]
 8047a5e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8047a60:	4b17      	ldr	r3, [pc, #92]	; (8047ac0 <HAL_RCC_GetClockConfig+0x7c>)
 8047a62:	699b      	ldr	r3, [r3, #24]
 8047a64:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8047a68:	687b      	ldr	r3, [r7, #4]
 8047a6a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8047a6c:	4b14      	ldr	r3, [pc, #80]	; (8047ac0 <HAL_RCC_GetClockConfig+0x7c>)
 8047a6e:	699b      	ldr	r3, [r3, #24]
 8047a70:	f003 020f 	and.w	r2, r3, #15
 8047a74:	687b      	ldr	r3, [r7, #4]
 8047a76:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8047a78:	4b11      	ldr	r3, [pc, #68]	; (8047ac0 <HAL_RCC_GetClockConfig+0x7c>)
 8047a7a:	699b      	ldr	r3, [r3, #24]
 8047a7c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8047a80:	687b      	ldr	r3, [r7, #4]
 8047a82:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8047a84:	4b0e      	ldr	r3, [pc, #56]	; (8047ac0 <HAL_RCC_GetClockConfig+0x7c>)
 8047a86:	69db      	ldr	r3, [r3, #28]
 8047a88:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8047a8c:	687b      	ldr	r3, [r7, #4]
 8047a8e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8047a90:	4b0b      	ldr	r3, [pc, #44]	; (8047ac0 <HAL_RCC_GetClockConfig+0x7c>)
 8047a92:	69db      	ldr	r3, [r3, #28]
 8047a94:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8047a98:	687b      	ldr	r3, [r7, #4]
 8047a9a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8047a9c:	4b08      	ldr	r3, [pc, #32]	; (8047ac0 <HAL_RCC_GetClockConfig+0x7c>)
 8047a9e:	6a1b      	ldr	r3, [r3, #32]
 8047aa0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8047aa4:	687b      	ldr	r3, [r7, #4]
 8047aa6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8047aa8:	4b06      	ldr	r3, [pc, #24]	; (8047ac4 <HAL_RCC_GetClockConfig+0x80>)
 8047aaa:	681b      	ldr	r3, [r3, #0]
 8047aac:	f003 020f 	and.w	r2, r3, #15
 8047ab0:	683b      	ldr	r3, [r7, #0]
 8047ab2:	601a      	str	r2, [r3, #0]
}
 8047ab4:	bf00      	nop
 8047ab6:	370c      	adds	r7, #12
 8047ab8:	46bd      	mov	sp, r7
 8047aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047abe:	4770      	bx	lr
 8047ac0:	58024400 	.word	0x58024400
 8047ac4:	52002000 	.word	0x52002000

08047ac8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8047ac8:	b580      	push	{r7, lr}
 8047aca:	b086      	sub	sp, #24
 8047acc:	af00      	add	r7, sp, #0
 8047ace:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8047ad0:	2300      	movs	r3, #0
 8047ad2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8047ad4:	2300      	movs	r3, #0
 8047ad6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8047ad8:	687b      	ldr	r3, [r7, #4]
 8047ada:	681b      	ldr	r3, [r3, #0]
 8047adc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8047ae0:	2b00      	cmp	r3, #0
 8047ae2:	d03f      	beq.n	8047b64 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8047ae4:	687b      	ldr	r3, [r7, #4]
 8047ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8047ae8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8047aec:	d02a      	beq.n	8047b44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8047aee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8047af2:	d824      	bhi.n	8047b3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8047af4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8047af8:	d018      	beq.n	8047b2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8047afa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8047afe:	d81e      	bhi.n	8047b3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8047b00:	2b00      	cmp	r3, #0
 8047b02:	d003      	beq.n	8047b0c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8047b04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8047b08:	d007      	beq.n	8047b1a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8047b0a:	e018      	b.n	8047b3e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8047b0c:	4ba4      	ldr	r3, [pc, #656]	; (8047da0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8047b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8047b10:	4aa3      	ldr	r2, [pc, #652]	; (8047da0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8047b12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8047b16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8047b18:	e015      	b.n	8047b46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8047b1a:	687b      	ldr	r3, [r7, #4]
 8047b1c:	3304      	adds	r3, #4
 8047b1e:	2102      	movs	r1, #2
 8047b20:	4618      	mov	r0, r3
 8047b22:	f001 f989 	bl	8048e38 <RCCEx_PLL2_Config>
 8047b26:	4603      	mov	r3, r0
 8047b28:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8047b2a:	e00c      	b.n	8047b46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8047b2c:	687b      	ldr	r3, [r7, #4]
 8047b2e:	3324      	adds	r3, #36	; 0x24
 8047b30:	2102      	movs	r1, #2
 8047b32:	4618      	mov	r0, r3
 8047b34:	f001 fa32 	bl	8048f9c <RCCEx_PLL3_Config>
 8047b38:	4603      	mov	r3, r0
 8047b3a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8047b3c:	e003      	b.n	8047b46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8047b3e:	2301      	movs	r3, #1
 8047b40:	75fb      	strb	r3, [r7, #23]
      break;
 8047b42:	e000      	b.n	8047b46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8047b44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8047b46:	7dfb      	ldrb	r3, [r7, #23]
 8047b48:	2b00      	cmp	r3, #0
 8047b4a:	d109      	bne.n	8047b60 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8047b4c:	4b94      	ldr	r3, [pc, #592]	; (8047da0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8047b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8047b50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8047b54:	687b      	ldr	r3, [r7, #4]
 8047b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8047b58:	4991      	ldr	r1, [pc, #580]	; (8047da0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8047b5a:	4313      	orrs	r3, r2
 8047b5c:	650b      	str	r3, [r1, #80]	; 0x50
 8047b5e:	e001      	b.n	8047b64 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8047b60:	7dfb      	ldrb	r3, [r7, #23]
 8047b62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8047b64:	687b      	ldr	r3, [r7, #4]
 8047b66:	681b      	ldr	r3, [r3, #0]
 8047b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8047b6c:	2b00      	cmp	r3, #0
 8047b6e:	d03d      	beq.n	8047bec <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8047b70:	687b      	ldr	r3, [r7, #4]
 8047b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8047b74:	2b04      	cmp	r3, #4
 8047b76:	d826      	bhi.n	8047bc6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8047b78:	a201      	add	r2, pc, #4	; (adr r2, 8047b80 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8047b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8047b7e:	bf00      	nop
 8047b80:	08047b95 	.word	0x08047b95
 8047b84:	08047ba3 	.word	0x08047ba3
 8047b88:	08047bb5 	.word	0x08047bb5
 8047b8c:	08047bcd 	.word	0x08047bcd
 8047b90:	08047bcd 	.word	0x08047bcd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8047b94:	4b82      	ldr	r3, [pc, #520]	; (8047da0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8047b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8047b98:	4a81      	ldr	r2, [pc, #516]	; (8047da0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8047b9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8047b9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8047ba0:	e015      	b.n	8047bce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8047ba2:	687b      	ldr	r3, [r7, #4]
 8047ba4:	3304      	adds	r3, #4
 8047ba6:	2100      	movs	r1, #0
 8047ba8:	4618      	mov	r0, r3
 8047baa:	f001 f945 	bl	8048e38 <RCCEx_PLL2_Config>
 8047bae:	4603      	mov	r3, r0
 8047bb0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8047bb2:	e00c      	b.n	8047bce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8047bb4:	687b      	ldr	r3, [r7, #4]
 8047bb6:	3324      	adds	r3, #36	; 0x24
 8047bb8:	2100      	movs	r1, #0
 8047bba:	4618      	mov	r0, r3
 8047bbc:	f001 f9ee 	bl	8048f9c <RCCEx_PLL3_Config>
 8047bc0:	4603      	mov	r3, r0
 8047bc2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8047bc4:	e003      	b.n	8047bce <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8047bc6:	2301      	movs	r3, #1
 8047bc8:	75fb      	strb	r3, [r7, #23]
      break;
 8047bca:	e000      	b.n	8047bce <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8047bcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8047bce:	7dfb      	ldrb	r3, [r7, #23]
 8047bd0:	2b00      	cmp	r3, #0
 8047bd2:	d109      	bne.n	8047be8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8047bd4:	4b72      	ldr	r3, [pc, #456]	; (8047da0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8047bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8047bd8:	f023 0207 	bic.w	r2, r3, #7
 8047bdc:	687b      	ldr	r3, [r7, #4]
 8047bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8047be0:	496f      	ldr	r1, [pc, #444]	; (8047da0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8047be2:	4313      	orrs	r3, r2
 8047be4:	650b      	str	r3, [r1, #80]	; 0x50
 8047be6:	e001      	b.n	8047bec <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8047be8:	7dfb      	ldrb	r3, [r7, #23]
 8047bea:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8047bec:	687b      	ldr	r3, [r7, #4]
 8047bee:	681b      	ldr	r3, [r3, #0]
 8047bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8047bf4:	2b00      	cmp	r3, #0
 8047bf6:	d051      	beq.n	8047c9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8047bf8:	687b      	ldr	r3, [r7, #4]
 8047bfa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8047bfe:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8047c02:	d036      	beq.n	8047c72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8047c04:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8047c08:	d830      	bhi.n	8047c6c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8047c0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8047c0e:	d032      	beq.n	8047c76 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8047c10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8047c14:	d82a      	bhi.n	8047c6c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8047c16:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8047c1a:	d02e      	beq.n	8047c7a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8047c1c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8047c20:	d824      	bhi.n	8047c6c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8047c22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8047c26:	d018      	beq.n	8047c5a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8047c28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8047c2c:	d81e      	bhi.n	8047c6c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8047c2e:	2b00      	cmp	r3, #0
 8047c30:	d003      	beq.n	8047c3a <HAL_RCCEx_PeriphCLKConfig+0x172>
 8047c32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8047c36:	d007      	beq.n	8047c48 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8047c38:	e018      	b.n	8047c6c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8047c3a:	4b59      	ldr	r3, [pc, #356]	; (8047da0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8047c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8047c3e:	4a58      	ldr	r2, [pc, #352]	; (8047da0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8047c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8047c44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8047c46:	e019      	b.n	8047c7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8047c48:	687b      	ldr	r3, [r7, #4]
 8047c4a:	3304      	adds	r3, #4
 8047c4c:	2100      	movs	r1, #0
 8047c4e:	4618      	mov	r0, r3
 8047c50:	f001 f8f2 	bl	8048e38 <RCCEx_PLL2_Config>
 8047c54:	4603      	mov	r3, r0
 8047c56:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8047c58:	e010      	b.n	8047c7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8047c5a:	687b      	ldr	r3, [r7, #4]
 8047c5c:	3324      	adds	r3, #36	; 0x24
 8047c5e:	2100      	movs	r1, #0
 8047c60:	4618      	mov	r0, r3
 8047c62:	f001 f99b 	bl	8048f9c <RCCEx_PLL3_Config>
 8047c66:	4603      	mov	r3, r0
 8047c68:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8047c6a:	e007      	b.n	8047c7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8047c6c:	2301      	movs	r3, #1
 8047c6e:	75fb      	strb	r3, [r7, #23]
      break;
 8047c70:	e004      	b.n	8047c7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8047c72:	bf00      	nop
 8047c74:	e002      	b.n	8047c7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8047c76:	bf00      	nop
 8047c78:	e000      	b.n	8047c7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8047c7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8047c7c:	7dfb      	ldrb	r3, [r7, #23]
 8047c7e:	2b00      	cmp	r3, #0
 8047c80:	d10a      	bne.n	8047c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8047c82:	4b47      	ldr	r3, [pc, #284]	; (8047da0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8047c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8047c86:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8047c8a:	687b      	ldr	r3, [r7, #4]
 8047c8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8047c90:	4943      	ldr	r1, [pc, #268]	; (8047da0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8047c92:	4313      	orrs	r3, r2
 8047c94:	658b      	str	r3, [r1, #88]	; 0x58
 8047c96:	e001      	b.n	8047c9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8047c98:	7dfb      	ldrb	r3, [r7, #23]
 8047c9a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8047c9c:	687b      	ldr	r3, [r7, #4]
 8047c9e:	681b      	ldr	r3, [r3, #0]
 8047ca0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8047ca4:	2b00      	cmp	r3, #0
 8047ca6:	d051      	beq.n	8047d4c <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8047ca8:	687b      	ldr	r3, [r7, #4]
 8047caa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8047cae:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8047cb2:	d036      	beq.n	8047d22 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8047cb4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8047cb8:	d830      	bhi.n	8047d1c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8047cba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8047cbe:	d032      	beq.n	8047d26 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8047cc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8047cc4:	d82a      	bhi.n	8047d1c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8047cc6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8047cca:	d02e      	beq.n	8047d2a <HAL_RCCEx_PeriphCLKConfig+0x262>
 8047ccc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8047cd0:	d824      	bhi.n	8047d1c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8047cd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8047cd6:	d018      	beq.n	8047d0a <HAL_RCCEx_PeriphCLKConfig+0x242>
 8047cd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8047cdc:	d81e      	bhi.n	8047d1c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8047cde:	2b00      	cmp	r3, #0
 8047ce0:	d003      	beq.n	8047cea <HAL_RCCEx_PeriphCLKConfig+0x222>
 8047ce2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8047ce6:	d007      	beq.n	8047cf8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8047ce8:	e018      	b.n	8047d1c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8047cea:	4b2d      	ldr	r3, [pc, #180]	; (8047da0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8047cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8047cee:	4a2c      	ldr	r2, [pc, #176]	; (8047da0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8047cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8047cf4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8047cf6:	e019      	b.n	8047d2c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8047cf8:	687b      	ldr	r3, [r7, #4]
 8047cfa:	3304      	adds	r3, #4
 8047cfc:	2100      	movs	r1, #0
 8047cfe:	4618      	mov	r0, r3
 8047d00:	f001 f89a 	bl	8048e38 <RCCEx_PLL2_Config>
 8047d04:	4603      	mov	r3, r0
 8047d06:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8047d08:	e010      	b.n	8047d2c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8047d0a:	687b      	ldr	r3, [r7, #4]
 8047d0c:	3324      	adds	r3, #36	; 0x24
 8047d0e:	2100      	movs	r1, #0
 8047d10:	4618      	mov	r0, r3
 8047d12:	f001 f943 	bl	8048f9c <RCCEx_PLL3_Config>
 8047d16:	4603      	mov	r3, r0
 8047d18:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8047d1a:	e007      	b.n	8047d2c <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8047d1c:	2301      	movs	r3, #1
 8047d1e:	75fb      	strb	r3, [r7, #23]
      break;
 8047d20:	e004      	b.n	8047d2c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8047d22:	bf00      	nop
 8047d24:	e002      	b.n	8047d2c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8047d26:	bf00      	nop
 8047d28:	e000      	b.n	8047d2c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8047d2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8047d2c:	7dfb      	ldrb	r3, [r7, #23]
 8047d2e:	2b00      	cmp	r3, #0
 8047d30:	d10a      	bne.n	8047d48 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8047d32:	4b1b      	ldr	r3, [pc, #108]	; (8047da0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8047d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8047d36:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8047d3a:	687b      	ldr	r3, [r7, #4]
 8047d3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8047d40:	4917      	ldr	r1, [pc, #92]	; (8047da0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8047d42:	4313      	orrs	r3, r2
 8047d44:	658b      	str	r3, [r1, #88]	; 0x58
 8047d46:	e001      	b.n	8047d4c <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8047d48:	7dfb      	ldrb	r3, [r7, #23]
 8047d4a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8047d4c:	687b      	ldr	r3, [r7, #4]
 8047d4e:	681b      	ldr	r3, [r3, #0]
 8047d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8047d54:	2b00      	cmp	r3, #0
 8047d56:	d035      	beq.n	8047dc4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8047d58:	687b      	ldr	r3, [r7, #4]
 8047d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8047d5c:	2b30      	cmp	r3, #48	; 0x30
 8047d5e:	d01c      	beq.n	8047d9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8047d60:	2b30      	cmp	r3, #48	; 0x30
 8047d62:	d817      	bhi.n	8047d94 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8047d64:	2b20      	cmp	r3, #32
 8047d66:	d00c      	beq.n	8047d82 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8047d68:	2b20      	cmp	r3, #32
 8047d6a:	d813      	bhi.n	8047d94 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8047d6c:	2b00      	cmp	r3, #0
 8047d6e:	d019      	beq.n	8047da4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8047d70:	2b10      	cmp	r3, #16
 8047d72:	d10f      	bne.n	8047d94 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8047d74:	4b0a      	ldr	r3, [pc, #40]	; (8047da0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8047d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8047d78:	4a09      	ldr	r2, [pc, #36]	; (8047da0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8047d7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8047d7e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8047d80:	e011      	b.n	8047da6 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8047d82:	687b      	ldr	r3, [r7, #4]
 8047d84:	3304      	adds	r3, #4
 8047d86:	2102      	movs	r1, #2
 8047d88:	4618      	mov	r0, r3
 8047d8a:	f001 f855 	bl	8048e38 <RCCEx_PLL2_Config>
 8047d8e:	4603      	mov	r3, r0
 8047d90:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8047d92:	e008      	b.n	8047da6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8047d94:	2301      	movs	r3, #1
 8047d96:	75fb      	strb	r3, [r7, #23]
      break;
 8047d98:	e005      	b.n	8047da6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8047d9a:	bf00      	nop
 8047d9c:	e003      	b.n	8047da6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8047d9e:	bf00      	nop
 8047da0:	58024400 	.word	0x58024400
      break;
 8047da4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8047da6:	7dfb      	ldrb	r3, [r7, #23]
 8047da8:	2b00      	cmp	r3, #0
 8047daa:	d109      	bne.n	8047dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8047dac:	4ba3      	ldr	r3, [pc, #652]	; (804803c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8047dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8047db0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8047db4:	687b      	ldr	r3, [r7, #4]
 8047db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8047db8:	49a0      	ldr	r1, [pc, #640]	; (804803c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8047dba:	4313      	orrs	r3, r2
 8047dbc:	64cb      	str	r3, [r1, #76]	; 0x4c
 8047dbe:	e001      	b.n	8047dc4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8047dc0:	7dfb      	ldrb	r3, [r7, #23]
 8047dc2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8047dc4:	687b      	ldr	r3, [r7, #4]
 8047dc6:	681b      	ldr	r3, [r3, #0]
 8047dc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8047dcc:	2b00      	cmp	r3, #0
 8047dce:	d047      	beq.n	8047e60 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8047dd0:	687b      	ldr	r3, [r7, #4]
 8047dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8047dd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8047dd8:	d030      	beq.n	8047e3c <HAL_RCCEx_PeriphCLKConfig+0x374>
 8047dda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8047dde:	d82a      	bhi.n	8047e36 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8047de0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8047de4:	d02c      	beq.n	8047e40 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8047de6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8047dea:	d824      	bhi.n	8047e36 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8047dec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8047df0:	d018      	beq.n	8047e24 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8047df2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8047df6:	d81e      	bhi.n	8047e36 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8047df8:	2b00      	cmp	r3, #0
 8047dfa:	d003      	beq.n	8047e04 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8047dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8047e00:	d007      	beq.n	8047e12 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8047e02:	e018      	b.n	8047e36 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8047e04:	4b8d      	ldr	r3, [pc, #564]	; (804803c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8047e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8047e08:	4a8c      	ldr	r2, [pc, #560]	; (804803c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8047e0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8047e0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8047e10:	e017      	b.n	8047e42 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8047e12:	687b      	ldr	r3, [r7, #4]
 8047e14:	3304      	adds	r3, #4
 8047e16:	2100      	movs	r1, #0
 8047e18:	4618      	mov	r0, r3
 8047e1a:	f001 f80d 	bl	8048e38 <RCCEx_PLL2_Config>
 8047e1e:	4603      	mov	r3, r0
 8047e20:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8047e22:	e00e      	b.n	8047e42 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8047e24:	687b      	ldr	r3, [r7, #4]
 8047e26:	3324      	adds	r3, #36	; 0x24
 8047e28:	2100      	movs	r1, #0
 8047e2a:	4618      	mov	r0, r3
 8047e2c:	f001 f8b6 	bl	8048f9c <RCCEx_PLL3_Config>
 8047e30:	4603      	mov	r3, r0
 8047e32:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8047e34:	e005      	b.n	8047e42 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8047e36:	2301      	movs	r3, #1
 8047e38:	75fb      	strb	r3, [r7, #23]
      break;
 8047e3a:	e002      	b.n	8047e42 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8047e3c:	bf00      	nop
 8047e3e:	e000      	b.n	8047e42 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8047e40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8047e42:	7dfb      	ldrb	r3, [r7, #23]
 8047e44:	2b00      	cmp	r3, #0
 8047e46:	d109      	bne.n	8047e5c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8047e48:	4b7c      	ldr	r3, [pc, #496]	; (804803c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8047e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8047e4c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8047e50:	687b      	ldr	r3, [r7, #4]
 8047e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8047e54:	4979      	ldr	r1, [pc, #484]	; (804803c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8047e56:	4313      	orrs	r3, r2
 8047e58:	650b      	str	r3, [r1, #80]	; 0x50
 8047e5a:	e001      	b.n	8047e60 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8047e5c:	7dfb      	ldrb	r3, [r7, #23]
 8047e5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8047e60:	687b      	ldr	r3, [r7, #4]
 8047e62:	681b      	ldr	r3, [r3, #0]
 8047e64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8047e68:	2b00      	cmp	r3, #0
 8047e6a:	d049      	beq.n	8047f00 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8047e6c:	687b      	ldr	r3, [r7, #4]
 8047e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8047e70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8047e74:	d02e      	beq.n	8047ed4 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8047e76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8047e7a:	d828      	bhi.n	8047ece <HAL_RCCEx_PeriphCLKConfig+0x406>
 8047e7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8047e80:	d02a      	beq.n	8047ed8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8047e82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8047e86:	d822      	bhi.n	8047ece <HAL_RCCEx_PeriphCLKConfig+0x406>
 8047e88:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8047e8c:	d026      	beq.n	8047edc <HAL_RCCEx_PeriphCLKConfig+0x414>
 8047e8e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8047e92:	d81c      	bhi.n	8047ece <HAL_RCCEx_PeriphCLKConfig+0x406>
 8047e94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8047e98:	d010      	beq.n	8047ebc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8047e9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8047e9e:	d816      	bhi.n	8047ece <HAL_RCCEx_PeriphCLKConfig+0x406>
 8047ea0:	2b00      	cmp	r3, #0
 8047ea2:	d01d      	beq.n	8047ee0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8047ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8047ea8:	d111      	bne.n	8047ece <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8047eaa:	687b      	ldr	r3, [r7, #4]
 8047eac:	3304      	adds	r3, #4
 8047eae:	2101      	movs	r1, #1
 8047eb0:	4618      	mov	r0, r3
 8047eb2:	f000 ffc1 	bl	8048e38 <RCCEx_PLL2_Config>
 8047eb6:	4603      	mov	r3, r0
 8047eb8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8047eba:	e012      	b.n	8047ee2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8047ebc:	687b      	ldr	r3, [r7, #4]
 8047ebe:	3324      	adds	r3, #36	; 0x24
 8047ec0:	2101      	movs	r1, #1
 8047ec2:	4618      	mov	r0, r3
 8047ec4:	f001 f86a 	bl	8048f9c <RCCEx_PLL3_Config>
 8047ec8:	4603      	mov	r3, r0
 8047eca:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8047ecc:	e009      	b.n	8047ee2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8047ece:	2301      	movs	r3, #1
 8047ed0:	75fb      	strb	r3, [r7, #23]
      break;
 8047ed2:	e006      	b.n	8047ee2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8047ed4:	bf00      	nop
 8047ed6:	e004      	b.n	8047ee2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8047ed8:	bf00      	nop
 8047eda:	e002      	b.n	8047ee2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8047edc:	bf00      	nop
 8047ede:	e000      	b.n	8047ee2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8047ee0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8047ee2:	7dfb      	ldrb	r3, [r7, #23]
 8047ee4:	2b00      	cmp	r3, #0
 8047ee6:	d109      	bne.n	8047efc <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8047ee8:	4b54      	ldr	r3, [pc, #336]	; (804803c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8047eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8047eec:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8047ef0:	687b      	ldr	r3, [r7, #4]
 8047ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8047ef4:	4951      	ldr	r1, [pc, #324]	; (804803c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8047ef6:	4313      	orrs	r3, r2
 8047ef8:	650b      	str	r3, [r1, #80]	; 0x50
 8047efa:	e001      	b.n	8047f00 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8047efc:	7dfb      	ldrb	r3, [r7, #23]
 8047efe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8047f00:	687b      	ldr	r3, [r7, #4]
 8047f02:	681b      	ldr	r3, [r3, #0]
 8047f04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8047f08:	2b00      	cmp	r3, #0
 8047f0a:	d04b      	beq.n	8047fa4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8047f0c:	687b      	ldr	r3, [r7, #4]
 8047f0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8047f12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8047f16:	d02e      	beq.n	8047f76 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8047f18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8047f1c:	d828      	bhi.n	8047f70 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8047f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8047f22:	d02a      	beq.n	8047f7a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8047f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8047f28:	d822      	bhi.n	8047f70 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8047f2a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8047f2e:	d026      	beq.n	8047f7e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8047f30:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8047f34:	d81c      	bhi.n	8047f70 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8047f36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8047f3a:	d010      	beq.n	8047f5e <HAL_RCCEx_PeriphCLKConfig+0x496>
 8047f3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8047f40:	d816      	bhi.n	8047f70 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8047f42:	2b00      	cmp	r3, #0
 8047f44:	d01d      	beq.n	8047f82 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8047f46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8047f4a:	d111      	bne.n	8047f70 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8047f4c:	687b      	ldr	r3, [r7, #4]
 8047f4e:	3304      	adds	r3, #4
 8047f50:	2101      	movs	r1, #1
 8047f52:	4618      	mov	r0, r3
 8047f54:	f000 ff70 	bl	8048e38 <RCCEx_PLL2_Config>
 8047f58:	4603      	mov	r3, r0
 8047f5a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8047f5c:	e012      	b.n	8047f84 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8047f5e:	687b      	ldr	r3, [r7, #4]
 8047f60:	3324      	adds	r3, #36	; 0x24
 8047f62:	2101      	movs	r1, #1
 8047f64:	4618      	mov	r0, r3
 8047f66:	f001 f819 	bl	8048f9c <RCCEx_PLL3_Config>
 8047f6a:	4603      	mov	r3, r0
 8047f6c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8047f6e:	e009      	b.n	8047f84 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8047f70:	2301      	movs	r3, #1
 8047f72:	75fb      	strb	r3, [r7, #23]
      break;
 8047f74:	e006      	b.n	8047f84 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8047f76:	bf00      	nop
 8047f78:	e004      	b.n	8047f84 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8047f7a:	bf00      	nop
 8047f7c:	e002      	b.n	8047f84 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8047f7e:	bf00      	nop
 8047f80:	e000      	b.n	8047f84 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8047f82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8047f84:	7dfb      	ldrb	r3, [r7, #23]
 8047f86:	2b00      	cmp	r3, #0
 8047f88:	d10a      	bne.n	8047fa0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8047f8a:	4b2c      	ldr	r3, [pc, #176]	; (804803c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8047f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8047f8e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8047f92:	687b      	ldr	r3, [r7, #4]
 8047f94:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8047f98:	4928      	ldr	r1, [pc, #160]	; (804803c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8047f9a:	4313      	orrs	r3, r2
 8047f9c:	658b      	str	r3, [r1, #88]	; 0x58
 8047f9e:	e001      	b.n	8047fa4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8047fa0:	7dfb      	ldrb	r3, [r7, #23]
 8047fa2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8047fa4:	687b      	ldr	r3, [r7, #4]
 8047fa6:	681b      	ldr	r3, [r3, #0]
 8047fa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8047fac:	2b00      	cmp	r3, #0
 8047fae:	d02f      	beq.n	8048010 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8047fb0:	687b      	ldr	r3, [r7, #4]
 8047fb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8047fb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8047fb8:	d00e      	beq.n	8047fd8 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8047fba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8047fbe:	d814      	bhi.n	8047fea <HAL_RCCEx_PeriphCLKConfig+0x522>
 8047fc0:	2b00      	cmp	r3, #0
 8047fc2:	d015      	beq.n	8047ff0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8047fc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8047fc8:	d10f      	bne.n	8047fea <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8047fca:	4b1c      	ldr	r3, [pc, #112]	; (804803c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8047fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8047fce:	4a1b      	ldr	r2, [pc, #108]	; (804803c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8047fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8047fd4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8047fd6:	e00c      	b.n	8047ff2 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8047fd8:	687b      	ldr	r3, [r7, #4]
 8047fda:	3304      	adds	r3, #4
 8047fdc:	2101      	movs	r1, #1
 8047fde:	4618      	mov	r0, r3
 8047fe0:	f000 ff2a 	bl	8048e38 <RCCEx_PLL2_Config>
 8047fe4:	4603      	mov	r3, r0
 8047fe6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8047fe8:	e003      	b.n	8047ff2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8047fea:	2301      	movs	r3, #1
 8047fec:	75fb      	strb	r3, [r7, #23]
      break;
 8047fee:	e000      	b.n	8047ff2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8047ff0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8047ff2:	7dfb      	ldrb	r3, [r7, #23]
 8047ff4:	2b00      	cmp	r3, #0
 8047ff6:	d109      	bne.n	804800c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8047ff8:	4b10      	ldr	r3, [pc, #64]	; (804803c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8047ffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8047ffc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8048000:	687b      	ldr	r3, [r7, #4]
 8048002:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8048004:	490d      	ldr	r1, [pc, #52]	; (804803c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8048006:	4313      	orrs	r3, r2
 8048008:	650b      	str	r3, [r1, #80]	; 0x50
 804800a:	e001      	b.n	8048010 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804800c:	7dfb      	ldrb	r3, [r7, #23]
 804800e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8048010:	687b      	ldr	r3, [r7, #4]
 8048012:	681b      	ldr	r3, [r3, #0]
 8048014:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8048018:	2b00      	cmp	r3, #0
 804801a:	d034      	beq.n	8048086 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 804801c:	687b      	ldr	r3, [r7, #4]
 804801e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8048020:	2b03      	cmp	r3, #3
 8048022:	d81d      	bhi.n	8048060 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8048024:	a201      	add	r2, pc, #4	; (adr r2, 804802c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8048026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804802a:	bf00      	nop
 804802c:	08048067 	.word	0x08048067
 8048030:	08048041 	.word	0x08048041
 8048034:	0804804f 	.word	0x0804804f
 8048038:	08048067 	.word	0x08048067
 804803c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8048040:	4bb1      	ldr	r3, [pc, #708]	; (8048308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8048042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8048044:	4ab0      	ldr	r2, [pc, #704]	; (8048308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8048046:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 804804a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 804804c:	e00c      	b.n	8048068 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 804804e:	687b      	ldr	r3, [r7, #4]
 8048050:	3304      	adds	r3, #4
 8048052:	2102      	movs	r1, #2
 8048054:	4618      	mov	r0, r3
 8048056:	f000 feef 	bl	8048e38 <RCCEx_PLL2_Config>
 804805a:	4603      	mov	r3, r0
 804805c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 804805e:	e003      	b.n	8048068 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8048060:	2301      	movs	r3, #1
 8048062:	75fb      	strb	r3, [r7, #23]
      break;
 8048064:	e000      	b.n	8048068 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8048066:	bf00      	nop
    }

    if(ret == HAL_OK)
 8048068:	7dfb      	ldrb	r3, [r7, #23]
 804806a:	2b00      	cmp	r3, #0
 804806c:	d109      	bne.n	8048082 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 804806e:	4ba6      	ldr	r3, [pc, #664]	; (8048308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8048070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8048072:	f023 0203 	bic.w	r2, r3, #3
 8048076:	687b      	ldr	r3, [r7, #4]
 8048078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804807a:	49a3      	ldr	r1, [pc, #652]	; (8048308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 804807c:	4313      	orrs	r3, r2
 804807e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8048080:	e001      	b.n	8048086 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8048082:	7dfb      	ldrb	r3, [r7, #23]
 8048084:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8048086:	687b      	ldr	r3, [r7, #4]
 8048088:	681b      	ldr	r3, [r3, #0]
 804808a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 804808e:	2b00      	cmp	r3, #0
 8048090:	f000 8086 	beq.w	80481a0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8048094:	4b9d      	ldr	r3, [pc, #628]	; (804830c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8048096:	681b      	ldr	r3, [r3, #0]
 8048098:	4a9c      	ldr	r2, [pc, #624]	; (804830c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 804809a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 804809e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80480a0:	f7fa f81c 	bl	80420dc <HAL_GetTick>
 80480a4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80480a6:	e009      	b.n	80480bc <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80480a8:	f7fa f818 	bl	80420dc <HAL_GetTick>
 80480ac:	4602      	mov	r2, r0
 80480ae:	693b      	ldr	r3, [r7, #16]
 80480b0:	1ad3      	subs	r3, r2, r3
 80480b2:	2b64      	cmp	r3, #100	; 0x64
 80480b4:	d902      	bls.n	80480bc <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 80480b6:	2303      	movs	r3, #3
 80480b8:	75fb      	strb	r3, [r7, #23]
        break;
 80480ba:	e005      	b.n	80480c8 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80480bc:	4b93      	ldr	r3, [pc, #588]	; (804830c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80480be:	681b      	ldr	r3, [r3, #0]
 80480c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80480c4:	2b00      	cmp	r3, #0
 80480c6:	d0ef      	beq.n	80480a8 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 80480c8:	7dfb      	ldrb	r3, [r7, #23]
 80480ca:	2b00      	cmp	r3, #0
 80480cc:	d166      	bne.n	804819c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80480ce:	4b8e      	ldr	r3, [pc, #568]	; (8048308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80480d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80480d2:	687b      	ldr	r3, [r7, #4]
 80480d4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80480d8:	4053      	eors	r3, r2
 80480da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80480de:	2b00      	cmp	r3, #0
 80480e0:	d013      	beq.n	804810a <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80480e2:	4b89      	ldr	r3, [pc, #548]	; (8048308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80480e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80480e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80480ea:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80480ec:	4b86      	ldr	r3, [pc, #536]	; (8048308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80480ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80480f0:	4a85      	ldr	r2, [pc, #532]	; (8048308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80480f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80480f6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80480f8:	4b83      	ldr	r3, [pc, #524]	; (8048308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80480fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80480fc:	4a82      	ldr	r2, [pc, #520]	; (8048308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80480fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8048102:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8048104:	4a80      	ldr	r2, [pc, #512]	; (8048308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8048106:	68fb      	ldr	r3, [r7, #12]
 8048108:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 804810a:	687b      	ldr	r3, [r7, #4]
 804810c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8048110:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8048114:	d115      	bne.n	8048142 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8048116:	f7f9 ffe1 	bl	80420dc <HAL_GetTick>
 804811a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 804811c:	e00b      	b.n	8048136 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 804811e:	f7f9 ffdd 	bl	80420dc <HAL_GetTick>
 8048122:	4602      	mov	r2, r0
 8048124:	693b      	ldr	r3, [r7, #16]
 8048126:	1ad3      	subs	r3, r2, r3
 8048128:	f241 3288 	movw	r2, #5000	; 0x1388
 804812c:	4293      	cmp	r3, r2
 804812e:	d902      	bls.n	8048136 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8048130:	2303      	movs	r3, #3
 8048132:	75fb      	strb	r3, [r7, #23]
            break;
 8048134:	e005      	b.n	8048142 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8048136:	4b74      	ldr	r3, [pc, #464]	; (8048308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8048138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804813a:	f003 0302 	and.w	r3, r3, #2
 804813e:	2b00      	cmp	r3, #0
 8048140:	d0ed      	beq.n	804811e <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8048142:	7dfb      	ldrb	r3, [r7, #23]
 8048144:	2b00      	cmp	r3, #0
 8048146:	d126      	bne.n	8048196 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8048148:	687b      	ldr	r3, [r7, #4]
 804814a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 804814e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8048152:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8048156:	d10d      	bne.n	8048174 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8048158:	4b6b      	ldr	r3, [pc, #428]	; (8048308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 804815a:	691b      	ldr	r3, [r3, #16]
 804815c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8048160:	687b      	ldr	r3, [r7, #4]
 8048162:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8048166:	0919      	lsrs	r1, r3, #4
 8048168:	4b69      	ldr	r3, [pc, #420]	; (8048310 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 804816a:	400b      	ands	r3, r1
 804816c:	4966      	ldr	r1, [pc, #408]	; (8048308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 804816e:	4313      	orrs	r3, r2
 8048170:	610b      	str	r3, [r1, #16]
 8048172:	e005      	b.n	8048180 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8048174:	4b64      	ldr	r3, [pc, #400]	; (8048308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8048176:	691b      	ldr	r3, [r3, #16]
 8048178:	4a63      	ldr	r2, [pc, #396]	; (8048308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 804817a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 804817e:	6113      	str	r3, [r2, #16]
 8048180:	4b61      	ldr	r3, [pc, #388]	; (8048308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8048182:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8048184:	687b      	ldr	r3, [r7, #4]
 8048186:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 804818a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 804818e:	495e      	ldr	r1, [pc, #376]	; (8048308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8048190:	4313      	orrs	r3, r2
 8048192:	670b      	str	r3, [r1, #112]	; 0x70
 8048194:	e004      	b.n	80481a0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8048196:	7dfb      	ldrb	r3, [r7, #23]
 8048198:	75bb      	strb	r3, [r7, #22]
 804819a:	e001      	b.n	80481a0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 804819c:	7dfb      	ldrb	r3, [r7, #23]
 804819e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80481a0:	687b      	ldr	r3, [r7, #4]
 80481a2:	681b      	ldr	r3, [r3, #0]
 80481a4:	f003 0301 	and.w	r3, r3, #1
 80481a8:	2b00      	cmp	r3, #0
 80481aa:	d07e      	beq.n	80482aa <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80481ac:	687b      	ldr	r3, [r7, #4]
 80481ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80481b0:	2b28      	cmp	r3, #40	; 0x28
 80481b2:	d867      	bhi.n	8048284 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 80481b4:	a201      	add	r2, pc, #4	; (adr r2, 80481bc <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 80481b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80481ba:	bf00      	nop
 80481bc:	0804828b 	.word	0x0804828b
 80481c0:	08048285 	.word	0x08048285
 80481c4:	08048285 	.word	0x08048285
 80481c8:	08048285 	.word	0x08048285
 80481cc:	08048285 	.word	0x08048285
 80481d0:	08048285 	.word	0x08048285
 80481d4:	08048285 	.word	0x08048285
 80481d8:	08048285 	.word	0x08048285
 80481dc:	08048261 	.word	0x08048261
 80481e0:	08048285 	.word	0x08048285
 80481e4:	08048285 	.word	0x08048285
 80481e8:	08048285 	.word	0x08048285
 80481ec:	08048285 	.word	0x08048285
 80481f0:	08048285 	.word	0x08048285
 80481f4:	08048285 	.word	0x08048285
 80481f8:	08048285 	.word	0x08048285
 80481fc:	08048273 	.word	0x08048273
 8048200:	08048285 	.word	0x08048285
 8048204:	08048285 	.word	0x08048285
 8048208:	08048285 	.word	0x08048285
 804820c:	08048285 	.word	0x08048285
 8048210:	08048285 	.word	0x08048285
 8048214:	08048285 	.word	0x08048285
 8048218:	08048285 	.word	0x08048285
 804821c:	0804828b 	.word	0x0804828b
 8048220:	08048285 	.word	0x08048285
 8048224:	08048285 	.word	0x08048285
 8048228:	08048285 	.word	0x08048285
 804822c:	08048285 	.word	0x08048285
 8048230:	08048285 	.word	0x08048285
 8048234:	08048285 	.word	0x08048285
 8048238:	08048285 	.word	0x08048285
 804823c:	0804828b 	.word	0x0804828b
 8048240:	08048285 	.word	0x08048285
 8048244:	08048285 	.word	0x08048285
 8048248:	08048285 	.word	0x08048285
 804824c:	08048285 	.word	0x08048285
 8048250:	08048285 	.word	0x08048285
 8048254:	08048285 	.word	0x08048285
 8048258:	08048285 	.word	0x08048285
 804825c:	0804828b 	.word	0x0804828b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8048260:	687b      	ldr	r3, [r7, #4]
 8048262:	3304      	adds	r3, #4
 8048264:	2101      	movs	r1, #1
 8048266:	4618      	mov	r0, r3
 8048268:	f000 fde6 	bl	8048e38 <RCCEx_PLL2_Config>
 804826c:	4603      	mov	r3, r0
 804826e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8048270:	e00c      	b.n	804828c <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8048272:	687b      	ldr	r3, [r7, #4]
 8048274:	3324      	adds	r3, #36	; 0x24
 8048276:	2101      	movs	r1, #1
 8048278:	4618      	mov	r0, r3
 804827a:	f000 fe8f 	bl	8048f9c <RCCEx_PLL3_Config>
 804827e:	4603      	mov	r3, r0
 8048280:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8048282:	e003      	b.n	804828c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8048284:	2301      	movs	r3, #1
 8048286:	75fb      	strb	r3, [r7, #23]
      break;
 8048288:	e000      	b.n	804828c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 804828a:	bf00      	nop
    }

    if(ret == HAL_OK)
 804828c:	7dfb      	ldrb	r3, [r7, #23]
 804828e:	2b00      	cmp	r3, #0
 8048290:	d109      	bne.n	80482a6 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8048292:	4b1d      	ldr	r3, [pc, #116]	; (8048308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8048294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8048296:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 804829a:	687b      	ldr	r3, [r7, #4]
 804829c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804829e:	491a      	ldr	r1, [pc, #104]	; (8048308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80482a0:	4313      	orrs	r3, r2
 80482a2:	654b      	str	r3, [r1, #84]	; 0x54
 80482a4:	e001      	b.n	80482aa <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80482a6:	7dfb      	ldrb	r3, [r7, #23]
 80482a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80482aa:	687b      	ldr	r3, [r7, #4]
 80482ac:	681b      	ldr	r3, [r3, #0]
 80482ae:	f003 0302 	and.w	r3, r3, #2
 80482b2:	2b00      	cmp	r3, #0
 80482b4:	d03e      	beq.n	8048334 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80482b6:	687b      	ldr	r3, [r7, #4]
 80482b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80482ba:	2b05      	cmp	r3, #5
 80482bc:	d820      	bhi.n	8048300 <HAL_RCCEx_PeriphCLKConfig+0x838>
 80482be:	a201      	add	r2, pc, #4	; (adr r2, 80482c4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80482c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80482c4:	08048315 	.word	0x08048315
 80482c8:	080482dd 	.word	0x080482dd
 80482cc:	080482ef 	.word	0x080482ef
 80482d0:	08048315 	.word	0x08048315
 80482d4:	08048315 	.word	0x08048315
 80482d8:	08048315 	.word	0x08048315
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80482dc:	687b      	ldr	r3, [r7, #4]
 80482de:	3304      	adds	r3, #4
 80482e0:	2101      	movs	r1, #1
 80482e2:	4618      	mov	r0, r3
 80482e4:	f000 fda8 	bl	8048e38 <RCCEx_PLL2_Config>
 80482e8:	4603      	mov	r3, r0
 80482ea:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80482ec:	e013      	b.n	8048316 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80482ee:	687b      	ldr	r3, [r7, #4]
 80482f0:	3324      	adds	r3, #36	; 0x24
 80482f2:	2101      	movs	r1, #1
 80482f4:	4618      	mov	r0, r3
 80482f6:	f000 fe51 	bl	8048f9c <RCCEx_PLL3_Config>
 80482fa:	4603      	mov	r3, r0
 80482fc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80482fe:	e00a      	b.n	8048316 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8048300:	2301      	movs	r3, #1
 8048302:	75fb      	strb	r3, [r7, #23]
      break;
 8048304:	e007      	b.n	8048316 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8048306:	bf00      	nop
 8048308:	58024400 	.word	0x58024400
 804830c:	58024800 	.word	0x58024800
 8048310:	00ffffcf 	.word	0x00ffffcf
      break;
 8048314:	bf00      	nop
    }

    if(ret == HAL_OK)
 8048316:	7dfb      	ldrb	r3, [r7, #23]
 8048318:	2b00      	cmp	r3, #0
 804831a:	d109      	bne.n	8048330 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 804831c:	4b9f      	ldr	r3, [pc, #636]	; (804859c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 804831e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8048320:	f023 0207 	bic.w	r2, r3, #7
 8048324:	687b      	ldr	r3, [r7, #4]
 8048326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8048328:	499c      	ldr	r1, [pc, #624]	; (804859c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 804832a:	4313      	orrs	r3, r2
 804832c:	654b      	str	r3, [r1, #84]	; 0x54
 804832e:	e001      	b.n	8048334 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8048330:	7dfb      	ldrb	r3, [r7, #23]
 8048332:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8048334:	687b      	ldr	r3, [r7, #4]
 8048336:	681b      	ldr	r3, [r3, #0]
 8048338:	f003 0304 	and.w	r3, r3, #4
 804833c:	2b00      	cmp	r3, #0
 804833e:	d039      	beq.n	80483b4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8048340:	687b      	ldr	r3, [r7, #4]
 8048342:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8048346:	2b05      	cmp	r3, #5
 8048348:	d820      	bhi.n	804838c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 804834a:	a201      	add	r2, pc, #4	; (adr r2, 8048350 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 804834c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8048350:	08048393 	.word	0x08048393
 8048354:	08048369 	.word	0x08048369
 8048358:	0804837b 	.word	0x0804837b
 804835c:	08048393 	.word	0x08048393
 8048360:	08048393 	.word	0x08048393
 8048364:	08048393 	.word	0x08048393
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8048368:	687b      	ldr	r3, [r7, #4]
 804836a:	3304      	adds	r3, #4
 804836c:	2101      	movs	r1, #1
 804836e:	4618      	mov	r0, r3
 8048370:	f000 fd62 	bl	8048e38 <RCCEx_PLL2_Config>
 8048374:	4603      	mov	r3, r0
 8048376:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8048378:	e00c      	b.n	8048394 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 804837a:	687b      	ldr	r3, [r7, #4]
 804837c:	3324      	adds	r3, #36	; 0x24
 804837e:	2101      	movs	r1, #1
 8048380:	4618      	mov	r0, r3
 8048382:	f000 fe0b 	bl	8048f9c <RCCEx_PLL3_Config>
 8048386:	4603      	mov	r3, r0
 8048388:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 804838a:	e003      	b.n	8048394 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 804838c:	2301      	movs	r3, #1
 804838e:	75fb      	strb	r3, [r7, #23]
      break;
 8048390:	e000      	b.n	8048394 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8048392:	bf00      	nop
    }

    if(ret == HAL_OK)
 8048394:	7dfb      	ldrb	r3, [r7, #23]
 8048396:	2b00      	cmp	r3, #0
 8048398:	d10a      	bne.n	80483b0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 804839a:	4b80      	ldr	r3, [pc, #512]	; (804859c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 804839c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804839e:	f023 0207 	bic.w	r2, r3, #7
 80483a2:	687b      	ldr	r3, [r7, #4]
 80483a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80483a8:	497c      	ldr	r1, [pc, #496]	; (804859c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80483aa:	4313      	orrs	r3, r2
 80483ac:	658b      	str	r3, [r1, #88]	; 0x58
 80483ae:	e001      	b.n	80483b4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80483b0:	7dfb      	ldrb	r3, [r7, #23]
 80483b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80483b4:	687b      	ldr	r3, [r7, #4]
 80483b6:	681b      	ldr	r3, [r3, #0]
 80483b8:	f003 0320 	and.w	r3, r3, #32
 80483bc:	2b00      	cmp	r3, #0
 80483be:	d04b      	beq.n	8048458 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80483c0:	687b      	ldr	r3, [r7, #4]
 80483c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80483c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80483ca:	d02e      	beq.n	804842a <HAL_RCCEx_PeriphCLKConfig+0x962>
 80483cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80483d0:	d828      	bhi.n	8048424 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80483d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80483d6:	d02a      	beq.n	804842e <HAL_RCCEx_PeriphCLKConfig+0x966>
 80483d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80483dc:	d822      	bhi.n	8048424 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80483de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80483e2:	d026      	beq.n	8048432 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80483e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80483e8:	d81c      	bhi.n	8048424 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80483ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80483ee:	d010      	beq.n	8048412 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80483f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80483f4:	d816      	bhi.n	8048424 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80483f6:	2b00      	cmp	r3, #0
 80483f8:	d01d      	beq.n	8048436 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80483fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80483fe:	d111      	bne.n	8048424 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8048400:	687b      	ldr	r3, [r7, #4]
 8048402:	3304      	adds	r3, #4
 8048404:	2100      	movs	r1, #0
 8048406:	4618      	mov	r0, r3
 8048408:	f000 fd16 	bl	8048e38 <RCCEx_PLL2_Config>
 804840c:	4603      	mov	r3, r0
 804840e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8048410:	e012      	b.n	8048438 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8048412:	687b      	ldr	r3, [r7, #4]
 8048414:	3324      	adds	r3, #36	; 0x24
 8048416:	2102      	movs	r1, #2
 8048418:	4618      	mov	r0, r3
 804841a:	f000 fdbf 	bl	8048f9c <RCCEx_PLL3_Config>
 804841e:	4603      	mov	r3, r0
 8048420:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8048422:	e009      	b.n	8048438 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8048424:	2301      	movs	r3, #1
 8048426:	75fb      	strb	r3, [r7, #23]
      break;
 8048428:	e006      	b.n	8048438 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 804842a:	bf00      	nop
 804842c:	e004      	b.n	8048438 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 804842e:	bf00      	nop
 8048430:	e002      	b.n	8048438 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8048432:	bf00      	nop
 8048434:	e000      	b.n	8048438 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8048436:	bf00      	nop
    }

    if(ret == HAL_OK)
 8048438:	7dfb      	ldrb	r3, [r7, #23]
 804843a:	2b00      	cmp	r3, #0
 804843c:	d10a      	bne.n	8048454 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 804843e:	4b57      	ldr	r3, [pc, #348]	; (804859c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8048440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8048442:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8048446:	687b      	ldr	r3, [r7, #4]
 8048448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804844c:	4953      	ldr	r1, [pc, #332]	; (804859c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 804844e:	4313      	orrs	r3, r2
 8048450:	654b      	str	r3, [r1, #84]	; 0x54
 8048452:	e001      	b.n	8048458 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8048454:	7dfb      	ldrb	r3, [r7, #23]
 8048456:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8048458:	687b      	ldr	r3, [r7, #4]
 804845a:	681b      	ldr	r3, [r3, #0]
 804845c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8048460:	2b00      	cmp	r3, #0
 8048462:	d04b      	beq.n	80484fc <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8048464:	687b      	ldr	r3, [r7, #4]
 8048466:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 804846a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 804846e:	d02e      	beq.n	80484ce <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8048470:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8048474:	d828      	bhi.n	80484c8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8048476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 804847a:	d02a      	beq.n	80484d2 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 804847c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8048480:	d822      	bhi.n	80484c8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8048482:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8048486:	d026      	beq.n	80484d6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8048488:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 804848c:	d81c      	bhi.n	80484c8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 804848e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8048492:	d010      	beq.n	80484b6 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8048494:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8048498:	d816      	bhi.n	80484c8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 804849a:	2b00      	cmp	r3, #0
 804849c:	d01d      	beq.n	80484da <HAL_RCCEx_PeriphCLKConfig+0xa12>
 804849e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80484a2:	d111      	bne.n	80484c8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80484a4:	687b      	ldr	r3, [r7, #4]
 80484a6:	3304      	adds	r3, #4
 80484a8:	2100      	movs	r1, #0
 80484aa:	4618      	mov	r0, r3
 80484ac:	f000 fcc4 	bl	8048e38 <RCCEx_PLL2_Config>
 80484b0:	4603      	mov	r3, r0
 80484b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80484b4:	e012      	b.n	80484dc <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80484b6:	687b      	ldr	r3, [r7, #4]
 80484b8:	3324      	adds	r3, #36	; 0x24
 80484ba:	2102      	movs	r1, #2
 80484bc:	4618      	mov	r0, r3
 80484be:	f000 fd6d 	bl	8048f9c <RCCEx_PLL3_Config>
 80484c2:	4603      	mov	r3, r0
 80484c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80484c6:	e009      	b.n	80484dc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80484c8:	2301      	movs	r3, #1
 80484ca:	75fb      	strb	r3, [r7, #23]
      break;
 80484cc:	e006      	b.n	80484dc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80484ce:	bf00      	nop
 80484d0:	e004      	b.n	80484dc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80484d2:	bf00      	nop
 80484d4:	e002      	b.n	80484dc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80484d6:	bf00      	nop
 80484d8:	e000      	b.n	80484dc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80484da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80484dc:	7dfb      	ldrb	r3, [r7, #23]
 80484de:	2b00      	cmp	r3, #0
 80484e0:	d10a      	bne.n	80484f8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80484e2:	4b2e      	ldr	r3, [pc, #184]	; (804859c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80484e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80484e6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80484ea:	687b      	ldr	r3, [r7, #4]
 80484ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80484f0:	492a      	ldr	r1, [pc, #168]	; (804859c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80484f2:	4313      	orrs	r3, r2
 80484f4:	658b      	str	r3, [r1, #88]	; 0x58
 80484f6:	e001      	b.n	80484fc <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80484f8:	7dfb      	ldrb	r3, [r7, #23]
 80484fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80484fc:	687b      	ldr	r3, [r7, #4]
 80484fe:	681b      	ldr	r3, [r3, #0]
 8048500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8048504:	2b00      	cmp	r3, #0
 8048506:	d04d      	beq.n	80485a4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8048508:	687b      	ldr	r3, [r7, #4]
 804850a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 804850e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8048512:	d02e      	beq.n	8048572 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8048514:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8048518:	d828      	bhi.n	804856c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 804851a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 804851e:	d02a      	beq.n	8048576 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8048520:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8048524:	d822      	bhi.n	804856c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8048526:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 804852a:	d026      	beq.n	804857a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 804852c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8048530:	d81c      	bhi.n	804856c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8048532:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8048536:	d010      	beq.n	804855a <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8048538:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 804853c:	d816      	bhi.n	804856c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 804853e:	2b00      	cmp	r3, #0
 8048540:	d01d      	beq.n	804857e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8048542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8048546:	d111      	bne.n	804856c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8048548:	687b      	ldr	r3, [r7, #4]
 804854a:	3304      	adds	r3, #4
 804854c:	2100      	movs	r1, #0
 804854e:	4618      	mov	r0, r3
 8048550:	f000 fc72 	bl	8048e38 <RCCEx_PLL2_Config>
 8048554:	4603      	mov	r3, r0
 8048556:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8048558:	e012      	b.n	8048580 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 804855a:	687b      	ldr	r3, [r7, #4]
 804855c:	3324      	adds	r3, #36	; 0x24
 804855e:	2102      	movs	r1, #2
 8048560:	4618      	mov	r0, r3
 8048562:	f000 fd1b 	bl	8048f9c <RCCEx_PLL3_Config>
 8048566:	4603      	mov	r3, r0
 8048568:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 804856a:	e009      	b.n	8048580 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 804856c:	2301      	movs	r3, #1
 804856e:	75fb      	strb	r3, [r7, #23]
      break;
 8048570:	e006      	b.n	8048580 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8048572:	bf00      	nop
 8048574:	e004      	b.n	8048580 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8048576:	bf00      	nop
 8048578:	e002      	b.n	8048580 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 804857a:	bf00      	nop
 804857c:	e000      	b.n	8048580 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 804857e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8048580:	7dfb      	ldrb	r3, [r7, #23]
 8048582:	2b00      	cmp	r3, #0
 8048584:	d10c      	bne.n	80485a0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8048586:	4b05      	ldr	r3, [pc, #20]	; (804859c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8048588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804858a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 804858e:	687b      	ldr	r3, [r7, #4]
 8048590:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8048594:	4901      	ldr	r1, [pc, #4]	; (804859c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8048596:	4313      	orrs	r3, r2
 8048598:	658b      	str	r3, [r1, #88]	; 0x58
 804859a:	e003      	b.n	80485a4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 804859c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80485a0:	7dfb      	ldrb	r3, [r7, #23]
 80485a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80485a4:	687b      	ldr	r3, [r7, #4]
 80485a6:	681b      	ldr	r3, [r3, #0]
 80485a8:	f003 0308 	and.w	r3, r3, #8
 80485ac:	2b00      	cmp	r3, #0
 80485ae:	d018      	beq.n	80485e2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 80485b0:	687b      	ldr	r3, [r7, #4]
 80485b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80485b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80485b8:	d10a      	bne.n	80485d0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80485ba:	687b      	ldr	r3, [r7, #4]
 80485bc:	3324      	adds	r3, #36	; 0x24
 80485be:	2102      	movs	r1, #2
 80485c0:	4618      	mov	r0, r3
 80485c2:	f000 fceb 	bl	8048f9c <RCCEx_PLL3_Config>
 80485c6:	4603      	mov	r3, r0
 80485c8:	2b00      	cmp	r3, #0
 80485ca:	d001      	beq.n	80485d0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 80485cc:	2301      	movs	r3, #1
 80485ce:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80485d0:	4b8a      	ldr	r3, [pc, #552]	; (80487fc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80485d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80485d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80485d8:	687b      	ldr	r3, [r7, #4]
 80485da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80485dc:	4987      	ldr	r1, [pc, #540]	; (80487fc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80485de:	4313      	orrs	r3, r2
 80485e0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80485e2:	687b      	ldr	r3, [r7, #4]
 80485e4:	681b      	ldr	r3, [r3, #0]
 80485e6:	f003 0310 	and.w	r3, r3, #16
 80485ea:	2b00      	cmp	r3, #0
 80485ec:	d01a      	beq.n	8048624 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80485ee:	687b      	ldr	r3, [r7, #4]
 80485f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80485f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80485f8:	d10a      	bne.n	8048610 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80485fa:	687b      	ldr	r3, [r7, #4]
 80485fc:	3324      	adds	r3, #36	; 0x24
 80485fe:	2102      	movs	r1, #2
 8048600:	4618      	mov	r0, r3
 8048602:	f000 fccb 	bl	8048f9c <RCCEx_PLL3_Config>
 8048606:	4603      	mov	r3, r0
 8048608:	2b00      	cmp	r3, #0
 804860a:	d001      	beq.n	8048610 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 804860c:	2301      	movs	r3, #1
 804860e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8048610:	4b7a      	ldr	r3, [pc, #488]	; (80487fc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8048612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8048614:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8048618:	687b      	ldr	r3, [r7, #4]
 804861a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804861e:	4977      	ldr	r1, [pc, #476]	; (80487fc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8048620:	4313      	orrs	r3, r2
 8048622:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8048624:	687b      	ldr	r3, [r7, #4]
 8048626:	681b      	ldr	r3, [r3, #0]
 8048628:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 804862c:	2b00      	cmp	r3, #0
 804862e:	d034      	beq.n	804869a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8048630:	687b      	ldr	r3, [r7, #4]
 8048632:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8048636:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 804863a:	d01d      	beq.n	8048678 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 804863c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8048640:	d817      	bhi.n	8048672 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8048642:	2b00      	cmp	r3, #0
 8048644:	d003      	beq.n	804864e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8048646:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 804864a:	d009      	beq.n	8048660 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 804864c:	e011      	b.n	8048672 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 804864e:	687b      	ldr	r3, [r7, #4]
 8048650:	3304      	adds	r3, #4
 8048652:	2100      	movs	r1, #0
 8048654:	4618      	mov	r0, r3
 8048656:	f000 fbef 	bl	8048e38 <RCCEx_PLL2_Config>
 804865a:	4603      	mov	r3, r0
 804865c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 804865e:	e00c      	b.n	804867a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8048660:	687b      	ldr	r3, [r7, #4]
 8048662:	3324      	adds	r3, #36	; 0x24
 8048664:	2102      	movs	r1, #2
 8048666:	4618      	mov	r0, r3
 8048668:	f000 fc98 	bl	8048f9c <RCCEx_PLL3_Config>
 804866c:	4603      	mov	r3, r0
 804866e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8048670:	e003      	b.n	804867a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8048672:	2301      	movs	r3, #1
 8048674:	75fb      	strb	r3, [r7, #23]
      break;
 8048676:	e000      	b.n	804867a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8048678:	bf00      	nop
    }

    if(ret == HAL_OK)
 804867a:	7dfb      	ldrb	r3, [r7, #23]
 804867c:	2b00      	cmp	r3, #0
 804867e:	d10a      	bne.n	8048696 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8048680:	4b5e      	ldr	r3, [pc, #376]	; (80487fc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8048682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8048684:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8048688:	687b      	ldr	r3, [r7, #4]
 804868a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 804868e:	495b      	ldr	r1, [pc, #364]	; (80487fc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8048690:	4313      	orrs	r3, r2
 8048692:	658b      	str	r3, [r1, #88]	; 0x58
 8048694:	e001      	b.n	804869a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8048696:	7dfb      	ldrb	r3, [r7, #23]
 8048698:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 804869a:	687b      	ldr	r3, [r7, #4]
 804869c:	681b      	ldr	r3, [r3, #0]
 804869e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80486a2:	2b00      	cmp	r3, #0
 80486a4:	d033      	beq.n	804870e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80486a6:	687b      	ldr	r3, [r7, #4]
 80486a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80486ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80486b0:	d01c      	beq.n	80486ec <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80486b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80486b6:	d816      	bhi.n	80486e6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80486b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80486bc:	d003      	beq.n	80486c6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80486be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80486c2:	d007      	beq.n	80486d4 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 80486c4:	e00f      	b.n	80486e6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80486c6:	4b4d      	ldr	r3, [pc, #308]	; (80487fc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80486c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80486ca:	4a4c      	ldr	r2, [pc, #304]	; (80487fc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80486cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80486d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80486d2:	e00c      	b.n	80486ee <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80486d4:	687b      	ldr	r3, [r7, #4]
 80486d6:	3324      	adds	r3, #36	; 0x24
 80486d8:	2101      	movs	r1, #1
 80486da:	4618      	mov	r0, r3
 80486dc:	f000 fc5e 	bl	8048f9c <RCCEx_PLL3_Config>
 80486e0:	4603      	mov	r3, r0
 80486e2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80486e4:	e003      	b.n	80486ee <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80486e6:	2301      	movs	r3, #1
 80486e8:	75fb      	strb	r3, [r7, #23]
      break;
 80486ea:	e000      	b.n	80486ee <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 80486ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80486ee:	7dfb      	ldrb	r3, [r7, #23]
 80486f0:	2b00      	cmp	r3, #0
 80486f2:	d10a      	bne.n	804870a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80486f4:	4b41      	ldr	r3, [pc, #260]	; (80487fc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80486f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80486f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80486fc:	687b      	ldr	r3, [r7, #4]
 80486fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8048702:	493e      	ldr	r1, [pc, #248]	; (80487fc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8048704:	4313      	orrs	r3, r2
 8048706:	654b      	str	r3, [r1, #84]	; 0x54
 8048708:	e001      	b.n	804870e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804870a:	7dfb      	ldrb	r3, [r7, #23]
 804870c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 804870e:	687b      	ldr	r3, [r7, #4]
 8048710:	681b      	ldr	r3, [r3, #0]
 8048712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8048716:	2b00      	cmp	r3, #0
 8048718:	d029      	beq.n	804876e <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 804871a:	687b      	ldr	r3, [r7, #4]
 804871c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804871e:	2b00      	cmp	r3, #0
 8048720:	d003      	beq.n	804872a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8048722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8048726:	d007      	beq.n	8048738 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8048728:	e00f      	b.n	804874a <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 804872a:	4b34      	ldr	r3, [pc, #208]	; (80487fc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 804872c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804872e:	4a33      	ldr	r2, [pc, #204]	; (80487fc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8048730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8048734:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8048736:	e00b      	b.n	8048750 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8048738:	687b      	ldr	r3, [r7, #4]
 804873a:	3304      	adds	r3, #4
 804873c:	2102      	movs	r1, #2
 804873e:	4618      	mov	r0, r3
 8048740:	f000 fb7a 	bl	8048e38 <RCCEx_PLL2_Config>
 8048744:	4603      	mov	r3, r0
 8048746:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8048748:	e002      	b.n	8048750 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 804874a:	2301      	movs	r3, #1
 804874c:	75fb      	strb	r3, [r7, #23]
      break;
 804874e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8048750:	7dfb      	ldrb	r3, [r7, #23]
 8048752:	2b00      	cmp	r3, #0
 8048754:	d109      	bne.n	804876a <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8048756:	4b29      	ldr	r3, [pc, #164]	; (80487fc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8048758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804875a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 804875e:	687b      	ldr	r3, [r7, #4]
 8048760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8048762:	4926      	ldr	r1, [pc, #152]	; (80487fc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8048764:	4313      	orrs	r3, r2
 8048766:	64cb      	str	r3, [r1, #76]	; 0x4c
 8048768:	e001      	b.n	804876e <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804876a:	7dfb      	ldrb	r3, [r7, #23]
 804876c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 804876e:	687b      	ldr	r3, [r7, #4]
 8048770:	681b      	ldr	r3, [r3, #0]
 8048772:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8048776:	2b00      	cmp	r3, #0
 8048778:	d00a      	beq.n	8048790 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 804877a:	687b      	ldr	r3, [r7, #4]
 804877c:	3324      	adds	r3, #36	; 0x24
 804877e:	2102      	movs	r1, #2
 8048780:	4618      	mov	r0, r3
 8048782:	f000 fc0b 	bl	8048f9c <RCCEx_PLL3_Config>
 8048786:	4603      	mov	r3, r0
 8048788:	2b00      	cmp	r3, #0
 804878a:	d001      	beq.n	8048790 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 804878c:	2301      	movs	r3, #1
 804878e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8048790:	687b      	ldr	r3, [r7, #4]
 8048792:	681b      	ldr	r3, [r3, #0]
 8048794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8048798:	2b00      	cmp	r3, #0
 804879a:	d033      	beq.n	8048804 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 804879c:	687b      	ldr	r3, [r7, #4]
 804879e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80487a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80487a4:	d017      	beq.n	80487d6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80487a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80487aa:	d811      	bhi.n	80487d0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80487ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80487b0:	d013      	beq.n	80487da <HAL_RCCEx_PeriphCLKConfig+0xd12>
 80487b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80487b6:	d80b      	bhi.n	80487d0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80487b8:	2b00      	cmp	r3, #0
 80487ba:	d010      	beq.n	80487de <HAL_RCCEx_PeriphCLKConfig+0xd16>
 80487bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80487c0:	d106      	bne.n	80487d0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80487c2:	4b0e      	ldr	r3, [pc, #56]	; (80487fc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80487c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80487c6:	4a0d      	ldr	r2, [pc, #52]	; (80487fc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80487c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80487cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80487ce:	e007      	b.n	80487e0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80487d0:	2301      	movs	r3, #1
 80487d2:	75fb      	strb	r3, [r7, #23]
      break;
 80487d4:	e004      	b.n	80487e0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80487d6:	bf00      	nop
 80487d8:	e002      	b.n	80487e0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80487da:	bf00      	nop
 80487dc:	e000      	b.n	80487e0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80487de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80487e0:	7dfb      	ldrb	r3, [r7, #23]
 80487e2:	2b00      	cmp	r3, #0
 80487e4:	d10c      	bne.n	8048800 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80487e6:	4b05      	ldr	r3, [pc, #20]	; (80487fc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80487e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80487ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80487ee:	687b      	ldr	r3, [r7, #4]
 80487f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80487f2:	4902      	ldr	r1, [pc, #8]	; (80487fc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80487f4:	4313      	orrs	r3, r2
 80487f6:	654b      	str	r3, [r1, #84]	; 0x54
 80487f8:	e004      	b.n	8048804 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 80487fa:	bf00      	nop
 80487fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8048800:	7dfb      	ldrb	r3, [r7, #23]
 8048802:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8048804:	687b      	ldr	r3, [r7, #4]
 8048806:	681b      	ldr	r3, [r3, #0]
 8048808:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 804880c:	2b00      	cmp	r3, #0
 804880e:	d008      	beq.n	8048822 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8048810:	4b29      	ldr	r3, [pc, #164]	; (80488b8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8048812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8048814:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8048818:	687b      	ldr	r3, [r7, #4]
 804881a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804881c:	4926      	ldr	r1, [pc, #152]	; (80488b8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 804881e:	4313      	orrs	r3, r2
 8048820:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8048822:	687b      	ldr	r3, [r7, #4]
 8048824:	681b      	ldr	r3, [r3, #0]
 8048826:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 804882a:	2b00      	cmp	r3, #0
 804882c:	d008      	beq.n	8048840 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 804882e:	4b22      	ldr	r3, [pc, #136]	; (80488b8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8048830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8048832:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8048836:	687b      	ldr	r3, [r7, #4]
 8048838:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 804883a:	491f      	ldr	r1, [pc, #124]	; (80488b8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 804883c:	4313      	orrs	r3, r2
 804883e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8048840:	687b      	ldr	r3, [r7, #4]
 8048842:	681b      	ldr	r3, [r3, #0]
 8048844:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8048848:	2b00      	cmp	r3, #0
 804884a:	d00d      	beq.n	8048868 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 804884c:	4b1a      	ldr	r3, [pc, #104]	; (80488b8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 804884e:	691b      	ldr	r3, [r3, #16]
 8048850:	4a19      	ldr	r2, [pc, #100]	; (80488b8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8048852:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8048856:	6113      	str	r3, [r2, #16]
 8048858:	4b17      	ldr	r3, [pc, #92]	; (80488b8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 804885a:	691a      	ldr	r2, [r3, #16]
 804885c:	687b      	ldr	r3, [r7, #4]
 804885e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8048862:	4915      	ldr	r1, [pc, #84]	; (80488b8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8048864:	4313      	orrs	r3, r2
 8048866:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8048868:	687b      	ldr	r3, [r7, #4]
 804886a:	681b      	ldr	r3, [r3, #0]
 804886c:	2b00      	cmp	r3, #0
 804886e:	da08      	bge.n	8048882 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8048870:	4b11      	ldr	r3, [pc, #68]	; (80488b8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8048872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8048874:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8048878:	687b      	ldr	r3, [r7, #4]
 804887a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 804887c:	490e      	ldr	r1, [pc, #56]	; (80488b8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 804887e:	4313      	orrs	r3, r2
 8048880:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8048882:	687b      	ldr	r3, [r7, #4]
 8048884:	681b      	ldr	r3, [r3, #0]
 8048886:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 804888a:	2b00      	cmp	r3, #0
 804888c:	d009      	beq.n	80488a2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 804888e:	4b0a      	ldr	r3, [pc, #40]	; (80488b8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8048890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8048892:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8048896:	687b      	ldr	r3, [r7, #4]
 8048898:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 804889c:	4906      	ldr	r1, [pc, #24]	; (80488b8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 804889e:	4313      	orrs	r3, r2
 80488a0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80488a2:	7dbb      	ldrb	r3, [r7, #22]
 80488a4:	2b00      	cmp	r3, #0
 80488a6:	d101      	bne.n	80488ac <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 80488a8:	2300      	movs	r3, #0
 80488aa:	e000      	b.n	80488ae <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 80488ac:	2301      	movs	r3, #1
}
 80488ae:	4618      	mov	r0, r3
 80488b0:	3718      	adds	r7, #24
 80488b2:	46bd      	mov	sp, r7
 80488b4:	bd80      	pop	{r7, pc}
 80488b6:	bf00      	nop
 80488b8:	58024400 	.word	0x58024400

080488bc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80488bc:	b580      	push	{r7, lr}
 80488be:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80488c0:	f7ff f864 	bl	804798c <HAL_RCC_GetHCLKFreq>
 80488c4:	4602      	mov	r2, r0
 80488c6:	4b06      	ldr	r3, [pc, #24]	; (80488e0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80488c8:	6a1b      	ldr	r3, [r3, #32]
 80488ca:	091b      	lsrs	r3, r3, #4
 80488cc:	f003 0307 	and.w	r3, r3, #7
 80488d0:	4904      	ldr	r1, [pc, #16]	; (80488e4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80488d2:	5ccb      	ldrb	r3, [r1, r3]
 80488d4:	f003 031f 	and.w	r3, r3, #31
 80488d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80488dc:	4618      	mov	r0, r3
 80488de:	bd80      	pop	{r7, pc}
 80488e0:	58024400 	.word	0x58024400
 80488e4:	0805b950 	.word	0x0805b950

080488e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80488e8:	b480      	push	{r7}
 80488ea:	b089      	sub	sp, #36	; 0x24
 80488ec:	af00      	add	r7, sp, #0
 80488ee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80488f0:	4ba1      	ldr	r3, [pc, #644]	; (8048b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80488f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80488f4:	f003 0303 	and.w	r3, r3, #3
 80488f8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80488fa:	4b9f      	ldr	r3, [pc, #636]	; (8048b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80488fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80488fe:	0b1b      	lsrs	r3, r3, #12
 8048900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8048904:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8048906:	4b9c      	ldr	r3, [pc, #624]	; (8048b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8048908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804890a:	091b      	lsrs	r3, r3, #4
 804890c:	f003 0301 	and.w	r3, r3, #1
 8048910:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8048912:	4b99      	ldr	r3, [pc, #612]	; (8048b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8048914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8048916:	08db      	lsrs	r3, r3, #3
 8048918:	f3c3 030c 	ubfx	r3, r3, #0, #13
 804891c:	693a      	ldr	r2, [r7, #16]
 804891e:	fb02 f303 	mul.w	r3, r2, r3
 8048922:	ee07 3a90 	vmov	s15, r3
 8048926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 804892a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 804892e:	697b      	ldr	r3, [r7, #20]
 8048930:	2b00      	cmp	r3, #0
 8048932:	f000 8111 	beq.w	8048b58 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8048936:	69bb      	ldr	r3, [r7, #24]
 8048938:	2b02      	cmp	r3, #2
 804893a:	f000 8083 	beq.w	8048a44 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 804893e:	69bb      	ldr	r3, [r7, #24]
 8048940:	2b02      	cmp	r3, #2
 8048942:	f200 80a1 	bhi.w	8048a88 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8048946:	69bb      	ldr	r3, [r7, #24]
 8048948:	2b00      	cmp	r3, #0
 804894a:	d003      	beq.n	8048954 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 804894c:	69bb      	ldr	r3, [r7, #24]
 804894e:	2b01      	cmp	r3, #1
 8048950:	d056      	beq.n	8048a00 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8048952:	e099      	b.n	8048a88 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8048954:	4b88      	ldr	r3, [pc, #544]	; (8048b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8048956:	681b      	ldr	r3, [r3, #0]
 8048958:	f003 0320 	and.w	r3, r3, #32
 804895c:	2b00      	cmp	r3, #0
 804895e:	d02d      	beq.n	80489bc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8048960:	4b85      	ldr	r3, [pc, #532]	; (8048b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8048962:	681b      	ldr	r3, [r3, #0]
 8048964:	08db      	lsrs	r3, r3, #3
 8048966:	f003 0303 	and.w	r3, r3, #3
 804896a:	4a84      	ldr	r2, [pc, #528]	; (8048b7c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 804896c:	fa22 f303 	lsr.w	r3, r2, r3
 8048970:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8048972:	68bb      	ldr	r3, [r7, #8]
 8048974:	ee07 3a90 	vmov	s15, r3
 8048978:	eef8 6a67 	vcvt.f32.u32	s13, s15
 804897c:	697b      	ldr	r3, [r7, #20]
 804897e:	ee07 3a90 	vmov	s15, r3
 8048982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8048986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 804898a:	4b7b      	ldr	r3, [pc, #492]	; (8048b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 804898c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804898e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8048992:	ee07 3a90 	vmov	s15, r3
 8048996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 804899a:	ed97 6a03 	vldr	s12, [r7, #12]
 804899e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8048b80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80489a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80489a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80489aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80489ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80489b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80489b6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80489ba:	e087      	b.n	8048acc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80489bc:	697b      	ldr	r3, [r7, #20]
 80489be:	ee07 3a90 	vmov	s15, r3
 80489c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80489c6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8048b84 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80489ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80489ce:	4b6a      	ldr	r3, [pc, #424]	; (8048b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80489d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80489d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80489d6:	ee07 3a90 	vmov	s15, r3
 80489da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80489de:	ed97 6a03 	vldr	s12, [r7, #12]
 80489e2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8048b80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80489e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80489ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80489ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80489f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80489f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80489fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80489fe:	e065      	b.n	8048acc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8048a00:	697b      	ldr	r3, [r7, #20]
 8048a02:	ee07 3a90 	vmov	s15, r3
 8048a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8048a0a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8048b88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8048a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8048a12:	4b59      	ldr	r3, [pc, #356]	; (8048b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8048a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8048a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8048a1a:	ee07 3a90 	vmov	s15, r3
 8048a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8048a22:	ed97 6a03 	vldr	s12, [r7, #12]
 8048a26:	eddf 5a56 	vldr	s11, [pc, #344]	; 8048b80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8048a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8048a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8048a32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8048a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8048a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8048a3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8048a42:	e043      	b.n	8048acc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8048a44:	697b      	ldr	r3, [r7, #20]
 8048a46:	ee07 3a90 	vmov	s15, r3
 8048a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8048a4e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8048b8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8048a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8048a56:	4b48      	ldr	r3, [pc, #288]	; (8048b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8048a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8048a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8048a5e:	ee07 3a90 	vmov	s15, r3
 8048a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8048a66:	ed97 6a03 	vldr	s12, [r7, #12]
 8048a6a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8048b80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8048a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8048a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8048a76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8048a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8048a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8048a82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8048a86:	e021      	b.n	8048acc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8048a88:	697b      	ldr	r3, [r7, #20]
 8048a8a:	ee07 3a90 	vmov	s15, r3
 8048a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8048a92:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8048b88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8048a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8048a9a:	4b37      	ldr	r3, [pc, #220]	; (8048b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8048a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8048a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8048aa2:	ee07 3a90 	vmov	s15, r3
 8048aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8048aaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8048aae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8048b80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8048ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8048ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8048aba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8048abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8048ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8048ac6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8048aca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8048acc:	4b2a      	ldr	r3, [pc, #168]	; (8048b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8048ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8048ad0:	0a5b      	lsrs	r3, r3, #9
 8048ad2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8048ad6:	ee07 3a90 	vmov	s15, r3
 8048ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8048ade:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8048ae2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8048ae6:	edd7 6a07 	vldr	s13, [r7, #28]
 8048aea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8048aee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8048af2:	ee17 2a90 	vmov	r2, s15
 8048af6:	687b      	ldr	r3, [r7, #4]
 8048af8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8048afa:	4b1f      	ldr	r3, [pc, #124]	; (8048b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8048afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8048afe:	0c1b      	lsrs	r3, r3, #16
 8048b00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8048b04:	ee07 3a90 	vmov	s15, r3
 8048b08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8048b0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8048b10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8048b14:	edd7 6a07 	vldr	s13, [r7, #28]
 8048b18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8048b1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8048b20:	ee17 2a90 	vmov	r2, s15
 8048b24:	687b      	ldr	r3, [r7, #4]
 8048b26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8048b28:	4b13      	ldr	r3, [pc, #76]	; (8048b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8048b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8048b2c:	0e1b      	lsrs	r3, r3, #24
 8048b2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8048b32:	ee07 3a90 	vmov	s15, r3
 8048b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8048b3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8048b3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8048b42:	edd7 6a07 	vldr	s13, [r7, #28]
 8048b46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8048b4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8048b4e:	ee17 2a90 	vmov	r2, s15
 8048b52:	687b      	ldr	r3, [r7, #4]
 8048b54:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8048b56:	e008      	b.n	8048b6a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8048b58:	687b      	ldr	r3, [r7, #4]
 8048b5a:	2200      	movs	r2, #0
 8048b5c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8048b5e:	687b      	ldr	r3, [r7, #4]
 8048b60:	2200      	movs	r2, #0
 8048b62:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8048b64:	687b      	ldr	r3, [r7, #4]
 8048b66:	2200      	movs	r2, #0
 8048b68:	609a      	str	r2, [r3, #8]
}
 8048b6a:	bf00      	nop
 8048b6c:	3724      	adds	r7, #36	; 0x24
 8048b6e:	46bd      	mov	sp, r7
 8048b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048b74:	4770      	bx	lr
 8048b76:	bf00      	nop
 8048b78:	58024400 	.word	0x58024400
 8048b7c:	03d09000 	.word	0x03d09000
 8048b80:	46000000 	.word	0x46000000
 8048b84:	4c742400 	.word	0x4c742400
 8048b88:	4a742400 	.word	0x4a742400
 8048b8c:	4af42400 	.word	0x4af42400

08048b90 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8048b90:	b480      	push	{r7}
 8048b92:	b089      	sub	sp, #36	; 0x24
 8048b94:	af00      	add	r7, sp, #0
 8048b96:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8048b98:	4ba1      	ldr	r3, [pc, #644]	; (8048e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8048b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8048b9c:	f003 0303 	and.w	r3, r3, #3
 8048ba0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8048ba2:	4b9f      	ldr	r3, [pc, #636]	; (8048e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8048ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8048ba6:	0d1b      	lsrs	r3, r3, #20
 8048ba8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8048bac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8048bae:	4b9c      	ldr	r3, [pc, #624]	; (8048e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8048bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8048bb2:	0a1b      	lsrs	r3, r3, #8
 8048bb4:	f003 0301 	and.w	r3, r3, #1
 8048bb8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8048bba:	4b99      	ldr	r3, [pc, #612]	; (8048e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8048bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8048bbe:	08db      	lsrs	r3, r3, #3
 8048bc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8048bc4:	693a      	ldr	r2, [r7, #16]
 8048bc6:	fb02 f303 	mul.w	r3, r2, r3
 8048bca:	ee07 3a90 	vmov	s15, r3
 8048bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8048bd2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8048bd6:	697b      	ldr	r3, [r7, #20]
 8048bd8:	2b00      	cmp	r3, #0
 8048bda:	f000 8111 	beq.w	8048e00 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8048bde:	69bb      	ldr	r3, [r7, #24]
 8048be0:	2b02      	cmp	r3, #2
 8048be2:	f000 8083 	beq.w	8048cec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8048be6:	69bb      	ldr	r3, [r7, #24]
 8048be8:	2b02      	cmp	r3, #2
 8048bea:	f200 80a1 	bhi.w	8048d30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8048bee:	69bb      	ldr	r3, [r7, #24]
 8048bf0:	2b00      	cmp	r3, #0
 8048bf2:	d003      	beq.n	8048bfc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8048bf4:	69bb      	ldr	r3, [r7, #24]
 8048bf6:	2b01      	cmp	r3, #1
 8048bf8:	d056      	beq.n	8048ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8048bfa:	e099      	b.n	8048d30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8048bfc:	4b88      	ldr	r3, [pc, #544]	; (8048e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8048bfe:	681b      	ldr	r3, [r3, #0]
 8048c00:	f003 0320 	and.w	r3, r3, #32
 8048c04:	2b00      	cmp	r3, #0
 8048c06:	d02d      	beq.n	8048c64 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8048c08:	4b85      	ldr	r3, [pc, #532]	; (8048e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8048c0a:	681b      	ldr	r3, [r3, #0]
 8048c0c:	08db      	lsrs	r3, r3, #3
 8048c0e:	f003 0303 	and.w	r3, r3, #3
 8048c12:	4a84      	ldr	r2, [pc, #528]	; (8048e24 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8048c14:	fa22 f303 	lsr.w	r3, r2, r3
 8048c18:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8048c1a:	68bb      	ldr	r3, [r7, #8]
 8048c1c:	ee07 3a90 	vmov	s15, r3
 8048c20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8048c24:	697b      	ldr	r3, [r7, #20]
 8048c26:	ee07 3a90 	vmov	s15, r3
 8048c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8048c2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8048c32:	4b7b      	ldr	r3, [pc, #492]	; (8048e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8048c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8048c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8048c3a:	ee07 3a90 	vmov	s15, r3
 8048c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8048c42:	ed97 6a03 	vldr	s12, [r7, #12]
 8048c46:	eddf 5a78 	vldr	s11, [pc, #480]	; 8048e28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8048c4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8048c4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8048c52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8048c56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8048c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8048c5e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8048c62:	e087      	b.n	8048d74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8048c64:	697b      	ldr	r3, [r7, #20]
 8048c66:	ee07 3a90 	vmov	s15, r3
 8048c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8048c6e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8048e2c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8048c72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8048c76:	4b6a      	ldr	r3, [pc, #424]	; (8048e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8048c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8048c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8048c7e:	ee07 3a90 	vmov	s15, r3
 8048c82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8048c86:	ed97 6a03 	vldr	s12, [r7, #12]
 8048c8a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8048e28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8048c8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8048c92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8048c96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8048c9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8048c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8048ca2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8048ca6:	e065      	b.n	8048d74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8048ca8:	697b      	ldr	r3, [r7, #20]
 8048caa:	ee07 3a90 	vmov	s15, r3
 8048cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8048cb2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8048e30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8048cb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8048cba:	4b59      	ldr	r3, [pc, #356]	; (8048e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8048cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8048cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8048cc2:	ee07 3a90 	vmov	s15, r3
 8048cc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8048cca:	ed97 6a03 	vldr	s12, [r7, #12]
 8048cce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8048e28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8048cd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8048cd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8048cda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8048cde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8048ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8048ce6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8048cea:	e043      	b.n	8048d74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8048cec:	697b      	ldr	r3, [r7, #20]
 8048cee:	ee07 3a90 	vmov	s15, r3
 8048cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8048cf6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8048e34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8048cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8048cfe:	4b48      	ldr	r3, [pc, #288]	; (8048e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8048d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8048d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8048d06:	ee07 3a90 	vmov	s15, r3
 8048d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8048d0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8048d12:	eddf 5a45 	vldr	s11, [pc, #276]	; 8048e28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8048d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8048d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8048d1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8048d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8048d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8048d2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8048d2e:	e021      	b.n	8048d74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8048d30:	697b      	ldr	r3, [r7, #20]
 8048d32:	ee07 3a90 	vmov	s15, r3
 8048d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8048d3a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8048e30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8048d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8048d42:	4b37      	ldr	r3, [pc, #220]	; (8048e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8048d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8048d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8048d4a:	ee07 3a90 	vmov	s15, r3
 8048d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8048d52:	ed97 6a03 	vldr	s12, [r7, #12]
 8048d56:	eddf 5a34 	vldr	s11, [pc, #208]	; 8048e28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8048d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8048d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8048d62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8048d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8048d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8048d6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8048d72:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8048d74:	4b2a      	ldr	r3, [pc, #168]	; (8048e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8048d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8048d78:	0a5b      	lsrs	r3, r3, #9
 8048d7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8048d7e:	ee07 3a90 	vmov	s15, r3
 8048d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8048d86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8048d8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8048d8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8048d92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8048d96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8048d9a:	ee17 2a90 	vmov	r2, s15
 8048d9e:	687b      	ldr	r3, [r7, #4]
 8048da0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8048da2:	4b1f      	ldr	r3, [pc, #124]	; (8048e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8048da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8048da6:	0c1b      	lsrs	r3, r3, #16
 8048da8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8048dac:	ee07 3a90 	vmov	s15, r3
 8048db0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8048db4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8048db8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8048dbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8048dc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8048dc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8048dc8:	ee17 2a90 	vmov	r2, s15
 8048dcc:	687b      	ldr	r3, [r7, #4]
 8048dce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8048dd0:	4b13      	ldr	r3, [pc, #76]	; (8048e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8048dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8048dd4:	0e1b      	lsrs	r3, r3, #24
 8048dd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8048dda:	ee07 3a90 	vmov	s15, r3
 8048dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8048de2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8048de6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8048dea:	edd7 6a07 	vldr	s13, [r7, #28]
 8048dee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8048df2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8048df6:	ee17 2a90 	vmov	r2, s15
 8048dfa:	687b      	ldr	r3, [r7, #4]
 8048dfc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8048dfe:	e008      	b.n	8048e12 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8048e00:	687b      	ldr	r3, [r7, #4]
 8048e02:	2200      	movs	r2, #0
 8048e04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8048e06:	687b      	ldr	r3, [r7, #4]
 8048e08:	2200      	movs	r2, #0
 8048e0a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8048e0c:	687b      	ldr	r3, [r7, #4]
 8048e0e:	2200      	movs	r2, #0
 8048e10:	609a      	str	r2, [r3, #8]
}
 8048e12:	bf00      	nop
 8048e14:	3724      	adds	r7, #36	; 0x24
 8048e16:	46bd      	mov	sp, r7
 8048e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048e1c:	4770      	bx	lr
 8048e1e:	bf00      	nop
 8048e20:	58024400 	.word	0x58024400
 8048e24:	03d09000 	.word	0x03d09000
 8048e28:	46000000 	.word	0x46000000
 8048e2c:	4c742400 	.word	0x4c742400
 8048e30:	4a742400 	.word	0x4a742400
 8048e34:	4af42400 	.word	0x4af42400

08048e38 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8048e38:	b580      	push	{r7, lr}
 8048e3a:	b084      	sub	sp, #16
 8048e3c:	af00      	add	r7, sp, #0
 8048e3e:	6078      	str	r0, [r7, #4]
 8048e40:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8048e42:	2300      	movs	r3, #0
 8048e44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8048e46:	4b53      	ldr	r3, [pc, #332]	; (8048f94 <RCCEx_PLL2_Config+0x15c>)
 8048e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8048e4a:	f003 0303 	and.w	r3, r3, #3
 8048e4e:	2b03      	cmp	r3, #3
 8048e50:	d101      	bne.n	8048e56 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8048e52:	2301      	movs	r3, #1
 8048e54:	e099      	b.n	8048f8a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8048e56:	4b4f      	ldr	r3, [pc, #316]	; (8048f94 <RCCEx_PLL2_Config+0x15c>)
 8048e58:	681b      	ldr	r3, [r3, #0]
 8048e5a:	4a4e      	ldr	r2, [pc, #312]	; (8048f94 <RCCEx_PLL2_Config+0x15c>)
 8048e5c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8048e60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8048e62:	f7f9 f93b 	bl	80420dc <HAL_GetTick>
 8048e66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8048e68:	e008      	b.n	8048e7c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8048e6a:	f7f9 f937 	bl	80420dc <HAL_GetTick>
 8048e6e:	4602      	mov	r2, r0
 8048e70:	68bb      	ldr	r3, [r7, #8]
 8048e72:	1ad3      	subs	r3, r2, r3
 8048e74:	2b02      	cmp	r3, #2
 8048e76:	d901      	bls.n	8048e7c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8048e78:	2303      	movs	r3, #3
 8048e7a:	e086      	b.n	8048f8a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8048e7c:	4b45      	ldr	r3, [pc, #276]	; (8048f94 <RCCEx_PLL2_Config+0x15c>)
 8048e7e:	681b      	ldr	r3, [r3, #0]
 8048e80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8048e84:	2b00      	cmp	r3, #0
 8048e86:	d1f0      	bne.n	8048e6a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8048e88:	4b42      	ldr	r3, [pc, #264]	; (8048f94 <RCCEx_PLL2_Config+0x15c>)
 8048e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8048e8c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8048e90:	687b      	ldr	r3, [r7, #4]
 8048e92:	681b      	ldr	r3, [r3, #0]
 8048e94:	031b      	lsls	r3, r3, #12
 8048e96:	493f      	ldr	r1, [pc, #252]	; (8048f94 <RCCEx_PLL2_Config+0x15c>)
 8048e98:	4313      	orrs	r3, r2
 8048e9a:	628b      	str	r3, [r1, #40]	; 0x28
 8048e9c:	687b      	ldr	r3, [r7, #4]
 8048e9e:	685b      	ldr	r3, [r3, #4]
 8048ea0:	3b01      	subs	r3, #1
 8048ea2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8048ea6:	687b      	ldr	r3, [r7, #4]
 8048ea8:	689b      	ldr	r3, [r3, #8]
 8048eaa:	3b01      	subs	r3, #1
 8048eac:	025b      	lsls	r3, r3, #9
 8048eae:	b29b      	uxth	r3, r3
 8048eb0:	431a      	orrs	r2, r3
 8048eb2:	687b      	ldr	r3, [r7, #4]
 8048eb4:	68db      	ldr	r3, [r3, #12]
 8048eb6:	3b01      	subs	r3, #1
 8048eb8:	041b      	lsls	r3, r3, #16
 8048eba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8048ebe:	431a      	orrs	r2, r3
 8048ec0:	687b      	ldr	r3, [r7, #4]
 8048ec2:	691b      	ldr	r3, [r3, #16]
 8048ec4:	3b01      	subs	r3, #1
 8048ec6:	061b      	lsls	r3, r3, #24
 8048ec8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8048ecc:	4931      	ldr	r1, [pc, #196]	; (8048f94 <RCCEx_PLL2_Config+0x15c>)
 8048ece:	4313      	orrs	r3, r2
 8048ed0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8048ed2:	4b30      	ldr	r3, [pc, #192]	; (8048f94 <RCCEx_PLL2_Config+0x15c>)
 8048ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8048ed6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8048eda:	687b      	ldr	r3, [r7, #4]
 8048edc:	695b      	ldr	r3, [r3, #20]
 8048ede:	492d      	ldr	r1, [pc, #180]	; (8048f94 <RCCEx_PLL2_Config+0x15c>)
 8048ee0:	4313      	orrs	r3, r2
 8048ee2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8048ee4:	4b2b      	ldr	r3, [pc, #172]	; (8048f94 <RCCEx_PLL2_Config+0x15c>)
 8048ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8048ee8:	f023 0220 	bic.w	r2, r3, #32
 8048eec:	687b      	ldr	r3, [r7, #4]
 8048eee:	699b      	ldr	r3, [r3, #24]
 8048ef0:	4928      	ldr	r1, [pc, #160]	; (8048f94 <RCCEx_PLL2_Config+0x15c>)
 8048ef2:	4313      	orrs	r3, r2
 8048ef4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8048ef6:	4b27      	ldr	r3, [pc, #156]	; (8048f94 <RCCEx_PLL2_Config+0x15c>)
 8048ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8048efa:	4a26      	ldr	r2, [pc, #152]	; (8048f94 <RCCEx_PLL2_Config+0x15c>)
 8048efc:	f023 0310 	bic.w	r3, r3, #16
 8048f00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8048f02:	4b24      	ldr	r3, [pc, #144]	; (8048f94 <RCCEx_PLL2_Config+0x15c>)
 8048f04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8048f06:	4b24      	ldr	r3, [pc, #144]	; (8048f98 <RCCEx_PLL2_Config+0x160>)
 8048f08:	4013      	ands	r3, r2
 8048f0a:	687a      	ldr	r2, [r7, #4]
 8048f0c:	69d2      	ldr	r2, [r2, #28]
 8048f0e:	00d2      	lsls	r2, r2, #3
 8048f10:	4920      	ldr	r1, [pc, #128]	; (8048f94 <RCCEx_PLL2_Config+0x15c>)
 8048f12:	4313      	orrs	r3, r2
 8048f14:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8048f16:	4b1f      	ldr	r3, [pc, #124]	; (8048f94 <RCCEx_PLL2_Config+0x15c>)
 8048f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8048f1a:	4a1e      	ldr	r2, [pc, #120]	; (8048f94 <RCCEx_PLL2_Config+0x15c>)
 8048f1c:	f043 0310 	orr.w	r3, r3, #16
 8048f20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8048f22:	683b      	ldr	r3, [r7, #0]
 8048f24:	2b00      	cmp	r3, #0
 8048f26:	d106      	bne.n	8048f36 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8048f28:	4b1a      	ldr	r3, [pc, #104]	; (8048f94 <RCCEx_PLL2_Config+0x15c>)
 8048f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8048f2c:	4a19      	ldr	r2, [pc, #100]	; (8048f94 <RCCEx_PLL2_Config+0x15c>)
 8048f2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8048f32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8048f34:	e00f      	b.n	8048f56 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8048f36:	683b      	ldr	r3, [r7, #0]
 8048f38:	2b01      	cmp	r3, #1
 8048f3a:	d106      	bne.n	8048f4a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8048f3c:	4b15      	ldr	r3, [pc, #84]	; (8048f94 <RCCEx_PLL2_Config+0x15c>)
 8048f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8048f40:	4a14      	ldr	r2, [pc, #80]	; (8048f94 <RCCEx_PLL2_Config+0x15c>)
 8048f42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8048f46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8048f48:	e005      	b.n	8048f56 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8048f4a:	4b12      	ldr	r3, [pc, #72]	; (8048f94 <RCCEx_PLL2_Config+0x15c>)
 8048f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8048f4e:	4a11      	ldr	r2, [pc, #68]	; (8048f94 <RCCEx_PLL2_Config+0x15c>)
 8048f50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8048f54:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8048f56:	4b0f      	ldr	r3, [pc, #60]	; (8048f94 <RCCEx_PLL2_Config+0x15c>)
 8048f58:	681b      	ldr	r3, [r3, #0]
 8048f5a:	4a0e      	ldr	r2, [pc, #56]	; (8048f94 <RCCEx_PLL2_Config+0x15c>)
 8048f5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8048f60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8048f62:	f7f9 f8bb 	bl	80420dc <HAL_GetTick>
 8048f66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8048f68:	e008      	b.n	8048f7c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8048f6a:	f7f9 f8b7 	bl	80420dc <HAL_GetTick>
 8048f6e:	4602      	mov	r2, r0
 8048f70:	68bb      	ldr	r3, [r7, #8]
 8048f72:	1ad3      	subs	r3, r2, r3
 8048f74:	2b02      	cmp	r3, #2
 8048f76:	d901      	bls.n	8048f7c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8048f78:	2303      	movs	r3, #3
 8048f7a:	e006      	b.n	8048f8a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8048f7c:	4b05      	ldr	r3, [pc, #20]	; (8048f94 <RCCEx_PLL2_Config+0x15c>)
 8048f7e:	681b      	ldr	r3, [r3, #0]
 8048f80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8048f84:	2b00      	cmp	r3, #0
 8048f86:	d0f0      	beq.n	8048f6a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8048f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8048f8a:	4618      	mov	r0, r3
 8048f8c:	3710      	adds	r7, #16
 8048f8e:	46bd      	mov	sp, r7
 8048f90:	bd80      	pop	{r7, pc}
 8048f92:	bf00      	nop
 8048f94:	58024400 	.word	0x58024400
 8048f98:	ffff0007 	.word	0xffff0007

08048f9c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8048f9c:	b580      	push	{r7, lr}
 8048f9e:	b084      	sub	sp, #16
 8048fa0:	af00      	add	r7, sp, #0
 8048fa2:	6078      	str	r0, [r7, #4]
 8048fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8048fa6:	2300      	movs	r3, #0
 8048fa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8048faa:	4b53      	ldr	r3, [pc, #332]	; (80490f8 <RCCEx_PLL3_Config+0x15c>)
 8048fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8048fae:	f003 0303 	and.w	r3, r3, #3
 8048fb2:	2b03      	cmp	r3, #3
 8048fb4:	d101      	bne.n	8048fba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8048fb6:	2301      	movs	r3, #1
 8048fb8:	e099      	b.n	80490ee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8048fba:	4b4f      	ldr	r3, [pc, #316]	; (80490f8 <RCCEx_PLL3_Config+0x15c>)
 8048fbc:	681b      	ldr	r3, [r3, #0]
 8048fbe:	4a4e      	ldr	r2, [pc, #312]	; (80490f8 <RCCEx_PLL3_Config+0x15c>)
 8048fc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8048fc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8048fc6:	f7f9 f889 	bl	80420dc <HAL_GetTick>
 8048fca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8048fcc:	e008      	b.n	8048fe0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8048fce:	f7f9 f885 	bl	80420dc <HAL_GetTick>
 8048fd2:	4602      	mov	r2, r0
 8048fd4:	68bb      	ldr	r3, [r7, #8]
 8048fd6:	1ad3      	subs	r3, r2, r3
 8048fd8:	2b02      	cmp	r3, #2
 8048fda:	d901      	bls.n	8048fe0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8048fdc:	2303      	movs	r3, #3
 8048fde:	e086      	b.n	80490ee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8048fe0:	4b45      	ldr	r3, [pc, #276]	; (80490f8 <RCCEx_PLL3_Config+0x15c>)
 8048fe2:	681b      	ldr	r3, [r3, #0]
 8048fe4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8048fe8:	2b00      	cmp	r3, #0
 8048fea:	d1f0      	bne.n	8048fce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8048fec:	4b42      	ldr	r3, [pc, #264]	; (80490f8 <RCCEx_PLL3_Config+0x15c>)
 8048fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8048ff0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8048ff4:	687b      	ldr	r3, [r7, #4]
 8048ff6:	681b      	ldr	r3, [r3, #0]
 8048ff8:	051b      	lsls	r3, r3, #20
 8048ffa:	493f      	ldr	r1, [pc, #252]	; (80490f8 <RCCEx_PLL3_Config+0x15c>)
 8048ffc:	4313      	orrs	r3, r2
 8048ffe:	628b      	str	r3, [r1, #40]	; 0x28
 8049000:	687b      	ldr	r3, [r7, #4]
 8049002:	685b      	ldr	r3, [r3, #4]
 8049004:	3b01      	subs	r3, #1
 8049006:	f3c3 0208 	ubfx	r2, r3, #0, #9
 804900a:	687b      	ldr	r3, [r7, #4]
 804900c:	689b      	ldr	r3, [r3, #8]
 804900e:	3b01      	subs	r3, #1
 8049010:	025b      	lsls	r3, r3, #9
 8049012:	b29b      	uxth	r3, r3
 8049014:	431a      	orrs	r2, r3
 8049016:	687b      	ldr	r3, [r7, #4]
 8049018:	68db      	ldr	r3, [r3, #12]
 804901a:	3b01      	subs	r3, #1
 804901c:	041b      	lsls	r3, r3, #16
 804901e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8049022:	431a      	orrs	r2, r3
 8049024:	687b      	ldr	r3, [r7, #4]
 8049026:	691b      	ldr	r3, [r3, #16]
 8049028:	3b01      	subs	r3, #1
 804902a:	061b      	lsls	r3, r3, #24
 804902c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8049030:	4931      	ldr	r1, [pc, #196]	; (80490f8 <RCCEx_PLL3_Config+0x15c>)
 8049032:	4313      	orrs	r3, r2
 8049034:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8049036:	4b30      	ldr	r3, [pc, #192]	; (80490f8 <RCCEx_PLL3_Config+0x15c>)
 8049038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804903a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 804903e:	687b      	ldr	r3, [r7, #4]
 8049040:	695b      	ldr	r3, [r3, #20]
 8049042:	492d      	ldr	r1, [pc, #180]	; (80490f8 <RCCEx_PLL3_Config+0x15c>)
 8049044:	4313      	orrs	r3, r2
 8049046:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8049048:	4b2b      	ldr	r3, [pc, #172]	; (80490f8 <RCCEx_PLL3_Config+0x15c>)
 804904a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804904c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8049050:	687b      	ldr	r3, [r7, #4]
 8049052:	699b      	ldr	r3, [r3, #24]
 8049054:	4928      	ldr	r1, [pc, #160]	; (80490f8 <RCCEx_PLL3_Config+0x15c>)
 8049056:	4313      	orrs	r3, r2
 8049058:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 804905a:	4b27      	ldr	r3, [pc, #156]	; (80490f8 <RCCEx_PLL3_Config+0x15c>)
 804905c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804905e:	4a26      	ldr	r2, [pc, #152]	; (80490f8 <RCCEx_PLL3_Config+0x15c>)
 8049060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8049064:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8049066:	4b24      	ldr	r3, [pc, #144]	; (80490f8 <RCCEx_PLL3_Config+0x15c>)
 8049068:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 804906a:	4b24      	ldr	r3, [pc, #144]	; (80490fc <RCCEx_PLL3_Config+0x160>)
 804906c:	4013      	ands	r3, r2
 804906e:	687a      	ldr	r2, [r7, #4]
 8049070:	69d2      	ldr	r2, [r2, #28]
 8049072:	00d2      	lsls	r2, r2, #3
 8049074:	4920      	ldr	r1, [pc, #128]	; (80490f8 <RCCEx_PLL3_Config+0x15c>)
 8049076:	4313      	orrs	r3, r2
 8049078:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 804907a:	4b1f      	ldr	r3, [pc, #124]	; (80490f8 <RCCEx_PLL3_Config+0x15c>)
 804907c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804907e:	4a1e      	ldr	r2, [pc, #120]	; (80490f8 <RCCEx_PLL3_Config+0x15c>)
 8049080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8049084:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8049086:	683b      	ldr	r3, [r7, #0]
 8049088:	2b00      	cmp	r3, #0
 804908a:	d106      	bne.n	804909a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 804908c:	4b1a      	ldr	r3, [pc, #104]	; (80490f8 <RCCEx_PLL3_Config+0x15c>)
 804908e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8049090:	4a19      	ldr	r2, [pc, #100]	; (80490f8 <RCCEx_PLL3_Config+0x15c>)
 8049092:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8049096:	62d3      	str	r3, [r2, #44]	; 0x2c
 8049098:	e00f      	b.n	80490ba <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 804909a:	683b      	ldr	r3, [r7, #0]
 804909c:	2b01      	cmp	r3, #1
 804909e:	d106      	bne.n	80490ae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80490a0:	4b15      	ldr	r3, [pc, #84]	; (80490f8 <RCCEx_PLL3_Config+0x15c>)
 80490a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80490a4:	4a14      	ldr	r2, [pc, #80]	; (80490f8 <RCCEx_PLL3_Config+0x15c>)
 80490a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80490aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80490ac:	e005      	b.n	80490ba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80490ae:	4b12      	ldr	r3, [pc, #72]	; (80490f8 <RCCEx_PLL3_Config+0x15c>)
 80490b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80490b2:	4a11      	ldr	r2, [pc, #68]	; (80490f8 <RCCEx_PLL3_Config+0x15c>)
 80490b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80490b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80490ba:	4b0f      	ldr	r3, [pc, #60]	; (80490f8 <RCCEx_PLL3_Config+0x15c>)
 80490bc:	681b      	ldr	r3, [r3, #0]
 80490be:	4a0e      	ldr	r2, [pc, #56]	; (80490f8 <RCCEx_PLL3_Config+0x15c>)
 80490c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80490c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80490c6:	f7f9 f809 	bl	80420dc <HAL_GetTick>
 80490ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80490cc:	e008      	b.n	80490e0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80490ce:	f7f9 f805 	bl	80420dc <HAL_GetTick>
 80490d2:	4602      	mov	r2, r0
 80490d4:	68bb      	ldr	r3, [r7, #8]
 80490d6:	1ad3      	subs	r3, r2, r3
 80490d8:	2b02      	cmp	r3, #2
 80490da:	d901      	bls.n	80490e0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80490dc:	2303      	movs	r3, #3
 80490de:	e006      	b.n	80490ee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80490e0:	4b05      	ldr	r3, [pc, #20]	; (80490f8 <RCCEx_PLL3_Config+0x15c>)
 80490e2:	681b      	ldr	r3, [r3, #0]
 80490e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80490e8:	2b00      	cmp	r3, #0
 80490ea:	d0f0      	beq.n	80490ce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80490ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80490ee:	4618      	mov	r0, r3
 80490f0:	3710      	adds	r7, #16
 80490f2:	46bd      	mov	sp, r7
 80490f4:	bd80      	pop	{r7, pc}
 80490f6:	bf00      	nop
 80490f8:	58024400 	.word	0x58024400
 80490fc:	ffff0007 	.word	0xffff0007

08049100 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8049100:	b580      	push	{r7, lr}
 8049102:	b082      	sub	sp, #8
 8049104:	af00      	add	r7, sp, #0
 8049106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8049108:	687b      	ldr	r3, [r7, #4]
 804910a:	2b00      	cmp	r3, #0
 804910c:	d101      	bne.n	8049112 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 804910e:	2301      	movs	r3, #1
 8049110:	e049      	b.n	80491a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8049112:	687b      	ldr	r3, [r7, #4]
 8049114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8049118:	b2db      	uxtb	r3, r3
 804911a:	2b00      	cmp	r3, #0
 804911c:	d106      	bne.n	804912c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 804911e:	687b      	ldr	r3, [r7, #4]
 8049120:	2200      	movs	r2, #0
 8049122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8049126:	6878      	ldr	r0, [r7, #4]
 8049128:	f000 f841 	bl	80491ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 804912c:	687b      	ldr	r3, [r7, #4]
 804912e:	2202      	movs	r2, #2
 8049130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8049134:	687b      	ldr	r3, [r7, #4]
 8049136:	681a      	ldr	r2, [r3, #0]
 8049138:	687b      	ldr	r3, [r7, #4]
 804913a:	3304      	adds	r3, #4
 804913c:	4619      	mov	r1, r3
 804913e:	4610      	mov	r0, r2
 8049140:	f000 fa0e 	bl	8049560 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8049144:	687b      	ldr	r3, [r7, #4]
 8049146:	2201      	movs	r2, #1
 8049148:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 804914c:	687b      	ldr	r3, [r7, #4]
 804914e:	2201      	movs	r2, #1
 8049150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8049154:	687b      	ldr	r3, [r7, #4]
 8049156:	2201      	movs	r2, #1
 8049158:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 804915c:	687b      	ldr	r3, [r7, #4]
 804915e:	2201      	movs	r2, #1
 8049160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8049164:	687b      	ldr	r3, [r7, #4]
 8049166:	2201      	movs	r2, #1
 8049168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 804916c:	687b      	ldr	r3, [r7, #4]
 804916e:	2201      	movs	r2, #1
 8049170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8049174:	687b      	ldr	r3, [r7, #4]
 8049176:	2201      	movs	r2, #1
 8049178:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 804917c:	687b      	ldr	r3, [r7, #4]
 804917e:	2201      	movs	r2, #1
 8049180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8049184:	687b      	ldr	r3, [r7, #4]
 8049186:	2201      	movs	r2, #1
 8049188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 804918c:	687b      	ldr	r3, [r7, #4]
 804918e:	2201      	movs	r2, #1
 8049190:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8049194:	687b      	ldr	r3, [r7, #4]
 8049196:	2201      	movs	r2, #1
 8049198:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 804919c:	687b      	ldr	r3, [r7, #4]
 804919e:	2201      	movs	r2, #1
 80491a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80491a4:	2300      	movs	r3, #0
}
 80491a6:	4618      	mov	r0, r3
 80491a8:	3708      	adds	r7, #8
 80491aa:	46bd      	mov	sp, r7
 80491ac:	bd80      	pop	{r7, pc}

080491ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80491ae:	b480      	push	{r7}
 80491b0:	b083      	sub	sp, #12
 80491b2:	af00      	add	r7, sp, #0
 80491b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80491b6:	bf00      	nop
 80491b8:	370c      	adds	r7, #12
 80491ba:	46bd      	mov	sp, r7
 80491bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80491c0:	4770      	bx	lr
	...

080491c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80491c4:	b480      	push	{r7}
 80491c6:	b085      	sub	sp, #20
 80491c8:	af00      	add	r7, sp, #0
 80491ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80491cc:	687b      	ldr	r3, [r7, #4]
 80491ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80491d2:	b2db      	uxtb	r3, r3
 80491d4:	2b01      	cmp	r3, #1
 80491d6:	d001      	beq.n	80491dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80491d8:	2301      	movs	r3, #1
 80491da:	e05e      	b.n	804929a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80491dc:	687b      	ldr	r3, [r7, #4]
 80491de:	2202      	movs	r2, #2
 80491e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80491e4:	687b      	ldr	r3, [r7, #4]
 80491e6:	681b      	ldr	r3, [r3, #0]
 80491e8:	68da      	ldr	r2, [r3, #12]
 80491ea:	687b      	ldr	r3, [r7, #4]
 80491ec:	681b      	ldr	r3, [r3, #0]
 80491ee:	f042 0201 	orr.w	r2, r2, #1
 80491f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80491f4:	687b      	ldr	r3, [r7, #4]
 80491f6:	681b      	ldr	r3, [r3, #0]
 80491f8:	4a2b      	ldr	r2, [pc, #172]	; (80492a8 <HAL_TIM_Base_Start_IT+0xe4>)
 80491fa:	4293      	cmp	r3, r2
 80491fc:	d02c      	beq.n	8049258 <HAL_TIM_Base_Start_IT+0x94>
 80491fe:	687b      	ldr	r3, [r7, #4]
 8049200:	681b      	ldr	r3, [r3, #0]
 8049202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8049206:	d027      	beq.n	8049258 <HAL_TIM_Base_Start_IT+0x94>
 8049208:	687b      	ldr	r3, [r7, #4]
 804920a:	681b      	ldr	r3, [r3, #0]
 804920c:	4a27      	ldr	r2, [pc, #156]	; (80492ac <HAL_TIM_Base_Start_IT+0xe8>)
 804920e:	4293      	cmp	r3, r2
 8049210:	d022      	beq.n	8049258 <HAL_TIM_Base_Start_IT+0x94>
 8049212:	687b      	ldr	r3, [r7, #4]
 8049214:	681b      	ldr	r3, [r3, #0]
 8049216:	4a26      	ldr	r2, [pc, #152]	; (80492b0 <HAL_TIM_Base_Start_IT+0xec>)
 8049218:	4293      	cmp	r3, r2
 804921a:	d01d      	beq.n	8049258 <HAL_TIM_Base_Start_IT+0x94>
 804921c:	687b      	ldr	r3, [r7, #4]
 804921e:	681b      	ldr	r3, [r3, #0]
 8049220:	4a24      	ldr	r2, [pc, #144]	; (80492b4 <HAL_TIM_Base_Start_IT+0xf0>)
 8049222:	4293      	cmp	r3, r2
 8049224:	d018      	beq.n	8049258 <HAL_TIM_Base_Start_IT+0x94>
 8049226:	687b      	ldr	r3, [r7, #4]
 8049228:	681b      	ldr	r3, [r3, #0]
 804922a:	4a23      	ldr	r2, [pc, #140]	; (80492b8 <HAL_TIM_Base_Start_IT+0xf4>)
 804922c:	4293      	cmp	r3, r2
 804922e:	d013      	beq.n	8049258 <HAL_TIM_Base_Start_IT+0x94>
 8049230:	687b      	ldr	r3, [r7, #4]
 8049232:	681b      	ldr	r3, [r3, #0]
 8049234:	4a21      	ldr	r2, [pc, #132]	; (80492bc <HAL_TIM_Base_Start_IT+0xf8>)
 8049236:	4293      	cmp	r3, r2
 8049238:	d00e      	beq.n	8049258 <HAL_TIM_Base_Start_IT+0x94>
 804923a:	687b      	ldr	r3, [r7, #4]
 804923c:	681b      	ldr	r3, [r3, #0]
 804923e:	4a20      	ldr	r2, [pc, #128]	; (80492c0 <HAL_TIM_Base_Start_IT+0xfc>)
 8049240:	4293      	cmp	r3, r2
 8049242:	d009      	beq.n	8049258 <HAL_TIM_Base_Start_IT+0x94>
 8049244:	687b      	ldr	r3, [r7, #4]
 8049246:	681b      	ldr	r3, [r3, #0]
 8049248:	4a1e      	ldr	r2, [pc, #120]	; (80492c4 <HAL_TIM_Base_Start_IT+0x100>)
 804924a:	4293      	cmp	r3, r2
 804924c:	d004      	beq.n	8049258 <HAL_TIM_Base_Start_IT+0x94>
 804924e:	687b      	ldr	r3, [r7, #4]
 8049250:	681b      	ldr	r3, [r3, #0]
 8049252:	4a1d      	ldr	r2, [pc, #116]	; (80492c8 <HAL_TIM_Base_Start_IT+0x104>)
 8049254:	4293      	cmp	r3, r2
 8049256:	d115      	bne.n	8049284 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8049258:	687b      	ldr	r3, [r7, #4]
 804925a:	681b      	ldr	r3, [r3, #0]
 804925c:	689a      	ldr	r2, [r3, #8]
 804925e:	4b1b      	ldr	r3, [pc, #108]	; (80492cc <HAL_TIM_Base_Start_IT+0x108>)
 8049260:	4013      	ands	r3, r2
 8049262:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8049264:	68fb      	ldr	r3, [r7, #12]
 8049266:	2b06      	cmp	r3, #6
 8049268:	d015      	beq.n	8049296 <HAL_TIM_Base_Start_IT+0xd2>
 804926a:	68fb      	ldr	r3, [r7, #12]
 804926c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8049270:	d011      	beq.n	8049296 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8049272:	687b      	ldr	r3, [r7, #4]
 8049274:	681b      	ldr	r3, [r3, #0]
 8049276:	681a      	ldr	r2, [r3, #0]
 8049278:	687b      	ldr	r3, [r7, #4]
 804927a:	681b      	ldr	r3, [r3, #0]
 804927c:	f042 0201 	orr.w	r2, r2, #1
 8049280:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8049282:	e008      	b.n	8049296 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8049284:	687b      	ldr	r3, [r7, #4]
 8049286:	681b      	ldr	r3, [r3, #0]
 8049288:	681a      	ldr	r2, [r3, #0]
 804928a:	687b      	ldr	r3, [r7, #4]
 804928c:	681b      	ldr	r3, [r3, #0]
 804928e:	f042 0201 	orr.w	r2, r2, #1
 8049292:	601a      	str	r2, [r3, #0]
 8049294:	e000      	b.n	8049298 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8049296:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8049298:	2300      	movs	r3, #0
}
 804929a:	4618      	mov	r0, r3
 804929c:	3714      	adds	r7, #20
 804929e:	46bd      	mov	sp, r7
 80492a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80492a4:	4770      	bx	lr
 80492a6:	bf00      	nop
 80492a8:	40010000 	.word	0x40010000
 80492ac:	40000400 	.word	0x40000400
 80492b0:	40000800 	.word	0x40000800
 80492b4:	40000c00 	.word	0x40000c00
 80492b8:	40010400 	.word	0x40010400
 80492bc:	40001800 	.word	0x40001800
 80492c0:	40014000 	.word	0x40014000
 80492c4:	4000e000 	.word	0x4000e000
 80492c8:	4000e400 	.word	0x4000e400
 80492cc:	00010007 	.word	0x00010007

080492d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80492d0:	b580      	push	{r7, lr}
 80492d2:	b082      	sub	sp, #8
 80492d4:	af00      	add	r7, sp, #0
 80492d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80492d8:	687b      	ldr	r3, [r7, #4]
 80492da:	681b      	ldr	r3, [r3, #0]
 80492dc:	691b      	ldr	r3, [r3, #16]
 80492de:	f003 0302 	and.w	r3, r3, #2
 80492e2:	2b02      	cmp	r3, #2
 80492e4:	d122      	bne.n	804932c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80492e6:	687b      	ldr	r3, [r7, #4]
 80492e8:	681b      	ldr	r3, [r3, #0]
 80492ea:	68db      	ldr	r3, [r3, #12]
 80492ec:	f003 0302 	and.w	r3, r3, #2
 80492f0:	2b02      	cmp	r3, #2
 80492f2:	d11b      	bne.n	804932c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80492f4:	687b      	ldr	r3, [r7, #4]
 80492f6:	681b      	ldr	r3, [r3, #0]
 80492f8:	f06f 0202 	mvn.w	r2, #2
 80492fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80492fe:	687b      	ldr	r3, [r7, #4]
 8049300:	2201      	movs	r2, #1
 8049302:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8049304:	687b      	ldr	r3, [r7, #4]
 8049306:	681b      	ldr	r3, [r3, #0]
 8049308:	699b      	ldr	r3, [r3, #24]
 804930a:	f003 0303 	and.w	r3, r3, #3
 804930e:	2b00      	cmp	r3, #0
 8049310:	d003      	beq.n	804931a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8049312:	6878      	ldr	r0, [r7, #4]
 8049314:	f000 f905 	bl	8049522 <HAL_TIM_IC_CaptureCallback>
 8049318:	e005      	b.n	8049326 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 804931a:	6878      	ldr	r0, [r7, #4]
 804931c:	f000 f8f7 	bl	804950e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8049320:	6878      	ldr	r0, [r7, #4]
 8049322:	f000 f908 	bl	8049536 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8049326:	687b      	ldr	r3, [r7, #4]
 8049328:	2200      	movs	r2, #0
 804932a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 804932c:	687b      	ldr	r3, [r7, #4]
 804932e:	681b      	ldr	r3, [r3, #0]
 8049330:	691b      	ldr	r3, [r3, #16]
 8049332:	f003 0304 	and.w	r3, r3, #4
 8049336:	2b04      	cmp	r3, #4
 8049338:	d122      	bne.n	8049380 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 804933a:	687b      	ldr	r3, [r7, #4]
 804933c:	681b      	ldr	r3, [r3, #0]
 804933e:	68db      	ldr	r3, [r3, #12]
 8049340:	f003 0304 	and.w	r3, r3, #4
 8049344:	2b04      	cmp	r3, #4
 8049346:	d11b      	bne.n	8049380 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8049348:	687b      	ldr	r3, [r7, #4]
 804934a:	681b      	ldr	r3, [r3, #0]
 804934c:	f06f 0204 	mvn.w	r2, #4
 8049350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8049352:	687b      	ldr	r3, [r7, #4]
 8049354:	2202      	movs	r2, #2
 8049356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8049358:	687b      	ldr	r3, [r7, #4]
 804935a:	681b      	ldr	r3, [r3, #0]
 804935c:	699b      	ldr	r3, [r3, #24]
 804935e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8049362:	2b00      	cmp	r3, #0
 8049364:	d003      	beq.n	804936e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8049366:	6878      	ldr	r0, [r7, #4]
 8049368:	f000 f8db 	bl	8049522 <HAL_TIM_IC_CaptureCallback>
 804936c:	e005      	b.n	804937a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 804936e:	6878      	ldr	r0, [r7, #4]
 8049370:	f000 f8cd 	bl	804950e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8049374:	6878      	ldr	r0, [r7, #4]
 8049376:	f000 f8de 	bl	8049536 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 804937a:	687b      	ldr	r3, [r7, #4]
 804937c:	2200      	movs	r2, #0
 804937e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8049380:	687b      	ldr	r3, [r7, #4]
 8049382:	681b      	ldr	r3, [r3, #0]
 8049384:	691b      	ldr	r3, [r3, #16]
 8049386:	f003 0308 	and.w	r3, r3, #8
 804938a:	2b08      	cmp	r3, #8
 804938c:	d122      	bne.n	80493d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 804938e:	687b      	ldr	r3, [r7, #4]
 8049390:	681b      	ldr	r3, [r3, #0]
 8049392:	68db      	ldr	r3, [r3, #12]
 8049394:	f003 0308 	and.w	r3, r3, #8
 8049398:	2b08      	cmp	r3, #8
 804939a:	d11b      	bne.n	80493d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 804939c:	687b      	ldr	r3, [r7, #4]
 804939e:	681b      	ldr	r3, [r3, #0]
 80493a0:	f06f 0208 	mvn.w	r2, #8
 80493a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80493a6:	687b      	ldr	r3, [r7, #4]
 80493a8:	2204      	movs	r2, #4
 80493aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80493ac:	687b      	ldr	r3, [r7, #4]
 80493ae:	681b      	ldr	r3, [r3, #0]
 80493b0:	69db      	ldr	r3, [r3, #28]
 80493b2:	f003 0303 	and.w	r3, r3, #3
 80493b6:	2b00      	cmp	r3, #0
 80493b8:	d003      	beq.n	80493c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80493ba:	6878      	ldr	r0, [r7, #4]
 80493bc:	f000 f8b1 	bl	8049522 <HAL_TIM_IC_CaptureCallback>
 80493c0:	e005      	b.n	80493ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80493c2:	6878      	ldr	r0, [r7, #4]
 80493c4:	f000 f8a3 	bl	804950e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80493c8:	6878      	ldr	r0, [r7, #4]
 80493ca:	f000 f8b4 	bl	8049536 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80493ce:	687b      	ldr	r3, [r7, #4]
 80493d0:	2200      	movs	r2, #0
 80493d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80493d4:	687b      	ldr	r3, [r7, #4]
 80493d6:	681b      	ldr	r3, [r3, #0]
 80493d8:	691b      	ldr	r3, [r3, #16]
 80493da:	f003 0310 	and.w	r3, r3, #16
 80493de:	2b10      	cmp	r3, #16
 80493e0:	d122      	bne.n	8049428 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80493e2:	687b      	ldr	r3, [r7, #4]
 80493e4:	681b      	ldr	r3, [r3, #0]
 80493e6:	68db      	ldr	r3, [r3, #12]
 80493e8:	f003 0310 	and.w	r3, r3, #16
 80493ec:	2b10      	cmp	r3, #16
 80493ee:	d11b      	bne.n	8049428 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80493f0:	687b      	ldr	r3, [r7, #4]
 80493f2:	681b      	ldr	r3, [r3, #0]
 80493f4:	f06f 0210 	mvn.w	r2, #16
 80493f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80493fa:	687b      	ldr	r3, [r7, #4]
 80493fc:	2208      	movs	r2, #8
 80493fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8049400:	687b      	ldr	r3, [r7, #4]
 8049402:	681b      	ldr	r3, [r3, #0]
 8049404:	69db      	ldr	r3, [r3, #28]
 8049406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 804940a:	2b00      	cmp	r3, #0
 804940c:	d003      	beq.n	8049416 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 804940e:	6878      	ldr	r0, [r7, #4]
 8049410:	f000 f887 	bl	8049522 <HAL_TIM_IC_CaptureCallback>
 8049414:	e005      	b.n	8049422 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8049416:	6878      	ldr	r0, [r7, #4]
 8049418:	f000 f879 	bl	804950e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 804941c:	6878      	ldr	r0, [r7, #4]
 804941e:	f000 f88a 	bl	8049536 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8049422:	687b      	ldr	r3, [r7, #4]
 8049424:	2200      	movs	r2, #0
 8049426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8049428:	687b      	ldr	r3, [r7, #4]
 804942a:	681b      	ldr	r3, [r3, #0]
 804942c:	691b      	ldr	r3, [r3, #16]
 804942e:	f003 0301 	and.w	r3, r3, #1
 8049432:	2b01      	cmp	r3, #1
 8049434:	d10e      	bne.n	8049454 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8049436:	687b      	ldr	r3, [r7, #4]
 8049438:	681b      	ldr	r3, [r3, #0]
 804943a:	68db      	ldr	r3, [r3, #12]
 804943c:	f003 0301 	and.w	r3, r3, #1
 8049440:	2b01      	cmp	r3, #1
 8049442:	d107      	bne.n	8049454 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8049444:	687b      	ldr	r3, [r7, #4]
 8049446:	681b      	ldr	r3, [r3, #0]
 8049448:	f06f 0201 	mvn.w	r2, #1
 804944c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 804944e:	6878      	ldr	r0, [r7, #4]
 8049450:	f7f8 fb12 	bl	8041a78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8049454:	687b      	ldr	r3, [r7, #4]
 8049456:	681b      	ldr	r3, [r3, #0]
 8049458:	691b      	ldr	r3, [r3, #16]
 804945a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804945e:	2b80      	cmp	r3, #128	; 0x80
 8049460:	d10e      	bne.n	8049480 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8049462:	687b      	ldr	r3, [r7, #4]
 8049464:	681b      	ldr	r3, [r3, #0]
 8049466:	68db      	ldr	r3, [r3, #12]
 8049468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804946c:	2b80      	cmp	r3, #128	; 0x80
 804946e:	d107      	bne.n	8049480 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8049470:	687b      	ldr	r3, [r7, #4]
 8049472:	681b      	ldr	r3, [r3, #0]
 8049474:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8049478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 804947a:	6878      	ldr	r0, [r7, #4]
 804947c:	f000 f920 	bl	80496c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8049480:	687b      	ldr	r3, [r7, #4]
 8049482:	681b      	ldr	r3, [r3, #0]
 8049484:	691b      	ldr	r3, [r3, #16]
 8049486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804948a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 804948e:	d10e      	bne.n	80494ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8049490:	687b      	ldr	r3, [r7, #4]
 8049492:	681b      	ldr	r3, [r3, #0]
 8049494:	68db      	ldr	r3, [r3, #12]
 8049496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804949a:	2b80      	cmp	r3, #128	; 0x80
 804949c:	d107      	bne.n	80494ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 804949e:	687b      	ldr	r3, [r7, #4]
 80494a0:	681b      	ldr	r3, [r3, #0]
 80494a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80494a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80494a8:	6878      	ldr	r0, [r7, #4]
 80494aa:	f000 f913 	bl	80496d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80494ae:	687b      	ldr	r3, [r7, #4]
 80494b0:	681b      	ldr	r3, [r3, #0]
 80494b2:	691b      	ldr	r3, [r3, #16]
 80494b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80494b8:	2b40      	cmp	r3, #64	; 0x40
 80494ba:	d10e      	bne.n	80494da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80494bc:	687b      	ldr	r3, [r7, #4]
 80494be:	681b      	ldr	r3, [r3, #0]
 80494c0:	68db      	ldr	r3, [r3, #12]
 80494c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80494c6:	2b40      	cmp	r3, #64	; 0x40
 80494c8:	d107      	bne.n	80494da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80494ca:	687b      	ldr	r3, [r7, #4]
 80494cc:	681b      	ldr	r3, [r3, #0]
 80494ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80494d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80494d4:	6878      	ldr	r0, [r7, #4]
 80494d6:	f000 f838 	bl	804954a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80494da:	687b      	ldr	r3, [r7, #4]
 80494dc:	681b      	ldr	r3, [r3, #0]
 80494de:	691b      	ldr	r3, [r3, #16]
 80494e0:	f003 0320 	and.w	r3, r3, #32
 80494e4:	2b20      	cmp	r3, #32
 80494e6:	d10e      	bne.n	8049506 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80494e8:	687b      	ldr	r3, [r7, #4]
 80494ea:	681b      	ldr	r3, [r3, #0]
 80494ec:	68db      	ldr	r3, [r3, #12]
 80494ee:	f003 0320 	and.w	r3, r3, #32
 80494f2:	2b20      	cmp	r3, #32
 80494f4:	d107      	bne.n	8049506 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80494f6:	687b      	ldr	r3, [r7, #4]
 80494f8:	681b      	ldr	r3, [r3, #0]
 80494fa:	f06f 0220 	mvn.w	r2, #32
 80494fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8049500:	6878      	ldr	r0, [r7, #4]
 8049502:	f000 f8d3 	bl	80496ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8049506:	bf00      	nop
 8049508:	3708      	adds	r7, #8
 804950a:	46bd      	mov	sp, r7
 804950c:	bd80      	pop	{r7, pc}

0804950e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 804950e:	b480      	push	{r7}
 8049510:	b083      	sub	sp, #12
 8049512:	af00      	add	r7, sp, #0
 8049514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8049516:	bf00      	nop
 8049518:	370c      	adds	r7, #12
 804951a:	46bd      	mov	sp, r7
 804951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049520:	4770      	bx	lr

08049522 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8049522:	b480      	push	{r7}
 8049524:	b083      	sub	sp, #12
 8049526:	af00      	add	r7, sp, #0
 8049528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 804952a:	bf00      	nop
 804952c:	370c      	adds	r7, #12
 804952e:	46bd      	mov	sp, r7
 8049530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049534:	4770      	bx	lr

08049536 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8049536:	b480      	push	{r7}
 8049538:	b083      	sub	sp, #12
 804953a:	af00      	add	r7, sp, #0
 804953c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 804953e:	bf00      	nop
 8049540:	370c      	adds	r7, #12
 8049542:	46bd      	mov	sp, r7
 8049544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049548:	4770      	bx	lr

0804954a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 804954a:	b480      	push	{r7}
 804954c:	b083      	sub	sp, #12
 804954e:	af00      	add	r7, sp, #0
 8049550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8049552:	bf00      	nop
 8049554:	370c      	adds	r7, #12
 8049556:	46bd      	mov	sp, r7
 8049558:	f85d 7b04 	ldr.w	r7, [sp], #4
 804955c:	4770      	bx	lr
	...

08049560 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8049560:	b480      	push	{r7}
 8049562:	b085      	sub	sp, #20
 8049564:	af00      	add	r7, sp, #0
 8049566:	6078      	str	r0, [r7, #4]
 8049568:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 804956a:	687b      	ldr	r3, [r7, #4]
 804956c:	681b      	ldr	r3, [r3, #0]
 804956e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8049570:	687b      	ldr	r3, [r7, #4]
 8049572:	4a44      	ldr	r2, [pc, #272]	; (8049684 <TIM_Base_SetConfig+0x124>)
 8049574:	4293      	cmp	r3, r2
 8049576:	d013      	beq.n	80495a0 <TIM_Base_SetConfig+0x40>
 8049578:	687b      	ldr	r3, [r7, #4]
 804957a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 804957e:	d00f      	beq.n	80495a0 <TIM_Base_SetConfig+0x40>
 8049580:	687b      	ldr	r3, [r7, #4]
 8049582:	4a41      	ldr	r2, [pc, #260]	; (8049688 <TIM_Base_SetConfig+0x128>)
 8049584:	4293      	cmp	r3, r2
 8049586:	d00b      	beq.n	80495a0 <TIM_Base_SetConfig+0x40>
 8049588:	687b      	ldr	r3, [r7, #4]
 804958a:	4a40      	ldr	r2, [pc, #256]	; (804968c <TIM_Base_SetConfig+0x12c>)
 804958c:	4293      	cmp	r3, r2
 804958e:	d007      	beq.n	80495a0 <TIM_Base_SetConfig+0x40>
 8049590:	687b      	ldr	r3, [r7, #4]
 8049592:	4a3f      	ldr	r2, [pc, #252]	; (8049690 <TIM_Base_SetConfig+0x130>)
 8049594:	4293      	cmp	r3, r2
 8049596:	d003      	beq.n	80495a0 <TIM_Base_SetConfig+0x40>
 8049598:	687b      	ldr	r3, [r7, #4]
 804959a:	4a3e      	ldr	r2, [pc, #248]	; (8049694 <TIM_Base_SetConfig+0x134>)
 804959c:	4293      	cmp	r3, r2
 804959e:	d108      	bne.n	80495b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80495a0:	68fb      	ldr	r3, [r7, #12]
 80495a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80495a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80495a8:	683b      	ldr	r3, [r7, #0]
 80495aa:	685b      	ldr	r3, [r3, #4]
 80495ac:	68fa      	ldr	r2, [r7, #12]
 80495ae:	4313      	orrs	r3, r2
 80495b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80495b2:	687b      	ldr	r3, [r7, #4]
 80495b4:	4a33      	ldr	r2, [pc, #204]	; (8049684 <TIM_Base_SetConfig+0x124>)
 80495b6:	4293      	cmp	r3, r2
 80495b8:	d027      	beq.n	804960a <TIM_Base_SetConfig+0xaa>
 80495ba:	687b      	ldr	r3, [r7, #4]
 80495bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80495c0:	d023      	beq.n	804960a <TIM_Base_SetConfig+0xaa>
 80495c2:	687b      	ldr	r3, [r7, #4]
 80495c4:	4a30      	ldr	r2, [pc, #192]	; (8049688 <TIM_Base_SetConfig+0x128>)
 80495c6:	4293      	cmp	r3, r2
 80495c8:	d01f      	beq.n	804960a <TIM_Base_SetConfig+0xaa>
 80495ca:	687b      	ldr	r3, [r7, #4]
 80495cc:	4a2f      	ldr	r2, [pc, #188]	; (804968c <TIM_Base_SetConfig+0x12c>)
 80495ce:	4293      	cmp	r3, r2
 80495d0:	d01b      	beq.n	804960a <TIM_Base_SetConfig+0xaa>
 80495d2:	687b      	ldr	r3, [r7, #4]
 80495d4:	4a2e      	ldr	r2, [pc, #184]	; (8049690 <TIM_Base_SetConfig+0x130>)
 80495d6:	4293      	cmp	r3, r2
 80495d8:	d017      	beq.n	804960a <TIM_Base_SetConfig+0xaa>
 80495da:	687b      	ldr	r3, [r7, #4]
 80495dc:	4a2d      	ldr	r2, [pc, #180]	; (8049694 <TIM_Base_SetConfig+0x134>)
 80495de:	4293      	cmp	r3, r2
 80495e0:	d013      	beq.n	804960a <TIM_Base_SetConfig+0xaa>
 80495e2:	687b      	ldr	r3, [r7, #4]
 80495e4:	4a2c      	ldr	r2, [pc, #176]	; (8049698 <TIM_Base_SetConfig+0x138>)
 80495e6:	4293      	cmp	r3, r2
 80495e8:	d00f      	beq.n	804960a <TIM_Base_SetConfig+0xaa>
 80495ea:	687b      	ldr	r3, [r7, #4]
 80495ec:	4a2b      	ldr	r2, [pc, #172]	; (804969c <TIM_Base_SetConfig+0x13c>)
 80495ee:	4293      	cmp	r3, r2
 80495f0:	d00b      	beq.n	804960a <TIM_Base_SetConfig+0xaa>
 80495f2:	687b      	ldr	r3, [r7, #4]
 80495f4:	4a2a      	ldr	r2, [pc, #168]	; (80496a0 <TIM_Base_SetConfig+0x140>)
 80495f6:	4293      	cmp	r3, r2
 80495f8:	d007      	beq.n	804960a <TIM_Base_SetConfig+0xaa>
 80495fa:	687b      	ldr	r3, [r7, #4]
 80495fc:	4a29      	ldr	r2, [pc, #164]	; (80496a4 <TIM_Base_SetConfig+0x144>)
 80495fe:	4293      	cmp	r3, r2
 8049600:	d003      	beq.n	804960a <TIM_Base_SetConfig+0xaa>
 8049602:	687b      	ldr	r3, [r7, #4]
 8049604:	4a28      	ldr	r2, [pc, #160]	; (80496a8 <TIM_Base_SetConfig+0x148>)
 8049606:	4293      	cmp	r3, r2
 8049608:	d108      	bne.n	804961c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 804960a:	68fb      	ldr	r3, [r7, #12]
 804960c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8049610:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8049612:	683b      	ldr	r3, [r7, #0]
 8049614:	68db      	ldr	r3, [r3, #12]
 8049616:	68fa      	ldr	r2, [r7, #12]
 8049618:	4313      	orrs	r3, r2
 804961a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 804961c:	68fb      	ldr	r3, [r7, #12]
 804961e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8049622:	683b      	ldr	r3, [r7, #0]
 8049624:	695b      	ldr	r3, [r3, #20]
 8049626:	4313      	orrs	r3, r2
 8049628:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 804962a:	687b      	ldr	r3, [r7, #4]
 804962c:	68fa      	ldr	r2, [r7, #12]
 804962e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8049630:	683b      	ldr	r3, [r7, #0]
 8049632:	689a      	ldr	r2, [r3, #8]
 8049634:	687b      	ldr	r3, [r7, #4]
 8049636:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8049638:	683b      	ldr	r3, [r7, #0]
 804963a:	681a      	ldr	r2, [r3, #0]
 804963c:	687b      	ldr	r3, [r7, #4]
 804963e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8049640:	687b      	ldr	r3, [r7, #4]
 8049642:	4a10      	ldr	r2, [pc, #64]	; (8049684 <TIM_Base_SetConfig+0x124>)
 8049644:	4293      	cmp	r3, r2
 8049646:	d00f      	beq.n	8049668 <TIM_Base_SetConfig+0x108>
 8049648:	687b      	ldr	r3, [r7, #4]
 804964a:	4a12      	ldr	r2, [pc, #72]	; (8049694 <TIM_Base_SetConfig+0x134>)
 804964c:	4293      	cmp	r3, r2
 804964e:	d00b      	beq.n	8049668 <TIM_Base_SetConfig+0x108>
 8049650:	687b      	ldr	r3, [r7, #4]
 8049652:	4a11      	ldr	r2, [pc, #68]	; (8049698 <TIM_Base_SetConfig+0x138>)
 8049654:	4293      	cmp	r3, r2
 8049656:	d007      	beq.n	8049668 <TIM_Base_SetConfig+0x108>
 8049658:	687b      	ldr	r3, [r7, #4]
 804965a:	4a10      	ldr	r2, [pc, #64]	; (804969c <TIM_Base_SetConfig+0x13c>)
 804965c:	4293      	cmp	r3, r2
 804965e:	d003      	beq.n	8049668 <TIM_Base_SetConfig+0x108>
 8049660:	687b      	ldr	r3, [r7, #4]
 8049662:	4a0f      	ldr	r2, [pc, #60]	; (80496a0 <TIM_Base_SetConfig+0x140>)
 8049664:	4293      	cmp	r3, r2
 8049666:	d103      	bne.n	8049670 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8049668:	683b      	ldr	r3, [r7, #0]
 804966a:	691a      	ldr	r2, [r3, #16]
 804966c:	687b      	ldr	r3, [r7, #4]
 804966e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8049670:	687b      	ldr	r3, [r7, #4]
 8049672:	2201      	movs	r2, #1
 8049674:	615a      	str	r2, [r3, #20]
}
 8049676:	bf00      	nop
 8049678:	3714      	adds	r7, #20
 804967a:	46bd      	mov	sp, r7
 804967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049680:	4770      	bx	lr
 8049682:	bf00      	nop
 8049684:	40010000 	.word	0x40010000
 8049688:	40000400 	.word	0x40000400
 804968c:	40000800 	.word	0x40000800
 8049690:	40000c00 	.word	0x40000c00
 8049694:	40010400 	.word	0x40010400
 8049698:	40014000 	.word	0x40014000
 804969c:	40014400 	.word	0x40014400
 80496a0:	40014800 	.word	0x40014800
 80496a4:	4000e000 	.word	0x4000e000
 80496a8:	4000e400 	.word	0x4000e400

080496ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80496ac:	b480      	push	{r7}
 80496ae:	b083      	sub	sp, #12
 80496b0:	af00      	add	r7, sp, #0
 80496b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80496b4:	bf00      	nop
 80496b6:	370c      	adds	r7, #12
 80496b8:	46bd      	mov	sp, r7
 80496ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80496be:	4770      	bx	lr

080496c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80496c0:	b480      	push	{r7}
 80496c2:	b083      	sub	sp, #12
 80496c4:	af00      	add	r7, sp, #0
 80496c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80496c8:	bf00      	nop
 80496ca:	370c      	adds	r7, #12
 80496cc:	46bd      	mov	sp, r7
 80496ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80496d2:	4770      	bx	lr

080496d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80496d4:	b480      	push	{r7}
 80496d6:	b083      	sub	sp, #12
 80496d8:	af00      	add	r7, sp, #0
 80496da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80496dc:	bf00      	nop
 80496de:	370c      	adds	r7, #12
 80496e0:	46bd      	mov	sp, r7
 80496e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80496e6:	4770      	bx	lr

080496e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80496e8:	b580      	push	{r7, lr}
 80496ea:	b082      	sub	sp, #8
 80496ec:	af00      	add	r7, sp, #0
 80496ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80496f0:	687b      	ldr	r3, [r7, #4]
 80496f2:	2b00      	cmp	r3, #0
 80496f4:	d101      	bne.n	80496fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80496f6:	2301      	movs	r3, #1
 80496f8:	e042      	b.n	8049780 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80496fa:	687b      	ldr	r3, [r7, #4]
 80496fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8049700:	2b00      	cmp	r3, #0
 8049702:	d106      	bne.n	8049712 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8049704:	687b      	ldr	r3, [r7, #4]
 8049706:	2200      	movs	r2, #0
 8049708:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 804970c:	6878      	ldr	r0, [r7, #4]
 804970e:	f7f8 f9e9 	bl	8041ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8049712:	687b      	ldr	r3, [r7, #4]
 8049714:	2224      	movs	r2, #36	; 0x24
 8049716:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 804971a:	687b      	ldr	r3, [r7, #4]
 804971c:	681b      	ldr	r3, [r3, #0]
 804971e:	681a      	ldr	r2, [r3, #0]
 8049720:	687b      	ldr	r3, [r7, #4]
 8049722:	681b      	ldr	r3, [r3, #0]
 8049724:	f022 0201 	bic.w	r2, r2, #1
 8049728:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 804972a:	6878      	ldr	r0, [r7, #4]
 804972c:	f000 fc84 	bl	804a038 <UART_SetConfig>
 8049730:	4603      	mov	r3, r0
 8049732:	2b01      	cmp	r3, #1
 8049734:	d101      	bne.n	804973a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8049736:	2301      	movs	r3, #1
 8049738:	e022      	b.n	8049780 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 804973a:	687b      	ldr	r3, [r7, #4]
 804973c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804973e:	2b00      	cmp	r3, #0
 8049740:	d002      	beq.n	8049748 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8049742:	6878      	ldr	r0, [r7, #4]
 8049744:	f001 fae4 	bl	804ad10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8049748:	687b      	ldr	r3, [r7, #4]
 804974a:	681b      	ldr	r3, [r3, #0]
 804974c:	685a      	ldr	r2, [r3, #4]
 804974e:	687b      	ldr	r3, [r7, #4]
 8049750:	681b      	ldr	r3, [r3, #0]
 8049752:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8049756:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8049758:	687b      	ldr	r3, [r7, #4]
 804975a:	681b      	ldr	r3, [r3, #0]
 804975c:	689a      	ldr	r2, [r3, #8]
 804975e:	687b      	ldr	r3, [r7, #4]
 8049760:	681b      	ldr	r3, [r3, #0]
 8049762:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8049766:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8049768:	687b      	ldr	r3, [r7, #4]
 804976a:	681b      	ldr	r3, [r3, #0]
 804976c:	681a      	ldr	r2, [r3, #0]
 804976e:	687b      	ldr	r3, [r7, #4]
 8049770:	681b      	ldr	r3, [r3, #0]
 8049772:	f042 0201 	orr.w	r2, r2, #1
 8049776:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8049778:	6878      	ldr	r0, [r7, #4]
 804977a:	f001 fb6b 	bl	804ae54 <UART_CheckIdleState>
 804977e:	4603      	mov	r3, r0
}
 8049780:	4618      	mov	r0, r3
 8049782:	3708      	adds	r7, #8
 8049784:	46bd      	mov	sp, r7
 8049786:	bd80      	pop	{r7, pc}

08049788 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8049788:	b580      	push	{r7, lr}
 804978a:	b08a      	sub	sp, #40	; 0x28
 804978c:	af00      	add	r7, sp, #0
 804978e:	60f8      	str	r0, [r7, #12]
 8049790:	60b9      	str	r1, [r7, #8]
 8049792:	4613      	mov	r3, r2
 8049794:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8049796:	68fb      	ldr	r3, [r7, #12]
 8049798:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 804979c:	2b20      	cmp	r3, #32
 804979e:	d17a      	bne.n	8049896 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 80497a0:	68bb      	ldr	r3, [r7, #8]
 80497a2:	2b00      	cmp	r3, #0
 80497a4:	d002      	beq.n	80497ac <HAL_UART_Transmit_DMA+0x24>
 80497a6:	88fb      	ldrh	r3, [r7, #6]
 80497a8:	2b00      	cmp	r3, #0
 80497aa:	d101      	bne.n	80497b0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80497ac:	2301      	movs	r3, #1
 80497ae:	e073      	b.n	8049898 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 80497b0:	68fb      	ldr	r3, [r7, #12]
 80497b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80497b6:	2b01      	cmp	r3, #1
 80497b8:	d101      	bne.n	80497be <HAL_UART_Transmit_DMA+0x36>
 80497ba:	2302      	movs	r3, #2
 80497bc:	e06c      	b.n	8049898 <HAL_UART_Transmit_DMA+0x110>
 80497be:	68fb      	ldr	r3, [r7, #12]
 80497c0:	2201      	movs	r2, #1
 80497c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80497c6:	68fb      	ldr	r3, [r7, #12]
 80497c8:	68ba      	ldr	r2, [r7, #8]
 80497ca:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80497cc:	68fb      	ldr	r3, [r7, #12]
 80497ce:	88fa      	ldrh	r2, [r7, #6]
 80497d0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80497d4:	68fb      	ldr	r3, [r7, #12]
 80497d6:	88fa      	ldrh	r2, [r7, #6]
 80497d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80497dc:	68fb      	ldr	r3, [r7, #12]
 80497de:	2200      	movs	r2, #0
 80497e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80497e4:	68fb      	ldr	r3, [r7, #12]
 80497e6:	2221      	movs	r2, #33	; 0x21
 80497e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 80497ec:	68fb      	ldr	r3, [r7, #12]
 80497ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80497f0:	2b00      	cmp	r3, #0
 80497f2:	d02c      	beq.n	804984e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80497f4:	68fb      	ldr	r3, [r7, #12]
 80497f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80497f8:	4a29      	ldr	r2, [pc, #164]	; (80498a0 <HAL_UART_Transmit_DMA+0x118>)
 80497fa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80497fc:	68fb      	ldr	r3, [r7, #12]
 80497fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8049800:	4a28      	ldr	r2, [pc, #160]	; (80498a4 <HAL_UART_Transmit_DMA+0x11c>)
 8049802:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8049804:	68fb      	ldr	r3, [r7, #12]
 8049806:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8049808:	4a27      	ldr	r2, [pc, #156]	; (80498a8 <HAL_UART_Transmit_DMA+0x120>)
 804980a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 804980c:	68fb      	ldr	r3, [r7, #12]
 804980e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8049810:	2200      	movs	r2, #0
 8049812:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8049814:	68fb      	ldr	r3, [r7, #12]
 8049816:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8049818:	68fb      	ldr	r3, [r7, #12]
 804981a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 804981c:	4619      	mov	r1, r3
 804981e:	68fb      	ldr	r3, [r7, #12]
 8049820:	681b      	ldr	r3, [r3, #0]
 8049822:	3328      	adds	r3, #40	; 0x28
 8049824:	461a      	mov	r2, r3
 8049826:	88fb      	ldrh	r3, [r7, #6]
 8049828:	f7f9 f8c2 	bl	80429b0 <HAL_DMA_Start_IT>
 804982c:	4603      	mov	r3, r0
 804982e:	2b00      	cmp	r3, #0
 8049830:	d00d      	beq.n	804984e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8049832:	68fb      	ldr	r3, [r7, #12]
 8049834:	2210      	movs	r2, #16
 8049836:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 804983a:	68fb      	ldr	r3, [r7, #12]
 804983c:	2200      	movs	r2, #0
 804983e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8049842:	68fb      	ldr	r3, [r7, #12]
 8049844:	2220      	movs	r2, #32
 8049846:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 804984a:	2301      	movs	r3, #1
 804984c:	e024      	b.n	8049898 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 804984e:	68fb      	ldr	r3, [r7, #12]
 8049850:	681b      	ldr	r3, [r3, #0]
 8049852:	2240      	movs	r2, #64	; 0x40
 8049854:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8049856:	68fb      	ldr	r3, [r7, #12]
 8049858:	2200      	movs	r2, #0
 804985a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 804985e:	68fb      	ldr	r3, [r7, #12]
 8049860:	681b      	ldr	r3, [r3, #0]
 8049862:	3308      	adds	r3, #8
 8049864:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8049866:	697b      	ldr	r3, [r7, #20]
 8049868:	e853 3f00 	ldrex	r3, [r3]
 804986c:	613b      	str	r3, [r7, #16]
   return(result);
 804986e:	693b      	ldr	r3, [r7, #16]
 8049870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8049874:	627b      	str	r3, [r7, #36]	; 0x24
 8049876:	68fb      	ldr	r3, [r7, #12]
 8049878:	681b      	ldr	r3, [r3, #0]
 804987a:	3308      	adds	r3, #8
 804987c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 804987e:	623a      	str	r2, [r7, #32]
 8049880:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8049882:	69f9      	ldr	r1, [r7, #28]
 8049884:	6a3a      	ldr	r2, [r7, #32]
 8049886:	e841 2300 	strex	r3, r2, [r1]
 804988a:	61bb      	str	r3, [r7, #24]
   return(result);
 804988c:	69bb      	ldr	r3, [r7, #24]
 804988e:	2b00      	cmp	r3, #0
 8049890:	d1e5      	bne.n	804985e <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8049892:	2300      	movs	r3, #0
 8049894:	e000      	b.n	8049898 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8049896:	2302      	movs	r3, #2
  }
}
 8049898:	4618      	mov	r0, r3
 804989a:	3728      	adds	r7, #40	; 0x28
 804989c:	46bd      	mov	sp, r7
 804989e:	bd80      	pop	{r7, pc}
 80498a0:	0804b31d 	.word	0x0804b31d
 80498a4:	0804b3b3 	.word	0x0804b3b3
 80498a8:	0804b529 	.word	0x0804b529

080498ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80498ac:	b580      	push	{r7, lr}
 80498ae:	b0ba      	sub	sp, #232	; 0xe8
 80498b0:	af00      	add	r7, sp, #0
 80498b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80498b4:	687b      	ldr	r3, [r7, #4]
 80498b6:	681b      	ldr	r3, [r3, #0]
 80498b8:	69db      	ldr	r3, [r3, #28]
 80498ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80498be:	687b      	ldr	r3, [r7, #4]
 80498c0:	681b      	ldr	r3, [r3, #0]
 80498c2:	681b      	ldr	r3, [r3, #0]
 80498c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80498c8:	687b      	ldr	r3, [r7, #4]
 80498ca:	681b      	ldr	r3, [r3, #0]
 80498cc:	689b      	ldr	r3, [r3, #8]
 80498ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80498d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80498d6:	f640 030f 	movw	r3, #2063	; 0x80f
 80498da:	4013      	ands	r3, r2
 80498dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80498e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80498e4:	2b00      	cmp	r3, #0
 80498e6:	d11b      	bne.n	8049920 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80498e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80498ec:	f003 0320 	and.w	r3, r3, #32
 80498f0:	2b00      	cmp	r3, #0
 80498f2:	d015      	beq.n	8049920 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80498f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80498f8:	f003 0320 	and.w	r3, r3, #32
 80498fc:	2b00      	cmp	r3, #0
 80498fe:	d105      	bne.n	804990c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8049900:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8049904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8049908:	2b00      	cmp	r3, #0
 804990a:	d009      	beq.n	8049920 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 804990c:	687b      	ldr	r3, [r7, #4]
 804990e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8049910:	2b00      	cmp	r3, #0
 8049912:	f000 835a 	beq.w	8049fca <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8049916:	687b      	ldr	r3, [r7, #4]
 8049918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804991a:	6878      	ldr	r0, [r7, #4]
 804991c:	4798      	blx	r3
      }
      return;
 804991e:	e354      	b.n	8049fca <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8049920:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8049924:	2b00      	cmp	r3, #0
 8049926:	f000 811f 	beq.w	8049b68 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 804992a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 804992e:	4b8b      	ldr	r3, [pc, #556]	; (8049b5c <HAL_UART_IRQHandler+0x2b0>)
 8049930:	4013      	ands	r3, r2
 8049932:	2b00      	cmp	r3, #0
 8049934:	d106      	bne.n	8049944 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8049936:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 804993a:	4b89      	ldr	r3, [pc, #548]	; (8049b60 <HAL_UART_IRQHandler+0x2b4>)
 804993c:	4013      	ands	r3, r2
 804993e:	2b00      	cmp	r3, #0
 8049940:	f000 8112 	beq.w	8049b68 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8049944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8049948:	f003 0301 	and.w	r3, r3, #1
 804994c:	2b00      	cmp	r3, #0
 804994e:	d011      	beq.n	8049974 <HAL_UART_IRQHandler+0xc8>
 8049950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8049954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8049958:	2b00      	cmp	r3, #0
 804995a:	d00b      	beq.n	8049974 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 804995c:	687b      	ldr	r3, [r7, #4]
 804995e:	681b      	ldr	r3, [r3, #0]
 8049960:	2201      	movs	r2, #1
 8049962:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8049964:	687b      	ldr	r3, [r7, #4]
 8049966:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804996a:	f043 0201 	orr.w	r2, r3, #1
 804996e:	687b      	ldr	r3, [r7, #4]
 8049970:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8049974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8049978:	f003 0302 	and.w	r3, r3, #2
 804997c:	2b00      	cmp	r3, #0
 804997e:	d011      	beq.n	80499a4 <HAL_UART_IRQHandler+0xf8>
 8049980:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8049984:	f003 0301 	and.w	r3, r3, #1
 8049988:	2b00      	cmp	r3, #0
 804998a:	d00b      	beq.n	80499a4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 804998c:	687b      	ldr	r3, [r7, #4]
 804998e:	681b      	ldr	r3, [r3, #0]
 8049990:	2202      	movs	r2, #2
 8049992:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8049994:	687b      	ldr	r3, [r7, #4]
 8049996:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804999a:	f043 0204 	orr.w	r2, r3, #4
 804999e:	687b      	ldr	r3, [r7, #4]
 80499a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80499a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80499a8:	f003 0304 	and.w	r3, r3, #4
 80499ac:	2b00      	cmp	r3, #0
 80499ae:	d011      	beq.n	80499d4 <HAL_UART_IRQHandler+0x128>
 80499b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80499b4:	f003 0301 	and.w	r3, r3, #1
 80499b8:	2b00      	cmp	r3, #0
 80499ba:	d00b      	beq.n	80499d4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80499bc:	687b      	ldr	r3, [r7, #4]
 80499be:	681b      	ldr	r3, [r3, #0]
 80499c0:	2204      	movs	r2, #4
 80499c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80499c4:	687b      	ldr	r3, [r7, #4]
 80499c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80499ca:	f043 0202 	orr.w	r2, r3, #2
 80499ce:	687b      	ldr	r3, [r7, #4]
 80499d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80499d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80499d8:	f003 0308 	and.w	r3, r3, #8
 80499dc:	2b00      	cmp	r3, #0
 80499de:	d017      	beq.n	8049a10 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80499e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80499e4:	f003 0320 	and.w	r3, r3, #32
 80499e8:	2b00      	cmp	r3, #0
 80499ea:	d105      	bne.n	80499f8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80499ec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80499f0:	4b5a      	ldr	r3, [pc, #360]	; (8049b5c <HAL_UART_IRQHandler+0x2b0>)
 80499f2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80499f4:	2b00      	cmp	r3, #0
 80499f6:	d00b      	beq.n	8049a10 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80499f8:	687b      	ldr	r3, [r7, #4]
 80499fa:	681b      	ldr	r3, [r3, #0]
 80499fc:	2208      	movs	r2, #8
 80499fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8049a00:	687b      	ldr	r3, [r7, #4]
 8049a02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8049a06:	f043 0208 	orr.w	r2, r3, #8
 8049a0a:	687b      	ldr	r3, [r7, #4]
 8049a0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8049a10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8049a14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8049a18:	2b00      	cmp	r3, #0
 8049a1a:	d012      	beq.n	8049a42 <HAL_UART_IRQHandler+0x196>
 8049a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8049a20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8049a24:	2b00      	cmp	r3, #0
 8049a26:	d00c      	beq.n	8049a42 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8049a28:	687b      	ldr	r3, [r7, #4]
 8049a2a:	681b      	ldr	r3, [r3, #0]
 8049a2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8049a30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8049a32:	687b      	ldr	r3, [r7, #4]
 8049a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8049a38:	f043 0220 	orr.w	r2, r3, #32
 8049a3c:	687b      	ldr	r3, [r7, #4]
 8049a3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8049a42:	687b      	ldr	r3, [r7, #4]
 8049a44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8049a48:	2b00      	cmp	r3, #0
 8049a4a:	f000 82c0 	beq.w	8049fce <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8049a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8049a52:	f003 0320 	and.w	r3, r3, #32
 8049a56:	2b00      	cmp	r3, #0
 8049a58:	d013      	beq.n	8049a82 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8049a5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8049a5e:	f003 0320 	and.w	r3, r3, #32
 8049a62:	2b00      	cmp	r3, #0
 8049a64:	d105      	bne.n	8049a72 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8049a66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8049a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8049a6e:	2b00      	cmp	r3, #0
 8049a70:	d007      	beq.n	8049a82 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8049a72:	687b      	ldr	r3, [r7, #4]
 8049a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8049a76:	2b00      	cmp	r3, #0
 8049a78:	d003      	beq.n	8049a82 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8049a7a:	687b      	ldr	r3, [r7, #4]
 8049a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8049a7e:	6878      	ldr	r0, [r7, #4]
 8049a80:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8049a82:	687b      	ldr	r3, [r7, #4]
 8049a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8049a88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8049a8c:	687b      	ldr	r3, [r7, #4]
 8049a8e:	681b      	ldr	r3, [r3, #0]
 8049a90:	689b      	ldr	r3, [r3, #8]
 8049a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8049a96:	2b40      	cmp	r3, #64	; 0x40
 8049a98:	d005      	beq.n	8049aa6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8049a9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8049a9e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8049aa2:	2b00      	cmp	r3, #0
 8049aa4:	d04f      	beq.n	8049b46 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8049aa6:	6878      	ldr	r0, [r7, #4]
 8049aa8:	f001 fbd2 	bl	804b250 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8049aac:	687b      	ldr	r3, [r7, #4]
 8049aae:	681b      	ldr	r3, [r3, #0]
 8049ab0:	689b      	ldr	r3, [r3, #8]
 8049ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8049ab6:	2b40      	cmp	r3, #64	; 0x40
 8049ab8:	d141      	bne.n	8049b3e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8049aba:	687b      	ldr	r3, [r7, #4]
 8049abc:	681b      	ldr	r3, [r3, #0]
 8049abe:	3308      	adds	r3, #8
 8049ac0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8049ac4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8049ac8:	e853 3f00 	ldrex	r3, [r3]
 8049acc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8049ad0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8049ad4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8049ad8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8049adc:	687b      	ldr	r3, [r7, #4]
 8049ade:	681b      	ldr	r3, [r3, #0]
 8049ae0:	3308      	adds	r3, #8
 8049ae2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8049ae6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8049aea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8049aee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8049af2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8049af6:	e841 2300 	strex	r3, r2, [r1]
 8049afa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8049afe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8049b02:	2b00      	cmp	r3, #0
 8049b04:	d1d9      	bne.n	8049aba <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8049b06:	687b      	ldr	r3, [r7, #4]
 8049b08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8049b0a:	2b00      	cmp	r3, #0
 8049b0c:	d013      	beq.n	8049b36 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8049b0e:	687b      	ldr	r3, [r7, #4]
 8049b10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8049b12:	4a14      	ldr	r2, [pc, #80]	; (8049b64 <HAL_UART_IRQHandler+0x2b8>)
 8049b14:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8049b16:	687b      	ldr	r3, [r7, #4]
 8049b18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8049b1a:	4618      	mov	r0, r3
 8049b1c:	f7f9 fcd0 	bl	80434c0 <HAL_DMA_Abort_IT>
 8049b20:	4603      	mov	r3, r0
 8049b22:	2b00      	cmp	r3, #0
 8049b24:	d017      	beq.n	8049b56 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8049b26:	687b      	ldr	r3, [r7, #4]
 8049b28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8049b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8049b2c:	687a      	ldr	r2, [r7, #4]
 8049b2e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8049b30:	4610      	mov	r0, r2
 8049b32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8049b34:	e00f      	b.n	8049b56 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8049b36:	6878      	ldr	r0, [r7, #4]
 8049b38:	f000 fa74 	bl	804a024 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8049b3c:	e00b      	b.n	8049b56 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8049b3e:	6878      	ldr	r0, [r7, #4]
 8049b40:	f000 fa70 	bl	804a024 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8049b44:	e007      	b.n	8049b56 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8049b46:	6878      	ldr	r0, [r7, #4]
 8049b48:	f000 fa6c 	bl	804a024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8049b4c:	687b      	ldr	r3, [r7, #4]
 8049b4e:	2200      	movs	r2, #0
 8049b50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8049b54:	e23b      	b.n	8049fce <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8049b56:	bf00      	nop
    return;
 8049b58:	e239      	b.n	8049fce <HAL_UART_IRQHandler+0x722>
 8049b5a:	bf00      	nop
 8049b5c:	10000001 	.word	0x10000001
 8049b60:	04000120 	.word	0x04000120
 8049b64:	0804b5a9 	.word	0x0804b5a9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8049b68:	687b      	ldr	r3, [r7, #4]
 8049b6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8049b6c:	2b01      	cmp	r3, #1
 8049b6e:	f040 81ce 	bne.w	8049f0e <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8049b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8049b76:	f003 0310 	and.w	r3, r3, #16
 8049b7a:	2b00      	cmp	r3, #0
 8049b7c:	f000 81c7 	beq.w	8049f0e <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8049b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8049b84:	f003 0310 	and.w	r3, r3, #16
 8049b88:	2b00      	cmp	r3, #0
 8049b8a:	f000 81c0 	beq.w	8049f0e <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8049b8e:	687b      	ldr	r3, [r7, #4]
 8049b90:	681b      	ldr	r3, [r3, #0]
 8049b92:	2210      	movs	r2, #16
 8049b94:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8049b96:	687b      	ldr	r3, [r7, #4]
 8049b98:	681b      	ldr	r3, [r3, #0]
 8049b9a:	689b      	ldr	r3, [r3, #8]
 8049b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8049ba0:	2b40      	cmp	r3, #64	; 0x40
 8049ba2:	f040 813b 	bne.w	8049e1c <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8049ba6:	687b      	ldr	r3, [r7, #4]
 8049ba8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8049baa:	681b      	ldr	r3, [r3, #0]
 8049bac:	4a8b      	ldr	r2, [pc, #556]	; (8049ddc <HAL_UART_IRQHandler+0x530>)
 8049bae:	4293      	cmp	r3, r2
 8049bb0:	d059      	beq.n	8049c66 <HAL_UART_IRQHandler+0x3ba>
 8049bb2:	687b      	ldr	r3, [r7, #4]
 8049bb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8049bb6:	681b      	ldr	r3, [r3, #0]
 8049bb8:	4a89      	ldr	r2, [pc, #548]	; (8049de0 <HAL_UART_IRQHandler+0x534>)
 8049bba:	4293      	cmp	r3, r2
 8049bbc:	d053      	beq.n	8049c66 <HAL_UART_IRQHandler+0x3ba>
 8049bbe:	687b      	ldr	r3, [r7, #4]
 8049bc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8049bc2:	681b      	ldr	r3, [r3, #0]
 8049bc4:	4a87      	ldr	r2, [pc, #540]	; (8049de4 <HAL_UART_IRQHandler+0x538>)
 8049bc6:	4293      	cmp	r3, r2
 8049bc8:	d04d      	beq.n	8049c66 <HAL_UART_IRQHandler+0x3ba>
 8049bca:	687b      	ldr	r3, [r7, #4]
 8049bcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8049bce:	681b      	ldr	r3, [r3, #0]
 8049bd0:	4a85      	ldr	r2, [pc, #532]	; (8049de8 <HAL_UART_IRQHandler+0x53c>)
 8049bd2:	4293      	cmp	r3, r2
 8049bd4:	d047      	beq.n	8049c66 <HAL_UART_IRQHandler+0x3ba>
 8049bd6:	687b      	ldr	r3, [r7, #4]
 8049bd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8049bda:	681b      	ldr	r3, [r3, #0]
 8049bdc:	4a83      	ldr	r2, [pc, #524]	; (8049dec <HAL_UART_IRQHandler+0x540>)
 8049bde:	4293      	cmp	r3, r2
 8049be0:	d041      	beq.n	8049c66 <HAL_UART_IRQHandler+0x3ba>
 8049be2:	687b      	ldr	r3, [r7, #4]
 8049be4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8049be6:	681b      	ldr	r3, [r3, #0]
 8049be8:	4a81      	ldr	r2, [pc, #516]	; (8049df0 <HAL_UART_IRQHandler+0x544>)
 8049bea:	4293      	cmp	r3, r2
 8049bec:	d03b      	beq.n	8049c66 <HAL_UART_IRQHandler+0x3ba>
 8049bee:	687b      	ldr	r3, [r7, #4]
 8049bf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8049bf2:	681b      	ldr	r3, [r3, #0]
 8049bf4:	4a7f      	ldr	r2, [pc, #508]	; (8049df4 <HAL_UART_IRQHandler+0x548>)
 8049bf6:	4293      	cmp	r3, r2
 8049bf8:	d035      	beq.n	8049c66 <HAL_UART_IRQHandler+0x3ba>
 8049bfa:	687b      	ldr	r3, [r7, #4]
 8049bfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8049bfe:	681b      	ldr	r3, [r3, #0]
 8049c00:	4a7d      	ldr	r2, [pc, #500]	; (8049df8 <HAL_UART_IRQHandler+0x54c>)
 8049c02:	4293      	cmp	r3, r2
 8049c04:	d02f      	beq.n	8049c66 <HAL_UART_IRQHandler+0x3ba>
 8049c06:	687b      	ldr	r3, [r7, #4]
 8049c08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8049c0a:	681b      	ldr	r3, [r3, #0]
 8049c0c:	4a7b      	ldr	r2, [pc, #492]	; (8049dfc <HAL_UART_IRQHandler+0x550>)
 8049c0e:	4293      	cmp	r3, r2
 8049c10:	d029      	beq.n	8049c66 <HAL_UART_IRQHandler+0x3ba>
 8049c12:	687b      	ldr	r3, [r7, #4]
 8049c14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8049c16:	681b      	ldr	r3, [r3, #0]
 8049c18:	4a79      	ldr	r2, [pc, #484]	; (8049e00 <HAL_UART_IRQHandler+0x554>)
 8049c1a:	4293      	cmp	r3, r2
 8049c1c:	d023      	beq.n	8049c66 <HAL_UART_IRQHandler+0x3ba>
 8049c1e:	687b      	ldr	r3, [r7, #4]
 8049c20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8049c22:	681b      	ldr	r3, [r3, #0]
 8049c24:	4a77      	ldr	r2, [pc, #476]	; (8049e04 <HAL_UART_IRQHandler+0x558>)
 8049c26:	4293      	cmp	r3, r2
 8049c28:	d01d      	beq.n	8049c66 <HAL_UART_IRQHandler+0x3ba>
 8049c2a:	687b      	ldr	r3, [r7, #4]
 8049c2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8049c2e:	681b      	ldr	r3, [r3, #0]
 8049c30:	4a75      	ldr	r2, [pc, #468]	; (8049e08 <HAL_UART_IRQHandler+0x55c>)
 8049c32:	4293      	cmp	r3, r2
 8049c34:	d017      	beq.n	8049c66 <HAL_UART_IRQHandler+0x3ba>
 8049c36:	687b      	ldr	r3, [r7, #4]
 8049c38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8049c3a:	681b      	ldr	r3, [r3, #0]
 8049c3c:	4a73      	ldr	r2, [pc, #460]	; (8049e0c <HAL_UART_IRQHandler+0x560>)
 8049c3e:	4293      	cmp	r3, r2
 8049c40:	d011      	beq.n	8049c66 <HAL_UART_IRQHandler+0x3ba>
 8049c42:	687b      	ldr	r3, [r7, #4]
 8049c44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8049c46:	681b      	ldr	r3, [r3, #0]
 8049c48:	4a71      	ldr	r2, [pc, #452]	; (8049e10 <HAL_UART_IRQHandler+0x564>)
 8049c4a:	4293      	cmp	r3, r2
 8049c4c:	d00b      	beq.n	8049c66 <HAL_UART_IRQHandler+0x3ba>
 8049c4e:	687b      	ldr	r3, [r7, #4]
 8049c50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8049c52:	681b      	ldr	r3, [r3, #0]
 8049c54:	4a6f      	ldr	r2, [pc, #444]	; (8049e14 <HAL_UART_IRQHandler+0x568>)
 8049c56:	4293      	cmp	r3, r2
 8049c58:	d005      	beq.n	8049c66 <HAL_UART_IRQHandler+0x3ba>
 8049c5a:	687b      	ldr	r3, [r7, #4]
 8049c5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8049c5e:	681b      	ldr	r3, [r3, #0]
 8049c60:	4a6d      	ldr	r2, [pc, #436]	; (8049e18 <HAL_UART_IRQHandler+0x56c>)
 8049c62:	4293      	cmp	r3, r2
 8049c64:	d105      	bne.n	8049c72 <HAL_UART_IRQHandler+0x3c6>
 8049c66:	687b      	ldr	r3, [r7, #4]
 8049c68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8049c6a:	681b      	ldr	r3, [r3, #0]
 8049c6c:	685b      	ldr	r3, [r3, #4]
 8049c6e:	b29b      	uxth	r3, r3
 8049c70:	e004      	b.n	8049c7c <HAL_UART_IRQHandler+0x3d0>
 8049c72:	687b      	ldr	r3, [r7, #4]
 8049c74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8049c76:	681b      	ldr	r3, [r3, #0]
 8049c78:	685b      	ldr	r3, [r3, #4]
 8049c7a:	b29b      	uxth	r3, r3
 8049c7c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8049c80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8049c84:	2b00      	cmp	r3, #0
 8049c86:	f000 81a4 	beq.w	8049fd2 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8049c8a:	687b      	ldr	r3, [r7, #4]
 8049c8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8049c90:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8049c94:	429a      	cmp	r2, r3
 8049c96:	f080 819c 	bcs.w	8049fd2 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8049c9a:	687b      	ldr	r3, [r7, #4]
 8049c9c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8049ca0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8049ca4:	687b      	ldr	r3, [r7, #4]
 8049ca6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8049ca8:	69db      	ldr	r3, [r3, #28]
 8049caa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8049cae:	f000 8086 	beq.w	8049dbe <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8049cb2:	687b      	ldr	r3, [r7, #4]
 8049cb4:	681b      	ldr	r3, [r3, #0]
 8049cb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8049cba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8049cbe:	e853 3f00 	ldrex	r3, [r3]
 8049cc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8049cc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8049cca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8049cce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8049cd2:	687b      	ldr	r3, [r7, #4]
 8049cd4:	681b      	ldr	r3, [r3, #0]
 8049cd6:	461a      	mov	r2, r3
 8049cd8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8049cdc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8049ce0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8049ce4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8049ce8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8049cec:	e841 2300 	strex	r3, r2, [r1]
 8049cf0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8049cf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8049cf8:	2b00      	cmp	r3, #0
 8049cfa:	d1da      	bne.n	8049cb2 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8049cfc:	687b      	ldr	r3, [r7, #4]
 8049cfe:	681b      	ldr	r3, [r3, #0]
 8049d00:	3308      	adds	r3, #8
 8049d02:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8049d04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8049d06:	e853 3f00 	ldrex	r3, [r3]
 8049d0a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8049d0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8049d0e:	f023 0301 	bic.w	r3, r3, #1
 8049d12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8049d16:	687b      	ldr	r3, [r7, #4]
 8049d18:	681b      	ldr	r3, [r3, #0]
 8049d1a:	3308      	adds	r3, #8
 8049d1c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8049d20:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8049d24:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8049d26:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8049d28:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8049d2c:	e841 2300 	strex	r3, r2, [r1]
 8049d30:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8049d32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8049d34:	2b00      	cmp	r3, #0
 8049d36:	d1e1      	bne.n	8049cfc <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8049d38:	687b      	ldr	r3, [r7, #4]
 8049d3a:	681b      	ldr	r3, [r3, #0]
 8049d3c:	3308      	adds	r3, #8
 8049d3e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8049d40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8049d42:	e853 3f00 	ldrex	r3, [r3]
 8049d46:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8049d48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8049d4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8049d4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8049d52:	687b      	ldr	r3, [r7, #4]
 8049d54:	681b      	ldr	r3, [r3, #0]
 8049d56:	3308      	adds	r3, #8
 8049d58:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8049d5c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8049d5e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8049d60:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8049d62:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8049d64:	e841 2300 	strex	r3, r2, [r1]
 8049d68:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8049d6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8049d6c:	2b00      	cmp	r3, #0
 8049d6e:	d1e3      	bne.n	8049d38 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8049d70:	687b      	ldr	r3, [r7, #4]
 8049d72:	2220      	movs	r2, #32
 8049d74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8049d78:	687b      	ldr	r3, [r7, #4]
 8049d7a:	2200      	movs	r2, #0
 8049d7c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8049d7e:	687b      	ldr	r3, [r7, #4]
 8049d80:	681b      	ldr	r3, [r3, #0]
 8049d82:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8049d84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8049d86:	e853 3f00 	ldrex	r3, [r3]
 8049d8a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8049d8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8049d8e:	f023 0310 	bic.w	r3, r3, #16
 8049d92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8049d96:	687b      	ldr	r3, [r7, #4]
 8049d98:	681b      	ldr	r3, [r3, #0]
 8049d9a:	461a      	mov	r2, r3
 8049d9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8049da0:	65bb      	str	r3, [r7, #88]	; 0x58
 8049da2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8049da4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8049da6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8049da8:	e841 2300 	strex	r3, r2, [r1]
 8049dac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8049dae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8049db0:	2b00      	cmp	r3, #0
 8049db2:	d1e4      	bne.n	8049d7e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8049db4:	687b      	ldr	r3, [r7, #4]
 8049db6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8049db8:	4618      	mov	r0, r3
 8049dba:	f7f9 f863 	bl	8042e84 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8049dbe:	687b      	ldr	r3, [r7, #4]
 8049dc0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8049dc4:	687b      	ldr	r3, [r7, #4]
 8049dc6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8049dca:	b29b      	uxth	r3, r3
 8049dcc:	1ad3      	subs	r3, r2, r3
 8049dce:	b29b      	uxth	r3, r3
 8049dd0:	4619      	mov	r1, r3
 8049dd2:	6878      	ldr	r0, [r7, #4]
 8049dd4:	f7f7 fa4e 	bl	8041274 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8049dd8:	e0fb      	b.n	8049fd2 <HAL_UART_IRQHandler+0x726>
 8049dda:	bf00      	nop
 8049ddc:	40020010 	.word	0x40020010
 8049de0:	40020028 	.word	0x40020028
 8049de4:	40020040 	.word	0x40020040
 8049de8:	40020058 	.word	0x40020058
 8049dec:	40020070 	.word	0x40020070
 8049df0:	40020088 	.word	0x40020088
 8049df4:	400200a0 	.word	0x400200a0
 8049df8:	400200b8 	.word	0x400200b8
 8049dfc:	40020410 	.word	0x40020410
 8049e00:	40020428 	.word	0x40020428
 8049e04:	40020440 	.word	0x40020440
 8049e08:	40020458 	.word	0x40020458
 8049e0c:	40020470 	.word	0x40020470
 8049e10:	40020488 	.word	0x40020488
 8049e14:	400204a0 	.word	0x400204a0
 8049e18:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8049e1c:	687b      	ldr	r3, [r7, #4]
 8049e1e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8049e22:	687b      	ldr	r3, [r7, #4]
 8049e24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8049e28:	b29b      	uxth	r3, r3
 8049e2a:	1ad3      	subs	r3, r2, r3
 8049e2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8049e30:	687b      	ldr	r3, [r7, #4]
 8049e32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8049e36:	b29b      	uxth	r3, r3
 8049e38:	2b00      	cmp	r3, #0
 8049e3a:	f000 80cc 	beq.w	8049fd6 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8049e3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8049e42:	2b00      	cmp	r3, #0
 8049e44:	f000 80c7 	beq.w	8049fd6 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8049e48:	687b      	ldr	r3, [r7, #4]
 8049e4a:	681b      	ldr	r3, [r3, #0]
 8049e4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8049e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8049e50:	e853 3f00 	ldrex	r3, [r3]
 8049e54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8049e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8049e58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8049e5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8049e60:	687b      	ldr	r3, [r7, #4]
 8049e62:	681b      	ldr	r3, [r3, #0]
 8049e64:	461a      	mov	r2, r3
 8049e66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8049e6a:	647b      	str	r3, [r7, #68]	; 0x44
 8049e6c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8049e6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8049e70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8049e72:	e841 2300 	strex	r3, r2, [r1]
 8049e76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8049e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8049e7a:	2b00      	cmp	r3, #0
 8049e7c:	d1e4      	bne.n	8049e48 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8049e7e:	687b      	ldr	r3, [r7, #4]
 8049e80:	681b      	ldr	r3, [r3, #0]
 8049e82:	3308      	adds	r3, #8
 8049e84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8049e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8049e88:	e853 3f00 	ldrex	r3, [r3]
 8049e8c:	623b      	str	r3, [r7, #32]
   return(result);
 8049e8e:	6a3a      	ldr	r2, [r7, #32]
 8049e90:	4b54      	ldr	r3, [pc, #336]	; (8049fe4 <HAL_UART_IRQHandler+0x738>)
 8049e92:	4013      	ands	r3, r2
 8049e94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8049e98:	687b      	ldr	r3, [r7, #4]
 8049e9a:	681b      	ldr	r3, [r3, #0]
 8049e9c:	3308      	adds	r3, #8
 8049e9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8049ea2:	633a      	str	r2, [r7, #48]	; 0x30
 8049ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8049ea6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8049ea8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8049eaa:	e841 2300 	strex	r3, r2, [r1]
 8049eae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8049eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8049eb2:	2b00      	cmp	r3, #0
 8049eb4:	d1e3      	bne.n	8049e7e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8049eb6:	687b      	ldr	r3, [r7, #4]
 8049eb8:	2220      	movs	r2, #32
 8049eba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8049ebe:	687b      	ldr	r3, [r7, #4]
 8049ec0:	2200      	movs	r2, #0
 8049ec2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8049ec4:	687b      	ldr	r3, [r7, #4]
 8049ec6:	2200      	movs	r2, #0
 8049ec8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8049eca:	687b      	ldr	r3, [r7, #4]
 8049ecc:	681b      	ldr	r3, [r3, #0]
 8049ece:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8049ed0:	693b      	ldr	r3, [r7, #16]
 8049ed2:	e853 3f00 	ldrex	r3, [r3]
 8049ed6:	60fb      	str	r3, [r7, #12]
   return(result);
 8049ed8:	68fb      	ldr	r3, [r7, #12]
 8049eda:	f023 0310 	bic.w	r3, r3, #16
 8049ede:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8049ee2:	687b      	ldr	r3, [r7, #4]
 8049ee4:	681b      	ldr	r3, [r3, #0]
 8049ee6:	461a      	mov	r2, r3
 8049ee8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8049eec:	61fb      	str	r3, [r7, #28]
 8049eee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8049ef0:	69b9      	ldr	r1, [r7, #24]
 8049ef2:	69fa      	ldr	r2, [r7, #28]
 8049ef4:	e841 2300 	strex	r3, r2, [r1]
 8049ef8:	617b      	str	r3, [r7, #20]
   return(result);
 8049efa:	697b      	ldr	r3, [r7, #20]
 8049efc:	2b00      	cmp	r3, #0
 8049efe:	d1e4      	bne.n	8049eca <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8049f00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8049f04:	4619      	mov	r1, r3
 8049f06:	6878      	ldr	r0, [r7, #4]
 8049f08:	f7f7 f9b4 	bl	8041274 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8049f0c:	e063      	b.n	8049fd6 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8049f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8049f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8049f16:	2b00      	cmp	r3, #0
 8049f18:	d00e      	beq.n	8049f38 <HAL_UART_IRQHandler+0x68c>
 8049f1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8049f1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8049f22:	2b00      	cmp	r3, #0
 8049f24:	d008      	beq.n	8049f38 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8049f26:	687b      	ldr	r3, [r7, #4]
 8049f28:	681b      	ldr	r3, [r3, #0]
 8049f2a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8049f2e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8049f30:	6878      	ldr	r0, [r7, #4]
 8049f32:	f001 fb7a 	bl	804b62a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8049f36:	e051      	b.n	8049fdc <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8049f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8049f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8049f40:	2b00      	cmp	r3, #0
 8049f42:	d014      	beq.n	8049f6e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8049f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8049f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8049f4c:	2b00      	cmp	r3, #0
 8049f4e:	d105      	bne.n	8049f5c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8049f50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8049f54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8049f58:	2b00      	cmp	r3, #0
 8049f5a:	d008      	beq.n	8049f6e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8049f5c:	687b      	ldr	r3, [r7, #4]
 8049f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8049f60:	2b00      	cmp	r3, #0
 8049f62:	d03a      	beq.n	8049fda <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8049f64:	687b      	ldr	r3, [r7, #4]
 8049f66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8049f68:	6878      	ldr	r0, [r7, #4]
 8049f6a:	4798      	blx	r3
    }
    return;
 8049f6c:	e035      	b.n	8049fda <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8049f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8049f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8049f76:	2b00      	cmp	r3, #0
 8049f78:	d009      	beq.n	8049f8e <HAL_UART_IRQHandler+0x6e2>
 8049f7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8049f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8049f82:	2b00      	cmp	r3, #0
 8049f84:	d003      	beq.n	8049f8e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8049f86:	6878      	ldr	r0, [r7, #4]
 8049f88:	f001 fb24 	bl	804b5d4 <UART_EndTransmit_IT>
    return;
 8049f8c:	e026      	b.n	8049fdc <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8049f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8049f92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8049f96:	2b00      	cmp	r3, #0
 8049f98:	d009      	beq.n	8049fae <HAL_UART_IRQHandler+0x702>
 8049f9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8049f9e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8049fa2:	2b00      	cmp	r3, #0
 8049fa4:	d003      	beq.n	8049fae <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8049fa6:	6878      	ldr	r0, [r7, #4]
 8049fa8:	f001 fb53 	bl	804b652 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8049fac:	e016      	b.n	8049fdc <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8049fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8049fb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8049fb6:	2b00      	cmp	r3, #0
 8049fb8:	d010      	beq.n	8049fdc <HAL_UART_IRQHandler+0x730>
 8049fba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8049fbe:	2b00      	cmp	r3, #0
 8049fc0:	da0c      	bge.n	8049fdc <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8049fc2:	6878      	ldr	r0, [r7, #4]
 8049fc4:	f001 fb3b 	bl	804b63e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8049fc8:	e008      	b.n	8049fdc <HAL_UART_IRQHandler+0x730>
      return;
 8049fca:	bf00      	nop
 8049fcc:	e006      	b.n	8049fdc <HAL_UART_IRQHandler+0x730>
    return;
 8049fce:	bf00      	nop
 8049fd0:	e004      	b.n	8049fdc <HAL_UART_IRQHandler+0x730>
      return;
 8049fd2:	bf00      	nop
 8049fd4:	e002      	b.n	8049fdc <HAL_UART_IRQHandler+0x730>
      return;
 8049fd6:	bf00      	nop
 8049fd8:	e000      	b.n	8049fdc <HAL_UART_IRQHandler+0x730>
    return;
 8049fda:	bf00      	nop
  }
}
 8049fdc:	37e8      	adds	r7, #232	; 0xe8
 8049fde:	46bd      	mov	sp, r7
 8049fe0:	bd80      	pop	{r7, pc}
 8049fe2:	bf00      	nop
 8049fe4:	effffffe 	.word	0xeffffffe

08049fe8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8049fe8:	b480      	push	{r7}
 8049fea:	b083      	sub	sp, #12
 8049fec:	af00      	add	r7, sp, #0
 8049fee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8049ff0:	bf00      	nop
 8049ff2:	370c      	adds	r7, #12
 8049ff4:	46bd      	mov	sp, r7
 8049ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049ffa:	4770      	bx	lr

08049ffc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8049ffc:	b480      	push	{r7}
 8049ffe:	b083      	sub	sp, #12
 804a000:	af00      	add	r7, sp, #0
 804a002:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 804a004:	bf00      	nop
 804a006:	370c      	adds	r7, #12
 804a008:	46bd      	mov	sp, r7
 804a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a00e:	4770      	bx	lr

0804a010 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 804a010:	b480      	push	{r7}
 804a012:	b083      	sub	sp, #12
 804a014:	af00      	add	r7, sp, #0
 804a016:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 804a018:	bf00      	nop
 804a01a:	370c      	adds	r7, #12
 804a01c:	46bd      	mov	sp, r7
 804a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a022:	4770      	bx	lr

0804a024 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 804a024:	b480      	push	{r7}
 804a026:	b083      	sub	sp, #12
 804a028:	af00      	add	r7, sp, #0
 804a02a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 804a02c:	bf00      	nop
 804a02e:	370c      	adds	r7, #12
 804a030:	46bd      	mov	sp, r7
 804a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a036:	4770      	bx	lr

0804a038 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 804a038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 804a03c:	b092      	sub	sp, #72	; 0x48
 804a03e:	af00      	add	r7, sp, #0
 804a040:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 804a042:	2300      	movs	r3, #0
 804a044:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 804a048:	697b      	ldr	r3, [r7, #20]
 804a04a:	689a      	ldr	r2, [r3, #8]
 804a04c:	697b      	ldr	r3, [r7, #20]
 804a04e:	691b      	ldr	r3, [r3, #16]
 804a050:	431a      	orrs	r2, r3
 804a052:	697b      	ldr	r3, [r7, #20]
 804a054:	695b      	ldr	r3, [r3, #20]
 804a056:	431a      	orrs	r2, r3
 804a058:	697b      	ldr	r3, [r7, #20]
 804a05a:	69db      	ldr	r3, [r3, #28]
 804a05c:	4313      	orrs	r3, r2
 804a05e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 804a060:	697b      	ldr	r3, [r7, #20]
 804a062:	681b      	ldr	r3, [r3, #0]
 804a064:	681a      	ldr	r2, [r3, #0]
 804a066:	4bbe      	ldr	r3, [pc, #760]	; (804a360 <UART_SetConfig+0x328>)
 804a068:	4013      	ands	r3, r2
 804a06a:	697a      	ldr	r2, [r7, #20]
 804a06c:	6812      	ldr	r2, [r2, #0]
 804a06e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 804a070:	430b      	orrs	r3, r1
 804a072:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 804a074:	697b      	ldr	r3, [r7, #20]
 804a076:	681b      	ldr	r3, [r3, #0]
 804a078:	685b      	ldr	r3, [r3, #4]
 804a07a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 804a07e:	697b      	ldr	r3, [r7, #20]
 804a080:	68da      	ldr	r2, [r3, #12]
 804a082:	697b      	ldr	r3, [r7, #20]
 804a084:	681b      	ldr	r3, [r3, #0]
 804a086:	430a      	orrs	r2, r1
 804a088:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 804a08a:	697b      	ldr	r3, [r7, #20]
 804a08c:	699b      	ldr	r3, [r3, #24]
 804a08e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 804a090:	697b      	ldr	r3, [r7, #20]
 804a092:	681b      	ldr	r3, [r3, #0]
 804a094:	4ab3      	ldr	r2, [pc, #716]	; (804a364 <UART_SetConfig+0x32c>)
 804a096:	4293      	cmp	r3, r2
 804a098:	d004      	beq.n	804a0a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 804a09a:	697b      	ldr	r3, [r7, #20]
 804a09c:	6a1b      	ldr	r3, [r3, #32]
 804a09e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 804a0a0:	4313      	orrs	r3, r2
 804a0a2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 804a0a4:	697b      	ldr	r3, [r7, #20]
 804a0a6:	681b      	ldr	r3, [r3, #0]
 804a0a8:	689a      	ldr	r2, [r3, #8]
 804a0aa:	4baf      	ldr	r3, [pc, #700]	; (804a368 <UART_SetConfig+0x330>)
 804a0ac:	4013      	ands	r3, r2
 804a0ae:	697a      	ldr	r2, [r7, #20]
 804a0b0:	6812      	ldr	r2, [r2, #0]
 804a0b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 804a0b4:	430b      	orrs	r3, r1
 804a0b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 804a0b8:	697b      	ldr	r3, [r7, #20]
 804a0ba:	681b      	ldr	r3, [r3, #0]
 804a0bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804a0be:	f023 010f 	bic.w	r1, r3, #15
 804a0c2:	697b      	ldr	r3, [r7, #20]
 804a0c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 804a0c6:	697b      	ldr	r3, [r7, #20]
 804a0c8:	681b      	ldr	r3, [r3, #0]
 804a0ca:	430a      	orrs	r2, r1
 804a0cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 804a0ce:	697b      	ldr	r3, [r7, #20]
 804a0d0:	681b      	ldr	r3, [r3, #0]
 804a0d2:	4aa6      	ldr	r2, [pc, #664]	; (804a36c <UART_SetConfig+0x334>)
 804a0d4:	4293      	cmp	r3, r2
 804a0d6:	d177      	bne.n	804a1c8 <UART_SetConfig+0x190>
 804a0d8:	4ba5      	ldr	r3, [pc, #660]	; (804a370 <UART_SetConfig+0x338>)
 804a0da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804a0dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 804a0e0:	2b28      	cmp	r3, #40	; 0x28
 804a0e2:	d86d      	bhi.n	804a1c0 <UART_SetConfig+0x188>
 804a0e4:	a201      	add	r2, pc, #4	; (adr r2, 804a0ec <UART_SetConfig+0xb4>)
 804a0e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804a0ea:	bf00      	nop
 804a0ec:	0804a191 	.word	0x0804a191
 804a0f0:	0804a1c1 	.word	0x0804a1c1
 804a0f4:	0804a1c1 	.word	0x0804a1c1
 804a0f8:	0804a1c1 	.word	0x0804a1c1
 804a0fc:	0804a1c1 	.word	0x0804a1c1
 804a100:	0804a1c1 	.word	0x0804a1c1
 804a104:	0804a1c1 	.word	0x0804a1c1
 804a108:	0804a1c1 	.word	0x0804a1c1
 804a10c:	0804a199 	.word	0x0804a199
 804a110:	0804a1c1 	.word	0x0804a1c1
 804a114:	0804a1c1 	.word	0x0804a1c1
 804a118:	0804a1c1 	.word	0x0804a1c1
 804a11c:	0804a1c1 	.word	0x0804a1c1
 804a120:	0804a1c1 	.word	0x0804a1c1
 804a124:	0804a1c1 	.word	0x0804a1c1
 804a128:	0804a1c1 	.word	0x0804a1c1
 804a12c:	0804a1a1 	.word	0x0804a1a1
 804a130:	0804a1c1 	.word	0x0804a1c1
 804a134:	0804a1c1 	.word	0x0804a1c1
 804a138:	0804a1c1 	.word	0x0804a1c1
 804a13c:	0804a1c1 	.word	0x0804a1c1
 804a140:	0804a1c1 	.word	0x0804a1c1
 804a144:	0804a1c1 	.word	0x0804a1c1
 804a148:	0804a1c1 	.word	0x0804a1c1
 804a14c:	0804a1a9 	.word	0x0804a1a9
 804a150:	0804a1c1 	.word	0x0804a1c1
 804a154:	0804a1c1 	.word	0x0804a1c1
 804a158:	0804a1c1 	.word	0x0804a1c1
 804a15c:	0804a1c1 	.word	0x0804a1c1
 804a160:	0804a1c1 	.word	0x0804a1c1
 804a164:	0804a1c1 	.word	0x0804a1c1
 804a168:	0804a1c1 	.word	0x0804a1c1
 804a16c:	0804a1b1 	.word	0x0804a1b1
 804a170:	0804a1c1 	.word	0x0804a1c1
 804a174:	0804a1c1 	.word	0x0804a1c1
 804a178:	0804a1c1 	.word	0x0804a1c1
 804a17c:	0804a1c1 	.word	0x0804a1c1
 804a180:	0804a1c1 	.word	0x0804a1c1
 804a184:	0804a1c1 	.word	0x0804a1c1
 804a188:	0804a1c1 	.word	0x0804a1c1
 804a18c:	0804a1b9 	.word	0x0804a1b9
 804a190:	2301      	movs	r3, #1
 804a192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a196:	e326      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a198:	2304      	movs	r3, #4
 804a19a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a19e:	e322      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a1a0:	2308      	movs	r3, #8
 804a1a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a1a6:	e31e      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a1a8:	2310      	movs	r3, #16
 804a1aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a1ae:	e31a      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a1b0:	2320      	movs	r3, #32
 804a1b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a1b6:	e316      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a1b8:	2340      	movs	r3, #64	; 0x40
 804a1ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a1be:	e312      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a1c0:	2380      	movs	r3, #128	; 0x80
 804a1c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a1c6:	e30e      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a1c8:	697b      	ldr	r3, [r7, #20]
 804a1ca:	681b      	ldr	r3, [r3, #0]
 804a1cc:	4a69      	ldr	r2, [pc, #420]	; (804a374 <UART_SetConfig+0x33c>)
 804a1ce:	4293      	cmp	r3, r2
 804a1d0:	d130      	bne.n	804a234 <UART_SetConfig+0x1fc>
 804a1d2:	4b67      	ldr	r3, [pc, #412]	; (804a370 <UART_SetConfig+0x338>)
 804a1d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804a1d6:	f003 0307 	and.w	r3, r3, #7
 804a1da:	2b05      	cmp	r3, #5
 804a1dc:	d826      	bhi.n	804a22c <UART_SetConfig+0x1f4>
 804a1de:	a201      	add	r2, pc, #4	; (adr r2, 804a1e4 <UART_SetConfig+0x1ac>)
 804a1e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804a1e4:	0804a1fd 	.word	0x0804a1fd
 804a1e8:	0804a205 	.word	0x0804a205
 804a1ec:	0804a20d 	.word	0x0804a20d
 804a1f0:	0804a215 	.word	0x0804a215
 804a1f4:	0804a21d 	.word	0x0804a21d
 804a1f8:	0804a225 	.word	0x0804a225
 804a1fc:	2300      	movs	r3, #0
 804a1fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a202:	e2f0      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a204:	2304      	movs	r3, #4
 804a206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a20a:	e2ec      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a20c:	2308      	movs	r3, #8
 804a20e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a212:	e2e8      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a214:	2310      	movs	r3, #16
 804a216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a21a:	e2e4      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a21c:	2320      	movs	r3, #32
 804a21e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a222:	e2e0      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a224:	2340      	movs	r3, #64	; 0x40
 804a226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a22a:	e2dc      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a22c:	2380      	movs	r3, #128	; 0x80
 804a22e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a232:	e2d8      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a234:	697b      	ldr	r3, [r7, #20]
 804a236:	681b      	ldr	r3, [r3, #0]
 804a238:	4a4f      	ldr	r2, [pc, #316]	; (804a378 <UART_SetConfig+0x340>)
 804a23a:	4293      	cmp	r3, r2
 804a23c:	d130      	bne.n	804a2a0 <UART_SetConfig+0x268>
 804a23e:	4b4c      	ldr	r3, [pc, #304]	; (804a370 <UART_SetConfig+0x338>)
 804a240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804a242:	f003 0307 	and.w	r3, r3, #7
 804a246:	2b05      	cmp	r3, #5
 804a248:	d826      	bhi.n	804a298 <UART_SetConfig+0x260>
 804a24a:	a201      	add	r2, pc, #4	; (adr r2, 804a250 <UART_SetConfig+0x218>)
 804a24c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804a250:	0804a269 	.word	0x0804a269
 804a254:	0804a271 	.word	0x0804a271
 804a258:	0804a279 	.word	0x0804a279
 804a25c:	0804a281 	.word	0x0804a281
 804a260:	0804a289 	.word	0x0804a289
 804a264:	0804a291 	.word	0x0804a291
 804a268:	2300      	movs	r3, #0
 804a26a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a26e:	e2ba      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a270:	2304      	movs	r3, #4
 804a272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a276:	e2b6      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a278:	2308      	movs	r3, #8
 804a27a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a27e:	e2b2      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a280:	2310      	movs	r3, #16
 804a282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a286:	e2ae      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a288:	2320      	movs	r3, #32
 804a28a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a28e:	e2aa      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a290:	2340      	movs	r3, #64	; 0x40
 804a292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a296:	e2a6      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a298:	2380      	movs	r3, #128	; 0x80
 804a29a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a29e:	e2a2      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a2a0:	697b      	ldr	r3, [r7, #20]
 804a2a2:	681b      	ldr	r3, [r3, #0]
 804a2a4:	4a35      	ldr	r2, [pc, #212]	; (804a37c <UART_SetConfig+0x344>)
 804a2a6:	4293      	cmp	r3, r2
 804a2a8:	d130      	bne.n	804a30c <UART_SetConfig+0x2d4>
 804a2aa:	4b31      	ldr	r3, [pc, #196]	; (804a370 <UART_SetConfig+0x338>)
 804a2ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804a2ae:	f003 0307 	and.w	r3, r3, #7
 804a2b2:	2b05      	cmp	r3, #5
 804a2b4:	d826      	bhi.n	804a304 <UART_SetConfig+0x2cc>
 804a2b6:	a201      	add	r2, pc, #4	; (adr r2, 804a2bc <UART_SetConfig+0x284>)
 804a2b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804a2bc:	0804a2d5 	.word	0x0804a2d5
 804a2c0:	0804a2dd 	.word	0x0804a2dd
 804a2c4:	0804a2e5 	.word	0x0804a2e5
 804a2c8:	0804a2ed 	.word	0x0804a2ed
 804a2cc:	0804a2f5 	.word	0x0804a2f5
 804a2d0:	0804a2fd 	.word	0x0804a2fd
 804a2d4:	2300      	movs	r3, #0
 804a2d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a2da:	e284      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a2dc:	2304      	movs	r3, #4
 804a2de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a2e2:	e280      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a2e4:	2308      	movs	r3, #8
 804a2e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a2ea:	e27c      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a2ec:	2310      	movs	r3, #16
 804a2ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a2f2:	e278      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a2f4:	2320      	movs	r3, #32
 804a2f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a2fa:	e274      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a2fc:	2340      	movs	r3, #64	; 0x40
 804a2fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a302:	e270      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a304:	2380      	movs	r3, #128	; 0x80
 804a306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a30a:	e26c      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a30c:	697b      	ldr	r3, [r7, #20]
 804a30e:	681b      	ldr	r3, [r3, #0]
 804a310:	4a1b      	ldr	r2, [pc, #108]	; (804a380 <UART_SetConfig+0x348>)
 804a312:	4293      	cmp	r3, r2
 804a314:	d142      	bne.n	804a39c <UART_SetConfig+0x364>
 804a316:	4b16      	ldr	r3, [pc, #88]	; (804a370 <UART_SetConfig+0x338>)
 804a318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804a31a:	f003 0307 	and.w	r3, r3, #7
 804a31e:	2b05      	cmp	r3, #5
 804a320:	d838      	bhi.n	804a394 <UART_SetConfig+0x35c>
 804a322:	a201      	add	r2, pc, #4	; (adr r2, 804a328 <UART_SetConfig+0x2f0>)
 804a324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804a328:	0804a341 	.word	0x0804a341
 804a32c:	0804a349 	.word	0x0804a349
 804a330:	0804a351 	.word	0x0804a351
 804a334:	0804a359 	.word	0x0804a359
 804a338:	0804a385 	.word	0x0804a385
 804a33c:	0804a38d 	.word	0x0804a38d
 804a340:	2300      	movs	r3, #0
 804a342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a346:	e24e      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a348:	2304      	movs	r3, #4
 804a34a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a34e:	e24a      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a350:	2308      	movs	r3, #8
 804a352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a356:	e246      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a358:	2310      	movs	r3, #16
 804a35a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a35e:	e242      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a360:	cfff69f3 	.word	0xcfff69f3
 804a364:	58000c00 	.word	0x58000c00
 804a368:	11fff4ff 	.word	0x11fff4ff
 804a36c:	40011000 	.word	0x40011000
 804a370:	58024400 	.word	0x58024400
 804a374:	40004400 	.word	0x40004400
 804a378:	40004800 	.word	0x40004800
 804a37c:	40004c00 	.word	0x40004c00
 804a380:	40005000 	.word	0x40005000
 804a384:	2320      	movs	r3, #32
 804a386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a38a:	e22c      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a38c:	2340      	movs	r3, #64	; 0x40
 804a38e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a392:	e228      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a394:	2380      	movs	r3, #128	; 0x80
 804a396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a39a:	e224      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a39c:	697b      	ldr	r3, [r7, #20]
 804a39e:	681b      	ldr	r3, [r3, #0]
 804a3a0:	4ab1      	ldr	r2, [pc, #708]	; (804a668 <UART_SetConfig+0x630>)
 804a3a2:	4293      	cmp	r3, r2
 804a3a4:	d176      	bne.n	804a494 <UART_SetConfig+0x45c>
 804a3a6:	4bb1      	ldr	r3, [pc, #708]	; (804a66c <UART_SetConfig+0x634>)
 804a3a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804a3aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 804a3ae:	2b28      	cmp	r3, #40	; 0x28
 804a3b0:	d86c      	bhi.n	804a48c <UART_SetConfig+0x454>
 804a3b2:	a201      	add	r2, pc, #4	; (adr r2, 804a3b8 <UART_SetConfig+0x380>)
 804a3b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804a3b8:	0804a45d 	.word	0x0804a45d
 804a3bc:	0804a48d 	.word	0x0804a48d
 804a3c0:	0804a48d 	.word	0x0804a48d
 804a3c4:	0804a48d 	.word	0x0804a48d
 804a3c8:	0804a48d 	.word	0x0804a48d
 804a3cc:	0804a48d 	.word	0x0804a48d
 804a3d0:	0804a48d 	.word	0x0804a48d
 804a3d4:	0804a48d 	.word	0x0804a48d
 804a3d8:	0804a465 	.word	0x0804a465
 804a3dc:	0804a48d 	.word	0x0804a48d
 804a3e0:	0804a48d 	.word	0x0804a48d
 804a3e4:	0804a48d 	.word	0x0804a48d
 804a3e8:	0804a48d 	.word	0x0804a48d
 804a3ec:	0804a48d 	.word	0x0804a48d
 804a3f0:	0804a48d 	.word	0x0804a48d
 804a3f4:	0804a48d 	.word	0x0804a48d
 804a3f8:	0804a46d 	.word	0x0804a46d
 804a3fc:	0804a48d 	.word	0x0804a48d
 804a400:	0804a48d 	.word	0x0804a48d
 804a404:	0804a48d 	.word	0x0804a48d
 804a408:	0804a48d 	.word	0x0804a48d
 804a40c:	0804a48d 	.word	0x0804a48d
 804a410:	0804a48d 	.word	0x0804a48d
 804a414:	0804a48d 	.word	0x0804a48d
 804a418:	0804a475 	.word	0x0804a475
 804a41c:	0804a48d 	.word	0x0804a48d
 804a420:	0804a48d 	.word	0x0804a48d
 804a424:	0804a48d 	.word	0x0804a48d
 804a428:	0804a48d 	.word	0x0804a48d
 804a42c:	0804a48d 	.word	0x0804a48d
 804a430:	0804a48d 	.word	0x0804a48d
 804a434:	0804a48d 	.word	0x0804a48d
 804a438:	0804a47d 	.word	0x0804a47d
 804a43c:	0804a48d 	.word	0x0804a48d
 804a440:	0804a48d 	.word	0x0804a48d
 804a444:	0804a48d 	.word	0x0804a48d
 804a448:	0804a48d 	.word	0x0804a48d
 804a44c:	0804a48d 	.word	0x0804a48d
 804a450:	0804a48d 	.word	0x0804a48d
 804a454:	0804a48d 	.word	0x0804a48d
 804a458:	0804a485 	.word	0x0804a485
 804a45c:	2301      	movs	r3, #1
 804a45e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a462:	e1c0      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a464:	2304      	movs	r3, #4
 804a466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a46a:	e1bc      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a46c:	2308      	movs	r3, #8
 804a46e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a472:	e1b8      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a474:	2310      	movs	r3, #16
 804a476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a47a:	e1b4      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a47c:	2320      	movs	r3, #32
 804a47e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a482:	e1b0      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a484:	2340      	movs	r3, #64	; 0x40
 804a486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a48a:	e1ac      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a48c:	2380      	movs	r3, #128	; 0x80
 804a48e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a492:	e1a8      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a494:	697b      	ldr	r3, [r7, #20]
 804a496:	681b      	ldr	r3, [r3, #0]
 804a498:	4a75      	ldr	r2, [pc, #468]	; (804a670 <UART_SetConfig+0x638>)
 804a49a:	4293      	cmp	r3, r2
 804a49c:	d130      	bne.n	804a500 <UART_SetConfig+0x4c8>
 804a49e:	4b73      	ldr	r3, [pc, #460]	; (804a66c <UART_SetConfig+0x634>)
 804a4a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804a4a2:	f003 0307 	and.w	r3, r3, #7
 804a4a6:	2b05      	cmp	r3, #5
 804a4a8:	d826      	bhi.n	804a4f8 <UART_SetConfig+0x4c0>
 804a4aa:	a201      	add	r2, pc, #4	; (adr r2, 804a4b0 <UART_SetConfig+0x478>)
 804a4ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804a4b0:	0804a4c9 	.word	0x0804a4c9
 804a4b4:	0804a4d1 	.word	0x0804a4d1
 804a4b8:	0804a4d9 	.word	0x0804a4d9
 804a4bc:	0804a4e1 	.word	0x0804a4e1
 804a4c0:	0804a4e9 	.word	0x0804a4e9
 804a4c4:	0804a4f1 	.word	0x0804a4f1
 804a4c8:	2300      	movs	r3, #0
 804a4ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a4ce:	e18a      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a4d0:	2304      	movs	r3, #4
 804a4d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a4d6:	e186      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a4d8:	2308      	movs	r3, #8
 804a4da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a4de:	e182      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a4e0:	2310      	movs	r3, #16
 804a4e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a4e6:	e17e      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a4e8:	2320      	movs	r3, #32
 804a4ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a4ee:	e17a      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a4f0:	2340      	movs	r3, #64	; 0x40
 804a4f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a4f6:	e176      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a4f8:	2380      	movs	r3, #128	; 0x80
 804a4fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a4fe:	e172      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a500:	697b      	ldr	r3, [r7, #20]
 804a502:	681b      	ldr	r3, [r3, #0]
 804a504:	4a5b      	ldr	r2, [pc, #364]	; (804a674 <UART_SetConfig+0x63c>)
 804a506:	4293      	cmp	r3, r2
 804a508:	d130      	bne.n	804a56c <UART_SetConfig+0x534>
 804a50a:	4b58      	ldr	r3, [pc, #352]	; (804a66c <UART_SetConfig+0x634>)
 804a50c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804a50e:	f003 0307 	and.w	r3, r3, #7
 804a512:	2b05      	cmp	r3, #5
 804a514:	d826      	bhi.n	804a564 <UART_SetConfig+0x52c>
 804a516:	a201      	add	r2, pc, #4	; (adr r2, 804a51c <UART_SetConfig+0x4e4>)
 804a518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804a51c:	0804a535 	.word	0x0804a535
 804a520:	0804a53d 	.word	0x0804a53d
 804a524:	0804a545 	.word	0x0804a545
 804a528:	0804a54d 	.word	0x0804a54d
 804a52c:	0804a555 	.word	0x0804a555
 804a530:	0804a55d 	.word	0x0804a55d
 804a534:	2300      	movs	r3, #0
 804a536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a53a:	e154      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a53c:	2304      	movs	r3, #4
 804a53e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a542:	e150      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a544:	2308      	movs	r3, #8
 804a546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a54a:	e14c      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a54c:	2310      	movs	r3, #16
 804a54e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a552:	e148      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a554:	2320      	movs	r3, #32
 804a556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a55a:	e144      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a55c:	2340      	movs	r3, #64	; 0x40
 804a55e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a562:	e140      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a564:	2380      	movs	r3, #128	; 0x80
 804a566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a56a:	e13c      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a56c:	697b      	ldr	r3, [r7, #20]
 804a56e:	681b      	ldr	r3, [r3, #0]
 804a570:	4a41      	ldr	r2, [pc, #260]	; (804a678 <UART_SetConfig+0x640>)
 804a572:	4293      	cmp	r3, r2
 804a574:	f040 8082 	bne.w	804a67c <UART_SetConfig+0x644>
 804a578:	4b3c      	ldr	r3, [pc, #240]	; (804a66c <UART_SetConfig+0x634>)
 804a57a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804a57c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 804a580:	2b28      	cmp	r3, #40	; 0x28
 804a582:	d86d      	bhi.n	804a660 <UART_SetConfig+0x628>
 804a584:	a201      	add	r2, pc, #4	; (adr r2, 804a58c <UART_SetConfig+0x554>)
 804a586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804a58a:	bf00      	nop
 804a58c:	0804a631 	.word	0x0804a631
 804a590:	0804a661 	.word	0x0804a661
 804a594:	0804a661 	.word	0x0804a661
 804a598:	0804a661 	.word	0x0804a661
 804a59c:	0804a661 	.word	0x0804a661
 804a5a0:	0804a661 	.word	0x0804a661
 804a5a4:	0804a661 	.word	0x0804a661
 804a5a8:	0804a661 	.word	0x0804a661
 804a5ac:	0804a639 	.word	0x0804a639
 804a5b0:	0804a661 	.word	0x0804a661
 804a5b4:	0804a661 	.word	0x0804a661
 804a5b8:	0804a661 	.word	0x0804a661
 804a5bc:	0804a661 	.word	0x0804a661
 804a5c0:	0804a661 	.word	0x0804a661
 804a5c4:	0804a661 	.word	0x0804a661
 804a5c8:	0804a661 	.word	0x0804a661
 804a5cc:	0804a641 	.word	0x0804a641
 804a5d0:	0804a661 	.word	0x0804a661
 804a5d4:	0804a661 	.word	0x0804a661
 804a5d8:	0804a661 	.word	0x0804a661
 804a5dc:	0804a661 	.word	0x0804a661
 804a5e0:	0804a661 	.word	0x0804a661
 804a5e4:	0804a661 	.word	0x0804a661
 804a5e8:	0804a661 	.word	0x0804a661
 804a5ec:	0804a649 	.word	0x0804a649
 804a5f0:	0804a661 	.word	0x0804a661
 804a5f4:	0804a661 	.word	0x0804a661
 804a5f8:	0804a661 	.word	0x0804a661
 804a5fc:	0804a661 	.word	0x0804a661
 804a600:	0804a661 	.word	0x0804a661
 804a604:	0804a661 	.word	0x0804a661
 804a608:	0804a661 	.word	0x0804a661
 804a60c:	0804a651 	.word	0x0804a651
 804a610:	0804a661 	.word	0x0804a661
 804a614:	0804a661 	.word	0x0804a661
 804a618:	0804a661 	.word	0x0804a661
 804a61c:	0804a661 	.word	0x0804a661
 804a620:	0804a661 	.word	0x0804a661
 804a624:	0804a661 	.word	0x0804a661
 804a628:	0804a661 	.word	0x0804a661
 804a62c:	0804a659 	.word	0x0804a659
 804a630:	2301      	movs	r3, #1
 804a632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a636:	e0d6      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a638:	2304      	movs	r3, #4
 804a63a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a63e:	e0d2      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a640:	2308      	movs	r3, #8
 804a642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a646:	e0ce      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a648:	2310      	movs	r3, #16
 804a64a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a64e:	e0ca      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a650:	2320      	movs	r3, #32
 804a652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a656:	e0c6      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a658:	2340      	movs	r3, #64	; 0x40
 804a65a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a65e:	e0c2      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a660:	2380      	movs	r3, #128	; 0x80
 804a662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a666:	e0be      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a668:	40011400 	.word	0x40011400
 804a66c:	58024400 	.word	0x58024400
 804a670:	40007800 	.word	0x40007800
 804a674:	40007c00 	.word	0x40007c00
 804a678:	40011800 	.word	0x40011800
 804a67c:	697b      	ldr	r3, [r7, #20]
 804a67e:	681b      	ldr	r3, [r3, #0]
 804a680:	4aad      	ldr	r2, [pc, #692]	; (804a938 <UART_SetConfig+0x900>)
 804a682:	4293      	cmp	r3, r2
 804a684:	d176      	bne.n	804a774 <UART_SetConfig+0x73c>
 804a686:	4bad      	ldr	r3, [pc, #692]	; (804a93c <UART_SetConfig+0x904>)
 804a688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804a68a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 804a68e:	2b28      	cmp	r3, #40	; 0x28
 804a690:	d86c      	bhi.n	804a76c <UART_SetConfig+0x734>
 804a692:	a201      	add	r2, pc, #4	; (adr r2, 804a698 <UART_SetConfig+0x660>)
 804a694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804a698:	0804a73d 	.word	0x0804a73d
 804a69c:	0804a76d 	.word	0x0804a76d
 804a6a0:	0804a76d 	.word	0x0804a76d
 804a6a4:	0804a76d 	.word	0x0804a76d
 804a6a8:	0804a76d 	.word	0x0804a76d
 804a6ac:	0804a76d 	.word	0x0804a76d
 804a6b0:	0804a76d 	.word	0x0804a76d
 804a6b4:	0804a76d 	.word	0x0804a76d
 804a6b8:	0804a745 	.word	0x0804a745
 804a6bc:	0804a76d 	.word	0x0804a76d
 804a6c0:	0804a76d 	.word	0x0804a76d
 804a6c4:	0804a76d 	.word	0x0804a76d
 804a6c8:	0804a76d 	.word	0x0804a76d
 804a6cc:	0804a76d 	.word	0x0804a76d
 804a6d0:	0804a76d 	.word	0x0804a76d
 804a6d4:	0804a76d 	.word	0x0804a76d
 804a6d8:	0804a74d 	.word	0x0804a74d
 804a6dc:	0804a76d 	.word	0x0804a76d
 804a6e0:	0804a76d 	.word	0x0804a76d
 804a6e4:	0804a76d 	.word	0x0804a76d
 804a6e8:	0804a76d 	.word	0x0804a76d
 804a6ec:	0804a76d 	.word	0x0804a76d
 804a6f0:	0804a76d 	.word	0x0804a76d
 804a6f4:	0804a76d 	.word	0x0804a76d
 804a6f8:	0804a755 	.word	0x0804a755
 804a6fc:	0804a76d 	.word	0x0804a76d
 804a700:	0804a76d 	.word	0x0804a76d
 804a704:	0804a76d 	.word	0x0804a76d
 804a708:	0804a76d 	.word	0x0804a76d
 804a70c:	0804a76d 	.word	0x0804a76d
 804a710:	0804a76d 	.word	0x0804a76d
 804a714:	0804a76d 	.word	0x0804a76d
 804a718:	0804a75d 	.word	0x0804a75d
 804a71c:	0804a76d 	.word	0x0804a76d
 804a720:	0804a76d 	.word	0x0804a76d
 804a724:	0804a76d 	.word	0x0804a76d
 804a728:	0804a76d 	.word	0x0804a76d
 804a72c:	0804a76d 	.word	0x0804a76d
 804a730:	0804a76d 	.word	0x0804a76d
 804a734:	0804a76d 	.word	0x0804a76d
 804a738:	0804a765 	.word	0x0804a765
 804a73c:	2301      	movs	r3, #1
 804a73e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a742:	e050      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a744:	2304      	movs	r3, #4
 804a746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a74a:	e04c      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a74c:	2308      	movs	r3, #8
 804a74e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a752:	e048      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a754:	2310      	movs	r3, #16
 804a756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a75a:	e044      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a75c:	2320      	movs	r3, #32
 804a75e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a762:	e040      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a764:	2340      	movs	r3, #64	; 0x40
 804a766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a76a:	e03c      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a76c:	2380      	movs	r3, #128	; 0x80
 804a76e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a772:	e038      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a774:	697b      	ldr	r3, [r7, #20]
 804a776:	681b      	ldr	r3, [r3, #0]
 804a778:	4a71      	ldr	r2, [pc, #452]	; (804a940 <UART_SetConfig+0x908>)
 804a77a:	4293      	cmp	r3, r2
 804a77c:	d130      	bne.n	804a7e0 <UART_SetConfig+0x7a8>
 804a77e:	4b6f      	ldr	r3, [pc, #444]	; (804a93c <UART_SetConfig+0x904>)
 804a780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804a782:	f003 0307 	and.w	r3, r3, #7
 804a786:	2b05      	cmp	r3, #5
 804a788:	d826      	bhi.n	804a7d8 <UART_SetConfig+0x7a0>
 804a78a:	a201      	add	r2, pc, #4	; (adr r2, 804a790 <UART_SetConfig+0x758>)
 804a78c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804a790:	0804a7a9 	.word	0x0804a7a9
 804a794:	0804a7b1 	.word	0x0804a7b1
 804a798:	0804a7b9 	.word	0x0804a7b9
 804a79c:	0804a7c1 	.word	0x0804a7c1
 804a7a0:	0804a7c9 	.word	0x0804a7c9
 804a7a4:	0804a7d1 	.word	0x0804a7d1
 804a7a8:	2302      	movs	r3, #2
 804a7aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a7ae:	e01a      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a7b0:	2304      	movs	r3, #4
 804a7b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a7b6:	e016      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a7b8:	2308      	movs	r3, #8
 804a7ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a7be:	e012      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a7c0:	2310      	movs	r3, #16
 804a7c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a7c6:	e00e      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a7c8:	2320      	movs	r3, #32
 804a7ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a7ce:	e00a      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a7d0:	2340      	movs	r3, #64	; 0x40
 804a7d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a7d6:	e006      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a7d8:	2380      	movs	r3, #128	; 0x80
 804a7da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804a7de:	e002      	b.n	804a7e6 <UART_SetConfig+0x7ae>
 804a7e0:	2380      	movs	r3, #128	; 0x80
 804a7e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 804a7e6:	697b      	ldr	r3, [r7, #20]
 804a7e8:	681b      	ldr	r3, [r3, #0]
 804a7ea:	4a55      	ldr	r2, [pc, #340]	; (804a940 <UART_SetConfig+0x908>)
 804a7ec:	4293      	cmp	r3, r2
 804a7ee:	f040 80f8 	bne.w	804a9e2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 804a7f2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 804a7f6:	2b20      	cmp	r3, #32
 804a7f8:	dc46      	bgt.n	804a888 <UART_SetConfig+0x850>
 804a7fa:	2b02      	cmp	r3, #2
 804a7fc:	db75      	blt.n	804a8ea <UART_SetConfig+0x8b2>
 804a7fe:	3b02      	subs	r3, #2
 804a800:	2b1e      	cmp	r3, #30
 804a802:	d872      	bhi.n	804a8ea <UART_SetConfig+0x8b2>
 804a804:	a201      	add	r2, pc, #4	; (adr r2, 804a80c <UART_SetConfig+0x7d4>)
 804a806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804a80a:	bf00      	nop
 804a80c:	0804a88f 	.word	0x0804a88f
 804a810:	0804a8eb 	.word	0x0804a8eb
 804a814:	0804a897 	.word	0x0804a897
 804a818:	0804a8eb 	.word	0x0804a8eb
 804a81c:	0804a8eb 	.word	0x0804a8eb
 804a820:	0804a8eb 	.word	0x0804a8eb
 804a824:	0804a8a7 	.word	0x0804a8a7
 804a828:	0804a8eb 	.word	0x0804a8eb
 804a82c:	0804a8eb 	.word	0x0804a8eb
 804a830:	0804a8eb 	.word	0x0804a8eb
 804a834:	0804a8eb 	.word	0x0804a8eb
 804a838:	0804a8eb 	.word	0x0804a8eb
 804a83c:	0804a8eb 	.word	0x0804a8eb
 804a840:	0804a8eb 	.word	0x0804a8eb
 804a844:	0804a8b7 	.word	0x0804a8b7
 804a848:	0804a8eb 	.word	0x0804a8eb
 804a84c:	0804a8eb 	.word	0x0804a8eb
 804a850:	0804a8eb 	.word	0x0804a8eb
 804a854:	0804a8eb 	.word	0x0804a8eb
 804a858:	0804a8eb 	.word	0x0804a8eb
 804a85c:	0804a8eb 	.word	0x0804a8eb
 804a860:	0804a8eb 	.word	0x0804a8eb
 804a864:	0804a8eb 	.word	0x0804a8eb
 804a868:	0804a8eb 	.word	0x0804a8eb
 804a86c:	0804a8eb 	.word	0x0804a8eb
 804a870:	0804a8eb 	.word	0x0804a8eb
 804a874:	0804a8eb 	.word	0x0804a8eb
 804a878:	0804a8eb 	.word	0x0804a8eb
 804a87c:	0804a8eb 	.word	0x0804a8eb
 804a880:	0804a8eb 	.word	0x0804a8eb
 804a884:	0804a8dd 	.word	0x0804a8dd
 804a888:	2b40      	cmp	r3, #64	; 0x40
 804a88a:	d02a      	beq.n	804a8e2 <UART_SetConfig+0x8aa>
 804a88c:	e02d      	b.n	804a8ea <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 804a88e:	f7fe f815 	bl	80488bc <HAL_RCCEx_GetD3PCLK1Freq>
 804a892:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 804a894:	e02f      	b.n	804a8f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 804a896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 804a89a:	4618      	mov	r0, r3
 804a89c:	f7fe f824 	bl	80488e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 804a8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804a8a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 804a8a4:	e027      	b.n	804a8f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 804a8a6:	f107 0318 	add.w	r3, r7, #24
 804a8aa:	4618      	mov	r0, r3
 804a8ac:	f7fe f970 	bl	8048b90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 804a8b0:	69fb      	ldr	r3, [r7, #28]
 804a8b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 804a8b4:	e01f      	b.n	804a8f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 804a8b6:	4b21      	ldr	r3, [pc, #132]	; (804a93c <UART_SetConfig+0x904>)
 804a8b8:	681b      	ldr	r3, [r3, #0]
 804a8ba:	f003 0320 	and.w	r3, r3, #32
 804a8be:	2b00      	cmp	r3, #0
 804a8c0:	d009      	beq.n	804a8d6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 804a8c2:	4b1e      	ldr	r3, [pc, #120]	; (804a93c <UART_SetConfig+0x904>)
 804a8c4:	681b      	ldr	r3, [r3, #0]
 804a8c6:	08db      	lsrs	r3, r3, #3
 804a8c8:	f003 0303 	and.w	r3, r3, #3
 804a8cc:	4a1d      	ldr	r2, [pc, #116]	; (804a944 <UART_SetConfig+0x90c>)
 804a8ce:	fa22 f303 	lsr.w	r3, r2, r3
 804a8d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 804a8d4:	e00f      	b.n	804a8f6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 804a8d6:	4b1b      	ldr	r3, [pc, #108]	; (804a944 <UART_SetConfig+0x90c>)
 804a8d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 804a8da:	e00c      	b.n	804a8f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 804a8dc:	4b1a      	ldr	r3, [pc, #104]	; (804a948 <UART_SetConfig+0x910>)
 804a8de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 804a8e0:	e009      	b.n	804a8f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 804a8e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 804a8e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 804a8e8:	e005      	b.n	804a8f6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 804a8ea:	2300      	movs	r3, #0
 804a8ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 804a8ee:	2301      	movs	r3, #1
 804a8f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 804a8f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 804a8f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804a8f8:	2b00      	cmp	r3, #0
 804a8fa:	f000 81ee 	beq.w	804acda <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 804a8fe:	697b      	ldr	r3, [r7, #20]
 804a900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804a902:	4a12      	ldr	r2, [pc, #72]	; (804a94c <UART_SetConfig+0x914>)
 804a904:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 804a908:	461a      	mov	r2, r3
 804a90a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804a90c:	fbb3 f3f2 	udiv	r3, r3, r2
 804a910:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 804a912:	697b      	ldr	r3, [r7, #20]
 804a914:	685a      	ldr	r2, [r3, #4]
 804a916:	4613      	mov	r3, r2
 804a918:	005b      	lsls	r3, r3, #1
 804a91a:	4413      	add	r3, r2
 804a91c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 804a91e:	429a      	cmp	r2, r3
 804a920:	d305      	bcc.n	804a92e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 804a922:	697b      	ldr	r3, [r7, #20]
 804a924:	685b      	ldr	r3, [r3, #4]
 804a926:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 804a928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 804a92a:	429a      	cmp	r2, r3
 804a92c:	d910      	bls.n	804a950 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 804a92e:	2301      	movs	r3, #1
 804a930:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 804a934:	e1d1      	b.n	804acda <UART_SetConfig+0xca2>
 804a936:	bf00      	nop
 804a938:	40011c00 	.word	0x40011c00
 804a93c:	58024400 	.word	0x58024400
 804a940:	58000c00 	.word	0x58000c00
 804a944:	03d09000 	.word	0x03d09000
 804a948:	003d0900 	.word	0x003d0900
 804a94c:	0805b968 	.word	0x0805b968
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 804a950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804a952:	2200      	movs	r2, #0
 804a954:	60bb      	str	r3, [r7, #8]
 804a956:	60fa      	str	r2, [r7, #12]
 804a958:	697b      	ldr	r3, [r7, #20]
 804a95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804a95c:	4ac0      	ldr	r2, [pc, #768]	; (804ac60 <UART_SetConfig+0xc28>)
 804a95e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 804a962:	b29b      	uxth	r3, r3
 804a964:	2200      	movs	r2, #0
 804a966:	603b      	str	r3, [r7, #0]
 804a968:	607a      	str	r2, [r7, #4]
 804a96a:	e9d7 2300 	ldrd	r2, r3, [r7]
 804a96e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 804a972:	f7f5 fd35 	bl	80403e0 <__aeabi_uldivmod>
 804a976:	4602      	mov	r2, r0
 804a978:	460b      	mov	r3, r1
 804a97a:	4610      	mov	r0, r2
 804a97c:	4619      	mov	r1, r3
 804a97e:	f04f 0200 	mov.w	r2, #0
 804a982:	f04f 0300 	mov.w	r3, #0
 804a986:	020b      	lsls	r3, r1, #8
 804a988:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 804a98c:	0202      	lsls	r2, r0, #8
 804a98e:	6979      	ldr	r1, [r7, #20]
 804a990:	6849      	ldr	r1, [r1, #4]
 804a992:	0849      	lsrs	r1, r1, #1
 804a994:	2000      	movs	r0, #0
 804a996:	460c      	mov	r4, r1
 804a998:	4605      	mov	r5, r0
 804a99a:	eb12 0804 	adds.w	r8, r2, r4
 804a99e:	eb43 0905 	adc.w	r9, r3, r5
 804a9a2:	697b      	ldr	r3, [r7, #20]
 804a9a4:	685b      	ldr	r3, [r3, #4]
 804a9a6:	2200      	movs	r2, #0
 804a9a8:	469a      	mov	sl, r3
 804a9aa:	4693      	mov	fp, r2
 804a9ac:	4652      	mov	r2, sl
 804a9ae:	465b      	mov	r3, fp
 804a9b0:	4640      	mov	r0, r8
 804a9b2:	4649      	mov	r1, r9
 804a9b4:	f7f5 fd14 	bl	80403e0 <__aeabi_uldivmod>
 804a9b8:	4602      	mov	r2, r0
 804a9ba:	460b      	mov	r3, r1
 804a9bc:	4613      	mov	r3, r2
 804a9be:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 804a9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804a9c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 804a9c6:	d308      	bcc.n	804a9da <UART_SetConfig+0x9a2>
 804a9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804a9ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 804a9ce:	d204      	bcs.n	804a9da <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 804a9d0:	697b      	ldr	r3, [r7, #20]
 804a9d2:	681b      	ldr	r3, [r3, #0]
 804a9d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 804a9d6:	60da      	str	r2, [r3, #12]
 804a9d8:	e17f      	b.n	804acda <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 804a9da:	2301      	movs	r3, #1
 804a9dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 804a9e0:	e17b      	b.n	804acda <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 804a9e2:	697b      	ldr	r3, [r7, #20]
 804a9e4:	69db      	ldr	r3, [r3, #28]
 804a9e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 804a9ea:	f040 80bd 	bne.w	804ab68 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 804a9ee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 804a9f2:	2b20      	cmp	r3, #32
 804a9f4:	dc48      	bgt.n	804aa88 <UART_SetConfig+0xa50>
 804a9f6:	2b00      	cmp	r3, #0
 804a9f8:	db7b      	blt.n	804aaf2 <UART_SetConfig+0xaba>
 804a9fa:	2b20      	cmp	r3, #32
 804a9fc:	d879      	bhi.n	804aaf2 <UART_SetConfig+0xaba>
 804a9fe:	a201      	add	r2, pc, #4	; (adr r2, 804aa04 <UART_SetConfig+0x9cc>)
 804aa00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804aa04:	0804aa8f 	.word	0x0804aa8f
 804aa08:	0804aa97 	.word	0x0804aa97
 804aa0c:	0804aaf3 	.word	0x0804aaf3
 804aa10:	0804aaf3 	.word	0x0804aaf3
 804aa14:	0804aa9f 	.word	0x0804aa9f
 804aa18:	0804aaf3 	.word	0x0804aaf3
 804aa1c:	0804aaf3 	.word	0x0804aaf3
 804aa20:	0804aaf3 	.word	0x0804aaf3
 804aa24:	0804aaaf 	.word	0x0804aaaf
 804aa28:	0804aaf3 	.word	0x0804aaf3
 804aa2c:	0804aaf3 	.word	0x0804aaf3
 804aa30:	0804aaf3 	.word	0x0804aaf3
 804aa34:	0804aaf3 	.word	0x0804aaf3
 804aa38:	0804aaf3 	.word	0x0804aaf3
 804aa3c:	0804aaf3 	.word	0x0804aaf3
 804aa40:	0804aaf3 	.word	0x0804aaf3
 804aa44:	0804aabf 	.word	0x0804aabf
 804aa48:	0804aaf3 	.word	0x0804aaf3
 804aa4c:	0804aaf3 	.word	0x0804aaf3
 804aa50:	0804aaf3 	.word	0x0804aaf3
 804aa54:	0804aaf3 	.word	0x0804aaf3
 804aa58:	0804aaf3 	.word	0x0804aaf3
 804aa5c:	0804aaf3 	.word	0x0804aaf3
 804aa60:	0804aaf3 	.word	0x0804aaf3
 804aa64:	0804aaf3 	.word	0x0804aaf3
 804aa68:	0804aaf3 	.word	0x0804aaf3
 804aa6c:	0804aaf3 	.word	0x0804aaf3
 804aa70:	0804aaf3 	.word	0x0804aaf3
 804aa74:	0804aaf3 	.word	0x0804aaf3
 804aa78:	0804aaf3 	.word	0x0804aaf3
 804aa7c:	0804aaf3 	.word	0x0804aaf3
 804aa80:	0804aaf3 	.word	0x0804aaf3
 804aa84:	0804aae5 	.word	0x0804aae5
 804aa88:	2b40      	cmp	r3, #64	; 0x40
 804aa8a:	d02e      	beq.n	804aaea <UART_SetConfig+0xab2>
 804aa8c:	e031      	b.n	804aaf2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 804aa8e:	f7fc ffad 	bl	80479ec <HAL_RCC_GetPCLK1Freq>
 804aa92:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 804aa94:	e033      	b.n	804aafe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 804aa96:	f7fc ffbf 	bl	8047a18 <HAL_RCC_GetPCLK2Freq>
 804aa9a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 804aa9c:	e02f      	b.n	804aafe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 804aa9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 804aaa2:	4618      	mov	r0, r3
 804aaa4:	f7fd ff20 	bl	80488e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 804aaa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804aaaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 804aaac:	e027      	b.n	804aafe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 804aaae:	f107 0318 	add.w	r3, r7, #24
 804aab2:	4618      	mov	r0, r3
 804aab4:	f7fe f86c 	bl	8048b90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 804aab8:	69fb      	ldr	r3, [r7, #28]
 804aaba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 804aabc:	e01f      	b.n	804aafe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 804aabe:	4b69      	ldr	r3, [pc, #420]	; (804ac64 <UART_SetConfig+0xc2c>)
 804aac0:	681b      	ldr	r3, [r3, #0]
 804aac2:	f003 0320 	and.w	r3, r3, #32
 804aac6:	2b00      	cmp	r3, #0
 804aac8:	d009      	beq.n	804aade <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 804aaca:	4b66      	ldr	r3, [pc, #408]	; (804ac64 <UART_SetConfig+0xc2c>)
 804aacc:	681b      	ldr	r3, [r3, #0]
 804aace:	08db      	lsrs	r3, r3, #3
 804aad0:	f003 0303 	and.w	r3, r3, #3
 804aad4:	4a64      	ldr	r2, [pc, #400]	; (804ac68 <UART_SetConfig+0xc30>)
 804aad6:	fa22 f303 	lsr.w	r3, r2, r3
 804aada:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 804aadc:	e00f      	b.n	804aafe <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 804aade:	4b62      	ldr	r3, [pc, #392]	; (804ac68 <UART_SetConfig+0xc30>)
 804aae0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 804aae2:	e00c      	b.n	804aafe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 804aae4:	4b61      	ldr	r3, [pc, #388]	; (804ac6c <UART_SetConfig+0xc34>)
 804aae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 804aae8:	e009      	b.n	804aafe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 804aaea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 804aaee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 804aaf0:	e005      	b.n	804aafe <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 804aaf2:	2300      	movs	r3, #0
 804aaf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 804aaf6:	2301      	movs	r3, #1
 804aaf8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 804aafc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 804aafe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804ab00:	2b00      	cmp	r3, #0
 804ab02:	f000 80ea 	beq.w	804acda <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 804ab06:	697b      	ldr	r3, [r7, #20]
 804ab08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804ab0a:	4a55      	ldr	r2, [pc, #340]	; (804ac60 <UART_SetConfig+0xc28>)
 804ab0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 804ab10:	461a      	mov	r2, r3
 804ab12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804ab14:	fbb3 f3f2 	udiv	r3, r3, r2
 804ab18:	005a      	lsls	r2, r3, #1
 804ab1a:	697b      	ldr	r3, [r7, #20]
 804ab1c:	685b      	ldr	r3, [r3, #4]
 804ab1e:	085b      	lsrs	r3, r3, #1
 804ab20:	441a      	add	r2, r3
 804ab22:	697b      	ldr	r3, [r7, #20]
 804ab24:	685b      	ldr	r3, [r3, #4]
 804ab26:	fbb2 f3f3 	udiv	r3, r2, r3
 804ab2a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 804ab2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804ab2e:	2b0f      	cmp	r3, #15
 804ab30:	d916      	bls.n	804ab60 <UART_SetConfig+0xb28>
 804ab32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804ab34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 804ab38:	d212      	bcs.n	804ab60 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 804ab3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804ab3c:	b29b      	uxth	r3, r3
 804ab3e:	f023 030f 	bic.w	r3, r3, #15
 804ab42:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 804ab44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804ab46:	085b      	lsrs	r3, r3, #1
 804ab48:	b29b      	uxth	r3, r3
 804ab4a:	f003 0307 	and.w	r3, r3, #7
 804ab4e:	b29a      	uxth	r2, r3
 804ab50:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 804ab52:	4313      	orrs	r3, r2
 804ab54:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 804ab56:	697b      	ldr	r3, [r7, #20]
 804ab58:	681b      	ldr	r3, [r3, #0]
 804ab5a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 804ab5c:	60da      	str	r2, [r3, #12]
 804ab5e:	e0bc      	b.n	804acda <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 804ab60:	2301      	movs	r3, #1
 804ab62:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 804ab66:	e0b8      	b.n	804acda <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 804ab68:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 804ab6c:	2b20      	cmp	r3, #32
 804ab6e:	dc4b      	bgt.n	804ac08 <UART_SetConfig+0xbd0>
 804ab70:	2b00      	cmp	r3, #0
 804ab72:	f2c0 8087 	blt.w	804ac84 <UART_SetConfig+0xc4c>
 804ab76:	2b20      	cmp	r3, #32
 804ab78:	f200 8084 	bhi.w	804ac84 <UART_SetConfig+0xc4c>
 804ab7c:	a201      	add	r2, pc, #4	; (adr r2, 804ab84 <UART_SetConfig+0xb4c>)
 804ab7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804ab82:	bf00      	nop
 804ab84:	0804ac0f 	.word	0x0804ac0f
 804ab88:	0804ac17 	.word	0x0804ac17
 804ab8c:	0804ac85 	.word	0x0804ac85
 804ab90:	0804ac85 	.word	0x0804ac85
 804ab94:	0804ac1f 	.word	0x0804ac1f
 804ab98:	0804ac85 	.word	0x0804ac85
 804ab9c:	0804ac85 	.word	0x0804ac85
 804aba0:	0804ac85 	.word	0x0804ac85
 804aba4:	0804ac2f 	.word	0x0804ac2f
 804aba8:	0804ac85 	.word	0x0804ac85
 804abac:	0804ac85 	.word	0x0804ac85
 804abb0:	0804ac85 	.word	0x0804ac85
 804abb4:	0804ac85 	.word	0x0804ac85
 804abb8:	0804ac85 	.word	0x0804ac85
 804abbc:	0804ac85 	.word	0x0804ac85
 804abc0:	0804ac85 	.word	0x0804ac85
 804abc4:	0804ac3f 	.word	0x0804ac3f
 804abc8:	0804ac85 	.word	0x0804ac85
 804abcc:	0804ac85 	.word	0x0804ac85
 804abd0:	0804ac85 	.word	0x0804ac85
 804abd4:	0804ac85 	.word	0x0804ac85
 804abd8:	0804ac85 	.word	0x0804ac85
 804abdc:	0804ac85 	.word	0x0804ac85
 804abe0:	0804ac85 	.word	0x0804ac85
 804abe4:	0804ac85 	.word	0x0804ac85
 804abe8:	0804ac85 	.word	0x0804ac85
 804abec:	0804ac85 	.word	0x0804ac85
 804abf0:	0804ac85 	.word	0x0804ac85
 804abf4:	0804ac85 	.word	0x0804ac85
 804abf8:	0804ac85 	.word	0x0804ac85
 804abfc:	0804ac85 	.word	0x0804ac85
 804ac00:	0804ac85 	.word	0x0804ac85
 804ac04:	0804ac77 	.word	0x0804ac77
 804ac08:	2b40      	cmp	r3, #64	; 0x40
 804ac0a:	d037      	beq.n	804ac7c <UART_SetConfig+0xc44>
 804ac0c:	e03a      	b.n	804ac84 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 804ac0e:	f7fc feed 	bl	80479ec <HAL_RCC_GetPCLK1Freq>
 804ac12:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 804ac14:	e03c      	b.n	804ac90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 804ac16:	f7fc feff 	bl	8047a18 <HAL_RCC_GetPCLK2Freq>
 804ac1a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 804ac1c:	e038      	b.n	804ac90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 804ac1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 804ac22:	4618      	mov	r0, r3
 804ac24:	f7fd fe60 	bl	80488e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 804ac28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804ac2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 804ac2c:	e030      	b.n	804ac90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 804ac2e:	f107 0318 	add.w	r3, r7, #24
 804ac32:	4618      	mov	r0, r3
 804ac34:	f7fd ffac 	bl	8048b90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 804ac38:	69fb      	ldr	r3, [r7, #28]
 804ac3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 804ac3c:	e028      	b.n	804ac90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 804ac3e:	4b09      	ldr	r3, [pc, #36]	; (804ac64 <UART_SetConfig+0xc2c>)
 804ac40:	681b      	ldr	r3, [r3, #0]
 804ac42:	f003 0320 	and.w	r3, r3, #32
 804ac46:	2b00      	cmp	r3, #0
 804ac48:	d012      	beq.n	804ac70 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 804ac4a:	4b06      	ldr	r3, [pc, #24]	; (804ac64 <UART_SetConfig+0xc2c>)
 804ac4c:	681b      	ldr	r3, [r3, #0]
 804ac4e:	08db      	lsrs	r3, r3, #3
 804ac50:	f003 0303 	and.w	r3, r3, #3
 804ac54:	4a04      	ldr	r2, [pc, #16]	; (804ac68 <UART_SetConfig+0xc30>)
 804ac56:	fa22 f303 	lsr.w	r3, r2, r3
 804ac5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 804ac5c:	e018      	b.n	804ac90 <UART_SetConfig+0xc58>
 804ac5e:	bf00      	nop
 804ac60:	0805b968 	.word	0x0805b968
 804ac64:	58024400 	.word	0x58024400
 804ac68:	03d09000 	.word	0x03d09000
 804ac6c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 804ac70:	4b24      	ldr	r3, [pc, #144]	; (804ad04 <UART_SetConfig+0xccc>)
 804ac72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 804ac74:	e00c      	b.n	804ac90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 804ac76:	4b24      	ldr	r3, [pc, #144]	; (804ad08 <UART_SetConfig+0xcd0>)
 804ac78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 804ac7a:	e009      	b.n	804ac90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 804ac7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 804ac80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 804ac82:	e005      	b.n	804ac90 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 804ac84:	2300      	movs	r3, #0
 804ac86:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 804ac88:	2301      	movs	r3, #1
 804ac8a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 804ac8e:	bf00      	nop
    }

    if (pclk != 0U)
 804ac90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804ac92:	2b00      	cmp	r3, #0
 804ac94:	d021      	beq.n	804acda <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 804ac96:	697b      	ldr	r3, [r7, #20]
 804ac98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804ac9a:	4a1c      	ldr	r2, [pc, #112]	; (804ad0c <UART_SetConfig+0xcd4>)
 804ac9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 804aca0:	461a      	mov	r2, r3
 804aca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804aca4:	fbb3 f2f2 	udiv	r2, r3, r2
 804aca8:	697b      	ldr	r3, [r7, #20]
 804acaa:	685b      	ldr	r3, [r3, #4]
 804acac:	085b      	lsrs	r3, r3, #1
 804acae:	441a      	add	r2, r3
 804acb0:	697b      	ldr	r3, [r7, #20]
 804acb2:	685b      	ldr	r3, [r3, #4]
 804acb4:	fbb2 f3f3 	udiv	r3, r2, r3
 804acb8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 804acba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804acbc:	2b0f      	cmp	r3, #15
 804acbe:	d909      	bls.n	804acd4 <UART_SetConfig+0xc9c>
 804acc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804acc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 804acc6:	d205      	bcs.n	804acd4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 804acc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804acca:	b29a      	uxth	r2, r3
 804accc:	697b      	ldr	r3, [r7, #20]
 804acce:	681b      	ldr	r3, [r3, #0]
 804acd0:	60da      	str	r2, [r3, #12]
 804acd2:	e002      	b.n	804acda <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 804acd4:	2301      	movs	r3, #1
 804acd6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 804acda:	697b      	ldr	r3, [r7, #20]
 804acdc:	2201      	movs	r2, #1
 804acde:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 804ace2:	697b      	ldr	r3, [r7, #20]
 804ace4:	2201      	movs	r2, #1
 804ace6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 804acea:	697b      	ldr	r3, [r7, #20]
 804acec:	2200      	movs	r2, #0
 804acee:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 804acf0:	697b      	ldr	r3, [r7, #20]
 804acf2:	2200      	movs	r2, #0
 804acf4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 804acf6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 804acfa:	4618      	mov	r0, r3
 804acfc:	3748      	adds	r7, #72	; 0x48
 804acfe:	46bd      	mov	sp, r7
 804ad00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 804ad04:	03d09000 	.word	0x03d09000
 804ad08:	003d0900 	.word	0x003d0900
 804ad0c:	0805b968 	.word	0x0805b968

0804ad10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 804ad10:	b480      	push	{r7}
 804ad12:	b083      	sub	sp, #12
 804ad14:	af00      	add	r7, sp, #0
 804ad16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 804ad18:	687b      	ldr	r3, [r7, #4]
 804ad1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804ad1c:	f003 0301 	and.w	r3, r3, #1
 804ad20:	2b00      	cmp	r3, #0
 804ad22:	d00a      	beq.n	804ad3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 804ad24:	687b      	ldr	r3, [r7, #4]
 804ad26:	681b      	ldr	r3, [r3, #0]
 804ad28:	685b      	ldr	r3, [r3, #4]
 804ad2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 804ad2e:	687b      	ldr	r3, [r7, #4]
 804ad30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 804ad32:	687b      	ldr	r3, [r7, #4]
 804ad34:	681b      	ldr	r3, [r3, #0]
 804ad36:	430a      	orrs	r2, r1
 804ad38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 804ad3a:	687b      	ldr	r3, [r7, #4]
 804ad3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804ad3e:	f003 0302 	and.w	r3, r3, #2
 804ad42:	2b00      	cmp	r3, #0
 804ad44:	d00a      	beq.n	804ad5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 804ad46:	687b      	ldr	r3, [r7, #4]
 804ad48:	681b      	ldr	r3, [r3, #0]
 804ad4a:	685b      	ldr	r3, [r3, #4]
 804ad4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 804ad50:	687b      	ldr	r3, [r7, #4]
 804ad52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804ad54:	687b      	ldr	r3, [r7, #4]
 804ad56:	681b      	ldr	r3, [r3, #0]
 804ad58:	430a      	orrs	r2, r1
 804ad5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 804ad5c:	687b      	ldr	r3, [r7, #4]
 804ad5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804ad60:	f003 0304 	and.w	r3, r3, #4
 804ad64:	2b00      	cmp	r3, #0
 804ad66:	d00a      	beq.n	804ad7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 804ad68:	687b      	ldr	r3, [r7, #4]
 804ad6a:	681b      	ldr	r3, [r3, #0]
 804ad6c:	685b      	ldr	r3, [r3, #4]
 804ad6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 804ad72:	687b      	ldr	r3, [r7, #4]
 804ad74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 804ad76:	687b      	ldr	r3, [r7, #4]
 804ad78:	681b      	ldr	r3, [r3, #0]
 804ad7a:	430a      	orrs	r2, r1
 804ad7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 804ad7e:	687b      	ldr	r3, [r7, #4]
 804ad80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804ad82:	f003 0308 	and.w	r3, r3, #8
 804ad86:	2b00      	cmp	r3, #0
 804ad88:	d00a      	beq.n	804ada0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 804ad8a:	687b      	ldr	r3, [r7, #4]
 804ad8c:	681b      	ldr	r3, [r3, #0]
 804ad8e:	685b      	ldr	r3, [r3, #4]
 804ad90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 804ad94:	687b      	ldr	r3, [r7, #4]
 804ad96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 804ad98:	687b      	ldr	r3, [r7, #4]
 804ad9a:	681b      	ldr	r3, [r3, #0]
 804ad9c:	430a      	orrs	r2, r1
 804ad9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 804ada0:	687b      	ldr	r3, [r7, #4]
 804ada2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804ada4:	f003 0310 	and.w	r3, r3, #16
 804ada8:	2b00      	cmp	r3, #0
 804adaa:	d00a      	beq.n	804adc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 804adac:	687b      	ldr	r3, [r7, #4]
 804adae:	681b      	ldr	r3, [r3, #0]
 804adb0:	689b      	ldr	r3, [r3, #8]
 804adb2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 804adb6:	687b      	ldr	r3, [r7, #4]
 804adb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 804adba:	687b      	ldr	r3, [r7, #4]
 804adbc:	681b      	ldr	r3, [r3, #0]
 804adbe:	430a      	orrs	r2, r1
 804adc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 804adc2:	687b      	ldr	r3, [r7, #4]
 804adc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804adc6:	f003 0320 	and.w	r3, r3, #32
 804adca:	2b00      	cmp	r3, #0
 804adcc:	d00a      	beq.n	804ade4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 804adce:	687b      	ldr	r3, [r7, #4]
 804add0:	681b      	ldr	r3, [r3, #0]
 804add2:	689b      	ldr	r3, [r3, #8]
 804add4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 804add8:	687b      	ldr	r3, [r7, #4]
 804adda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804addc:	687b      	ldr	r3, [r7, #4]
 804adde:	681b      	ldr	r3, [r3, #0]
 804ade0:	430a      	orrs	r2, r1
 804ade2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 804ade4:	687b      	ldr	r3, [r7, #4]
 804ade6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804ade8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804adec:	2b00      	cmp	r3, #0
 804adee:	d01a      	beq.n	804ae26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 804adf0:	687b      	ldr	r3, [r7, #4]
 804adf2:	681b      	ldr	r3, [r3, #0]
 804adf4:	685b      	ldr	r3, [r3, #4]
 804adf6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 804adfa:	687b      	ldr	r3, [r7, #4]
 804adfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 804adfe:	687b      	ldr	r3, [r7, #4]
 804ae00:	681b      	ldr	r3, [r3, #0]
 804ae02:	430a      	orrs	r2, r1
 804ae04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 804ae06:	687b      	ldr	r3, [r7, #4]
 804ae08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804ae0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 804ae0e:	d10a      	bne.n	804ae26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 804ae10:	687b      	ldr	r3, [r7, #4]
 804ae12:	681b      	ldr	r3, [r3, #0]
 804ae14:	685b      	ldr	r3, [r3, #4]
 804ae16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 804ae1a:	687b      	ldr	r3, [r7, #4]
 804ae1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 804ae1e:	687b      	ldr	r3, [r7, #4]
 804ae20:	681b      	ldr	r3, [r3, #0]
 804ae22:	430a      	orrs	r2, r1
 804ae24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 804ae26:	687b      	ldr	r3, [r7, #4]
 804ae28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804ae2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804ae2e:	2b00      	cmp	r3, #0
 804ae30:	d00a      	beq.n	804ae48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 804ae32:	687b      	ldr	r3, [r7, #4]
 804ae34:	681b      	ldr	r3, [r3, #0]
 804ae36:	685b      	ldr	r3, [r3, #4]
 804ae38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 804ae3c:	687b      	ldr	r3, [r7, #4]
 804ae3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 804ae40:	687b      	ldr	r3, [r7, #4]
 804ae42:	681b      	ldr	r3, [r3, #0]
 804ae44:	430a      	orrs	r2, r1
 804ae46:	605a      	str	r2, [r3, #4]
  }
}
 804ae48:	bf00      	nop
 804ae4a:	370c      	adds	r7, #12
 804ae4c:	46bd      	mov	sp, r7
 804ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ae52:	4770      	bx	lr

0804ae54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 804ae54:	b580      	push	{r7, lr}
 804ae56:	b086      	sub	sp, #24
 804ae58:	af02      	add	r7, sp, #8
 804ae5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 804ae5c:	687b      	ldr	r3, [r7, #4]
 804ae5e:	2200      	movs	r2, #0
 804ae60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 804ae64:	f7f7 f93a 	bl	80420dc <HAL_GetTick>
 804ae68:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 804ae6a:	687b      	ldr	r3, [r7, #4]
 804ae6c:	681b      	ldr	r3, [r3, #0]
 804ae6e:	681b      	ldr	r3, [r3, #0]
 804ae70:	f003 0308 	and.w	r3, r3, #8
 804ae74:	2b08      	cmp	r3, #8
 804ae76:	d10e      	bne.n	804ae96 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 804ae78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 804ae7c:	9300      	str	r3, [sp, #0]
 804ae7e:	68fb      	ldr	r3, [r7, #12]
 804ae80:	2200      	movs	r2, #0
 804ae82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 804ae86:	6878      	ldr	r0, [r7, #4]
 804ae88:	f000 f82f 	bl	804aeea <UART_WaitOnFlagUntilTimeout>
 804ae8c:	4603      	mov	r3, r0
 804ae8e:	2b00      	cmp	r3, #0
 804ae90:	d001      	beq.n	804ae96 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 804ae92:	2303      	movs	r3, #3
 804ae94:	e025      	b.n	804aee2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 804ae96:	687b      	ldr	r3, [r7, #4]
 804ae98:	681b      	ldr	r3, [r3, #0]
 804ae9a:	681b      	ldr	r3, [r3, #0]
 804ae9c:	f003 0304 	and.w	r3, r3, #4
 804aea0:	2b04      	cmp	r3, #4
 804aea2:	d10e      	bne.n	804aec2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 804aea4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 804aea8:	9300      	str	r3, [sp, #0]
 804aeaa:	68fb      	ldr	r3, [r7, #12]
 804aeac:	2200      	movs	r2, #0
 804aeae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 804aeb2:	6878      	ldr	r0, [r7, #4]
 804aeb4:	f000 f819 	bl	804aeea <UART_WaitOnFlagUntilTimeout>
 804aeb8:	4603      	mov	r3, r0
 804aeba:	2b00      	cmp	r3, #0
 804aebc:	d001      	beq.n	804aec2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 804aebe:	2303      	movs	r3, #3
 804aec0:	e00f      	b.n	804aee2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 804aec2:	687b      	ldr	r3, [r7, #4]
 804aec4:	2220      	movs	r2, #32
 804aec6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 804aeca:	687b      	ldr	r3, [r7, #4]
 804aecc:	2220      	movs	r2, #32
 804aece:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 804aed2:	687b      	ldr	r3, [r7, #4]
 804aed4:	2200      	movs	r2, #0
 804aed6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 804aed8:	687b      	ldr	r3, [r7, #4]
 804aeda:	2200      	movs	r2, #0
 804aedc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 804aee0:	2300      	movs	r3, #0
}
 804aee2:	4618      	mov	r0, r3
 804aee4:	3710      	adds	r7, #16
 804aee6:	46bd      	mov	sp, r7
 804aee8:	bd80      	pop	{r7, pc}

0804aeea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 804aeea:	b580      	push	{r7, lr}
 804aeec:	b09c      	sub	sp, #112	; 0x70
 804aeee:	af00      	add	r7, sp, #0
 804aef0:	60f8      	str	r0, [r7, #12]
 804aef2:	60b9      	str	r1, [r7, #8]
 804aef4:	603b      	str	r3, [r7, #0]
 804aef6:	4613      	mov	r3, r2
 804aef8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 804aefa:	e0a9      	b.n	804b050 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 804aefc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 804aefe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 804af02:	f000 80a5 	beq.w	804b050 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 804af06:	f7f7 f8e9 	bl	80420dc <HAL_GetTick>
 804af0a:	4602      	mov	r2, r0
 804af0c:	683b      	ldr	r3, [r7, #0]
 804af0e:	1ad3      	subs	r3, r2, r3
 804af10:	6fba      	ldr	r2, [r7, #120]	; 0x78
 804af12:	429a      	cmp	r2, r3
 804af14:	d302      	bcc.n	804af1c <UART_WaitOnFlagUntilTimeout+0x32>
 804af16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 804af18:	2b00      	cmp	r3, #0
 804af1a:	d140      	bne.n	804af9e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 804af1c:	68fb      	ldr	r3, [r7, #12]
 804af1e:	681b      	ldr	r3, [r3, #0]
 804af20:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804af22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 804af24:	e853 3f00 	ldrex	r3, [r3]
 804af28:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 804af2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 804af2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 804af30:	667b      	str	r3, [r7, #100]	; 0x64
 804af32:	68fb      	ldr	r3, [r7, #12]
 804af34:	681b      	ldr	r3, [r3, #0]
 804af36:	461a      	mov	r2, r3
 804af38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 804af3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 804af3c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804af3e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 804af40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 804af42:	e841 2300 	strex	r3, r2, [r1]
 804af46:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 804af48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 804af4a:	2b00      	cmp	r3, #0
 804af4c:	d1e6      	bne.n	804af1c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 804af4e:	68fb      	ldr	r3, [r7, #12]
 804af50:	681b      	ldr	r3, [r3, #0]
 804af52:	3308      	adds	r3, #8
 804af54:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804af56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804af58:	e853 3f00 	ldrex	r3, [r3]
 804af5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 804af5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804af60:	f023 0301 	bic.w	r3, r3, #1
 804af64:	663b      	str	r3, [r7, #96]	; 0x60
 804af66:	68fb      	ldr	r3, [r7, #12]
 804af68:	681b      	ldr	r3, [r3, #0]
 804af6a:	3308      	adds	r3, #8
 804af6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 804af6e:	64ba      	str	r2, [r7, #72]	; 0x48
 804af70:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804af72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 804af74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 804af76:	e841 2300 	strex	r3, r2, [r1]
 804af7a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 804af7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 804af7e:	2b00      	cmp	r3, #0
 804af80:	d1e5      	bne.n	804af4e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 804af82:	68fb      	ldr	r3, [r7, #12]
 804af84:	2220      	movs	r2, #32
 804af86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 804af8a:	68fb      	ldr	r3, [r7, #12]
 804af8c:	2220      	movs	r2, #32
 804af8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 804af92:	68fb      	ldr	r3, [r7, #12]
 804af94:	2200      	movs	r2, #0
 804af96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 804af9a:	2303      	movs	r3, #3
 804af9c:	e069      	b.n	804b072 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 804af9e:	68fb      	ldr	r3, [r7, #12]
 804afa0:	681b      	ldr	r3, [r3, #0]
 804afa2:	681b      	ldr	r3, [r3, #0]
 804afa4:	f003 0304 	and.w	r3, r3, #4
 804afa8:	2b00      	cmp	r3, #0
 804afaa:	d051      	beq.n	804b050 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 804afac:	68fb      	ldr	r3, [r7, #12]
 804afae:	681b      	ldr	r3, [r3, #0]
 804afb0:	69db      	ldr	r3, [r3, #28]
 804afb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 804afb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 804afba:	d149      	bne.n	804b050 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 804afbc:	68fb      	ldr	r3, [r7, #12]
 804afbe:	681b      	ldr	r3, [r3, #0]
 804afc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 804afc4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 804afc6:	68fb      	ldr	r3, [r7, #12]
 804afc8:	681b      	ldr	r3, [r3, #0]
 804afca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804afcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804afce:	e853 3f00 	ldrex	r3, [r3]
 804afd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 804afd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804afd6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 804afda:	66fb      	str	r3, [r7, #108]	; 0x6c
 804afdc:	68fb      	ldr	r3, [r7, #12]
 804afde:	681b      	ldr	r3, [r3, #0]
 804afe0:	461a      	mov	r2, r3
 804afe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 804afe4:	637b      	str	r3, [r7, #52]	; 0x34
 804afe6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804afe8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 804afea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 804afec:	e841 2300 	strex	r3, r2, [r1]
 804aff0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 804aff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804aff4:	2b00      	cmp	r3, #0
 804aff6:	d1e6      	bne.n	804afc6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 804aff8:	68fb      	ldr	r3, [r7, #12]
 804affa:	681b      	ldr	r3, [r3, #0]
 804affc:	3308      	adds	r3, #8
 804affe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804b000:	697b      	ldr	r3, [r7, #20]
 804b002:	e853 3f00 	ldrex	r3, [r3]
 804b006:	613b      	str	r3, [r7, #16]
   return(result);
 804b008:	693b      	ldr	r3, [r7, #16]
 804b00a:	f023 0301 	bic.w	r3, r3, #1
 804b00e:	66bb      	str	r3, [r7, #104]	; 0x68
 804b010:	68fb      	ldr	r3, [r7, #12]
 804b012:	681b      	ldr	r3, [r3, #0]
 804b014:	3308      	adds	r3, #8
 804b016:	6eba      	ldr	r2, [r7, #104]	; 0x68
 804b018:	623a      	str	r2, [r7, #32]
 804b01a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804b01c:	69f9      	ldr	r1, [r7, #28]
 804b01e:	6a3a      	ldr	r2, [r7, #32]
 804b020:	e841 2300 	strex	r3, r2, [r1]
 804b024:	61bb      	str	r3, [r7, #24]
   return(result);
 804b026:	69bb      	ldr	r3, [r7, #24]
 804b028:	2b00      	cmp	r3, #0
 804b02a:	d1e5      	bne.n	804aff8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 804b02c:	68fb      	ldr	r3, [r7, #12]
 804b02e:	2220      	movs	r2, #32
 804b030:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 804b034:	68fb      	ldr	r3, [r7, #12]
 804b036:	2220      	movs	r2, #32
 804b038:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 804b03c:	68fb      	ldr	r3, [r7, #12]
 804b03e:	2220      	movs	r2, #32
 804b040:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 804b044:	68fb      	ldr	r3, [r7, #12]
 804b046:	2200      	movs	r2, #0
 804b048:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 804b04c:	2303      	movs	r3, #3
 804b04e:	e010      	b.n	804b072 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 804b050:	68fb      	ldr	r3, [r7, #12]
 804b052:	681b      	ldr	r3, [r3, #0]
 804b054:	69da      	ldr	r2, [r3, #28]
 804b056:	68bb      	ldr	r3, [r7, #8]
 804b058:	4013      	ands	r3, r2
 804b05a:	68ba      	ldr	r2, [r7, #8]
 804b05c:	429a      	cmp	r2, r3
 804b05e:	bf0c      	ite	eq
 804b060:	2301      	moveq	r3, #1
 804b062:	2300      	movne	r3, #0
 804b064:	b2db      	uxtb	r3, r3
 804b066:	461a      	mov	r2, r3
 804b068:	79fb      	ldrb	r3, [r7, #7]
 804b06a:	429a      	cmp	r2, r3
 804b06c:	f43f af46 	beq.w	804aefc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 804b070:	2300      	movs	r3, #0
}
 804b072:	4618      	mov	r0, r3
 804b074:	3770      	adds	r7, #112	; 0x70
 804b076:	46bd      	mov	sp, r7
 804b078:	bd80      	pop	{r7, pc}
	...

0804b07c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 804b07c:	b580      	push	{r7, lr}
 804b07e:	b096      	sub	sp, #88	; 0x58
 804b080:	af00      	add	r7, sp, #0
 804b082:	60f8      	str	r0, [r7, #12]
 804b084:	60b9      	str	r1, [r7, #8]
 804b086:	4613      	mov	r3, r2
 804b088:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 804b08a:	68fb      	ldr	r3, [r7, #12]
 804b08c:	68ba      	ldr	r2, [r7, #8]
 804b08e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 804b090:	68fb      	ldr	r3, [r7, #12]
 804b092:	88fa      	ldrh	r2, [r7, #6]
 804b094:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 804b098:	68fb      	ldr	r3, [r7, #12]
 804b09a:	2200      	movs	r2, #0
 804b09c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 804b0a0:	68fb      	ldr	r3, [r7, #12]
 804b0a2:	2222      	movs	r2, #34	; 0x22
 804b0a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 804b0a8:	68fb      	ldr	r3, [r7, #12]
 804b0aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804b0ac:	2b00      	cmp	r3, #0
 804b0ae:	d02c      	beq.n	804b10a <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 804b0b0:	68fb      	ldr	r3, [r7, #12]
 804b0b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804b0b4:	4a42      	ldr	r2, [pc, #264]	; (804b1c0 <UART_Start_Receive_DMA+0x144>)
 804b0b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 804b0b8:	68fb      	ldr	r3, [r7, #12]
 804b0ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804b0bc:	4a41      	ldr	r2, [pc, #260]	; (804b1c4 <UART_Start_Receive_DMA+0x148>)
 804b0be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 804b0c0:	68fb      	ldr	r3, [r7, #12]
 804b0c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804b0c4:	4a40      	ldr	r2, [pc, #256]	; (804b1c8 <UART_Start_Receive_DMA+0x14c>)
 804b0c6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 804b0c8:	68fb      	ldr	r3, [r7, #12]
 804b0ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804b0cc:	2200      	movs	r2, #0
 804b0ce:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 804b0d0:	68fb      	ldr	r3, [r7, #12]
 804b0d2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 804b0d4:	68fb      	ldr	r3, [r7, #12]
 804b0d6:	681b      	ldr	r3, [r3, #0]
 804b0d8:	3324      	adds	r3, #36	; 0x24
 804b0da:	4619      	mov	r1, r3
 804b0dc:	68fb      	ldr	r3, [r7, #12]
 804b0de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804b0e0:	461a      	mov	r2, r3
 804b0e2:	88fb      	ldrh	r3, [r7, #6]
 804b0e4:	f7f7 fc64 	bl	80429b0 <HAL_DMA_Start_IT>
 804b0e8:	4603      	mov	r3, r0
 804b0ea:	2b00      	cmp	r3, #0
 804b0ec:	d00d      	beq.n	804b10a <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 804b0ee:	68fb      	ldr	r3, [r7, #12]
 804b0f0:	2210      	movs	r2, #16
 804b0f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 804b0f6:	68fb      	ldr	r3, [r7, #12]
 804b0f8:	2200      	movs	r2, #0
 804b0fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 804b0fe:	68fb      	ldr	r3, [r7, #12]
 804b100:	2220      	movs	r2, #32
 804b102:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 804b106:	2301      	movs	r3, #1
 804b108:	e055      	b.n	804b1b6 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 804b10a:	68fb      	ldr	r3, [r7, #12]
 804b10c:	2200      	movs	r2, #0
 804b10e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 804b112:	68fb      	ldr	r3, [r7, #12]
 804b114:	691b      	ldr	r3, [r3, #16]
 804b116:	2b00      	cmp	r3, #0
 804b118:	d018      	beq.n	804b14c <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 804b11a:	68fb      	ldr	r3, [r7, #12]
 804b11c:	681b      	ldr	r3, [r3, #0]
 804b11e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804b120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804b122:	e853 3f00 	ldrex	r3, [r3]
 804b126:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 804b128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804b12a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 804b12e:	657b      	str	r3, [r7, #84]	; 0x54
 804b130:	68fb      	ldr	r3, [r7, #12]
 804b132:	681b      	ldr	r3, [r3, #0]
 804b134:	461a      	mov	r2, r3
 804b136:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 804b138:	64bb      	str	r3, [r7, #72]	; 0x48
 804b13a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804b13c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 804b13e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 804b140:	e841 2300 	strex	r3, r2, [r1]
 804b144:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 804b146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 804b148:	2b00      	cmp	r3, #0
 804b14a:	d1e6      	bne.n	804b11a <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 804b14c:	68fb      	ldr	r3, [r7, #12]
 804b14e:	681b      	ldr	r3, [r3, #0]
 804b150:	3308      	adds	r3, #8
 804b152:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804b154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804b156:	e853 3f00 	ldrex	r3, [r3]
 804b15a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 804b15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804b15e:	f043 0301 	orr.w	r3, r3, #1
 804b162:	653b      	str	r3, [r7, #80]	; 0x50
 804b164:	68fb      	ldr	r3, [r7, #12]
 804b166:	681b      	ldr	r3, [r3, #0]
 804b168:	3308      	adds	r3, #8
 804b16a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 804b16c:	637a      	str	r2, [r7, #52]	; 0x34
 804b16e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804b170:	6b39      	ldr	r1, [r7, #48]	; 0x30
 804b172:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 804b174:	e841 2300 	strex	r3, r2, [r1]
 804b178:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 804b17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804b17c:	2b00      	cmp	r3, #0
 804b17e:	d1e5      	bne.n	804b14c <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 804b180:	68fb      	ldr	r3, [r7, #12]
 804b182:	681b      	ldr	r3, [r3, #0]
 804b184:	3308      	adds	r3, #8
 804b186:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804b188:	697b      	ldr	r3, [r7, #20]
 804b18a:	e853 3f00 	ldrex	r3, [r3]
 804b18e:	613b      	str	r3, [r7, #16]
   return(result);
 804b190:	693b      	ldr	r3, [r7, #16]
 804b192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804b196:	64fb      	str	r3, [r7, #76]	; 0x4c
 804b198:	68fb      	ldr	r3, [r7, #12]
 804b19a:	681b      	ldr	r3, [r3, #0]
 804b19c:	3308      	adds	r3, #8
 804b19e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 804b1a0:	623a      	str	r2, [r7, #32]
 804b1a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804b1a4:	69f9      	ldr	r1, [r7, #28]
 804b1a6:	6a3a      	ldr	r2, [r7, #32]
 804b1a8:	e841 2300 	strex	r3, r2, [r1]
 804b1ac:	61bb      	str	r3, [r7, #24]
   return(result);
 804b1ae:	69bb      	ldr	r3, [r7, #24]
 804b1b0:	2b00      	cmp	r3, #0
 804b1b2:	d1e5      	bne.n	804b180 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 804b1b4:	2300      	movs	r3, #0
}
 804b1b6:	4618      	mov	r0, r3
 804b1b8:	3758      	adds	r7, #88	; 0x58
 804b1ba:	46bd      	mov	sp, r7
 804b1bc:	bd80      	pop	{r7, pc}
 804b1be:	bf00      	nop
 804b1c0:	0804b3cf 	.word	0x0804b3cf
 804b1c4:	0804b4f1 	.word	0x0804b4f1
 804b1c8:	0804b529 	.word	0x0804b529

0804b1cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 804b1cc:	b480      	push	{r7}
 804b1ce:	b08f      	sub	sp, #60	; 0x3c
 804b1d0:	af00      	add	r7, sp, #0
 804b1d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 804b1d4:	687b      	ldr	r3, [r7, #4]
 804b1d6:	681b      	ldr	r3, [r3, #0]
 804b1d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804b1da:	6a3b      	ldr	r3, [r7, #32]
 804b1dc:	e853 3f00 	ldrex	r3, [r3]
 804b1e0:	61fb      	str	r3, [r7, #28]
   return(result);
 804b1e2:	69fb      	ldr	r3, [r7, #28]
 804b1e4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 804b1e8:	637b      	str	r3, [r7, #52]	; 0x34
 804b1ea:	687b      	ldr	r3, [r7, #4]
 804b1ec:	681b      	ldr	r3, [r3, #0]
 804b1ee:	461a      	mov	r2, r3
 804b1f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 804b1f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 804b1f4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804b1f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 804b1f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 804b1fa:	e841 2300 	strex	r3, r2, [r1]
 804b1fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 804b200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804b202:	2b00      	cmp	r3, #0
 804b204:	d1e6      	bne.n	804b1d4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 804b206:	687b      	ldr	r3, [r7, #4]
 804b208:	681b      	ldr	r3, [r3, #0]
 804b20a:	3308      	adds	r3, #8
 804b20c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804b20e:	68fb      	ldr	r3, [r7, #12]
 804b210:	e853 3f00 	ldrex	r3, [r3]
 804b214:	60bb      	str	r3, [r7, #8]
   return(result);
 804b216:	68bb      	ldr	r3, [r7, #8]
 804b218:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 804b21c:	633b      	str	r3, [r7, #48]	; 0x30
 804b21e:	687b      	ldr	r3, [r7, #4]
 804b220:	681b      	ldr	r3, [r3, #0]
 804b222:	3308      	adds	r3, #8
 804b224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 804b226:	61ba      	str	r2, [r7, #24]
 804b228:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804b22a:	6979      	ldr	r1, [r7, #20]
 804b22c:	69ba      	ldr	r2, [r7, #24]
 804b22e:	e841 2300 	strex	r3, r2, [r1]
 804b232:	613b      	str	r3, [r7, #16]
   return(result);
 804b234:	693b      	ldr	r3, [r7, #16]
 804b236:	2b00      	cmp	r3, #0
 804b238:	d1e5      	bne.n	804b206 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 804b23a:	687b      	ldr	r3, [r7, #4]
 804b23c:	2220      	movs	r2, #32
 804b23e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 804b242:	bf00      	nop
 804b244:	373c      	adds	r7, #60	; 0x3c
 804b246:	46bd      	mov	sp, r7
 804b248:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b24c:	4770      	bx	lr
	...

0804b250 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 804b250:	b480      	push	{r7}
 804b252:	b095      	sub	sp, #84	; 0x54
 804b254:	af00      	add	r7, sp, #0
 804b256:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 804b258:	687b      	ldr	r3, [r7, #4]
 804b25a:	681b      	ldr	r3, [r3, #0]
 804b25c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804b25e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 804b260:	e853 3f00 	ldrex	r3, [r3]
 804b264:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 804b266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804b268:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 804b26c:	64fb      	str	r3, [r7, #76]	; 0x4c
 804b26e:	687b      	ldr	r3, [r7, #4]
 804b270:	681b      	ldr	r3, [r3, #0]
 804b272:	461a      	mov	r2, r3
 804b274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 804b276:	643b      	str	r3, [r7, #64]	; 0x40
 804b278:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804b27a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 804b27c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 804b27e:	e841 2300 	strex	r3, r2, [r1]
 804b282:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 804b284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804b286:	2b00      	cmp	r3, #0
 804b288:	d1e6      	bne.n	804b258 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 804b28a:	687b      	ldr	r3, [r7, #4]
 804b28c:	681b      	ldr	r3, [r3, #0]
 804b28e:	3308      	adds	r3, #8
 804b290:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804b292:	6a3b      	ldr	r3, [r7, #32]
 804b294:	e853 3f00 	ldrex	r3, [r3]
 804b298:	61fb      	str	r3, [r7, #28]
   return(result);
 804b29a:	69fa      	ldr	r2, [r7, #28]
 804b29c:	4b1e      	ldr	r3, [pc, #120]	; (804b318 <UART_EndRxTransfer+0xc8>)
 804b29e:	4013      	ands	r3, r2
 804b2a0:	64bb      	str	r3, [r7, #72]	; 0x48
 804b2a2:	687b      	ldr	r3, [r7, #4]
 804b2a4:	681b      	ldr	r3, [r3, #0]
 804b2a6:	3308      	adds	r3, #8
 804b2a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 804b2aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 804b2ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804b2ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 804b2b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 804b2b2:	e841 2300 	strex	r3, r2, [r1]
 804b2b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 804b2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804b2ba:	2b00      	cmp	r3, #0
 804b2bc:	d1e5      	bne.n	804b28a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 804b2be:	687b      	ldr	r3, [r7, #4]
 804b2c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804b2c2:	2b01      	cmp	r3, #1
 804b2c4:	d118      	bne.n	804b2f8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 804b2c6:	687b      	ldr	r3, [r7, #4]
 804b2c8:	681b      	ldr	r3, [r3, #0]
 804b2ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804b2cc:	68fb      	ldr	r3, [r7, #12]
 804b2ce:	e853 3f00 	ldrex	r3, [r3]
 804b2d2:	60bb      	str	r3, [r7, #8]
   return(result);
 804b2d4:	68bb      	ldr	r3, [r7, #8]
 804b2d6:	f023 0310 	bic.w	r3, r3, #16
 804b2da:	647b      	str	r3, [r7, #68]	; 0x44
 804b2dc:	687b      	ldr	r3, [r7, #4]
 804b2de:	681b      	ldr	r3, [r3, #0]
 804b2e0:	461a      	mov	r2, r3
 804b2e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 804b2e4:	61bb      	str	r3, [r7, #24]
 804b2e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804b2e8:	6979      	ldr	r1, [r7, #20]
 804b2ea:	69ba      	ldr	r2, [r7, #24]
 804b2ec:	e841 2300 	strex	r3, r2, [r1]
 804b2f0:	613b      	str	r3, [r7, #16]
   return(result);
 804b2f2:	693b      	ldr	r3, [r7, #16]
 804b2f4:	2b00      	cmp	r3, #0
 804b2f6:	d1e6      	bne.n	804b2c6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 804b2f8:	687b      	ldr	r3, [r7, #4]
 804b2fa:	2220      	movs	r2, #32
 804b2fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 804b300:	687b      	ldr	r3, [r7, #4]
 804b302:	2200      	movs	r2, #0
 804b304:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 804b306:	687b      	ldr	r3, [r7, #4]
 804b308:	2200      	movs	r2, #0
 804b30a:	671a      	str	r2, [r3, #112]	; 0x70
}
 804b30c:	bf00      	nop
 804b30e:	3754      	adds	r7, #84	; 0x54
 804b310:	46bd      	mov	sp, r7
 804b312:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b316:	4770      	bx	lr
 804b318:	effffffe 	.word	0xeffffffe

0804b31c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 804b31c:	b580      	push	{r7, lr}
 804b31e:	b090      	sub	sp, #64	; 0x40
 804b320:	af00      	add	r7, sp, #0
 804b322:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 804b324:	687b      	ldr	r3, [r7, #4]
 804b326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804b328:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 804b32a:	687b      	ldr	r3, [r7, #4]
 804b32c:	69db      	ldr	r3, [r3, #28]
 804b32e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 804b332:	d037      	beq.n	804b3a4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 804b334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804b336:	2200      	movs	r2, #0
 804b338:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 804b33c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804b33e:	681b      	ldr	r3, [r3, #0]
 804b340:	3308      	adds	r3, #8
 804b342:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804b344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804b346:	e853 3f00 	ldrex	r3, [r3]
 804b34a:	623b      	str	r3, [r7, #32]
   return(result);
 804b34c:	6a3b      	ldr	r3, [r7, #32]
 804b34e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 804b352:	63bb      	str	r3, [r7, #56]	; 0x38
 804b354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804b356:	681b      	ldr	r3, [r3, #0]
 804b358:	3308      	adds	r3, #8
 804b35a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 804b35c:	633a      	str	r2, [r7, #48]	; 0x30
 804b35e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804b360:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 804b362:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 804b364:	e841 2300 	strex	r3, r2, [r1]
 804b368:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 804b36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804b36c:	2b00      	cmp	r3, #0
 804b36e:	d1e5      	bne.n	804b33c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 804b370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804b372:	681b      	ldr	r3, [r3, #0]
 804b374:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804b376:	693b      	ldr	r3, [r7, #16]
 804b378:	e853 3f00 	ldrex	r3, [r3]
 804b37c:	60fb      	str	r3, [r7, #12]
   return(result);
 804b37e:	68fb      	ldr	r3, [r7, #12]
 804b380:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804b384:	637b      	str	r3, [r7, #52]	; 0x34
 804b386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804b388:	681b      	ldr	r3, [r3, #0]
 804b38a:	461a      	mov	r2, r3
 804b38c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 804b38e:	61fb      	str	r3, [r7, #28]
 804b390:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804b392:	69b9      	ldr	r1, [r7, #24]
 804b394:	69fa      	ldr	r2, [r7, #28]
 804b396:	e841 2300 	strex	r3, r2, [r1]
 804b39a:	617b      	str	r3, [r7, #20]
   return(result);
 804b39c:	697b      	ldr	r3, [r7, #20]
 804b39e:	2b00      	cmp	r3, #0
 804b3a0:	d1e6      	bne.n	804b370 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 804b3a2:	e002      	b.n	804b3aa <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 804b3a4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 804b3a6:	f7f5 ff4f 	bl	8041248 <HAL_UART_TxCpltCallback>
}
 804b3aa:	bf00      	nop
 804b3ac:	3740      	adds	r7, #64	; 0x40
 804b3ae:	46bd      	mov	sp, r7
 804b3b0:	bd80      	pop	{r7, pc}

0804b3b2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 804b3b2:	b580      	push	{r7, lr}
 804b3b4:	b084      	sub	sp, #16
 804b3b6:	af00      	add	r7, sp, #0
 804b3b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 804b3ba:	687b      	ldr	r3, [r7, #4]
 804b3bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804b3be:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 804b3c0:	68f8      	ldr	r0, [r7, #12]
 804b3c2:	f7fe fe11 	bl	8049fe8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 804b3c6:	bf00      	nop
 804b3c8:	3710      	adds	r7, #16
 804b3ca:	46bd      	mov	sp, r7
 804b3cc:	bd80      	pop	{r7, pc}

0804b3ce <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 804b3ce:	b580      	push	{r7, lr}
 804b3d0:	b09c      	sub	sp, #112	; 0x70
 804b3d2:	af00      	add	r7, sp, #0
 804b3d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 804b3d6:	687b      	ldr	r3, [r7, #4]
 804b3d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804b3da:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 804b3dc:	687b      	ldr	r3, [r7, #4]
 804b3de:	69db      	ldr	r3, [r3, #28]
 804b3e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 804b3e4:	d071      	beq.n	804b4ca <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 804b3e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 804b3e8:	2200      	movs	r2, #0
 804b3ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 804b3ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 804b3f0:	681b      	ldr	r3, [r3, #0]
 804b3f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804b3f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 804b3f6:	e853 3f00 	ldrex	r3, [r3]
 804b3fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 804b3fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 804b3fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 804b402:	66bb      	str	r3, [r7, #104]	; 0x68
 804b404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 804b406:	681b      	ldr	r3, [r3, #0]
 804b408:	461a      	mov	r2, r3
 804b40a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 804b40c:	65bb      	str	r3, [r7, #88]	; 0x58
 804b40e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804b410:	6d79      	ldr	r1, [r7, #84]	; 0x54
 804b412:	6dba      	ldr	r2, [r7, #88]	; 0x58
 804b414:	e841 2300 	strex	r3, r2, [r1]
 804b418:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 804b41a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 804b41c:	2b00      	cmp	r3, #0
 804b41e:	d1e6      	bne.n	804b3ee <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 804b420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 804b422:	681b      	ldr	r3, [r3, #0]
 804b424:	3308      	adds	r3, #8
 804b426:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804b428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804b42a:	e853 3f00 	ldrex	r3, [r3]
 804b42e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 804b430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 804b432:	f023 0301 	bic.w	r3, r3, #1
 804b436:	667b      	str	r3, [r7, #100]	; 0x64
 804b438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 804b43a:	681b      	ldr	r3, [r3, #0]
 804b43c:	3308      	adds	r3, #8
 804b43e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 804b440:	647a      	str	r2, [r7, #68]	; 0x44
 804b442:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804b444:	6c39      	ldr	r1, [r7, #64]	; 0x40
 804b446:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 804b448:	e841 2300 	strex	r3, r2, [r1]
 804b44c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 804b44e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804b450:	2b00      	cmp	r3, #0
 804b452:	d1e5      	bne.n	804b420 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 804b454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 804b456:	681b      	ldr	r3, [r3, #0]
 804b458:	3308      	adds	r3, #8
 804b45a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804b45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804b45e:	e853 3f00 	ldrex	r3, [r3]
 804b462:	623b      	str	r3, [r7, #32]
   return(result);
 804b464:	6a3b      	ldr	r3, [r7, #32]
 804b466:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 804b46a:	663b      	str	r3, [r7, #96]	; 0x60
 804b46c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 804b46e:	681b      	ldr	r3, [r3, #0]
 804b470:	3308      	adds	r3, #8
 804b472:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 804b474:	633a      	str	r2, [r7, #48]	; 0x30
 804b476:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804b478:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 804b47a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 804b47c:	e841 2300 	strex	r3, r2, [r1]
 804b480:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 804b482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804b484:	2b00      	cmp	r3, #0
 804b486:	d1e5      	bne.n	804b454 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 804b488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 804b48a:	2220      	movs	r2, #32
 804b48c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 804b490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 804b492:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804b494:	2b01      	cmp	r3, #1
 804b496:	d118      	bne.n	804b4ca <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 804b498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 804b49a:	681b      	ldr	r3, [r3, #0]
 804b49c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804b49e:	693b      	ldr	r3, [r7, #16]
 804b4a0:	e853 3f00 	ldrex	r3, [r3]
 804b4a4:	60fb      	str	r3, [r7, #12]
   return(result);
 804b4a6:	68fb      	ldr	r3, [r7, #12]
 804b4a8:	f023 0310 	bic.w	r3, r3, #16
 804b4ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 804b4ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 804b4b0:	681b      	ldr	r3, [r3, #0]
 804b4b2:	461a      	mov	r2, r3
 804b4b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 804b4b6:	61fb      	str	r3, [r7, #28]
 804b4b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804b4ba:	69b9      	ldr	r1, [r7, #24]
 804b4bc:	69fa      	ldr	r2, [r7, #28]
 804b4be:	e841 2300 	strex	r3, r2, [r1]
 804b4c2:	617b      	str	r3, [r7, #20]
   return(result);
 804b4c4:	697b      	ldr	r3, [r7, #20]
 804b4c6:	2b00      	cmp	r3, #0
 804b4c8:	d1e6      	bne.n	804b498 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 804b4ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 804b4cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804b4ce:	2b01      	cmp	r3, #1
 804b4d0:	d107      	bne.n	804b4e2 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 804b4d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 804b4d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 804b4d8:	4619      	mov	r1, r3
 804b4da:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 804b4dc:	f7f5 feca 	bl	8041274 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 804b4e0:	e002      	b.n	804b4e8 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 804b4e2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 804b4e4:	f7fe fd8a 	bl	8049ffc <HAL_UART_RxCpltCallback>
}
 804b4e8:	bf00      	nop
 804b4ea:	3770      	adds	r7, #112	; 0x70
 804b4ec:	46bd      	mov	sp, r7
 804b4ee:	bd80      	pop	{r7, pc}

0804b4f0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 804b4f0:	b580      	push	{r7, lr}
 804b4f2:	b084      	sub	sp, #16
 804b4f4:	af00      	add	r7, sp, #0
 804b4f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 804b4f8:	687b      	ldr	r3, [r7, #4]
 804b4fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804b4fc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 804b4fe:	68fb      	ldr	r3, [r7, #12]
 804b500:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804b502:	2b01      	cmp	r3, #1
 804b504:	d109      	bne.n	804b51a <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 804b506:	68fb      	ldr	r3, [r7, #12]
 804b508:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 804b50c:	085b      	lsrs	r3, r3, #1
 804b50e:	b29b      	uxth	r3, r3
 804b510:	4619      	mov	r1, r3
 804b512:	68f8      	ldr	r0, [r7, #12]
 804b514:	f7f5 feae 	bl	8041274 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 804b518:	e002      	b.n	804b520 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 804b51a:	68f8      	ldr	r0, [r7, #12]
 804b51c:	f7fe fd78 	bl	804a010 <HAL_UART_RxHalfCpltCallback>
}
 804b520:	bf00      	nop
 804b522:	3710      	adds	r7, #16
 804b524:	46bd      	mov	sp, r7
 804b526:	bd80      	pop	{r7, pc}

0804b528 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 804b528:	b580      	push	{r7, lr}
 804b52a:	b086      	sub	sp, #24
 804b52c:	af00      	add	r7, sp, #0
 804b52e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 804b530:	687b      	ldr	r3, [r7, #4]
 804b532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804b534:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 804b536:	697b      	ldr	r3, [r7, #20]
 804b538:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 804b53c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 804b53e:	697b      	ldr	r3, [r7, #20]
 804b540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804b544:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 804b546:	697b      	ldr	r3, [r7, #20]
 804b548:	681b      	ldr	r3, [r3, #0]
 804b54a:	689b      	ldr	r3, [r3, #8]
 804b54c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804b550:	2b80      	cmp	r3, #128	; 0x80
 804b552:	d109      	bne.n	804b568 <UART_DMAError+0x40>
 804b554:	693b      	ldr	r3, [r7, #16]
 804b556:	2b21      	cmp	r3, #33	; 0x21
 804b558:	d106      	bne.n	804b568 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 804b55a:	697b      	ldr	r3, [r7, #20]
 804b55c:	2200      	movs	r2, #0
 804b55e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 804b562:	6978      	ldr	r0, [r7, #20]
 804b564:	f7ff fe32 	bl	804b1cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 804b568:	697b      	ldr	r3, [r7, #20]
 804b56a:	681b      	ldr	r3, [r3, #0]
 804b56c:	689b      	ldr	r3, [r3, #8]
 804b56e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804b572:	2b40      	cmp	r3, #64	; 0x40
 804b574:	d109      	bne.n	804b58a <UART_DMAError+0x62>
 804b576:	68fb      	ldr	r3, [r7, #12]
 804b578:	2b22      	cmp	r3, #34	; 0x22
 804b57a:	d106      	bne.n	804b58a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 804b57c:	697b      	ldr	r3, [r7, #20]
 804b57e:	2200      	movs	r2, #0
 804b580:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 804b584:	6978      	ldr	r0, [r7, #20]
 804b586:	f7ff fe63 	bl	804b250 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 804b58a:	697b      	ldr	r3, [r7, #20]
 804b58c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804b590:	f043 0210 	orr.w	r2, r3, #16
 804b594:	697b      	ldr	r3, [r7, #20]
 804b596:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 804b59a:	6978      	ldr	r0, [r7, #20]
 804b59c:	f7fe fd42 	bl	804a024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 804b5a0:	bf00      	nop
 804b5a2:	3718      	adds	r7, #24
 804b5a4:	46bd      	mov	sp, r7
 804b5a6:	bd80      	pop	{r7, pc}

0804b5a8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 804b5a8:	b580      	push	{r7, lr}
 804b5aa:	b084      	sub	sp, #16
 804b5ac:	af00      	add	r7, sp, #0
 804b5ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 804b5b0:	687b      	ldr	r3, [r7, #4]
 804b5b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804b5b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 804b5b6:	68fb      	ldr	r3, [r7, #12]
 804b5b8:	2200      	movs	r2, #0
 804b5ba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 804b5be:	68fb      	ldr	r3, [r7, #12]
 804b5c0:	2200      	movs	r2, #0
 804b5c2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 804b5c6:	68f8      	ldr	r0, [r7, #12]
 804b5c8:	f7fe fd2c 	bl	804a024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 804b5cc:	bf00      	nop
 804b5ce:	3710      	adds	r7, #16
 804b5d0:	46bd      	mov	sp, r7
 804b5d2:	bd80      	pop	{r7, pc}

0804b5d4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 804b5d4:	b580      	push	{r7, lr}
 804b5d6:	b088      	sub	sp, #32
 804b5d8:	af00      	add	r7, sp, #0
 804b5da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 804b5dc:	687b      	ldr	r3, [r7, #4]
 804b5de:	681b      	ldr	r3, [r3, #0]
 804b5e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804b5e2:	68fb      	ldr	r3, [r7, #12]
 804b5e4:	e853 3f00 	ldrex	r3, [r3]
 804b5e8:	60bb      	str	r3, [r7, #8]
   return(result);
 804b5ea:	68bb      	ldr	r3, [r7, #8]
 804b5ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 804b5f0:	61fb      	str	r3, [r7, #28]
 804b5f2:	687b      	ldr	r3, [r7, #4]
 804b5f4:	681b      	ldr	r3, [r3, #0]
 804b5f6:	461a      	mov	r2, r3
 804b5f8:	69fb      	ldr	r3, [r7, #28]
 804b5fa:	61bb      	str	r3, [r7, #24]
 804b5fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804b5fe:	6979      	ldr	r1, [r7, #20]
 804b600:	69ba      	ldr	r2, [r7, #24]
 804b602:	e841 2300 	strex	r3, r2, [r1]
 804b606:	613b      	str	r3, [r7, #16]
   return(result);
 804b608:	693b      	ldr	r3, [r7, #16]
 804b60a:	2b00      	cmp	r3, #0
 804b60c:	d1e6      	bne.n	804b5dc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 804b60e:	687b      	ldr	r3, [r7, #4]
 804b610:	2220      	movs	r2, #32
 804b612:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 804b616:	687b      	ldr	r3, [r7, #4]
 804b618:	2200      	movs	r2, #0
 804b61a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 804b61c:	6878      	ldr	r0, [r7, #4]
 804b61e:	f7f5 fe13 	bl	8041248 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 804b622:	bf00      	nop
 804b624:	3720      	adds	r7, #32
 804b626:	46bd      	mov	sp, r7
 804b628:	bd80      	pop	{r7, pc}

0804b62a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 804b62a:	b480      	push	{r7}
 804b62c:	b083      	sub	sp, #12
 804b62e:	af00      	add	r7, sp, #0
 804b630:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 804b632:	bf00      	nop
 804b634:	370c      	adds	r7, #12
 804b636:	46bd      	mov	sp, r7
 804b638:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b63c:	4770      	bx	lr

0804b63e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 804b63e:	b480      	push	{r7}
 804b640:	b083      	sub	sp, #12
 804b642:	af00      	add	r7, sp, #0
 804b644:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 804b646:	bf00      	nop
 804b648:	370c      	adds	r7, #12
 804b64a:	46bd      	mov	sp, r7
 804b64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b650:	4770      	bx	lr

0804b652 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 804b652:	b480      	push	{r7}
 804b654:	b083      	sub	sp, #12
 804b656:	af00      	add	r7, sp, #0
 804b658:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 804b65a:	bf00      	nop
 804b65c:	370c      	adds	r7, #12
 804b65e:	46bd      	mov	sp, r7
 804b660:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b664:	4770      	bx	lr

0804b666 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 804b666:	b480      	push	{r7}
 804b668:	b085      	sub	sp, #20
 804b66a:	af00      	add	r7, sp, #0
 804b66c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 804b66e:	687b      	ldr	r3, [r7, #4]
 804b670:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 804b674:	2b01      	cmp	r3, #1
 804b676:	d101      	bne.n	804b67c <HAL_UARTEx_DisableFifoMode+0x16>
 804b678:	2302      	movs	r3, #2
 804b67a:	e027      	b.n	804b6cc <HAL_UARTEx_DisableFifoMode+0x66>
 804b67c:	687b      	ldr	r3, [r7, #4]
 804b67e:	2201      	movs	r2, #1
 804b680:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 804b684:	687b      	ldr	r3, [r7, #4]
 804b686:	2224      	movs	r2, #36	; 0x24
 804b688:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 804b68c:	687b      	ldr	r3, [r7, #4]
 804b68e:	681b      	ldr	r3, [r3, #0]
 804b690:	681b      	ldr	r3, [r3, #0]
 804b692:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 804b694:	687b      	ldr	r3, [r7, #4]
 804b696:	681b      	ldr	r3, [r3, #0]
 804b698:	681a      	ldr	r2, [r3, #0]
 804b69a:	687b      	ldr	r3, [r7, #4]
 804b69c:	681b      	ldr	r3, [r3, #0]
 804b69e:	f022 0201 	bic.w	r2, r2, #1
 804b6a2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 804b6a4:	68fb      	ldr	r3, [r7, #12]
 804b6a6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 804b6aa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 804b6ac:	687b      	ldr	r3, [r7, #4]
 804b6ae:	2200      	movs	r2, #0
 804b6b0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 804b6b2:	687b      	ldr	r3, [r7, #4]
 804b6b4:	681b      	ldr	r3, [r3, #0]
 804b6b6:	68fa      	ldr	r2, [r7, #12]
 804b6b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 804b6ba:	687b      	ldr	r3, [r7, #4]
 804b6bc:	2220      	movs	r2, #32
 804b6be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 804b6c2:	687b      	ldr	r3, [r7, #4]
 804b6c4:	2200      	movs	r2, #0
 804b6c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 804b6ca:	2300      	movs	r3, #0
}
 804b6cc:	4618      	mov	r0, r3
 804b6ce:	3714      	adds	r7, #20
 804b6d0:	46bd      	mov	sp, r7
 804b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b6d6:	4770      	bx	lr

0804b6d8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 804b6d8:	b580      	push	{r7, lr}
 804b6da:	b084      	sub	sp, #16
 804b6dc:	af00      	add	r7, sp, #0
 804b6de:	6078      	str	r0, [r7, #4]
 804b6e0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 804b6e2:	687b      	ldr	r3, [r7, #4]
 804b6e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 804b6e8:	2b01      	cmp	r3, #1
 804b6ea:	d101      	bne.n	804b6f0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 804b6ec:	2302      	movs	r3, #2
 804b6ee:	e02d      	b.n	804b74c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 804b6f0:	687b      	ldr	r3, [r7, #4]
 804b6f2:	2201      	movs	r2, #1
 804b6f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 804b6f8:	687b      	ldr	r3, [r7, #4]
 804b6fa:	2224      	movs	r2, #36	; 0x24
 804b6fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 804b700:	687b      	ldr	r3, [r7, #4]
 804b702:	681b      	ldr	r3, [r3, #0]
 804b704:	681b      	ldr	r3, [r3, #0]
 804b706:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 804b708:	687b      	ldr	r3, [r7, #4]
 804b70a:	681b      	ldr	r3, [r3, #0]
 804b70c:	681a      	ldr	r2, [r3, #0]
 804b70e:	687b      	ldr	r3, [r7, #4]
 804b710:	681b      	ldr	r3, [r3, #0]
 804b712:	f022 0201 	bic.w	r2, r2, #1
 804b716:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 804b718:	687b      	ldr	r3, [r7, #4]
 804b71a:	681b      	ldr	r3, [r3, #0]
 804b71c:	689b      	ldr	r3, [r3, #8]
 804b71e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 804b722:	687b      	ldr	r3, [r7, #4]
 804b724:	681b      	ldr	r3, [r3, #0]
 804b726:	683a      	ldr	r2, [r7, #0]
 804b728:	430a      	orrs	r2, r1
 804b72a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 804b72c:	6878      	ldr	r0, [r7, #4]
 804b72e:	f000 f8ab 	bl	804b888 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 804b732:	687b      	ldr	r3, [r7, #4]
 804b734:	681b      	ldr	r3, [r3, #0]
 804b736:	68fa      	ldr	r2, [r7, #12]
 804b738:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 804b73a:	687b      	ldr	r3, [r7, #4]
 804b73c:	2220      	movs	r2, #32
 804b73e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 804b742:	687b      	ldr	r3, [r7, #4]
 804b744:	2200      	movs	r2, #0
 804b746:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 804b74a:	2300      	movs	r3, #0
}
 804b74c:	4618      	mov	r0, r3
 804b74e:	3710      	adds	r7, #16
 804b750:	46bd      	mov	sp, r7
 804b752:	bd80      	pop	{r7, pc}

0804b754 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 804b754:	b580      	push	{r7, lr}
 804b756:	b084      	sub	sp, #16
 804b758:	af00      	add	r7, sp, #0
 804b75a:	6078      	str	r0, [r7, #4]
 804b75c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 804b75e:	687b      	ldr	r3, [r7, #4]
 804b760:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 804b764:	2b01      	cmp	r3, #1
 804b766:	d101      	bne.n	804b76c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 804b768:	2302      	movs	r3, #2
 804b76a:	e02d      	b.n	804b7c8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 804b76c:	687b      	ldr	r3, [r7, #4]
 804b76e:	2201      	movs	r2, #1
 804b770:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 804b774:	687b      	ldr	r3, [r7, #4]
 804b776:	2224      	movs	r2, #36	; 0x24
 804b778:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 804b77c:	687b      	ldr	r3, [r7, #4]
 804b77e:	681b      	ldr	r3, [r3, #0]
 804b780:	681b      	ldr	r3, [r3, #0]
 804b782:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 804b784:	687b      	ldr	r3, [r7, #4]
 804b786:	681b      	ldr	r3, [r3, #0]
 804b788:	681a      	ldr	r2, [r3, #0]
 804b78a:	687b      	ldr	r3, [r7, #4]
 804b78c:	681b      	ldr	r3, [r3, #0]
 804b78e:	f022 0201 	bic.w	r2, r2, #1
 804b792:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 804b794:	687b      	ldr	r3, [r7, #4]
 804b796:	681b      	ldr	r3, [r3, #0]
 804b798:	689b      	ldr	r3, [r3, #8]
 804b79a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 804b79e:	687b      	ldr	r3, [r7, #4]
 804b7a0:	681b      	ldr	r3, [r3, #0]
 804b7a2:	683a      	ldr	r2, [r7, #0]
 804b7a4:	430a      	orrs	r2, r1
 804b7a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 804b7a8:	6878      	ldr	r0, [r7, #4]
 804b7aa:	f000 f86d 	bl	804b888 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 804b7ae:	687b      	ldr	r3, [r7, #4]
 804b7b0:	681b      	ldr	r3, [r3, #0]
 804b7b2:	68fa      	ldr	r2, [r7, #12]
 804b7b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 804b7b6:	687b      	ldr	r3, [r7, #4]
 804b7b8:	2220      	movs	r2, #32
 804b7ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 804b7be:	687b      	ldr	r3, [r7, #4]
 804b7c0:	2200      	movs	r2, #0
 804b7c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 804b7c6:	2300      	movs	r3, #0
}
 804b7c8:	4618      	mov	r0, r3
 804b7ca:	3710      	adds	r7, #16
 804b7cc:	46bd      	mov	sp, r7
 804b7ce:	bd80      	pop	{r7, pc}

0804b7d0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 804b7d0:	b580      	push	{r7, lr}
 804b7d2:	b08c      	sub	sp, #48	; 0x30
 804b7d4:	af00      	add	r7, sp, #0
 804b7d6:	60f8      	str	r0, [r7, #12]
 804b7d8:	60b9      	str	r1, [r7, #8]
 804b7da:	4613      	mov	r3, r2
 804b7dc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 804b7de:	68fb      	ldr	r3, [r7, #12]
 804b7e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804b7e4:	2b20      	cmp	r3, #32
 804b7e6:	d14a      	bne.n	804b87e <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 804b7e8:	68bb      	ldr	r3, [r7, #8]
 804b7ea:	2b00      	cmp	r3, #0
 804b7ec:	d002      	beq.n	804b7f4 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 804b7ee:	88fb      	ldrh	r3, [r7, #6]
 804b7f0:	2b00      	cmp	r3, #0
 804b7f2:	d101      	bne.n	804b7f8 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 804b7f4:	2301      	movs	r3, #1
 804b7f6:	e043      	b.n	804b880 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 804b7f8:	68fb      	ldr	r3, [r7, #12]
 804b7fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 804b7fe:	2b01      	cmp	r3, #1
 804b800:	d101      	bne.n	804b806 <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 804b802:	2302      	movs	r3, #2
 804b804:	e03c      	b.n	804b880 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 804b806:	68fb      	ldr	r3, [r7, #12]
 804b808:	2201      	movs	r2, #1
 804b80a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 804b80e:	68fb      	ldr	r3, [r7, #12]
 804b810:	2201      	movs	r2, #1
 804b812:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 804b814:	88fb      	ldrh	r3, [r7, #6]
 804b816:	461a      	mov	r2, r3
 804b818:	68b9      	ldr	r1, [r7, #8]
 804b81a:	68f8      	ldr	r0, [r7, #12]
 804b81c:	f7ff fc2e 	bl	804b07c <UART_Start_Receive_DMA>
 804b820:	4603      	mov	r3, r0
 804b822:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 804b826:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 804b82a:	2b00      	cmp	r3, #0
 804b82c:	d124      	bne.n	804b878 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 804b82e:	68fb      	ldr	r3, [r7, #12]
 804b830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804b832:	2b01      	cmp	r3, #1
 804b834:	d11d      	bne.n	804b872 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 804b836:	68fb      	ldr	r3, [r7, #12]
 804b838:	681b      	ldr	r3, [r3, #0]
 804b83a:	2210      	movs	r2, #16
 804b83c:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 804b83e:	68fb      	ldr	r3, [r7, #12]
 804b840:	681b      	ldr	r3, [r3, #0]
 804b842:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804b844:	69bb      	ldr	r3, [r7, #24]
 804b846:	e853 3f00 	ldrex	r3, [r3]
 804b84a:	617b      	str	r3, [r7, #20]
   return(result);
 804b84c:	697b      	ldr	r3, [r7, #20]
 804b84e:	f043 0310 	orr.w	r3, r3, #16
 804b852:	62bb      	str	r3, [r7, #40]	; 0x28
 804b854:	68fb      	ldr	r3, [r7, #12]
 804b856:	681b      	ldr	r3, [r3, #0]
 804b858:	461a      	mov	r2, r3
 804b85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804b85c:	627b      	str	r3, [r7, #36]	; 0x24
 804b85e:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804b860:	6a39      	ldr	r1, [r7, #32]
 804b862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 804b864:	e841 2300 	strex	r3, r2, [r1]
 804b868:	61fb      	str	r3, [r7, #28]
   return(result);
 804b86a:	69fb      	ldr	r3, [r7, #28]
 804b86c:	2b00      	cmp	r3, #0
 804b86e:	d1e6      	bne.n	804b83e <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 804b870:	e002      	b.n	804b878 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 804b872:	2301      	movs	r3, #1
 804b874:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 804b878:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 804b87c:	e000      	b.n	804b880 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 804b87e:	2302      	movs	r3, #2
  }
}
 804b880:	4618      	mov	r0, r3
 804b882:	3730      	adds	r7, #48	; 0x30
 804b884:	46bd      	mov	sp, r7
 804b886:	bd80      	pop	{r7, pc}

0804b888 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 804b888:	b480      	push	{r7}
 804b88a:	b085      	sub	sp, #20
 804b88c:	af00      	add	r7, sp, #0
 804b88e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 804b890:	687b      	ldr	r3, [r7, #4]
 804b892:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 804b894:	2b00      	cmp	r3, #0
 804b896:	d108      	bne.n	804b8aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 804b898:	687b      	ldr	r3, [r7, #4]
 804b89a:	2201      	movs	r2, #1
 804b89c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 804b8a0:	687b      	ldr	r3, [r7, #4]
 804b8a2:	2201      	movs	r2, #1
 804b8a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 804b8a8:	e031      	b.n	804b90e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 804b8aa:	2310      	movs	r3, #16
 804b8ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 804b8ae:	2310      	movs	r3, #16
 804b8b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 804b8b2:	687b      	ldr	r3, [r7, #4]
 804b8b4:	681b      	ldr	r3, [r3, #0]
 804b8b6:	689b      	ldr	r3, [r3, #8]
 804b8b8:	0e5b      	lsrs	r3, r3, #25
 804b8ba:	b2db      	uxtb	r3, r3
 804b8bc:	f003 0307 	and.w	r3, r3, #7
 804b8c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 804b8c2:	687b      	ldr	r3, [r7, #4]
 804b8c4:	681b      	ldr	r3, [r3, #0]
 804b8c6:	689b      	ldr	r3, [r3, #8]
 804b8c8:	0f5b      	lsrs	r3, r3, #29
 804b8ca:	b2db      	uxtb	r3, r3
 804b8cc:	f003 0307 	and.w	r3, r3, #7
 804b8d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 804b8d2:	7bbb      	ldrb	r3, [r7, #14]
 804b8d4:	7b3a      	ldrb	r2, [r7, #12]
 804b8d6:	4911      	ldr	r1, [pc, #68]	; (804b91c <UARTEx_SetNbDataToProcess+0x94>)
 804b8d8:	5c8a      	ldrb	r2, [r1, r2]
 804b8da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 804b8de:	7b3a      	ldrb	r2, [r7, #12]
 804b8e0:	490f      	ldr	r1, [pc, #60]	; (804b920 <UARTEx_SetNbDataToProcess+0x98>)
 804b8e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 804b8e4:	fb93 f3f2 	sdiv	r3, r3, r2
 804b8e8:	b29a      	uxth	r2, r3
 804b8ea:	687b      	ldr	r3, [r7, #4]
 804b8ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 804b8f0:	7bfb      	ldrb	r3, [r7, #15]
 804b8f2:	7b7a      	ldrb	r2, [r7, #13]
 804b8f4:	4909      	ldr	r1, [pc, #36]	; (804b91c <UARTEx_SetNbDataToProcess+0x94>)
 804b8f6:	5c8a      	ldrb	r2, [r1, r2]
 804b8f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 804b8fc:	7b7a      	ldrb	r2, [r7, #13]
 804b8fe:	4908      	ldr	r1, [pc, #32]	; (804b920 <UARTEx_SetNbDataToProcess+0x98>)
 804b900:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 804b902:	fb93 f3f2 	sdiv	r3, r3, r2
 804b906:	b29a      	uxth	r2, r3
 804b908:	687b      	ldr	r3, [r7, #4]
 804b90a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 804b90e:	bf00      	nop
 804b910:	3714      	adds	r7, #20
 804b912:	46bd      	mov	sp, r7
 804b914:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b918:	4770      	bx	lr
 804b91a:	bf00      	nop
 804b91c:	0805b980 	.word	0x0805b980
 804b920:	0805b988 	.word	0x0805b988

0804b924 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 804b924:	b084      	sub	sp, #16
 804b926:	b580      	push	{r7, lr}
 804b928:	b084      	sub	sp, #16
 804b92a:	af00      	add	r7, sp, #0
 804b92c:	6078      	str	r0, [r7, #4]
 804b92e:	f107 001c 	add.w	r0, r7, #28
 804b932:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 804b936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804b938:	2b01      	cmp	r3, #1
 804b93a:	d120      	bne.n	804b97e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 804b93c:	687b      	ldr	r3, [r7, #4]
 804b93e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804b940:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 804b944:	687b      	ldr	r3, [r7, #4]
 804b946:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 804b948:	687b      	ldr	r3, [r7, #4]
 804b94a:	68da      	ldr	r2, [r3, #12]
 804b94c:	4b2a      	ldr	r3, [pc, #168]	; (804b9f8 <USB_CoreInit+0xd4>)
 804b94e:	4013      	ands	r3, r2
 804b950:	687a      	ldr	r2, [r7, #4]
 804b952:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 804b954:	687b      	ldr	r3, [r7, #4]
 804b956:	68db      	ldr	r3, [r3, #12]
 804b958:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 804b95c:	687b      	ldr	r3, [r7, #4]
 804b95e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 804b960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 804b962:	2b01      	cmp	r3, #1
 804b964:	d105      	bne.n	804b972 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 804b966:	687b      	ldr	r3, [r7, #4]
 804b968:	68db      	ldr	r3, [r3, #12]
 804b96a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 804b96e:	687b      	ldr	r3, [r7, #4]
 804b970:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 804b972:	6878      	ldr	r0, [r7, #4]
 804b974:	f000 f9ce 	bl	804bd14 <USB_CoreReset>
 804b978:	4603      	mov	r3, r0
 804b97a:	73fb      	strb	r3, [r7, #15]
 804b97c:	e01a      	b.n	804b9b4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 804b97e:	687b      	ldr	r3, [r7, #4]
 804b980:	68db      	ldr	r3, [r3, #12]
 804b982:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 804b986:	687b      	ldr	r3, [r7, #4]
 804b988:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 804b98a:	6878      	ldr	r0, [r7, #4]
 804b98c:	f000 f9c2 	bl	804bd14 <USB_CoreReset>
 804b990:	4603      	mov	r3, r0
 804b992:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 804b994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 804b996:	2b00      	cmp	r3, #0
 804b998:	d106      	bne.n	804b9a8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 804b99a:	687b      	ldr	r3, [r7, #4]
 804b99c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804b99e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 804b9a2:	687b      	ldr	r3, [r7, #4]
 804b9a4:	639a      	str	r2, [r3, #56]	; 0x38
 804b9a6:	e005      	b.n	804b9b4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 804b9a8:	687b      	ldr	r3, [r7, #4]
 804b9aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804b9ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 804b9b0:	687b      	ldr	r3, [r7, #4]
 804b9b2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 804b9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804b9b6:	2b01      	cmp	r3, #1
 804b9b8:	d116      	bne.n	804b9e8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 804b9ba:	687b      	ldr	r3, [r7, #4]
 804b9bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 804b9be:	b29a      	uxth	r2, r3
 804b9c0:	687b      	ldr	r3, [r7, #4]
 804b9c2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 804b9c4:	687b      	ldr	r3, [r7, #4]
 804b9c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 804b9c8:	4b0c      	ldr	r3, [pc, #48]	; (804b9fc <USB_CoreInit+0xd8>)
 804b9ca:	4313      	orrs	r3, r2
 804b9cc:	687a      	ldr	r2, [r7, #4]
 804b9ce:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 804b9d0:	687b      	ldr	r3, [r7, #4]
 804b9d2:	689b      	ldr	r3, [r3, #8]
 804b9d4:	f043 0206 	orr.w	r2, r3, #6
 804b9d8:	687b      	ldr	r3, [r7, #4]
 804b9da:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 804b9dc:	687b      	ldr	r3, [r7, #4]
 804b9de:	689b      	ldr	r3, [r3, #8]
 804b9e0:	f043 0220 	orr.w	r2, r3, #32
 804b9e4:	687b      	ldr	r3, [r7, #4]
 804b9e6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 804b9e8:	7bfb      	ldrb	r3, [r7, #15]
}
 804b9ea:	4618      	mov	r0, r3
 804b9ec:	3710      	adds	r7, #16
 804b9ee:	46bd      	mov	sp, r7
 804b9f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 804b9f4:	b004      	add	sp, #16
 804b9f6:	4770      	bx	lr
 804b9f8:	ffbdffbf 	.word	0xffbdffbf
 804b9fc:	03ee0000 	.word	0x03ee0000

0804ba00 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 804ba00:	b480      	push	{r7}
 804ba02:	b083      	sub	sp, #12
 804ba04:	af00      	add	r7, sp, #0
 804ba06:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 804ba08:	687b      	ldr	r3, [r7, #4]
 804ba0a:	689b      	ldr	r3, [r3, #8]
 804ba0c:	f043 0201 	orr.w	r2, r3, #1
 804ba10:	687b      	ldr	r3, [r7, #4]
 804ba12:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 804ba14:	2300      	movs	r3, #0
}
 804ba16:	4618      	mov	r0, r3
 804ba18:	370c      	adds	r7, #12
 804ba1a:	46bd      	mov	sp, r7
 804ba1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ba20:	4770      	bx	lr

0804ba22 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 804ba22:	b480      	push	{r7}
 804ba24:	b083      	sub	sp, #12
 804ba26:	af00      	add	r7, sp, #0
 804ba28:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 804ba2a:	687b      	ldr	r3, [r7, #4]
 804ba2c:	689b      	ldr	r3, [r3, #8]
 804ba2e:	f023 0201 	bic.w	r2, r3, #1
 804ba32:	687b      	ldr	r3, [r7, #4]
 804ba34:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 804ba36:	2300      	movs	r3, #0
}
 804ba38:	4618      	mov	r0, r3
 804ba3a:	370c      	adds	r7, #12
 804ba3c:	46bd      	mov	sp, r7
 804ba3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ba42:	4770      	bx	lr

0804ba44 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 804ba44:	b580      	push	{r7, lr}
 804ba46:	b084      	sub	sp, #16
 804ba48:	af00      	add	r7, sp, #0
 804ba4a:	6078      	str	r0, [r7, #4]
 804ba4c:	460b      	mov	r3, r1
 804ba4e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 804ba50:	2300      	movs	r3, #0
 804ba52:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 804ba54:	687b      	ldr	r3, [r7, #4]
 804ba56:	68db      	ldr	r3, [r3, #12]
 804ba58:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 804ba5c:	687b      	ldr	r3, [r7, #4]
 804ba5e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 804ba60:	78fb      	ldrb	r3, [r7, #3]
 804ba62:	2b01      	cmp	r3, #1
 804ba64:	d115      	bne.n	804ba92 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 804ba66:	687b      	ldr	r3, [r7, #4]
 804ba68:	68db      	ldr	r3, [r3, #12]
 804ba6a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 804ba6e:	687b      	ldr	r3, [r7, #4]
 804ba70:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 804ba72:	2001      	movs	r0, #1
 804ba74:	f7f6 fb3e 	bl	80420f4 <HAL_Delay>
      ms++;
 804ba78:	68fb      	ldr	r3, [r7, #12]
 804ba7a:	3301      	adds	r3, #1
 804ba7c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 804ba7e:	6878      	ldr	r0, [r7, #4]
 804ba80:	f000 f939 	bl	804bcf6 <USB_GetMode>
 804ba84:	4603      	mov	r3, r0
 804ba86:	2b01      	cmp	r3, #1
 804ba88:	d01e      	beq.n	804bac8 <USB_SetCurrentMode+0x84>
 804ba8a:	68fb      	ldr	r3, [r7, #12]
 804ba8c:	2b31      	cmp	r3, #49	; 0x31
 804ba8e:	d9f0      	bls.n	804ba72 <USB_SetCurrentMode+0x2e>
 804ba90:	e01a      	b.n	804bac8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 804ba92:	78fb      	ldrb	r3, [r7, #3]
 804ba94:	2b00      	cmp	r3, #0
 804ba96:	d115      	bne.n	804bac4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 804ba98:	687b      	ldr	r3, [r7, #4]
 804ba9a:	68db      	ldr	r3, [r3, #12]
 804ba9c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 804baa0:	687b      	ldr	r3, [r7, #4]
 804baa2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 804baa4:	2001      	movs	r0, #1
 804baa6:	f7f6 fb25 	bl	80420f4 <HAL_Delay>
      ms++;
 804baaa:	68fb      	ldr	r3, [r7, #12]
 804baac:	3301      	adds	r3, #1
 804baae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 804bab0:	6878      	ldr	r0, [r7, #4]
 804bab2:	f000 f920 	bl	804bcf6 <USB_GetMode>
 804bab6:	4603      	mov	r3, r0
 804bab8:	2b00      	cmp	r3, #0
 804baba:	d005      	beq.n	804bac8 <USB_SetCurrentMode+0x84>
 804babc:	68fb      	ldr	r3, [r7, #12]
 804babe:	2b31      	cmp	r3, #49	; 0x31
 804bac0:	d9f0      	bls.n	804baa4 <USB_SetCurrentMode+0x60>
 804bac2:	e001      	b.n	804bac8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 804bac4:	2301      	movs	r3, #1
 804bac6:	e005      	b.n	804bad4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 804bac8:	68fb      	ldr	r3, [r7, #12]
 804baca:	2b32      	cmp	r3, #50	; 0x32
 804bacc:	d101      	bne.n	804bad2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 804bace:	2301      	movs	r3, #1
 804bad0:	e000      	b.n	804bad4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 804bad2:	2300      	movs	r3, #0
}
 804bad4:	4618      	mov	r0, r3
 804bad6:	3710      	adds	r7, #16
 804bad8:	46bd      	mov	sp, r7
 804bada:	bd80      	pop	{r7, pc}

0804badc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 804badc:	b480      	push	{r7}
 804bade:	b085      	sub	sp, #20
 804bae0:	af00      	add	r7, sp, #0
 804bae2:	6078      	str	r0, [r7, #4]
 804bae4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 804bae6:	2300      	movs	r3, #0
 804bae8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 804baea:	68fb      	ldr	r3, [r7, #12]
 804baec:	3301      	adds	r3, #1
 804baee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 804baf0:	68fb      	ldr	r3, [r7, #12]
 804baf2:	4a13      	ldr	r2, [pc, #76]	; (804bb40 <USB_FlushTxFifo+0x64>)
 804baf4:	4293      	cmp	r3, r2
 804baf6:	d901      	bls.n	804bafc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 804baf8:	2303      	movs	r3, #3
 804bafa:	e01b      	b.n	804bb34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 804bafc:	687b      	ldr	r3, [r7, #4]
 804bafe:	691b      	ldr	r3, [r3, #16]
 804bb00:	2b00      	cmp	r3, #0
 804bb02:	daf2      	bge.n	804baea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 804bb04:	2300      	movs	r3, #0
 804bb06:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 804bb08:	683b      	ldr	r3, [r7, #0]
 804bb0a:	019b      	lsls	r3, r3, #6
 804bb0c:	f043 0220 	orr.w	r2, r3, #32
 804bb10:	687b      	ldr	r3, [r7, #4]
 804bb12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 804bb14:	68fb      	ldr	r3, [r7, #12]
 804bb16:	3301      	adds	r3, #1
 804bb18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 804bb1a:	68fb      	ldr	r3, [r7, #12]
 804bb1c:	4a08      	ldr	r2, [pc, #32]	; (804bb40 <USB_FlushTxFifo+0x64>)
 804bb1e:	4293      	cmp	r3, r2
 804bb20:	d901      	bls.n	804bb26 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 804bb22:	2303      	movs	r3, #3
 804bb24:	e006      	b.n	804bb34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 804bb26:	687b      	ldr	r3, [r7, #4]
 804bb28:	691b      	ldr	r3, [r3, #16]
 804bb2a:	f003 0320 	and.w	r3, r3, #32
 804bb2e:	2b20      	cmp	r3, #32
 804bb30:	d0f0      	beq.n	804bb14 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 804bb32:	2300      	movs	r3, #0
}
 804bb34:	4618      	mov	r0, r3
 804bb36:	3714      	adds	r7, #20
 804bb38:	46bd      	mov	sp, r7
 804bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804bb3e:	4770      	bx	lr
 804bb40:	00030d40 	.word	0x00030d40

0804bb44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 804bb44:	b480      	push	{r7}
 804bb46:	b085      	sub	sp, #20
 804bb48:	af00      	add	r7, sp, #0
 804bb4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 804bb4c:	2300      	movs	r3, #0
 804bb4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 804bb50:	68fb      	ldr	r3, [r7, #12]
 804bb52:	3301      	adds	r3, #1
 804bb54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 804bb56:	68fb      	ldr	r3, [r7, #12]
 804bb58:	4a11      	ldr	r2, [pc, #68]	; (804bba0 <USB_FlushRxFifo+0x5c>)
 804bb5a:	4293      	cmp	r3, r2
 804bb5c:	d901      	bls.n	804bb62 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 804bb5e:	2303      	movs	r3, #3
 804bb60:	e018      	b.n	804bb94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 804bb62:	687b      	ldr	r3, [r7, #4]
 804bb64:	691b      	ldr	r3, [r3, #16]
 804bb66:	2b00      	cmp	r3, #0
 804bb68:	daf2      	bge.n	804bb50 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 804bb6a:	2300      	movs	r3, #0
 804bb6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 804bb6e:	687b      	ldr	r3, [r7, #4]
 804bb70:	2210      	movs	r2, #16
 804bb72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 804bb74:	68fb      	ldr	r3, [r7, #12]
 804bb76:	3301      	adds	r3, #1
 804bb78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 804bb7a:	68fb      	ldr	r3, [r7, #12]
 804bb7c:	4a08      	ldr	r2, [pc, #32]	; (804bba0 <USB_FlushRxFifo+0x5c>)
 804bb7e:	4293      	cmp	r3, r2
 804bb80:	d901      	bls.n	804bb86 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 804bb82:	2303      	movs	r3, #3
 804bb84:	e006      	b.n	804bb94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 804bb86:	687b      	ldr	r3, [r7, #4]
 804bb88:	691b      	ldr	r3, [r3, #16]
 804bb8a:	f003 0310 	and.w	r3, r3, #16
 804bb8e:	2b10      	cmp	r3, #16
 804bb90:	d0f0      	beq.n	804bb74 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 804bb92:	2300      	movs	r3, #0
}
 804bb94:	4618      	mov	r0, r3
 804bb96:	3714      	adds	r7, #20
 804bb98:	46bd      	mov	sp, r7
 804bb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804bb9e:	4770      	bx	lr
 804bba0:	00030d40 	.word	0x00030d40

0804bba4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 804bba4:	b480      	push	{r7}
 804bba6:	b089      	sub	sp, #36	; 0x24
 804bba8:	af00      	add	r7, sp, #0
 804bbaa:	60f8      	str	r0, [r7, #12]
 804bbac:	60b9      	str	r1, [r7, #8]
 804bbae:	4611      	mov	r1, r2
 804bbb0:	461a      	mov	r2, r3
 804bbb2:	460b      	mov	r3, r1
 804bbb4:	71fb      	strb	r3, [r7, #7]
 804bbb6:	4613      	mov	r3, r2
 804bbb8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804bbba:	68fb      	ldr	r3, [r7, #12]
 804bbbc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 804bbbe:	68bb      	ldr	r3, [r7, #8]
 804bbc0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 804bbc2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 804bbc6:	2b00      	cmp	r3, #0
 804bbc8:	d123      	bne.n	804bc12 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 804bbca:	88bb      	ldrh	r3, [r7, #4]
 804bbcc:	3303      	adds	r3, #3
 804bbce:	089b      	lsrs	r3, r3, #2
 804bbd0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 804bbd2:	2300      	movs	r3, #0
 804bbd4:	61bb      	str	r3, [r7, #24]
 804bbd6:	e018      	b.n	804bc0a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 804bbd8:	79fb      	ldrb	r3, [r7, #7]
 804bbda:	031a      	lsls	r2, r3, #12
 804bbdc:	697b      	ldr	r3, [r7, #20]
 804bbde:	4413      	add	r3, r2
 804bbe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 804bbe4:	461a      	mov	r2, r3
 804bbe6:	69fb      	ldr	r3, [r7, #28]
 804bbe8:	681b      	ldr	r3, [r3, #0]
 804bbea:	6013      	str	r3, [r2, #0]
      pSrc++;
 804bbec:	69fb      	ldr	r3, [r7, #28]
 804bbee:	3301      	adds	r3, #1
 804bbf0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 804bbf2:	69fb      	ldr	r3, [r7, #28]
 804bbf4:	3301      	adds	r3, #1
 804bbf6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 804bbf8:	69fb      	ldr	r3, [r7, #28]
 804bbfa:	3301      	adds	r3, #1
 804bbfc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 804bbfe:	69fb      	ldr	r3, [r7, #28]
 804bc00:	3301      	adds	r3, #1
 804bc02:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 804bc04:	69bb      	ldr	r3, [r7, #24]
 804bc06:	3301      	adds	r3, #1
 804bc08:	61bb      	str	r3, [r7, #24]
 804bc0a:	69ba      	ldr	r2, [r7, #24]
 804bc0c:	693b      	ldr	r3, [r7, #16]
 804bc0e:	429a      	cmp	r2, r3
 804bc10:	d3e2      	bcc.n	804bbd8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 804bc12:	2300      	movs	r3, #0
}
 804bc14:	4618      	mov	r0, r3
 804bc16:	3724      	adds	r7, #36	; 0x24
 804bc18:	46bd      	mov	sp, r7
 804bc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804bc1e:	4770      	bx	lr

0804bc20 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 804bc20:	b480      	push	{r7}
 804bc22:	b08b      	sub	sp, #44	; 0x2c
 804bc24:	af00      	add	r7, sp, #0
 804bc26:	60f8      	str	r0, [r7, #12]
 804bc28:	60b9      	str	r1, [r7, #8]
 804bc2a:	4613      	mov	r3, r2
 804bc2c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804bc2e:	68fb      	ldr	r3, [r7, #12]
 804bc30:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 804bc32:	68bb      	ldr	r3, [r7, #8]
 804bc34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 804bc36:	88fb      	ldrh	r3, [r7, #6]
 804bc38:	089b      	lsrs	r3, r3, #2
 804bc3a:	b29b      	uxth	r3, r3
 804bc3c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 804bc3e:	88fb      	ldrh	r3, [r7, #6]
 804bc40:	f003 0303 	and.w	r3, r3, #3
 804bc44:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 804bc46:	2300      	movs	r3, #0
 804bc48:	623b      	str	r3, [r7, #32]
 804bc4a:	e014      	b.n	804bc76 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 804bc4c:	69bb      	ldr	r3, [r7, #24]
 804bc4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 804bc52:	681a      	ldr	r2, [r3, #0]
 804bc54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804bc56:	601a      	str	r2, [r3, #0]
    pDest++;
 804bc58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804bc5a:	3301      	adds	r3, #1
 804bc5c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 804bc5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804bc60:	3301      	adds	r3, #1
 804bc62:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 804bc64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804bc66:	3301      	adds	r3, #1
 804bc68:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 804bc6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804bc6c:	3301      	adds	r3, #1
 804bc6e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 804bc70:	6a3b      	ldr	r3, [r7, #32]
 804bc72:	3301      	adds	r3, #1
 804bc74:	623b      	str	r3, [r7, #32]
 804bc76:	6a3a      	ldr	r2, [r7, #32]
 804bc78:	697b      	ldr	r3, [r7, #20]
 804bc7a:	429a      	cmp	r2, r3
 804bc7c:	d3e6      	bcc.n	804bc4c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 804bc7e:	8bfb      	ldrh	r3, [r7, #30]
 804bc80:	2b00      	cmp	r3, #0
 804bc82:	d01e      	beq.n	804bcc2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 804bc84:	2300      	movs	r3, #0
 804bc86:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 804bc88:	69bb      	ldr	r3, [r7, #24]
 804bc8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 804bc8e:	461a      	mov	r2, r3
 804bc90:	f107 0310 	add.w	r3, r7, #16
 804bc94:	6812      	ldr	r2, [r2, #0]
 804bc96:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 804bc98:	693a      	ldr	r2, [r7, #16]
 804bc9a:	6a3b      	ldr	r3, [r7, #32]
 804bc9c:	b2db      	uxtb	r3, r3
 804bc9e:	00db      	lsls	r3, r3, #3
 804bca0:	fa22 f303 	lsr.w	r3, r2, r3
 804bca4:	b2da      	uxtb	r2, r3
 804bca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804bca8:	701a      	strb	r2, [r3, #0]
      i++;
 804bcaa:	6a3b      	ldr	r3, [r7, #32]
 804bcac:	3301      	adds	r3, #1
 804bcae:	623b      	str	r3, [r7, #32]
      pDest++;
 804bcb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804bcb2:	3301      	adds	r3, #1
 804bcb4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 804bcb6:	8bfb      	ldrh	r3, [r7, #30]
 804bcb8:	3b01      	subs	r3, #1
 804bcba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 804bcbc:	8bfb      	ldrh	r3, [r7, #30]
 804bcbe:	2b00      	cmp	r3, #0
 804bcc0:	d1ea      	bne.n	804bc98 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 804bcc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 804bcc4:	4618      	mov	r0, r3
 804bcc6:	372c      	adds	r7, #44	; 0x2c
 804bcc8:	46bd      	mov	sp, r7
 804bcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 804bcce:	4770      	bx	lr

0804bcd0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 804bcd0:	b480      	push	{r7}
 804bcd2:	b085      	sub	sp, #20
 804bcd4:	af00      	add	r7, sp, #0
 804bcd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 804bcd8:	687b      	ldr	r3, [r7, #4]
 804bcda:	695b      	ldr	r3, [r3, #20]
 804bcdc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 804bcde:	687b      	ldr	r3, [r7, #4]
 804bce0:	699b      	ldr	r3, [r3, #24]
 804bce2:	68fa      	ldr	r2, [r7, #12]
 804bce4:	4013      	ands	r3, r2
 804bce6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 804bce8:	68fb      	ldr	r3, [r7, #12]
}
 804bcea:	4618      	mov	r0, r3
 804bcec:	3714      	adds	r7, #20
 804bcee:	46bd      	mov	sp, r7
 804bcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 804bcf4:	4770      	bx	lr

0804bcf6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 804bcf6:	b480      	push	{r7}
 804bcf8:	b083      	sub	sp, #12
 804bcfa:	af00      	add	r7, sp, #0
 804bcfc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 804bcfe:	687b      	ldr	r3, [r7, #4]
 804bd00:	695b      	ldr	r3, [r3, #20]
 804bd02:	f003 0301 	and.w	r3, r3, #1
}
 804bd06:	4618      	mov	r0, r3
 804bd08:	370c      	adds	r7, #12
 804bd0a:	46bd      	mov	sp, r7
 804bd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 804bd10:	4770      	bx	lr
	...

0804bd14 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 804bd14:	b480      	push	{r7}
 804bd16:	b085      	sub	sp, #20
 804bd18:	af00      	add	r7, sp, #0
 804bd1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 804bd1c:	2300      	movs	r3, #0
 804bd1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 804bd20:	68fb      	ldr	r3, [r7, #12]
 804bd22:	3301      	adds	r3, #1
 804bd24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 804bd26:	68fb      	ldr	r3, [r7, #12]
 804bd28:	4a13      	ldr	r2, [pc, #76]	; (804bd78 <USB_CoreReset+0x64>)
 804bd2a:	4293      	cmp	r3, r2
 804bd2c:	d901      	bls.n	804bd32 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 804bd2e:	2303      	movs	r3, #3
 804bd30:	e01b      	b.n	804bd6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 804bd32:	687b      	ldr	r3, [r7, #4]
 804bd34:	691b      	ldr	r3, [r3, #16]
 804bd36:	2b00      	cmp	r3, #0
 804bd38:	daf2      	bge.n	804bd20 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 804bd3a:	2300      	movs	r3, #0
 804bd3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 804bd3e:	687b      	ldr	r3, [r7, #4]
 804bd40:	691b      	ldr	r3, [r3, #16]
 804bd42:	f043 0201 	orr.w	r2, r3, #1
 804bd46:	687b      	ldr	r3, [r7, #4]
 804bd48:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 804bd4a:	68fb      	ldr	r3, [r7, #12]
 804bd4c:	3301      	adds	r3, #1
 804bd4e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 804bd50:	68fb      	ldr	r3, [r7, #12]
 804bd52:	4a09      	ldr	r2, [pc, #36]	; (804bd78 <USB_CoreReset+0x64>)
 804bd54:	4293      	cmp	r3, r2
 804bd56:	d901      	bls.n	804bd5c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 804bd58:	2303      	movs	r3, #3
 804bd5a:	e006      	b.n	804bd6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 804bd5c:	687b      	ldr	r3, [r7, #4]
 804bd5e:	691b      	ldr	r3, [r3, #16]
 804bd60:	f003 0301 	and.w	r3, r3, #1
 804bd64:	2b01      	cmp	r3, #1
 804bd66:	d0f0      	beq.n	804bd4a <USB_CoreReset+0x36>

  return HAL_OK;
 804bd68:	2300      	movs	r3, #0
}
 804bd6a:	4618      	mov	r0, r3
 804bd6c:	3714      	adds	r7, #20
 804bd6e:	46bd      	mov	sp, r7
 804bd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 804bd74:	4770      	bx	lr
 804bd76:	bf00      	nop
 804bd78:	00030d40 	.word	0x00030d40

0804bd7c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 804bd7c:	b084      	sub	sp, #16
 804bd7e:	b580      	push	{r7, lr}
 804bd80:	b086      	sub	sp, #24
 804bd82:	af00      	add	r7, sp, #0
 804bd84:	6078      	str	r0, [r7, #4]
 804bd86:	f107 0024 	add.w	r0, r7, #36	; 0x24
 804bd8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 804bd8e:	2300      	movs	r3, #0
 804bd90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804bd92:	687b      	ldr	r3, [r7, #4]
 804bd94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 804bd96:	68fb      	ldr	r3, [r7, #12]
 804bd98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 804bd9c:	461a      	mov	r2, r3
 804bd9e:	2300      	movs	r3, #0
 804bda0:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 804bda2:	687b      	ldr	r3, [r7, #4]
 804bda4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804bda6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 804bdaa:	687b      	ldr	r3, [r7, #4]
 804bdac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 804bdae:	687b      	ldr	r3, [r7, #4]
 804bdb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804bdb2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 804bdb6:	687b      	ldr	r3, [r7, #4]
 804bdb8:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 804bdba:	687b      	ldr	r3, [r7, #4]
 804bdbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804bdbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804bdc2:	2b00      	cmp	r3, #0
 804bdc4:	d018      	beq.n	804bdf8 <USB_HostInit+0x7c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 804bdc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804bdc8:	2b01      	cmp	r3, #1
 804bdca:	d10a      	bne.n	804bde2 <USB_HostInit+0x66>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 804bdcc:	68fb      	ldr	r3, [r7, #12]
 804bdce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804bdd2:	681b      	ldr	r3, [r3, #0]
 804bdd4:	68fa      	ldr	r2, [r7, #12]
 804bdd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 804bdda:	f043 0304 	orr.w	r3, r3, #4
 804bdde:	6013      	str	r3, [r2, #0]
 804bde0:	e014      	b.n	804be0c <USB_HostInit+0x90>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 804bde2:	68fb      	ldr	r3, [r7, #12]
 804bde4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804bde8:	681b      	ldr	r3, [r3, #0]
 804bdea:	68fa      	ldr	r2, [r7, #12]
 804bdec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 804bdf0:	f023 0304 	bic.w	r3, r3, #4
 804bdf4:	6013      	str	r3, [r2, #0]
 804bdf6:	e009      	b.n	804be0c <USB_HostInit+0x90>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 804bdf8:	68fb      	ldr	r3, [r7, #12]
 804bdfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804bdfe:	681b      	ldr	r3, [r3, #0]
 804be00:	68fa      	ldr	r2, [r7, #12]
 804be02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 804be06:	f023 0304 	bic.w	r3, r3, #4
 804be0a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 804be0c:	2110      	movs	r1, #16
 804be0e:	6878      	ldr	r0, [r7, #4]
 804be10:	f7ff fe64 	bl	804badc <USB_FlushTxFifo>
 804be14:	4603      	mov	r3, r0
 804be16:	2b00      	cmp	r3, #0
 804be18:	d001      	beq.n	804be1e <USB_HostInit+0xa2>
  {
    ret = HAL_ERROR;
 804be1a:	2301      	movs	r3, #1
 804be1c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 804be1e:	6878      	ldr	r0, [r7, #4]
 804be20:	f7ff fe90 	bl	804bb44 <USB_FlushRxFifo>
 804be24:	4603      	mov	r3, r0
 804be26:	2b00      	cmp	r3, #0
 804be28:	d001      	beq.n	804be2e <USB_HostInit+0xb2>
  {
    ret = HAL_ERROR;
 804be2a:	2301      	movs	r3, #1
 804be2c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 804be2e:	2300      	movs	r3, #0
 804be30:	613b      	str	r3, [r7, #16]
 804be32:	e015      	b.n	804be60 <USB_HostInit+0xe4>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 804be34:	693b      	ldr	r3, [r7, #16]
 804be36:	015a      	lsls	r2, r3, #5
 804be38:	68fb      	ldr	r3, [r7, #12]
 804be3a:	4413      	add	r3, r2
 804be3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804be40:	461a      	mov	r2, r3
 804be42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804be46:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 804be48:	693b      	ldr	r3, [r7, #16]
 804be4a:	015a      	lsls	r2, r3, #5
 804be4c:	68fb      	ldr	r3, [r7, #12]
 804be4e:	4413      	add	r3, r2
 804be50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804be54:	461a      	mov	r2, r3
 804be56:	2300      	movs	r3, #0
 804be58:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 804be5a:	693b      	ldr	r3, [r7, #16]
 804be5c:	3301      	adds	r3, #1
 804be5e:	613b      	str	r3, [r7, #16]
 804be60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804be62:	693a      	ldr	r2, [r7, #16]
 804be64:	429a      	cmp	r2, r3
 804be66:	d3e5      	bcc.n	804be34 <USB_HostInit+0xb8>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 804be68:	687b      	ldr	r3, [r7, #4]
 804be6a:	2200      	movs	r2, #0
 804be6c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 804be6e:	687b      	ldr	r3, [r7, #4]
 804be70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 804be74:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 804be76:	687b      	ldr	r3, [r7, #4]
 804be78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804be7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804be7e:	2b00      	cmp	r3, #0
 804be80:	d00b      	beq.n	804be9a <USB_HostInit+0x11e>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 804be82:	687b      	ldr	r3, [r7, #4]
 804be84:	f44f 7200 	mov.w	r2, #512	; 0x200
 804be88:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 804be8a:	687b      	ldr	r3, [r7, #4]
 804be8c:	4a13      	ldr	r2, [pc, #76]	; (804bedc <USB_HostInit+0x160>)
 804be8e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 804be90:	687b      	ldr	r3, [r7, #4]
 804be92:	4a13      	ldr	r2, [pc, #76]	; (804bee0 <USB_HostInit+0x164>)
 804be94:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 804be98:	e009      	b.n	804beae <USB_HostInit+0x132>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 804be9a:	687b      	ldr	r3, [r7, #4]
 804be9c:	2280      	movs	r2, #128	; 0x80
 804be9e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 804bea0:	687b      	ldr	r3, [r7, #4]
 804bea2:	4a10      	ldr	r2, [pc, #64]	; (804bee4 <USB_HostInit+0x168>)
 804bea4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 804bea6:	687b      	ldr	r3, [r7, #4]
 804bea8:	4a0f      	ldr	r2, [pc, #60]	; (804bee8 <USB_HostInit+0x16c>)
 804beaa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 804beae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804beb0:	2b00      	cmp	r3, #0
 804beb2:	d105      	bne.n	804bec0 <USB_HostInit+0x144>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 804beb4:	687b      	ldr	r3, [r7, #4]
 804beb6:	699b      	ldr	r3, [r3, #24]
 804beb8:	f043 0210 	orr.w	r2, r3, #16
 804bebc:	687b      	ldr	r3, [r7, #4]
 804bebe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 804bec0:	687b      	ldr	r3, [r7, #4]
 804bec2:	699a      	ldr	r2, [r3, #24]
 804bec4:	4b09      	ldr	r3, [pc, #36]	; (804beec <USB_HostInit+0x170>)
 804bec6:	4313      	orrs	r3, r2
 804bec8:	687a      	ldr	r2, [r7, #4]
 804beca:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 804becc:	7dfb      	ldrb	r3, [r7, #23]
}
 804bece:	4618      	mov	r0, r3
 804bed0:	3718      	adds	r7, #24
 804bed2:	46bd      	mov	sp, r7
 804bed4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 804bed8:	b004      	add	sp, #16
 804beda:	4770      	bx	lr
 804bedc:	01000200 	.word	0x01000200
 804bee0:	00e00300 	.word	0x00e00300
 804bee4:	00600080 	.word	0x00600080
 804bee8:	004000e0 	.word	0x004000e0
 804beec:	a3200008 	.word	0xa3200008

0804bef0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 804bef0:	b480      	push	{r7}
 804bef2:	b085      	sub	sp, #20
 804bef4:	af00      	add	r7, sp, #0
 804bef6:	6078      	str	r0, [r7, #4]
 804bef8:	460b      	mov	r3, r1
 804befa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804befc:	687b      	ldr	r3, [r7, #4]
 804befe:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 804bf00:	68fb      	ldr	r3, [r7, #12]
 804bf02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804bf06:	681b      	ldr	r3, [r3, #0]
 804bf08:	68fa      	ldr	r2, [r7, #12]
 804bf0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 804bf0e:	f023 0303 	bic.w	r3, r3, #3
 804bf12:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 804bf14:	68fb      	ldr	r3, [r7, #12]
 804bf16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804bf1a:	681a      	ldr	r2, [r3, #0]
 804bf1c:	78fb      	ldrb	r3, [r7, #3]
 804bf1e:	f003 0303 	and.w	r3, r3, #3
 804bf22:	68f9      	ldr	r1, [r7, #12]
 804bf24:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 804bf28:	4313      	orrs	r3, r2
 804bf2a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 804bf2c:	78fb      	ldrb	r3, [r7, #3]
 804bf2e:	2b01      	cmp	r3, #1
 804bf30:	d107      	bne.n	804bf42 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 804bf32:	68fb      	ldr	r3, [r7, #12]
 804bf34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804bf38:	461a      	mov	r2, r3
 804bf3a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 804bf3e:	6053      	str	r3, [r2, #4]
 804bf40:	e009      	b.n	804bf56 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 804bf42:	78fb      	ldrb	r3, [r7, #3]
 804bf44:	2b02      	cmp	r3, #2
 804bf46:	d106      	bne.n	804bf56 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 804bf48:	68fb      	ldr	r3, [r7, #12]
 804bf4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804bf4e:	461a      	mov	r2, r3
 804bf50:	f241 7370 	movw	r3, #6000	; 0x1770
 804bf54:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 804bf56:	2300      	movs	r3, #0
}
 804bf58:	4618      	mov	r0, r3
 804bf5a:	3714      	adds	r7, #20
 804bf5c:	46bd      	mov	sp, r7
 804bf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804bf62:	4770      	bx	lr

0804bf64 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 804bf64:	b580      	push	{r7, lr}
 804bf66:	b084      	sub	sp, #16
 804bf68:	af00      	add	r7, sp, #0
 804bf6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804bf6c:	687b      	ldr	r3, [r7, #4]
 804bf6e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 804bf70:	2300      	movs	r3, #0
 804bf72:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 804bf74:	68fb      	ldr	r3, [r7, #12]
 804bf76:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 804bf7a:	681b      	ldr	r3, [r3, #0]
 804bf7c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 804bf7e:	68bb      	ldr	r3, [r7, #8]
 804bf80:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 804bf84:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 804bf86:	68bb      	ldr	r3, [r7, #8]
 804bf88:	68fa      	ldr	r2, [r7, #12]
 804bf8a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 804bf8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 804bf92:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 804bf94:	2064      	movs	r0, #100	; 0x64
 804bf96:	f7f6 f8ad 	bl	80420f4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 804bf9a:	68bb      	ldr	r3, [r7, #8]
 804bf9c:	68fa      	ldr	r2, [r7, #12]
 804bf9e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 804bfa2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 804bfa6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 804bfa8:	200a      	movs	r0, #10
 804bfaa:	f7f6 f8a3 	bl	80420f4 <HAL_Delay>

  return HAL_OK;
 804bfae:	2300      	movs	r3, #0
}
 804bfb0:	4618      	mov	r0, r3
 804bfb2:	3710      	adds	r7, #16
 804bfb4:	46bd      	mov	sp, r7
 804bfb6:	bd80      	pop	{r7, pc}

0804bfb8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 804bfb8:	b480      	push	{r7}
 804bfba:	b085      	sub	sp, #20
 804bfbc:	af00      	add	r7, sp, #0
 804bfbe:	6078      	str	r0, [r7, #4]
 804bfc0:	460b      	mov	r3, r1
 804bfc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804bfc4:	687b      	ldr	r3, [r7, #4]
 804bfc6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 804bfc8:	2300      	movs	r3, #0
 804bfca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 804bfcc:	68fb      	ldr	r3, [r7, #12]
 804bfce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 804bfd2:	681b      	ldr	r3, [r3, #0]
 804bfd4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 804bfd6:	68bb      	ldr	r3, [r7, #8]
 804bfd8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 804bfdc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 804bfde:	68bb      	ldr	r3, [r7, #8]
 804bfe0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 804bfe4:	2b00      	cmp	r3, #0
 804bfe6:	d109      	bne.n	804bffc <USB_DriveVbus+0x44>
 804bfe8:	78fb      	ldrb	r3, [r7, #3]
 804bfea:	2b01      	cmp	r3, #1
 804bfec:	d106      	bne.n	804bffc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 804bfee:	68bb      	ldr	r3, [r7, #8]
 804bff0:	68fa      	ldr	r2, [r7, #12]
 804bff2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 804bff6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 804bffa:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 804bffc:	68bb      	ldr	r3, [r7, #8]
 804bffe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 804c002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 804c006:	d109      	bne.n	804c01c <USB_DriveVbus+0x64>
 804c008:	78fb      	ldrb	r3, [r7, #3]
 804c00a:	2b00      	cmp	r3, #0
 804c00c:	d106      	bne.n	804c01c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 804c00e:	68bb      	ldr	r3, [r7, #8]
 804c010:	68fa      	ldr	r2, [r7, #12]
 804c012:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 804c016:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 804c01a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 804c01c:	2300      	movs	r3, #0
}
 804c01e:	4618      	mov	r0, r3
 804c020:	3714      	adds	r7, #20
 804c022:	46bd      	mov	sp, r7
 804c024:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c028:	4770      	bx	lr

0804c02a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 804c02a:	b480      	push	{r7}
 804c02c:	b085      	sub	sp, #20
 804c02e:	af00      	add	r7, sp, #0
 804c030:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804c032:	687b      	ldr	r3, [r7, #4]
 804c034:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 804c036:	2300      	movs	r3, #0
 804c038:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 804c03a:	68fb      	ldr	r3, [r7, #12]
 804c03c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 804c040:	681b      	ldr	r3, [r3, #0]
 804c042:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 804c044:	68bb      	ldr	r3, [r7, #8]
 804c046:	0c5b      	lsrs	r3, r3, #17
 804c048:	f003 0303 	and.w	r3, r3, #3
}
 804c04c:	4618      	mov	r0, r3
 804c04e:	3714      	adds	r7, #20
 804c050:	46bd      	mov	sp, r7
 804c052:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c056:	4770      	bx	lr

0804c058 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 804c058:	b480      	push	{r7}
 804c05a:	b085      	sub	sp, #20
 804c05c:	af00      	add	r7, sp, #0
 804c05e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804c060:	687b      	ldr	r3, [r7, #4]
 804c062:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 804c064:	68fb      	ldr	r3, [r7, #12]
 804c066:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804c06a:	689b      	ldr	r3, [r3, #8]
 804c06c:	b29b      	uxth	r3, r3
}
 804c06e:	4618      	mov	r0, r3
 804c070:	3714      	adds	r7, #20
 804c072:	46bd      	mov	sp, r7
 804c074:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c078:	4770      	bx	lr
	...

0804c07c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 804c07c:	b580      	push	{r7, lr}
 804c07e:	b088      	sub	sp, #32
 804c080:	af00      	add	r7, sp, #0
 804c082:	6078      	str	r0, [r7, #4]
 804c084:	4608      	mov	r0, r1
 804c086:	4611      	mov	r1, r2
 804c088:	461a      	mov	r2, r3
 804c08a:	4603      	mov	r3, r0
 804c08c:	70fb      	strb	r3, [r7, #3]
 804c08e:	460b      	mov	r3, r1
 804c090:	70bb      	strb	r3, [r7, #2]
 804c092:	4613      	mov	r3, r2
 804c094:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 804c096:	2300      	movs	r3, #0
 804c098:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804c09a:	687b      	ldr	r3, [r7, #4]
 804c09c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 804c09e:	78fb      	ldrb	r3, [r7, #3]
 804c0a0:	015a      	lsls	r2, r3, #5
 804c0a2:	693b      	ldr	r3, [r7, #16]
 804c0a4:	4413      	add	r3, r2
 804c0a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804c0aa:	461a      	mov	r2, r3
 804c0ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804c0b0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 804c0b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 804c0b6:	2b03      	cmp	r3, #3
 804c0b8:	d87e      	bhi.n	804c1b8 <USB_HC_Init+0x13c>
 804c0ba:	a201      	add	r2, pc, #4	; (adr r2, 804c0c0 <USB_HC_Init+0x44>)
 804c0bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804c0c0:	0804c0d1 	.word	0x0804c0d1
 804c0c4:	0804c17b 	.word	0x0804c17b
 804c0c8:	0804c0d1 	.word	0x0804c0d1
 804c0cc:	0804c13d 	.word	0x0804c13d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 804c0d0:	78fb      	ldrb	r3, [r7, #3]
 804c0d2:	015a      	lsls	r2, r3, #5
 804c0d4:	693b      	ldr	r3, [r7, #16]
 804c0d6:	4413      	add	r3, r2
 804c0d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804c0dc:	461a      	mov	r2, r3
 804c0de:	f240 439d 	movw	r3, #1181	; 0x49d
 804c0e2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 804c0e4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 804c0e8:	2b00      	cmp	r3, #0
 804c0ea:	da10      	bge.n	804c10e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 804c0ec:	78fb      	ldrb	r3, [r7, #3]
 804c0ee:	015a      	lsls	r2, r3, #5
 804c0f0:	693b      	ldr	r3, [r7, #16]
 804c0f2:	4413      	add	r3, r2
 804c0f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804c0f8:	68db      	ldr	r3, [r3, #12]
 804c0fa:	78fa      	ldrb	r2, [r7, #3]
 804c0fc:	0151      	lsls	r1, r2, #5
 804c0fe:	693a      	ldr	r2, [r7, #16]
 804c100:	440a      	add	r2, r1
 804c102:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804c106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 804c10a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 804c10c:	e057      	b.n	804c1be <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 804c10e:	687b      	ldr	r3, [r7, #4]
 804c110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804c112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804c116:	2b00      	cmp	r3, #0
 804c118:	d051      	beq.n	804c1be <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 804c11a:	78fb      	ldrb	r3, [r7, #3]
 804c11c:	015a      	lsls	r2, r3, #5
 804c11e:	693b      	ldr	r3, [r7, #16]
 804c120:	4413      	add	r3, r2
 804c122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804c126:	68db      	ldr	r3, [r3, #12]
 804c128:	78fa      	ldrb	r2, [r7, #3]
 804c12a:	0151      	lsls	r1, r2, #5
 804c12c:	693a      	ldr	r2, [r7, #16]
 804c12e:	440a      	add	r2, r1
 804c130:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804c134:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 804c138:	60d3      	str	r3, [r2, #12]
      break;
 804c13a:	e040      	b.n	804c1be <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 804c13c:	78fb      	ldrb	r3, [r7, #3]
 804c13e:	015a      	lsls	r2, r3, #5
 804c140:	693b      	ldr	r3, [r7, #16]
 804c142:	4413      	add	r3, r2
 804c144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804c148:	461a      	mov	r2, r3
 804c14a:	f240 639d 	movw	r3, #1693	; 0x69d
 804c14e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 804c150:	f997 3002 	ldrsb.w	r3, [r7, #2]
 804c154:	2b00      	cmp	r3, #0
 804c156:	da34      	bge.n	804c1c2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 804c158:	78fb      	ldrb	r3, [r7, #3]
 804c15a:	015a      	lsls	r2, r3, #5
 804c15c:	693b      	ldr	r3, [r7, #16]
 804c15e:	4413      	add	r3, r2
 804c160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804c164:	68db      	ldr	r3, [r3, #12]
 804c166:	78fa      	ldrb	r2, [r7, #3]
 804c168:	0151      	lsls	r1, r2, #5
 804c16a:	693a      	ldr	r2, [r7, #16]
 804c16c:	440a      	add	r2, r1
 804c16e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804c172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 804c176:	60d3      	str	r3, [r2, #12]
      }

      break;
 804c178:	e023      	b.n	804c1c2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 804c17a:	78fb      	ldrb	r3, [r7, #3]
 804c17c:	015a      	lsls	r2, r3, #5
 804c17e:	693b      	ldr	r3, [r7, #16]
 804c180:	4413      	add	r3, r2
 804c182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804c186:	461a      	mov	r2, r3
 804c188:	f240 2325 	movw	r3, #549	; 0x225
 804c18c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 804c18e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 804c192:	2b00      	cmp	r3, #0
 804c194:	da17      	bge.n	804c1c6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 804c196:	78fb      	ldrb	r3, [r7, #3]
 804c198:	015a      	lsls	r2, r3, #5
 804c19a:	693b      	ldr	r3, [r7, #16]
 804c19c:	4413      	add	r3, r2
 804c19e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804c1a2:	68db      	ldr	r3, [r3, #12]
 804c1a4:	78fa      	ldrb	r2, [r7, #3]
 804c1a6:	0151      	lsls	r1, r2, #5
 804c1a8:	693a      	ldr	r2, [r7, #16]
 804c1aa:	440a      	add	r2, r1
 804c1ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804c1b0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 804c1b4:	60d3      	str	r3, [r2, #12]
      }
      break;
 804c1b6:	e006      	b.n	804c1c6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 804c1b8:	2301      	movs	r3, #1
 804c1ba:	77fb      	strb	r3, [r7, #31]
      break;
 804c1bc:	e004      	b.n	804c1c8 <USB_HC_Init+0x14c>
      break;
 804c1be:	bf00      	nop
 804c1c0:	e002      	b.n	804c1c8 <USB_HC_Init+0x14c>
      break;
 804c1c2:	bf00      	nop
 804c1c4:	e000      	b.n	804c1c8 <USB_HC_Init+0x14c>
      break;
 804c1c6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 804c1c8:	78fb      	ldrb	r3, [r7, #3]
 804c1ca:	015a      	lsls	r2, r3, #5
 804c1cc:	693b      	ldr	r3, [r7, #16]
 804c1ce:	4413      	add	r3, r2
 804c1d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804c1d4:	68db      	ldr	r3, [r3, #12]
 804c1d6:	78fa      	ldrb	r2, [r7, #3]
 804c1d8:	0151      	lsls	r1, r2, #5
 804c1da:	693a      	ldr	r2, [r7, #16]
 804c1dc:	440a      	add	r2, r1
 804c1de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804c1e2:	f043 0302 	orr.w	r3, r3, #2
 804c1e6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 804c1e8:	693b      	ldr	r3, [r7, #16]
 804c1ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804c1ee:	699a      	ldr	r2, [r3, #24]
 804c1f0:	78fb      	ldrb	r3, [r7, #3]
 804c1f2:	f003 030f 	and.w	r3, r3, #15
 804c1f6:	2101      	movs	r1, #1
 804c1f8:	fa01 f303 	lsl.w	r3, r1, r3
 804c1fc:	6939      	ldr	r1, [r7, #16]
 804c1fe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 804c202:	4313      	orrs	r3, r2
 804c204:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 804c206:	687b      	ldr	r3, [r7, #4]
 804c208:	699b      	ldr	r3, [r3, #24]
 804c20a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 804c20e:	687b      	ldr	r3, [r7, #4]
 804c210:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 804c212:	f997 3002 	ldrsb.w	r3, [r7, #2]
 804c216:	2b00      	cmp	r3, #0
 804c218:	da03      	bge.n	804c222 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 804c21a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 804c21e:	61bb      	str	r3, [r7, #24]
 804c220:	e001      	b.n	804c226 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 804c222:	2300      	movs	r3, #0
 804c224:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 804c226:	6878      	ldr	r0, [r7, #4]
 804c228:	f7ff feff 	bl	804c02a <USB_GetHostSpeed>
 804c22c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 804c22e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 804c232:	2b02      	cmp	r3, #2
 804c234:	d106      	bne.n	804c244 <USB_HC_Init+0x1c8>
 804c236:	68fb      	ldr	r3, [r7, #12]
 804c238:	2b02      	cmp	r3, #2
 804c23a:	d003      	beq.n	804c244 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 804c23c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 804c240:	617b      	str	r3, [r7, #20]
 804c242:	e001      	b.n	804c248 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 804c244:	2300      	movs	r3, #0
 804c246:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 804c248:	787b      	ldrb	r3, [r7, #1]
 804c24a:	059b      	lsls	r3, r3, #22
 804c24c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 804c250:	78bb      	ldrb	r3, [r7, #2]
 804c252:	02db      	lsls	r3, r3, #11
 804c254:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 804c258:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 804c25a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 804c25e:	049b      	lsls	r3, r3, #18
 804c260:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 804c264:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 804c266:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 804c268:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 804c26c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 804c26e:	69bb      	ldr	r3, [r7, #24]
 804c270:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 804c272:	78fb      	ldrb	r3, [r7, #3]
 804c274:	0159      	lsls	r1, r3, #5
 804c276:	693b      	ldr	r3, [r7, #16]
 804c278:	440b      	add	r3, r1
 804c27a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804c27e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 804c280:	697b      	ldr	r3, [r7, #20]
 804c282:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 804c284:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 804c286:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 804c28a:	2b03      	cmp	r3, #3
 804c28c:	d003      	beq.n	804c296 <USB_HC_Init+0x21a>
 804c28e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 804c292:	2b01      	cmp	r3, #1
 804c294:	d10f      	bne.n	804c2b6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 804c296:	78fb      	ldrb	r3, [r7, #3]
 804c298:	015a      	lsls	r2, r3, #5
 804c29a:	693b      	ldr	r3, [r7, #16]
 804c29c:	4413      	add	r3, r2
 804c29e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804c2a2:	681b      	ldr	r3, [r3, #0]
 804c2a4:	78fa      	ldrb	r2, [r7, #3]
 804c2a6:	0151      	lsls	r1, r2, #5
 804c2a8:	693a      	ldr	r2, [r7, #16]
 804c2aa:	440a      	add	r2, r1
 804c2ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804c2b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 804c2b4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 804c2b6:	7ffb      	ldrb	r3, [r7, #31]
}
 804c2b8:	4618      	mov	r0, r3
 804c2ba:	3720      	adds	r7, #32
 804c2bc:	46bd      	mov	sp, r7
 804c2be:	bd80      	pop	{r7, pc}

0804c2c0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 804c2c0:	b580      	push	{r7, lr}
 804c2c2:	b08c      	sub	sp, #48	; 0x30
 804c2c4:	af02      	add	r7, sp, #8
 804c2c6:	60f8      	str	r0, [r7, #12]
 804c2c8:	60b9      	str	r1, [r7, #8]
 804c2ca:	4613      	mov	r3, r2
 804c2cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804c2ce:	68fb      	ldr	r3, [r7, #12]
 804c2d0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 804c2d2:	68bb      	ldr	r3, [r7, #8]
 804c2d4:	785b      	ldrb	r3, [r3, #1]
 804c2d6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 804c2d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 804c2dc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 804c2de:	68fb      	ldr	r3, [r7, #12]
 804c2e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804c2e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804c2e6:	2b00      	cmp	r3, #0
 804c2e8:	d02d      	beq.n	804c346 <USB_HC_StartXfer+0x86>
 804c2ea:	68bb      	ldr	r3, [r7, #8]
 804c2ec:	791b      	ldrb	r3, [r3, #4]
 804c2ee:	2b00      	cmp	r3, #0
 804c2f0:	d129      	bne.n	804c346 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 804c2f2:	79fb      	ldrb	r3, [r7, #7]
 804c2f4:	2b01      	cmp	r3, #1
 804c2f6:	d117      	bne.n	804c328 <USB_HC_StartXfer+0x68>
 804c2f8:	68bb      	ldr	r3, [r7, #8]
 804c2fa:	79db      	ldrb	r3, [r3, #7]
 804c2fc:	2b00      	cmp	r3, #0
 804c2fe:	d003      	beq.n	804c308 <USB_HC_StartXfer+0x48>
 804c300:	68bb      	ldr	r3, [r7, #8]
 804c302:	79db      	ldrb	r3, [r3, #7]
 804c304:	2b02      	cmp	r3, #2
 804c306:	d10f      	bne.n	804c328 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 804c308:	69fb      	ldr	r3, [r7, #28]
 804c30a:	015a      	lsls	r2, r3, #5
 804c30c:	6a3b      	ldr	r3, [r7, #32]
 804c30e:	4413      	add	r3, r2
 804c310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804c314:	68db      	ldr	r3, [r3, #12]
 804c316:	69fa      	ldr	r2, [r7, #28]
 804c318:	0151      	lsls	r1, r2, #5
 804c31a:	6a3a      	ldr	r2, [r7, #32]
 804c31c:	440a      	add	r2, r1
 804c31e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804c322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 804c326:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 804c328:	79fb      	ldrb	r3, [r7, #7]
 804c32a:	2b00      	cmp	r3, #0
 804c32c:	d10b      	bne.n	804c346 <USB_HC_StartXfer+0x86>
 804c32e:	68bb      	ldr	r3, [r7, #8]
 804c330:	795b      	ldrb	r3, [r3, #5]
 804c332:	2b01      	cmp	r3, #1
 804c334:	d107      	bne.n	804c346 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 804c336:	68bb      	ldr	r3, [r7, #8]
 804c338:	785b      	ldrb	r3, [r3, #1]
 804c33a:	4619      	mov	r1, r3
 804c33c:	68f8      	ldr	r0, [r7, #12]
 804c33e:	f000 fa0f 	bl	804c760 <USB_DoPing>
      return HAL_OK;
 804c342:	2300      	movs	r3, #0
 804c344:	e0f8      	b.n	804c538 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 804c346:	68bb      	ldr	r3, [r7, #8]
 804c348:	695b      	ldr	r3, [r3, #20]
 804c34a:	2b00      	cmp	r3, #0
 804c34c:	d018      	beq.n	804c380 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 804c34e:	68bb      	ldr	r3, [r7, #8]
 804c350:	695b      	ldr	r3, [r3, #20]
 804c352:	68ba      	ldr	r2, [r7, #8]
 804c354:	8912      	ldrh	r2, [r2, #8]
 804c356:	4413      	add	r3, r2
 804c358:	3b01      	subs	r3, #1
 804c35a:	68ba      	ldr	r2, [r7, #8]
 804c35c:	8912      	ldrh	r2, [r2, #8]
 804c35e:	fbb3 f3f2 	udiv	r3, r3, r2
 804c362:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 804c364:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 804c366:	8b7b      	ldrh	r3, [r7, #26]
 804c368:	429a      	cmp	r2, r3
 804c36a:	d90b      	bls.n	804c384 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 804c36c:	8b7b      	ldrh	r3, [r7, #26]
 804c36e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 804c370:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 804c372:	68ba      	ldr	r2, [r7, #8]
 804c374:	8912      	ldrh	r2, [r2, #8]
 804c376:	fb03 f202 	mul.w	r2, r3, r2
 804c37a:	68bb      	ldr	r3, [r7, #8]
 804c37c:	611a      	str	r2, [r3, #16]
 804c37e:	e001      	b.n	804c384 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 804c380:	2301      	movs	r3, #1
 804c382:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 804c384:	68bb      	ldr	r3, [r7, #8]
 804c386:	78db      	ldrb	r3, [r3, #3]
 804c388:	2b00      	cmp	r3, #0
 804c38a:	d007      	beq.n	804c39c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 804c38c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 804c38e:	68ba      	ldr	r2, [r7, #8]
 804c390:	8912      	ldrh	r2, [r2, #8]
 804c392:	fb03 f202 	mul.w	r2, r3, r2
 804c396:	68bb      	ldr	r3, [r7, #8]
 804c398:	611a      	str	r2, [r3, #16]
 804c39a:	e003      	b.n	804c3a4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 804c39c:	68bb      	ldr	r3, [r7, #8]
 804c39e:	695a      	ldr	r2, [r3, #20]
 804c3a0:	68bb      	ldr	r3, [r7, #8]
 804c3a2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 804c3a4:	68bb      	ldr	r3, [r7, #8]
 804c3a6:	691b      	ldr	r3, [r3, #16]
 804c3a8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 804c3ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 804c3ae:	04d9      	lsls	r1, r3, #19
 804c3b0:	4b63      	ldr	r3, [pc, #396]	; (804c540 <USB_HC_StartXfer+0x280>)
 804c3b2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 804c3b4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 804c3b6:	68bb      	ldr	r3, [r7, #8]
 804c3b8:	7a9b      	ldrb	r3, [r3, #10]
 804c3ba:	075b      	lsls	r3, r3, #29
 804c3bc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 804c3c0:	69f9      	ldr	r1, [r7, #28]
 804c3c2:	0148      	lsls	r0, r1, #5
 804c3c4:	6a39      	ldr	r1, [r7, #32]
 804c3c6:	4401      	add	r1, r0
 804c3c8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 804c3cc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 804c3ce:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 804c3d0:	79fb      	ldrb	r3, [r7, #7]
 804c3d2:	2b00      	cmp	r3, #0
 804c3d4:	d009      	beq.n	804c3ea <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 804c3d6:	68bb      	ldr	r3, [r7, #8]
 804c3d8:	68d9      	ldr	r1, [r3, #12]
 804c3da:	69fb      	ldr	r3, [r7, #28]
 804c3dc:	015a      	lsls	r2, r3, #5
 804c3de:	6a3b      	ldr	r3, [r7, #32]
 804c3e0:	4413      	add	r3, r2
 804c3e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804c3e6:	460a      	mov	r2, r1
 804c3e8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 804c3ea:	6a3b      	ldr	r3, [r7, #32]
 804c3ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804c3f0:	689b      	ldr	r3, [r3, #8]
 804c3f2:	f003 0301 	and.w	r3, r3, #1
 804c3f6:	2b00      	cmp	r3, #0
 804c3f8:	bf0c      	ite	eq
 804c3fa:	2301      	moveq	r3, #1
 804c3fc:	2300      	movne	r3, #0
 804c3fe:	b2db      	uxtb	r3, r3
 804c400:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 804c402:	69fb      	ldr	r3, [r7, #28]
 804c404:	015a      	lsls	r2, r3, #5
 804c406:	6a3b      	ldr	r3, [r7, #32]
 804c408:	4413      	add	r3, r2
 804c40a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804c40e:	681b      	ldr	r3, [r3, #0]
 804c410:	69fa      	ldr	r2, [r7, #28]
 804c412:	0151      	lsls	r1, r2, #5
 804c414:	6a3a      	ldr	r2, [r7, #32]
 804c416:	440a      	add	r2, r1
 804c418:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804c41c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 804c420:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 804c422:	69fb      	ldr	r3, [r7, #28]
 804c424:	015a      	lsls	r2, r3, #5
 804c426:	6a3b      	ldr	r3, [r7, #32]
 804c428:	4413      	add	r3, r2
 804c42a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804c42e:	681a      	ldr	r2, [r3, #0]
 804c430:	7e7b      	ldrb	r3, [r7, #25]
 804c432:	075b      	lsls	r3, r3, #29
 804c434:	69f9      	ldr	r1, [r7, #28]
 804c436:	0148      	lsls	r0, r1, #5
 804c438:	6a39      	ldr	r1, [r7, #32]
 804c43a:	4401      	add	r1, r0
 804c43c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 804c440:	4313      	orrs	r3, r2
 804c442:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 804c444:	69fb      	ldr	r3, [r7, #28]
 804c446:	015a      	lsls	r2, r3, #5
 804c448:	6a3b      	ldr	r3, [r7, #32]
 804c44a:	4413      	add	r3, r2
 804c44c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804c450:	681b      	ldr	r3, [r3, #0]
 804c452:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 804c454:	693b      	ldr	r3, [r7, #16]
 804c456:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 804c45a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 804c45c:	68bb      	ldr	r3, [r7, #8]
 804c45e:	78db      	ldrb	r3, [r3, #3]
 804c460:	2b00      	cmp	r3, #0
 804c462:	d004      	beq.n	804c46e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 804c464:	693b      	ldr	r3, [r7, #16]
 804c466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 804c46a:	613b      	str	r3, [r7, #16]
 804c46c:	e003      	b.n	804c476 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 804c46e:	693b      	ldr	r3, [r7, #16]
 804c470:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 804c474:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 804c476:	693b      	ldr	r3, [r7, #16]
 804c478:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 804c47c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 804c47e:	69fb      	ldr	r3, [r7, #28]
 804c480:	015a      	lsls	r2, r3, #5
 804c482:	6a3b      	ldr	r3, [r7, #32]
 804c484:	4413      	add	r3, r2
 804c486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804c48a:	461a      	mov	r2, r3
 804c48c:	693b      	ldr	r3, [r7, #16]
 804c48e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 804c490:	79fb      	ldrb	r3, [r7, #7]
 804c492:	2b00      	cmp	r3, #0
 804c494:	d001      	beq.n	804c49a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 804c496:	2300      	movs	r3, #0
 804c498:	e04e      	b.n	804c538 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 804c49a:	68bb      	ldr	r3, [r7, #8]
 804c49c:	78db      	ldrb	r3, [r3, #3]
 804c49e:	2b00      	cmp	r3, #0
 804c4a0:	d149      	bne.n	804c536 <USB_HC_StartXfer+0x276>
 804c4a2:	68bb      	ldr	r3, [r7, #8]
 804c4a4:	695b      	ldr	r3, [r3, #20]
 804c4a6:	2b00      	cmp	r3, #0
 804c4a8:	d045      	beq.n	804c536 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 804c4aa:	68bb      	ldr	r3, [r7, #8]
 804c4ac:	79db      	ldrb	r3, [r3, #7]
 804c4ae:	2b03      	cmp	r3, #3
 804c4b0:	d830      	bhi.n	804c514 <USB_HC_StartXfer+0x254>
 804c4b2:	a201      	add	r2, pc, #4	; (adr r2, 804c4b8 <USB_HC_StartXfer+0x1f8>)
 804c4b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804c4b8:	0804c4c9 	.word	0x0804c4c9
 804c4bc:	0804c4ed 	.word	0x0804c4ed
 804c4c0:	0804c4c9 	.word	0x0804c4c9
 804c4c4:	0804c4ed 	.word	0x0804c4ed
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 804c4c8:	68bb      	ldr	r3, [r7, #8]
 804c4ca:	695b      	ldr	r3, [r3, #20]
 804c4cc:	3303      	adds	r3, #3
 804c4ce:	089b      	lsrs	r3, r3, #2
 804c4d0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 804c4d2:	8afa      	ldrh	r2, [r7, #22]
 804c4d4:	68fb      	ldr	r3, [r7, #12]
 804c4d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804c4d8:	b29b      	uxth	r3, r3
 804c4da:	429a      	cmp	r2, r3
 804c4dc:	d91c      	bls.n	804c518 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 804c4de:	68fb      	ldr	r3, [r7, #12]
 804c4e0:	699b      	ldr	r3, [r3, #24]
 804c4e2:	f043 0220 	orr.w	r2, r3, #32
 804c4e6:	68fb      	ldr	r3, [r7, #12]
 804c4e8:	619a      	str	r2, [r3, #24]
        }
        break;
 804c4ea:	e015      	b.n	804c518 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 804c4ec:	68bb      	ldr	r3, [r7, #8]
 804c4ee:	695b      	ldr	r3, [r3, #20]
 804c4f0:	3303      	adds	r3, #3
 804c4f2:	089b      	lsrs	r3, r3, #2
 804c4f4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 804c4f6:	8afa      	ldrh	r2, [r7, #22]
 804c4f8:	6a3b      	ldr	r3, [r7, #32]
 804c4fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804c4fe:	691b      	ldr	r3, [r3, #16]
 804c500:	b29b      	uxth	r3, r3
 804c502:	429a      	cmp	r2, r3
 804c504:	d90a      	bls.n	804c51c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 804c506:	68fb      	ldr	r3, [r7, #12]
 804c508:	699b      	ldr	r3, [r3, #24]
 804c50a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 804c50e:	68fb      	ldr	r3, [r7, #12]
 804c510:	619a      	str	r2, [r3, #24]
        }
        break;
 804c512:	e003      	b.n	804c51c <USB_HC_StartXfer+0x25c>

      default:
        break;
 804c514:	bf00      	nop
 804c516:	e002      	b.n	804c51e <USB_HC_StartXfer+0x25e>
        break;
 804c518:	bf00      	nop
 804c51a:	e000      	b.n	804c51e <USB_HC_StartXfer+0x25e>
        break;
 804c51c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 804c51e:	68bb      	ldr	r3, [r7, #8]
 804c520:	68d9      	ldr	r1, [r3, #12]
 804c522:	68bb      	ldr	r3, [r7, #8]
 804c524:	785a      	ldrb	r2, [r3, #1]
 804c526:	68bb      	ldr	r3, [r7, #8]
 804c528:	695b      	ldr	r3, [r3, #20]
 804c52a:	b29b      	uxth	r3, r3
 804c52c:	2000      	movs	r0, #0
 804c52e:	9000      	str	r0, [sp, #0]
 804c530:	68f8      	ldr	r0, [r7, #12]
 804c532:	f7ff fb37 	bl	804bba4 <USB_WritePacket>
  }

  return HAL_OK;
 804c536:	2300      	movs	r3, #0
}
 804c538:	4618      	mov	r0, r3
 804c53a:	3728      	adds	r7, #40	; 0x28
 804c53c:	46bd      	mov	sp, r7
 804c53e:	bd80      	pop	{r7, pc}
 804c540:	1ff80000 	.word	0x1ff80000

0804c544 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 804c544:	b480      	push	{r7}
 804c546:	b085      	sub	sp, #20
 804c548:	af00      	add	r7, sp, #0
 804c54a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804c54c:	687b      	ldr	r3, [r7, #4]
 804c54e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 804c550:	68fb      	ldr	r3, [r7, #12]
 804c552:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804c556:	695b      	ldr	r3, [r3, #20]
 804c558:	b29b      	uxth	r3, r3
}
 804c55a:	4618      	mov	r0, r3
 804c55c:	3714      	adds	r7, #20
 804c55e:	46bd      	mov	sp, r7
 804c560:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c564:	4770      	bx	lr

0804c566 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 804c566:	b480      	push	{r7}
 804c568:	b089      	sub	sp, #36	; 0x24
 804c56a:	af00      	add	r7, sp, #0
 804c56c:	6078      	str	r0, [r7, #4]
 804c56e:	460b      	mov	r3, r1
 804c570:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804c572:	687b      	ldr	r3, [r7, #4]
 804c574:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 804c576:	78fb      	ldrb	r3, [r7, #3]
 804c578:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 804c57a:	2300      	movs	r3, #0
 804c57c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 804c57e:	69bb      	ldr	r3, [r7, #24]
 804c580:	015a      	lsls	r2, r3, #5
 804c582:	69fb      	ldr	r3, [r7, #28]
 804c584:	4413      	add	r3, r2
 804c586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804c58a:	681b      	ldr	r3, [r3, #0]
 804c58c:	0c9b      	lsrs	r3, r3, #18
 804c58e:	f003 0303 	and.w	r3, r3, #3
 804c592:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 804c594:	69bb      	ldr	r3, [r7, #24]
 804c596:	015a      	lsls	r2, r3, #5
 804c598:	69fb      	ldr	r3, [r7, #28]
 804c59a:	4413      	add	r3, r2
 804c59c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804c5a0:	681b      	ldr	r3, [r3, #0]
 804c5a2:	0fdb      	lsrs	r3, r3, #31
 804c5a4:	f003 0301 	and.w	r3, r3, #1
 804c5a8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 804c5aa:	687b      	ldr	r3, [r7, #4]
 804c5ac:	689b      	ldr	r3, [r3, #8]
 804c5ae:	f003 0320 	and.w	r3, r3, #32
 804c5b2:	2b20      	cmp	r3, #32
 804c5b4:	d104      	bne.n	804c5c0 <USB_HC_Halt+0x5a>
 804c5b6:	693b      	ldr	r3, [r7, #16]
 804c5b8:	2b00      	cmp	r3, #0
 804c5ba:	d101      	bne.n	804c5c0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 804c5bc:	2300      	movs	r3, #0
 804c5be:	e0c8      	b.n	804c752 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 804c5c0:	697b      	ldr	r3, [r7, #20]
 804c5c2:	2b00      	cmp	r3, #0
 804c5c4:	d002      	beq.n	804c5cc <USB_HC_Halt+0x66>
 804c5c6:	697b      	ldr	r3, [r7, #20]
 804c5c8:	2b02      	cmp	r3, #2
 804c5ca:	d163      	bne.n	804c694 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 804c5cc:	69bb      	ldr	r3, [r7, #24]
 804c5ce:	015a      	lsls	r2, r3, #5
 804c5d0:	69fb      	ldr	r3, [r7, #28]
 804c5d2:	4413      	add	r3, r2
 804c5d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804c5d8:	681b      	ldr	r3, [r3, #0]
 804c5da:	69ba      	ldr	r2, [r7, #24]
 804c5dc:	0151      	lsls	r1, r2, #5
 804c5de:	69fa      	ldr	r2, [r7, #28]
 804c5e0:	440a      	add	r2, r1
 804c5e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804c5e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 804c5ea:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 804c5ec:	687b      	ldr	r3, [r7, #4]
 804c5ee:	689b      	ldr	r3, [r3, #8]
 804c5f0:	f003 0320 	and.w	r3, r3, #32
 804c5f4:	2b00      	cmp	r3, #0
 804c5f6:	f040 80ab 	bne.w	804c750 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 804c5fa:	687b      	ldr	r3, [r7, #4]
 804c5fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804c5fe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 804c602:	2b00      	cmp	r3, #0
 804c604:	d133      	bne.n	804c66e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 804c606:	69bb      	ldr	r3, [r7, #24]
 804c608:	015a      	lsls	r2, r3, #5
 804c60a:	69fb      	ldr	r3, [r7, #28]
 804c60c:	4413      	add	r3, r2
 804c60e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804c612:	681b      	ldr	r3, [r3, #0]
 804c614:	69ba      	ldr	r2, [r7, #24]
 804c616:	0151      	lsls	r1, r2, #5
 804c618:	69fa      	ldr	r2, [r7, #28]
 804c61a:	440a      	add	r2, r1
 804c61c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804c620:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 804c624:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 804c626:	69bb      	ldr	r3, [r7, #24]
 804c628:	015a      	lsls	r2, r3, #5
 804c62a:	69fb      	ldr	r3, [r7, #28]
 804c62c:	4413      	add	r3, r2
 804c62e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804c632:	681b      	ldr	r3, [r3, #0]
 804c634:	69ba      	ldr	r2, [r7, #24]
 804c636:	0151      	lsls	r1, r2, #5
 804c638:	69fa      	ldr	r2, [r7, #28]
 804c63a:	440a      	add	r2, r1
 804c63c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804c640:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 804c644:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 804c646:	68fb      	ldr	r3, [r7, #12]
 804c648:	3301      	adds	r3, #1
 804c64a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 804c64c:	68fb      	ldr	r3, [r7, #12]
 804c64e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 804c652:	d81d      	bhi.n	804c690 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 804c654:	69bb      	ldr	r3, [r7, #24]
 804c656:	015a      	lsls	r2, r3, #5
 804c658:	69fb      	ldr	r3, [r7, #28]
 804c65a:	4413      	add	r3, r2
 804c65c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804c660:	681b      	ldr	r3, [r3, #0]
 804c662:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 804c666:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 804c66a:	d0ec      	beq.n	804c646 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 804c66c:	e070      	b.n	804c750 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 804c66e:	69bb      	ldr	r3, [r7, #24]
 804c670:	015a      	lsls	r2, r3, #5
 804c672:	69fb      	ldr	r3, [r7, #28]
 804c674:	4413      	add	r3, r2
 804c676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804c67a:	681b      	ldr	r3, [r3, #0]
 804c67c:	69ba      	ldr	r2, [r7, #24]
 804c67e:	0151      	lsls	r1, r2, #5
 804c680:	69fa      	ldr	r2, [r7, #28]
 804c682:	440a      	add	r2, r1
 804c684:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804c688:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 804c68c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 804c68e:	e05f      	b.n	804c750 <USB_HC_Halt+0x1ea>
            break;
 804c690:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 804c692:	e05d      	b.n	804c750 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 804c694:	69bb      	ldr	r3, [r7, #24]
 804c696:	015a      	lsls	r2, r3, #5
 804c698:	69fb      	ldr	r3, [r7, #28]
 804c69a:	4413      	add	r3, r2
 804c69c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804c6a0:	681b      	ldr	r3, [r3, #0]
 804c6a2:	69ba      	ldr	r2, [r7, #24]
 804c6a4:	0151      	lsls	r1, r2, #5
 804c6a6:	69fa      	ldr	r2, [r7, #28]
 804c6a8:	440a      	add	r2, r1
 804c6aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804c6ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 804c6b2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 804c6b4:	69fb      	ldr	r3, [r7, #28]
 804c6b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804c6ba:	691b      	ldr	r3, [r3, #16]
 804c6bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 804c6c0:	2b00      	cmp	r3, #0
 804c6c2:	d133      	bne.n	804c72c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 804c6c4:	69bb      	ldr	r3, [r7, #24]
 804c6c6:	015a      	lsls	r2, r3, #5
 804c6c8:	69fb      	ldr	r3, [r7, #28]
 804c6ca:	4413      	add	r3, r2
 804c6cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804c6d0:	681b      	ldr	r3, [r3, #0]
 804c6d2:	69ba      	ldr	r2, [r7, #24]
 804c6d4:	0151      	lsls	r1, r2, #5
 804c6d6:	69fa      	ldr	r2, [r7, #28]
 804c6d8:	440a      	add	r2, r1
 804c6da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804c6de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 804c6e2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 804c6e4:	69bb      	ldr	r3, [r7, #24]
 804c6e6:	015a      	lsls	r2, r3, #5
 804c6e8:	69fb      	ldr	r3, [r7, #28]
 804c6ea:	4413      	add	r3, r2
 804c6ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804c6f0:	681b      	ldr	r3, [r3, #0]
 804c6f2:	69ba      	ldr	r2, [r7, #24]
 804c6f4:	0151      	lsls	r1, r2, #5
 804c6f6:	69fa      	ldr	r2, [r7, #28]
 804c6f8:	440a      	add	r2, r1
 804c6fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804c6fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 804c702:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 804c704:	68fb      	ldr	r3, [r7, #12]
 804c706:	3301      	adds	r3, #1
 804c708:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 804c70a:	68fb      	ldr	r3, [r7, #12]
 804c70c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 804c710:	d81d      	bhi.n	804c74e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 804c712:	69bb      	ldr	r3, [r7, #24]
 804c714:	015a      	lsls	r2, r3, #5
 804c716:	69fb      	ldr	r3, [r7, #28]
 804c718:	4413      	add	r3, r2
 804c71a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804c71e:	681b      	ldr	r3, [r3, #0]
 804c720:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 804c724:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 804c728:	d0ec      	beq.n	804c704 <USB_HC_Halt+0x19e>
 804c72a:	e011      	b.n	804c750 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 804c72c:	69bb      	ldr	r3, [r7, #24]
 804c72e:	015a      	lsls	r2, r3, #5
 804c730:	69fb      	ldr	r3, [r7, #28]
 804c732:	4413      	add	r3, r2
 804c734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804c738:	681b      	ldr	r3, [r3, #0]
 804c73a:	69ba      	ldr	r2, [r7, #24]
 804c73c:	0151      	lsls	r1, r2, #5
 804c73e:	69fa      	ldr	r2, [r7, #28]
 804c740:	440a      	add	r2, r1
 804c742:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804c746:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 804c74a:	6013      	str	r3, [r2, #0]
 804c74c:	e000      	b.n	804c750 <USB_HC_Halt+0x1ea>
          break;
 804c74e:	bf00      	nop
    }
  }

  return HAL_OK;
 804c750:	2300      	movs	r3, #0
}
 804c752:	4618      	mov	r0, r3
 804c754:	3724      	adds	r7, #36	; 0x24
 804c756:	46bd      	mov	sp, r7
 804c758:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c75c:	4770      	bx	lr
	...

0804c760 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 804c760:	b480      	push	{r7}
 804c762:	b087      	sub	sp, #28
 804c764:	af00      	add	r7, sp, #0
 804c766:	6078      	str	r0, [r7, #4]
 804c768:	460b      	mov	r3, r1
 804c76a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804c76c:	687b      	ldr	r3, [r7, #4]
 804c76e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 804c770:	78fb      	ldrb	r3, [r7, #3]
 804c772:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 804c774:	2301      	movs	r3, #1
 804c776:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 804c778:	68fb      	ldr	r3, [r7, #12]
 804c77a:	04da      	lsls	r2, r3, #19
 804c77c:	4b15      	ldr	r3, [pc, #84]	; (804c7d4 <USB_DoPing+0x74>)
 804c77e:	4013      	ands	r3, r2
 804c780:	693a      	ldr	r2, [r7, #16]
 804c782:	0151      	lsls	r1, r2, #5
 804c784:	697a      	ldr	r2, [r7, #20]
 804c786:	440a      	add	r2, r1
 804c788:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804c78c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 804c790:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 804c792:	693b      	ldr	r3, [r7, #16]
 804c794:	015a      	lsls	r2, r3, #5
 804c796:	697b      	ldr	r3, [r7, #20]
 804c798:	4413      	add	r3, r2
 804c79a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804c79e:	681b      	ldr	r3, [r3, #0]
 804c7a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 804c7a2:	68bb      	ldr	r3, [r7, #8]
 804c7a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 804c7a8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 804c7aa:	68bb      	ldr	r3, [r7, #8]
 804c7ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 804c7b0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 804c7b2:	693b      	ldr	r3, [r7, #16]
 804c7b4:	015a      	lsls	r2, r3, #5
 804c7b6:	697b      	ldr	r3, [r7, #20]
 804c7b8:	4413      	add	r3, r2
 804c7ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804c7be:	461a      	mov	r2, r3
 804c7c0:	68bb      	ldr	r3, [r7, #8]
 804c7c2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 804c7c4:	2300      	movs	r3, #0
}
 804c7c6:	4618      	mov	r0, r3
 804c7c8:	371c      	adds	r7, #28
 804c7ca:	46bd      	mov	sp, r7
 804c7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c7d0:	4770      	bx	lr
 804c7d2:	bf00      	nop
 804c7d4:	1ff80000 	.word	0x1ff80000

0804c7d8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 804c7d8:	b580      	push	{r7, lr}
 804c7da:	b088      	sub	sp, #32
 804c7dc:	af00      	add	r7, sp, #0
 804c7de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 804c7e0:	2300      	movs	r3, #0
 804c7e2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804c7e4:	687b      	ldr	r3, [r7, #4]
 804c7e6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 804c7e8:	2300      	movs	r3, #0
 804c7ea:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 804c7ec:	6878      	ldr	r0, [r7, #4]
 804c7ee:	f7ff f918 	bl	804ba22 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 804c7f2:	2110      	movs	r1, #16
 804c7f4:	6878      	ldr	r0, [r7, #4]
 804c7f6:	f7ff f971 	bl	804badc <USB_FlushTxFifo>
 804c7fa:	4603      	mov	r3, r0
 804c7fc:	2b00      	cmp	r3, #0
 804c7fe:	d001      	beq.n	804c804 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 804c800:	2301      	movs	r3, #1
 804c802:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 804c804:	6878      	ldr	r0, [r7, #4]
 804c806:	f7ff f99d 	bl	804bb44 <USB_FlushRxFifo>
 804c80a:	4603      	mov	r3, r0
 804c80c:	2b00      	cmp	r3, #0
 804c80e:	d001      	beq.n	804c814 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 804c810:	2301      	movs	r3, #1
 804c812:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 804c814:	2300      	movs	r3, #0
 804c816:	61bb      	str	r3, [r7, #24]
 804c818:	e01f      	b.n	804c85a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 804c81a:	69bb      	ldr	r3, [r7, #24]
 804c81c:	015a      	lsls	r2, r3, #5
 804c81e:	697b      	ldr	r3, [r7, #20]
 804c820:	4413      	add	r3, r2
 804c822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804c826:	681b      	ldr	r3, [r3, #0]
 804c828:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 804c82a:	693b      	ldr	r3, [r7, #16]
 804c82c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 804c830:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 804c832:	693b      	ldr	r3, [r7, #16]
 804c834:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 804c838:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 804c83a:	693b      	ldr	r3, [r7, #16]
 804c83c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 804c840:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 804c842:	69bb      	ldr	r3, [r7, #24]
 804c844:	015a      	lsls	r2, r3, #5
 804c846:	697b      	ldr	r3, [r7, #20]
 804c848:	4413      	add	r3, r2
 804c84a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804c84e:	461a      	mov	r2, r3
 804c850:	693b      	ldr	r3, [r7, #16]
 804c852:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 804c854:	69bb      	ldr	r3, [r7, #24]
 804c856:	3301      	adds	r3, #1
 804c858:	61bb      	str	r3, [r7, #24]
 804c85a:	69bb      	ldr	r3, [r7, #24]
 804c85c:	2b0f      	cmp	r3, #15
 804c85e:	d9dc      	bls.n	804c81a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 804c860:	2300      	movs	r3, #0
 804c862:	61bb      	str	r3, [r7, #24]
 804c864:	e034      	b.n	804c8d0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 804c866:	69bb      	ldr	r3, [r7, #24]
 804c868:	015a      	lsls	r2, r3, #5
 804c86a:	697b      	ldr	r3, [r7, #20]
 804c86c:	4413      	add	r3, r2
 804c86e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804c872:	681b      	ldr	r3, [r3, #0]
 804c874:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 804c876:	693b      	ldr	r3, [r7, #16]
 804c878:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 804c87c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 804c87e:	693b      	ldr	r3, [r7, #16]
 804c880:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 804c884:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 804c886:	693b      	ldr	r3, [r7, #16]
 804c888:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 804c88c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 804c88e:	69bb      	ldr	r3, [r7, #24]
 804c890:	015a      	lsls	r2, r3, #5
 804c892:	697b      	ldr	r3, [r7, #20]
 804c894:	4413      	add	r3, r2
 804c896:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804c89a:	461a      	mov	r2, r3
 804c89c:	693b      	ldr	r3, [r7, #16]
 804c89e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 804c8a0:	68fb      	ldr	r3, [r7, #12]
 804c8a2:	3301      	adds	r3, #1
 804c8a4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 804c8a6:	68fb      	ldr	r3, [r7, #12]
 804c8a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 804c8ac:	d80c      	bhi.n	804c8c8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 804c8ae:	69bb      	ldr	r3, [r7, #24]
 804c8b0:	015a      	lsls	r2, r3, #5
 804c8b2:	697b      	ldr	r3, [r7, #20]
 804c8b4:	4413      	add	r3, r2
 804c8b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804c8ba:	681b      	ldr	r3, [r3, #0]
 804c8bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 804c8c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 804c8c4:	d0ec      	beq.n	804c8a0 <USB_StopHost+0xc8>
 804c8c6:	e000      	b.n	804c8ca <USB_StopHost+0xf2>
        break;
 804c8c8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 804c8ca:	69bb      	ldr	r3, [r7, #24]
 804c8cc:	3301      	adds	r3, #1
 804c8ce:	61bb      	str	r3, [r7, #24]
 804c8d0:	69bb      	ldr	r3, [r7, #24]
 804c8d2:	2b0f      	cmp	r3, #15
 804c8d4:	d9c7      	bls.n	804c866 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 804c8d6:	697b      	ldr	r3, [r7, #20]
 804c8d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804c8dc:	461a      	mov	r2, r3
 804c8de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804c8e2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 804c8e4:	687b      	ldr	r3, [r7, #4]
 804c8e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 804c8ea:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 804c8ec:	6878      	ldr	r0, [r7, #4]
 804c8ee:	f7ff f887 	bl	804ba00 <USB_EnableGlobalInt>

  return ret;
 804c8f2:	7ffb      	ldrb	r3, [r7, #31]
}
 804c8f4:	4618      	mov	r0, r3
 804c8f6:	3720      	adds	r7, #32
 804c8f8:	46bd      	mov	sp, r7
 804c8fa:	bd80      	pop	{r7, pc}

0804c8fc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 804c8fc:	b580      	push	{r7, lr}
 804c8fe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 804c900:	4904      	ldr	r1, [pc, #16]	; (804c914 <MX_FATFS_Init+0x18>)
 804c902:	4805      	ldr	r0, [pc, #20]	; (804c918 <MX_FATFS_Init+0x1c>)
 804c904:	f009 f95c 	bl	8055bc0 <FATFS_LinkDriver>
 804c908:	4603      	mov	r3, r0
 804c90a:	461a      	mov	r2, r3
 804c90c:	4b03      	ldr	r3, [pc, #12]	; (804c91c <MX_FATFS_Init+0x20>)
 804c90e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 804c910:	bf00      	nop
 804c912:	bd80      	pop	{r7, pc}
 804c914:	24000b50 	.word	0x24000b50
 804c918:	0805b990 	.word	0x0805b990
 804c91c:	24000b4c 	.word	0x24000b4c

0804c920 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 804c920:	b480      	push	{r7}
 804c922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 804c924:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 804c926:	4618      	mov	r0, r3
 804c928:	46bd      	mov	sp, r7
 804c92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c92e:	4770      	bx	lr

0804c930 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 804c930:	b480      	push	{r7}
 804c932:	b083      	sub	sp, #12
 804c934:	af00      	add	r7, sp, #0
 804c936:	4603      	mov	r3, r0
 804c938:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 804c93a:	2300      	movs	r3, #0
}
 804c93c:	4618      	mov	r0, r3
 804c93e:	370c      	adds	r7, #12
 804c940:	46bd      	mov	sp, r7
 804c942:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c946:	4770      	bx	lr

0804c948 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 804c948:	b580      	push	{r7, lr}
 804c94a:	b084      	sub	sp, #16
 804c94c:	af00      	add	r7, sp, #0
 804c94e:	4603      	mov	r3, r0
 804c950:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 804c952:	2301      	movs	r3, #1
 804c954:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 804c956:	79fb      	ldrb	r3, [r7, #7]
 804c958:	4619      	mov	r1, r3
 804c95a:	4808      	ldr	r0, [pc, #32]	; (804c97c <USBH_status+0x34>)
 804c95c:	f000 fe73 	bl	804d646 <USBH_MSC_UnitIsReady>
 804c960:	4603      	mov	r3, r0
 804c962:	2b00      	cmp	r3, #0
 804c964:	d002      	beq.n	804c96c <USBH_status+0x24>
  {
    res = RES_OK;
 804c966:	2300      	movs	r3, #0
 804c968:	73fb      	strb	r3, [r7, #15]
 804c96a:	e001      	b.n	804c970 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 804c96c:	2301      	movs	r3, #1
 804c96e:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 804c970:	7bfb      	ldrb	r3, [r7, #15]
}
 804c972:	4618      	mov	r0, r3
 804c974:	3710      	adds	r7, #16
 804c976:	46bd      	mov	sp, r7
 804c978:	bd80      	pop	{r7, pc}
 804c97a:	bf00      	nop
 804c97c:	24006aec 	.word	0x24006aec

0804c980 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 804c980:	b580      	push	{r7, lr}
 804c982:	b094      	sub	sp, #80	; 0x50
 804c984:	af02      	add	r7, sp, #8
 804c986:	60b9      	str	r1, [r7, #8]
 804c988:	607a      	str	r2, [r7, #4]
 804c98a:	603b      	str	r3, [r7, #0]
 804c98c:	4603      	mov	r3, r0
 804c98e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 804c990:	2301      	movs	r3, #1
 804c992:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 804c996:	7bf9      	ldrb	r1, [r7, #15]
 804c998:	683b      	ldr	r3, [r7, #0]
 804c99a:	9300      	str	r3, [sp, #0]
 804c99c:	68bb      	ldr	r3, [r7, #8]
 804c99e:	687a      	ldr	r2, [r7, #4]
 804c9a0:	4813      	ldr	r0, [pc, #76]	; (804c9f0 <USBH_read+0x70>)
 804c9a2:	f000 fe9a 	bl	804d6da <USBH_MSC_Read>
 804c9a6:	4603      	mov	r3, r0
 804c9a8:	2b00      	cmp	r3, #0
 804c9aa:	d103      	bne.n	804c9b4 <USBH_read+0x34>
  {
    res = RES_OK;
 804c9ac:	2300      	movs	r3, #0
 804c9ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 804c9b2:	e017      	b.n	804c9e4 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 804c9b4:	f107 0210 	add.w	r2, r7, #16
 804c9b8:	7bfb      	ldrb	r3, [r7, #15]
 804c9ba:	4619      	mov	r1, r3
 804c9bc:	480c      	ldr	r0, [pc, #48]	; (804c9f0 <USBH_read+0x70>)
 804c9be:	f000 fe68 	bl	804d692 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 804c9c2:	7f7b      	ldrb	r3, [r7, #29]
 804c9c4:	2b3a      	cmp	r3, #58	; 0x3a
 804c9c6:	d005      	beq.n	804c9d4 <USBH_read+0x54>
 804c9c8:	2b3a      	cmp	r3, #58	; 0x3a
 804c9ca:	dc07      	bgt.n	804c9dc <USBH_read+0x5c>
 804c9cc:	2b04      	cmp	r3, #4
 804c9ce:	d001      	beq.n	804c9d4 <USBH_read+0x54>
 804c9d0:	2b28      	cmp	r3, #40	; 0x28
 804c9d2:	d103      	bne.n	804c9dc <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 804c9d4:	2303      	movs	r3, #3
 804c9d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 804c9da:	e003      	b.n	804c9e4 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 804c9dc:	2301      	movs	r3, #1
 804c9de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 804c9e2:	bf00      	nop
    }
  }

  return res;
 804c9e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 804c9e8:	4618      	mov	r0, r3
 804c9ea:	3748      	adds	r7, #72	; 0x48
 804c9ec:	46bd      	mov	sp, r7
 804c9ee:	bd80      	pop	{r7, pc}
 804c9f0:	24006aec 	.word	0x24006aec

0804c9f4 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 804c9f4:	b580      	push	{r7, lr}
 804c9f6:	b094      	sub	sp, #80	; 0x50
 804c9f8:	af02      	add	r7, sp, #8
 804c9fa:	60b9      	str	r1, [r7, #8]
 804c9fc:	607a      	str	r2, [r7, #4]
 804c9fe:	603b      	str	r3, [r7, #0]
 804ca00:	4603      	mov	r3, r0
 804ca02:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 804ca04:	2301      	movs	r3, #1
 804ca06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 804ca0a:	7bf9      	ldrb	r1, [r7, #15]
 804ca0c:	683b      	ldr	r3, [r7, #0]
 804ca0e:	9300      	str	r3, [sp, #0]
 804ca10:	68bb      	ldr	r3, [r7, #8]
 804ca12:	687a      	ldr	r2, [r7, #4]
 804ca14:	4817      	ldr	r0, [pc, #92]	; (804ca74 <USBH_write+0x80>)
 804ca16:	f000 fec9 	bl	804d7ac <USBH_MSC_Write>
 804ca1a:	4603      	mov	r3, r0
 804ca1c:	2b00      	cmp	r3, #0
 804ca1e:	d103      	bne.n	804ca28 <USBH_write+0x34>
  {
    res = RES_OK;
 804ca20:	2300      	movs	r3, #0
 804ca22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 804ca26:	e01f      	b.n	804ca68 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 804ca28:	f107 0210 	add.w	r2, r7, #16
 804ca2c:	7bfb      	ldrb	r3, [r7, #15]
 804ca2e:	4619      	mov	r1, r3
 804ca30:	4810      	ldr	r0, [pc, #64]	; (804ca74 <USBH_write+0x80>)
 804ca32:	f000 fe2e 	bl	804d692 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 804ca36:	7f7b      	ldrb	r3, [r7, #29]
 804ca38:	2b3a      	cmp	r3, #58	; 0x3a
 804ca3a:	d00d      	beq.n	804ca58 <USBH_write+0x64>
 804ca3c:	2b3a      	cmp	r3, #58	; 0x3a
 804ca3e:	dc0f      	bgt.n	804ca60 <USBH_write+0x6c>
 804ca40:	2b28      	cmp	r3, #40	; 0x28
 804ca42:	d009      	beq.n	804ca58 <USBH_write+0x64>
 804ca44:	2b28      	cmp	r3, #40	; 0x28
 804ca46:	dc0b      	bgt.n	804ca60 <USBH_write+0x6c>
 804ca48:	2b04      	cmp	r3, #4
 804ca4a:	d005      	beq.n	804ca58 <USBH_write+0x64>
 804ca4c:	2b27      	cmp	r3, #39	; 0x27
 804ca4e:	d107      	bne.n	804ca60 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 804ca50:	2302      	movs	r3, #2
 804ca52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 804ca56:	e007      	b.n	804ca68 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 804ca58:	2303      	movs	r3, #3
 804ca5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 804ca5e:	e003      	b.n	804ca68 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 804ca60:	2301      	movs	r3, #1
 804ca62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 804ca66:	bf00      	nop
    }
  }

  return res;
 804ca68:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 804ca6c:	4618      	mov	r0, r3
 804ca6e:	3748      	adds	r7, #72	; 0x48
 804ca70:	46bd      	mov	sp, r7
 804ca72:	bd80      	pop	{r7, pc}
 804ca74:	24006aec 	.word	0x24006aec

0804ca78 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 804ca78:	b580      	push	{r7, lr}
 804ca7a:	b090      	sub	sp, #64	; 0x40
 804ca7c:	af00      	add	r7, sp, #0
 804ca7e:	4603      	mov	r3, r0
 804ca80:	603a      	str	r2, [r7, #0]
 804ca82:	71fb      	strb	r3, [r7, #7]
 804ca84:	460b      	mov	r3, r1
 804ca86:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 804ca88:	2301      	movs	r3, #1
 804ca8a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 804ca8e:	79bb      	ldrb	r3, [r7, #6]
 804ca90:	2b03      	cmp	r3, #3
 804ca92:	d852      	bhi.n	804cb3a <USBH_ioctl+0xc2>
 804ca94:	a201      	add	r2, pc, #4	; (adr r2, 804ca9c <USBH_ioctl+0x24>)
 804ca96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804ca9a:	bf00      	nop
 804ca9c:	0804caad 	.word	0x0804caad
 804caa0:	0804cab5 	.word	0x0804cab5
 804caa4:	0804cadf 	.word	0x0804cadf
 804caa8:	0804cb0b 	.word	0x0804cb0b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 804caac:	2300      	movs	r3, #0
 804caae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 804cab2:	e045      	b.n	804cb40 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 804cab4:	f107 0208 	add.w	r2, r7, #8
 804cab8:	79fb      	ldrb	r3, [r7, #7]
 804caba:	4619      	mov	r1, r3
 804cabc:	4823      	ldr	r0, [pc, #140]	; (804cb4c <USBH_ioctl+0xd4>)
 804cabe:	f000 fde8 	bl	804d692 <USBH_MSC_GetLUNInfo>
 804cac2:	4603      	mov	r3, r0
 804cac4:	2b00      	cmp	r3, #0
 804cac6:	d106      	bne.n	804cad6 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 804cac8:	68fa      	ldr	r2, [r7, #12]
 804caca:	683b      	ldr	r3, [r7, #0]
 804cacc:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 804cace:	2300      	movs	r3, #0
 804cad0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 804cad4:	e034      	b.n	804cb40 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 804cad6:	2301      	movs	r3, #1
 804cad8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 804cadc:	e030      	b.n	804cb40 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 804cade:	f107 0208 	add.w	r2, r7, #8
 804cae2:	79fb      	ldrb	r3, [r7, #7]
 804cae4:	4619      	mov	r1, r3
 804cae6:	4819      	ldr	r0, [pc, #100]	; (804cb4c <USBH_ioctl+0xd4>)
 804cae8:	f000 fdd3 	bl	804d692 <USBH_MSC_GetLUNInfo>
 804caec:	4603      	mov	r3, r0
 804caee:	2b00      	cmp	r3, #0
 804caf0:	d107      	bne.n	804cb02 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 804caf2:	8a3b      	ldrh	r3, [r7, #16]
 804caf4:	461a      	mov	r2, r3
 804caf6:	683b      	ldr	r3, [r7, #0]
 804caf8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 804cafa:	2300      	movs	r3, #0
 804cafc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 804cb00:	e01e      	b.n	804cb40 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 804cb02:	2301      	movs	r3, #1
 804cb04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 804cb08:	e01a      	b.n	804cb40 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 804cb0a:	f107 0208 	add.w	r2, r7, #8
 804cb0e:	79fb      	ldrb	r3, [r7, #7]
 804cb10:	4619      	mov	r1, r3
 804cb12:	480e      	ldr	r0, [pc, #56]	; (804cb4c <USBH_ioctl+0xd4>)
 804cb14:	f000 fdbd 	bl	804d692 <USBH_MSC_GetLUNInfo>
 804cb18:	4603      	mov	r3, r0
 804cb1a:	2b00      	cmp	r3, #0
 804cb1c:	d109      	bne.n	804cb32 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 804cb1e:	8a3b      	ldrh	r3, [r7, #16]
 804cb20:	0a5b      	lsrs	r3, r3, #9
 804cb22:	b29b      	uxth	r3, r3
 804cb24:	461a      	mov	r2, r3
 804cb26:	683b      	ldr	r3, [r7, #0]
 804cb28:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 804cb2a:	2300      	movs	r3, #0
 804cb2c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 804cb30:	e006      	b.n	804cb40 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 804cb32:	2301      	movs	r3, #1
 804cb34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 804cb38:	e002      	b.n	804cb40 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 804cb3a:	2304      	movs	r3, #4
 804cb3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 804cb40:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 804cb44:	4618      	mov	r0, r3
 804cb46:	3740      	adds	r7, #64	; 0x40
 804cb48:	46bd      	mov	sp, r7
 804cb4a:	bd80      	pop	{r7, pc}
 804cb4c:	24006aec 	.word	0x24006aec

0804cb50 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 804cb50:	b590      	push	{r4, r7, lr}
 804cb52:	b089      	sub	sp, #36	; 0x24
 804cb54:	af04      	add	r7, sp, #16
 804cb56:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 804cb58:	687b      	ldr	r3, [r7, #4]
 804cb5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804cb5e:	7919      	ldrb	r1, [r3, #4]
 804cb60:	2350      	movs	r3, #80	; 0x50
 804cb62:	2206      	movs	r2, #6
 804cb64:	6878      	ldr	r0, [r7, #4]
 804cb66:	f001 fd5f 	bl	804e628 <USBH_FindInterface>
 804cb6a:	4603      	mov	r3, r0
 804cb6c:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 804cb6e:	7bfb      	ldrb	r3, [r7, #15]
 804cb70:	2bff      	cmp	r3, #255	; 0xff
 804cb72:	d002      	beq.n	804cb7a <USBH_MSC_InterfaceInit+0x2a>
 804cb74:	7bfb      	ldrb	r3, [r7, #15]
 804cb76:	2b01      	cmp	r3, #1
 804cb78:	d901      	bls.n	804cb7e <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 804cb7a:	2302      	movs	r3, #2
 804cb7c:	e106      	b.n	804cd8c <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 804cb7e:	7bfb      	ldrb	r3, [r7, #15]
 804cb80:	4619      	mov	r1, r3
 804cb82:	6878      	ldr	r0, [r7, #4]
 804cb84:	f001 fd34 	bl	804e5f0 <USBH_SelectInterface>
 804cb88:	4603      	mov	r3, r0
 804cb8a:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 804cb8c:	7bbb      	ldrb	r3, [r7, #14]
 804cb8e:	2b00      	cmp	r3, #0
 804cb90:	d001      	beq.n	804cb96 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 804cb92:	2302      	movs	r3, #2
 804cb94:	e0fa      	b.n	804cd8c <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 804cb96:	687b      	ldr	r3, [r7, #4]
 804cb98:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 804cb9c:	f44f 7080 	mov.w	r0, #256	; 0x100
 804cba0:	f00d f9a2 	bl	8059ee8 <malloc>
 804cba4:	4603      	mov	r3, r0
 804cba6:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 804cba8:	687b      	ldr	r3, [r7, #4]
 804cbaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804cbae:	69db      	ldr	r3, [r3, #28]
 804cbb0:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 804cbb2:	68bb      	ldr	r3, [r7, #8]
 804cbb4:	2b00      	cmp	r3, #0
 804cbb6:	d101      	bne.n	804cbbc <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 804cbb8:	2302      	movs	r3, #2
 804cbba:	e0e7      	b.n	804cd8c <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 804cbbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 804cbc0:	2100      	movs	r1, #0
 804cbc2:	68b8      	ldr	r0, [r7, #8]
 804cbc4:	f00d f9ae 	bl	8059f24 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 804cbc8:	7bfb      	ldrb	r3, [r7, #15]
 804cbca:	687a      	ldr	r2, [r7, #4]
 804cbcc:	211a      	movs	r1, #26
 804cbce:	fb01 f303 	mul.w	r3, r1, r3
 804cbd2:	4413      	add	r3, r2
 804cbd4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 804cbd8:	781b      	ldrb	r3, [r3, #0]
 804cbda:	b25b      	sxtb	r3, r3
 804cbdc:	2b00      	cmp	r3, #0
 804cbde:	da16      	bge.n	804cc0e <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 804cbe0:	7bfb      	ldrb	r3, [r7, #15]
 804cbe2:	687a      	ldr	r2, [r7, #4]
 804cbe4:	211a      	movs	r1, #26
 804cbe6:	fb01 f303 	mul.w	r3, r1, r3
 804cbea:	4413      	add	r3, r2
 804cbec:	f203 334e 	addw	r3, r3, #846	; 0x34e
 804cbf0:	781a      	ldrb	r2, [r3, #0]
 804cbf2:	68bb      	ldr	r3, [r7, #8]
 804cbf4:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 804cbf6:	7bfb      	ldrb	r3, [r7, #15]
 804cbf8:	687a      	ldr	r2, [r7, #4]
 804cbfa:	211a      	movs	r1, #26
 804cbfc:	fb01 f303 	mul.w	r3, r1, r3
 804cc00:	4413      	add	r3, r2
 804cc02:	f503 7354 	add.w	r3, r3, #848	; 0x350
 804cc06:	881a      	ldrh	r2, [r3, #0]
 804cc08:	68bb      	ldr	r3, [r7, #8]
 804cc0a:	815a      	strh	r2, [r3, #10]
 804cc0c:	e015      	b.n	804cc3a <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 804cc0e:	7bfb      	ldrb	r3, [r7, #15]
 804cc10:	687a      	ldr	r2, [r7, #4]
 804cc12:	211a      	movs	r1, #26
 804cc14:	fb01 f303 	mul.w	r3, r1, r3
 804cc18:	4413      	add	r3, r2
 804cc1a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 804cc1e:	781a      	ldrb	r2, [r3, #0]
 804cc20:	68bb      	ldr	r3, [r7, #8]
 804cc22:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 804cc24:	7bfb      	ldrb	r3, [r7, #15]
 804cc26:	687a      	ldr	r2, [r7, #4]
 804cc28:	211a      	movs	r1, #26
 804cc2a:	fb01 f303 	mul.w	r3, r1, r3
 804cc2e:	4413      	add	r3, r2
 804cc30:	f503 7354 	add.w	r3, r3, #848	; 0x350
 804cc34:	881a      	ldrh	r2, [r3, #0]
 804cc36:	68bb      	ldr	r3, [r7, #8]
 804cc38:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 804cc3a:	7bfb      	ldrb	r3, [r7, #15]
 804cc3c:	687a      	ldr	r2, [r7, #4]
 804cc3e:	211a      	movs	r1, #26
 804cc40:	fb01 f303 	mul.w	r3, r1, r3
 804cc44:	4413      	add	r3, r2
 804cc46:	f203 3356 	addw	r3, r3, #854	; 0x356
 804cc4a:	781b      	ldrb	r3, [r3, #0]
 804cc4c:	b25b      	sxtb	r3, r3
 804cc4e:	2b00      	cmp	r3, #0
 804cc50:	da16      	bge.n	804cc80 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 804cc52:	7bfb      	ldrb	r3, [r7, #15]
 804cc54:	687a      	ldr	r2, [r7, #4]
 804cc56:	211a      	movs	r1, #26
 804cc58:	fb01 f303 	mul.w	r3, r1, r3
 804cc5c:	4413      	add	r3, r2
 804cc5e:	f203 3356 	addw	r3, r3, #854	; 0x356
 804cc62:	781a      	ldrb	r2, [r3, #0]
 804cc64:	68bb      	ldr	r3, [r7, #8]
 804cc66:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 804cc68:	7bfb      	ldrb	r3, [r7, #15]
 804cc6a:	687a      	ldr	r2, [r7, #4]
 804cc6c:	211a      	movs	r1, #26
 804cc6e:	fb01 f303 	mul.w	r3, r1, r3
 804cc72:	4413      	add	r3, r2
 804cc74:	f503 7356 	add.w	r3, r3, #856	; 0x358
 804cc78:	881a      	ldrh	r2, [r3, #0]
 804cc7a:	68bb      	ldr	r3, [r7, #8]
 804cc7c:	815a      	strh	r2, [r3, #10]
 804cc7e:	e015      	b.n	804ccac <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 804cc80:	7bfb      	ldrb	r3, [r7, #15]
 804cc82:	687a      	ldr	r2, [r7, #4]
 804cc84:	211a      	movs	r1, #26
 804cc86:	fb01 f303 	mul.w	r3, r1, r3
 804cc8a:	4413      	add	r3, r2
 804cc8c:	f203 3356 	addw	r3, r3, #854	; 0x356
 804cc90:	781a      	ldrb	r2, [r3, #0]
 804cc92:	68bb      	ldr	r3, [r7, #8]
 804cc94:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 804cc96:	7bfb      	ldrb	r3, [r7, #15]
 804cc98:	687a      	ldr	r2, [r7, #4]
 804cc9a:	211a      	movs	r1, #26
 804cc9c:	fb01 f303 	mul.w	r3, r1, r3
 804cca0:	4413      	add	r3, r2
 804cca2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 804cca6:	881a      	ldrh	r2, [r3, #0]
 804cca8:	68bb      	ldr	r3, [r7, #8]
 804ccaa:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 804ccac:	68bb      	ldr	r3, [r7, #8]
 804ccae:	2200      	movs	r2, #0
 804ccb0:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 804ccb2:	68bb      	ldr	r3, [r7, #8]
 804ccb4:	2200      	movs	r2, #0
 804ccb6:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 804ccb8:	68bb      	ldr	r3, [r7, #8]
 804ccba:	2200      	movs	r2, #0
 804ccbc:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 804ccbe:	68bb      	ldr	r3, [r7, #8]
 804ccc0:	799b      	ldrb	r3, [r3, #6]
 804ccc2:	4619      	mov	r1, r3
 804ccc4:	6878      	ldr	r0, [r7, #4]
 804ccc6:	f003 f9d6 	bl	8050076 <USBH_AllocPipe>
 804ccca:	4603      	mov	r3, r0
 804cccc:	461a      	mov	r2, r3
 804ccce:	68bb      	ldr	r3, [r7, #8]
 804ccd0:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 804ccd2:	68bb      	ldr	r3, [r7, #8]
 804ccd4:	79db      	ldrb	r3, [r3, #7]
 804ccd6:	4619      	mov	r1, r3
 804ccd8:	6878      	ldr	r0, [r7, #4]
 804ccda:	f003 f9cc 	bl	8050076 <USBH_AllocPipe>
 804ccde:	4603      	mov	r3, r0
 804cce0:	461a      	mov	r2, r3
 804cce2:	68bb      	ldr	r3, [r7, #8]
 804cce4:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 804cce6:	6878      	ldr	r0, [r7, #4]
 804cce8:	f000 fe04 	bl	804d8f4 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 804ccec:	68bb      	ldr	r3, [r7, #8]
 804ccee:	799b      	ldrb	r3, [r3, #6]
 804ccf0:	2b00      	cmp	r3, #0
 804ccf2:	d01e      	beq.n	804cd32 <USBH_MSC_InterfaceInit+0x1e2>
 804ccf4:	68bb      	ldr	r3, [r7, #8]
 804ccf6:	891b      	ldrh	r3, [r3, #8]
 804ccf8:	2b00      	cmp	r3, #0
 804ccfa:	d01a      	beq.n	804cd32 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 804ccfc:	68bb      	ldr	r3, [r7, #8]
 804ccfe:	7959      	ldrb	r1, [r3, #5]
 804cd00:	68bb      	ldr	r3, [r7, #8]
 804cd02:	7998      	ldrb	r0, [r3, #6]
 804cd04:	687b      	ldr	r3, [r7, #4]
 804cd06:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 804cd0a:	687b      	ldr	r3, [r7, #4]
 804cd0c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 804cd10:	68ba      	ldr	r2, [r7, #8]
 804cd12:	8912      	ldrh	r2, [r2, #8]
 804cd14:	9202      	str	r2, [sp, #8]
 804cd16:	2202      	movs	r2, #2
 804cd18:	9201      	str	r2, [sp, #4]
 804cd1a:	9300      	str	r3, [sp, #0]
 804cd1c:	4623      	mov	r3, r4
 804cd1e:	4602      	mov	r2, r0
 804cd20:	6878      	ldr	r0, [r7, #4]
 804cd22:	f003 f979 	bl	8050018 <USBH_OpenPipe>
 804cd26:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 804cd28:	68bb      	ldr	r3, [r7, #8]
 804cd2a:	79db      	ldrb	r3, [r3, #7]
 804cd2c:	2b00      	cmp	r3, #0
 804cd2e:	d02c      	beq.n	804cd8a <USBH_MSC_InterfaceInit+0x23a>
 804cd30:	e001      	b.n	804cd36 <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 804cd32:	2303      	movs	r3, #3
 804cd34:	e02a      	b.n	804cd8c <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 804cd36:	68bb      	ldr	r3, [r7, #8]
 804cd38:	895b      	ldrh	r3, [r3, #10]
 804cd3a:	2b00      	cmp	r3, #0
 804cd3c:	d025      	beq.n	804cd8a <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 804cd3e:	68bb      	ldr	r3, [r7, #8]
 804cd40:	7919      	ldrb	r1, [r3, #4]
 804cd42:	68bb      	ldr	r3, [r7, #8]
 804cd44:	79d8      	ldrb	r0, [r3, #7]
 804cd46:	687b      	ldr	r3, [r7, #4]
 804cd48:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 804cd4c:	687b      	ldr	r3, [r7, #4]
 804cd4e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 804cd52:	68ba      	ldr	r2, [r7, #8]
 804cd54:	8952      	ldrh	r2, [r2, #10]
 804cd56:	9202      	str	r2, [sp, #8]
 804cd58:	2202      	movs	r2, #2
 804cd5a:	9201      	str	r2, [sp, #4]
 804cd5c:	9300      	str	r3, [sp, #0]
 804cd5e:	4623      	mov	r3, r4
 804cd60:	4602      	mov	r2, r0
 804cd62:	6878      	ldr	r0, [r7, #4]
 804cd64:	f003 f958 	bl	8050018 <USBH_OpenPipe>
 804cd68:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 804cd6a:	68bb      	ldr	r3, [r7, #8]
 804cd6c:	791b      	ldrb	r3, [r3, #4]
 804cd6e:	2200      	movs	r2, #0
 804cd70:	4619      	mov	r1, r3
 804cd72:	6878      	ldr	r0, [r7, #4]
 804cd74:	f00c ffda 	bl	8059d2c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 804cd78:	68bb      	ldr	r3, [r7, #8]
 804cd7a:	795b      	ldrb	r3, [r3, #5]
 804cd7c:	2200      	movs	r2, #0
 804cd7e:	4619      	mov	r1, r3
 804cd80:	6878      	ldr	r0, [r7, #4]
 804cd82:	f00c ffd3 	bl	8059d2c <USBH_LL_SetToggle>

  return USBH_OK;
 804cd86:	2300      	movs	r3, #0
 804cd88:	e000      	b.n	804cd8c <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 804cd8a:	2303      	movs	r3, #3
}
 804cd8c:	4618      	mov	r0, r3
 804cd8e:	3714      	adds	r7, #20
 804cd90:	46bd      	mov	sp, r7
 804cd92:	bd90      	pop	{r4, r7, pc}

0804cd94 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 804cd94:	b580      	push	{r7, lr}
 804cd96:	b084      	sub	sp, #16
 804cd98:	af00      	add	r7, sp, #0
 804cd9a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 804cd9c:	687b      	ldr	r3, [r7, #4]
 804cd9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804cda2:	69db      	ldr	r3, [r3, #28]
 804cda4:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 804cda6:	68fb      	ldr	r3, [r7, #12]
 804cda8:	795b      	ldrb	r3, [r3, #5]
 804cdaa:	2b00      	cmp	r3, #0
 804cdac:	d00e      	beq.n	804cdcc <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 804cdae:	68fb      	ldr	r3, [r7, #12]
 804cdb0:	795b      	ldrb	r3, [r3, #5]
 804cdb2:	4619      	mov	r1, r3
 804cdb4:	6878      	ldr	r0, [r7, #4]
 804cdb6:	f003 f94e 	bl	8050056 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 804cdba:	68fb      	ldr	r3, [r7, #12]
 804cdbc:	795b      	ldrb	r3, [r3, #5]
 804cdbe:	4619      	mov	r1, r3
 804cdc0:	6878      	ldr	r0, [r7, #4]
 804cdc2:	f003 f979 	bl	80500b8 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 804cdc6:	68fb      	ldr	r3, [r7, #12]
 804cdc8:	2200      	movs	r2, #0
 804cdca:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 804cdcc:	68fb      	ldr	r3, [r7, #12]
 804cdce:	791b      	ldrb	r3, [r3, #4]
 804cdd0:	2b00      	cmp	r3, #0
 804cdd2:	d00e      	beq.n	804cdf2 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 804cdd4:	68fb      	ldr	r3, [r7, #12]
 804cdd6:	791b      	ldrb	r3, [r3, #4]
 804cdd8:	4619      	mov	r1, r3
 804cdda:	6878      	ldr	r0, [r7, #4]
 804cddc:	f003 f93b 	bl	8050056 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 804cde0:	68fb      	ldr	r3, [r7, #12]
 804cde2:	791b      	ldrb	r3, [r3, #4]
 804cde4:	4619      	mov	r1, r3
 804cde6:	6878      	ldr	r0, [r7, #4]
 804cde8:	f003 f966 	bl	80500b8 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 804cdec:	68fb      	ldr	r3, [r7, #12]
 804cdee:	2200      	movs	r2, #0
 804cdf0:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 804cdf2:	687b      	ldr	r3, [r7, #4]
 804cdf4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804cdf8:	69db      	ldr	r3, [r3, #28]
 804cdfa:	2b00      	cmp	r3, #0
 804cdfc:	d00b      	beq.n	804ce16 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 804cdfe:	687b      	ldr	r3, [r7, #4]
 804ce00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804ce04:	69db      	ldr	r3, [r3, #28]
 804ce06:	4618      	mov	r0, r3
 804ce08:	f00d f876 	bl	8059ef8 <free>
    phost->pActiveClass->pData = 0U;
 804ce0c:	687b      	ldr	r3, [r7, #4]
 804ce0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804ce12:	2200      	movs	r2, #0
 804ce14:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 804ce16:	2300      	movs	r3, #0
}
 804ce18:	4618      	mov	r0, r3
 804ce1a:	3710      	adds	r7, #16
 804ce1c:	46bd      	mov	sp, r7
 804ce1e:	bd80      	pop	{r7, pc}

0804ce20 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 804ce20:	b580      	push	{r7, lr}
 804ce22:	b084      	sub	sp, #16
 804ce24:	af00      	add	r7, sp, #0
 804ce26:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 804ce28:	687b      	ldr	r3, [r7, #4]
 804ce2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804ce2e:	69db      	ldr	r3, [r3, #28]
 804ce30:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 804ce32:	2301      	movs	r3, #1
 804ce34:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 804ce36:	68bb      	ldr	r3, [r7, #8]
 804ce38:	7b9b      	ldrb	r3, [r3, #14]
 804ce3a:	2b03      	cmp	r3, #3
 804ce3c:	d041      	beq.n	804cec2 <USBH_MSC_ClassRequest+0xa2>
 804ce3e:	2b03      	cmp	r3, #3
 804ce40:	dc4b      	bgt.n	804ceda <USBH_MSC_ClassRequest+0xba>
 804ce42:	2b00      	cmp	r3, #0
 804ce44:	d001      	beq.n	804ce4a <USBH_MSC_ClassRequest+0x2a>
 804ce46:	2b02      	cmp	r3, #2
 804ce48:	d147      	bne.n	804ceda <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 804ce4a:	68bb      	ldr	r3, [r7, #8]
 804ce4c:	4619      	mov	r1, r3
 804ce4e:	6878      	ldr	r0, [r7, #4]
 804ce50:	f000 fd32 	bl	804d8b8 <USBH_MSC_BOT_REQ_GetMaxLUN>
 804ce54:	4603      	mov	r3, r0
 804ce56:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 804ce58:	7bfb      	ldrb	r3, [r7, #15]
 804ce5a:	2b03      	cmp	r3, #3
 804ce5c:	d104      	bne.n	804ce68 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 804ce5e:	68bb      	ldr	r3, [r7, #8]
 804ce60:	2200      	movs	r2, #0
 804ce62:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 804ce64:	2300      	movs	r3, #0
 804ce66:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 804ce68:	7bfb      	ldrb	r3, [r7, #15]
 804ce6a:	2b00      	cmp	r3, #0
 804ce6c:	d137      	bne.n	804cede <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 804ce6e:	68bb      	ldr	r3, [r7, #8]
 804ce70:	781b      	ldrb	r3, [r3, #0]
 804ce72:	2b02      	cmp	r3, #2
 804ce74:	d804      	bhi.n	804ce80 <USBH_MSC_ClassRequest+0x60>
 804ce76:	68bb      	ldr	r3, [r7, #8]
 804ce78:	781b      	ldrb	r3, [r3, #0]
 804ce7a:	3301      	adds	r3, #1
 804ce7c:	b2da      	uxtb	r2, r3
 804ce7e:	e000      	b.n	804ce82 <USBH_MSC_ClassRequest+0x62>
 804ce80:	2202      	movs	r2, #2
 804ce82:	68bb      	ldr	r3, [r7, #8]
 804ce84:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 804ce86:	2300      	movs	r3, #0
 804ce88:	73bb      	strb	r3, [r7, #14]
 804ce8a:	e014      	b.n	804ceb6 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 804ce8c:	7bbb      	ldrb	r3, [r7, #14]
 804ce8e:	68ba      	ldr	r2, [r7, #8]
 804ce90:	2134      	movs	r1, #52	; 0x34
 804ce92:	fb01 f303 	mul.w	r3, r1, r3
 804ce96:	4413      	add	r3, r2
 804ce98:	3392      	adds	r3, #146	; 0x92
 804ce9a:	2202      	movs	r2, #2
 804ce9c:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 804ce9e:	7bbb      	ldrb	r3, [r7, #14]
 804cea0:	68ba      	ldr	r2, [r7, #8]
 804cea2:	2134      	movs	r1, #52	; 0x34
 804cea4:	fb01 f303 	mul.w	r3, r1, r3
 804cea8:	4413      	add	r3, r2
 804ceaa:	33c1      	adds	r3, #193	; 0xc1
 804ceac:	2200      	movs	r2, #0
 804ceae:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 804ceb0:	7bbb      	ldrb	r3, [r7, #14]
 804ceb2:	3301      	adds	r3, #1
 804ceb4:	73bb      	strb	r3, [r7, #14]
 804ceb6:	68bb      	ldr	r3, [r7, #8]
 804ceb8:	781b      	ldrb	r3, [r3, #0]
 804ceba:	7bba      	ldrb	r2, [r7, #14]
 804cebc:	429a      	cmp	r2, r3
 804cebe:	d3e5      	bcc.n	804ce8c <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 804cec0:	e00d      	b.n	804cede <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 804cec2:	2100      	movs	r1, #0
 804cec4:	6878      	ldr	r0, [r7, #4]
 804cec6:	f002 fa96 	bl	804f3f6 <USBH_ClrFeature>
 804ceca:	4603      	mov	r3, r0
 804cecc:	2b00      	cmp	r3, #0
 804cece:	d108      	bne.n	804cee2 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 804ced0:	68bb      	ldr	r3, [r7, #8]
 804ced2:	7bda      	ldrb	r2, [r3, #15]
 804ced4:	68bb      	ldr	r3, [r7, #8]
 804ced6:	739a      	strb	r2, [r3, #14]
      }
      break;
 804ced8:	e003      	b.n	804cee2 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 804ceda:	bf00      	nop
 804cedc:	e002      	b.n	804cee4 <USBH_MSC_ClassRequest+0xc4>
      break;
 804cede:	bf00      	nop
 804cee0:	e000      	b.n	804cee4 <USBH_MSC_ClassRequest+0xc4>
      break;
 804cee2:	bf00      	nop
  }

  return status;
 804cee4:	7bfb      	ldrb	r3, [r7, #15]
}
 804cee6:	4618      	mov	r0, r3
 804cee8:	3710      	adds	r7, #16
 804ceea:	46bd      	mov	sp, r7
 804ceec:	bd80      	pop	{r7, pc}
	...

0804cef0 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 804cef0:	b580      	push	{r7, lr}
 804cef2:	b086      	sub	sp, #24
 804cef4:	af00      	add	r7, sp, #0
 804cef6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 804cef8:	687b      	ldr	r3, [r7, #4]
 804cefa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804cefe:	69db      	ldr	r3, [r3, #28]
 804cf00:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 804cf02:	2301      	movs	r3, #1
 804cf04:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 804cf06:	2301      	movs	r3, #1
 804cf08:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 804cf0a:	2301      	movs	r3, #1
 804cf0c:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 804cf0e:	693b      	ldr	r3, [r7, #16]
 804cf10:	7b1b      	ldrb	r3, [r3, #12]
 804cf12:	2b00      	cmp	r3, #0
 804cf14:	d003      	beq.n	804cf1e <USBH_MSC_Process+0x2e>
 804cf16:	2b01      	cmp	r3, #1
 804cf18:	f000 828d 	beq.w	804d436 <USBH_MSC_Process+0x546>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 804cf1c:	e28e      	b.n	804d43c <USBH_MSC_Process+0x54c>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 804cf1e:	693b      	ldr	r3, [r7, #16]
 804cf20:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 804cf24:	693b      	ldr	r3, [r7, #16]
 804cf26:	781b      	ldrb	r3, [r3, #0]
 804cf28:	b29b      	uxth	r3, r3
 804cf2a:	429a      	cmp	r2, r3
 804cf2c:	f080 8267 	bcs.w	804d3fe <USBH_MSC_Process+0x50e>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 804cf30:	693b      	ldr	r3, [r7, #16]
 804cf32:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 804cf36:	4619      	mov	r1, r3
 804cf38:	693a      	ldr	r2, [r7, #16]
 804cf3a:	2334      	movs	r3, #52	; 0x34
 804cf3c:	fb01 f303 	mul.w	r3, r1, r3
 804cf40:	4413      	add	r3, r2
 804cf42:	3391      	adds	r3, #145	; 0x91
 804cf44:	2201      	movs	r2, #1
 804cf46:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 804cf48:	693b      	ldr	r3, [r7, #16]
 804cf4a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 804cf4e:	4619      	mov	r1, r3
 804cf50:	693a      	ldr	r2, [r7, #16]
 804cf52:	2334      	movs	r3, #52	; 0x34
 804cf54:	fb01 f303 	mul.w	r3, r1, r3
 804cf58:	4413      	add	r3, r2
 804cf5a:	3390      	adds	r3, #144	; 0x90
 804cf5c:	781b      	ldrb	r3, [r3, #0]
 804cf5e:	2b08      	cmp	r3, #8
 804cf60:	f200 8235 	bhi.w	804d3ce <USBH_MSC_Process+0x4de>
 804cf64:	a201      	add	r2, pc, #4	; (adr r2, 804cf6c <USBH_MSC_Process+0x7c>)
 804cf66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804cf6a:	bf00      	nop
 804cf6c:	0804cf91 	.word	0x0804cf91
 804cf70:	0804d3cf 	.word	0x0804d3cf
 804cf74:	0804d059 	.word	0x0804d059
 804cf78:	0804d1dd 	.word	0x0804d1dd
 804cf7c:	0804cfb7 	.word	0x0804cfb7
 804cf80:	0804d2a9 	.word	0x0804d2a9
 804cf84:	0804d3cf 	.word	0x0804d3cf
 804cf88:	0804d3cf 	.word	0x0804d3cf
 804cf8c:	0804d3bd 	.word	0x0804d3bd
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 804cf90:	693b      	ldr	r3, [r7, #16]
 804cf92:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 804cf96:	4619      	mov	r1, r3
 804cf98:	693a      	ldr	r2, [r7, #16]
 804cf9a:	2334      	movs	r3, #52	; 0x34
 804cf9c:	fb01 f303 	mul.w	r3, r1, r3
 804cfa0:	4413      	add	r3, r2
 804cfa2:	3390      	adds	r3, #144	; 0x90
 804cfa4:	2204      	movs	r2, #4
 804cfa6:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 804cfa8:	687b      	ldr	r3, [r7, #4]
 804cfaa:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 804cfae:	693b      	ldr	r3, [r7, #16]
 804cfb0:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 804cfb4:	e214      	b.n	804d3e0 <USBH_MSC_Process+0x4f0>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 804cfb6:	693b      	ldr	r3, [r7, #16]
 804cfb8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 804cfbc:	b2d9      	uxtb	r1, r3
 804cfbe:	693b      	ldr	r3, [r7, #16]
 804cfc0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 804cfc4:	461a      	mov	r2, r3
 804cfc6:	2334      	movs	r3, #52	; 0x34
 804cfc8:	fb02 f303 	mul.w	r3, r2, r3
 804cfcc:	3398      	adds	r3, #152	; 0x98
 804cfce:	693a      	ldr	r2, [r7, #16]
 804cfd0:	4413      	add	r3, r2
 804cfd2:	3307      	adds	r3, #7
 804cfd4:	461a      	mov	r2, r3
 804cfd6:	6878      	ldr	r0, [r7, #4]
 804cfd8:	f001 f836 	bl	804e048 <USBH_MSC_SCSI_Inquiry>
 804cfdc:	4603      	mov	r3, r0
 804cfde:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 804cfe0:	7bfb      	ldrb	r3, [r7, #15]
 804cfe2:	2b00      	cmp	r3, #0
 804cfe4:	d10b      	bne.n	804cffe <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 804cfe6:	693b      	ldr	r3, [r7, #16]
 804cfe8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 804cfec:	4619      	mov	r1, r3
 804cfee:	693a      	ldr	r2, [r7, #16]
 804cff0:	2334      	movs	r3, #52	; 0x34
 804cff2:	fb01 f303 	mul.w	r3, r1, r3
 804cff6:	4413      	add	r3, r2
 804cff8:	3390      	adds	r3, #144	; 0x90
 804cffa:	2202      	movs	r2, #2
 804cffc:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 804cffe:	7bfb      	ldrb	r3, [r7, #15]
 804d000:	2b02      	cmp	r3, #2
 804d002:	d10c      	bne.n	804d01e <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 804d004:	693b      	ldr	r3, [r7, #16]
 804d006:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 804d00a:	4619      	mov	r1, r3
 804d00c:	693a      	ldr	r2, [r7, #16]
 804d00e:	2334      	movs	r3, #52	; 0x34
 804d010:	fb01 f303 	mul.w	r3, r1, r3
 804d014:	4413      	add	r3, r2
 804d016:	3390      	adds	r3, #144	; 0x90
 804d018:	2205      	movs	r2, #5
 804d01a:	701a      	strb	r2, [r3, #0]
            break;
 804d01c:	e1d9      	b.n	804d3d2 <USBH_MSC_Process+0x4e2>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 804d01e:	7bfb      	ldrb	r3, [r7, #15]
 804d020:	2b04      	cmp	r3, #4
 804d022:	f040 81d6 	bne.w	804d3d2 <USBH_MSC_Process+0x4e2>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 804d026:	693b      	ldr	r3, [r7, #16]
 804d028:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 804d02c:	4619      	mov	r1, r3
 804d02e:	693a      	ldr	r2, [r7, #16]
 804d030:	2334      	movs	r3, #52	; 0x34
 804d032:	fb01 f303 	mul.w	r3, r1, r3
 804d036:	4413      	add	r3, r2
 804d038:	3390      	adds	r3, #144	; 0x90
 804d03a:	2201      	movs	r2, #1
 804d03c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 804d03e:	693b      	ldr	r3, [r7, #16]
 804d040:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 804d044:	4619      	mov	r1, r3
 804d046:	693a      	ldr	r2, [r7, #16]
 804d048:	2334      	movs	r3, #52	; 0x34
 804d04a:	fb01 f303 	mul.w	r3, r1, r3
 804d04e:	4413      	add	r3, r2
 804d050:	3391      	adds	r3, #145	; 0x91
 804d052:	2202      	movs	r2, #2
 804d054:	701a      	strb	r2, [r3, #0]
            break;
 804d056:	e1bc      	b.n	804d3d2 <USBH_MSC_Process+0x4e2>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 804d058:	693b      	ldr	r3, [r7, #16]
 804d05a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 804d05e:	b2db      	uxtb	r3, r3
 804d060:	4619      	mov	r1, r3
 804d062:	6878      	ldr	r0, [r7, #4]
 804d064:	f000 ff32 	bl	804decc <USBH_MSC_SCSI_TestUnitReady>
 804d068:	4603      	mov	r3, r0
 804d06a:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 804d06c:	7bbb      	ldrb	r3, [r7, #14]
 804d06e:	2b00      	cmp	r3, #0
 804d070:	d149      	bne.n	804d106 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 804d072:	693b      	ldr	r3, [r7, #16]
 804d074:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 804d078:	4619      	mov	r1, r3
 804d07a:	693a      	ldr	r2, [r7, #16]
 804d07c:	2334      	movs	r3, #52	; 0x34
 804d07e:	fb01 f303 	mul.w	r3, r1, r3
 804d082:	4413      	add	r3, r2
 804d084:	3392      	adds	r3, #146	; 0x92
 804d086:	781b      	ldrb	r3, [r3, #0]
 804d088:	2b00      	cmp	r3, #0
 804d08a:	d00c      	beq.n	804d0a6 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 804d08c:	693b      	ldr	r3, [r7, #16]
 804d08e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 804d092:	4619      	mov	r1, r3
 804d094:	693a      	ldr	r2, [r7, #16]
 804d096:	2334      	movs	r3, #52	; 0x34
 804d098:	fb01 f303 	mul.w	r3, r1, r3
 804d09c:	4413      	add	r3, r2
 804d09e:	33c1      	adds	r3, #193	; 0xc1
 804d0a0:	2201      	movs	r2, #1
 804d0a2:	701a      	strb	r2, [r3, #0]
 804d0a4:	e00b      	b.n	804d0be <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 804d0a6:	693b      	ldr	r3, [r7, #16]
 804d0a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 804d0ac:	4619      	mov	r1, r3
 804d0ae:	693a      	ldr	r2, [r7, #16]
 804d0b0:	2334      	movs	r3, #52	; 0x34
 804d0b2:	fb01 f303 	mul.w	r3, r1, r3
 804d0b6:	4413      	add	r3, r2
 804d0b8:	33c1      	adds	r3, #193	; 0xc1
 804d0ba:	2200      	movs	r2, #0
 804d0bc:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 804d0be:	693b      	ldr	r3, [r7, #16]
 804d0c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 804d0c4:	4619      	mov	r1, r3
 804d0c6:	693a      	ldr	r2, [r7, #16]
 804d0c8:	2334      	movs	r3, #52	; 0x34
 804d0ca:	fb01 f303 	mul.w	r3, r1, r3
 804d0ce:	4413      	add	r3, r2
 804d0d0:	3390      	adds	r3, #144	; 0x90
 804d0d2:	2203      	movs	r2, #3
 804d0d4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 804d0d6:	693b      	ldr	r3, [r7, #16]
 804d0d8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 804d0dc:	4619      	mov	r1, r3
 804d0de:	693a      	ldr	r2, [r7, #16]
 804d0e0:	2334      	movs	r3, #52	; 0x34
 804d0e2:	fb01 f303 	mul.w	r3, r1, r3
 804d0e6:	4413      	add	r3, r2
 804d0e8:	3391      	adds	r3, #145	; 0x91
 804d0ea:	2200      	movs	r2, #0
 804d0ec:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 804d0ee:	693b      	ldr	r3, [r7, #16]
 804d0f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 804d0f4:	4619      	mov	r1, r3
 804d0f6:	693a      	ldr	r2, [r7, #16]
 804d0f8:	2334      	movs	r3, #52	; 0x34
 804d0fa:	fb01 f303 	mul.w	r3, r1, r3
 804d0fe:	4413      	add	r3, r2
 804d100:	3392      	adds	r3, #146	; 0x92
 804d102:	2200      	movs	r2, #0
 804d104:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 804d106:	7bbb      	ldrb	r3, [r7, #14]
 804d108:	2b02      	cmp	r3, #2
 804d10a:	d14a      	bne.n	804d1a2 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 804d10c:	693b      	ldr	r3, [r7, #16]
 804d10e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 804d112:	4619      	mov	r1, r3
 804d114:	693a      	ldr	r2, [r7, #16]
 804d116:	2334      	movs	r3, #52	; 0x34
 804d118:	fb01 f303 	mul.w	r3, r1, r3
 804d11c:	4413      	add	r3, r2
 804d11e:	3392      	adds	r3, #146	; 0x92
 804d120:	781b      	ldrb	r3, [r3, #0]
 804d122:	2b02      	cmp	r3, #2
 804d124:	d00c      	beq.n	804d140 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 804d126:	693b      	ldr	r3, [r7, #16]
 804d128:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 804d12c:	4619      	mov	r1, r3
 804d12e:	693a      	ldr	r2, [r7, #16]
 804d130:	2334      	movs	r3, #52	; 0x34
 804d132:	fb01 f303 	mul.w	r3, r1, r3
 804d136:	4413      	add	r3, r2
 804d138:	33c1      	adds	r3, #193	; 0xc1
 804d13a:	2201      	movs	r2, #1
 804d13c:	701a      	strb	r2, [r3, #0]
 804d13e:	e00b      	b.n	804d158 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 804d140:	693b      	ldr	r3, [r7, #16]
 804d142:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 804d146:	4619      	mov	r1, r3
 804d148:	693a      	ldr	r2, [r7, #16]
 804d14a:	2334      	movs	r3, #52	; 0x34
 804d14c:	fb01 f303 	mul.w	r3, r1, r3
 804d150:	4413      	add	r3, r2
 804d152:	33c1      	adds	r3, #193	; 0xc1
 804d154:	2200      	movs	r2, #0
 804d156:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 804d158:	693b      	ldr	r3, [r7, #16]
 804d15a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 804d15e:	4619      	mov	r1, r3
 804d160:	693a      	ldr	r2, [r7, #16]
 804d162:	2334      	movs	r3, #52	; 0x34
 804d164:	fb01 f303 	mul.w	r3, r1, r3
 804d168:	4413      	add	r3, r2
 804d16a:	3390      	adds	r3, #144	; 0x90
 804d16c:	2205      	movs	r2, #5
 804d16e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 804d170:	693b      	ldr	r3, [r7, #16]
 804d172:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 804d176:	4619      	mov	r1, r3
 804d178:	693a      	ldr	r2, [r7, #16]
 804d17a:	2334      	movs	r3, #52	; 0x34
 804d17c:	fb01 f303 	mul.w	r3, r1, r3
 804d180:	4413      	add	r3, r2
 804d182:	3391      	adds	r3, #145	; 0x91
 804d184:	2201      	movs	r2, #1
 804d186:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 804d188:	693b      	ldr	r3, [r7, #16]
 804d18a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 804d18e:	4619      	mov	r1, r3
 804d190:	693a      	ldr	r2, [r7, #16]
 804d192:	2334      	movs	r3, #52	; 0x34
 804d194:	fb01 f303 	mul.w	r3, r1, r3
 804d198:	4413      	add	r3, r2
 804d19a:	3392      	adds	r3, #146	; 0x92
 804d19c:	2202      	movs	r2, #2
 804d19e:	701a      	strb	r2, [r3, #0]
            break;
 804d1a0:	e119      	b.n	804d3d6 <USBH_MSC_Process+0x4e6>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 804d1a2:	7bbb      	ldrb	r3, [r7, #14]
 804d1a4:	2b04      	cmp	r3, #4
 804d1a6:	f040 8116 	bne.w	804d3d6 <USBH_MSC_Process+0x4e6>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 804d1aa:	693b      	ldr	r3, [r7, #16]
 804d1ac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 804d1b0:	4619      	mov	r1, r3
 804d1b2:	693a      	ldr	r2, [r7, #16]
 804d1b4:	2334      	movs	r3, #52	; 0x34
 804d1b6:	fb01 f303 	mul.w	r3, r1, r3
 804d1ba:	4413      	add	r3, r2
 804d1bc:	3390      	adds	r3, #144	; 0x90
 804d1be:	2201      	movs	r2, #1
 804d1c0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 804d1c2:	693b      	ldr	r3, [r7, #16]
 804d1c4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 804d1c8:	4619      	mov	r1, r3
 804d1ca:	693a      	ldr	r2, [r7, #16]
 804d1cc:	2334      	movs	r3, #52	; 0x34
 804d1ce:	fb01 f303 	mul.w	r3, r1, r3
 804d1d2:	4413      	add	r3, r2
 804d1d4:	3391      	adds	r3, #145	; 0x91
 804d1d6:	2202      	movs	r2, #2
 804d1d8:	701a      	strb	r2, [r3, #0]
            break;
 804d1da:	e0fc      	b.n	804d3d6 <USBH_MSC_Process+0x4e6>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 804d1dc:	693b      	ldr	r3, [r7, #16]
 804d1de:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 804d1e2:	b2d9      	uxtb	r1, r3
 804d1e4:	693b      	ldr	r3, [r7, #16]
 804d1e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 804d1ea:	461a      	mov	r2, r3
 804d1ec:	2334      	movs	r3, #52	; 0x34
 804d1ee:	fb02 f303 	mul.w	r3, r2, r3
 804d1f2:	3390      	adds	r3, #144	; 0x90
 804d1f4:	693a      	ldr	r2, [r7, #16]
 804d1f6:	4413      	add	r3, r2
 804d1f8:	3304      	adds	r3, #4
 804d1fa:	461a      	mov	r2, r3
 804d1fc:	6878      	ldr	r0, [r7, #4]
 804d1fe:	f000 fea8 	bl	804df52 <USBH_MSC_SCSI_ReadCapacity>
 804d202:	4603      	mov	r3, r0
 804d204:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 804d206:	7bfb      	ldrb	r3, [r7, #15]
 804d208:	2b00      	cmp	r3, #0
 804d20a:	d120      	bne.n	804d24e <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 804d20c:	693b      	ldr	r3, [r7, #16]
 804d20e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 804d212:	4619      	mov	r1, r3
 804d214:	693a      	ldr	r2, [r7, #16]
 804d216:	2334      	movs	r3, #52	; 0x34
 804d218:	fb01 f303 	mul.w	r3, r1, r3
 804d21c:	4413      	add	r3, r2
 804d21e:	3390      	adds	r3, #144	; 0x90
 804d220:	2201      	movs	r2, #1
 804d222:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 804d224:	693b      	ldr	r3, [r7, #16]
 804d226:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 804d22a:	4619      	mov	r1, r3
 804d22c:	693a      	ldr	r2, [r7, #16]
 804d22e:	2334      	movs	r3, #52	; 0x34
 804d230:	fb01 f303 	mul.w	r3, r1, r3
 804d234:	4413      	add	r3, r2
 804d236:	3391      	adds	r3, #145	; 0x91
 804d238:	2200      	movs	r2, #0
 804d23a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 804d23c:	693b      	ldr	r3, [r7, #16]
 804d23e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 804d242:	3301      	adds	r3, #1
 804d244:	b29a      	uxth	r2, r3
 804d246:	693b      	ldr	r3, [r7, #16]
 804d248:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 804d24c:	e0c5      	b.n	804d3da <USBH_MSC_Process+0x4ea>
            else if (scsi_status == USBH_FAIL)
 804d24e:	7bfb      	ldrb	r3, [r7, #15]
 804d250:	2b02      	cmp	r3, #2
 804d252:	d10c      	bne.n	804d26e <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 804d254:	693b      	ldr	r3, [r7, #16]
 804d256:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 804d25a:	4619      	mov	r1, r3
 804d25c:	693a      	ldr	r2, [r7, #16]
 804d25e:	2334      	movs	r3, #52	; 0x34
 804d260:	fb01 f303 	mul.w	r3, r1, r3
 804d264:	4413      	add	r3, r2
 804d266:	3390      	adds	r3, #144	; 0x90
 804d268:	2205      	movs	r2, #5
 804d26a:	701a      	strb	r2, [r3, #0]
            break;
 804d26c:	e0b5      	b.n	804d3da <USBH_MSC_Process+0x4ea>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 804d26e:	7bfb      	ldrb	r3, [r7, #15]
 804d270:	2b04      	cmp	r3, #4
 804d272:	f040 80b2 	bne.w	804d3da <USBH_MSC_Process+0x4ea>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 804d276:	693b      	ldr	r3, [r7, #16]
 804d278:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 804d27c:	4619      	mov	r1, r3
 804d27e:	693a      	ldr	r2, [r7, #16]
 804d280:	2334      	movs	r3, #52	; 0x34
 804d282:	fb01 f303 	mul.w	r3, r1, r3
 804d286:	4413      	add	r3, r2
 804d288:	3390      	adds	r3, #144	; 0x90
 804d28a:	2201      	movs	r2, #1
 804d28c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 804d28e:	693b      	ldr	r3, [r7, #16]
 804d290:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 804d294:	4619      	mov	r1, r3
 804d296:	693a      	ldr	r2, [r7, #16]
 804d298:	2334      	movs	r3, #52	; 0x34
 804d29a:	fb01 f303 	mul.w	r3, r1, r3
 804d29e:	4413      	add	r3, r2
 804d2a0:	3391      	adds	r3, #145	; 0x91
 804d2a2:	2202      	movs	r2, #2
 804d2a4:	701a      	strb	r2, [r3, #0]
            break;
 804d2a6:	e098      	b.n	804d3da <USBH_MSC_Process+0x4ea>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 804d2a8:	693b      	ldr	r3, [r7, #16]
 804d2aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 804d2ae:	b2d9      	uxtb	r1, r3
 804d2b0:	693b      	ldr	r3, [r7, #16]
 804d2b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 804d2b6:	461a      	mov	r2, r3
 804d2b8:	2334      	movs	r3, #52	; 0x34
 804d2ba:	fb02 f303 	mul.w	r3, r2, r3
 804d2be:	3398      	adds	r3, #152	; 0x98
 804d2c0:	693a      	ldr	r2, [r7, #16]
 804d2c2:	4413      	add	r3, r2
 804d2c4:	3304      	adds	r3, #4
 804d2c6:	461a      	mov	r2, r3
 804d2c8:	6878      	ldr	r0, [r7, #4]
 804d2ca:	f000 ff62 	bl	804e192 <USBH_MSC_SCSI_RequestSense>
 804d2ce:	4603      	mov	r3, r0
 804d2d0:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 804d2d2:	7bfb      	ldrb	r3, [r7, #15]
 804d2d4:	2b00      	cmp	r3, #0
 804d2d6:	d145      	bne.n	804d364 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 804d2d8:	693b      	ldr	r3, [r7, #16]
 804d2da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 804d2de:	4619      	mov	r1, r3
 804d2e0:	693a      	ldr	r2, [r7, #16]
 804d2e2:	2334      	movs	r3, #52	; 0x34
 804d2e4:	fb01 f303 	mul.w	r3, r1, r3
 804d2e8:	4413      	add	r3, r2
 804d2ea:	339c      	adds	r3, #156	; 0x9c
 804d2ec:	781b      	ldrb	r3, [r3, #0]
 804d2ee:	2b06      	cmp	r3, #6
 804d2f0:	d00c      	beq.n	804d30c <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 804d2f2:	693b      	ldr	r3, [r7, #16]
 804d2f4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 804d2f8:	4619      	mov	r1, r3
 804d2fa:	693a      	ldr	r2, [r7, #16]
 804d2fc:	2334      	movs	r3, #52	; 0x34
 804d2fe:	fb01 f303 	mul.w	r3, r1, r3
 804d302:	4413      	add	r3, r2
 804d304:	339c      	adds	r3, #156	; 0x9c
 804d306:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 804d308:	2b02      	cmp	r3, #2
 804d30a:	d117      	bne.n	804d33c <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 804d30c:	687b      	ldr	r3, [r7, #4]
 804d30e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 804d312:	693b      	ldr	r3, [r7, #16]
 804d314:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 804d318:	1ad3      	subs	r3, r2, r3
 804d31a:	f242 720f 	movw	r2, #9999	; 0x270f
 804d31e:	4293      	cmp	r3, r2
 804d320:	d80c      	bhi.n	804d33c <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 804d322:	693b      	ldr	r3, [r7, #16]
 804d324:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 804d328:	4619      	mov	r1, r3
 804d32a:	693a      	ldr	r2, [r7, #16]
 804d32c:	2334      	movs	r3, #52	; 0x34
 804d32e:	fb01 f303 	mul.w	r3, r1, r3
 804d332:	4413      	add	r3, r2
 804d334:	3390      	adds	r3, #144	; 0x90
 804d336:	2202      	movs	r2, #2
 804d338:	701a      	strb	r2, [r3, #0]
                  break;
 804d33a:	e051      	b.n	804d3e0 <USBH_MSC_Process+0x4f0>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 804d33c:	693b      	ldr	r3, [r7, #16]
 804d33e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 804d342:	4619      	mov	r1, r3
 804d344:	693a      	ldr	r2, [r7, #16]
 804d346:	2334      	movs	r3, #52	; 0x34
 804d348:	fb01 f303 	mul.w	r3, r1, r3
 804d34c:	4413      	add	r3, r2
 804d34e:	3390      	adds	r3, #144	; 0x90
 804d350:	2201      	movs	r2, #1
 804d352:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 804d354:	693b      	ldr	r3, [r7, #16]
 804d356:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 804d35a:	3301      	adds	r3, #1
 804d35c:	b29a      	uxth	r2, r3
 804d35e:	693b      	ldr	r3, [r7, #16]
 804d360:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 804d364:	7bfb      	ldrb	r3, [r7, #15]
 804d366:	2b02      	cmp	r3, #2
 804d368:	d10c      	bne.n	804d384 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 804d36a:	693b      	ldr	r3, [r7, #16]
 804d36c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 804d370:	4619      	mov	r1, r3
 804d372:	693a      	ldr	r2, [r7, #16]
 804d374:	2334      	movs	r3, #52	; 0x34
 804d376:	fb01 f303 	mul.w	r3, r1, r3
 804d37a:	4413      	add	r3, r2
 804d37c:	3390      	adds	r3, #144	; 0x90
 804d37e:	2208      	movs	r2, #8
 804d380:	701a      	strb	r2, [r3, #0]
            break;
 804d382:	e02c      	b.n	804d3de <USBH_MSC_Process+0x4ee>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 804d384:	7bfb      	ldrb	r3, [r7, #15]
 804d386:	2b04      	cmp	r3, #4
 804d388:	d129      	bne.n	804d3de <USBH_MSC_Process+0x4ee>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 804d38a:	693b      	ldr	r3, [r7, #16]
 804d38c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 804d390:	4619      	mov	r1, r3
 804d392:	693a      	ldr	r2, [r7, #16]
 804d394:	2334      	movs	r3, #52	; 0x34
 804d396:	fb01 f303 	mul.w	r3, r1, r3
 804d39a:	4413      	add	r3, r2
 804d39c:	3390      	adds	r3, #144	; 0x90
 804d39e:	2201      	movs	r2, #1
 804d3a0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 804d3a2:	693b      	ldr	r3, [r7, #16]
 804d3a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 804d3a8:	4619      	mov	r1, r3
 804d3aa:	693a      	ldr	r2, [r7, #16]
 804d3ac:	2334      	movs	r3, #52	; 0x34
 804d3ae:	fb01 f303 	mul.w	r3, r1, r3
 804d3b2:	4413      	add	r3, r2
 804d3b4:	3391      	adds	r3, #145	; 0x91
 804d3b6:	2202      	movs	r2, #2
 804d3b8:	701a      	strb	r2, [r3, #0]
            break;
 804d3ba:	e010      	b.n	804d3de <USBH_MSC_Process+0x4ee>
            MSC_Handle->current_lun++;
 804d3bc:	693b      	ldr	r3, [r7, #16]
 804d3be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 804d3c2:	3301      	adds	r3, #1
 804d3c4:	b29a      	uxth	r2, r3
 804d3c6:	693b      	ldr	r3, [r7, #16]
 804d3c8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 804d3cc:	e008      	b.n	804d3e0 <USBH_MSC_Process+0x4f0>
            break;
 804d3ce:	bf00      	nop
 804d3d0:	e006      	b.n	804d3e0 <USBH_MSC_Process+0x4f0>
            break;
 804d3d2:	bf00      	nop
 804d3d4:	e004      	b.n	804d3e0 <USBH_MSC_Process+0x4f0>
            break;
 804d3d6:	bf00      	nop
 804d3d8:	e002      	b.n	804d3e0 <USBH_MSC_Process+0x4f0>
            break;
 804d3da:	bf00      	nop
 804d3dc:	e000      	b.n	804d3e0 <USBH_MSC_Process+0x4f0>
            break;
 804d3de:	bf00      	nop
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 804d3e0:	687b      	ldr	r3, [r7, #4]
 804d3e2:	2204      	movs	r2, #4
 804d3e4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804d3e8:	687b      	ldr	r3, [r7, #4]
 804d3ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804d3ee:	687b      	ldr	r3, [r7, #4]
 804d3f0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804d3f4:	2200      	movs	r2, #0
 804d3f6:	4619      	mov	r1, r3
 804d3f8:	f008 ff6e 	bl	80562d8 <osMessagePut>
      break;
 804d3fc:	e01e      	b.n	804d43c <USBH_MSC_Process+0x54c>
        MSC_Handle->current_lun = 0U;
 804d3fe:	693b      	ldr	r3, [r7, #16]
 804d400:	2200      	movs	r2, #0
 804d402:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 804d406:	693b      	ldr	r3, [r7, #16]
 804d408:	2201      	movs	r2, #1
 804d40a:	731a      	strb	r2, [r3, #12]
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 804d40c:	687b      	ldr	r3, [r7, #4]
 804d40e:	2204      	movs	r2, #4
 804d410:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804d414:	687b      	ldr	r3, [r7, #4]
 804d416:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804d41a:	687b      	ldr	r3, [r7, #4]
 804d41c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804d420:	2200      	movs	r2, #0
 804d422:	4619      	mov	r1, r3
 804d424:	f008 ff58 	bl	80562d8 <osMessagePut>
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 804d428:	687b      	ldr	r3, [r7, #4]
 804d42a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804d42e:	2102      	movs	r1, #2
 804d430:	6878      	ldr	r0, [r7, #4]
 804d432:	4798      	blx	r3
      break;
 804d434:	e002      	b.n	804d43c <USBH_MSC_Process+0x54c>
      error = USBH_OK;
 804d436:	2300      	movs	r3, #0
 804d438:	75fb      	strb	r3, [r7, #23]
      break;
 804d43a:	bf00      	nop
  }
  return error;
 804d43c:	7dfb      	ldrb	r3, [r7, #23]
}
 804d43e:	4618      	mov	r0, r3
 804d440:	3718      	adds	r7, #24
 804d442:	46bd      	mov	sp, r7
 804d444:	bd80      	pop	{r7, pc}
 804d446:	bf00      	nop

0804d448 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 804d448:	b480      	push	{r7}
 804d44a:	b083      	sub	sp, #12
 804d44c:	af00      	add	r7, sp, #0
 804d44e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 804d450:	2300      	movs	r3, #0
}
 804d452:	4618      	mov	r0, r3
 804d454:	370c      	adds	r7, #12
 804d456:	46bd      	mov	sp, r7
 804d458:	f85d 7b04 	ldr.w	r7, [sp], #4
 804d45c:	4770      	bx	lr

0804d45e <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 804d45e:	b580      	push	{r7, lr}
 804d460:	b088      	sub	sp, #32
 804d462:	af02      	add	r7, sp, #8
 804d464:	6078      	str	r0, [r7, #4]
 804d466:	460b      	mov	r3, r1
 804d468:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 804d46a:	687b      	ldr	r3, [r7, #4]
 804d46c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804d470:	69db      	ldr	r3, [r3, #28]
 804d472:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 804d474:	2301      	movs	r3, #1
 804d476:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 804d478:	2301      	movs	r3, #1
 804d47a:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 804d47c:	78fb      	ldrb	r3, [r7, #3]
 804d47e:	693a      	ldr	r2, [r7, #16]
 804d480:	2134      	movs	r1, #52	; 0x34
 804d482:	fb01 f303 	mul.w	r3, r1, r3
 804d486:	4413      	add	r3, r2
 804d488:	3390      	adds	r3, #144	; 0x90
 804d48a:	781b      	ldrb	r3, [r3, #0]
 804d48c:	2b07      	cmp	r3, #7
 804d48e:	d04b      	beq.n	804d528 <USBH_MSC_RdWrProcess+0xca>
 804d490:	2b07      	cmp	r3, #7
 804d492:	f300 80d2 	bgt.w	804d63a <USBH_MSC_RdWrProcess+0x1dc>
 804d496:	2b05      	cmp	r3, #5
 804d498:	f000 8089 	beq.w	804d5ae <USBH_MSC_RdWrProcess+0x150>
 804d49c:	2b06      	cmp	r3, #6
 804d49e:	f040 80cc 	bne.w	804d63a <USBH_MSC_RdWrProcess+0x1dc>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 804d4a2:	78f9      	ldrb	r1, [r7, #3]
 804d4a4:	2300      	movs	r3, #0
 804d4a6:	9300      	str	r3, [sp, #0]
 804d4a8:	2300      	movs	r3, #0
 804d4aa:	2200      	movs	r2, #0
 804d4ac:	6878      	ldr	r0, [r7, #4]
 804d4ae:	f000 ff54 	bl	804e35a <USBH_MSC_SCSI_Read>
 804d4b2:	4603      	mov	r3, r0
 804d4b4:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 804d4b6:	7bfb      	ldrb	r3, [r7, #15]
 804d4b8:	2b00      	cmp	r3, #0
 804d4ba:	d10b      	bne.n	804d4d4 <USBH_MSC_RdWrProcess+0x76>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 804d4bc:	78fb      	ldrb	r3, [r7, #3]
 804d4be:	693a      	ldr	r2, [r7, #16]
 804d4c0:	2134      	movs	r1, #52	; 0x34
 804d4c2:	fb01 f303 	mul.w	r3, r1, r3
 804d4c6:	4413      	add	r3, r2
 804d4c8:	3390      	adds	r3, #144	; 0x90
 804d4ca:	2201      	movs	r2, #1
 804d4cc:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 804d4ce:	2300      	movs	r3, #0
 804d4d0:	75fb      	strb	r3, [r7, #23]
 804d4d2:	e01a      	b.n	804d50a <USBH_MSC_RdWrProcess+0xac>
      }
      else if (scsi_status == USBH_FAIL)
 804d4d4:	7bfb      	ldrb	r3, [r7, #15]
 804d4d6:	2b02      	cmp	r3, #2
 804d4d8:	d109      	bne.n	804d4ee <USBH_MSC_RdWrProcess+0x90>
      {
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 804d4da:	78fb      	ldrb	r3, [r7, #3]
 804d4dc:	693a      	ldr	r2, [r7, #16]
 804d4de:	2134      	movs	r1, #52	; 0x34
 804d4e0:	fb01 f303 	mul.w	r3, r1, r3
 804d4e4:	4413      	add	r3, r2
 804d4e6:	3390      	adds	r3, #144	; 0x90
 804d4e8:	2205      	movs	r2, #5
 804d4ea:	701a      	strb	r2, [r3, #0]
 804d4ec:	e00d      	b.n	804d50a <USBH_MSC_RdWrProcess+0xac>
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 804d4ee:	7bfb      	ldrb	r3, [r7, #15]
 804d4f0:	2b04      	cmp	r3, #4
 804d4f2:	d10a      	bne.n	804d50a <USBH_MSC_RdWrProcess+0xac>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 804d4f4:	78fb      	ldrb	r3, [r7, #3]
 804d4f6:	693a      	ldr	r2, [r7, #16]
 804d4f8:	2134      	movs	r1, #52	; 0x34
 804d4fa:	fb01 f303 	mul.w	r3, r1, r3
 804d4fe:	4413      	add	r3, r2
 804d500:	3390      	adds	r3, #144	; 0x90
 804d502:	2208      	movs	r2, #8
 804d504:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 804d506:	2302      	movs	r3, #2
 804d508:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 804d50a:	687b      	ldr	r3, [r7, #4]
 804d50c:	2204      	movs	r2, #4
 804d50e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804d512:	687b      	ldr	r3, [r7, #4]
 804d514:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804d518:	687b      	ldr	r3, [r7, #4]
 804d51a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804d51e:	2200      	movs	r2, #0
 804d520:	4619      	mov	r1, r3
 804d522:	f008 fed9 	bl	80562d8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804d526:	e089      	b.n	804d63c <USBH_MSC_RdWrProcess+0x1de>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 804d528:	78f9      	ldrb	r1, [r7, #3]
 804d52a:	2300      	movs	r3, #0
 804d52c:	9300      	str	r3, [sp, #0]
 804d52e:	2300      	movs	r3, #0
 804d530:	2200      	movs	r2, #0
 804d532:	6878      	ldr	r0, [r7, #4]
 804d534:	f000 fea6 	bl	804e284 <USBH_MSC_SCSI_Write>
 804d538:	4603      	mov	r3, r0
 804d53a:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 804d53c:	7bfb      	ldrb	r3, [r7, #15]
 804d53e:	2b00      	cmp	r3, #0
 804d540:	d10b      	bne.n	804d55a <USBH_MSC_RdWrProcess+0xfc>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 804d542:	78fb      	ldrb	r3, [r7, #3]
 804d544:	693a      	ldr	r2, [r7, #16]
 804d546:	2134      	movs	r1, #52	; 0x34
 804d548:	fb01 f303 	mul.w	r3, r1, r3
 804d54c:	4413      	add	r3, r2
 804d54e:	3390      	adds	r3, #144	; 0x90
 804d550:	2201      	movs	r2, #1
 804d552:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 804d554:	2300      	movs	r3, #0
 804d556:	75fb      	strb	r3, [r7, #23]
 804d558:	e01a      	b.n	804d590 <USBH_MSC_RdWrProcess+0x132>
      }
      else if (scsi_status == USBH_FAIL)
 804d55a:	7bfb      	ldrb	r3, [r7, #15]
 804d55c:	2b02      	cmp	r3, #2
 804d55e:	d109      	bne.n	804d574 <USBH_MSC_RdWrProcess+0x116>
      {
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 804d560:	78fb      	ldrb	r3, [r7, #3]
 804d562:	693a      	ldr	r2, [r7, #16]
 804d564:	2134      	movs	r1, #52	; 0x34
 804d566:	fb01 f303 	mul.w	r3, r1, r3
 804d56a:	4413      	add	r3, r2
 804d56c:	3390      	adds	r3, #144	; 0x90
 804d56e:	2205      	movs	r2, #5
 804d570:	701a      	strb	r2, [r3, #0]
 804d572:	e00d      	b.n	804d590 <USBH_MSC_RdWrProcess+0x132>
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 804d574:	7bfb      	ldrb	r3, [r7, #15]
 804d576:	2b04      	cmp	r3, #4
 804d578:	d10a      	bne.n	804d590 <USBH_MSC_RdWrProcess+0x132>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 804d57a:	78fb      	ldrb	r3, [r7, #3]
 804d57c:	693a      	ldr	r2, [r7, #16]
 804d57e:	2134      	movs	r1, #52	; 0x34
 804d580:	fb01 f303 	mul.w	r3, r1, r3
 804d584:	4413      	add	r3, r2
 804d586:	3390      	adds	r3, #144	; 0x90
 804d588:	2208      	movs	r2, #8
 804d58a:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 804d58c:	2302      	movs	r3, #2
 804d58e:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 804d590:	687b      	ldr	r3, [r7, #4]
 804d592:	2204      	movs	r2, #4
 804d594:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804d598:	687b      	ldr	r3, [r7, #4]
 804d59a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804d59e:	687b      	ldr	r3, [r7, #4]
 804d5a0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804d5a4:	2200      	movs	r2, #0
 804d5a6:	4619      	mov	r1, r3
 804d5a8:	f008 fe96 	bl	80562d8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804d5ac:	e046      	b.n	804d63c <USBH_MSC_RdWrProcess+0x1de>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 804d5ae:	78fb      	ldrb	r3, [r7, #3]
 804d5b0:	2234      	movs	r2, #52	; 0x34
 804d5b2:	fb02 f303 	mul.w	r3, r2, r3
 804d5b6:	3398      	adds	r3, #152	; 0x98
 804d5b8:	693a      	ldr	r2, [r7, #16]
 804d5ba:	4413      	add	r3, r2
 804d5bc:	1d1a      	adds	r2, r3, #4
 804d5be:	78fb      	ldrb	r3, [r7, #3]
 804d5c0:	4619      	mov	r1, r3
 804d5c2:	6878      	ldr	r0, [r7, #4]
 804d5c4:	f000 fde5 	bl	804e192 <USBH_MSC_SCSI_RequestSense>
 804d5c8:	4603      	mov	r3, r0
 804d5ca:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 804d5cc:	7bfb      	ldrb	r3, [r7, #15]
 804d5ce:	2b00      	cmp	r3, #0
 804d5d0:	d113      	bne.n	804d5fa <USBH_MSC_RdWrProcess+0x19c>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 804d5d2:	78fb      	ldrb	r3, [r7, #3]
 804d5d4:	693a      	ldr	r2, [r7, #16]
 804d5d6:	2134      	movs	r1, #52	; 0x34
 804d5d8:	fb01 f303 	mul.w	r3, r1, r3
 804d5dc:	4413      	add	r3, r2
 804d5de:	3390      	adds	r3, #144	; 0x90
 804d5e0:	2201      	movs	r2, #1
 804d5e2:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 804d5e4:	78fb      	ldrb	r3, [r7, #3]
 804d5e6:	693a      	ldr	r2, [r7, #16]
 804d5e8:	2134      	movs	r1, #52	; 0x34
 804d5ea:	fb01 f303 	mul.w	r3, r1, r3
 804d5ee:	4413      	add	r3, r2
 804d5f0:	3391      	adds	r3, #145	; 0x91
 804d5f2:	2202      	movs	r2, #2
 804d5f4:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 804d5f6:	2302      	movs	r3, #2
 804d5f8:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 804d5fa:	7bfb      	ldrb	r3, [r7, #15]
 804d5fc:	2b02      	cmp	r3, #2
 804d5fe:	d00d      	beq.n	804d61c <USBH_MSC_RdWrProcess+0x1be>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 804d600:	7bfb      	ldrb	r3, [r7, #15]
 804d602:	2b04      	cmp	r3, #4
 804d604:	d10a      	bne.n	804d61c <USBH_MSC_RdWrProcess+0x1be>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 804d606:	78fb      	ldrb	r3, [r7, #3]
 804d608:	693a      	ldr	r2, [r7, #16]
 804d60a:	2134      	movs	r1, #52	; 0x34
 804d60c:	fb01 f303 	mul.w	r3, r1, r3
 804d610:	4413      	add	r3, r2
 804d612:	3390      	adds	r3, #144	; 0x90
 804d614:	2208      	movs	r2, #8
 804d616:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 804d618:	2302      	movs	r3, #2
 804d61a:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 804d61c:	687b      	ldr	r3, [r7, #4]
 804d61e:	2204      	movs	r2, #4
 804d620:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804d624:	687b      	ldr	r3, [r7, #4]
 804d626:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804d62a:	687b      	ldr	r3, [r7, #4]
 804d62c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804d630:	2200      	movs	r2, #0
 804d632:	4619      	mov	r1, r3
 804d634:	f008 fe50 	bl	80562d8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804d638:	e000      	b.n	804d63c <USBH_MSC_RdWrProcess+0x1de>

    default:
      break;
 804d63a:	bf00      	nop

  }
  return error;
 804d63c:	7dfb      	ldrb	r3, [r7, #23]
}
 804d63e:	4618      	mov	r0, r3
 804d640:	3718      	adds	r7, #24
 804d642:	46bd      	mov	sp, r7
 804d644:	bd80      	pop	{r7, pc}

0804d646 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 804d646:	b480      	push	{r7}
 804d648:	b085      	sub	sp, #20
 804d64a:	af00      	add	r7, sp, #0
 804d64c:	6078      	str	r0, [r7, #4]
 804d64e:	460b      	mov	r3, r1
 804d650:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 804d652:	687b      	ldr	r3, [r7, #4]
 804d654:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804d658:	69db      	ldr	r3, [r3, #28]
 804d65a:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 804d65c:	687b      	ldr	r3, [r7, #4]
 804d65e:	781b      	ldrb	r3, [r3, #0]
 804d660:	b2db      	uxtb	r3, r3
 804d662:	2b0b      	cmp	r3, #11
 804d664:	d10c      	bne.n	804d680 <USBH_MSC_UnitIsReady+0x3a>
 804d666:	78fb      	ldrb	r3, [r7, #3]
 804d668:	68ba      	ldr	r2, [r7, #8]
 804d66a:	2134      	movs	r1, #52	; 0x34
 804d66c:	fb01 f303 	mul.w	r3, r1, r3
 804d670:	4413      	add	r3, r2
 804d672:	3391      	adds	r3, #145	; 0x91
 804d674:	781b      	ldrb	r3, [r3, #0]
 804d676:	2b00      	cmp	r3, #0
 804d678:	d102      	bne.n	804d680 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 804d67a:	2301      	movs	r3, #1
 804d67c:	73fb      	strb	r3, [r7, #15]
 804d67e:	e001      	b.n	804d684 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 804d680:	2300      	movs	r3, #0
 804d682:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 804d684:	7bfb      	ldrb	r3, [r7, #15]
}
 804d686:	4618      	mov	r0, r3
 804d688:	3714      	adds	r7, #20
 804d68a:	46bd      	mov	sp, r7
 804d68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 804d690:	4770      	bx	lr

0804d692 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 804d692:	b580      	push	{r7, lr}
 804d694:	b086      	sub	sp, #24
 804d696:	af00      	add	r7, sp, #0
 804d698:	60f8      	str	r0, [r7, #12]
 804d69a:	460b      	mov	r3, r1
 804d69c:	607a      	str	r2, [r7, #4]
 804d69e:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 804d6a0:	68fb      	ldr	r3, [r7, #12]
 804d6a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804d6a6:	69db      	ldr	r3, [r3, #28]
 804d6a8:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 804d6aa:	68fb      	ldr	r3, [r7, #12]
 804d6ac:	781b      	ldrb	r3, [r3, #0]
 804d6ae:	b2db      	uxtb	r3, r3
 804d6b0:	2b0b      	cmp	r3, #11
 804d6b2:	d10d      	bne.n	804d6d0 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 804d6b4:	7afb      	ldrb	r3, [r7, #11]
 804d6b6:	2234      	movs	r2, #52	; 0x34
 804d6b8:	fb02 f303 	mul.w	r3, r2, r3
 804d6bc:	3390      	adds	r3, #144	; 0x90
 804d6be:	697a      	ldr	r2, [r7, #20]
 804d6c0:	4413      	add	r3, r2
 804d6c2:	2234      	movs	r2, #52	; 0x34
 804d6c4:	4619      	mov	r1, r3
 804d6c6:	6878      	ldr	r0, [r7, #4]
 804d6c8:	f00c fc1e 	bl	8059f08 <memcpy>
    return USBH_OK;
 804d6cc:	2300      	movs	r3, #0
 804d6ce:	e000      	b.n	804d6d2 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 804d6d0:	2302      	movs	r3, #2
  }
}
 804d6d2:	4618      	mov	r0, r3
 804d6d4:	3718      	adds	r7, #24
 804d6d6:	46bd      	mov	sp, r7
 804d6d8:	bd80      	pop	{r7, pc}

0804d6da <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 804d6da:	b580      	push	{r7, lr}
 804d6dc:	b088      	sub	sp, #32
 804d6de:	af02      	add	r7, sp, #8
 804d6e0:	60f8      	str	r0, [r7, #12]
 804d6e2:	607a      	str	r2, [r7, #4]
 804d6e4:	603b      	str	r3, [r7, #0]
 804d6e6:	460b      	mov	r3, r1
 804d6e8:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 804d6ea:	68fb      	ldr	r3, [r7, #12]
 804d6ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804d6f0:	69db      	ldr	r3, [r3, #28]
 804d6f2:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 804d6f4:	68fb      	ldr	r3, [r7, #12]
 804d6f6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 804d6fa:	b2db      	uxtb	r3, r3
 804d6fc:	2b00      	cmp	r3, #0
 804d6fe:	d00e      	beq.n	804d71e <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 804d700:	68fb      	ldr	r3, [r7, #12]
 804d702:	781b      	ldrb	r3, [r3, #0]
 804d704:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 804d706:	2b0b      	cmp	r3, #11
 804d708:	d109      	bne.n	804d71e <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 804d70a:	7afb      	ldrb	r3, [r7, #11]
 804d70c:	697a      	ldr	r2, [r7, #20]
 804d70e:	2134      	movs	r1, #52	; 0x34
 804d710:	fb01 f303 	mul.w	r3, r1, r3
 804d714:	4413      	add	r3, r2
 804d716:	3390      	adds	r3, #144	; 0x90
 804d718:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 804d71a:	2b01      	cmp	r3, #1
 804d71c:	d001      	beq.n	804d722 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 804d71e:	2302      	movs	r3, #2
 804d720:	e040      	b.n	804d7a4 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 804d722:	697b      	ldr	r3, [r7, #20]
 804d724:	2206      	movs	r2, #6
 804d726:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 804d728:	7afb      	ldrb	r3, [r7, #11]
 804d72a:	697a      	ldr	r2, [r7, #20]
 804d72c:	2134      	movs	r1, #52	; 0x34
 804d72e:	fb01 f303 	mul.w	r3, r1, r3
 804d732:	4413      	add	r3, r2
 804d734:	3390      	adds	r3, #144	; 0x90
 804d736:	2206      	movs	r2, #6
 804d738:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 804d73a:	7afb      	ldrb	r3, [r7, #11]
 804d73c:	b29a      	uxth	r2, r3
 804d73e:	697b      	ldr	r3, [r7, #20]
 804d740:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 804d744:	7af9      	ldrb	r1, [r7, #11]
 804d746:	6a3b      	ldr	r3, [r7, #32]
 804d748:	9300      	str	r3, [sp, #0]
 804d74a:	683b      	ldr	r3, [r7, #0]
 804d74c:	687a      	ldr	r2, [r7, #4]
 804d74e:	68f8      	ldr	r0, [r7, #12]
 804d750:	f000 fe03 	bl	804e35a <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 804d754:	68fb      	ldr	r3, [r7, #12]
 804d756:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 804d75a:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 804d75c:	e016      	b.n	804d78c <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 804d75e:	68fb      	ldr	r3, [r7, #12]
 804d760:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 804d764:	693b      	ldr	r3, [r7, #16]
 804d766:	1ad2      	subs	r2, r2, r3
 804d768:	6a3b      	ldr	r3, [r7, #32]
 804d76a:	f242 7110 	movw	r1, #10000	; 0x2710
 804d76e:	fb01 f303 	mul.w	r3, r1, r3
 804d772:	429a      	cmp	r2, r3
 804d774:	d805      	bhi.n	804d782 <USBH_MSC_Read+0xa8>
 804d776:	68fb      	ldr	r3, [r7, #12]
 804d778:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 804d77c:	b2db      	uxtb	r3, r3
 804d77e:	2b00      	cmp	r3, #0
 804d780:	d104      	bne.n	804d78c <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 804d782:	697b      	ldr	r3, [r7, #20]
 804d784:	2201      	movs	r2, #1
 804d786:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 804d788:	2302      	movs	r3, #2
 804d78a:	e00b      	b.n	804d7a4 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 804d78c:	7afb      	ldrb	r3, [r7, #11]
 804d78e:	4619      	mov	r1, r3
 804d790:	68f8      	ldr	r0, [r7, #12]
 804d792:	f7ff fe64 	bl	804d45e <USBH_MSC_RdWrProcess>
 804d796:	4603      	mov	r3, r0
 804d798:	2b01      	cmp	r3, #1
 804d79a:	d0e0      	beq.n	804d75e <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 804d79c:	697b      	ldr	r3, [r7, #20]
 804d79e:	2201      	movs	r2, #1
 804d7a0:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 804d7a2:	2300      	movs	r3, #0
}
 804d7a4:	4618      	mov	r0, r3
 804d7a6:	3718      	adds	r7, #24
 804d7a8:	46bd      	mov	sp, r7
 804d7aa:	bd80      	pop	{r7, pc}

0804d7ac <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 804d7ac:	b580      	push	{r7, lr}
 804d7ae:	b088      	sub	sp, #32
 804d7b0:	af02      	add	r7, sp, #8
 804d7b2:	60f8      	str	r0, [r7, #12]
 804d7b4:	607a      	str	r2, [r7, #4]
 804d7b6:	603b      	str	r3, [r7, #0]
 804d7b8:	460b      	mov	r3, r1
 804d7ba:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 804d7bc:	68fb      	ldr	r3, [r7, #12]
 804d7be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804d7c2:	69db      	ldr	r3, [r3, #28]
 804d7c4:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 804d7c6:	68fb      	ldr	r3, [r7, #12]
 804d7c8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 804d7cc:	b2db      	uxtb	r3, r3
 804d7ce:	2b00      	cmp	r3, #0
 804d7d0:	d00e      	beq.n	804d7f0 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 804d7d2:	68fb      	ldr	r3, [r7, #12]
 804d7d4:	781b      	ldrb	r3, [r3, #0]
 804d7d6:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 804d7d8:	2b0b      	cmp	r3, #11
 804d7da:	d109      	bne.n	804d7f0 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 804d7dc:	7afb      	ldrb	r3, [r7, #11]
 804d7de:	697a      	ldr	r2, [r7, #20]
 804d7e0:	2134      	movs	r1, #52	; 0x34
 804d7e2:	fb01 f303 	mul.w	r3, r1, r3
 804d7e6:	4413      	add	r3, r2
 804d7e8:	3390      	adds	r3, #144	; 0x90
 804d7ea:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 804d7ec:	2b01      	cmp	r3, #1
 804d7ee:	d001      	beq.n	804d7f4 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 804d7f0:	2302      	movs	r3, #2
 804d7f2:	e040      	b.n	804d876 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 804d7f4:	697b      	ldr	r3, [r7, #20]
 804d7f6:	2207      	movs	r2, #7
 804d7f8:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 804d7fa:	7afb      	ldrb	r3, [r7, #11]
 804d7fc:	697a      	ldr	r2, [r7, #20]
 804d7fe:	2134      	movs	r1, #52	; 0x34
 804d800:	fb01 f303 	mul.w	r3, r1, r3
 804d804:	4413      	add	r3, r2
 804d806:	3390      	adds	r3, #144	; 0x90
 804d808:	2207      	movs	r2, #7
 804d80a:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 804d80c:	7afb      	ldrb	r3, [r7, #11]
 804d80e:	b29a      	uxth	r2, r3
 804d810:	697b      	ldr	r3, [r7, #20]
 804d812:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 804d816:	7af9      	ldrb	r1, [r7, #11]
 804d818:	6a3b      	ldr	r3, [r7, #32]
 804d81a:	9300      	str	r3, [sp, #0]
 804d81c:	683b      	ldr	r3, [r7, #0]
 804d81e:	687a      	ldr	r2, [r7, #4]
 804d820:	68f8      	ldr	r0, [r7, #12]
 804d822:	f000 fd2f 	bl	804e284 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 804d826:	68fb      	ldr	r3, [r7, #12]
 804d828:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 804d82c:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 804d82e:	e016      	b.n	804d85e <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 804d830:	68fb      	ldr	r3, [r7, #12]
 804d832:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 804d836:	693b      	ldr	r3, [r7, #16]
 804d838:	1ad2      	subs	r2, r2, r3
 804d83a:	6a3b      	ldr	r3, [r7, #32]
 804d83c:	f242 7110 	movw	r1, #10000	; 0x2710
 804d840:	fb01 f303 	mul.w	r3, r1, r3
 804d844:	429a      	cmp	r2, r3
 804d846:	d805      	bhi.n	804d854 <USBH_MSC_Write+0xa8>
 804d848:	68fb      	ldr	r3, [r7, #12]
 804d84a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 804d84e:	b2db      	uxtb	r3, r3
 804d850:	2b00      	cmp	r3, #0
 804d852:	d104      	bne.n	804d85e <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 804d854:	697b      	ldr	r3, [r7, #20]
 804d856:	2201      	movs	r2, #1
 804d858:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 804d85a:	2302      	movs	r3, #2
 804d85c:	e00b      	b.n	804d876 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 804d85e:	7afb      	ldrb	r3, [r7, #11]
 804d860:	4619      	mov	r1, r3
 804d862:	68f8      	ldr	r0, [r7, #12]
 804d864:	f7ff fdfb 	bl	804d45e <USBH_MSC_RdWrProcess>
 804d868:	4603      	mov	r3, r0
 804d86a:	2b01      	cmp	r3, #1
 804d86c:	d0e0      	beq.n	804d830 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 804d86e:	697b      	ldr	r3, [r7, #20]
 804d870:	2201      	movs	r2, #1
 804d872:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 804d874:	2300      	movs	r3, #0
}
 804d876:	4618      	mov	r0, r3
 804d878:	3718      	adds	r7, #24
 804d87a:	46bd      	mov	sp, r7
 804d87c:	bd80      	pop	{r7, pc}

0804d87e <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 804d87e:	b580      	push	{r7, lr}
 804d880:	b082      	sub	sp, #8
 804d882:	af00      	add	r7, sp, #0
 804d884:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 804d886:	687b      	ldr	r3, [r7, #4]
 804d888:	2221      	movs	r2, #33	; 0x21
 804d88a:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 804d88c:	687b      	ldr	r3, [r7, #4]
 804d88e:	22ff      	movs	r2, #255	; 0xff
 804d890:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 804d892:	687b      	ldr	r3, [r7, #4]
 804d894:	2200      	movs	r2, #0
 804d896:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 804d898:	687b      	ldr	r3, [r7, #4]
 804d89a:	2200      	movs	r2, #0
 804d89c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 804d89e:	687b      	ldr	r3, [r7, #4]
 804d8a0:	2200      	movs	r2, #0
 804d8a2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 804d8a4:	2200      	movs	r2, #0
 804d8a6:	2100      	movs	r1, #0
 804d8a8:	6878      	ldr	r0, [r7, #4]
 804d8aa:	f002 f873 	bl	804f994 <USBH_CtlReq>
 804d8ae:	4603      	mov	r3, r0
}
 804d8b0:	4618      	mov	r0, r3
 804d8b2:	3708      	adds	r7, #8
 804d8b4:	46bd      	mov	sp, r7
 804d8b6:	bd80      	pop	{r7, pc}

0804d8b8 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 804d8b8:	b580      	push	{r7, lr}
 804d8ba:	b082      	sub	sp, #8
 804d8bc:	af00      	add	r7, sp, #0
 804d8be:	6078      	str	r0, [r7, #4]
 804d8c0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 804d8c2:	687b      	ldr	r3, [r7, #4]
 804d8c4:	22a1      	movs	r2, #161	; 0xa1
 804d8c6:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 804d8c8:	687b      	ldr	r3, [r7, #4]
 804d8ca:	22fe      	movs	r2, #254	; 0xfe
 804d8cc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 804d8ce:	687b      	ldr	r3, [r7, #4]
 804d8d0:	2200      	movs	r2, #0
 804d8d2:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 804d8d4:	687b      	ldr	r3, [r7, #4]
 804d8d6:	2200      	movs	r2, #0
 804d8d8:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 804d8da:	687b      	ldr	r3, [r7, #4]
 804d8dc:	2201      	movs	r2, #1
 804d8de:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 804d8e0:	2201      	movs	r2, #1
 804d8e2:	6839      	ldr	r1, [r7, #0]
 804d8e4:	6878      	ldr	r0, [r7, #4]
 804d8e6:	f002 f855 	bl	804f994 <USBH_CtlReq>
 804d8ea:	4603      	mov	r3, r0
}
 804d8ec:	4618      	mov	r0, r3
 804d8ee:	3708      	adds	r7, #8
 804d8f0:	46bd      	mov	sp, r7
 804d8f2:	bd80      	pop	{r7, pc}

0804d8f4 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 804d8f4:	b480      	push	{r7}
 804d8f6:	b085      	sub	sp, #20
 804d8f8:	af00      	add	r7, sp, #0
 804d8fa:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 804d8fc:	687b      	ldr	r3, [r7, #4]
 804d8fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804d902:	69db      	ldr	r3, [r3, #28]
 804d904:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 804d906:	68fb      	ldr	r3, [r7, #12]
 804d908:	4a09      	ldr	r2, [pc, #36]	; (804d930 <USBH_MSC_BOT_Init+0x3c>)
 804d90a:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 804d90c:	68fb      	ldr	r3, [r7, #12]
 804d90e:	4a09      	ldr	r2, [pc, #36]	; (804d934 <USBH_MSC_BOT_Init+0x40>)
 804d910:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 804d912:	68fb      	ldr	r3, [r7, #12]
 804d914:	2201      	movs	r2, #1
 804d916:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 804d91a:	68fb      	ldr	r3, [r7, #12]
 804d91c:	2201      	movs	r2, #1
 804d91e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 804d922:	2300      	movs	r3, #0
}
 804d924:	4618      	mov	r0, r3
 804d926:	3714      	adds	r7, #20
 804d928:	46bd      	mov	sp, r7
 804d92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804d92e:	4770      	bx	lr
 804d930:	43425355 	.word	0x43425355
 804d934:	20304050 	.word	0x20304050

0804d938 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 804d938:	b580      	push	{r7, lr}
 804d93a:	b088      	sub	sp, #32
 804d93c:	af02      	add	r7, sp, #8
 804d93e:	6078      	str	r0, [r7, #4]
 804d940:	460b      	mov	r3, r1
 804d942:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 804d944:	2301      	movs	r3, #1
 804d946:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 804d948:	2301      	movs	r3, #1
 804d94a:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 804d94c:	2301      	movs	r3, #1
 804d94e:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 804d950:	2300      	movs	r3, #0
 804d952:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 804d954:	687b      	ldr	r3, [r7, #4]
 804d956:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804d95a:	69db      	ldr	r3, [r3, #28]
 804d95c:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 804d95e:	2300      	movs	r3, #0
 804d960:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 804d962:	693b      	ldr	r3, [r7, #16]
 804d964:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 804d968:	3b01      	subs	r3, #1
 804d96a:	2b0a      	cmp	r3, #10
 804d96c:	f200 822a 	bhi.w	804ddc4 <USBH_MSC_BOT_Process+0x48c>
 804d970:	a201      	add	r2, pc, #4	; (adr r2, 804d978 <USBH_MSC_BOT_Process+0x40>)
 804d972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804d976:	bf00      	nop
 804d978:	0804d9a5 	.word	0x0804d9a5
 804d97c:	0804d9cd 	.word	0x0804d9cd
 804d980:	0804da8b 	.word	0x0804da8b
 804d984:	0804daa9 	.word	0x0804daa9
 804d988:	0804db65 	.word	0x0804db65
 804d98c:	0804db87 	.word	0x0804db87
 804d990:	0804dc73 	.word	0x0804dc73
 804d994:	0804dc8f 	.word	0x0804dc8f
 804d998:	0804dd19 	.word	0x0804dd19
 804d99c:	0804dd49 	.word	0x0804dd49
 804d9a0:	0804ddab 	.word	0x0804ddab
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 804d9a4:	693b      	ldr	r3, [r7, #16]
 804d9a6:	78fa      	ldrb	r2, [r7, #3]
 804d9a8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 804d9ac:	693b      	ldr	r3, [r7, #16]
 804d9ae:	2202      	movs	r2, #2
 804d9b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 804d9b4:	693b      	ldr	r3, [r7, #16]
 804d9b6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 804d9ba:	693b      	ldr	r3, [r7, #16]
 804d9bc:	795b      	ldrb	r3, [r3, #5]
 804d9be:	2201      	movs	r2, #1
 804d9c0:	9200      	str	r2, [sp, #0]
 804d9c2:	221f      	movs	r2, #31
 804d9c4:	6878      	ldr	r0, [r7, #4]
 804d9c6:	f002 fae4 	bl	804ff92 <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 804d9ca:	e20a      	b.n	804dde2 <USBH_MSC_BOT_Process+0x4aa>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 804d9cc:	693b      	ldr	r3, [r7, #16]
 804d9ce:	795b      	ldrb	r3, [r3, #5]
 804d9d0:	4619      	mov	r1, r3
 804d9d2:	6878      	ldr	r0, [r7, #4]
 804d9d4:	f00c f980 	bl	8059cd8 <USBH_LL_GetURBState>
 804d9d8:	4603      	mov	r3, r0
 804d9da:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 804d9dc:	7d3b      	ldrb	r3, [r7, #20]
 804d9de:	2b01      	cmp	r3, #1
 804d9e0:	d126      	bne.n	804da30 <USBH_MSC_BOT_Process+0xf8>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 804d9e2:	693b      	ldr	r3, [r7, #16]
 804d9e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 804d9e6:	2b00      	cmp	r3, #0
 804d9e8:	d00f      	beq.n	804da0a <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 804d9ea:	693b      	ldr	r3, [r7, #16]
 804d9ec:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 804d9f0:	b25b      	sxtb	r3, r3
 804d9f2:	2b00      	cmp	r3, #0
 804d9f4:	da04      	bge.n	804da00 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 804d9f6:	693b      	ldr	r3, [r7, #16]
 804d9f8:	2203      	movs	r2, #3
 804d9fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 804d9fe:	e008      	b.n	804da12 <USBH_MSC_BOT_Process+0xda>
          }
          else
          {
            /* Data Direction is OUT */
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 804da00:	693b      	ldr	r3, [r7, #16]
 804da02:	2205      	movs	r2, #5
 804da04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 804da08:	e003      	b.n	804da12 <USBH_MSC_BOT_Process+0xda>
        }

        else
        {
          /* If there is NO Data Transfer Stage */
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 804da0a:	693b      	ldr	r3, [r7, #16]
 804da0c:	2207      	movs	r2, #7
 804da0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 804da12:	687b      	ldr	r3, [r7, #4]
 804da14:	2202      	movs	r2, #2
 804da16:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804da1a:	687b      	ldr	r3, [r7, #4]
 804da1c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804da20:	687b      	ldr	r3, [r7, #4]
 804da22:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804da26:	2200      	movs	r2, #0
 804da28:	4619      	mov	r1, r3
 804da2a:	f008 fc55 	bl	80562d8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 804da2e:	e1cb      	b.n	804ddc8 <USBH_MSC_BOT_Process+0x490>
      else if (URB_Status == USBH_URB_NOTREADY)
 804da30:	7d3b      	ldrb	r3, [r7, #20]
 804da32:	2b02      	cmp	r3, #2
 804da34:	d112      	bne.n	804da5c <USBH_MSC_BOT_Process+0x124>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 804da36:	693b      	ldr	r3, [r7, #16]
 804da38:	2201      	movs	r2, #1
 804da3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 804da3e:	687b      	ldr	r3, [r7, #4]
 804da40:	2202      	movs	r2, #2
 804da42:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804da46:	687b      	ldr	r3, [r7, #4]
 804da48:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804da4c:	687b      	ldr	r3, [r7, #4]
 804da4e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804da52:	2200      	movs	r2, #0
 804da54:	4619      	mov	r1, r3
 804da56:	f008 fc3f 	bl	80562d8 <osMessagePut>
      break;
 804da5a:	e1b5      	b.n	804ddc8 <USBH_MSC_BOT_Process+0x490>
        if (URB_Status == USBH_URB_STALL)
 804da5c:	7d3b      	ldrb	r3, [r7, #20]
 804da5e:	2b05      	cmp	r3, #5
 804da60:	f040 81b2 	bne.w	804ddc8 <USBH_MSC_BOT_Process+0x490>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 804da64:	693b      	ldr	r3, [r7, #16]
 804da66:	220a      	movs	r2, #10
 804da68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 804da6c:	687b      	ldr	r3, [r7, #4]
 804da6e:	2202      	movs	r2, #2
 804da70:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804da74:	687b      	ldr	r3, [r7, #4]
 804da76:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804da7a:	687b      	ldr	r3, [r7, #4]
 804da7c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804da80:	2200      	movs	r2, #0
 804da82:	4619      	mov	r1, r3
 804da84:	f008 fc28 	bl	80562d8 <osMessagePut>
      break;
 804da88:	e19e      	b.n	804ddc8 <USBH_MSC_BOT_Process+0x490>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 804da8a:	693b      	ldr	r3, [r7, #16]
 804da8c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 804da90:	693b      	ldr	r3, [r7, #16]
 804da92:	895a      	ldrh	r2, [r3, #10]
 804da94:	693b      	ldr	r3, [r7, #16]
 804da96:	791b      	ldrb	r3, [r3, #4]
 804da98:	6878      	ldr	r0, [r7, #4]
 804da9a:	f002 fa9f 	bl	804ffdc <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 804da9e:	693b      	ldr	r3, [r7, #16]
 804daa0:	2204      	movs	r2, #4
 804daa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 804daa6:	e19c      	b.n	804dde2 <USBH_MSC_BOT_Process+0x4aa>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 804daa8:	693b      	ldr	r3, [r7, #16]
 804daaa:	791b      	ldrb	r3, [r3, #4]
 804daac:	4619      	mov	r1, r3
 804daae:	6878      	ldr	r0, [r7, #4]
 804dab0:	f00c f912 	bl	8059cd8 <USBH_LL_GetURBState>
 804dab4:	4603      	mov	r3, r0
 804dab6:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 804dab8:	7d3b      	ldrb	r3, [r7, #20]
 804daba:	2b01      	cmp	r3, #1
 804dabc:	d13b      	bne.n	804db36 <USBH_MSC_BOT_Process+0x1fe>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 804dabe:	693b      	ldr	r3, [r7, #16]
 804dac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 804dac2:	693a      	ldr	r2, [r7, #16]
 804dac4:	8952      	ldrh	r2, [r2, #10]
 804dac6:	4293      	cmp	r3, r2
 804dac8:	d910      	bls.n	804daec <USBH_MSC_BOT_Process+0x1b4>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 804daca:	693b      	ldr	r3, [r7, #16]
 804dacc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804dad0:	693a      	ldr	r2, [r7, #16]
 804dad2:	8952      	ldrh	r2, [r2, #10]
 804dad4:	441a      	add	r2, r3
 804dad6:	693b      	ldr	r3, [r7, #16]
 804dad8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 804dadc:	693b      	ldr	r3, [r7, #16]
 804dade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 804dae0:	693a      	ldr	r2, [r7, #16]
 804dae2:	8952      	ldrh	r2, [r2, #10]
 804dae4:	1a9a      	subs	r2, r3, r2
 804dae6:	693b      	ldr	r3, [r7, #16]
 804dae8:	65da      	str	r2, [r3, #92]	; 0x5c
 804daea:	e002      	b.n	804daf2 <USBH_MSC_BOT_Process+0x1ba>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 804daec:	693b      	ldr	r3, [r7, #16]
 804daee:	2200      	movs	r2, #0
 804daf0:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 804daf2:	693b      	ldr	r3, [r7, #16]
 804daf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 804daf6:	2b00      	cmp	r3, #0
 804daf8:	d00a      	beq.n	804db10 <USBH_MSC_BOT_Process+0x1d8>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 804dafa:	693b      	ldr	r3, [r7, #16]
 804dafc:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 804db00:	693b      	ldr	r3, [r7, #16]
 804db02:	895a      	ldrh	r2, [r3, #10]
 804db04:	693b      	ldr	r3, [r7, #16]
 804db06:	791b      	ldrb	r3, [r3, #4]
 804db08:	6878      	ldr	r0, [r7, #4]
 804db0a:	f002 fa67 	bl	804ffdc <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 804db0e:	e15d      	b.n	804ddcc <USBH_MSC_BOT_Process+0x494>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 804db10:	693b      	ldr	r3, [r7, #16]
 804db12:	2207      	movs	r2, #7
 804db14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 804db18:	687b      	ldr	r3, [r7, #4]
 804db1a:	2202      	movs	r2, #2
 804db1c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804db20:	687b      	ldr	r3, [r7, #4]
 804db22:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804db26:	687b      	ldr	r3, [r7, #4]
 804db28:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804db2c:	2200      	movs	r2, #0
 804db2e:	4619      	mov	r1, r3
 804db30:	f008 fbd2 	bl	80562d8 <osMessagePut>
      break;
 804db34:	e14a      	b.n	804ddcc <USBH_MSC_BOT_Process+0x494>
      else if (URB_Status == USBH_URB_STALL)
 804db36:	7d3b      	ldrb	r3, [r7, #20]
 804db38:	2b05      	cmp	r3, #5
 804db3a:	f040 8147 	bne.w	804ddcc <USBH_MSC_BOT_Process+0x494>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 804db3e:	693b      	ldr	r3, [r7, #16]
 804db40:	2209      	movs	r2, #9
 804db42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 804db46:	687b      	ldr	r3, [r7, #4]
 804db48:	2202      	movs	r2, #2
 804db4a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804db4e:	687b      	ldr	r3, [r7, #4]
 804db50:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804db54:	687b      	ldr	r3, [r7, #4]
 804db56:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804db5a:	2200      	movs	r2, #0
 804db5c:	4619      	mov	r1, r3
 804db5e:	f008 fbbb 	bl	80562d8 <osMessagePut>
      break;
 804db62:	e133      	b.n	804ddcc <USBH_MSC_BOT_Process+0x494>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 804db64:	693b      	ldr	r3, [r7, #16]
 804db66:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 804db6a:	693b      	ldr	r3, [r7, #16]
 804db6c:	891a      	ldrh	r2, [r3, #8]
 804db6e:	693b      	ldr	r3, [r7, #16]
 804db70:	795b      	ldrb	r3, [r3, #5]
 804db72:	2001      	movs	r0, #1
 804db74:	9000      	str	r0, [sp, #0]
 804db76:	6878      	ldr	r0, [r7, #4]
 804db78:	f002 fa0b 	bl	804ff92 <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 804db7c:	693b      	ldr	r3, [r7, #16]
 804db7e:	2206      	movs	r2, #6
 804db80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 804db84:	e12d      	b.n	804dde2 <USBH_MSC_BOT_Process+0x4aa>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 804db86:	693b      	ldr	r3, [r7, #16]
 804db88:	795b      	ldrb	r3, [r3, #5]
 804db8a:	4619      	mov	r1, r3
 804db8c:	6878      	ldr	r0, [r7, #4]
 804db8e:	f00c f8a3 	bl	8059cd8 <USBH_LL_GetURBState>
 804db92:	4603      	mov	r3, r0
 804db94:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 804db96:	7d3b      	ldrb	r3, [r7, #20]
 804db98:	2b01      	cmp	r3, #1
 804db9a:	d13d      	bne.n	804dc18 <USBH_MSC_BOT_Process+0x2e0>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 804db9c:	693b      	ldr	r3, [r7, #16]
 804db9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 804dba0:	693a      	ldr	r2, [r7, #16]
 804dba2:	8912      	ldrh	r2, [r2, #8]
 804dba4:	4293      	cmp	r3, r2
 804dba6:	d910      	bls.n	804dbca <USBH_MSC_BOT_Process+0x292>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 804dba8:	693b      	ldr	r3, [r7, #16]
 804dbaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804dbae:	693a      	ldr	r2, [r7, #16]
 804dbb0:	8912      	ldrh	r2, [r2, #8]
 804dbb2:	441a      	add	r2, r3
 804dbb4:	693b      	ldr	r3, [r7, #16]
 804dbb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 804dbba:	693b      	ldr	r3, [r7, #16]
 804dbbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 804dbbe:	693a      	ldr	r2, [r7, #16]
 804dbc0:	8912      	ldrh	r2, [r2, #8]
 804dbc2:	1a9a      	subs	r2, r3, r2
 804dbc4:	693b      	ldr	r3, [r7, #16]
 804dbc6:	65da      	str	r2, [r3, #92]	; 0x5c
 804dbc8:	e002      	b.n	804dbd0 <USBH_MSC_BOT_Process+0x298>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 804dbca:	693b      	ldr	r3, [r7, #16]
 804dbcc:	2200      	movs	r2, #0
 804dbce:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 804dbd0:	693b      	ldr	r3, [r7, #16]
 804dbd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 804dbd4:	2b00      	cmp	r3, #0
 804dbd6:	d00c      	beq.n	804dbf2 <USBH_MSC_BOT_Process+0x2ba>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 804dbd8:	693b      	ldr	r3, [r7, #16]
 804dbda:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 804dbde:	693b      	ldr	r3, [r7, #16]
 804dbe0:	891a      	ldrh	r2, [r3, #8]
 804dbe2:	693b      	ldr	r3, [r7, #16]
 804dbe4:	795b      	ldrb	r3, [r3, #5]
 804dbe6:	2001      	movs	r0, #1
 804dbe8:	9000      	str	r0, [sp, #0]
 804dbea:	6878      	ldr	r0, [r7, #4]
 804dbec:	f002 f9d1 	bl	804ff92 <USBH_BulkSendData>
 804dbf0:	e003      	b.n	804dbfa <USBH_MSC_BOT_Process+0x2c2>
                                  MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);
        }
        else
        {
          /* If value was 0, and successful transfer, then change the state */
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 804dbf2:	693b      	ldr	r3, [r7, #16]
 804dbf4:	2207      	movs	r2, #7
 804dbf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 804dbfa:	687b      	ldr	r3, [r7, #4]
 804dbfc:	2202      	movs	r2, #2
 804dbfe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804dc02:	687b      	ldr	r3, [r7, #4]
 804dc04:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804dc08:	687b      	ldr	r3, [r7, #4]
 804dc0a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804dc0e:	2200      	movs	r2, #0
 804dc10:	4619      	mov	r1, r3
 804dc12:	f008 fb61 	bl	80562d8 <osMessagePut>
#endif
      }
      else
      {
      }
      break;
 804dc16:	e0db      	b.n	804ddd0 <USBH_MSC_BOT_Process+0x498>
      else if (URB_Status == USBH_URB_NOTREADY)
 804dc18:	7d3b      	ldrb	r3, [r7, #20]
 804dc1a:	2b02      	cmp	r3, #2
 804dc1c:	d112      	bne.n	804dc44 <USBH_MSC_BOT_Process+0x30c>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 804dc1e:	693b      	ldr	r3, [r7, #16]
 804dc20:	2205      	movs	r2, #5
 804dc22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 804dc26:	687b      	ldr	r3, [r7, #4]
 804dc28:	2202      	movs	r2, #2
 804dc2a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804dc2e:	687b      	ldr	r3, [r7, #4]
 804dc30:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804dc34:	687b      	ldr	r3, [r7, #4]
 804dc36:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804dc3a:	2200      	movs	r2, #0
 804dc3c:	4619      	mov	r1, r3
 804dc3e:	f008 fb4b 	bl	80562d8 <osMessagePut>
      break;
 804dc42:	e0c5      	b.n	804ddd0 <USBH_MSC_BOT_Process+0x498>
      else if (URB_Status == USBH_URB_STALL)
 804dc44:	7d3b      	ldrb	r3, [r7, #20]
 804dc46:	2b05      	cmp	r3, #5
 804dc48:	f040 80c2 	bne.w	804ddd0 <USBH_MSC_BOT_Process+0x498>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 804dc4c:	693b      	ldr	r3, [r7, #16]
 804dc4e:	220a      	movs	r2, #10
 804dc50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 804dc54:	687b      	ldr	r3, [r7, #4]
 804dc56:	2202      	movs	r2, #2
 804dc58:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804dc5c:	687b      	ldr	r3, [r7, #4]
 804dc5e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804dc62:	687b      	ldr	r3, [r7, #4]
 804dc64:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804dc68:	2200      	movs	r2, #0
 804dc6a:	4619      	mov	r1, r3
 804dc6c:	f008 fb34 	bl	80562d8 <osMessagePut>
      break;
 804dc70:	e0ae      	b.n	804ddd0 <USBH_MSC_BOT_Process+0x498>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 804dc72:	693b      	ldr	r3, [r7, #16]
 804dc74:	f103 0178 	add.w	r1, r3, #120	; 0x78
 804dc78:	693b      	ldr	r3, [r7, #16]
 804dc7a:	791b      	ldrb	r3, [r3, #4]
 804dc7c:	220d      	movs	r2, #13
 804dc7e:	6878      	ldr	r0, [r7, #4]
 804dc80:	f002 f9ac 	bl	804ffdc <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 804dc84:	693b      	ldr	r3, [r7, #16]
 804dc86:	2208      	movs	r2, #8
 804dc88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 804dc8c:	e0a9      	b.n	804dde2 <USBH_MSC_BOT_Process+0x4aa>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 804dc8e:	693b      	ldr	r3, [r7, #16]
 804dc90:	791b      	ldrb	r3, [r3, #4]
 804dc92:	4619      	mov	r1, r3
 804dc94:	6878      	ldr	r0, [r7, #4]
 804dc96:	f00c f81f 	bl	8059cd8 <USBH_LL_GetURBState>
 804dc9a:	4603      	mov	r3, r0
 804dc9c:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 804dc9e:	7d3b      	ldrb	r3, [r7, #20]
 804dca0:	2b01      	cmp	r3, #1
 804dca2:	d123      	bne.n	804dcec <USBH_MSC_BOT_Process+0x3b4>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 804dca4:	693b      	ldr	r3, [r7, #16]
 804dca6:	2201      	movs	r2, #1
 804dca8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 804dcac:	693b      	ldr	r3, [r7, #16]
 804dcae:	2201      	movs	r2, #1
 804dcb0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 804dcb4:	6878      	ldr	r0, [r7, #4]
 804dcb6:	f000 f8c5 	bl	804de44 <USBH_MSC_DecodeCSW>
 804dcba:	4603      	mov	r3, r0
 804dcbc:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 804dcbe:	7d7b      	ldrb	r3, [r7, #21]
 804dcc0:	2b00      	cmp	r3, #0
 804dcc2:	d102      	bne.n	804dcca <USBH_MSC_BOT_Process+0x392>
        {
          status = USBH_OK;
 804dcc4:	2300      	movs	r3, #0
 804dcc6:	75fb      	strb	r3, [r7, #23]
 804dcc8:	e001      	b.n	804dcce <USBH_MSC_BOT_Process+0x396>
        }
        else
        {
          status = USBH_FAIL;
 804dcca:	2302      	movs	r3, #2
 804dccc:	75fb      	strb	r3, [r7, #23]
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 804dcce:	687b      	ldr	r3, [r7, #4]
 804dcd0:	2202      	movs	r2, #2
 804dcd2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804dcd6:	687b      	ldr	r3, [r7, #4]
 804dcd8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804dcdc:	687b      	ldr	r3, [r7, #4]
 804dcde:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804dce2:	2200      	movs	r2, #0
 804dce4:	4619      	mov	r1, r3
 804dce6:	f008 faf7 	bl	80562d8 <osMessagePut>
#endif
      }
      else
      {
      }
      break;
 804dcea:	e073      	b.n	804ddd4 <USBH_MSC_BOT_Process+0x49c>
      else if (URB_Status == USBH_URB_STALL)
 804dcec:	7d3b      	ldrb	r3, [r7, #20]
 804dcee:	2b05      	cmp	r3, #5
 804dcf0:	d170      	bne.n	804ddd4 <USBH_MSC_BOT_Process+0x49c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 804dcf2:	693b      	ldr	r3, [r7, #16]
 804dcf4:	2209      	movs	r2, #9
 804dcf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 804dcfa:	687b      	ldr	r3, [r7, #4]
 804dcfc:	2202      	movs	r2, #2
 804dcfe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804dd02:	687b      	ldr	r3, [r7, #4]
 804dd04:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804dd08:	687b      	ldr	r3, [r7, #4]
 804dd0a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804dd0e:	2200      	movs	r2, #0
 804dd10:	4619      	mov	r1, r3
 804dd12:	f008 fae1 	bl	80562d8 <osMessagePut>
      break;
 804dd16:	e05d      	b.n	804ddd4 <USBH_MSC_BOT_Process+0x49c>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 804dd18:	78fb      	ldrb	r3, [r7, #3]
 804dd1a:	2200      	movs	r2, #0
 804dd1c:	4619      	mov	r1, r3
 804dd1e:	6878      	ldr	r0, [r7, #4]
 804dd20:	f000 f864 	bl	804ddec <USBH_MSC_BOT_Abort>
 804dd24:	4603      	mov	r3, r0
 804dd26:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 804dd28:	7dbb      	ldrb	r3, [r7, #22]
 804dd2a:	2b00      	cmp	r3, #0
 804dd2c:	d104      	bne.n	804dd38 <USBH_MSC_BOT_Process+0x400>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 804dd2e:	693b      	ldr	r3, [r7, #16]
 804dd30:	2207      	movs	r2, #7
 804dd32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 804dd36:	e04f      	b.n	804ddd8 <USBH_MSC_BOT_Process+0x4a0>
      else if (error == USBH_UNRECOVERED_ERROR)
 804dd38:	7dbb      	ldrb	r3, [r7, #22]
 804dd3a:	2b04      	cmp	r3, #4
 804dd3c:	d14c      	bne.n	804ddd8 <USBH_MSC_BOT_Process+0x4a0>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 804dd3e:	693b      	ldr	r3, [r7, #16]
 804dd40:	220b      	movs	r2, #11
 804dd42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 804dd46:	e047      	b.n	804ddd8 <USBH_MSC_BOT_Process+0x4a0>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 804dd48:	78fb      	ldrb	r3, [r7, #3]
 804dd4a:	2201      	movs	r2, #1
 804dd4c:	4619      	mov	r1, r3
 804dd4e:	6878      	ldr	r0, [r7, #4]
 804dd50:	f000 f84c 	bl	804ddec <USBH_MSC_BOT_Abort>
 804dd54:	4603      	mov	r3, r0
 804dd56:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 804dd58:	7dbb      	ldrb	r3, [r7, #22]
 804dd5a:	2b00      	cmp	r3, #0
 804dd5c:	d11d      	bne.n	804dd9a <USBH_MSC_BOT_Process+0x462>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 804dd5e:	693b      	ldr	r3, [r7, #16]
 804dd60:	795b      	ldrb	r3, [r3, #5]
 804dd62:	4619      	mov	r1, r3
 804dd64:	6878      	ldr	r0, [r7, #4]
 804dd66:	f00c f811 	bl	8059d8c <USBH_LL_GetToggle>
 804dd6a:	4603      	mov	r3, r0
 804dd6c:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 804dd6e:	693b      	ldr	r3, [r7, #16]
 804dd70:	7959      	ldrb	r1, [r3, #5]
 804dd72:	7bfb      	ldrb	r3, [r7, #15]
 804dd74:	f1c3 0301 	rsb	r3, r3, #1
 804dd78:	b2db      	uxtb	r3, r3
 804dd7a:	461a      	mov	r2, r3
 804dd7c:	6878      	ldr	r0, [r7, #4]
 804dd7e:	f00b ffd5 	bl	8059d2c <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 804dd82:	693b      	ldr	r3, [r7, #16]
 804dd84:	791b      	ldrb	r3, [r3, #4]
 804dd86:	2200      	movs	r2, #0
 804dd88:	4619      	mov	r1, r3
 804dd8a:	6878      	ldr	r0, [r7, #4]
 804dd8c:	f00b ffce 	bl	8059d2c <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 804dd90:	693b      	ldr	r3, [r7, #16]
 804dd92:	2209      	movs	r2, #9
 804dd94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 804dd98:	e020      	b.n	804dddc <USBH_MSC_BOT_Process+0x4a4>
        if (error == USBH_UNRECOVERED_ERROR)
 804dd9a:	7dbb      	ldrb	r3, [r7, #22]
 804dd9c:	2b04      	cmp	r3, #4
 804dd9e:	d11d      	bne.n	804dddc <USBH_MSC_BOT_Process+0x4a4>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 804dda0:	693b      	ldr	r3, [r7, #16]
 804dda2:	220b      	movs	r2, #11
 804dda4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 804dda8:	e018      	b.n	804dddc <USBH_MSC_BOT_Process+0x4a4>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 804ddaa:	6878      	ldr	r0, [r7, #4]
 804ddac:	f7ff fd67 	bl	804d87e <USBH_MSC_BOT_REQ_Reset>
 804ddb0:	4603      	mov	r3, r0
 804ddb2:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 804ddb4:	7dfb      	ldrb	r3, [r7, #23]
 804ddb6:	2b00      	cmp	r3, #0
 804ddb8:	d112      	bne.n	804dde0 <USBH_MSC_BOT_Process+0x4a8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 804ddba:	693b      	ldr	r3, [r7, #16]
 804ddbc:	2201      	movs	r2, #1
 804ddbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 804ddc2:	e00d      	b.n	804dde0 <USBH_MSC_BOT_Process+0x4a8>

    default:
      break;
 804ddc4:	bf00      	nop
 804ddc6:	e00c      	b.n	804dde2 <USBH_MSC_BOT_Process+0x4aa>
      break;
 804ddc8:	bf00      	nop
 804ddca:	e00a      	b.n	804dde2 <USBH_MSC_BOT_Process+0x4aa>
      break;
 804ddcc:	bf00      	nop
 804ddce:	e008      	b.n	804dde2 <USBH_MSC_BOT_Process+0x4aa>
      break;
 804ddd0:	bf00      	nop
 804ddd2:	e006      	b.n	804dde2 <USBH_MSC_BOT_Process+0x4aa>
      break;
 804ddd4:	bf00      	nop
 804ddd6:	e004      	b.n	804dde2 <USBH_MSC_BOT_Process+0x4aa>
      break;
 804ddd8:	bf00      	nop
 804ddda:	e002      	b.n	804dde2 <USBH_MSC_BOT_Process+0x4aa>
      break;
 804dddc:	bf00      	nop
 804ddde:	e000      	b.n	804dde2 <USBH_MSC_BOT_Process+0x4aa>
      break;
 804dde0:	bf00      	nop
  }
  return status;
 804dde2:	7dfb      	ldrb	r3, [r7, #23]
}
 804dde4:	4618      	mov	r0, r3
 804dde6:	3718      	adds	r7, #24
 804dde8:	46bd      	mov	sp, r7
 804ddea:	bd80      	pop	{r7, pc}

0804ddec <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 804ddec:	b580      	push	{r7, lr}
 804ddee:	b084      	sub	sp, #16
 804ddf0:	af00      	add	r7, sp, #0
 804ddf2:	6078      	str	r0, [r7, #4]
 804ddf4:	460b      	mov	r3, r1
 804ddf6:	70fb      	strb	r3, [r7, #3]
 804ddf8:	4613      	mov	r3, r2
 804ddfa:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 804ddfc:	2302      	movs	r3, #2
 804ddfe:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 804de00:	687b      	ldr	r3, [r7, #4]
 804de02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804de06:	69db      	ldr	r3, [r3, #28]
 804de08:	60bb      	str	r3, [r7, #8]

  switch (dir)
 804de0a:	78bb      	ldrb	r3, [r7, #2]
 804de0c:	2b00      	cmp	r3, #0
 804de0e:	d002      	beq.n	804de16 <USBH_MSC_BOT_Abort+0x2a>
 804de10:	2b01      	cmp	r3, #1
 804de12:	d009      	beq.n	804de28 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 804de14:	e011      	b.n	804de3a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 804de16:	68bb      	ldr	r3, [r7, #8]
 804de18:	79db      	ldrb	r3, [r3, #7]
 804de1a:	4619      	mov	r1, r3
 804de1c:	6878      	ldr	r0, [r7, #4]
 804de1e:	f001 faea 	bl	804f3f6 <USBH_ClrFeature>
 804de22:	4603      	mov	r3, r0
 804de24:	73fb      	strb	r3, [r7, #15]
      break;
 804de26:	e008      	b.n	804de3a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 804de28:	68bb      	ldr	r3, [r7, #8]
 804de2a:	799b      	ldrb	r3, [r3, #6]
 804de2c:	4619      	mov	r1, r3
 804de2e:	6878      	ldr	r0, [r7, #4]
 804de30:	f001 fae1 	bl	804f3f6 <USBH_ClrFeature>
 804de34:	4603      	mov	r3, r0
 804de36:	73fb      	strb	r3, [r7, #15]
      break;
 804de38:	bf00      	nop
  }
  return status;
 804de3a:	7bfb      	ldrb	r3, [r7, #15]
}
 804de3c:	4618      	mov	r0, r3
 804de3e:	3710      	adds	r7, #16
 804de40:	46bd      	mov	sp, r7
 804de42:	bd80      	pop	{r7, pc}

0804de44 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 804de44:	b580      	push	{r7, lr}
 804de46:	b084      	sub	sp, #16
 804de48:	af00      	add	r7, sp, #0
 804de4a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 804de4c:	687b      	ldr	r3, [r7, #4]
 804de4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804de52:	69db      	ldr	r3, [r3, #28]
 804de54:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 804de56:	2301      	movs	r3, #1
 804de58:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 804de5a:	68bb      	ldr	r3, [r7, #8]
 804de5c:	791b      	ldrb	r3, [r3, #4]
 804de5e:	4619      	mov	r1, r3
 804de60:	6878      	ldr	r0, [r7, #4]
 804de62:	f00b fea7 	bl	8059bb4 <USBH_LL_GetLastXferSize>
 804de66:	4603      	mov	r3, r0
 804de68:	2b0d      	cmp	r3, #13
 804de6a:	d002      	beq.n	804de72 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 804de6c:	2302      	movs	r3, #2
 804de6e:	73fb      	strb	r3, [r7, #15]
 804de70:	e024      	b.n	804debc <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 804de72:	68bb      	ldr	r3, [r7, #8]
 804de74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 804de76:	4a14      	ldr	r2, [pc, #80]	; (804dec8 <USBH_MSC_DecodeCSW+0x84>)
 804de78:	4293      	cmp	r3, r2
 804de7a:	d11d      	bne.n	804deb8 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 804de7c:	68bb      	ldr	r3, [r7, #8]
 804de7e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 804de80:	68bb      	ldr	r3, [r7, #8]
 804de82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804de84:	429a      	cmp	r2, r3
 804de86:	d119      	bne.n	804debc <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 804de88:	68bb      	ldr	r3, [r7, #8]
 804de8a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 804de8e:	2b00      	cmp	r3, #0
 804de90:	d102      	bne.n	804de98 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 804de92:	2300      	movs	r3, #0
 804de94:	73fb      	strb	r3, [r7, #15]
 804de96:	e011      	b.n	804debc <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 804de98:	68bb      	ldr	r3, [r7, #8]
 804de9a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 804de9e:	2b01      	cmp	r3, #1
 804dea0:	d102      	bne.n	804dea8 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 804dea2:	2301      	movs	r3, #1
 804dea4:	73fb      	strb	r3, [r7, #15]
 804dea6:	e009      	b.n	804debc <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 804dea8:	68bb      	ldr	r3, [r7, #8]
 804deaa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 804deae:	2b02      	cmp	r3, #2
 804deb0:	d104      	bne.n	804debc <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 804deb2:	2302      	movs	r3, #2
 804deb4:	73fb      	strb	r3, [r7, #15]
 804deb6:	e001      	b.n	804debc <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 804deb8:	2302      	movs	r3, #2
 804deba:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 804debc:	7bfb      	ldrb	r3, [r7, #15]
}
 804debe:	4618      	mov	r0, r3
 804dec0:	3710      	adds	r7, #16
 804dec2:	46bd      	mov	sp, r7
 804dec4:	bd80      	pop	{r7, pc}
 804dec6:	bf00      	nop
 804dec8:	53425355 	.word	0x53425355

0804decc <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 804decc:	b580      	push	{r7, lr}
 804dece:	b084      	sub	sp, #16
 804ded0:	af00      	add	r7, sp, #0
 804ded2:	6078      	str	r0, [r7, #4]
 804ded4:	460b      	mov	r3, r1
 804ded6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 804ded8:	2302      	movs	r3, #2
 804deda:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 804dedc:	687b      	ldr	r3, [r7, #4]
 804dede:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804dee2:	69db      	ldr	r3, [r3, #28]
 804dee4:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 804dee6:	68bb      	ldr	r3, [r7, #8]
 804dee8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 804deec:	2b01      	cmp	r3, #1
 804deee:	d002      	beq.n	804def6 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 804def0:	2b02      	cmp	r3, #2
 804def2:	d021      	beq.n	804df38 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 804def4:	e028      	b.n	804df48 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 804def6:	68bb      	ldr	r3, [r7, #8]
 804def8:	2200      	movs	r2, #0
 804defa:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 804defc:	68bb      	ldr	r3, [r7, #8]
 804defe:	2200      	movs	r2, #0
 804df00:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 804df04:	68bb      	ldr	r3, [r7, #8]
 804df06:	220a      	movs	r2, #10
 804df08:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 804df0c:	68bb      	ldr	r3, [r7, #8]
 804df0e:	3363      	adds	r3, #99	; 0x63
 804df10:	2210      	movs	r2, #16
 804df12:	2100      	movs	r1, #0
 804df14:	4618      	mov	r0, r3
 804df16:	f00c f805 	bl	8059f24 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 804df1a:	68bb      	ldr	r3, [r7, #8]
 804df1c:	2200      	movs	r2, #0
 804df1e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 804df22:	68bb      	ldr	r3, [r7, #8]
 804df24:	2201      	movs	r2, #1
 804df26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 804df2a:	68bb      	ldr	r3, [r7, #8]
 804df2c:	2202      	movs	r2, #2
 804df2e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 804df32:	2301      	movs	r3, #1
 804df34:	73fb      	strb	r3, [r7, #15]
      break;
 804df36:	e007      	b.n	804df48 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 804df38:	78fb      	ldrb	r3, [r7, #3]
 804df3a:	4619      	mov	r1, r3
 804df3c:	6878      	ldr	r0, [r7, #4]
 804df3e:	f7ff fcfb 	bl	804d938 <USBH_MSC_BOT_Process>
 804df42:	4603      	mov	r3, r0
 804df44:	73fb      	strb	r3, [r7, #15]
      break;
 804df46:	bf00      	nop
  }

  return error;
 804df48:	7bfb      	ldrb	r3, [r7, #15]
}
 804df4a:	4618      	mov	r0, r3
 804df4c:	3710      	adds	r7, #16
 804df4e:	46bd      	mov	sp, r7
 804df50:	bd80      	pop	{r7, pc}

0804df52 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 804df52:	b580      	push	{r7, lr}
 804df54:	b086      	sub	sp, #24
 804df56:	af00      	add	r7, sp, #0
 804df58:	60f8      	str	r0, [r7, #12]
 804df5a:	460b      	mov	r3, r1
 804df5c:	607a      	str	r2, [r7, #4]
 804df5e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 804df60:	2301      	movs	r3, #1
 804df62:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 804df64:	68fb      	ldr	r3, [r7, #12]
 804df66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804df6a:	69db      	ldr	r3, [r3, #28]
 804df6c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 804df6e:	693b      	ldr	r3, [r7, #16]
 804df70:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 804df74:	2b01      	cmp	r3, #1
 804df76:	d002      	beq.n	804df7e <USBH_MSC_SCSI_ReadCapacity+0x2c>
 804df78:	2b02      	cmp	r3, #2
 804df7a:	d027      	beq.n	804dfcc <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 804df7c:	e05f      	b.n	804e03e <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 804df7e:	693b      	ldr	r3, [r7, #16]
 804df80:	2208      	movs	r2, #8
 804df82:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 804df84:	693b      	ldr	r3, [r7, #16]
 804df86:	2280      	movs	r2, #128	; 0x80
 804df88:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 804df8c:	693b      	ldr	r3, [r7, #16]
 804df8e:	220a      	movs	r2, #10
 804df90:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 804df94:	693b      	ldr	r3, [r7, #16]
 804df96:	3363      	adds	r3, #99	; 0x63
 804df98:	2210      	movs	r2, #16
 804df9a:	2100      	movs	r1, #0
 804df9c:	4618      	mov	r0, r3
 804df9e:	f00b ffc1 	bl	8059f24 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 804dfa2:	693b      	ldr	r3, [r7, #16]
 804dfa4:	2225      	movs	r2, #37	; 0x25
 804dfa6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 804dfaa:	693b      	ldr	r3, [r7, #16]
 804dfac:	2201      	movs	r2, #1
 804dfae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 804dfb2:	693b      	ldr	r3, [r7, #16]
 804dfb4:	2202      	movs	r2, #2
 804dfb6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 804dfba:	693b      	ldr	r3, [r7, #16]
 804dfbc:	f103 0210 	add.w	r2, r3, #16
 804dfc0:	693b      	ldr	r3, [r7, #16]
 804dfc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 804dfc6:	2301      	movs	r3, #1
 804dfc8:	75fb      	strb	r3, [r7, #23]
      break;
 804dfca:	e038      	b.n	804e03e <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 804dfcc:	7afb      	ldrb	r3, [r7, #11]
 804dfce:	4619      	mov	r1, r3
 804dfd0:	68f8      	ldr	r0, [r7, #12]
 804dfd2:	f7ff fcb1 	bl	804d938 <USBH_MSC_BOT_Process>
 804dfd6:	4603      	mov	r3, r0
 804dfd8:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 804dfda:	7dfb      	ldrb	r3, [r7, #23]
 804dfdc:	2b00      	cmp	r3, #0
 804dfde:	d12d      	bne.n	804e03c <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 804dfe0:	693b      	ldr	r3, [r7, #16]
 804dfe2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804dfe6:	3303      	adds	r3, #3
 804dfe8:	781b      	ldrb	r3, [r3, #0]
 804dfea:	461a      	mov	r2, r3
 804dfec:	693b      	ldr	r3, [r7, #16]
 804dfee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804dff2:	3302      	adds	r3, #2
 804dff4:	781b      	ldrb	r3, [r3, #0]
 804dff6:	021b      	lsls	r3, r3, #8
 804dff8:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 804dffa:	693b      	ldr	r3, [r7, #16]
 804dffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804e000:	3301      	adds	r3, #1
 804e002:	781b      	ldrb	r3, [r3, #0]
 804e004:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 804e006:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 804e008:	693b      	ldr	r3, [r7, #16]
 804e00a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804e00e:	781b      	ldrb	r3, [r3, #0]
 804e010:	061b      	lsls	r3, r3, #24
 804e012:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 804e014:	687b      	ldr	r3, [r7, #4]
 804e016:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 804e018:	693b      	ldr	r3, [r7, #16]
 804e01a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804e01e:	3307      	adds	r3, #7
 804e020:	781b      	ldrb	r3, [r3, #0]
 804e022:	b29a      	uxth	r2, r3
 804e024:	693b      	ldr	r3, [r7, #16]
 804e026:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804e02a:	3306      	adds	r3, #6
 804e02c:	781b      	ldrb	r3, [r3, #0]
 804e02e:	b29b      	uxth	r3, r3
 804e030:	021b      	lsls	r3, r3, #8
 804e032:	b29b      	uxth	r3, r3
 804e034:	4313      	orrs	r3, r2
 804e036:	b29a      	uxth	r2, r3
 804e038:	687b      	ldr	r3, [r7, #4]
 804e03a:	809a      	strh	r2, [r3, #4]
      break;
 804e03c:	bf00      	nop
  }

  return error;
 804e03e:	7dfb      	ldrb	r3, [r7, #23]
}
 804e040:	4618      	mov	r0, r3
 804e042:	3718      	adds	r7, #24
 804e044:	46bd      	mov	sp, r7
 804e046:	bd80      	pop	{r7, pc}

0804e048 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 804e048:	b580      	push	{r7, lr}
 804e04a:	b086      	sub	sp, #24
 804e04c:	af00      	add	r7, sp, #0
 804e04e:	60f8      	str	r0, [r7, #12]
 804e050:	460b      	mov	r3, r1
 804e052:	607a      	str	r2, [r7, #4]
 804e054:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 804e056:	2302      	movs	r3, #2
 804e058:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 804e05a:	68fb      	ldr	r3, [r7, #12]
 804e05c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804e060:	69db      	ldr	r3, [r3, #28]
 804e062:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 804e064:	693b      	ldr	r3, [r7, #16]
 804e066:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 804e06a:	2b01      	cmp	r3, #1
 804e06c:	d002      	beq.n	804e074 <USBH_MSC_SCSI_Inquiry+0x2c>
 804e06e:	2b02      	cmp	r3, #2
 804e070:	d03d      	beq.n	804e0ee <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 804e072:	e089      	b.n	804e188 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 804e074:	693b      	ldr	r3, [r7, #16]
 804e076:	2224      	movs	r2, #36	; 0x24
 804e078:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 804e07a:	693b      	ldr	r3, [r7, #16]
 804e07c:	2280      	movs	r2, #128	; 0x80
 804e07e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 804e082:	693b      	ldr	r3, [r7, #16]
 804e084:	220a      	movs	r2, #10
 804e086:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 804e08a:	693b      	ldr	r3, [r7, #16]
 804e08c:	3363      	adds	r3, #99	; 0x63
 804e08e:	220a      	movs	r2, #10
 804e090:	2100      	movs	r1, #0
 804e092:	4618      	mov	r0, r3
 804e094:	f00b ff46 	bl	8059f24 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 804e098:	693b      	ldr	r3, [r7, #16]
 804e09a:	2212      	movs	r2, #18
 804e09c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 804e0a0:	7afb      	ldrb	r3, [r7, #11]
 804e0a2:	015b      	lsls	r3, r3, #5
 804e0a4:	b2da      	uxtb	r2, r3
 804e0a6:	693b      	ldr	r3, [r7, #16]
 804e0a8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 804e0ac:	693b      	ldr	r3, [r7, #16]
 804e0ae:	2200      	movs	r2, #0
 804e0b0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 804e0b4:	693b      	ldr	r3, [r7, #16]
 804e0b6:	2200      	movs	r2, #0
 804e0b8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 804e0bc:	693b      	ldr	r3, [r7, #16]
 804e0be:	2224      	movs	r2, #36	; 0x24
 804e0c0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 804e0c4:	693b      	ldr	r3, [r7, #16]
 804e0c6:	2200      	movs	r2, #0
 804e0c8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 804e0cc:	693b      	ldr	r3, [r7, #16]
 804e0ce:	2201      	movs	r2, #1
 804e0d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 804e0d4:	693b      	ldr	r3, [r7, #16]
 804e0d6:	2202      	movs	r2, #2
 804e0d8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 804e0dc:	693b      	ldr	r3, [r7, #16]
 804e0de:	f103 0210 	add.w	r2, r3, #16
 804e0e2:	693b      	ldr	r3, [r7, #16]
 804e0e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 804e0e8:	2301      	movs	r3, #1
 804e0ea:	75fb      	strb	r3, [r7, #23]
      break;
 804e0ec:	e04c      	b.n	804e188 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 804e0ee:	7afb      	ldrb	r3, [r7, #11]
 804e0f0:	4619      	mov	r1, r3
 804e0f2:	68f8      	ldr	r0, [r7, #12]
 804e0f4:	f7ff fc20 	bl	804d938 <USBH_MSC_BOT_Process>
 804e0f8:	4603      	mov	r3, r0
 804e0fa:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 804e0fc:	7dfb      	ldrb	r3, [r7, #23]
 804e0fe:	2b00      	cmp	r3, #0
 804e100:	d141      	bne.n	804e186 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 804e102:	2222      	movs	r2, #34	; 0x22
 804e104:	2100      	movs	r1, #0
 804e106:	6878      	ldr	r0, [r7, #4]
 804e108:	f00b ff0c 	bl	8059f24 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 804e10c:	693b      	ldr	r3, [r7, #16]
 804e10e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804e112:	781b      	ldrb	r3, [r3, #0]
 804e114:	f003 031f 	and.w	r3, r3, #31
 804e118:	b2da      	uxtb	r2, r3
 804e11a:	687b      	ldr	r3, [r7, #4]
 804e11c:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 804e11e:	693b      	ldr	r3, [r7, #16]
 804e120:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804e124:	781b      	ldrb	r3, [r3, #0]
 804e126:	095b      	lsrs	r3, r3, #5
 804e128:	b2da      	uxtb	r2, r3
 804e12a:	687b      	ldr	r3, [r7, #4]
 804e12c:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 804e12e:	693b      	ldr	r3, [r7, #16]
 804e130:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804e134:	3301      	adds	r3, #1
 804e136:	781b      	ldrb	r3, [r3, #0]
 804e138:	b25b      	sxtb	r3, r3
 804e13a:	2b00      	cmp	r3, #0
 804e13c:	da03      	bge.n	804e146 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 804e13e:	687b      	ldr	r3, [r7, #4]
 804e140:	2201      	movs	r2, #1
 804e142:	709a      	strb	r2, [r3, #2]
 804e144:	e002      	b.n	804e14c <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 804e146:	687b      	ldr	r3, [r7, #4]
 804e148:	2200      	movs	r2, #0
 804e14a:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 804e14c:	687b      	ldr	r3, [r7, #4]
 804e14e:	1cd8      	adds	r0, r3, #3
 804e150:	693b      	ldr	r3, [r7, #16]
 804e152:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804e156:	3308      	adds	r3, #8
 804e158:	2208      	movs	r2, #8
 804e15a:	4619      	mov	r1, r3
 804e15c:	f00b fed4 	bl	8059f08 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 804e160:	687b      	ldr	r3, [r7, #4]
 804e162:	f103 000c 	add.w	r0, r3, #12
 804e166:	693b      	ldr	r3, [r7, #16]
 804e168:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804e16c:	3310      	adds	r3, #16
 804e16e:	2210      	movs	r2, #16
 804e170:	4619      	mov	r1, r3
 804e172:	f00b fec9 	bl	8059f08 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 804e176:	687b      	ldr	r3, [r7, #4]
 804e178:	331d      	adds	r3, #29
 804e17a:	693a      	ldr	r2, [r7, #16]
 804e17c:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 804e180:	3220      	adds	r2, #32
 804e182:	6812      	ldr	r2, [r2, #0]
 804e184:	601a      	str	r2, [r3, #0]
      break;
 804e186:	bf00      	nop
  }

  return error;
 804e188:	7dfb      	ldrb	r3, [r7, #23]
}
 804e18a:	4618      	mov	r0, r3
 804e18c:	3718      	adds	r7, #24
 804e18e:	46bd      	mov	sp, r7
 804e190:	bd80      	pop	{r7, pc}

0804e192 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 804e192:	b580      	push	{r7, lr}
 804e194:	b086      	sub	sp, #24
 804e196:	af00      	add	r7, sp, #0
 804e198:	60f8      	str	r0, [r7, #12]
 804e19a:	460b      	mov	r3, r1
 804e19c:	607a      	str	r2, [r7, #4]
 804e19e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 804e1a0:	2302      	movs	r3, #2
 804e1a2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 804e1a4:	68fb      	ldr	r3, [r7, #12]
 804e1a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804e1aa:	69db      	ldr	r3, [r3, #28]
 804e1ac:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 804e1ae:	693b      	ldr	r3, [r7, #16]
 804e1b0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 804e1b4:	2b01      	cmp	r3, #1
 804e1b6:	d002      	beq.n	804e1be <USBH_MSC_SCSI_RequestSense+0x2c>
 804e1b8:	2b02      	cmp	r3, #2
 804e1ba:	d03d      	beq.n	804e238 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 804e1bc:	e05d      	b.n	804e27a <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 804e1be:	693b      	ldr	r3, [r7, #16]
 804e1c0:	220e      	movs	r2, #14
 804e1c2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 804e1c4:	693b      	ldr	r3, [r7, #16]
 804e1c6:	2280      	movs	r2, #128	; 0x80
 804e1c8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 804e1cc:	693b      	ldr	r3, [r7, #16]
 804e1ce:	220a      	movs	r2, #10
 804e1d0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 804e1d4:	693b      	ldr	r3, [r7, #16]
 804e1d6:	3363      	adds	r3, #99	; 0x63
 804e1d8:	2210      	movs	r2, #16
 804e1da:	2100      	movs	r1, #0
 804e1dc:	4618      	mov	r0, r3
 804e1de:	f00b fea1 	bl	8059f24 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 804e1e2:	693b      	ldr	r3, [r7, #16]
 804e1e4:	2203      	movs	r2, #3
 804e1e6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 804e1ea:	7afb      	ldrb	r3, [r7, #11]
 804e1ec:	015b      	lsls	r3, r3, #5
 804e1ee:	b2da      	uxtb	r2, r3
 804e1f0:	693b      	ldr	r3, [r7, #16]
 804e1f2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 804e1f6:	693b      	ldr	r3, [r7, #16]
 804e1f8:	2200      	movs	r2, #0
 804e1fa:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 804e1fe:	693b      	ldr	r3, [r7, #16]
 804e200:	2200      	movs	r2, #0
 804e202:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 804e206:	693b      	ldr	r3, [r7, #16]
 804e208:	220e      	movs	r2, #14
 804e20a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 804e20e:	693b      	ldr	r3, [r7, #16]
 804e210:	2200      	movs	r2, #0
 804e212:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 804e216:	693b      	ldr	r3, [r7, #16]
 804e218:	2201      	movs	r2, #1
 804e21a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 804e21e:	693b      	ldr	r3, [r7, #16]
 804e220:	2202      	movs	r2, #2
 804e222:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 804e226:	693b      	ldr	r3, [r7, #16]
 804e228:	f103 0210 	add.w	r2, r3, #16
 804e22c:	693b      	ldr	r3, [r7, #16]
 804e22e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 804e232:	2301      	movs	r3, #1
 804e234:	75fb      	strb	r3, [r7, #23]
      break;
 804e236:	e020      	b.n	804e27a <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 804e238:	7afb      	ldrb	r3, [r7, #11]
 804e23a:	4619      	mov	r1, r3
 804e23c:	68f8      	ldr	r0, [r7, #12]
 804e23e:	f7ff fb7b 	bl	804d938 <USBH_MSC_BOT_Process>
 804e242:	4603      	mov	r3, r0
 804e244:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 804e246:	7dfb      	ldrb	r3, [r7, #23]
 804e248:	2b00      	cmp	r3, #0
 804e24a:	d115      	bne.n	804e278 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 804e24c:	693b      	ldr	r3, [r7, #16]
 804e24e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804e252:	3302      	adds	r3, #2
 804e254:	781b      	ldrb	r3, [r3, #0]
 804e256:	f003 030f 	and.w	r3, r3, #15
 804e25a:	b2da      	uxtb	r2, r3
 804e25c:	687b      	ldr	r3, [r7, #4]
 804e25e:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 804e260:	693b      	ldr	r3, [r7, #16]
 804e262:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804e266:	7b1a      	ldrb	r2, [r3, #12]
 804e268:	687b      	ldr	r3, [r7, #4]
 804e26a:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 804e26c:	693b      	ldr	r3, [r7, #16]
 804e26e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804e272:	7b5a      	ldrb	r2, [r3, #13]
 804e274:	687b      	ldr	r3, [r7, #4]
 804e276:	709a      	strb	r2, [r3, #2]
      break;
 804e278:	bf00      	nop
  }

  return error;
 804e27a:	7dfb      	ldrb	r3, [r7, #23]
}
 804e27c:	4618      	mov	r0, r3
 804e27e:	3718      	adds	r7, #24
 804e280:	46bd      	mov	sp, r7
 804e282:	bd80      	pop	{r7, pc}

0804e284 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 804e284:	b580      	push	{r7, lr}
 804e286:	b086      	sub	sp, #24
 804e288:	af00      	add	r7, sp, #0
 804e28a:	60f8      	str	r0, [r7, #12]
 804e28c:	607a      	str	r2, [r7, #4]
 804e28e:	603b      	str	r3, [r7, #0]
 804e290:	460b      	mov	r3, r1
 804e292:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 804e294:	2302      	movs	r3, #2
 804e296:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 804e298:	68fb      	ldr	r3, [r7, #12]
 804e29a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804e29e:	69db      	ldr	r3, [r3, #28]
 804e2a0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 804e2a2:	693b      	ldr	r3, [r7, #16]
 804e2a4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 804e2a8:	2b01      	cmp	r3, #1
 804e2aa:	d002      	beq.n	804e2b2 <USBH_MSC_SCSI_Write+0x2e>
 804e2ac:	2b02      	cmp	r3, #2
 804e2ae:	d047      	beq.n	804e340 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 804e2b0:	e04e      	b.n	804e350 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 804e2b2:	693b      	ldr	r3, [r7, #16]
 804e2b4:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 804e2b8:	461a      	mov	r2, r3
 804e2ba:	6a3b      	ldr	r3, [r7, #32]
 804e2bc:	fb03 f202 	mul.w	r2, r3, r2
 804e2c0:	693b      	ldr	r3, [r7, #16]
 804e2c2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 804e2c4:	693b      	ldr	r3, [r7, #16]
 804e2c6:	2200      	movs	r2, #0
 804e2c8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 804e2cc:	693b      	ldr	r3, [r7, #16]
 804e2ce:	220a      	movs	r2, #10
 804e2d0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 804e2d4:	693b      	ldr	r3, [r7, #16]
 804e2d6:	3363      	adds	r3, #99	; 0x63
 804e2d8:	2210      	movs	r2, #16
 804e2da:	2100      	movs	r1, #0
 804e2dc:	4618      	mov	r0, r3
 804e2de:	f00b fe21 	bl	8059f24 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 804e2e2:	693b      	ldr	r3, [r7, #16]
 804e2e4:	222a      	movs	r2, #42	; 0x2a
 804e2e6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 804e2ea:	79fa      	ldrb	r2, [r7, #7]
 804e2ec:	693b      	ldr	r3, [r7, #16]
 804e2ee:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 804e2f2:	79ba      	ldrb	r2, [r7, #6]
 804e2f4:	693b      	ldr	r3, [r7, #16]
 804e2f6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 804e2fa:	797a      	ldrb	r2, [r7, #5]
 804e2fc:	693b      	ldr	r3, [r7, #16]
 804e2fe:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 804e302:	1d3b      	adds	r3, r7, #4
 804e304:	781a      	ldrb	r2, [r3, #0]
 804e306:	693b      	ldr	r3, [r7, #16]
 804e308:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 804e30c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 804e310:	693b      	ldr	r3, [r7, #16]
 804e312:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 804e316:	f107 0320 	add.w	r3, r7, #32
 804e31a:	781a      	ldrb	r2, [r3, #0]
 804e31c:	693b      	ldr	r3, [r7, #16]
 804e31e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 804e322:	693b      	ldr	r3, [r7, #16]
 804e324:	2201      	movs	r2, #1
 804e326:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 804e32a:	693b      	ldr	r3, [r7, #16]
 804e32c:	2202      	movs	r2, #2
 804e32e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 804e332:	693b      	ldr	r3, [r7, #16]
 804e334:	683a      	ldr	r2, [r7, #0]
 804e336:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 804e33a:	2301      	movs	r3, #1
 804e33c:	75fb      	strb	r3, [r7, #23]
      break;
 804e33e:	e007      	b.n	804e350 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 804e340:	7afb      	ldrb	r3, [r7, #11]
 804e342:	4619      	mov	r1, r3
 804e344:	68f8      	ldr	r0, [r7, #12]
 804e346:	f7ff faf7 	bl	804d938 <USBH_MSC_BOT_Process>
 804e34a:	4603      	mov	r3, r0
 804e34c:	75fb      	strb	r3, [r7, #23]
      break;
 804e34e:	bf00      	nop
  }

  return error;
 804e350:	7dfb      	ldrb	r3, [r7, #23]
}
 804e352:	4618      	mov	r0, r3
 804e354:	3718      	adds	r7, #24
 804e356:	46bd      	mov	sp, r7
 804e358:	bd80      	pop	{r7, pc}

0804e35a <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 804e35a:	b580      	push	{r7, lr}
 804e35c:	b086      	sub	sp, #24
 804e35e:	af00      	add	r7, sp, #0
 804e360:	60f8      	str	r0, [r7, #12]
 804e362:	607a      	str	r2, [r7, #4]
 804e364:	603b      	str	r3, [r7, #0]
 804e366:	460b      	mov	r3, r1
 804e368:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 804e36a:	2302      	movs	r3, #2
 804e36c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 804e36e:	68fb      	ldr	r3, [r7, #12]
 804e370:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804e374:	69db      	ldr	r3, [r3, #28]
 804e376:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 804e378:	693b      	ldr	r3, [r7, #16]
 804e37a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 804e37e:	2b01      	cmp	r3, #1
 804e380:	d002      	beq.n	804e388 <USBH_MSC_SCSI_Read+0x2e>
 804e382:	2b02      	cmp	r3, #2
 804e384:	d047      	beq.n	804e416 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 804e386:	e04e      	b.n	804e426 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 804e388:	693b      	ldr	r3, [r7, #16]
 804e38a:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 804e38e:	461a      	mov	r2, r3
 804e390:	6a3b      	ldr	r3, [r7, #32]
 804e392:	fb03 f202 	mul.w	r2, r3, r2
 804e396:	693b      	ldr	r3, [r7, #16]
 804e398:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 804e39a:	693b      	ldr	r3, [r7, #16]
 804e39c:	2280      	movs	r2, #128	; 0x80
 804e39e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 804e3a2:	693b      	ldr	r3, [r7, #16]
 804e3a4:	220a      	movs	r2, #10
 804e3a6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 804e3aa:	693b      	ldr	r3, [r7, #16]
 804e3ac:	3363      	adds	r3, #99	; 0x63
 804e3ae:	2210      	movs	r2, #16
 804e3b0:	2100      	movs	r1, #0
 804e3b2:	4618      	mov	r0, r3
 804e3b4:	f00b fdb6 	bl	8059f24 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 804e3b8:	693b      	ldr	r3, [r7, #16]
 804e3ba:	2228      	movs	r2, #40	; 0x28
 804e3bc:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 804e3c0:	79fa      	ldrb	r2, [r7, #7]
 804e3c2:	693b      	ldr	r3, [r7, #16]
 804e3c4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 804e3c8:	79ba      	ldrb	r2, [r7, #6]
 804e3ca:	693b      	ldr	r3, [r7, #16]
 804e3cc:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 804e3d0:	797a      	ldrb	r2, [r7, #5]
 804e3d2:	693b      	ldr	r3, [r7, #16]
 804e3d4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 804e3d8:	1d3b      	adds	r3, r7, #4
 804e3da:	781a      	ldrb	r2, [r3, #0]
 804e3dc:	693b      	ldr	r3, [r7, #16]
 804e3de:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 804e3e2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 804e3e6:	693b      	ldr	r3, [r7, #16]
 804e3e8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 804e3ec:	f107 0320 	add.w	r3, r7, #32
 804e3f0:	781a      	ldrb	r2, [r3, #0]
 804e3f2:	693b      	ldr	r3, [r7, #16]
 804e3f4:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 804e3f8:	693b      	ldr	r3, [r7, #16]
 804e3fa:	2201      	movs	r2, #1
 804e3fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 804e400:	693b      	ldr	r3, [r7, #16]
 804e402:	2202      	movs	r2, #2
 804e404:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 804e408:	693b      	ldr	r3, [r7, #16]
 804e40a:	683a      	ldr	r2, [r7, #0]
 804e40c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 804e410:	2301      	movs	r3, #1
 804e412:	75fb      	strb	r3, [r7, #23]
      break;
 804e414:	e007      	b.n	804e426 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 804e416:	7afb      	ldrb	r3, [r7, #11]
 804e418:	4619      	mov	r1, r3
 804e41a:	68f8      	ldr	r0, [r7, #12]
 804e41c:	f7ff fa8c 	bl	804d938 <USBH_MSC_BOT_Process>
 804e420:	4603      	mov	r3, r0
 804e422:	75fb      	strb	r3, [r7, #23]
      break;
 804e424:	bf00      	nop
  }

  return error;
 804e426:	7dfb      	ldrb	r3, [r7, #23]
}
 804e428:	4618      	mov	r0, r3
 804e42a:	3718      	adds	r7, #24
 804e42c:	46bd      	mov	sp, r7
 804e42e:	bd80      	pop	{r7, pc}

0804e430 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 804e430:	b5b0      	push	{r4, r5, r7, lr}
 804e432:	b090      	sub	sp, #64	; 0x40
 804e434:	af00      	add	r7, sp, #0
 804e436:	60f8      	str	r0, [r7, #12]
 804e438:	60b9      	str	r1, [r7, #8]
 804e43a:	4613      	mov	r3, r2
 804e43c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 804e43e:	68fb      	ldr	r3, [r7, #12]
 804e440:	2b00      	cmp	r3, #0
 804e442:	d101      	bne.n	804e448 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 804e444:	2302      	movs	r3, #2
 804e446:	e04d      	b.n	804e4e4 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 804e448:	68fb      	ldr	r3, [r7, #12]
 804e44a:	79fa      	ldrb	r2, [r7, #7]
 804e44c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 804e450:	68fb      	ldr	r3, [r7, #12]
 804e452:	2200      	movs	r2, #0
 804e454:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 804e458:	68fb      	ldr	r3, [r7, #12]
 804e45a:	2200      	movs	r2, #0
 804e45c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 804e460:	68f8      	ldr	r0, [r7, #12]
 804e462:	f000 f847 	bl	804e4f4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 804e466:	68fb      	ldr	r3, [r7, #12]
 804e468:	2200      	movs	r2, #0
 804e46a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 804e46e:	68fb      	ldr	r3, [r7, #12]
 804e470:	2200      	movs	r2, #0
 804e472:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 804e476:	68fb      	ldr	r3, [r7, #12]
 804e478:	2200      	movs	r2, #0
 804e47a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 804e47e:	68fb      	ldr	r3, [r7, #12]
 804e480:	2200      	movs	r2, #0
 804e482:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 804e486:	68bb      	ldr	r3, [r7, #8]
 804e488:	2b00      	cmp	r3, #0
 804e48a:	d003      	beq.n	804e494 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 804e48c:	68fb      	ldr	r3, [r7, #12]
 804e48e:	68ba      	ldr	r2, [r7, #8]
 804e490:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 804e494:	4b15      	ldr	r3, [pc, #84]	; (804e4ec <USBH_Init+0xbc>)
 804e496:	f107 0430 	add.w	r4, r7, #48	; 0x30
 804e49a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 804e49c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 804e4a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 804e4a4:	2100      	movs	r1, #0
 804e4a6:	4618      	mov	r0, r3
 804e4a8:	f007 feee 	bl	8056288 <osMessageCreate>
 804e4ac:	4602      	mov	r2, r0
 804e4ae:	68fb      	ldr	r3, [r7, #12]
 804e4b0:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 804e4b4:	4b0e      	ldr	r3, [pc, #56]	; (804e4f0 <USBH_Init+0xc0>)
 804e4b6:	f107 0414 	add.w	r4, r7, #20
 804e4ba:	461d      	mov	r5, r3
 804e4bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 804e4be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 804e4c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 804e4c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 804e4c8:	f107 0314 	add.w	r3, r7, #20
 804e4cc:	68f9      	ldr	r1, [r7, #12]
 804e4ce:	4618      	mov	r0, r3
 804e4d0:	f007 fcdf 	bl	8055e92 <osThreadCreate>
 804e4d4:	4602      	mov	r2, r0
 804e4d6:	68fb      	ldr	r3, [r7, #12]
 804e4d8:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 804e4dc:	68f8      	ldr	r0, [r7, #12]
 804e4de:	f00b faaf 	bl	8059a40 <USBH_LL_Init>

  return USBH_OK;
 804e4e2:	2300      	movs	r3, #0
}
 804e4e4:	4618      	mov	r0, r3
 804e4e6:	3740      	adds	r7, #64	; 0x40
 804e4e8:	46bd      	mov	sp, r7
 804e4ea:	bdb0      	pop	{r4, r5, r7, pc}
 804e4ec:	0805b870 	.word	0x0805b870
 804e4f0:	0805b880 	.word	0x0805b880

0804e4f4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 804e4f4:	b480      	push	{r7}
 804e4f6:	b085      	sub	sp, #20
 804e4f8:	af00      	add	r7, sp, #0
 804e4fa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 804e4fc:	2300      	movs	r3, #0
 804e4fe:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 804e500:	2300      	movs	r3, #0
 804e502:	60fb      	str	r3, [r7, #12]
 804e504:	e009      	b.n	804e51a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 804e506:	687a      	ldr	r2, [r7, #4]
 804e508:	68fb      	ldr	r3, [r7, #12]
 804e50a:	33e0      	adds	r3, #224	; 0xe0
 804e50c:	009b      	lsls	r3, r3, #2
 804e50e:	4413      	add	r3, r2
 804e510:	2200      	movs	r2, #0
 804e512:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 804e514:	68fb      	ldr	r3, [r7, #12]
 804e516:	3301      	adds	r3, #1
 804e518:	60fb      	str	r3, [r7, #12]
 804e51a:	68fb      	ldr	r3, [r7, #12]
 804e51c:	2b0f      	cmp	r3, #15
 804e51e:	d9f2      	bls.n	804e506 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 804e520:	2300      	movs	r3, #0
 804e522:	60fb      	str	r3, [r7, #12]
 804e524:	e009      	b.n	804e53a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 804e526:	687a      	ldr	r2, [r7, #4]
 804e528:	68fb      	ldr	r3, [r7, #12]
 804e52a:	4413      	add	r3, r2
 804e52c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 804e530:	2200      	movs	r2, #0
 804e532:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 804e534:	68fb      	ldr	r3, [r7, #12]
 804e536:	3301      	adds	r3, #1
 804e538:	60fb      	str	r3, [r7, #12]
 804e53a:	68fb      	ldr	r3, [r7, #12]
 804e53c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804e540:	d3f1      	bcc.n	804e526 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 804e542:	687b      	ldr	r3, [r7, #4]
 804e544:	2200      	movs	r2, #0
 804e546:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 804e548:	687b      	ldr	r3, [r7, #4]
 804e54a:	2200      	movs	r2, #0
 804e54c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 804e54e:	687b      	ldr	r3, [r7, #4]
 804e550:	2201      	movs	r2, #1
 804e552:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 804e554:	687b      	ldr	r3, [r7, #4]
 804e556:	2200      	movs	r2, #0
 804e558:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 804e55c:	687b      	ldr	r3, [r7, #4]
 804e55e:	2201      	movs	r2, #1
 804e560:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 804e562:	687b      	ldr	r3, [r7, #4]
 804e564:	2240      	movs	r2, #64	; 0x40
 804e566:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 804e568:	687b      	ldr	r3, [r7, #4]
 804e56a:	2200      	movs	r2, #0
 804e56c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 804e56e:	687b      	ldr	r3, [r7, #4]
 804e570:	2200      	movs	r2, #0
 804e572:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 804e576:	687b      	ldr	r3, [r7, #4]
 804e578:	2201      	movs	r2, #1
 804e57a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 804e57e:	687b      	ldr	r3, [r7, #4]
 804e580:	2200      	movs	r2, #0
 804e582:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 804e586:	687b      	ldr	r3, [r7, #4]
 804e588:	2200      	movs	r2, #0
 804e58a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 804e58e:	2300      	movs	r3, #0
}
 804e590:	4618      	mov	r0, r3
 804e592:	3714      	adds	r7, #20
 804e594:	46bd      	mov	sp, r7
 804e596:	f85d 7b04 	ldr.w	r7, [sp], #4
 804e59a:	4770      	bx	lr

0804e59c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 804e59c:	b480      	push	{r7}
 804e59e:	b085      	sub	sp, #20
 804e5a0:	af00      	add	r7, sp, #0
 804e5a2:	6078      	str	r0, [r7, #4]
 804e5a4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 804e5a6:	2300      	movs	r3, #0
 804e5a8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 804e5aa:	683b      	ldr	r3, [r7, #0]
 804e5ac:	2b00      	cmp	r3, #0
 804e5ae:	d016      	beq.n	804e5de <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 804e5b0:	687b      	ldr	r3, [r7, #4]
 804e5b2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 804e5b6:	2b00      	cmp	r3, #0
 804e5b8:	d10e      	bne.n	804e5d8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 804e5ba:	687b      	ldr	r3, [r7, #4]
 804e5bc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 804e5c0:	1c59      	adds	r1, r3, #1
 804e5c2:	687a      	ldr	r2, [r7, #4]
 804e5c4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 804e5c8:	687a      	ldr	r2, [r7, #4]
 804e5ca:	33de      	adds	r3, #222	; 0xde
 804e5cc:	6839      	ldr	r1, [r7, #0]
 804e5ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 804e5d2:	2300      	movs	r3, #0
 804e5d4:	73fb      	strb	r3, [r7, #15]
 804e5d6:	e004      	b.n	804e5e2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 804e5d8:	2302      	movs	r3, #2
 804e5da:	73fb      	strb	r3, [r7, #15]
 804e5dc:	e001      	b.n	804e5e2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 804e5de:	2302      	movs	r3, #2
 804e5e0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 804e5e2:	7bfb      	ldrb	r3, [r7, #15]
}
 804e5e4:	4618      	mov	r0, r3
 804e5e6:	3714      	adds	r7, #20
 804e5e8:	46bd      	mov	sp, r7
 804e5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 804e5ee:	4770      	bx	lr

0804e5f0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 804e5f0:	b480      	push	{r7}
 804e5f2:	b085      	sub	sp, #20
 804e5f4:	af00      	add	r7, sp, #0
 804e5f6:	6078      	str	r0, [r7, #4]
 804e5f8:	460b      	mov	r3, r1
 804e5fa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 804e5fc:	2300      	movs	r3, #0
 804e5fe:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 804e600:	687b      	ldr	r3, [r7, #4]
 804e602:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 804e606:	78fa      	ldrb	r2, [r7, #3]
 804e608:	429a      	cmp	r2, r3
 804e60a:	d204      	bcs.n	804e616 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 804e60c:	687b      	ldr	r3, [r7, #4]
 804e60e:	78fa      	ldrb	r2, [r7, #3]
 804e610:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 804e614:	e001      	b.n	804e61a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 804e616:	2302      	movs	r3, #2
 804e618:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 804e61a:	7bfb      	ldrb	r3, [r7, #15]
}
 804e61c:	4618      	mov	r0, r3
 804e61e:	3714      	adds	r7, #20
 804e620:	46bd      	mov	sp, r7
 804e622:	f85d 7b04 	ldr.w	r7, [sp], #4
 804e626:	4770      	bx	lr

0804e628 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 804e628:	b480      	push	{r7}
 804e62a:	b087      	sub	sp, #28
 804e62c:	af00      	add	r7, sp, #0
 804e62e:	6078      	str	r0, [r7, #4]
 804e630:	4608      	mov	r0, r1
 804e632:	4611      	mov	r1, r2
 804e634:	461a      	mov	r2, r3
 804e636:	4603      	mov	r3, r0
 804e638:	70fb      	strb	r3, [r7, #3]
 804e63a:	460b      	mov	r3, r1
 804e63c:	70bb      	strb	r3, [r7, #2]
 804e63e:	4613      	mov	r3, r2
 804e640:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 804e642:	2300      	movs	r3, #0
 804e644:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 804e646:	2300      	movs	r3, #0
 804e648:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 804e64a:	687b      	ldr	r3, [r7, #4]
 804e64c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 804e650:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 804e652:	e025      	b.n	804e6a0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 804e654:	7dfb      	ldrb	r3, [r7, #23]
 804e656:	221a      	movs	r2, #26
 804e658:	fb02 f303 	mul.w	r3, r2, r3
 804e65c:	3308      	adds	r3, #8
 804e65e:	68fa      	ldr	r2, [r7, #12]
 804e660:	4413      	add	r3, r2
 804e662:	3302      	adds	r3, #2
 804e664:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 804e666:	693b      	ldr	r3, [r7, #16]
 804e668:	795b      	ldrb	r3, [r3, #5]
 804e66a:	78fa      	ldrb	r2, [r7, #3]
 804e66c:	429a      	cmp	r2, r3
 804e66e:	d002      	beq.n	804e676 <USBH_FindInterface+0x4e>
 804e670:	78fb      	ldrb	r3, [r7, #3]
 804e672:	2bff      	cmp	r3, #255	; 0xff
 804e674:	d111      	bne.n	804e69a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 804e676:	693b      	ldr	r3, [r7, #16]
 804e678:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 804e67a:	78ba      	ldrb	r2, [r7, #2]
 804e67c:	429a      	cmp	r2, r3
 804e67e:	d002      	beq.n	804e686 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 804e680:	78bb      	ldrb	r3, [r7, #2]
 804e682:	2bff      	cmp	r3, #255	; 0xff
 804e684:	d109      	bne.n	804e69a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 804e686:	693b      	ldr	r3, [r7, #16]
 804e688:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 804e68a:	787a      	ldrb	r2, [r7, #1]
 804e68c:	429a      	cmp	r2, r3
 804e68e:	d002      	beq.n	804e696 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 804e690:	787b      	ldrb	r3, [r7, #1]
 804e692:	2bff      	cmp	r3, #255	; 0xff
 804e694:	d101      	bne.n	804e69a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 804e696:	7dfb      	ldrb	r3, [r7, #23]
 804e698:	e006      	b.n	804e6a8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 804e69a:	7dfb      	ldrb	r3, [r7, #23]
 804e69c:	3301      	adds	r3, #1
 804e69e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 804e6a0:	7dfb      	ldrb	r3, [r7, #23]
 804e6a2:	2b01      	cmp	r3, #1
 804e6a4:	d9d6      	bls.n	804e654 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 804e6a6:	23ff      	movs	r3, #255	; 0xff
}
 804e6a8:	4618      	mov	r0, r3
 804e6aa:	371c      	adds	r7, #28
 804e6ac:	46bd      	mov	sp, r7
 804e6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 804e6b2:	4770      	bx	lr

0804e6b4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 804e6b4:	b580      	push	{r7, lr}
 804e6b6:	b082      	sub	sp, #8
 804e6b8:	af00      	add	r7, sp, #0
 804e6ba:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 804e6bc:	6878      	ldr	r0, [r7, #4]
 804e6be:	f00b fa01 	bl	8059ac4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 804e6c2:	2101      	movs	r1, #1
 804e6c4:	6878      	ldr	r0, [r7, #4]
 804e6c6:	f00b fb1a 	bl	8059cfe <USBH_LL_DriverVBUS>

  return USBH_OK;
 804e6ca:	2300      	movs	r3, #0
}
 804e6cc:	4618      	mov	r0, r3
 804e6ce:	3708      	adds	r7, #8
 804e6d0:	46bd      	mov	sp, r7
 804e6d2:	bd80      	pop	{r7, pc}

0804e6d4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 804e6d4:	b580      	push	{r7, lr}
 804e6d6:	b088      	sub	sp, #32
 804e6d8:	af04      	add	r7, sp, #16
 804e6da:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 804e6dc:	2302      	movs	r3, #2
 804e6de:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 804e6e0:	2300      	movs	r3, #0
 804e6e2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 804e6e4:	687b      	ldr	r3, [r7, #4]
 804e6e6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 804e6ea:	b2db      	uxtb	r3, r3
 804e6ec:	2b01      	cmp	r3, #1
 804e6ee:	d102      	bne.n	804e6f6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 804e6f0:	687b      	ldr	r3, [r7, #4]
 804e6f2:	2203      	movs	r2, #3
 804e6f4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 804e6f6:	687b      	ldr	r3, [r7, #4]
 804e6f8:	781b      	ldrb	r3, [r3, #0]
 804e6fa:	b2db      	uxtb	r3, r3
 804e6fc:	2b0b      	cmp	r3, #11
 804e6fe:	f200 8247 	bhi.w	804eb90 <USBH_Process+0x4bc>
 804e702:	a201      	add	r2, pc, #4	; (adr r2, 804e708 <USBH_Process+0x34>)
 804e704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804e708:	0804e739 	.word	0x0804e739
 804e70c:	0804e787 	.word	0x0804e787
 804e710:	0804e80b 	.word	0x0804e80b
 804e714:	0804eb0f 	.word	0x0804eb0f
 804e718:	0804eb91 	.word	0x0804eb91
 804e71c:	0804e8cb 	.word	0x0804e8cb
 804e720:	0804ea99 	.word	0x0804ea99
 804e724:	0804e91d 	.word	0x0804e91d
 804e728:	0804e959 	.word	0x0804e959
 804e72c:	0804e993 	.word	0x0804e993
 804e730:	0804e9f1 	.word	0x0804e9f1
 804e734:	0804eaf7 	.word	0x0804eaf7
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 804e738:	687b      	ldr	r3, [r7, #4]
 804e73a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 804e73e:	b2db      	uxtb	r3, r3
 804e740:	2b00      	cmp	r3, #0
 804e742:	f000 8227 	beq.w	804eb94 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 804e746:	687b      	ldr	r3, [r7, #4]
 804e748:	2201      	movs	r2, #1
 804e74a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 804e74c:	20c8      	movs	r0, #200	; 0xc8
 804e74e:	f00b fb4d 	bl	8059dec <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 804e752:	6878      	ldr	r0, [r7, #4]
 804e754:	f00b fa13 	bl	8059b7e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 804e758:	687b      	ldr	r3, [r7, #4]
 804e75a:	2200      	movs	r2, #0
 804e75c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 804e760:	687b      	ldr	r3, [r7, #4]
 804e762:	2200      	movs	r2, #0
 804e764:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 804e768:	687b      	ldr	r3, [r7, #4]
 804e76a:	2201      	movs	r2, #1
 804e76c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804e770:	687b      	ldr	r3, [r7, #4]
 804e772:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804e776:	687b      	ldr	r3, [r7, #4]
 804e778:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804e77c:	2200      	movs	r2, #0
 804e77e:	4619      	mov	r1, r3
 804e780:	f007 fdaa 	bl	80562d8 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 804e784:	e206      	b.n	804eb94 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 804e786:	687b      	ldr	r3, [r7, #4]
 804e788:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 804e78c:	2b01      	cmp	r3, #1
 804e78e:	d107      	bne.n	804e7a0 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 804e790:	687b      	ldr	r3, [r7, #4]
 804e792:	2200      	movs	r2, #0
 804e794:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 804e798:	687b      	ldr	r3, [r7, #4]
 804e79a:	2202      	movs	r2, #2
 804e79c:	701a      	strb	r2, [r3, #0]
 804e79e:	e025      	b.n	804e7ec <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 804e7a0:	687b      	ldr	r3, [r7, #4]
 804e7a2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 804e7a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 804e7aa:	d914      	bls.n	804e7d6 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 804e7ac:	687b      	ldr	r3, [r7, #4]
 804e7ae:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 804e7b2:	3301      	adds	r3, #1
 804e7b4:	b2da      	uxtb	r2, r3
 804e7b6:	687b      	ldr	r3, [r7, #4]
 804e7b8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 804e7bc:	687b      	ldr	r3, [r7, #4]
 804e7be:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 804e7c2:	2b03      	cmp	r3, #3
 804e7c4:	d903      	bls.n	804e7ce <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 804e7c6:	687b      	ldr	r3, [r7, #4]
 804e7c8:	220d      	movs	r2, #13
 804e7ca:	701a      	strb	r2, [r3, #0]
 804e7cc:	e00e      	b.n	804e7ec <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 804e7ce:	687b      	ldr	r3, [r7, #4]
 804e7d0:	2200      	movs	r2, #0
 804e7d2:	701a      	strb	r2, [r3, #0]
 804e7d4:	e00a      	b.n	804e7ec <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 804e7d6:	687b      	ldr	r3, [r7, #4]
 804e7d8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 804e7dc:	f103 020a 	add.w	r2, r3, #10
 804e7e0:	687b      	ldr	r3, [r7, #4]
 804e7e2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 804e7e6:	200a      	movs	r0, #10
 804e7e8:	f00b fb00 	bl	8059dec <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 804e7ec:	687b      	ldr	r3, [r7, #4]
 804e7ee:	2201      	movs	r2, #1
 804e7f0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804e7f4:	687b      	ldr	r3, [r7, #4]
 804e7f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804e7fa:	687b      	ldr	r3, [r7, #4]
 804e7fc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804e800:	2200      	movs	r2, #0
 804e802:	4619      	mov	r1, r3
 804e804:	f007 fd68 	bl	80562d8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804e808:	e1cb      	b.n	804eba2 <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 804e80a:	687b      	ldr	r3, [r7, #4]
 804e80c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804e810:	2b00      	cmp	r3, #0
 804e812:	d005      	beq.n	804e820 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 804e814:	687b      	ldr	r3, [r7, #4]
 804e816:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804e81a:	2104      	movs	r1, #4
 804e81c:	6878      	ldr	r0, [r7, #4]
 804e81e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 804e820:	2064      	movs	r0, #100	; 0x64
 804e822:	f00b fae3 	bl	8059dec <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 804e826:	6878      	ldr	r0, [r7, #4]
 804e828:	f00b f982 	bl	8059b30 <USBH_LL_GetSpeed>
 804e82c:	4603      	mov	r3, r0
 804e82e:	461a      	mov	r2, r3
 804e830:	687b      	ldr	r3, [r7, #4]
 804e832:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 804e836:	687b      	ldr	r3, [r7, #4]
 804e838:	2205      	movs	r2, #5
 804e83a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 804e83c:	2100      	movs	r1, #0
 804e83e:	6878      	ldr	r0, [r7, #4]
 804e840:	f001 fc19 	bl	8050076 <USBH_AllocPipe>
 804e844:	4603      	mov	r3, r0
 804e846:	461a      	mov	r2, r3
 804e848:	687b      	ldr	r3, [r7, #4]
 804e84a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 804e84c:	2180      	movs	r1, #128	; 0x80
 804e84e:	6878      	ldr	r0, [r7, #4]
 804e850:	f001 fc11 	bl	8050076 <USBH_AllocPipe>
 804e854:	4603      	mov	r3, r0
 804e856:	461a      	mov	r2, r3
 804e858:	687b      	ldr	r3, [r7, #4]
 804e85a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 804e85c:	687b      	ldr	r3, [r7, #4]
 804e85e:	7919      	ldrb	r1, [r3, #4]
 804e860:	687b      	ldr	r3, [r7, #4]
 804e862:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 804e866:	687b      	ldr	r3, [r7, #4]
 804e868:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 804e86c:	687a      	ldr	r2, [r7, #4]
 804e86e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 804e870:	b292      	uxth	r2, r2
 804e872:	9202      	str	r2, [sp, #8]
 804e874:	2200      	movs	r2, #0
 804e876:	9201      	str	r2, [sp, #4]
 804e878:	9300      	str	r3, [sp, #0]
 804e87a:	4603      	mov	r3, r0
 804e87c:	2280      	movs	r2, #128	; 0x80
 804e87e:	6878      	ldr	r0, [r7, #4]
 804e880:	f001 fbca 	bl	8050018 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 804e884:	687b      	ldr	r3, [r7, #4]
 804e886:	7959      	ldrb	r1, [r3, #5]
 804e888:	687b      	ldr	r3, [r7, #4]
 804e88a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 804e88e:	687b      	ldr	r3, [r7, #4]
 804e890:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 804e894:	687a      	ldr	r2, [r7, #4]
 804e896:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 804e898:	b292      	uxth	r2, r2
 804e89a:	9202      	str	r2, [sp, #8]
 804e89c:	2200      	movs	r2, #0
 804e89e:	9201      	str	r2, [sp, #4]
 804e8a0:	9300      	str	r3, [sp, #0]
 804e8a2:	4603      	mov	r3, r0
 804e8a4:	2200      	movs	r2, #0
 804e8a6:	6878      	ldr	r0, [r7, #4]
 804e8a8:	f001 fbb6 	bl	8050018 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 804e8ac:	687b      	ldr	r3, [r7, #4]
 804e8ae:	2201      	movs	r2, #1
 804e8b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804e8b4:	687b      	ldr	r3, [r7, #4]
 804e8b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804e8ba:	687b      	ldr	r3, [r7, #4]
 804e8bc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804e8c0:	2200      	movs	r2, #0
 804e8c2:	4619      	mov	r1, r3
 804e8c4:	f007 fd08 	bl	80562d8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804e8c8:	e16b      	b.n	804eba2 <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 804e8ca:	6878      	ldr	r0, [r7, #4]
 804e8cc:	f000 f96e 	bl	804ebac <USBH_HandleEnum>
 804e8d0:	4603      	mov	r3, r0
 804e8d2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 804e8d4:	7bbb      	ldrb	r3, [r7, #14]
 804e8d6:	b2db      	uxtb	r3, r3
 804e8d8:	2b00      	cmp	r3, #0
 804e8da:	f040 815d 	bne.w	804eb98 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 804e8de:	687b      	ldr	r3, [r7, #4]
 804e8e0:	2200      	movs	r2, #0
 804e8e2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 804e8e6:	687b      	ldr	r3, [r7, #4]
 804e8e8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 804e8ec:	2b01      	cmp	r3, #1
 804e8ee:	d103      	bne.n	804e8f8 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 804e8f0:	687b      	ldr	r3, [r7, #4]
 804e8f2:	2208      	movs	r2, #8
 804e8f4:	701a      	strb	r2, [r3, #0]
 804e8f6:	e002      	b.n	804e8fe <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 804e8f8:	687b      	ldr	r3, [r7, #4]
 804e8fa:	2207      	movs	r2, #7
 804e8fc:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 804e8fe:	687b      	ldr	r3, [r7, #4]
 804e900:	2205      	movs	r2, #5
 804e902:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804e906:	687b      	ldr	r3, [r7, #4]
 804e908:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804e90c:	687b      	ldr	r3, [r7, #4]
 804e90e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804e912:	2200      	movs	r2, #0
 804e914:	4619      	mov	r1, r3
 804e916:	f007 fcdf 	bl	80562d8 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 804e91a:	e13d      	b.n	804eb98 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 804e91c:	687b      	ldr	r3, [r7, #4]
 804e91e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804e922:	2b00      	cmp	r3, #0
 804e924:	f000 813a 	beq.w	804eb9c <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 804e928:	687b      	ldr	r3, [r7, #4]
 804e92a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804e92e:	2101      	movs	r1, #1
 804e930:	6878      	ldr	r0, [r7, #4]
 804e932:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 804e934:	687b      	ldr	r3, [r7, #4]
 804e936:	2208      	movs	r2, #8
 804e938:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 804e93a:	687b      	ldr	r3, [r7, #4]
 804e93c:	2205      	movs	r2, #5
 804e93e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804e942:	687b      	ldr	r3, [r7, #4]
 804e944:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804e948:	687b      	ldr	r3, [r7, #4]
 804e94a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804e94e:	2200      	movs	r2, #0
 804e950:	4619      	mov	r1, r3
 804e952:	f007 fcc1 	bl	80562d8 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 804e956:	e121      	b.n	804eb9c <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 804e958:	687b      	ldr	r3, [r7, #4]
 804e95a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 804e95e:	b29b      	uxth	r3, r3
 804e960:	4619      	mov	r1, r3
 804e962:	6878      	ldr	r0, [r7, #4]
 804e964:	f000 fd00 	bl	804f368 <USBH_SetCfg>
 804e968:	4603      	mov	r3, r0
 804e96a:	2b00      	cmp	r3, #0
 804e96c:	d102      	bne.n	804e974 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 804e96e:	687b      	ldr	r3, [r7, #4]
 804e970:	2209      	movs	r2, #9
 804e972:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 804e974:	687b      	ldr	r3, [r7, #4]
 804e976:	2201      	movs	r2, #1
 804e978:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804e97c:	687b      	ldr	r3, [r7, #4]
 804e97e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804e982:	687b      	ldr	r3, [r7, #4]
 804e984:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804e988:	2200      	movs	r2, #0
 804e98a:	4619      	mov	r1, r3
 804e98c:	f007 fca4 	bl	80562d8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804e990:	e107      	b.n	804eba2 <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 804e992:	687b      	ldr	r3, [r7, #4]
 804e994:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 804e998:	f003 0320 	and.w	r3, r3, #32
 804e99c:	2b00      	cmp	r3, #0
 804e99e:	d015      	beq.n	804e9cc <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 804e9a0:	2101      	movs	r1, #1
 804e9a2:	6878      	ldr	r0, [r7, #4]
 804e9a4:	f000 fd03 	bl	804f3ae <USBH_SetFeature>
 804e9a8:	4603      	mov	r3, r0
 804e9aa:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 804e9ac:	7bbb      	ldrb	r3, [r7, #14]
 804e9ae:	b2db      	uxtb	r3, r3
 804e9b0:	2b00      	cmp	r3, #0
 804e9b2:	d103      	bne.n	804e9bc <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 804e9b4:	687b      	ldr	r3, [r7, #4]
 804e9b6:	220a      	movs	r2, #10
 804e9b8:	701a      	strb	r2, [r3, #0]
 804e9ba:	e00a      	b.n	804e9d2 <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 804e9bc:	7bbb      	ldrb	r3, [r7, #14]
 804e9be:	b2db      	uxtb	r3, r3
 804e9c0:	2b03      	cmp	r3, #3
 804e9c2:	d106      	bne.n	804e9d2 <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 804e9c4:	687b      	ldr	r3, [r7, #4]
 804e9c6:	220a      	movs	r2, #10
 804e9c8:	701a      	strb	r2, [r3, #0]
 804e9ca:	e002      	b.n	804e9d2 <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 804e9cc:	687b      	ldr	r3, [r7, #4]
 804e9ce:	220a      	movs	r2, #10
 804e9d0:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 804e9d2:	687b      	ldr	r3, [r7, #4]
 804e9d4:	2201      	movs	r2, #1
 804e9d6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804e9da:	687b      	ldr	r3, [r7, #4]
 804e9dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804e9e0:	687b      	ldr	r3, [r7, #4]
 804e9e2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804e9e6:	2200      	movs	r2, #0
 804e9e8:	4619      	mov	r1, r3
 804e9ea:	f007 fc75 	bl	80562d8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804e9ee:	e0d8      	b.n	804eba2 <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 804e9f0:	687b      	ldr	r3, [r7, #4]
 804e9f2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 804e9f6:	2b00      	cmp	r3, #0
 804e9f8:	d03f      	beq.n	804ea7a <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 804e9fa:	687b      	ldr	r3, [r7, #4]
 804e9fc:	2200      	movs	r2, #0
 804e9fe:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 804ea02:	2300      	movs	r3, #0
 804ea04:	73fb      	strb	r3, [r7, #15]
 804ea06:	e016      	b.n	804ea36 <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 804ea08:	7bfa      	ldrb	r2, [r7, #15]
 804ea0a:	687b      	ldr	r3, [r7, #4]
 804ea0c:	32de      	adds	r2, #222	; 0xde
 804ea0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804ea12:	791a      	ldrb	r2, [r3, #4]
 804ea14:	687b      	ldr	r3, [r7, #4]
 804ea16:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 804ea1a:	429a      	cmp	r2, r3
 804ea1c:	d108      	bne.n	804ea30 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 804ea1e:	7bfa      	ldrb	r2, [r7, #15]
 804ea20:	687b      	ldr	r3, [r7, #4]
 804ea22:	32de      	adds	r2, #222	; 0xde
 804ea24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 804ea28:	687b      	ldr	r3, [r7, #4]
 804ea2a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 804ea2e:	e005      	b.n	804ea3c <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 804ea30:	7bfb      	ldrb	r3, [r7, #15]
 804ea32:	3301      	adds	r3, #1
 804ea34:	73fb      	strb	r3, [r7, #15]
 804ea36:	7bfb      	ldrb	r3, [r7, #15]
 804ea38:	2b00      	cmp	r3, #0
 804ea3a:	d0e5      	beq.n	804ea08 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 804ea3c:	687b      	ldr	r3, [r7, #4]
 804ea3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804ea42:	2b00      	cmp	r3, #0
 804ea44:	d016      	beq.n	804ea74 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 804ea46:	687b      	ldr	r3, [r7, #4]
 804ea48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804ea4c:	689b      	ldr	r3, [r3, #8]
 804ea4e:	6878      	ldr	r0, [r7, #4]
 804ea50:	4798      	blx	r3
 804ea52:	4603      	mov	r3, r0
 804ea54:	2b00      	cmp	r3, #0
 804ea56:	d109      	bne.n	804ea6c <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 804ea58:	687b      	ldr	r3, [r7, #4]
 804ea5a:	2206      	movs	r2, #6
 804ea5c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 804ea5e:	687b      	ldr	r3, [r7, #4]
 804ea60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804ea64:	2103      	movs	r1, #3
 804ea66:	6878      	ldr	r0, [r7, #4]
 804ea68:	4798      	blx	r3
 804ea6a:	e006      	b.n	804ea7a <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 804ea6c:	687b      	ldr	r3, [r7, #4]
 804ea6e:	220d      	movs	r2, #13
 804ea70:	701a      	strb	r2, [r3, #0]
 804ea72:	e002      	b.n	804ea7a <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 804ea74:	687b      	ldr	r3, [r7, #4]
 804ea76:	220d      	movs	r2, #13
 804ea78:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 804ea7a:	687b      	ldr	r3, [r7, #4]
 804ea7c:	2205      	movs	r2, #5
 804ea7e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804ea82:	687b      	ldr	r3, [r7, #4]
 804ea84:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804ea88:	687b      	ldr	r3, [r7, #4]
 804ea8a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804ea8e:	2200      	movs	r2, #0
 804ea90:	4619      	mov	r1, r3
 804ea92:	f007 fc21 	bl	80562d8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804ea96:	e084      	b.n	804eba2 <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 804ea98:	687b      	ldr	r3, [r7, #4]
 804ea9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804ea9e:	2b00      	cmp	r3, #0
 804eaa0:	d017      	beq.n	804ead2 <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 804eaa2:	687b      	ldr	r3, [r7, #4]
 804eaa4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804eaa8:	691b      	ldr	r3, [r3, #16]
 804eaaa:	6878      	ldr	r0, [r7, #4]
 804eaac:	4798      	blx	r3
 804eaae:	4603      	mov	r3, r0
 804eab0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 804eab2:	7bbb      	ldrb	r3, [r7, #14]
 804eab4:	b2db      	uxtb	r3, r3
 804eab6:	2b00      	cmp	r3, #0
 804eab8:	d103      	bne.n	804eac2 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 804eaba:	687b      	ldr	r3, [r7, #4]
 804eabc:	220b      	movs	r2, #11
 804eabe:	701a      	strb	r2, [r3, #0]
 804eac0:	e00a      	b.n	804ead8 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 804eac2:	7bbb      	ldrb	r3, [r7, #14]
 804eac4:	b2db      	uxtb	r3, r3
 804eac6:	2b02      	cmp	r3, #2
 804eac8:	d106      	bne.n	804ead8 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 804eaca:	687b      	ldr	r3, [r7, #4]
 804eacc:	220d      	movs	r2, #13
 804eace:	701a      	strb	r2, [r3, #0]
 804ead0:	e002      	b.n	804ead8 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 804ead2:	687b      	ldr	r3, [r7, #4]
 804ead4:	220d      	movs	r2, #13
 804ead6:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 804ead8:	687b      	ldr	r3, [r7, #4]
 804eada:	2205      	movs	r2, #5
 804eadc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804eae0:	687b      	ldr	r3, [r7, #4]
 804eae2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804eae6:	687b      	ldr	r3, [r7, #4]
 804eae8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804eaec:	2200      	movs	r2, #0
 804eaee:	4619      	mov	r1, r3
 804eaf0:	f007 fbf2 	bl	80562d8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804eaf4:	e055      	b.n	804eba2 <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 804eaf6:	687b      	ldr	r3, [r7, #4]
 804eaf8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804eafc:	2b00      	cmp	r3, #0
 804eafe:	d04f      	beq.n	804eba0 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 804eb00:	687b      	ldr	r3, [r7, #4]
 804eb02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804eb06:	695b      	ldr	r3, [r3, #20]
 804eb08:	6878      	ldr	r0, [r7, #4]
 804eb0a:	4798      	blx	r3
      }
      break;
 804eb0c:	e048      	b.n	804eba0 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 804eb0e:	687b      	ldr	r3, [r7, #4]
 804eb10:	2200      	movs	r2, #0
 804eb12:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 804eb16:	6878      	ldr	r0, [r7, #4]
 804eb18:	f7ff fcec 	bl	804e4f4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 804eb1c:	687b      	ldr	r3, [r7, #4]
 804eb1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804eb22:	2b00      	cmp	r3, #0
 804eb24:	d009      	beq.n	804eb3a <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 804eb26:	687b      	ldr	r3, [r7, #4]
 804eb28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804eb2c:	68db      	ldr	r3, [r3, #12]
 804eb2e:	6878      	ldr	r0, [r7, #4]
 804eb30:	4798      	blx	r3
        phost->pActiveClass = NULL;
 804eb32:	687b      	ldr	r3, [r7, #4]
 804eb34:	2200      	movs	r2, #0
 804eb36:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 804eb3a:	687b      	ldr	r3, [r7, #4]
 804eb3c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804eb40:	2b00      	cmp	r3, #0
 804eb42:	d005      	beq.n	804eb50 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 804eb44:	687b      	ldr	r3, [r7, #4]
 804eb46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804eb4a:	2105      	movs	r1, #5
 804eb4c:	6878      	ldr	r0, [r7, #4]
 804eb4e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 804eb50:	687b      	ldr	r3, [r7, #4]
 804eb52:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 804eb56:	b2db      	uxtb	r3, r3
 804eb58:	2b01      	cmp	r3, #1
 804eb5a:	d107      	bne.n	804eb6c <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 804eb5c:	687b      	ldr	r3, [r7, #4]
 804eb5e:	2200      	movs	r2, #0
 804eb60:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 804eb64:	6878      	ldr	r0, [r7, #4]
 804eb66:	f7ff fda5 	bl	804e6b4 <USBH_Start>
 804eb6a:	e002      	b.n	804eb72 <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 804eb6c:	6878      	ldr	r0, [r7, #4]
 804eb6e:	f00a ffa9 	bl	8059ac4 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 804eb72:	687b      	ldr	r3, [r7, #4]
 804eb74:	2201      	movs	r2, #1
 804eb76:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804eb7a:	687b      	ldr	r3, [r7, #4]
 804eb7c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804eb80:	687b      	ldr	r3, [r7, #4]
 804eb82:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804eb86:	2200      	movs	r2, #0
 804eb88:	4619      	mov	r1, r3
 804eb8a:	f007 fba5 	bl	80562d8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804eb8e:	e008      	b.n	804eba2 <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 804eb90:	bf00      	nop
 804eb92:	e006      	b.n	804eba2 <USBH_Process+0x4ce>
      break;
 804eb94:	bf00      	nop
 804eb96:	e004      	b.n	804eba2 <USBH_Process+0x4ce>
      break;
 804eb98:	bf00      	nop
 804eb9a:	e002      	b.n	804eba2 <USBH_Process+0x4ce>
    break;
 804eb9c:	bf00      	nop
 804eb9e:	e000      	b.n	804eba2 <USBH_Process+0x4ce>
      break;
 804eba0:	bf00      	nop
  }
  return USBH_OK;
 804eba2:	2300      	movs	r3, #0
}
 804eba4:	4618      	mov	r0, r3
 804eba6:	3710      	adds	r7, #16
 804eba8:	46bd      	mov	sp, r7
 804ebaa:	bd80      	pop	{r7, pc}

0804ebac <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 804ebac:	b580      	push	{r7, lr}
 804ebae:	b088      	sub	sp, #32
 804ebb0:	af04      	add	r7, sp, #16
 804ebb2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 804ebb4:	2301      	movs	r3, #1
 804ebb6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 804ebb8:	2301      	movs	r3, #1
 804ebba:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 804ebbc:	687b      	ldr	r3, [r7, #4]
 804ebbe:	785b      	ldrb	r3, [r3, #1]
 804ebc0:	2b07      	cmp	r3, #7
 804ebc2:	f200 8208 	bhi.w	804efd6 <USBH_HandleEnum+0x42a>
 804ebc6:	a201      	add	r2, pc, #4	; (adr r2, 804ebcc <USBH_HandleEnum+0x20>)
 804ebc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804ebcc:	0804ebed 	.word	0x0804ebed
 804ebd0:	0804ecab 	.word	0x0804ecab
 804ebd4:	0804ed15 	.word	0x0804ed15
 804ebd8:	0804eda3 	.word	0x0804eda3
 804ebdc:	0804ee0d 	.word	0x0804ee0d
 804ebe0:	0804ee7d 	.word	0x0804ee7d
 804ebe4:	0804ef19 	.word	0x0804ef19
 804ebe8:	0804ef97 	.word	0x0804ef97
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 804ebec:	2108      	movs	r1, #8
 804ebee:	6878      	ldr	r0, [r7, #4]
 804ebf0:	f000 faea 	bl	804f1c8 <USBH_Get_DevDesc>
 804ebf4:	4603      	mov	r3, r0
 804ebf6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 804ebf8:	7bbb      	ldrb	r3, [r7, #14]
 804ebfa:	2b00      	cmp	r3, #0
 804ebfc:	d130      	bne.n	804ec60 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 804ebfe:	687b      	ldr	r3, [r7, #4]
 804ec00:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 804ec04:	687b      	ldr	r3, [r7, #4]
 804ec06:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 804ec08:	687b      	ldr	r3, [r7, #4]
 804ec0a:	2201      	movs	r2, #1
 804ec0c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 804ec0e:	687b      	ldr	r3, [r7, #4]
 804ec10:	7919      	ldrb	r1, [r3, #4]
 804ec12:	687b      	ldr	r3, [r7, #4]
 804ec14:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 804ec18:	687b      	ldr	r3, [r7, #4]
 804ec1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 804ec1e:	687a      	ldr	r2, [r7, #4]
 804ec20:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 804ec22:	b292      	uxth	r2, r2
 804ec24:	9202      	str	r2, [sp, #8]
 804ec26:	2200      	movs	r2, #0
 804ec28:	9201      	str	r2, [sp, #4]
 804ec2a:	9300      	str	r3, [sp, #0]
 804ec2c:	4603      	mov	r3, r0
 804ec2e:	2280      	movs	r2, #128	; 0x80
 804ec30:	6878      	ldr	r0, [r7, #4]
 804ec32:	f001 f9f1 	bl	8050018 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 804ec36:	687b      	ldr	r3, [r7, #4]
 804ec38:	7959      	ldrb	r1, [r3, #5]
 804ec3a:	687b      	ldr	r3, [r7, #4]
 804ec3c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 804ec40:	687b      	ldr	r3, [r7, #4]
 804ec42:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 804ec46:	687a      	ldr	r2, [r7, #4]
 804ec48:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 804ec4a:	b292      	uxth	r2, r2
 804ec4c:	9202      	str	r2, [sp, #8]
 804ec4e:	2200      	movs	r2, #0
 804ec50:	9201      	str	r2, [sp, #4]
 804ec52:	9300      	str	r3, [sp, #0]
 804ec54:	4603      	mov	r3, r0
 804ec56:	2200      	movs	r2, #0
 804ec58:	6878      	ldr	r0, [r7, #4]
 804ec5a:	f001 f9dd 	bl	8050018 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 804ec5e:	e1bc      	b.n	804efda <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 804ec60:	7bbb      	ldrb	r3, [r7, #14]
 804ec62:	2b03      	cmp	r3, #3
 804ec64:	f040 81b9 	bne.w	804efda <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 804ec68:	687b      	ldr	r3, [r7, #4]
 804ec6a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804ec6e:	3301      	adds	r3, #1
 804ec70:	b2da      	uxtb	r2, r3
 804ec72:	687b      	ldr	r3, [r7, #4]
 804ec74:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 804ec78:	687b      	ldr	r3, [r7, #4]
 804ec7a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804ec7e:	2b03      	cmp	r3, #3
 804ec80:	d903      	bls.n	804ec8a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 804ec82:	687b      	ldr	r3, [r7, #4]
 804ec84:	220d      	movs	r2, #13
 804ec86:	701a      	strb	r2, [r3, #0]
      break;
 804ec88:	e1a7      	b.n	804efda <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 804ec8a:	687b      	ldr	r3, [r7, #4]
 804ec8c:	795b      	ldrb	r3, [r3, #5]
 804ec8e:	4619      	mov	r1, r3
 804ec90:	6878      	ldr	r0, [r7, #4]
 804ec92:	f001 fa11 	bl	80500b8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 804ec96:	687b      	ldr	r3, [r7, #4]
 804ec98:	791b      	ldrb	r3, [r3, #4]
 804ec9a:	4619      	mov	r1, r3
 804ec9c:	6878      	ldr	r0, [r7, #4]
 804ec9e:	f001 fa0b 	bl	80500b8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 804eca2:	687b      	ldr	r3, [r7, #4]
 804eca4:	2200      	movs	r2, #0
 804eca6:	701a      	strb	r2, [r3, #0]
      break;
 804eca8:	e197      	b.n	804efda <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 804ecaa:	2112      	movs	r1, #18
 804ecac:	6878      	ldr	r0, [r7, #4]
 804ecae:	f000 fa8b 	bl	804f1c8 <USBH_Get_DevDesc>
 804ecb2:	4603      	mov	r3, r0
 804ecb4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 804ecb6:	7bbb      	ldrb	r3, [r7, #14]
 804ecb8:	2b00      	cmp	r3, #0
 804ecba:	d103      	bne.n	804ecc4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 804ecbc:	687b      	ldr	r3, [r7, #4]
 804ecbe:	2202      	movs	r2, #2
 804ecc0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 804ecc2:	e18c      	b.n	804efde <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 804ecc4:	7bbb      	ldrb	r3, [r7, #14]
 804ecc6:	2b03      	cmp	r3, #3
 804ecc8:	f040 8189 	bne.w	804efde <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 804eccc:	687b      	ldr	r3, [r7, #4]
 804ecce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804ecd2:	3301      	adds	r3, #1
 804ecd4:	b2da      	uxtb	r2, r3
 804ecd6:	687b      	ldr	r3, [r7, #4]
 804ecd8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 804ecdc:	687b      	ldr	r3, [r7, #4]
 804ecde:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804ece2:	2b03      	cmp	r3, #3
 804ece4:	d903      	bls.n	804ecee <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 804ece6:	687b      	ldr	r3, [r7, #4]
 804ece8:	220d      	movs	r2, #13
 804ecea:	701a      	strb	r2, [r3, #0]
      break;
 804ecec:	e177      	b.n	804efde <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 804ecee:	687b      	ldr	r3, [r7, #4]
 804ecf0:	795b      	ldrb	r3, [r3, #5]
 804ecf2:	4619      	mov	r1, r3
 804ecf4:	6878      	ldr	r0, [r7, #4]
 804ecf6:	f001 f9df 	bl	80500b8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 804ecfa:	687b      	ldr	r3, [r7, #4]
 804ecfc:	791b      	ldrb	r3, [r3, #4]
 804ecfe:	4619      	mov	r1, r3
 804ed00:	6878      	ldr	r0, [r7, #4]
 804ed02:	f001 f9d9 	bl	80500b8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 804ed06:	687b      	ldr	r3, [r7, #4]
 804ed08:	2200      	movs	r2, #0
 804ed0a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 804ed0c:	687b      	ldr	r3, [r7, #4]
 804ed0e:	2200      	movs	r2, #0
 804ed10:	701a      	strb	r2, [r3, #0]
      break;
 804ed12:	e164      	b.n	804efde <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 804ed14:	2101      	movs	r1, #1
 804ed16:	6878      	ldr	r0, [r7, #4]
 804ed18:	f000 fb02 	bl	804f320 <USBH_SetAddress>
 804ed1c:	4603      	mov	r3, r0
 804ed1e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 804ed20:	7bbb      	ldrb	r3, [r7, #14]
 804ed22:	2b00      	cmp	r3, #0
 804ed24:	d132      	bne.n	804ed8c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 804ed26:	2002      	movs	r0, #2
 804ed28:	f00b f860 	bl	8059dec <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 804ed2c:	687b      	ldr	r3, [r7, #4]
 804ed2e:	2201      	movs	r2, #1
 804ed30:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 804ed34:	687b      	ldr	r3, [r7, #4]
 804ed36:	2203      	movs	r2, #3
 804ed38:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 804ed3a:	687b      	ldr	r3, [r7, #4]
 804ed3c:	7919      	ldrb	r1, [r3, #4]
 804ed3e:	687b      	ldr	r3, [r7, #4]
 804ed40:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 804ed44:	687b      	ldr	r3, [r7, #4]
 804ed46:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 804ed4a:	687a      	ldr	r2, [r7, #4]
 804ed4c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 804ed4e:	b292      	uxth	r2, r2
 804ed50:	9202      	str	r2, [sp, #8]
 804ed52:	2200      	movs	r2, #0
 804ed54:	9201      	str	r2, [sp, #4]
 804ed56:	9300      	str	r3, [sp, #0]
 804ed58:	4603      	mov	r3, r0
 804ed5a:	2280      	movs	r2, #128	; 0x80
 804ed5c:	6878      	ldr	r0, [r7, #4]
 804ed5e:	f001 f95b 	bl	8050018 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 804ed62:	687b      	ldr	r3, [r7, #4]
 804ed64:	7959      	ldrb	r1, [r3, #5]
 804ed66:	687b      	ldr	r3, [r7, #4]
 804ed68:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 804ed6c:	687b      	ldr	r3, [r7, #4]
 804ed6e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 804ed72:	687a      	ldr	r2, [r7, #4]
 804ed74:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 804ed76:	b292      	uxth	r2, r2
 804ed78:	9202      	str	r2, [sp, #8]
 804ed7a:	2200      	movs	r2, #0
 804ed7c:	9201      	str	r2, [sp, #4]
 804ed7e:	9300      	str	r3, [sp, #0]
 804ed80:	4603      	mov	r3, r0
 804ed82:	2200      	movs	r2, #0
 804ed84:	6878      	ldr	r0, [r7, #4]
 804ed86:	f001 f947 	bl	8050018 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 804ed8a:	e12a      	b.n	804efe2 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 804ed8c:	7bbb      	ldrb	r3, [r7, #14]
 804ed8e:	2b03      	cmp	r3, #3
 804ed90:	f040 8127 	bne.w	804efe2 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 804ed94:	687b      	ldr	r3, [r7, #4]
 804ed96:	220d      	movs	r2, #13
 804ed98:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 804ed9a:	687b      	ldr	r3, [r7, #4]
 804ed9c:	2200      	movs	r2, #0
 804ed9e:	705a      	strb	r2, [r3, #1]
      break;
 804eda0:	e11f      	b.n	804efe2 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 804eda2:	2109      	movs	r1, #9
 804eda4:	6878      	ldr	r0, [r7, #4]
 804eda6:	f000 fa37 	bl	804f218 <USBH_Get_CfgDesc>
 804edaa:	4603      	mov	r3, r0
 804edac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 804edae:	7bbb      	ldrb	r3, [r7, #14]
 804edb0:	2b00      	cmp	r3, #0
 804edb2:	d103      	bne.n	804edbc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 804edb4:	687b      	ldr	r3, [r7, #4]
 804edb6:	2204      	movs	r2, #4
 804edb8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 804edba:	e114      	b.n	804efe6 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 804edbc:	7bbb      	ldrb	r3, [r7, #14]
 804edbe:	2b03      	cmp	r3, #3
 804edc0:	f040 8111 	bne.w	804efe6 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 804edc4:	687b      	ldr	r3, [r7, #4]
 804edc6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804edca:	3301      	adds	r3, #1
 804edcc:	b2da      	uxtb	r2, r3
 804edce:	687b      	ldr	r3, [r7, #4]
 804edd0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 804edd4:	687b      	ldr	r3, [r7, #4]
 804edd6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804edda:	2b03      	cmp	r3, #3
 804eddc:	d903      	bls.n	804ede6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 804edde:	687b      	ldr	r3, [r7, #4]
 804ede0:	220d      	movs	r2, #13
 804ede2:	701a      	strb	r2, [r3, #0]
      break;
 804ede4:	e0ff      	b.n	804efe6 <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 804ede6:	687b      	ldr	r3, [r7, #4]
 804ede8:	795b      	ldrb	r3, [r3, #5]
 804edea:	4619      	mov	r1, r3
 804edec:	6878      	ldr	r0, [r7, #4]
 804edee:	f001 f963 	bl	80500b8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 804edf2:	687b      	ldr	r3, [r7, #4]
 804edf4:	791b      	ldrb	r3, [r3, #4]
 804edf6:	4619      	mov	r1, r3
 804edf8:	6878      	ldr	r0, [r7, #4]
 804edfa:	f001 f95d 	bl	80500b8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 804edfe:	687b      	ldr	r3, [r7, #4]
 804ee00:	2200      	movs	r2, #0
 804ee02:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 804ee04:	687b      	ldr	r3, [r7, #4]
 804ee06:	2200      	movs	r2, #0
 804ee08:	701a      	strb	r2, [r3, #0]
      break;
 804ee0a:	e0ec      	b.n	804efe6 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 804ee0c:	687b      	ldr	r3, [r7, #4]
 804ee0e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 804ee12:	4619      	mov	r1, r3
 804ee14:	6878      	ldr	r0, [r7, #4]
 804ee16:	f000 f9ff 	bl	804f218 <USBH_Get_CfgDesc>
 804ee1a:	4603      	mov	r3, r0
 804ee1c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 804ee1e:	7bbb      	ldrb	r3, [r7, #14]
 804ee20:	2b00      	cmp	r3, #0
 804ee22:	d103      	bne.n	804ee2c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 804ee24:	687b      	ldr	r3, [r7, #4]
 804ee26:	2205      	movs	r2, #5
 804ee28:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 804ee2a:	e0de      	b.n	804efea <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 804ee2c:	7bbb      	ldrb	r3, [r7, #14]
 804ee2e:	2b03      	cmp	r3, #3
 804ee30:	f040 80db 	bne.w	804efea <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 804ee34:	687b      	ldr	r3, [r7, #4]
 804ee36:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804ee3a:	3301      	adds	r3, #1
 804ee3c:	b2da      	uxtb	r2, r3
 804ee3e:	687b      	ldr	r3, [r7, #4]
 804ee40:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 804ee44:	687b      	ldr	r3, [r7, #4]
 804ee46:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804ee4a:	2b03      	cmp	r3, #3
 804ee4c:	d903      	bls.n	804ee56 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 804ee4e:	687b      	ldr	r3, [r7, #4]
 804ee50:	220d      	movs	r2, #13
 804ee52:	701a      	strb	r2, [r3, #0]
      break;
 804ee54:	e0c9      	b.n	804efea <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 804ee56:	687b      	ldr	r3, [r7, #4]
 804ee58:	795b      	ldrb	r3, [r3, #5]
 804ee5a:	4619      	mov	r1, r3
 804ee5c:	6878      	ldr	r0, [r7, #4]
 804ee5e:	f001 f92b 	bl	80500b8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 804ee62:	687b      	ldr	r3, [r7, #4]
 804ee64:	791b      	ldrb	r3, [r3, #4]
 804ee66:	4619      	mov	r1, r3
 804ee68:	6878      	ldr	r0, [r7, #4]
 804ee6a:	f001 f925 	bl	80500b8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 804ee6e:	687b      	ldr	r3, [r7, #4]
 804ee70:	2200      	movs	r2, #0
 804ee72:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 804ee74:	687b      	ldr	r3, [r7, #4]
 804ee76:	2200      	movs	r2, #0
 804ee78:	701a      	strb	r2, [r3, #0]
      break;
 804ee7a:	e0b6      	b.n	804efea <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 804ee7c:	687b      	ldr	r3, [r7, #4]
 804ee7e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 804ee82:	2b00      	cmp	r3, #0
 804ee84:	d036      	beq.n	804eef4 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 804ee86:	687b      	ldr	r3, [r7, #4]
 804ee88:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 804ee8c:	687b      	ldr	r3, [r7, #4]
 804ee8e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 804ee92:	23ff      	movs	r3, #255	; 0xff
 804ee94:	6878      	ldr	r0, [r7, #4]
 804ee96:	f000 f9e3 	bl	804f260 <USBH_Get_StringDesc>
 804ee9a:	4603      	mov	r3, r0
 804ee9c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 804ee9e:	7bbb      	ldrb	r3, [r7, #14]
 804eea0:	2b00      	cmp	r3, #0
 804eea2:	d111      	bne.n	804eec8 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 804eea4:	687b      	ldr	r3, [r7, #4]
 804eea6:	2206      	movs	r2, #6
 804eea8:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 804eeaa:	687b      	ldr	r3, [r7, #4]
 804eeac:	2205      	movs	r2, #5
 804eeae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804eeb2:	687b      	ldr	r3, [r7, #4]
 804eeb4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804eeb8:	687b      	ldr	r3, [r7, #4]
 804eeba:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804eebe:	2200      	movs	r2, #0
 804eec0:	4619      	mov	r1, r3
 804eec2:	f007 fa09 	bl	80562d8 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 804eec6:	e092      	b.n	804efee <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 804eec8:	7bbb      	ldrb	r3, [r7, #14]
 804eeca:	2b03      	cmp	r3, #3
 804eecc:	f040 808f 	bne.w	804efee <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 804eed0:	687b      	ldr	r3, [r7, #4]
 804eed2:	2206      	movs	r2, #6
 804eed4:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 804eed6:	687b      	ldr	r3, [r7, #4]
 804eed8:	2205      	movs	r2, #5
 804eeda:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804eede:	687b      	ldr	r3, [r7, #4]
 804eee0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804eee4:	687b      	ldr	r3, [r7, #4]
 804eee6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804eeea:	2200      	movs	r2, #0
 804eeec:	4619      	mov	r1, r3
 804eeee:	f007 f9f3 	bl	80562d8 <osMessagePut>
      break;
 804eef2:	e07c      	b.n	804efee <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 804eef4:	687b      	ldr	r3, [r7, #4]
 804eef6:	2206      	movs	r2, #6
 804eef8:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 804eefa:	687b      	ldr	r3, [r7, #4]
 804eefc:	2205      	movs	r2, #5
 804eefe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804ef02:	687b      	ldr	r3, [r7, #4]
 804ef04:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804ef08:	687b      	ldr	r3, [r7, #4]
 804ef0a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804ef0e:	2200      	movs	r2, #0
 804ef10:	4619      	mov	r1, r3
 804ef12:	f007 f9e1 	bl	80562d8 <osMessagePut>
      break;
 804ef16:	e06a      	b.n	804efee <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 804ef18:	687b      	ldr	r3, [r7, #4]
 804ef1a:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 804ef1e:	2b00      	cmp	r3, #0
 804ef20:	d027      	beq.n	804ef72 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 804ef22:	687b      	ldr	r3, [r7, #4]
 804ef24:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 804ef28:	687b      	ldr	r3, [r7, #4]
 804ef2a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 804ef2e:	23ff      	movs	r3, #255	; 0xff
 804ef30:	6878      	ldr	r0, [r7, #4]
 804ef32:	f000 f995 	bl	804f260 <USBH_Get_StringDesc>
 804ef36:	4603      	mov	r3, r0
 804ef38:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 804ef3a:	7bbb      	ldrb	r3, [r7, #14]
 804ef3c:	2b00      	cmp	r3, #0
 804ef3e:	d103      	bne.n	804ef48 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 804ef40:	687b      	ldr	r3, [r7, #4]
 804ef42:	2207      	movs	r2, #7
 804ef44:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 804ef46:	e054      	b.n	804eff2 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 804ef48:	7bbb      	ldrb	r3, [r7, #14]
 804ef4a:	2b03      	cmp	r3, #3
 804ef4c:	d151      	bne.n	804eff2 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 804ef4e:	687b      	ldr	r3, [r7, #4]
 804ef50:	2207      	movs	r2, #7
 804ef52:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 804ef54:	687b      	ldr	r3, [r7, #4]
 804ef56:	2205      	movs	r2, #5
 804ef58:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804ef5c:	687b      	ldr	r3, [r7, #4]
 804ef5e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804ef62:	687b      	ldr	r3, [r7, #4]
 804ef64:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804ef68:	2200      	movs	r2, #0
 804ef6a:	4619      	mov	r1, r3
 804ef6c:	f007 f9b4 	bl	80562d8 <osMessagePut>
      break;
 804ef70:	e03f      	b.n	804eff2 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 804ef72:	687b      	ldr	r3, [r7, #4]
 804ef74:	2207      	movs	r2, #7
 804ef76:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 804ef78:	687b      	ldr	r3, [r7, #4]
 804ef7a:	2205      	movs	r2, #5
 804ef7c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804ef80:	687b      	ldr	r3, [r7, #4]
 804ef82:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804ef86:	687b      	ldr	r3, [r7, #4]
 804ef88:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804ef8c:	2200      	movs	r2, #0
 804ef8e:	4619      	mov	r1, r3
 804ef90:	f007 f9a2 	bl	80562d8 <osMessagePut>
      break;
 804ef94:	e02d      	b.n	804eff2 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 804ef96:	687b      	ldr	r3, [r7, #4]
 804ef98:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 804ef9c:	2b00      	cmp	r3, #0
 804ef9e:	d017      	beq.n	804efd0 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 804efa0:	687b      	ldr	r3, [r7, #4]
 804efa2:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 804efa6:	687b      	ldr	r3, [r7, #4]
 804efa8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 804efac:	23ff      	movs	r3, #255	; 0xff
 804efae:	6878      	ldr	r0, [r7, #4]
 804efb0:	f000 f956 	bl	804f260 <USBH_Get_StringDesc>
 804efb4:	4603      	mov	r3, r0
 804efb6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 804efb8:	7bbb      	ldrb	r3, [r7, #14]
 804efba:	2b00      	cmp	r3, #0
 804efbc:	d102      	bne.n	804efc4 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 804efbe:	2300      	movs	r3, #0
 804efc0:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 804efc2:	e018      	b.n	804eff6 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 804efc4:	7bbb      	ldrb	r3, [r7, #14]
 804efc6:	2b03      	cmp	r3, #3
 804efc8:	d115      	bne.n	804eff6 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 804efca:	2300      	movs	r3, #0
 804efcc:	73fb      	strb	r3, [r7, #15]
      break;
 804efce:	e012      	b.n	804eff6 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 804efd0:	2300      	movs	r3, #0
 804efd2:	73fb      	strb	r3, [r7, #15]
      break;
 804efd4:	e00f      	b.n	804eff6 <USBH_HandleEnum+0x44a>

    default:
      break;
 804efd6:	bf00      	nop
 804efd8:	e00e      	b.n	804eff8 <USBH_HandleEnum+0x44c>
      break;
 804efda:	bf00      	nop
 804efdc:	e00c      	b.n	804eff8 <USBH_HandleEnum+0x44c>
      break;
 804efde:	bf00      	nop
 804efe0:	e00a      	b.n	804eff8 <USBH_HandleEnum+0x44c>
      break;
 804efe2:	bf00      	nop
 804efe4:	e008      	b.n	804eff8 <USBH_HandleEnum+0x44c>
      break;
 804efe6:	bf00      	nop
 804efe8:	e006      	b.n	804eff8 <USBH_HandleEnum+0x44c>
      break;
 804efea:	bf00      	nop
 804efec:	e004      	b.n	804eff8 <USBH_HandleEnum+0x44c>
      break;
 804efee:	bf00      	nop
 804eff0:	e002      	b.n	804eff8 <USBH_HandleEnum+0x44c>
      break;
 804eff2:	bf00      	nop
 804eff4:	e000      	b.n	804eff8 <USBH_HandleEnum+0x44c>
      break;
 804eff6:	bf00      	nop
  }
  return Status;
 804eff8:	7bfb      	ldrb	r3, [r7, #15]
}
 804effa:	4618      	mov	r0, r3
 804effc:	3710      	adds	r7, #16
 804effe:	46bd      	mov	sp, r7
 804f000:	bd80      	pop	{r7, pc}
 804f002:	bf00      	nop

0804f004 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 804f004:	b480      	push	{r7}
 804f006:	b083      	sub	sp, #12
 804f008:	af00      	add	r7, sp, #0
 804f00a:	6078      	str	r0, [r7, #4]
 804f00c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 804f00e:	687b      	ldr	r3, [r7, #4]
 804f010:	683a      	ldr	r2, [r7, #0]
 804f012:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 804f016:	bf00      	nop
 804f018:	370c      	adds	r7, #12
 804f01a:	46bd      	mov	sp, r7
 804f01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 804f020:	4770      	bx	lr

0804f022 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 804f022:	b580      	push	{r7, lr}
 804f024:	b082      	sub	sp, #8
 804f026:	af00      	add	r7, sp, #0
 804f028:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 804f02a:	687b      	ldr	r3, [r7, #4]
 804f02c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 804f030:	1c5a      	adds	r2, r3, #1
 804f032:	687b      	ldr	r3, [r7, #4]
 804f034:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 804f038:	6878      	ldr	r0, [r7, #4]
 804f03a:	f000 f804 	bl	804f046 <USBH_HandleSof>
}
 804f03e:	bf00      	nop
 804f040:	3708      	adds	r7, #8
 804f042:	46bd      	mov	sp, r7
 804f044:	bd80      	pop	{r7, pc}

0804f046 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 804f046:	b580      	push	{r7, lr}
 804f048:	b082      	sub	sp, #8
 804f04a:	af00      	add	r7, sp, #0
 804f04c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 804f04e:	687b      	ldr	r3, [r7, #4]
 804f050:	781b      	ldrb	r3, [r3, #0]
 804f052:	b2db      	uxtb	r3, r3
 804f054:	2b0b      	cmp	r3, #11
 804f056:	d10a      	bne.n	804f06e <USBH_HandleSof+0x28>
 804f058:	687b      	ldr	r3, [r7, #4]
 804f05a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804f05e:	2b00      	cmp	r3, #0
 804f060:	d005      	beq.n	804f06e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 804f062:	687b      	ldr	r3, [r7, #4]
 804f064:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804f068:	699b      	ldr	r3, [r3, #24]
 804f06a:	6878      	ldr	r0, [r7, #4]
 804f06c:	4798      	blx	r3
  }
}
 804f06e:	bf00      	nop
 804f070:	3708      	adds	r7, #8
 804f072:	46bd      	mov	sp, r7
 804f074:	bd80      	pop	{r7, pc}

0804f076 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 804f076:	b580      	push	{r7, lr}
 804f078:	b082      	sub	sp, #8
 804f07a:	af00      	add	r7, sp, #0
 804f07c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 804f07e:	687b      	ldr	r3, [r7, #4]
 804f080:	2201      	movs	r2, #1
 804f082:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 804f086:	687b      	ldr	r3, [r7, #4]
 804f088:	2201      	movs	r2, #1
 804f08a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804f08e:	687b      	ldr	r3, [r7, #4]
 804f090:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804f094:	687b      	ldr	r3, [r7, #4]
 804f096:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804f09a:	2200      	movs	r2, #0
 804f09c:	4619      	mov	r1, r3
 804f09e:	f007 f91b 	bl	80562d8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 804f0a2:	bf00      	nop
}
 804f0a4:	3708      	adds	r7, #8
 804f0a6:	46bd      	mov	sp, r7
 804f0a8:	bd80      	pop	{r7, pc}

0804f0aa <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 804f0aa:	b480      	push	{r7}
 804f0ac:	b083      	sub	sp, #12
 804f0ae:	af00      	add	r7, sp, #0
 804f0b0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 804f0b2:	687b      	ldr	r3, [r7, #4]
 804f0b4:	2200      	movs	r2, #0
 804f0b6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 804f0ba:	bf00      	nop
}
 804f0bc:	370c      	adds	r7, #12
 804f0be:	46bd      	mov	sp, r7
 804f0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 804f0c4:	4770      	bx	lr

0804f0c6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 804f0c6:	b580      	push	{r7, lr}
 804f0c8:	b082      	sub	sp, #8
 804f0ca:	af00      	add	r7, sp, #0
 804f0cc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 804f0ce:	687b      	ldr	r3, [r7, #4]
 804f0d0:	2201      	movs	r2, #1
 804f0d2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 804f0d6:	687b      	ldr	r3, [r7, #4]
 804f0d8:	2200      	movs	r2, #0
 804f0da:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 804f0de:	687b      	ldr	r3, [r7, #4]
 804f0e0:	2200      	movs	r2, #0
 804f0e2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 804f0e6:	687b      	ldr	r3, [r7, #4]
 804f0e8:	2201      	movs	r2, #1
 804f0ea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804f0ee:	687b      	ldr	r3, [r7, #4]
 804f0f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804f0f4:	687b      	ldr	r3, [r7, #4]
 804f0f6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804f0fa:	2200      	movs	r2, #0
 804f0fc:	4619      	mov	r1, r3
 804f0fe:	f007 f8eb 	bl	80562d8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 804f102:	2300      	movs	r3, #0
}
 804f104:	4618      	mov	r0, r3
 804f106:	3708      	adds	r7, #8
 804f108:	46bd      	mov	sp, r7
 804f10a:	bd80      	pop	{r7, pc}

0804f10c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 804f10c:	b580      	push	{r7, lr}
 804f10e:	b082      	sub	sp, #8
 804f110:	af00      	add	r7, sp, #0
 804f112:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 804f114:	687b      	ldr	r3, [r7, #4]
 804f116:	2201      	movs	r2, #1
 804f118:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 804f11c:	687b      	ldr	r3, [r7, #4]
 804f11e:	2200      	movs	r2, #0
 804f120:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 804f124:	687b      	ldr	r3, [r7, #4]
 804f126:	2200      	movs	r2, #0
 804f128:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 804f12c:	6878      	ldr	r0, [r7, #4]
 804f12e:	f00a fce4 	bl	8059afa <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 804f132:	687b      	ldr	r3, [r7, #4]
 804f134:	791b      	ldrb	r3, [r3, #4]
 804f136:	4619      	mov	r1, r3
 804f138:	6878      	ldr	r0, [r7, #4]
 804f13a:	f000 ffbd 	bl	80500b8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 804f13e:	687b      	ldr	r3, [r7, #4]
 804f140:	795b      	ldrb	r3, [r3, #5]
 804f142:	4619      	mov	r1, r3
 804f144:	6878      	ldr	r0, [r7, #4]
 804f146:	f000 ffb7 	bl	80500b8 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 804f14a:	687b      	ldr	r3, [r7, #4]
 804f14c:	2201      	movs	r2, #1
 804f14e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804f152:	687b      	ldr	r3, [r7, #4]
 804f154:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804f158:	687b      	ldr	r3, [r7, #4]
 804f15a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804f15e:	2200      	movs	r2, #0
 804f160:	4619      	mov	r1, r3
 804f162:	f007 f8b9 	bl	80562d8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 804f166:	2300      	movs	r3, #0
}
 804f168:	4618      	mov	r0, r3
 804f16a:	3708      	adds	r7, #8
 804f16c:	46bd      	mov	sp, r7
 804f16e:	bd80      	pop	{r7, pc}

0804f170 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 804f170:	b580      	push	{r7, lr}
 804f172:	b086      	sub	sp, #24
 804f174:	af00      	add	r7, sp, #0
 804f176:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 804f178:	687b      	ldr	r3, [r7, #4]
 804f17a:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 804f17e:	f107 030c 	add.w	r3, r7, #12
 804f182:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 804f186:	4618      	mov	r0, r3
 804f188:	f007 f8e6 	bl	8056358 <osMessageGet>
    if (event.status == osEventMessage)
 804f18c:	68fb      	ldr	r3, [r7, #12]
 804f18e:	2b10      	cmp	r3, #16
 804f190:	d1f2      	bne.n	804f178 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 804f192:	6878      	ldr	r0, [r7, #4]
 804f194:	f7ff fa9e 	bl	804e6d4 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 804f198:	e7ee      	b.n	804f178 <USBH_Process_OS+0x8>

0804f19a <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 804f19a:	b580      	push	{r7, lr}
 804f19c:	b082      	sub	sp, #8
 804f19e:	af00      	add	r7, sp, #0
 804f1a0:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 804f1a2:	687b      	ldr	r3, [r7, #4]
 804f1a4:	2201      	movs	r2, #1
 804f1a6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804f1aa:	687b      	ldr	r3, [r7, #4]
 804f1ac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804f1b0:	687b      	ldr	r3, [r7, #4]
 804f1b2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804f1b6:	2200      	movs	r2, #0
 804f1b8:	4619      	mov	r1, r3
 804f1ba:	f007 f88d 	bl	80562d8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 804f1be:	2300      	movs	r3, #0
}
 804f1c0:	4618      	mov	r0, r3
 804f1c2:	3708      	adds	r7, #8
 804f1c4:	46bd      	mov	sp, r7
 804f1c6:	bd80      	pop	{r7, pc}

0804f1c8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 804f1c8:	b580      	push	{r7, lr}
 804f1ca:	b086      	sub	sp, #24
 804f1cc:	af02      	add	r7, sp, #8
 804f1ce:	6078      	str	r0, [r7, #4]
 804f1d0:	460b      	mov	r3, r1
 804f1d2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 804f1d4:	687b      	ldr	r3, [r7, #4]
 804f1d6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 804f1da:	78fb      	ldrb	r3, [r7, #3]
 804f1dc:	b29b      	uxth	r3, r3
 804f1de:	9300      	str	r3, [sp, #0]
 804f1e0:	4613      	mov	r3, r2
 804f1e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 804f1e6:	2100      	movs	r1, #0
 804f1e8:	6878      	ldr	r0, [r7, #4]
 804f1ea:	f000 f864 	bl	804f2b6 <USBH_GetDescriptor>
 804f1ee:	4603      	mov	r3, r0
 804f1f0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 804f1f2:	7bfb      	ldrb	r3, [r7, #15]
 804f1f4:	2b00      	cmp	r3, #0
 804f1f6:	d10a      	bne.n	804f20e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 804f1f8:	687b      	ldr	r3, [r7, #4]
 804f1fa:	f203 3026 	addw	r0, r3, #806	; 0x326
 804f1fe:	687b      	ldr	r3, [r7, #4]
 804f200:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 804f204:	78fa      	ldrb	r2, [r7, #3]
 804f206:	b292      	uxth	r2, r2
 804f208:	4619      	mov	r1, r3
 804f20a:	f000 f919 	bl	804f440 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 804f20e:	7bfb      	ldrb	r3, [r7, #15]
}
 804f210:	4618      	mov	r0, r3
 804f212:	3710      	adds	r7, #16
 804f214:	46bd      	mov	sp, r7
 804f216:	bd80      	pop	{r7, pc}

0804f218 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 804f218:	b580      	push	{r7, lr}
 804f21a:	b086      	sub	sp, #24
 804f21c:	af02      	add	r7, sp, #8
 804f21e:	6078      	str	r0, [r7, #4]
 804f220:	460b      	mov	r3, r1
 804f222:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 804f224:	687b      	ldr	r3, [r7, #4]
 804f226:	331c      	adds	r3, #28
 804f228:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 804f22a:	887b      	ldrh	r3, [r7, #2]
 804f22c:	9300      	str	r3, [sp, #0]
 804f22e:	68bb      	ldr	r3, [r7, #8]
 804f230:	f44f 7200 	mov.w	r2, #512	; 0x200
 804f234:	2100      	movs	r1, #0
 804f236:	6878      	ldr	r0, [r7, #4]
 804f238:	f000 f83d 	bl	804f2b6 <USBH_GetDescriptor>
 804f23c:	4603      	mov	r3, r0
 804f23e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 804f240:	7bfb      	ldrb	r3, [r7, #15]
 804f242:	2b00      	cmp	r3, #0
 804f244:	d107      	bne.n	804f256 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 804f246:	887b      	ldrh	r3, [r7, #2]
 804f248:	461a      	mov	r2, r3
 804f24a:	68b9      	ldr	r1, [r7, #8]
 804f24c:	6878      	ldr	r0, [r7, #4]
 804f24e:	f000 f987 	bl	804f560 <USBH_ParseCfgDesc>
 804f252:	4603      	mov	r3, r0
 804f254:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 804f256:	7bfb      	ldrb	r3, [r7, #15]
}
 804f258:	4618      	mov	r0, r3
 804f25a:	3710      	adds	r7, #16
 804f25c:	46bd      	mov	sp, r7
 804f25e:	bd80      	pop	{r7, pc}

0804f260 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 804f260:	b580      	push	{r7, lr}
 804f262:	b088      	sub	sp, #32
 804f264:	af02      	add	r7, sp, #8
 804f266:	60f8      	str	r0, [r7, #12]
 804f268:	607a      	str	r2, [r7, #4]
 804f26a:	461a      	mov	r2, r3
 804f26c:	460b      	mov	r3, r1
 804f26e:	72fb      	strb	r3, [r7, #11]
 804f270:	4613      	mov	r3, r2
 804f272:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 804f274:	7afb      	ldrb	r3, [r7, #11]
 804f276:	b29b      	uxth	r3, r3
 804f278:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 804f27c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 804f27e:	68fb      	ldr	r3, [r7, #12]
 804f280:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 804f284:	893b      	ldrh	r3, [r7, #8]
 804f286:	9300      	str	r3, [sp, #0]
 804f288:	460b      	mov	r3, r1
 804f28a:	2100      	movs	r1, #0
 804f28c:	68f8      	ldr	r0, [r7, #12]
 804f28e:	f000 f812 	bl	804f2b6 <USBH_GetDescriptor>
 804f292:	4603      	mov	r3, r0
 804f294:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 804f296:	7dfb      	ldrb	r3, [r7, #23]
 804f298:	2b00      	cmp	r3, #0
 804f29a:	d107      	bne.n	804f2ac <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 804f29c:	68fb      	ldr	r3, [r7, #12]
 804f29e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 804f2a2:	893a      	ldrh	r2, [r7, #8]
 804f2a4:	6879      	ldr	r1, [r7, #4]
 804f2a6:	4618      	mov	r0, r3
 804f2a8:	f000 fb26 	bl	804f8f8 <USBH_ParseStringDesc>
  }

  return status;
 804f2ac:	7dfb      	ldrb	r3, [r7, #23]
}
 804f2ae:	4618      	mov	r0, r3
 804f2b0:	3718      	adds	r7, #24
 804f2b2:	46bd      	mov	sp, r7
 804f2b4:	bd80      	pop	{r7, pc}

0804f2b6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 804f2b6:	b580      	push	{r7, lr}
 804f2b8:	b084      	sub	sp, #16
 804f2ba:	af00      	add	r7, sp, #0
 804f2bc:	60f8      	str	r0, [r7, #12]
 804f2be:	607b      	str	r3, [r7, #4]
 804f2c0:	460b      	mov	r3, r1
 804f2c2:	72fb      	strb	r3, [r7, #11]
 804f2c4:	4613      	mov	r3, r2
 804f2c6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 804f2c8:	68fb      	ldr	r3, [r7, #12]
 804f2ca:	789b      	ldrb	r3, [r3, #2]
 804f2cc:	2b01      	cmp	r3, #1
 804f2ce:	d11c      	bne.n	804f30a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 804f2d0:	7afb      	ldrb	r3, [r7, #11]
 804f2d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 804f2d6:	b2da      	uxtb	r2, r3
 804f2d8:	68fb      	ldr	r3, [r7, #12]
 804f2da:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 804f2dc:	68fb      	ldr	r3, [r7, #12]
 804f2de:	2206      	movs	r2, #6
 804f2e0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 804f2e2:	68fb      	ldr	r3, [r7, #12]
 804f2e4:	893a      	ldrh	r2, [r7, #8]
 804f2e6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 804f2e8:	893b      	ldrh	r3, [r7, #8]
 804f2ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 804f2ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 804f2f2:	d104      	bne.n	804f2fe <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 804f2f4:	68fb      	ldr	r3, [r7, #12]
 804f2f6:	f240 4209 	movw	r2, #1033	; 0x409
 804f2fa:	829a      	strh	r2, [r3, #20]
 804f2fc:	e002      	b.n	804f304 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 804f2fe:	68fb      	ldr	r3, [r7, #12]
 804f300:	2200      	movs	r2, #0
 804f302:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 804f304:	68fb      	ldr	r3, [r7, #12]
 804f306:	8b3a      	ldrh	r2, [r7, #24]
 804f308:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 804f30a:	8b3b      	ldrh	r3, [r7, #24]
 804f30c:	461a      	mov	r2, r3
 804f30e:	6879      	ldr	r1, [r7, #4]
 804f310:	68f8      	ldr	r0, [r7, #12]
 804f312:	f000 fb3f 	bl	804f994 <USBH_CtlReq>
 804f316:	4603      	mov	r3, r0
}
 804f318:	4618      	mov	r0, r3
 804f31a:	3710      	adds	r7, #16
 804f31c:	46bd      	mov	sp, r7
 804f31e:	bd80      	pop	{r7, pc}

0804f320 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 804f320:	b580      	push	{r7, lr}
 804f322:	b082      	sub	sp, #8
 804f324:	af00      	add	r7, sp, #0
 804f326:	6078      	str	r0, [r7, #4]
 804f328:	460b      	mov	r3, r1
 804f32a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 804f32c:	687b      	ldr	r3, [r7, #4]
 804f32e:	789b      	ldrb	r3, [r3, #2]
 804f330:	2b01      	cmp	r3, #1
 804f332:	d10f      	bne.n	804f354 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 804f334:	687b      	ldr	r3, [r7, #4]
 804f336:	2200      	movs	r2, #0
 804f338:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 804f33a:	687b      	ldr	r3, [r7, #4]
 804f33c:	2205      	movs	r2, #5
 804f33e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 804f340:	78fb      	ldrb	r3, [r7, #3]
 804f342:	b29a      	uxth	r2, r3
 804f344:	687b      	ldr	r3, [r7, #4]
 804f346:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 804f348:	687b      	ldr	r3, [r7, #4]
 804f34a:	2200      	movs	r2, #0
 804f34c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 804f34e:	687b      	ldr	r3, [r7, #4]
 804f350:	2200      	movs	r2, #0
 804f352:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 804f354:	2200      	movs	r2, #0
 804f356:	2100      	movs	r1, #0
 804f358:	6878      	ldr	r0, [r7, #4]
 804f35a:	f000 fb1b 	bl	804f994 <USBH_CtlReq>
 804f35e:	4603      	mov	r3, r0
}
 804f360:	4618      	mov	r0, r3
 804f362:	3708      	adds	r7, #8
 804f364:	46bd      	mov	sp, r7
 804f366:	bd80      	pop	{r7, pc}

0804f368 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 804f368:	b580      	push	{r7, lr}
 804f36a:	b082      	sub	sp, #8
 804f36c:	af00      	add	r7, sp, #0
 804f36e:	6078      	str	r0, [r7, #4]
 804f370:	460b      	mov	r3, r1
 804f372:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 804f374:	687b      	ldr	r3, [r7, #4]
 804f376:	789b      	ldrb	r3, [r3, #2]
 804f378:	2b01      	cmp	r3, #1
 804f37a:	d10e      	bne.n	804f39a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 804f37c:	687b      	ldr	r3, [r7, #4]
 804f37e:	2200      	movs	r2, #0
 804f380:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 804f382:	687b      	ldr	r3, [r7, #4]
 804f384:	2209      	movs	r2, #9
 804f386:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 804f388:	687b      	ldr	r3, [r7, #4]
 804f38a:	887a      	ldrh	r2, [r7, #2]
 804f38c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 804f38e:	687b      	ldr	r3, [r7, #4]
 804f390:	2200      	movs	r2, #0
 804f392:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 804f394:	687b      	ldr	r3, [r7, #4]
 804f396:	2200      	movs	r2, #0
 804f398:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 804f39a:	2200      	movs	r2, #0
 804f39c:	2100      	movs	r1, #0
 804f39e:	6878      	ldr	r0, [r7, #4]
 804f3a0:	f000 faf8 	bl	804f994 <USBH_CtlReq>
 804f3a4:	4603      	mov	r3, r0
}
 804f3a6:	4618      	mov	r0, r3
 804f3a8:	3708      	adds	r7, #8
 804f3aa:	46bd      	mov	sp, r7
 804f3ac:	bd80      	pop	{r7, pc}

0804f3ae <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 804f3ae:	b580      	push	{r7, lr}
 804f3b0:	b082      	sub	sp, #8
 804f3b2:	af00      	add	r7, sp, #0
 804f3b4:	6078      	str	r0, [r7, #4]
 804f3b6:	460b      	mov	r3, r1
 804f3b8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 804f3ba:	687b      	ldr	r3, [r7, #4]
 804f3bc:	789b      	ldrb	r3, [r3, #2]
 804f3be:	2b01      	cmp	r3, #1
 804f3c0:	d10f      	bne.n	804f3e2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 804f3c2:	687b      	ldr	r3, [r7, #4]
 804f3c4:	2200      	movs	r2, #0
 804f3c6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 804f3c8:	687b      	ldr	r3, [r7, #4]
 804f3ca:	2203      	movs	r2, #3
 804f3cc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 804f3ce:	78fb      	ldrb	r3, [r7, #3]
 804f3d0:	b29a      	uxth	r2, r3
 804f3d2:	687b      	ldr	r3, [r7, #4]
 804f3d4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 804f3d6:	687b      	ldr	r3, [r7, #4]
 804f3d8:	2200      	movs	r2, #0
 804f3da:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 804f3dc:	687b      	ldr	r3, [r7, #4]
 804f3de:	2200      	movs	r2, #0
 804f3e0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 804f3e2:	2200      	movs	r2, #0
 804f3e4:	2100      	movs	r1, #0
 804f3e6:	6878      	ldr	r0, [r7, #4]
 804f3e8:	f000 fad4 	bl	804f994 <USBH_CtlReq>
 804f3ec:	4603      	mov	r3, r0
}
 804f3ee:	4618      	mov	r0, r3
 804f3f0:	3708      	adds	r7, #8
 804f3f2:	46bd      	mov	sp, r7
 804f3f4:	bd80      	pop	{r7, pc}

0804f3f6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 804f3f6:	b580      	push	{r7, lr}
 804f3f8:	b082      	sub	sp, #8
 804f3fa:	af00      	add	r7, sp, #0
 804f3fc:	6078      	str	r0, [r7, #4]
 804f3fe:	460b      	mov	r3, r1
 804f400:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 804f402:	687b      	ldr	r3, [r7, #4]
 804f404:	789b      	ldrb	r3, [r3, #2]
 804f406:	2b01      	cmp	r3, #1
 804f408:	d10f      	bne.n	804f42a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 804f40a:	687b      	ldr	r3, [r7, #4]
 804f40c:	2202      	movs	r2, #2
 804f40e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 804f410:	687b      	ldr	r3, [r7, #4]
 804f412:	2201      	movs	r2, #1
 804f414:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 804f416:	687b      	ldr	r3, [r7, #4]
 804f418:	2200      	movs	r2, #0
 804f41a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 804f41c:	78fb      	ldrb	r3, [r7, #3]
 804f41e:	b29a      	uxth	r2, r3
 804f420:	687b      	ldr	r3, [r7, #4]
 804f422:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 804f424:	687b      	ldr	r3, [r7, #4]
 804f426:	2200      	movs	r2, #0
 804f428:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 804f42a:	2200      	movs	r2, #0
 804f42c:	2100      	movs	r1, #0
 804f42e:	6878      	ldr	r0, [r7, #4]
 804f430:	f000 fab0 	bl	804f994 <USBH_CtlReq>
 804f434:	4603      	mov	r3, r0
}
 804f436:	4618      	mov	r0, r3
 804f438:	3708      	adds	r7, #8
 804f43a:	46bd      	mov	sp, r7
 804f43c:	bd80      	pop	{r7, pc}
	...

0804f440 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 804f440:	b480      	push	{r7}
 804f442:	b085      	sub	sp, #20
 804f444:	af00      	add	r7, sp, #0
 804f446:	60f8      	str	r0, [r7, #12]
 804f448:	60b9      	str	r1, [r7, #8]
 804f44a:	4613      	mov	r3, r2
 804f44c:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 804f44e:	68bb      	ldr	r3, [r7, #8]
 804f450:	781a      	ldrb	r2, [r3, #0]
 804f452:	68fb      	ldr	r3, [r7, #12]
 804f454:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 804f456:	68bb      	ldr	r3, [r7, #8]
 804f458:	785a      	ldrb	r2, [r3, #1]
 804f45a:	68fb      	ldr	r3, [r7, #12]
 804f45c:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 804f45e:	68bb      	ldr	r3, [r7, #8]
 804f460:	3302      	adds	r3, #2
 804f462:	781b      	ldrb	r3, [r3, #0]
 804f464:	b29a      	uxth	r2, r3
 804f466:	68bb      	ldr	r3, [r7, #8]
 804f468:	3303      	adds	r3, #3
 804f46a:	781b      	ldrb	r3, [r3, #0]
 804f46c:	b29b      	uxth	r3, r3
 804f46e:	021b      	lsls	r3, r3, #8
 804f470:	b29b      	uxth	r3, r3
 804f472:	4313      	orrs	r3, r2
 804f474:	b29a      	uxth	r2, r3
 804f476:	68fb      	ldr	r3, [r7, #12]
 804f478:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 804f47a:	68bb      	ldr	r3, [r7, #8]
 804f47c:	791a      	ldrb	r2, [r3, #4]
 804f47e:	68fb      	ldr	r3, [r7, #12]
 804f480:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 804f482:	68bb      	ldr	r3, [r7, #8]
 804f484:	795a      	ldrb	r2, [r3, #5]
 804f486:	68fb      	ldr	r3, [r7, #12]
 804f488:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 804f48a:	68bb      	ldr	r3, [r7, #8]
 804f48c:	799a      	ldrb	r2, [r3, #6]
 804f48e:	68fb      	ldr	r3, [r7, #12]
 804f490:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 804f492:	68bb      	ldr	r3, [r7, #8]
 804f494:	79da      	ldrb	r2, [r3, #7]
 804f496:	68fb      	ldr	r3, [r7, #12]
 804f498:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 804f49a:	68fb      	ldr	r3, [r7, #12]
 804f49c:	79db      	ldrb	r3, [r3, #7]
 804f49e:	2b20      	cmp	r3, #32
 804f4a0:	dc0e      	bgt.n	804f4c0 <USBH_ParseDevDesc+0x80>
 804f4a2:	2b08      	cmp	r3, #8
 804f4a4:	db13      	blt.n	804f4ce <USBH_ParseDevDesc+0x8e>
 804f4a6:	3b08      	subs	r3, #8
 804f4a8:	2201      	movs	r2, #1
 804f4aa:	409a      	lsls	r2, r3
 804f4ac:	4b2b      	ldr	r3, [pc, #172]	; (804f55c <USBH_ParseDevDesc+0x11c>)
 804f4ae:	4013      	ands	r3, r2
 804f4b0:	2b00      	cmp	r3, #0
 804f4b2:	bf14      	ite	ne
 804f4b4:	2301      	movne	r3, #1
 804f4b6:	2300      	moveq	r3, #0
 804f4b8:	b2db      	uxtb	r3, r3
 804f4ba:	2b00      	cmp	r3, #0
 804f4bc:	d102      	bne.n	804f4c4 <USBH_ParseDevDesc+0x84>
 804f4be:	e006      	b.n	804f4ce <USBH_ParseDevDesc+0x8e>
 804f4c0:	2b40      	cmp	r3, #64	; 0x40
 804f4c2:	d104      	bne.n	804f4ce <USBH_ParseDevDesc+0x8e>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 804f4c4:	68fb      	ldr	r3, [r7, #12]
 804f4c6:	79da      	ldrb	r2, [r3, #7]
 804f4c8:	68fb      	ldr	r3, [r7, #12]
 804f4ca:	71da      	strb	r2, [r3, #7]
      break;
 804f4cc:	e003      	b.n	804f4d6 <USBH_ParseDevDesc+0x96>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 804f4ce:	68fb      	ldr	r3, [r7, #12]
 804f4d0:	2240      	movs	r2, #64	; 0x40
 804f4d2:	71da      	strb	r2, [r3, #7]
      break;
 804f4d4:	bf00      	nop
  }

  if (length > 8U)
 804f4d6:	88fb      	ldrh	r3, [r7, #6]
 804f4d8:	2b08      	cmp	r3, #8
 804f4da:	d939      	bls.n	804f550 <USBH_ParseDevDesc+0x110>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 804f4dc:	68bb      	ldr	r3, [r7, #8]
 804f4de:	3308      	adds	r3, #8
 804f4e0:	781b      	ldrb	r3, [r3, #0]
 804f4e2:	b29a      	uxth	r2, r3
 804f4e4:	68bb      	ldr	r3, [r7, #8]
 804f4e6:	3309      	adds	r3, #9
 804f4e8:	781b      	ldrb	r3, [r3, #0]
 804f4ea:	b29b      	uxth	r3, r3
 804f4ec:	021b      	lsls	r3, r3, #8
 804f4ee:	b29b      	uxth	r3, r3
 804f4f0:	4313      	orrs	r3, r2
 804f4f2:	b29a      	uxth	r2, r3
 804f4f4:	68fb      	ldr	r3, [r7, #12]
 804f4f6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 804f4f8:	68bb      	ldr	r3, [r7, #8]
 804f4fa:	330a      	adds	r3, #10
 804f4fc:	781b      	ldrb	r3, [r3, #0]
 804f4fe:	b29a      	uxth	r2, r3
 804f500:	68bb      	ldr	r3, [r7, #8]
 804f502:	330b      	adds	r3, #11
 804f504:	781b      	ldrb	r3, [r3, #0]
 804f506:	b29b      	uxth	r3, r3
 804f508:	021b      	lsls	r3, r3, #8
 804f50a:	b29b      	uxth	r3, r3
 804f50c:	4313      	orrs	r3, r2
 804f50e:	b29a      	uxth	r2, r3
 804f510:	68fb      	ldr	r3, [r7, #12]
 804f512:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 804f514:	68bb      	ldr	r3, [r7, #8]
 804f516:	330c      	adds	r3, #12
 804f518:	781b      	ldrb	r3, [r3, #0]
 804f51a:	b29a      	uxth	r2, r3
 804f51c:	68bb      	ldr	r3, [r7, #8]
 804f51e:	330d      	adds	r3, #13
 804f520:	781b      	ldrb	r3, [r3, #0]
 804f522:	b29b      	uxth	r3, r3
 804f524:	021b      	lsls	r3, r3, #8
 804f526:	b29b      	uxth	r3, r3
 804f528:	4313      	orrs	r3, r2
 804f52a:	b29a      	uxth	r2, r3
 804f52c:	68fb      	ldr	r3, [r7, #12]
 804f52e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 804f530:	68bb      	ldr	r3, [r7, #8]
 804f532:	7b9a      	ldrb	r2, [r3, #14]
 804f534:	68fb      	ldr	r3, [r7, #12]
 804f536:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 804f538:	68bb      	ldr	r3, [r7, #8]
 804f53a:	7bda      	ldrb	r2, [r3, #15]
 804f53c:	68fb      	ldr	r3, [r7, #12]
 804f53e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 804f540:	68bb      	ldr	r3, [r7, #8]
 804f542:	7c1a      	ldrb	r2, [r3, #16]
 804f544:	68fb      	ldr	r3, [r7, #12]
 804f546:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 804f548:	68bb      	ldr	r3, [r7, #8]
 804f54a:	7c5a      	ldrb	r2, [r3, #17]
 804f54c:	68fb      	ldr	r3, [r7, #12]
 804f54e:	745a      	strb	r2, [r3, #17]
  }
}
 804f550:	bf00      	nop
 804f552:	3714      	adds	r7, #20
 804f554:	46bd      	mov	sp, r7
 804f556:	f85d 7b04 	ldr.w	r7, [sp], #4
 804f55a:	4770      	bx	lr
 804f55c:	01000101 	.word	0x01000101

0804f560 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 804f560:	b580      	push	{r7, lr}
 804f562:	b08c      	sub	sp, #48	; 0x30
 804f564:	af00      	add	r7, sp, #0
 804f566:	60f8      	str	r0, [r7, #12]
 804f568:	60b9      	str	r1, [r7, #8]
 804f56a:	4613      	mov	r3, r2
 804f56c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 804f56e:	68fb      	ldr	r3, [r7, #12]
 804f570:	f503 734e 	add.w	r3, r3, #824	; 0x338
 804f574:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 804f576:	2300      	movs	r3, #0
 804f578:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 804f57c:	68bb      	ldr	r3, [r7, #8]
 804f57e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 804f580:	2300      	movs	r3, #0
 804f582:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 804f586:	2300      	movs	r3, #0
 804f588:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 804f58c:	68bb      	ldr	r3, [r7, #8]
 804f58e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 804f590:	68bb      	ldr	r3, [r7, #8]
 804f592:	781a      	ldrb	r2, [r3, #0]
 804f594:	6a3b      	ldr	r3, [r7, #32]
 804f596:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 804f598:	68bb      	ldr	r3, [r7, #8]
 804f59a:	785a      	ldrb	r2, [r3, #1]
 804f59c:	6a3b      	ldr	r3, [r7, #32]
 804f59e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 804f5a0:	68bb      	ldr	r3, [r7, #8]
 804f5a2:	3302      	adds	r3, #2
 804f5a4:	781b      	ldrb	r3, [r3, #0]
 804f5a6:	b29a      	uxth	r2, r3
 804f5a8:	68bb      	ldr	r3, [r7, #8]
 804f5aa:	3303      	adds	r3, #3
 804f5ac:	781b      	ldrb	r3, [r3, #0]
 804f5ae:	b29b      	uxth	r3, r3
 804f5b0:	021b      	lsls	r3, r3, #8
 804f5b2:	b29b      	uxth	r3, r3
 804f5b4:	4313      	orrs	r3, r2
 804f5b6:	b29b      	uxth	r3, r3
 804f5b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 804f5bc:	bf28      	it	cs
 804f5be:	f44f 7380 	movcs.w	r3, #256	; 0x100
 804f5c2:	b29a      	uxth	r2, r3
 804f5c4:	6a3b      	ldr	r3, [r7, #32]
 804f5c6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 804f5c8:	68bb      	ldr	r3, [r7, #8]
 804f5ca:	791a      	ldrb	r2, [r3, #4]
 804f5cc:	6a3b      	ldr	r3, [r7, #32]
 804f5ce:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 804f5d0:	68bb      	ldr	r3, [r7, #8]
 804f5d2:	795a      	ldrb	r2, [r3, #5]
 804f5d4:	6a3b      	ldr	r3, [r7, #32]
 804f5d6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 804f5d8:	68bb      	ldr	r3, [r7, #8]
 804f5da:	799a      	ldrb	r2, [r3, #6]
 804f5dc:	6a3b      	ldr	r3, [r7, #32]
 804f5de:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 804f5e0:	68bb      	ldr	r3, [r7, #8]
 804f5e2:	79da      	ldrb	r2, [r3, #7]
 804f5e4:	6a3b      	ldr	r3, [r7, #32]
 804f5e6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 804f5e8:	68bb      	ldr	r3, [r7, #8]
 804f5ea:	7a1a      	ldrb	r2, [r3, #8]
 804f5ec:	6a3b      	ldr	r3, [r7, #32]
 804f5ee:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 804f5f0:	6a3b      	ldr	r3, [r7, #32]
 804f5f2:	781b      	ldrb	r3, [r3, #0]
 804f5f4:	2b09      	cmp	r3, #9
 804f5f6:	d002      	beq.n	804f5fe <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 804f5f8:	6a3b      	ldr	r3, [r7, #32]
 804f5fa:	2209      	movs	r2, #9
 804f5fc:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 804f5fe:	88fb      	ldrh	r3, [r7, #6]
 804f600:	2b09      	cmp	r3, #9
 804f602:	f240 809d 	bls.w	804f740 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 804f606:	2309      	movs	r3, #9
 804f608:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 804f60a:	2300      	movs	r3, #0
 804f60c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 804f60e:	e081      	b.n	804f714 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 804f610:	f107 0316 	add.w	r3, r7, #22
 804f614:	4619      	mov	r1, r3
 804f616:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 804f618:	f000 f9a1 	bl	804f95e <USBH_GetNextDesc>
 804f61c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 804f61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804f620:	785b      	ldrb	r3, [r3, #1]
 804f622:	2b04      	cmp	r3, #4
 804f624:	d176      	bne.n	804f714 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 804f626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804f628:	781b      	ldrb	r3, [r3, #0]
 804f62a:	2b09      	cmp	r3, #9
 804f62c:	d002      	beq.n	804f634 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 804f62e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804f630:	2209      	movs	r2, #9
 804f632:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 804f634:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 804f638:	221a      	movs	r2, #26
 804f63a:	fb02 f303 	mul.w	r3, r2, r3
 804f63e:	3308      	adds	r3, #8
 804f640:	6a3a      	ldr	r2, [r7, #32]
 804f642:	4413      	add	r3, r2
 804f644:	3302      	adds	r3, #2
 804f646:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 804f648:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 804f64a:	69f8      	ldr	r0, [r7, #28]
 804f64c:	f000 f87e 	bl	804f74c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 804f650:	2300      	movs	r3, #0
 804f652:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 804f656:	2300      	movs	r3, #0
 804f658:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 804f65a:	e043      	b.n	804f6e4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 804f65c:	f107 0316 	add.w	r3, r7, #22
 804f660:	4619      	mov	r1, r3
 804f662:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 804f664:	f000 f97b 	bl	804f95e <USBH_GetNextDesc>
 804f668:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 804f66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804f66c:	785b      	ldrb	r3, [r3, #1]
 804f66e:	2b05      	cmp	r3, #5
 804f670:	d138      	bne.n	804f6e4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 804f672:	69fb      	ldr	r3, [r7, #28]
 804f674:	795b      	ldrb	r3, [r3, #5]
 804f676:	2b01      	cmp	r3, #1
 804f678:	d10f      	bne.n	804f69a <USBH_ParseCfgDesc+0x13a>
 804f67a:	69fb      	ldr	r3, [r7, #28]
 804f67c:	799b      	ldrb	r3, [r3, #6]
 804f67e:	2b02      	cmp	r3, #2
 804f680:	d10b      	bne.n	804f69a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 804f682:	69fb      	ldr	r3, [r7, #28]
 804f684:	79db      	ldrb	r3, [r3, #7]
 804f686:	2b00      	cmp	r3, #0
 804f688:	d10f      	bne.n	804f6aa <USBH_ParseCfgDesc+0x14a>
 804f68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804f68c:	781b      	ldrb	r3, [r3, #0]
 804f68e:	2b09      	cmp	r3, #9
 804f690:	d00b      	beq.n	804f6aa <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 804f692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804f694:	2209      	movs	r2, #9
 804f696:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 804f698:	e007      	b.n	804f6aa <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 804f69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804f69c:	781b      	ldrb	r3, [r3, #0]
 804f69e:	2b07      	cmp	r3, #7
 804f6a0:	d004      	beq.n	804f6ac <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 804f6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804f6a4:	2207      	movs	r2, #7
 804f6a6:	701a      	strb	r2, [r3, #0]
 804f6a8:	e000      	b.n	804f6ac <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 804f6aa:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 804f6ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 804f6b0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 804f6b4:	3201      	adds	r2, #1
 804f6b6:	00d2      	lsls	r2, r2, #3
 804f6b8:	211a      	movs	r1, #26
 804f6ba:	fb01 f303 	mul.w	r3, r1, r3
 804f6be:	4413      	add	r3, r2
 804f6c0:	3308      	adds	r3, #8
 804f6c2:	6a3a      	ldr	r2, [r7, #32]
 804f6c4:	4413      	add	r3, r2
 804f6c6:	3304      	adds	r3, #4
 804f6c8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 804f6ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 804f6cc:	69b9      	ldr	r1, [r7, #24]
 804f6ce:	68f8      	ldr	r0, [r7, #12]
 804f6d0:	f000 f86c 	bl	804f7ac <USBH_ParseEPDesc>
 804f6d4:	4603      	mov	r3, r0
 804f6d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 804f6da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 804f6de:	3301      	adds	r3, #1
 804f6e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 804f6e4:	69fb      	ldr	r3, [r7, #28]
 804f6e6:	791b      	ldrb	r3, [r3, #4]
 804f6e8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 804f6ec:	429a      	cmp	r2, r3
 804f6ee:	d204      	bcs.n	804f6fa <USBH_ParseCfgDesc+0x19a>
 804f6f0:	6a3b      	ldr	r3, [r7, #32]
 804f6f2:	885a      	ldrh	r2, [r3, #2]
 804f6f4:	8afb      	ldrh	r3, [r7, #22]
 804f6f6:	429a      	cmp	r2, r3
 804f6f8:	d8b0      	bhi.n	804f65c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 804f6fa:	69fb      	ldr	r3, [r7, #28]
 804f6fc:	791b      	ldrb	r3, [r3, #4]
 804f6fe:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 804f702:	429a      	cmp	r2, r3
 804f704:	d201      	bcs.n	804f70a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 804f706:	2303      	movs	r3, #3
 804f708:	e01c      	b.n	804f744 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 804f70a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 804f70e:	3301      	adds	r3, #1
 804f710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 804f714:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 804f718:	2b01      	cmp	r3, #1
 804f71a:	d805      	bhi.n	804f728 <USBH_ParseCfgDesc+0x1c8>
 804f71c:	6a3b      	ldr	r3, [r7, #32]
 804f71e:	885a      	ldrh	r2, [r3, #2]
 804f720:	8afb      	ldrh	r3, [r7, #22]
 804f722:	429a      	cmp	r2, r3
 804f724:	f63f af74 	bhi.w	804f610 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 804f728:	6a3b      	ldr	r3, [r7, #32]
 804f72a:	791b      	ldrb	r3, [r3, #4]
 804f72c:	2b02      	cmp	r3, #2
 804f72e:	bf28      	it	cs
 804f730:	2302      	movcs	r3, #2
 804f732:	b2db      	uxtb	r3, r3
 804f734:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 804f738:	429a      	cmp	r2, r3
 804f73a:	d201      	bcs.n	804f740 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 804f73c:	2303      	movs	r3, #3
 804f73e:	e001      	b.n	804f744 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 804f740:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 804f744:	4618      	mov	r0, r3
 804f746:	3730      	adds	r7, #48	; 0x30
 804f748:	46bd      	mov	sp, r7
 804f74a:	bd80      	pop	{r7, pc}

0804f74c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 804f74c:	b480      	push	{r7}
 804f74e:	b083      	sub	sp, #12
 804f750:	af00      	add	r7, sp, #0
 804f752:	6078      	str	r0, [r7, #4]
 804f754:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 804f756:	683b      	ldr	r3, [r7, #0]
 804f758:	781a      	ldrb	r2, [r3, #0]
 804f75a:	687b      	ldr	r3, [r7, #4]
 804f75c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 804f75e:	683b      	ldr	r3, [r7, #0]
 804f760:	785a      	ldrb	r2, [r3, #1]
 804f762:	687b      	ldr	r3, [r7, #4]
 804f764:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 804f766:	683b      	ldr	r3, [r7, #0]
 804f768:	789a      	ldrb	r2, [r3, #2]
 804f76a:	687b      	ldr	r3, [r7, #4]
 804f76c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 804f76e:	683b      	ldr	r3, [r7, #0]
 804f770:	78da      	ldrb	r2, [r3, #3]
 804f772:	687b      	ldr	r3, [r7, #4]
 804f774:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 804f776:	683b      	ldr	r3, [r7, #0]
 804f778:	791a      	ldrb	r2, [r3, #4]
 804f77a:	687b      	ldr	r3, [r7, #4]
 804f77c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 804f77e:	683b      	ldr	r3, [r7, #0]
 804f780:	795a      	ldrb	r2, [r3, #5]
 804f782:	687b      	ldr	r3, [r7, #4]
 804f784:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 804f786:	683b      	ldr	r3, [r7, #0]
 804f788:	799a      	ldrb	r2, [r3, #6]
 804f78a:	687b      	ldr	r3, [r7, #4]
 804f78c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 804f78e:	683b      	ldr	r3, [r7, #0]
 804f790:	79da      	ldrb	r2, [r3, #7]
 804f792:	687b      	ldr	r3, [r7, #4]
 804f794:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 804f796:	683b      	ldr	r3, [r7, #0]
 804f798:	7a1a      	ldrb	r2, [r3, #8]
 804f79a:	687b      	ldr	r3, [r7, #4]
 804f79c:	721a      	strb	r2, [r3, #8]
}
 804f79e:	bf00      	nop
 804f7a0:	370c      	adds	r7, #12
 804f7a2:	46bd      	mov	sp, r7
 804f7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 804f7a8:	4770      	bx	lr
	...

0804f7ac <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 804f7ac:	b480      	push	{r7}
 804f7ae:	b087      	sub	sp, #28
 804f7b0:	af00      	add	r7, sp, #0
 804f7b2:	60f8      	str	r0, [r7, #12]
 804f7b4:	60b9      	str	r1, [r7, #8]
 804f7b6:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 804f7b8:	2300      	movs	r3, #0
 804f7ba:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 804f7bc:	687b      	ldr	r3, [r7, #4]
 804f7be:	781a      	ldrb	r2, [r3, #0]
 804f7c0:	68bb      	ldr	r3, [r7, #8]
 804f7c2:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 804f7c4:	687b      	ldr	r3, [r7, #4]
 804f7c6:	785a      	ldrb	r2, [r3, #1]
 804f7c8:	68bb      	ldr	r3, [r7, #8]
 804f7ca:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 804f7cc:	687b      	ldr	r3, [r7, #4]
 804f7ce:	789a      	ldrb	r2, [r3, #2]
 804f7d0:	68bb      	ldr	r3, [r7, #8]
 804f7d2:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 804f7d4:	687b      	ldr	r3, [r7, #4]
 804f7d6:	78da      	ldrb	r2, [r3, #3]
 804f7d8:	68bb      	ldr	r3, [r7, #8]
 804f7da:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 804f7dc:	687b      	ldr	r3, [r7, #4]
 804f7de:	3304      	adds	r3, #4
 804f7e0:	781b      	ldrb	r3, [r3, #0]
 804f7e2:	b29a      	uxth	r2, r3
 804f7e4:	687b      	ldr	r3, [r7, #4]
 804f7e6:	3305      	adds	r3, #5
 804f7e8:	781b      	ldrb	r3, [r3, #0]
 804f7ea:	b29b      	uxth	r3, r3
 804f7ec:	021b      	lsls	r3, r3, #8
 804f7ee:	b29b      	uxth	r3, r3
 804f7f0:	4313      	orrs	r3, r2
 804f7f2:	b29a      	uxth	r2, r3
 804f7f4:	68bb      	ldr	r3, [r7, #8]
 804f7f6:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 804f7f8:	687b      	ldr	r3, [r7, #4]
 804f7fa:	799a      	ldrb	r2, [r3, #6]
 804f7fc:	68bb      	ldr	r3, [r7, #8]
 804f7fe:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 804f800:	68bb      	ldr	r3, [r7, #8]
 804f802:	889b      	ldrh	r3, [r3, #4]
 804f804:	2b00      	cmp	r3, #0
 804f806:	d102      	bne.n	804f80e <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 804f808:	2303      	movs	r3, #3
 804f80a:	75fb      	strb	r3, [r7, #23]
 804f80c:	e031      	b.n	804f872 <USBH_ParseEPDesc+0xc6>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 804f80e:	68bb      	ldr	r3, [r7, #8]
 804f810:	889a      	ldrh	r2, [r3, #4]
 804f812:	4b38      	ldr	r3, [pc, #224]	; (804f8f4 <USBH_ParseEPDesc+0x148>)
 804f814:	4013      	ands	r3, r2
 804f816:	b29a      	uxth	r2, r3
 804f818:	68bb      	ldr	r3, [r7, #8]
 804f81a:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 804f81c:	68bb      	ldr	r3, [r7, #8]
 804f81e:	889b      	ldrh	r3, [r3, #4]
 804f820:	b21a      	sxth	r2, r3
 804f822:	687b      	ldr	r3, [r7, #4]
 804f824:	3304      	adds	r3, #4
 804f826:	781b      	ldrb	r3, [r3, #0]
 804f828:	b299      	uxth	r1, r3
 804f82a:	687b      	ldr	r3, [r7, #4]
 804f82c:	3305      	adds	r3, #5
 804f82e:	781b      	ldrb	r3, [r3, #0]
 804f830:	b29b      	uxth	r3, r3
 804f832:	021b      	lsls	r3, r3, #8
 804f834:	b29b      	uxth	r3, r3
 804f836:	430b      	orrs	r3, r1
 804f838:	b29b      	uxth	r3, r3
 804f83a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 804f83e:	2b00      	cmp	r3, #0
 804f840:	d110      	bne.n	804f864 <USBH_ParseEPDesc+0xb8>
 804f842:	687b      	ldr	r3, [r7, #4]
 804f844:	3304      	adds	r3, #4
 804f846:	781b      	ldrb	r3, [r3, #0]
 804f848:	b299      	uxth	r1, r3
 804f84a:	687b      	ldr	r3, [r7, #4]
 804f84c:	3305      	adds	r3, #5
 804f84e:	781b      	ldrb	r3, [r3, #0]
 804f850:	b29b      	uxth	r3, r3
 804f852:	021b      	lsls	r3, r3, #8
 804f854:	b29b      	uxth	r3, r3
 804f856:	430b      	orrs	r3, r1
 804f858:	b29b      	uxth	r3, r3
 804f85a:	b21b      	sxth	r3, r3
 804f85c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 804f860:	b21b      	sxth	r3, r3
 804f862:	e001      	b.n	804f868 <USBH_ParseEPDesc+0xbc>
 804f864:	f44f 7300 	mov.w	r3, #512	; 0x200
 804f868:	4313      	orrs	r3, r2
 804f86a:	b21b      	sxth	r3, r3
 804f86c:	b29a      	uxth	r2, r3
 804f86e:	68bb      	ldr	r3, [r7, #8]
 804f870:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 804f872:	68fb      	ldr	r3, [r7, #12]
 804f874:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 804f878:	2b00      	cmp	r3, #0
 804f87a:	d116      	bne.n	804f8aa <USBH_ParseEPDesc+0xfe>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 804f87c:	68bb      	ldr	r3, [r7, #8]
 804f87e:	78db      	ldrb	r3, [r3, #3]
 804f880:	f003 0303 	and.w	r3, r3, #3
 804f884:	2b01      	cmp	r3, #1
 804f886:	d005      	beq.n	804f894 <USBH_ParseEPDesc+0xe8>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 804f888:	68bb      	ldr	r3, [r7, #8]
 804f88a:	78db      	ldrb	r3, [r3, #3]
 804f88c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 804f890:	2b03      	cmp	r3, #3
 804f892:	d127      	bne.n	804f8e4 <USBH_ParseEPDesc+0x138>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 804f894:	68bb      	ldr	r3, [r7, #8]
 804f896:	799b      	ldrb	r3, [r3, #6]
 804f898:	2b00      	cmp	r3, #0
 804f89a:	d003      	beq.n	804f8a4 <USBH_ParseEPDesc+0xf8>
 804f89c:	68bb      	ldr	r3, [r7, #8]
 804f89e:	799b      	ldrb	r3, [r3, #6]
 804f8a0:	2b10      	cmp	r3, #16
 804f8a2:	d91f      	bls.n	804f8e4 <USBH_ParseEPDesc+0x138>
      {
        status = USBH_NOT_SUPPORTED;
 804f8a4:	2303      	movs	r3, #3
 804f8a6:	75fb      	strb	r3, [r7, #23]
 804f8a8:	e01c      	b.n	804f8e4 <USBH_ParseEPDesc+0x138>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 804f8aa:	68bb      	ldr	r3, [r7, #8]
 804f8ac:	78db      	ldrb	r3, [r3, #3]
 804f8ae:	f003 0303 	and.w	r3, r3, #3
 804f8b2:	2b01      	cmp	r3, #1
 804f8b4:	d10a      	bne.n	804f8cc <USBH_ParseEPDesc+0x120>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 804f8b6:	68bb      	ldr	r3, [r7, #8]
 804f8b8:	799b      	ldrb	r3, [r3, #6]
 804f8ba:	2b00      	cmp	r3, #0
 804f8bc:	d003      	beq.n	804f8c6 <USBH_ParseEPDesc+0x11a>
 804f8be:	68bb      	ldr	r3, [r7, #8]
 804f8c0:	799b      	ldrb	r3, [r3, #6]
 804f8c2:	2b10      	cmp	r3, #16
 804f8c4:	d90e      	bls.n	804f8e4 <USBH_ParseEPDesc+0x138>
      {
        status = USBH_NOT_SUPPORTED;
 804f8c6:	2303      	movs	r3, #3
 804f8c8:	75fb      	strb	r3, [r7, #23]
 804f8ca:	e00b      	b.n	804f8e4 <USBH_ParseEPDesc+0x138>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 804f8cc:	68bb      	ldr	r3, [r7, #8]
 804f8ce:	78db      	ldrb	r3, [r3, #3]
 804f8d0:	f003 0303 	and.w	r3, r3, #3
 804f8d4:	2b03      	cmp	r3, #3
 804f8d6:	d105      	bne.n	804f8e4 <USBH_ParseEPDesc+0x138>
    {
      if (ep_descriptor->bInterval == 0U)
 804f8d8:	68bb      	ldr	r3, [r7, #8]
 804f8da:	799b      	ldrb	r3, [r3, #6]
 804f8dc:	2b00      	cmp	r3, #0
 804f8de:	d101      	bne.n	804f8e4 <USBH_ParseEPDesc+0x138>
      {
        status = USBH_NOT_SUPPORTED;
 804f8e0:	2303      	movs	r3, #3
 804f8e2:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 804f8e4:	7dfb      	ldrb	r3, [r7, #23]
}
 804f8e6:	4618      	mov	r0, r3
 804f8e8:	371c      	adds	r7, #28
 804f8ea:	46bd      	mov	sp, r7
 804f8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 804f8f0:	4770      	bx	lr
 804f8f2:	bf00      	nop
 804f8f4:	fffff800 	.word	0xfffff800

0804f8f8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 804f8f8:	b480      	push	{r7}
 804f8fa:	b087      	sub	sp, #28
 804f8fc:	af00      	add	r7, sp, #0
 804f8fe:	60f8      	str	r0, [r7, #12]
 804f900:	60b9      	str	r1, [r7, #8]
 804f902:	4613      	mov	r3, r2
 804f904:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 804f906:	68fb      	ldr	r3, [r7, #12]
 804f908:	3301      	adds	r3, #1
 804f90a:	781b      	ldrb	r3, [r3, #0]
 804f90c:	2b03      	cmp	r3, #3
 804f90e:	d120      	bne.n	804f952 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 804f910:	68fb      	ldr	r3, [r7, #12]
 804f912:	781b      	ldrb	r3, [r3, #0]
 804f914:	1e9a      	subs	r2, r3, #2
 804f916:	88fb      	ldrh	r3, [r7, #6]
 804f918:	4293      	cmp	r3, r2
 804f91a:	bf28      	it	cs
 804f91c:	4613      	movcs	r3, r2
 804f91e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 804f920:	68fb      	ldr	r3, [r7, #12]
 804f922:	3302      	adds	r3, #2
 804f924:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 804f926:	2300      	movs	r3, #0
 804f928:	82fb      	strh	r3, [r7, #22]
 804f92a:	e00b      	b.n	804f944 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 804f92c:	8afb      	ldrh	r3, [r7, #22]
 804f92e:	68fa      	ldr	r2, [r7, #12]
 804f930:	4413      	add	r3, r2
 804f932:	781a      	ldrb	r2, [r3, #0]
 804f934:	68bb      	ldr	r3, [r7, #8]
 804f936:	701a      	strb	r2, [r3, #0]
      pdest++;
 804f938:	68bb      	ldr	r3, [r7, #8]
 804f93a:	3301      	adds	r3, #1
 804f93c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 804f93e:	8afb      	ldrh	r3, [r7, #22]
 804f940:	3302      	adds	r3, #2
 804f942:	82fb      	strh	r3, [r7, #22]
 804f944:	8afa      	ldrh	r2, [r7, #22]
 804f946:	8abb      	ldrh	r3, [r7, #20]
 804f948:	429a      	cmp	r2, r3
 804f94a:	d3ef      	bcc.n	804f92c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 804f94c:	68bb      	ldr	r3, [r7, #8]
 804f94e:	2200      	movs	r2, #0
 804f950:	701a      	strb	r2, [r3, #0]
  }
}
 804f952:	bf00      	nop
 804f954:	371c      	adds	r7, #28
 804f956:	46bd      	mov	sp, r7
 804f958:	f85d 7b04 	ldr.w	r7, [sp], #4
 804f95c:	4770      	bx	lr

0804f95e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 804f95e:	b480      	push	{r7}
 804f960:	b085      	sub	sp, #20
 804f962:	af00      	add	r7, sp, #0
 804f964:	6078      	str	r0, [r7, #4]
 804f966:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 804f968:	683b      	ldr	r3, [r7, #0]
 804f96a:	881a      	ldrh	r2, [r3, #0]
 804f96c:	687b      	ldr	r3, [r7, #4]
 804f96e:	781b      	ldrb	r3, [r3, #0]
 804f970:	b29b      	uxth	r3, r3
 804f972:	4413      	add	r3, r2
 804f974:	b29a      	uxth	r2, r3
 804f976:	683b      	ldr	r3, [r7, #0]
 804f978:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 804f97a:	687b      	ldr	r3, [r7, #4]
 804f97c:	781b      	ldrb	r3, [r3, #0]
 804f97e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 804f980:	687b      	ldr	r3, [r7, #4]
 804f982:	4413      	add	r3, r2
 804f984:	60fb      	str	r3, [r7, #12]

  return (pnext);
 804f986:	68fb      	ldr	r3, [r7, #12]
}
 804f988:	4618      	mov	r0, r3
 804f98a:	3714      	adds	r7, #20
 804f98c:	46bd      	mov	sp, r7
 804f98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804f992:	4770      	bx	lr

0804f994 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 804f994:	b580      	push	{r7, lr}
 804f996:	b086      	sub	sp, #24
 804f998:	af00      	add	r7, sp, #0
 804f99a:	60f8      	str	r0, [r7, #12]
 804f99c:	60b9      	str	r1, [r7, #8]
 804f99e:	4613      	mov	r3, r2
 804f9a0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 804f9a2:	2301      	movs	r3, #1
 804f9a4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 804f9a6:	68fb      	ldr	r3, [r7, #12]
 804f9a8:	789b      	ldrb	r3, [r3, #2]
 804f9aa:	2b01      	cmp	r3, #1
 804f9ac:	d002      	beq.n	804f9b4 <USBH_CtlReq+0x20>
 804f9ae:	2b02      	cmp	r3, #2
 804f9b0:	d01d      	beq.n	804f9ee <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 804f9b2:	e043      	b.n	804fa3c <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 804f9b4:	68fb      	ldr	r3, [r7, #12]
 804f9b6:	68ba      	ldr	r2, [r7, #8]
 804f9b8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 804f9ba:	68fb      	ldr	r3, [r7, #12]
 804f9bc:	88fa      	ldrh	r2, [r7, #6]
 804f9be:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 804f9c0:	68fb      	ldr	r3, [r7, #12]
 804f9c2:	2201      	movs	r2, #1
 804f9c4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 804f9c6:	68fb      	ldr	r3, [r7, #12]
 804f9c8:	2202      	movs	r2, #2
 804f9ca:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 804f9cc:	2301      	movs	r3, #1
 804f9ce:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 804f9d0:	68fb      	ldr	r3, [r7, #12]
 804f9d2:	2203      	movs	r2, #3
 804f9d4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804f9d8:	68fb      	ldr	r3, [r7, #12]
 804f9da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804f9de:	68fb      	ldr	r3, [r7, #12]
 804f9e0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804f9e4:	2200      	movs	r2, #0
 804f9e6:	4619      	mov	r1, r3
 804f9e8:	f006 fc76 	bl	80562d8 <osMessagePut>
      break;
 804f9ec:	e026      	b.n	804fa3c <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 804f9ee:	68f8      	ldr	r0, [r7, #12]
 804f9f0:	f000 f82a 	bl	804fa48 <USBH_HandleControl>
 804f9f4:	4603      	mov	r3, r0
 804f9f6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 804f9f8:	7dfb      	ldrb	r3, [r7, #23]
 804f9fa:	2b00      	cmp	r3, #0
 804f9fc:	d002      	beq.n	804fa04 <USBH_CtlReq+0x70>
 804f9fe:	7dfb      	ldrb	r3, [r7, #23]
 804fa00:	2b03      	cmp	r3, #3
 804fa02:	d106      	bne.n	804fa12 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 804fa04:	68fb      	ldr	r3, [r7, #12]
 804fa06:	2201      	movs	r2, #1
 804fa08:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 804fa0a:	68fb      	ldr	r3, [r7, #12]
 804fa0c:	2200      	movs	r2, #0
 804fa0e:	761a      	strb	r2, [r3, #24]
 804fa10:	e005      	b.n	804fa1e <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 804fa12:	7dfb      	ldrb	r3, [r7, #23]
 804fa14:	2b02      	cmp	r3, #2
 804fa16:	d102      	bne.n	804fa1e <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 804fa18:	68fb      	ldr	r3, [r7, #12]
 804fa1a:	2201      	movs	r2, #1
 804fa1c:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 804fa1e:	68fb      	ldr	r3, [r7, #12]
 804fa20:	2203      	movs	r2, #3
 804fa22:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804fa26:	68fb      	ldr	r3, [r7, #12]
 804fa28:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804fa2c:	68fb      	ldr	r3, [r7, #12]
 804fa2e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804fa32:	2200      	movs	r2, #0
 804fa34:	4619      	mov	r1, r3
 804fa36:	f006 fc4f 	bl	80562d8 <osMessagePut>
      break;
 804fa3a:	bf00      	nop
  }
  return status;
 804fa3c:	7dfb      	ldrb	r3, [r7, #23]
}
 804fa3e:	4618      	mov	r0, r3
 804fa40:	3718      	adds	r7, #24
 804fa42:	46bd      	mov	sp, r7
 804fa44:	bd80      	pop	{r7, pc}
	...

0804fa48 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 804fa48:	b580      	push	{r7, lr}
 804fa4a:	b086      	sub	sp, #24
 804fa4c:	af02      	add	r7, sp, #8
 804fa4e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 804fa50:	2301      	movs	r3, #1
 804fa52:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 804fa54:	2300      	movs	r3, #0
 804fa56:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 804fa58:	687b      	ldr	r3, [r7, #4]
 804fa5a:	7e1b      	ldrb	r3, [r3, #24]
 804fa5c:	3b01      	subs	r3, #1
 804fa5e:	2b0a      	cmp	r3, #10
 804fa60:	f200 8229 	bhi.w	804feb6 <USBH_HandleControl+0x46e>
 804fa64:	a201      	add	r2, pc, #4	; (adr r2, 804fa6c <USBH_HandleControl+0x24>)
 804fa66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804fa6a:	bf00      	nop
 804fa6c:	0804fa99 	.word	0x0804fa99
 804fa70:	0804fab3 	.word	0x0804fab3
 804fa74:	0804fb55 	.word	0x0804fb55
 804fa78:	0804fb7b 	.word	0x0804fb7b
 804fa7c:	0804fc07 	.word	0x0804fc07
 804fa80:	0804fc31 	.word	0x0804fc31
 804fa84:	0804fcf3 	.word	0x0804fcf3
 804fa88:	0804fd15 	.word	0x0804fd15
 804fa8c:	0804fda7 	.word	0x0804fda7
 804fa90:	0804fdcd 	.word	0x0804fdcd
 804fa94:	0804fe5f 	.word	0x0804fe5f
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 804fa98:	687b      	ldr	r3, [r7, #4]
 804fa9a:	f103 0110 	add.w	r1, r3, #16
 804fa9e:	687b      	ldr	r3, [r7, #4]
 804faa0:	795b      	ldrb	r3, [r3, #5]
 804faa2:	461a      	mov	r2, r3
 804faa4:	6878      	ldr	r0, [r7, #4]
 804faa6:	f000 fa17 	bl	804fed8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 804faaa:	687b      	ldr	r3, [r7, #4]
 804faac:	2202      	movs	r2, #2
 804faae:	761a      	strb	r2, [r3, #24]
      break;
 804fab0:	e20c      	b.n	804fecc <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 804fab2:	687b      	ldr	r3, [r7, #4]
 804fab4:	795b      	ldrb	r3, [r3, #5]
 804fab6:	4619      	mov	r1, r3
 804fab8:	6878      	ldr	r0, [r7, #4]
 804faba:	f00a f90d 	bl	8059cd8 <USBH_LL_GetURBState>
 804fabe:	4603      	mov	r3, r0
 804fac0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 804fac2:	7bbb      	ldrb	r3, [r7, #14]
 804fac4:	2b01      	cmp	r3, #1
 804fac6:	d12c      	bne.n	804fb22 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 804fac8:	687b      	ldr	r3, [r7, #4]
 804faca:	7c1b      	ldrb	r3, [r3, #16]
 804facc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 804fad0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 804fad2:	687b      	ldr	r3, [r7, #4]
 804fad4:	8adb      	ldrh	r3, [r3, #22]
 804fad6:	2b00      	cmp	r3, #0
 804fad8:	d00a      	beq.n	804faf0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 804fada:	7b7b      	ldrb	r3, [r7, #13]
 804fadc:	2b80      	cmp	r3, #128	; 0x80
 804fade:	d103      	bne.n	804fae8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 804fae0:	687b      	ldr	r3, [r7, #4]
 804fae2:	2203      	movs	r2, #3
 804fae4:	761a      	strb	r2, [r3, #24]
 804fae6:	e00d      	b.n	804fb04 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 804fae8:	687b      	ldr	r3, [r7, #4]
 804faea:	2205      	movs	r2, #5
 804faec:	761a      	strb	r2, [r3, #24]
 804faee:	e009      	b.n	804fb04 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 804faf0:	7b7b      	ldrb	r3, [r7, #13]
 804faf2:	2b80      	cmp	r3, #128	; 0x80
 804faf4:	d103      	bne.n	804fafe <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 804faf6:	687b      	ldr	r3, [r7, #4]
 804faf8:	2209      	movs	r2, #9
 804fafa:	761a      	strb	r2, [r3, #24]
 804fafc:	e002      	b.n	804fb04 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 804fafe:	687b      	ldr	r3, [r7, #4]
 804fb00:	2207      	movs	r2, #7
 804fb02:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 804fb04:	687b      	ldr	r3, [r7, #4]
 804fb06:	2203      	movs	r2, #3
 804fb08:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804fb0c:	687b      	ldr	r3, [r7, #4]
 804fb0e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804fb12:	687b      	ldr	r3, [r7, #4]
 804fb14:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804fb18:	2200      	movs	r2, #0
 804fb1a:	4619      	mov	r1, r3
 804fb1c:	f006 fbdc 	bl	80562d8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 804fb20:	e1cb      	b.n	804feba <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 804fb22:	7bbb      	ldrb	r3, [r7, #14]
 804fb24:	2b04      	cmp	r3, #4
 804fb26:	d003      	beq.n	804fb30 <USBH_HandleControl+0xe8>
 804fb28:	7bbb      	ldrb	r3, [r7, #14]
 804fb2a:	2b02      	cmp	r3, #2
 804fb2c:	f040 81c5 	bne.w	804feba <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 804fb30:	687b      	ldr	r3, [r7, #4]
 804fb32:	220b      	movs	r2, #11
 804fb34:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 804fb36:	687b      	ldr	r3, [r7, #4]
 804fb38:	2203      	movs	r2, #3
 804fb3a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804fb3e:	687b      	ldr	r3, [r7, #4]
 804fb40:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804fb44:	687b      	ldr	r3, [r7, #4]
 804fb46:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804fb4a:	2200      	movs	r2, #0
 804fb4c:	4619      	mov	r1, r3
 804fb4e:	f006 fbc3 	bl	80562d8 <osMessagePut>
      break;
 804fb52:	e1b2      	b.n	804feba <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 804fb54:	687b      	ldr	r3, [r7, #4]
 804fb56:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 804fb5a:	b29a      	uxth	r2, r3
 804fb5c:	687b      	ldr	r3, [r7, #4]
 804fb5e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 804fb60:	687b      	ldr	r3, [r7, #4]
 804fb62:	6899      	ldr	r1, [r3, #8]
 804fb64:	687b      	ldr	r3, [r7, #4]
 804fb66:	899a      	ldrh	r2, [r3, #12]
 804fb68:	687b      	ldr	r3, [r7, #4]
 804fb6a:	791b      	ldrb	r3, [r3, #4]
 804fb6c:	6878      	ldr	r0, [r7, #4]
 804fb6e:	f000 f9f2 	bl	804ff56 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 804fb72:	687b      	ldr	r3, [r7, #4]
 804fb74:	2204      	movs	r2, #4
 804fb76:	761a      	strb	r2, [r3, #24]
      break;
 804fb78:	e1a8      	b.n	804fecc <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 804fb7a:	687b      	ldr	r3, [r7, #4]
 804fb7c:	791b      	ldrb	r3, [r3, #4]
 804fb7e:	4619      	mov	r1, r3
 804fb80:	6878      	ldr	r0, [r7, #4]
 804fb82:	f00a f8a9 	bl	8059cd8 <USBH_LL_GetURBState>
 804fb86:	4603      	mov	r3, r0
 804fb88:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 804fb8a:	7bbb      	ldrb	r3, [r7, #14]
 804fb8c:	2b01      	cmp	r3, #1
 804fb8e:	d110      	bne.n	804fbb2 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 804fb90:	687b      	ldr	r3, [r7, #4]
 804fb92:	2209      	movs	r2, #9
 804fb94:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 804fb96:	687b      	ldr	r3, [r7, #4]
 804fb98:	2203      	movs	r2, #3
 804fb9a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804fb9e:	687b      	ldr	r3, [r7, #4]
 804fba0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804fba4:	687b      	ldr	r3, [r7, #4]
 804fba6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804fbaa:	2200      	movs	r2, #0
 804fbac:	4619      	mov	r1, r3
 804fbae:	f006 fb93 	bl	80562d8 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 804fbb2:	7bbb      	ldrb	r3, [r7, #14]
 804fbb4:	2b05      	cmp	r3, #5
 804fbb6:	d110      	bne.n	804fbda <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 804fbb8:	2303      	movs	r3, #3
 804fbba:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 804fbbc:	687b      	ldr	r3, [r7, #4]
 804fbbe:	2203      	movs	r2, #3
 804fbc0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804fbc4:	687b      	ldr	r3, [r7, #4]
 804fbc6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804fbca:	687b      	ldr	r3, [r7, #4]
 804fbcc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804fbd0:	2200      	movs	r2, #0
 804fbd2:	4619      	mov	r1, r3
 804fbd4:	f006 fb80 	bl	80562d8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 804fbd8:	e171      	b.n	804febe <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 804fbda:	7bbb      	ldrb	r3, [r7, #14]
 804fbdc:	2b04      	cmp	r3, #4
 804fbde:	f040 816e 	bne.w	804febe <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 804fbe2:	687b      	ldr	r3, [r7, #4]
 804fbe4:	220b      	movs	r2, #11
 804fbe6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 804fbe8:	687b      	ldr	r3, [r7, #4]
 804fbea:	2203      	movs	r2, #3
 804fbec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804fbf0:	687b      	ldr	r3, [r7, #4]
 804fbf2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804fbf6:	687b      	ldr	r3, [r7, #4]
 804fbf8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804fbfc:	2200      	movs	r2, #0
 804fbfe:	4619      	mov	r1, r3
 804fc00:	f006 fb6a 	bl	80562d8 <osMessagePut>
      break;
 804fc04:	e15b      	b.n	804febe <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 804fc06:	687b      	ldr	r3, [r7, #4]
 804fc08:	6899      	ldr	r1, [r3, #8]
 804fc0a:	687b      	ldr	r3, [r7, #4]
 804fc0c:	899a      	ldrh	r2, [r3, #12]
 804fc0e:	687b      	ldr	r3, [r7, #4]
 804fc10:	795b      	ldrb	r3, [r3, #5]
 804fc12:	2001      	movs	r0, #1
 804fc14:	9000      	str	r0, [sp, #0]
 804fc16:	6878      	ldr	r0, [r7, #4]
 804fc18:	f000 f978 	bl	804ff0c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 804fc1c:	687b      	ldr	r3, [r7, #4]
 804fc1e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 804fc22:	b29a      	uxth	r2, r3
 804fc24:	687b      	ldr	r3, [r7, #4]
 804fc26:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 804fc28:	687b      	ldr	r3, [r7, #4]
 804fc2a:	2206      	movs	r2, #6
 804fc2c:	761a      	strb	r2, [r3, #24]
      break;
 804fc2e:	e14d      	b.n	804fecc <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 804fc30:	687b      	ldr	r3, [r7, #4]
 804fc32:	795b      	ldrb	r3, [r3, #5]
 804fc34:	4619      	mov	r1, r3
 804fc36:	6878      	ldr	r0, [r7, #4]
 804fc38:	f00a f84e 	bl	8059cd8 <USBH_LL_GetURBState>
 804fc3c:	4603      	mov	r3, r0
 804fc3e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 804fc40:	7bbb      	ldrb	r3, [r7, #14]
 804fc42:	2b01      	cmp	r3, #1
 804fc44:	d111      	bne.n	804fc6a <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 804fc46:	687b      	ldr	r3, [r7, #4]
 804fc48:	2207      	movs	r2, #7
 804fc4a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 804fc4c:	687b      	ldr	r3, [r7, #4]
 804fc4e:	2203      	movs	r2, #3
 804fc50:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804fc54:	687b      	ldr	r3, [r7, #4]
 804fc56:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804fc5a:	687b      	ldr	r3, [r7, #4]
 804fc5c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804fc60:	2200      	movs	r2, #0
 804fc62:	4619      	mov	r1, r3
 804fc64:	f006 fb38 	bl	80562d8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 804fc68:	e12b      	b.n	804fec2 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 804fc6a:	7bbb      	ldrb	r3, [r7, #14]
 804fc6c:	2b05      	cmp	r3, #5
 804fc6e:	d113      	bne.n	804fc98 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 804fc70:	687b      	ldr	r3, [r7, #4]
 804fc72:	220c      	movs	r2, #12
 804fc74:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 804fc76:	2303      	movs	r3, #3
 804fc78:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 804fc7a:	687b      	ldr	r3, [r7, #4]
 804fc7c:	2203      	movs	r2, #3
 804fc7e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804fc82:	687b      	ldr	r3, [r7, #4]
 804fc84:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804fc88:	687b      	ldr	r3, [r7, #4]
 804fc8a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804fc8e:	2200      	movs	r2, #0
 804fc90:	4619      	mov	r1, r3
 804fc92:	f006 fb21 	bl	80562d8 <osMessagePut>
      break;
 804fc96:	e114      	b.n	804fec2 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 804fc98:	7bbb      	ldrb	r3, [r7, #14]
 804fc9a:	2b02      	cmp	r3, #2
 804fc9c:	d111      	bne.n	804fcc2 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 804fc9e:	687b      	ldr	r3, [r7, #4]
 804fca0:	2205      	movs	r2, #5
 804fca2:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 804fca4:	687b      	ldr	r3, [r7, #4]
 804fca6:	2203      	movs	r2, #3
 804fca8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804fcac:	687b      	ldr	r3, [r7, #4]
 804fcae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804fcb2:	687b      	ldr	r3, [r7, #4]
 804fcb4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804fcb8:	2200      	movs	r2, #0
 804fcba:	4619      	mov	r1, r3
 804fcbc:	f006 fb0c 	bl	80562d8 <osMessagePut>
      break;
 804fcc0:	e0ff      	b.n	804fec2 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 804fcc2:	7bbb      	ldrb	r3, [r7, #14]
 804fcc4:	2b04      	cmp	r3, #4
 804fcc6:	f040 80fc 	bne.w	804fec2 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 804fcca:	687b      	ldr	r3, [r7, #4]
 804fccc:	220b      	movs	r2, #11
 804fcce:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 804fcd0:	2302      	movs	r3, #2
 804fcd2:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 804fcd4:	687b      	ldr	r3, [r7, #4]
 804fcd6:	2203      	movs	r2, #3
 804fcd8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804fcdc:	687b      	ldr	r3, [r7, #4]
 804fcde:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804fce2:	687b      	ldr	r3, [r7, #4]
 804fce4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804fce8:	2200      	movs	r2, #0
 804fcea:	4619      	mov	r1, r3
 804fcec:	f006 faf4 	bl	80562d8 <osMessagePut>
      break;
 804fcf0:	e0e7      	b.n	804fec2 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 804fcf2:	687b      	ldr	r3, [r7, #4]
 804fcf4:	791b      	ldrb	r3, [r3, #4]
 804fcf6:	2200      	movs	r2, #0
 804fcf8:	2100      	movs	r1, #0
 804fcfa:	6878      	ldr	r0, [r7, #4]
 804fcfc:	f000 f92b 	bl	804ff56 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 804fd00:	687b      	ldr	r3, [r7, #4]
 804fd02:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 804fd06:	b29a      	uxth	r2, r3
 804fd08:	687b      	ldr	r3, [r7, #4]
 804fd0a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 804fd0c:	687b      	ldr	r3, [r7, #4]
 804fd0e:	2208      	movs	r2, #8
 804fd10:	761a      	strb	r2, [r3, #24]

      break;
 804fd12:	e0db      	b.n	804fecc <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 804fd14:	687b      	ldr	r3, [r7, #4]
 804fd16:	791b      	ldrb	r3, [r3, #4]
 804fd18:	4619      	mov	r1, r3
 804fd1a:	6878      	ldr	r0, [r7, #4]
 804fd1c:	f009 ffdc 	bl	8059cd8 <USBH_LL_GetURBState>
 804fd20:	4603      	mov	r3, r0
 804fd22:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 804fd24:	7bbb      	ldrb	r3, [r7, #14]
 804fd26:	2b01      	cmp	r3, #1
 804fd28:	d113      	bne.n	804fd52 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 804fd2a:	687b      	ldr	r3, [r7, #4]
 804fd2c:	220d      	movs	r2, #13
 804fd2e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 804fd30:	2300      	movs	r3, #0
 804fd32:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 804fd34:	687b      	ldr	r3, [r7, #4]
 804fd36:	2203      	movs	r2, #3
 804fd38:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804fd3c:	687b      	ldr	r3, [r7, #4]
 804fd3e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804fd42:	687b      	ldr	r3, [r7, #4]
 804fd44:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804fd48:	2200      	movs	r2, #0
 804fd4a:	4619      	mov	r1, r3
 804fd4c:	f006 fac4 	bl	80562d8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 804fd50:	e0b9      	b.n	804fec6 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 804fd52:	7bbb      	ldrb	r3, [r7, #14]
 804fd54:	2b04      	cmp	r3, #4
 804fd56:	d111      	bne.n	804fd7c <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 804fd58:	687b      	ldr	r3, [r7, #4]
 804fd5a:	220b      	movs	r2, #11
 804fd5c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 804fd5e:	687b      	ldr	r3, [r7, #4]
 804fd60:	2203      	movs	r2, #3
 804fd62:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804fd66:	687b      	ldr	r3, [r7, #4]
 804fd68:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804fd6c:	687b      	ldr	r3, [r7, #4]
 804fd6e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804fd72:	2200      	movs	r2, #0
 804fd74:	4619      	mov	r1, r3
 804fd76:	f006 faaf 	bl	80562d8 <osMessagePut>
      break;
 804fd7a:	e0a4      	b.n	804fec6 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 804fd7c:	7bbb      	ldrb	r3, [r7, #14]
 804fd7e:	2b05      	cmp	r3, #5
 804fd80:	f040 80a1 	bne.w	804fec6 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 804fd84:	2303      	movs	r3, #3
 804fd86:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 804fd88:	687b      	ldr	r3, [r7, #4]
 804fd8a:	2203      	movs	r2, #3
 804fd8c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804fd90:	687b      	ldr	r3, [r7, #4]
 804fd92:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804fd96:	687b      	ldr	r3, [r7, #4]
 804fd98:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804fd9c:	2200      	movs	r2, #0
 804fd9e:	4619      	mov	r1, r3
 804fda0:	f006 fa9a 	bl	80562d8 <osMessagePut>
      break;
 804fda4:	e08f      	b.n	804fec6 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 804fda6:	687b      	ldr	r3, [r7, #4]
 804fda8:	795b      	ldrb	r3, [r3, #5]
 804fdaa:	2201      	movs	r2, #1
 804fdac:	9200      	str	r2, [sp, #0]
 804fdae:	2200      	movs	r2, #0
 804fdb0:	2100      	movs	r1, #0
 804fdb2:	6878      	ldr	r0, [r7, #4]
 804fdb4:	f000 f8aa 	bl	804ff0c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 804fdb8:	687b      	ldr	r3, [r7, #4]
 804fdba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 804fdbe:	b29a      	uxth	r2, r3
 804fdc0:	687b      	ldr	r3, [r7, #4]
 804fdc2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 804fdc4:	687b      	ldr	r3, [r7, #4]
 804fdc6:	220a      	movs	r2, #10
 804fdc8:	761a      	strb	r2, [r3, #24]
      break;
 804fdca:	e07f      	b.n	804fecc <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 804fdcc:	687b      	ldr	r3, [r7, #4]
 804fdce:	795b      	ldrb	r3, [r3, #5]
 804fdd0:	4619      	mov	r1, r3
 804fdd2:	6878      	ldr	r0, [r7, #4]
 804fdd4:	f009 ff80 	bl	8059cd8 <USBH_LL_GetURBState>
 804fdd8:	4603      	mov	r3, r0
 804fdda:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 804fddc:	7bbb      	ldrb	r3, [r7, #14]
 804fdde:	2b01      	cmp	r3, #1
 804fde0:	d113      	bne.n	804fe0a <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 804fde2:	2300      	movs	r3, #0
 804fde4:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 804fde6:	687b      	ldr	r3, [r7, #4]
 804fde8:	220d      	movs	r2, #13
 804fdea:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 804fdec:	687b      	ldr	r3, [r7, #4]
 804fdee:	2203      	movs	r2, #3
 804fdf0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804fdf4:	687b      	ldr	r3, [r7, #4]
 804fdf6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804fdfa:	687b      	ldr	r3, [r7, #4]
 804fdfc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804fe00:	2200      	movs	r2, #0
 804fe02:	4619      	mov	r1, r3
 804fe04:	f006 fa68 	bl	80562d8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 804fe08:	e05f      	b.n	804feca <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 804fe0a:	7bbb      	ldrb	r3, [r7, #14]
 804fe0c:	2b02      	cmp	r3, #2
 804fe0e:	d111      	bne.n	804fe34 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 804fe10:	687b      	ldr	r3, [r7, #4]
 804fe12:	2209      	movs	r2, #9
 804fe14:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 804fe16:	687b      	ldr	r3, [r7, #4]
 804fe18:	2203      	movs	r2, #3
 804fe1a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804fe1e:	687b      	ldr	r3, [r7, #4]
 804fe20:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804fe24:	687b      	ldr	r3, [r7, #4]
 804fe26:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804fe2a:	2200      	movs	r2, #0
 804fe2c:	4619      	mov	r1, r3
 804fe2e:	f006 fa53 	bl	80562d8 <osMessagePut>
      break;
 804fe32:	e04a      	b.n	804feca <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 804fe34:	7bbb      	ldrb	r3, [r7, #14]
 804fe36:	2b04      	cmp	r3, #4
 804fe38:	d147      	bne.n	804feca <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 804fe3a:	687b      	ldr	r3, [r7, #4]
 804fe3c:	220b      	movs	r2, #11
 804fe3e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 804fe40:	687b      	ldr	r3, [r7, #4]
 804fe42:	2203      	movs	r2, #3
 804fe44:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 804fe48:	687b      	ldr	r3, [r7, #4]
 804fe4a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 804fe4e:	687b      	ldr	r3, [r7, #4]
 804fe50:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 804fe54:	2200      	movs	r2, #0
 804fe56:	4619      	mov	r1, r3
 804fe58:	f006 fa3e 	bl	80562d8 <osMessagePut>
      break;
 804fe5c:	e035      	b.n	804feca <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 804fe5e:	687b      	ldr	r3, [r7, #4]
 804fe60:	7e5b      	ldrb	r3, [r3, #25]
 804fe62:	3301      	adds	r3, #1
 804fe64:	b2da      	uxtb	r2, r3
 804fe66:	687b      	ldr	r3, [r7, #4]
 804fe68:	765a      	strb	r2, [r3, #25]
 804fe6a:	687b      	ldr	r3, [r7, #4]
 804fe6c:	7e5b      	ldrb	r3, [r3, #25]
 804fe6e:	2b02      	cmp	r3, #2
 804fe70:	d806      	bhi.n	804fe80 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 804fe72:	687b      	ldr	r3, [r7, #4]
 804fe74:	2201      	movs	r2, #1
 804fe76:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 804fe78:	687b      	ldr	r3, [r7, #4]
 804fe7a:	2201      	movs	r2, #1
 804fe7c:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 804fe7e:	e025      	b.n	804fecc <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 804fe80:	687b      	ldr	r3, [r7, #4]
 804fe82:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804fe86:	2106      	movs	r1, #6
 804fe88:	6878      	ldr	r0, [r7, #4]
 804fe8a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 804fe8c:	687b      	ldr	r3, [r7, #4]
 804fe8e:	2200      	movs	r2, #0
 804fe90:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 804fe92:	687b      	ldr	r3, [r7, #4]
 804fe94:	795b      	ldrb	r3, [r3, #5]
 804fe96:	4619      	mov	r1, r3
 804fe98:	6878      	ldr	r0, [r7, #4]
 804fe9a:	f000 f90d 	bl	80500b8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 804fe9e:	687b      	ldr	r3, [r7, #4]
 804fea0:	791b      	ldrb	r3, [r3, #4]
 804fea2:	4619      	mov	r1, r3
 804fea4:	6878      	ldr	r0, [r7, #4]
 804fea6:	f000 f907 	bl	80500b8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 804feaa:	687b      	ldr	r3, [r7, #4]
 804feac:	2200      	movs	r2, #0
 804feae:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 804feb0:	2302      	movs	r3, #2
 804feb2:	73fb      	strb	r3, [r7, #15]
      break;
 804feb4:	e00a      	b.n	804fecc <USBH_HandleControl+0x484>

    default:
      break;
 804feb6:	bf00      	nop
 804feb8:	e008      	b.n	804fecc <USBH_HandleControl+0x484>
      break;
 804feba:	bf00      	nop
 804febc:	e006      	b.n	804fecc <USBH_HandleControl+0x484>
      break;
 804febe:	bf00      	nop
 804fec0:	e004      	b.n	804fecc <USBH_HandleControl+0x484>
      break;
 804fec2:	bf00      	nop
 804fec4:	e002      	b.n	804fecc <USBH_HandleControl+0x484>
      break;
 804fec6:	bf00      	nop
 804fec8:	e000      	b.n	804fecc <USBH_HandleControl+0x484>
      break;
 804feca:	bf00      	nop
  }

  return status;
 804fecc:	7bfb      	ldrb	r3, [r7, #15]
}
 804fece:	4618      	mov	r0, r3
 804fed0:	3710      	adds	r7, #16
 804fed2:	46bd      	mov	sp, r7
 804fed4:	bd80      	pop	{r7, pc}
 804fed6:	bf00      	nop

0804fed8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 804fed8:	b580      	push	{r7, lr}
 804feda:	b088      	sub	sp, #32
 804fedc:	af04      	add	r7, sp, #16
 804fede:	60f8      	str	r0, [r7, #12]
 804fee0:	60b9      	str	r1, [r7, #8]
 804fee2:	4613      	mov	r3, r2
 804fee4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 804fee6:	79f9      	ldrb	r1, [r7, #7]
 804fee8:	2300      	movs	r3, #0
 804feea:	9303      	str	r3, [sp, #12]
 804feec:	2308      	movs	r3, #8
 804feee:	9302      	str	r3, [sp, #8]
 804fef0:	68bb      	ldr	r3, [r7, #8]
 804fef2:	9301      	str	r3, [sp, #4]
 804fef4:	2300      	movs	r3, #0
 804fef6:	9300      	str	r3, [sp, #0]
 804fef8:	2300      	movs	r3, #0
 804fefa:	2200      	movs	r2, #0
 804fefc:	68f8      	ldr	r0, [r7, #12]
 804fefe:	f009 feba 	bl	8059c76 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 804ff02:	2300      	movs	r3, #0
}
 804ff04:	4618      	mov	r0, r3
 804ff06:	3710      	adds	r7, #16
 804ff08:	46bd      	mov	sp, r7
 804ff0a:	bd80      	pop	{r7, pc}

0804ff0c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 804ff0c:	b580      	push	{r7, lr}
 804ff0e:	b088      	sub	sp, #32
 804ff10:	af04      	add	r7, sp, #16
 804ff12:	60f8      	str	r0, [r7, #12]
 804ff14:	60b9      	str	r1, [r7, #8]
 804ff16:	4611      	mov	r1, r2
 804ff18:	461a      	mov	r2, r3
 804ff1a:	460b      	mov	r3, r1
 804ff1c:	80fb      	strh	r3, [r7, #6]
 804ff1e:	4613      	mov	r3, r2
 804ff20:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 804ff22:	68fb      	ldr	r3, [r7, #12]
 804ff24:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 804ff28:	2b00      	cmp	r3, #0
 804ff2a:	d001      	beq.n	804ff30 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 804ff2c:	2300      	movs	r3, #0
 804ff2e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 804ff30:	7979      	ldrb	r1, [r7, #5]
 804ff32:	7e3b      	ldrb	r3, [r7, #24]
 804ff34:	9303      	str	r3, [sp, #12]
 804ff36:	88fb      	ldrh	r3, [r7, #6]
 804ff38:	9302      	str	r3, [sp, #8]
 804ff3a:	68bb      	ldr	r3, [r7, #8]
 804ff3c:	9301      	str	r3, [sp, #4]
 804ff3e:	2301      	movs	r3, #1
 804ff40:	9300      	str	r3, [sp, #0]
 804ff42:	2300      	movs	r3, #0
 804ff44:	2200      	movs	r2, #0
 804ff46:	68f8      	ldr	r0, [r7, #12]
 804ff48:	f009 fe95 	bl	8059c76 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 804ff4c:	2300      	movs	r3, #0
}
 804ff4e:	4618      	mov	r0, r3
 804ff50:	3710      	adds	r7, #16
 804ff52:	46bd      	mov	sp, r7
 804ff54:	bd80      	pop	{r7, pc}

0804ff56 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 804ff56:	b580      	push	{r7, lr}
 804ff58:	b088      	sub	sp, #32
 804ff5a:	af04      	add	r7, sp, #16
 804ff5c:	60f8      	str	r0, [r7, #12]
 804ff5e:	60b9      	str	r1, [r7, #8]
 804ff60:	4611      	mov	r1, r2
 804ff62:	461a      	mov	r2, r3
 804ff64:	460b      	mov	r3, r1
 804ff66:	80fb      	strh	r3, [r7, #6]
 804ff68:	4613      	mov	r3, r2
 804ff6a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 804ff6c:	7979      	ldrb	r1, [r7, #5]
 804ff6e:	2300      	movs	r3, #0
 804ff70:	9303      	str	r3, [sp, #12]
 804ff72:	88fb      	ldrh	r3, [r7, #6]
 804ff74:	9302      	str	r3, [sp, #8]
 804ff76:	68bb      	ldr	r3, [r7, #8]
 804ff78:	9301      	str	r3, [sp, #4]
 804ff7a:	2301      	movs	r3, #1
 804ff7c:	9300      	str	r3, [sp, #0]
 804ff7e:	2300      	movs	r3, #0
 804ff80:	2201      	movs	r2, #1
 804ff82:	68f8      	ldr	r0, [r7, #12]
 804ff84:	f009 fe77 	bl	8059c76 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 804ff88:	2300      	movs	r3, #0

}
 804ff8a:	4618      	mov	r0, r3
 804ff8c:	3710      	adds	r7, #16
 804ff8e:	46bd      	mov	sp, r7
 804ff90:	bd80      	pop	{r7, pc}

0804ff92 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 804ff92:	b580      	push	{r7, lr}
 804ff94:	b088      	sub	sp, #32
 804ff96:	af04      	add	r7, sp, #16
 804ff98:	60f8      	str	r0, [r7, #12]
 804ff9a:	60b9      	str	r1, [r7, #8]
 804ff9c:	4611      	mov	r1, r2
 804ff9e:	461a      	mov	r2, r3
 804ffa0:	460b      	mov	r3, r1
 804ffa2:	80fb      	strh	r3, [r7, #6]
 804ffa4:	4613      	mov	r3, r2
 804ffa6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 804ffa8:	68fb      	ldr	r3, [r7, #12]
 804ffaa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 804ffae:	2b00      	cmp	r3, #0
 804ffb0:	d001      	beq.n	804ffb6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 804ffb2:	2300      	movs	r3, #0
 804ffb4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 804ffb6:	7979      	ldrb	r1, [r7, #5]
 804ffb8:	7e3b      	ldrb	r3, [r7, #24]
 804ffba:	9303      	str	r3, [sp, #12]
 804ffbc:	88fb      	ldrh	r3, [r7, #6]
 804ffbe:	9302      	str	r3, [sp, #8]
 804ffc0:	68bb      	ldr	r3, [r7, #8]
 804ffc2:	9301      	str	r3, [sp, #4]
 804ffc4:	2301      	movs	r3, #1
 804ffc6:	9300      	str	r3, [sp, #0]
 804ffc8:	2302      	movs	r3, #2
 804ffca:	2200      	movs	r2, #0
 804ffcc:	68f8      	ldr	r0, [r7, #12]
 804ffce:	f009 fe52 	bl	8059c76 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 804ffd2:	2300      	movs	r3, #0
}
 804ffd4:	4618      	mov	r0, r3
 804ffd6:	3710      	adds	r7, #16
 804ffd8:	46bd      	mov	sp, r7
 804ffda:	bd80      	pop	{r7, pc}

0804ffdc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 804ffdc:	b580      	push	{r7, lr}
 804ffde:	b088      	sub	sp, #32
 804ffe0:	af04      	add	r7, sp, #16
 804ffe2:	60f8      	str	r0, [r7, #12]
 804ffe4:	60b9      	str	r1, [r7, #8]
 804ffe6:	4611      	mov	r1, r2
 804ffe8:	461a      	mov	r2, r3
 804ffea:	460b      	mov	r3, r1
 804ffec:	80fb      	strh	r3, [r7, #6]
 804ffee:	4613      	mov	r3, r2
 804fff0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 804fff2:	7979      	ldrb	r1, [r7, #5]
 804fff4:	2300      	movs	r3, #0
 804fff6:	9303      	str	r3, [sp, #12]
 804fff8:	88fb      	ldrh	r3, [r7, #6]
 804fffa:	9302      	str	r3, [sp, #8]
 804fffc:	68bb      	ldr	r3, [r7, #8]
 804fffe:	9301      	str	r3, [sp, #4]
 8050000:	2301      	movs	r3, #1
 8050002:	9300      	str	r3, [sp, #0]
 8050004:	2302      	movs	r3, #2
 8050006:	2201      	movs	r2, #1
 8050008:	68f8      	ldr	r0, [r7, #12]
 805000a:	f009 fe34 	bl	8059c76 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 805000e:	2300      	movs	r3, #0
}
 8050010:	4618      	mov	r0, r3
 8050012:	3710      	adds	r7, #16
 8050014:	46bd      	mov	sp, r7
 8050016:	bd80      	pop	{r7, pc}

08050018 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8050018:	b580      	push	{r7, lr}
 805001a:	b086      	sub	sp, #24
 805001c:	af04      	add	r7, sp, #16
 805001e:	6078      	str	r0, [r7, #4]
 8050020:	4608      	mov	r0, r1
 8050022:	4611      	mov	r1, r2
 8050024:	461a      	mov	r2, r3
 8050026:	4603      	mov	r3, r0
 8050028:	70fb      	strb	r3, [r7, #3]
 805002a:	460b      	mov	r3, r1
 805002c:	70bb      	strb	r3, [r7, #2]
 805002e:	4613      	mov	r3, r2
 8050030:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8050032:	7878      	ldrb	r0, [r7, #1]
 8050034:	78ba      	ldrb	r2, [r7, #2]
 8050036:	78f9      	ldrb	r1, [r7, #3]
 8050038:	8b3b      	ldrh	r3, [r7, #24]
 805003a:	9302      	str	r3, [sp, #8]
 805003c:	7d3b      	ldrb	r3, [r7, #20]
 805003e:	9301      	str	r3, [sp, #4]
 8050040:	7c3b      	ldrb	r3, [r7, #16]
 8050042:	9300      	str	r3, [sp, #0]
 8050044:	4603      	mov	r3, r0
 8050046:	6878      	ldr	r0, [r7, #4]
 8050048:	f009 fdc7 	bl	8059bda <USBH_LL_OpenPipe>

  return USBH_OK;
 805004c:	2300      	movs	r3, #0
}
 805004e:	4618      	mov	r0, r3
 8050050:	3708      	adds	r7, #8
 8050052:	46bd      	mov	sp, r7
 8050054:	bd80      	pop	{r7, pc}

08050056 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8050056:	b580      	push	{r7, lr}
 8050058:	b082      	sub	sp, #8
 805005a:	af00      	add	r7, sp, #0
 805005c:	6078      	str	r0, [r7, #4]
 805005e:	460b      	mov	r3, r1
 8050060:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8050062:	78fb      	ldrb	r3, [r7, #3]
 8050064:	4619      	mov	r1, r3
 8050066:	6878      	ldr	r0, [r7, #4]
 8050068:	f009 fde6 	bl	8059c38 <USBH_LL_ClosePipe>

  return USBH_OK;
 805006c:	2300      	movs	r3, #0
}
 805006e:	4618      	mov	r0, r3
 8050070:	3708      	adds	r7, #8
 8050072:	46bd      	mov	sp, r7
 8050074:	bd80      	pop	{r7, pc}

08050076 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8050076:	b580      	push	{r7, lr}
 8050078:	b084      	sub	sp, #16
 805007a:	af00      	add	r7, sp, #0
 805007c:	6078      	str	r0, [r7, #4]
 805007e:	460b      	mov	r3, r1
 8050080:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8050082:	6878      	ldr	r0, [r7, #4]
 8050084:	f000 f836 	bl	80500f4 <USBH_GetFreePipe>
 8050088:	4603      	mov	r3, r0
 805008a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 805008c:	89fb      	ldrh	r3, [r7, #14]
 805008e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8050092:	4293      	cmp	r3, r2
 8050094:	d00a      	beq.n	80500ac <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8050096:	78fa      	ldrb	r2, [r7, #3]
 8050098:	89fb      	ldrh	r3, [r7, #14]
 805009a:	f003 030f 	and.w	r3, r3, #15
 805009e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80500a2:	6879      	ldr	r1, [r7, #4]
 80500a4:	33e0      	adds	r3, #224	; 0xe0
 80500a6:	009b      	lsls	r3, r3, #2
 80500a8:	440b      	add	r3, r1
 80500aa:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80500ac:	89fb      	ldrh	r3, [r7, #14]
 80500ae:	b2db      	uxtb	r3, r3
}
 80500b0:	4618      	mov	r0, r3
 80500b2:	3710      	adds	r7, #16
 80500b4:	46bd      	mov	sp, r7
 80500b6:	bd80      	pop	{r7, pc}

080500b8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80500b8:	b480      	push	{r7}
 80500ba:	b083      	sub	sp, #12
 80500bc:	af00      	add	r7, sp, #0
 80500be:	6078      	str	r0, [r7, #4]
 80500c0:	460b      	mov	r3, r1
 80500c2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80500c4:	78fb      	ldrb	r3, [r7, #3]
 80500c6:	2b0f      	cmp	r3, #15
 80500c8:	d80d      	bhi.n	80500e6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80500ca:	78fb      	ldrb	r3, [r7, #3]
 80500cc:	687a      	ldr	r2, [r7, #4]
 80500ce:	33e0      	adds	r3, #224	; 0xe0
 80500d0:	009b      	lsls	r3, r3, #2
 80500d2:	4413      	add	r3, r2
 80500d4:	685a      	ldr	r2, [r3, #4]
 80500d6:	78fb      	ldrb	r3, [r7, #3]
 80500d8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80500dc:	6879      	ldr	r1, [r7, #4]
 80500de:	33e0      	adds	r3, #224	; 0xe0
 80500e0:	009b      	lsls	r3, r3, #2
 80500e2:	440b      	add	r3, r1
 80500e4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80500e6:	2300      	movs	r3, #0
}
 80500e8:	4618      	mov	r0, r3
 80500ea:	370c      	adds	r7, #12
 80500ec:	46bd      	mov	sp, r7
 80500ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80500f2:	4770      	bx	lr

080500f4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80500f4:	b480      	push	{r7}
 80500f6:	b085      	sub	sp, #20
 80500f8:	af00      	add	r7, sp, #0
 80500fa:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80500fc:	2300      	movs	r3, #0
 80500fe:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8050100:	2300      	movs	r3, #0
 8050102:	73fb      	strb	r3, [r7, #15]
 8050104:	e00f      	b.n	8050126 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8050106:	7bfb      	ldrb	r3, [r7, #15]
 8050108:	687a      	ldr	r2, [r7, #4]
 805010a:	33e0      	adds	r3, #224	; 0xe0
 805010c:	009b      	lsls	r3, r3, #2
 805010e:	4413      	add	r3, r2
 8050110:	685b      	ldr	r3, [r3, #4]
 8050112:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8050116:	2b00      	cmp	r3, #0
 8050118:	d102      	bne.n	8050120 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 805011a:	7bfb      	ldrb	r3, [r7, #15]
 805011c:	b29b      	uxth	r3, r3
 805011e:	e007      	b.n	8050130 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8050120:	7bfb      	ldrb	r3, [r7, #15]
 8050122:	3301      	adds	r3, #1
 8050124:	73fb      	strb	r3, [r7, #15]
 8050126:	7bfb      	ldrb	r3, [r7, #15]
 8050128:	2b0f      	cmp	r3, #15
 805012a:	d9ec      	bls.n	8050106 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 805012c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8050130:	4618      	mov	r0, r3
 8050132:	3714      	adds	r7, #20
 8050134:	46bd      	mov	sp, r7
 8050136:	f85d 7b04 	ldr.w	r7, [sp], #4
 805013a:	4770      	bx	lr

0805013c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 805013c:	b580      	push	{r7, lr}
 805013e:	b084      	sub	sp, #16
 8050140:	af00      	add	r7, sp, #0
 8050142:	4603      	mov	r3, r0
 8050144:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8050146:	79fb      	ldrb	r3, [r7, #7]
 8050148:	4a08      	ldr	r2, [pc, #32]	; (805016c <disk_status+0x30>)
 805014a:	009b      	lsls	r3, r3, #2
 805014c:	4413      	add	r3, r2
 805014e:	685b      	ldr	r3, [r3, #4]
 8050150:	685b      	ldr	r3, [r3, #4]
 8050152:	79fa      	ldrb	r2, [r7, #7]
 8050154:	4905      	ldr	r1, [pc, #20]	; (805016c <disk_status+0x30>)
 8050156:	440a      	add	r2, r1
 8050158:	7a12      	ldrb	r2, [r2, #8]
 805015a:	4610      	mov	r0, r2
 805015c:	4798      	blx	r3
 805015e:	4603      	mov	r3, r0
 8050160:	73fb      	strb	r3, [r7, #15]
  return stat;
 8050162:	7bfb      	ldrb	r3, [r7, #15]
}
 8050164:	4618      	mov	r0, r3
 8050166:	3710      	adds	r7, #16
 8050168:	46bd      	mov	sp, r7
 805016a:	bd80      	pop	{r7, pc}
 805016c:	24002c28 	.word	0x24002c28

08050170 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8050170:	b580      	push	{r7, lr}
 8050172:	b084      	sub	sp, #16
 8050174:	af00      	add	r7, sp, #0
 8050176:	4603      	mov	r3, r0
 8050178:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 805017a:	2300      	movs	r3, #0
 805017c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 805017e:	79fb      	ldrb	r3, [r7, #7]
 8050180:	4a0d      	ldr	r2, [pc, #52]	; (80501b8 <disk_initialize+0x48>)
 8050182:	5cd3      	ldrb	r3, [r2, r3]
 8050184:	2b00      	cmp	r3, #0
 8050186:	d111      	bne.n	80501ac <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8050188:	79fb      	ldrb	r3, [r7, #7]
 805018a:	4a0b      	ldr	r2, [pc, #44]	; (80501b8 <disk_initialize+0x48>)
 805018c:	2101      	movs	r1, #1
 805018e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8050190:	79fb      	ldrb	r3, [r7, #7]
 8050192:	4a09      	ldr	r2, [pc, #36]	; (80501b8 <disk_initialize+0x48>)
 8050194:	009b      	lsls	r3, r3, #2
 8050196:	4413      	add	r3, r2
 8050198:	685b      	ldr	r3, [r3, #4]
 805019a:	681b      	ldr	r3, [r3, #0]
 805019c:	79fa      	ldrb	r2, [r7, #7]
 805019e:	4906      	ldr	r1, [pc, #24]	; (80501b8 <disk_initialize+0x48>)
 80501a0:	440a      	add	r2, r1
 80501a2:	7a12      	ldrb	r2, [r2, #8]
 80501a4:	4610      	mov	r0, r2
 80501a6:	4798      	blx	r3
 80501a8:	4603      	mov	r3, r0
 80501aa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80501ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80501ae:	4618      	mov	r0, r3
 80501b0:	3710      	adds	r7, #16
 80501b2:	46bd      	mov	sp, r7
 80501b4:	bd80      	pop	{r7, pc}
 80501b6:	bf00      	nop
 80501b8:	24002c28 	.word	0x24002c28

080501bc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80501bc:	b590      	push	{r4, r7, lr}
 80501be:	b087      	sub	sp, #28
 80501c0:	af00      	add	r7, sp, #0
 80501c2:	60b9      	str	r1, [r7, #8]
 80501c4:	607a      	str	r2, [r7, #4]
 80501c6:	603b      	str	r3, [r7, #0]
 80501c8:	4603      	mov	r3, r0
 80501ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80501cc:	7bfb      	ldrb	r3, [r7, #15]
 80501ce:	4a0a      	ldr	r2, [pc, #40]	; (80501f8 <disk_read+0x3c>)
 80501d0:	009b      	lsls	r3, r3, #2
 80501d2:	4413      	add	r3, r2
 80501d4:	685b      	ldr	r3, [r3, #4]
 80501d6:	689c      	ldr	r4, [r3, #8]
 80501d8:	7bfb      	ldrb	r3, [r7, #15]
 80501da:	4a07      	ldr	r2, [pc, #28]	; (80501f8 <disk_read+0x3c>)
 80501dc:	4413      	add	r3, r2
 80501de:	7a18      	ldrb	r0, [r3, #8]
 80501e0:	683b      	ldr	r3, [r7, #0]
 80501e2:	687a      	ldr	r2, [r7, #4]
 80501e4:	68b9      	ldr	r1, [r7, #8]
 80501e6:	47a0      	blx	r4
 80501e8:	4603      	mov	r3, r0
 80501ea:	75fb      	strb	r3, [r7, #23]
  return res;
 80501ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80501ee:	4618      	mov	r0, r3
 80501f0:	371c      	adds	r7, #28
 80501f2:	46bd      	mov	sp, r7
 80501f4:	bd90      	pop	{r4, r7, pc}
 80501f6:	bf00      	nop
 80501f8:	24002c28 	.word	0x24002c28

080501fc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80501fc:	b590      	push	{r4, r7, lr}
 80501fe:	b087      	sub	sp, #28
 8050200:	af00      	add	r7, sp, #0
 8050202:	60b9      	str	r1, [r7, #8]
 8050204:	607a      	str	r2, [r7, #4]
 8050206:	603b      	str	r3, [r7, #0]
 8050208:	4603      	mov	r3, r0
 805020a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 805020c:	7bfb      	ldrb	r3, [r7, #15]
 805020e:	4a0a      	ldr	r2, [pc, #40]	; (8050238 <disk_write+0x3c>)
 8050210:	009b      	lsls	r3, r3, #2
 8050212:	4413      	add	r3, r2
 8050214:	685b      	ldr	r3, [r3, #4]
 8050216:	68dc      	ldr	r4, [r3, #12]
 8050218:	7bfb      	ldrb	r3, [r7, #15]
 805021a:	4a07      	ldr	r2, [pc, #28]	; (8050238 <disk_write+0x3c>)
 805021c:	4413      	add	r3, r2
 805021e:	7a18      	ldrb	r0, [r3, #8]
 8050220:	683b      	ldr	r3, [r7, #0]
 8050222:	687a      	ldr	r2, [r7, #4]
 8050224:	68b9      	ldr	r1, [r7, #8]
 8050226:	47a0      	blx	r4
 8050228:	4603      	mov	r3, r0
 805022a:	75fb      	strb	r3, [r7, #23]
  return res;
 805022c:	7dfb      	ldrb	r3, [r7, #23]
}
 805022e:	4618      	mov	r0, r3
 8050230:	371c      	adds	r7, #28
 8050232:	46bd      	mov	sp, r7
 8050234:	bd90      	pop	{r4, r7, pc}
 8050236:	bf00      	nop
 8050238:	24002c28 	.word	0x24002c28

0805023c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 805023c:	b580      	push	{r7, lr}
 805023e:	b084      	sub	sp, #16
 8050240:	af00      	add	r7, sp, #0
 8050242:	4603      	mov	r3, r0
 8050244:	603a      	str	r2, [r7, #0]
 8050246:	71fb      	strb	r3, [r7, #7]
 8050248:	460b      	mov	r3, r1
 805024a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 805024c:	79fb      	ldrb	r3, [r7, #7]
 805024e:	4a09      	ldr	r2, [pc, #36]	; (8050274 <disk_ioctl+0x38>)
 8050250:	009b      	lsls	r3, r3, #2
 8050252:	4413      	add	r3, r2
 8050254:	685b      	ldr	r3, [r3, #4]
 8050256:	691b      	ldr	r3, [r3, #16]
 8050258:	79fa      	ldrb	r2, [r7, #7]
 805025a:	4906      	ldr	r1, [pc, #24]	; (8050274 <disk_ioctl+0x38>)
 805025c:	440a      	add	r2, r1
 805025e:	7a10      	ldrb	r0, [r2, #8]
 8050260:	79b9      	ldrb	r1, [r7, #6]
 8050262:	683a      	ldr	r2, [r7, #0]
 8050264:	4798      	blx	r3
 8050266:	4603      	mov	r3, r0
 8050268:	73fb      	strb	r3, [r7, #15]
  return res;
 805026a:	7bfb      	ldrb	r3, [r7, #15]
}
 805026c:	4618      	mov	r0, r3
 805026e:	3710      	adds	r7, #16
 8050270:	46bd      	mov	sp, r7
 8050272:	bd80      	pop	{r7, pc}
 8050274:	24002c28 	.word	0x24002c28

08050278 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8050278:	b480      	push	{r7}
 805027a:	b085      	sub	sp, #20
 805027c:	af00      	add	r7, sp, #0
 805027e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8050280:	687b      	ldr	r3, [r7, #4]
 8050282:	3301      	adds	r3, #1
 8050284:	781b      	ldrb	r3, [r3, #0]
 8050286:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8050288:	89fb      	ldrh	r3, [r7, #14]
 805028a:	021b      	lsls	r3, r3, #8
 805028c:	b21a      	sxth	r2, r3
 805028e:	687b      	ldr	r3, [r7, #4]
 8050290:	781b      	ldrb	r3, [r3, #0]
 8050292:	b21b      	sxth	r3, r3
 8050294:	4313      	orrs	r3, r2
 8050296:	b21b      	sxth	r3, r3
 8050298:	81fb      	strh	r3, [r7, #14]
	return rv;
 805029a:	89fb      	ldrh	r3, [r7, #14]
}
 805029c:	4618      	mov	r0, r3
 805029e:	3714      	adds	r7, #20
 80502a0:	46bd      	mov	sp, r7
 80502a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80502a6:	4770      	bx	lr

080502a8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80502a8:	b480      	push	{r7}
 80502aa:	b085      	sub	sp, #20
 80502ac:	af00      	add	r7, sp, #0
 80502ae:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80502b0:	687b      	ldr	r3, [r7, #4]
 80502b2:	3303      	adds	r3, #3
 80502b4:	781b      	ldrb	r3, [r3, #0]
 80502b6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80502b8:	68fb      	ldr	r3, [r7, #12]
 80502ba:	021b      	lsls	r3, r3, #8
 80502bc:	687a      	ldr	r2, [r7, #4]
 80502be:	3202      	adds	r2, #2
 80502c0:	7812      	ldrb	r2, [r2, #0]
 80502c2:	4313      	orrs	r3, r2
 80502c4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80502c6:	68fb      	ldr	r3, [r7, #12]
 80502c8:	021b      	lsls	r3, r3, #8
 80502ca:	687a      	ldr	r2, [r7, #4]
 80502cc:	3201      	adds	r2, #1
 80502ce:	7812      	ldrb	r2, [r2, #0]
 80502d0:	4313      	orrs	r3, r2
 80502d2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80502d4:	68fb      	ldr	r3, [r7, #12]
 80502d6:	021b      	lsls	r3, r3, #8
 80502d8:	687a      	ldr	r2, [r7, #4]
 80502da:	7812      	ldrb	r2, [r2, #0]
 80502dc:	4313      	orrs	r3, r2
 80502de:	60fb      	str	r3, [r7, #12]
	return rv;
 80502e0:	68fb      	ldr	r3, [r7, #12]
}
 80502e2:	4618      	mov	r0, r3
 80502e4:	3714      	adds	r7, #20
 80502e6:	46bd      	mov	sp, r7
 80502e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80502ec:	4770      	bx	lr

080502ee <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 80502ee:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80502f2:	b09d      	sub	sp, #116	; 0x74
 80502f4:	af00      	add	r7, sp, #0
 80502f6:	6678      	str	r0, [r7, #100]	; 0x64
	QWORD rv;

	rv = ptr[7];
 80502f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80502fa:	3307      	adds	r3, #7
 80502fc:	781b      	ldrb	r3, [r3, #0]
 80502fe:	b2db      	uxtb	r3, r3
 8050300:	2200      	movs	r2, #0
 8050302:	469a      	mov	sl, r3
 8050304:	4693      	mov	fp, r2
 8050306:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[6];
 805030a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 805030e:	f04f 0000 	mov.w	r0, #0
 8050312:	f04f 0100 	mov.w	r1, #0
 8050316:	0219      	lsls	r1, r3, #8
 8050318:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 805031c:	0210      	lsls	r0, r2, #8
 805031e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8050320:	3306      	adds	r3, #6
 8050322:	781b      	ldrb	r3, [r3, #0]
 8050324:	b2db      	uxtb	r3, r3
 8050326:	2200      	movs	r2, #0
 8050328:	461c      	mov	r4, r3
 805032a:	4615      	mov	r5, r2
 805032c:	ea40 0804 	orr.w	r8, r0, r4
 8050330:	ea41 0905 	orr.w	r9, r1, r5
 8050334:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[5];
 8050338:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 805033c:	f04f 0000 	mov.w	r0, #0
 8050340:	f04f 0100 	mov.w	r1, #0
 8050344:	0219      	lsls	r1, r3, #8
 8050346:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 805034a:	0210      	lsls	r0, r2, #8
 805034c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 805034e:	3305      	adds	r3, #5
 8050350:	781b      	ldrb	r3, [r3, #0]
 8050352:	b2db      	uxtb	r3, r3
 8050354:	2200      	movs	r2, #0
 8050356:	65bb      	str	r3, [r7, #88]	; 0x58
 8050358:	65fa      	str	r2, [r7, #92]	; 0x5c
 805035a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 805035e:	4623      	mov	r3, r4
 8050360:	4303      	orrs	r3, r0
 8050362:	62bb      	str	r3, [r7, #40]	; 0x28
 8050364:	462b      	mov	r3, r5
 8050366:	430b      	orrs	r3, r1
 8050368:	62fb      	str	r3, [r7, #44]	; 0x2c
 805036a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 805036e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[4];
 8050372:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8050376:	f04f 0000 	mov.w	r0, #0
 805037a:	f04f 0100 	mov.w	r1, #0
 805037e:	0219      	lsls	r1, r3, #8
 8050380:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8050384:	0210      	lsls	r0, r2, #8
 8050386:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8050388:	3304      	adds	r3, #4
 805038a:	781b      	ldrb	r3, [r3, #0]
 805038c:	b2db      	uxtb	r3, r3
 805038e:	2200      	movs	r2, #0
 8050390:	653b      	str	r3, [r7, #80]	; 0x50
 8050392:	657a      	str	r2, [r7, #84]	; 0x54
 8050394:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8050398:	4623      	mov	r3, r4
 805039a:	4303      	orrs	r3, r0
 805039c:	623b      	str	r3, [r7, #32]
 805039e:	462b      	mov	r3, r5
 80503a0:	430b      	orrs	r3, r1
 80503a2:	627b      	str	r3, [r7, #36]	; 0x24
 80503a4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80503a8:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[3];
 80503ac:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80503b0:	f04f 0000 	mov.w	r0, #0
 80503b4:	f04f 0100 	mov.w	r1, #0
 80503b8:	0219      	lsls	r1, r3, #8
 80503ba:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80503be:	0210      	lsls	r0, r2, #8
 80503c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80503c2:	3303      	adds	r3, #3
 80503c4:	781b      	ldrb	r3, [r3, #0]
 80503c6:	b2db      	uxtb	r3, r3
 80503c8:	2200      	movs	r2, #0
 80503ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80503cc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80503ce:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80503d2:	4623      	mov	r3, r4
 80503d4:	4303      	orrs	r3, r0
 80503d6:	61bb      	str	r3, [r7, #24]
 80503d8:	462b      	mov	r3, r5
 80503da:	430b      	orrs	r3, r1
 80503dc:	61fb      	str	r3, [r7, #28]
 80503de:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80503e2:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[2];
 80503e6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80503ea:	f04f 0000 	mov.w	r0, #0
 80503ee:	f04f 0100 	mov.w	r1, #0
 80503f2:	0219      	lsls	r1, r3, #8
 80503f4:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80503f8:	0210      	lsls	r0, r2, #8
 80503fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80503fc:	3302      	adds	r3, #2
 80503fe:	781b      	ldrb	r3, [r3, #0]
 8050400:	b2db      	uxtb	r3, r3
 8050402:	2200      	movs	r2, #0
 8050404:	643b      	str	r3, [r7, #64]	; 0x40
 8050406:	647a      	str	r2, [r7, #68]	; 0x44
 8050408:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 805040c:	4623      	mov	r3, r4
 805040e:	4303      	orrs	r3, r0
 8050410:	613b      	str	r3, [r7, #16]
 8050412:	462b      	mov	r3, r5
 8050414:	430b      	orrs	r3, r1
 8050416:	617b      	str	r3, [r7, #20]
 8050418:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 805041c:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[1];
 8050420:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8050424:	f04f 0200 	mov.w	r2, #0
 8050428:	f04f 0300 	mov.w	r3, #0
 805042c:	020b      	lsls	r3, r1, #8
 805042e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8050432:	0202      	lsls	r2, r0, #8
 8050434:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8050436:	3101      	adds	r1, #1
 8050438:	7809      	ldrb	r1, [r1, #0]
 805043a:	b2c9      	uxtb	r1, r1
 805043c:	2000      	movs	r0, #0
 805043e:	63b9      	str	r1, [r7, #56]	; 0x38
 8050440:	63f8      	str	r0, [r7, #60]	; 0x3c
 8050442:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8050446:	4621      	mov	r1, r4
 8050448:	4311      	orrs	r1, r2
 805044a:	60b9      	str	r1, [r7, #8]
 805044c:	4629      	mov	r1, r5
 805044e:	4319      	orrs	r1, r3
 8050450:	60f9      	str	r1, [r7, #12]
 8050452:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8050456:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[0];
 805045a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 805045e:	f04f 0200 	mov.w	r2, #0
 8050462:	f04f 0300 	mov.w	r3, #0
 8050466:	020b      	lsls	r3, r1, #8
 8050468:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 805046c:	0202      	lsls	r2, r0, #8
 805046e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8050470:	7809      	ldrb	r1, [r1, #0]
 8050472:	b2c9      	uxtb	r1, r1
 8050474:	2000      	movs	r0, #0
 8050476:	6339      	str	r1, [r7, #48]	; 0x30
 8050478:	6378      	str	r0, [r7, #52]	; 0x34
 805047a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 805047e:	4621      	mov	r1, r4
 8050480:	4311      	orrs	r1, r2
 8050482:	6039      	str	r1, [r7, #0]
 8050484:	4629      	mov	r1, r5
 8050486:	4319      	orrs	r1, r3
 8050488:	6079      	str	r1, [r7, #4]
 805048a:	e9d7 3400 	ldrd	r3, r4, [r7]
 805048e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	return rv;
 8050492:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
}
 8050496:	4610      	mov	r0, r2
 8050498:	4619      	mov	r1, r3
 805049a:	3774      	adds	r7, #116	; 0x74
 805049c:	46bd      	mov	sp, r7
 805049e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80504a2:	4770      	bx	lr

080504a4 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80504a4:	b480      	push	{r7}
 80504a6:	b083      	sub	sp, #12
 80504a8:	af00      	add	r7, sp, #0
 80504aa:	6078      	str	r0, [r7, #4]
 80504ac:	460b      	mov	r3, r1
 80504ae:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80504b0:	687b      	ldr	r3, [r7, #4]
 80504b2:	1c5a      	adds	r2, r3, #1
 80504b4:	607a      	str	r2, [r7, #4]
 80504b6:	887a      	ldrh	r2, [r7, #2]
 80504b8:	b2d2      	uxtb	r2, r2
 80504ba:	701a      	strb	r2, [r3, #0]
 80504bc:	887b      	ldrh	r3, [r7, #2]
 80504be:	0a1b      	lsrs	r3, r3, #8
 80504c0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80504c2:	687b      	ldr	r3, [r7, #4]
 80504c4:	1c5a      	adds	r2, r3, #1
 80504c6:	607a      	str	r2, [r7, #4]
 80504c8:	887a      	ldrh	r2, [r7, #2]
 80504ca:	b2d2      	uxtb	r2, r2
 80504cc:	701a      	strb	r2, [r3, #0]
}
 80504ce:	bf00      	nop
 80504d0:	370c      	adds	r7, #12
 80504d2:	46bd      	mov	sp, r7
 80504d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80504d8:	4770      	bx	lr

080504da <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80504da:	b480      	push	{r7}
 80504dc:	b083      	sub	sp, #12
 80504de:	af00      	add	r7, sp, #0
 80504e0:	6078      	str	r0, [r7, #4]
 80504e2:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80504e4:	687b      	ldr	r3, [r7, #4]
 80504e6:	1c5a      	adds	r2, r3, #1
 80504e8:	607a      	str	r2, [r7, #4]
 80504ea:	683a      	ldr	r2, [r7, #0]
 80504ec:	b2d2      	uxtb	r2, r2
 80504ee:	701a      	strb	r2, [r3, #0]
 80504f0:	683b      	ldr	r3, [r7, #0]
 80504f2:	0a1b      	lsrs	r3, r3, #8
 80504f4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80504f6:	687b      	ldr	r3, [r7, #4]
 80504f8:	1c5a      	adds	r2, r3, #1
 80504fa:	607a      	str	r2, [r7, #4]
 80504fc:	683a      	ldr	r2, [r7, #0]
 80504fe:	b2d2      	uxtb	r2, r2
 8050500:	701a      	strb	r2, [r3, #0]
 8050502:	683b      	ldr	r3, [r7, #0]
 8050504:	0a1b      	lsrs	r3, r3, #8
 8050506:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8050508:	687b      	ldr	r3, [r7, #4]
 805050a:	1c5a      	adds	r2, r3, #1
 805050c:	607a      	str	r2, [r7, #4]
 805050e:	683a      	ldr	r2, [r7, #0]
 8050510:	b2d2      	uxtb	r2, r2
 8050512:	701a      	strb	r2, [r3, #0]
 8050514:	683b      	ldr	r3, [r7, #0]
 8050516:	0a1b      	lsrs	r3, r3, #8
 8050518:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 805051a:	687b      	ldr	r3, [r7, #4]
 805051c:	1c5a      	adds	r2, r3, #1
 805051e:	607a      	str	r2, [r7, #4]
 8050520:	683a      	ldr	r2, [r7, #0]
 8050522:	b2d2      	uxtb	r2, r2
 8050524:	701a      	strb	r2, [r3, #0]
}
 8050526:	bf00      	nop
 8050528:	370c      	adds	r7, #12
 805052a:	46bd      	mov	sp, r7
 805052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8050530:	4770      	bx	lr

08050532 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 8050532:	b480      	push	{r7}
 8050534:	b085      	sub	sp, #20
 8050536:	af00      	add	r7, sp, #0
 8050538:	60f8      	str	r0, [r7, #12]
 805053a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 805053e:	68fb      	ldr	r3, [r7, #12]
 8050540:	1c5a      	adds	r2, r3, #1
 8050542:	60fa      	str	r2, [r7, #12]
 8050544:	783a      	ldrb	r2, [r7, #0]
 8050546:	701a      	strb	r2, [r3, #0]
 8050548:	e9d7 0100 	ldrd	r0, r1, [r7]
 805054c:	f04f 0200 	mov.w	r2, #0
 8050550:	f04f 0300 	mov.w	r3, #0
 8050554:	0a02      	lsrs	r2, r0, #8
 8050556:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 805055a:	0a0b      	lsrs	r3, r1, #8
 805055c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8050560:	68fb      	ldr	r3, [r7, #12]
 8050562:	1c5a      	adds	r2, r3, #1
 8050564:	60fa      	str	r2, [r7, #12]
 8050566:	783a      	ldrb	r2, [r7, #0]
 8050568:	701a      	strb	r2, [r3, #0]
 805056a:	e9d7 0100 	ldrd	r0, r1, [r7]
 805056e:	f04f 0200 	mov.w	r2, #0
 8050572:	f04f 0300 	mov.w	r3, #0
 8050576:	0a02      	lsrs	r2, r0, #8
 8050578:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 805057c:	0a0b      	lsrs	r3, r1, #8
 805057e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8050582:	68fb      	ldr	r3, [r7, #12]
 8050584:	1c5a      	adds	r2, r3, #1
 8050586:	60fa      	str	r2, [r7, #12]
 8050588:	783a      	ldrb	r2, [r7, #0]
 805058a:	701a      	strb	r2, [r3, #0]
 805058c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8050590:	f04f 0200 	mov.w	r2, #0
 8050594:	f04f 0300 	mov.w	r3, #0
 8050598:	0a02      	lsrs	r2, r0, #8
 805059a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 805059e:	0a0b      	lsrs	r3, r1, #8
 80505a0:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80505a4:	68fb      	ldr	r3, [r7, #12]
 80505a6:	1c5a      	adds	r2, r3, #1
 80505a8:	60fa      	str	r2, [r7, #12]
 80505aa:	783a      	ldrb	r2, [r7, #0]
 80505ac:	701a      	strb	r2, [r3, #0]
 80505ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80505b2:	f04f 0200 	mov.w	r2, #0
 80505b6:	f04f 0300 	mov.w	r3, #0
 80505ba:	0a02      	lsrs	r2, r0, #8
 80505bc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80505c0:	0a0b      	lsrs	r3, r1, #8
 80505c2:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80505c6:	68fb      	ldr	r3, [r7, #12]
 80505c8:	1c5a      	adds	r2, r3, #1
 80505ca:	60fa      	str	r2, [r7, #12]
 80505cc:	783a      	ldrb	r2, [r7, #0]
 80505ce:	701a      	strb	r2, [r3, #0]
 80505d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80505d4:	f04f 0200 	mov.w	r2, #0
 80505d8:	f04f 0300 	mov.w	r3, #0
 80505dc:	0a02      	lsrs	r2, r0, #8
 80505de:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80505e2:	0a0b      	lsrs	r3, r1, #8
 80505e4:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80505e8:	68fb      	ldr	r3, [r7, #12]
 80505ea:	1c5a      	adds	r2, r3, #1
 80505ec:	60fa      	str	r2, [r7, #12]
 80505ee:	783a      	ldrb	r2, [r7, #0]
 80505f0:	701a      	strb	r2, [r3, #0]
 80505f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80505f6:	f04f 0200 	mov.w	r2, #0
 80505fa:	f04f 0300 	mov.w	r3, #0
 80505fe:	0a02      	lsrs	r2, r0, #8
 8050600:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8050604:	0a0b      	lsrs	r3, r1, #8
 8050606:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 805060a:	68fb      	ldr	r3, [r7, #12]
 805060c:	1c5a      	adds	r2, r3, #1
 805060e:	60fa      	str	r2, [r7, #12]
 8050610:	783a      	ldrb	r2, [r7, #0]
 8050612:	701a      	strb	r2, [r3, #0]
 8050614:	e9d7 0100 	ldrd	r0, r1, [r7]
 8050618:	f04f 0200 	mov.w	r2, #0
 805061c:	f04f 0300 	mov.w	r3, #0
 8050620:	0a02      	lsrs	r2, r0, #8
 8050622:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8050626:	0a0b      	lsrs	r3, r1, #8
 8050628:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 805062c:	68fb      	ldr	r3, [r7, #12]
 805062e:	1c5a      	adds	r2, r3, #1
 8050630:	60fa      	str	r2, [r7, #12]
 8050632:	783a      	ldrb	r2, [r7, #0]
 8050634:	701a      	strb	r2, [r3, #0]
}
 8050636:	bf00      	nop
 8050638:	3714      	adds	r7, #20
 805063a:	46bd      	mov	sp, r7
 805063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8050640:	4770      	bx	lr

08050642 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8050642:	b480      	push	{r7}
 8050644:	b087      	sub	sp, #28
 8050646:	af00      	add	r7, sp, #0
 8050648:	60f8      	str	r0, [r7, #12]
 805064a:	60b9      	str	r1, [r7, #8]
 805064c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 805064e:	68fb      	ldr	r3, [r7, #12]
 8050650:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8050652:	68bb      	ldr	r3, [r7, #8]
 8050654:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8050656:	687b      	ldr	r3, [r7, #4]
 8050658:	2b00      	cmp	r3, #0
 805065a:	d00d      	beq.n	8050678 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 805065c:	693a      	ldr	r2, [r7, #16]
 805065e:	1c53      	adds	r3, r2, #1
 8050660:	613b      	str	r3, [r7, #16]
 8050662:	697b      	ldr	r3, [r7, #20]
 8050664:	1c59      	adds	r1, r3, #1
 8050666:	6179      	str	r1, [r7, #20]
 8050668:	7812      	ldrb	r2, [r2, #0]
 805066a:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 805066c:	687b      	ldr	r3, [r7, #4]
 805066e:	3b01      	subs	r3, #1
 8050670:	607b      	str	r3, [r7, #4]
 8050672:	687b      	ldr	r3, [r7, #4]
 8050674:	2b00      	cmp	r3, #0
 8050676:	d1f1      	bne.n	805065c <mem_cpy+0x1a>
	}
}
 8050678:	bf00      	nop
 805067a:	371c      	adds	r7, #28
 805067c:	46bd      	mov	sp, r7
 805067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8050682:	4770      	bx	lr

08050684 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8050684:	b480      	push	{r7}
 8050686:	b087      	sub	sp, #28
 8050688:	af00      	add	r7, sp, #0
 805068a:	60f8      	str	r0, [r7, #12]
 805068c:	60b9      	str	r1, [r7, #8]
 805068e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8050690:	68fb      	ldr	r3, [r7, #12]
 8050692:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8050694:	697b      	ldr	r3, [r7, #20]
 8050696:	1c5a      	adds	r2, r3, #1
 8050698:	617a      	str	r2, [r7, #20]
 805069a:	68ba      	ldr	r2, [r7, #8]
 805069c:	b2d2      	uxtb	r2, r2
 805069e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80506a0:	687b      	ldr	r3, [r7, #4]
 80506a2:	3b01      	subs	r3, #1
 80506a4:	607b      	str	r3, [r7, #4]
 80506a6:	687b      	ldr	r3, [r7, #4]
 80506a8:	2b00      	cmp	r3, #0
 80506aa:	d1f3      	bne.n	8050694 <mem_set+0x10>
}
 80506ac:	bf00      	nop
 80506ae:	bf00      	nop
 80506b0:	371c      	adds	r7, #28
 80506b2:	46bd      	mov	sp, r7
 80506b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80506b8:	4770      	bx	lr

080506ba <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80506ba:	b480      	push	{r7}
 80506bc:	b089      	sub	sp, #36	; 0x24
 80506be:	af00      	add	r7, sp, #0
 80506c0:	60f8      	str	r0, [r7, #12]
 80506c2:	60b9      	str	r1, [r7, #8]
 80506c4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80506c6:	68fb      	ldr	r3, [r7, #12]
 80506c8:	61fb      	str	r3, [r7, #28]
 80506ca:	68bb      	ldr	r3, [r7, #8]
 80506cc:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80506ce:	2300      	movs	r3, #0
 80506d0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80506d2:	69fb      	ldr	r3, [r7, #28]
 80506d4:	1c5a      	adds	r2, r3, #1
 80506d6:	61fa      	str	r2, [r7, #28]
 80506d8:	781b      	ldrb	r3, [r3, #0]
 80506da:	4619      	mov	r1, r3
 80506dc:	69bb      	ldr	r3, [r7, #24]
 80506de:	1c5a      	adds	r2, r3, #1
 80506e0:	61ba      	str	r2, [r7, #24]
 80506e2:	781b      	ldrb	r3, [r3, #0]
 80506e4:	1acb      	subs	r3, r1, r3
 80506e6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80506e8:	687b      	ldr	r3, [r7, #4]
 80506ea:	3b01      	subs	r3, #1
 80506ec:	607b      	str	r3, [r7, #4]
 80506ee:	687b      	ldr	r3, [r7, #4]
 80506f0:	2b00      	cmp	r3, #0
 80506f2:	d002      	beq.n	80506fa <mem_cmp+0x40>
 80506f4:	697b      	ldr	r3, [r7, #20]
 80506f6:	2b00      	cmp	r3, #0
 80506f8:	d0eb      	beq.n	80506d2 <mem_cmp+0x18>

	return r;
 80506fa:	697b      	ldr	r3, [r7, #20]
}
 80506fc:	4618      	mov	r0, r3
 80506fe:	3724      	adds	r7, #36	; 0x24
 8050700:	46bd      	mov	sp, r7
 8050702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8050706:	4770      	bx	lr

08050708 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8050708:	b480      	push	{r7}
 805070a:	b083      	sub	sp, #12
 805070c:	af00      	add	r7, sp, #0
 805070e:	6078      	str	r0, [r7, #4]
 8050710:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8050712:	e002      	b.n	805071a <chk_chr+0x12>
 8050714:	687b      	ldr	r3, [r7, #4]
 8050716:	3301      	adds	r3, #1
 8050718:	607b      	str	r3, [r7, #4]
 805071a:	687b      	ldr	r3, [r7, #4]
 805071c:	781b      	ldrb	r3, [r3, #0]
 805071e:	2b00      	cmp	r3, #0
 8050720:	d005      	beq.n	805072e <chk_chr+0x26>
 8050722:	687b      	ldr	r3, [r7, #4]
 8050724:	781b      	ldrb	r3, [r3, #0]
 8050726:	461a      	mov	r2, r3
 8050728:	683b      	ldr	r3, [r7, #0]
 805072a:	4293      	cmp	r3, r2
 805072c:	d1f2      	bne.n	8050714 <chk_chr+0xc>
	return *str;
 805072e:	687b      	ldr	r3, [r7, #4]
 8050730:	781b      	ldrb	r3, [r3, #0]
}
 8050732:	4618      	mov	r0, r3
 8050734:	370c      	adds	r7, #12
 8050736:	46bd      	mov	sp, r7
 8050738:	f85d 7b04 	ldr.w	r7, [sp], #4
 805073c:	4770      	bx	lr

0805073e <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 805073e:	b580      	push	{r7, lr}
 8050740:	b082      	sub	sp, #8
 8050742:	af00      	add	r7, sp, #0
 8050744:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8050746:	687b      	ldr	r3, [r7, #4]
 8050748:	2b00      	cmp	r3, #0
 805074a:	d009      	beq.n	8050760 <lock_fs+0x22>
 805074c:	687b      	ldr	r3, [r7, #4]
 805074e:	699b      	ldr	r3, [r3, #24]
 8050750:	4618      	mov	r0, r3
 8050752:	f005 fb36 	bl	8055dc2 <ff_req_grant>
 8050756:	4603      	mov	r3, r0
 8050758:	2b00      	cmp	r3, #0
 805075a:	d001      	beq.n	8050760 <lock_fs+0x22>
 805075c:	2301      	movs	r3, #1
 805075e:	e000      	b.n	8050762 <lock_fs+0x24>
 8050760:	2300      	movs	r3, #0
}
 8050762:	4618      	mov	r0, r3
 8050764:	3708      	adds	r7, #8
 8050766:	46bd      	mov	sp, r7
 8050768:	bd80      	pop	{r7, pc}

0805076a <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 805076a:	b580      	push	{r7, lr}
 805076c:	b082      	sub	sp, #8
 805076e:	af00      	add	r7, sp, #0
 8050770:	6078      	str	r0, [r7, #4]
 8050772:	460b      	mov	r3, r1
 8050774:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8050776:	687b      	ldr	r3, [r7, #4]
 8050778:	2b00      	cmp	r3, #0
 805077a:	d00d      	beq.n	8050798 <unlock_fs+0x2e>
 805077c:	78fb      	ldrb	r3, [r7, #3]
 805077e:	2b0c      	cmp	r3, #12
 8050780:	d00a      	beq.n	8050798 <unlock_fs+0x2e>
 8050782:	78fb      	ldrb	r3, [r7, #3]
 8050784:	2b0b      	cmp	r3, #11
 8050786:	d007      	beq.n	8050798 <unlock_fs+0x2e>
 8050788:	78fb      	ldrb	r3, [r7, #3]
 805078a:	2b0f      	cmp	r3, #15
 805078c:	d004      	beq.n	8050798 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 805078e:	687b      	ldr	r3, [r7, #4]
 8050790:	699b      	ldr	r3, [r3, #24]
 8050792:	4618      	mov	r0, r3
 8050794:	f005 fb2a 	bl	8055dec <ff_rel_grant>
	}
}
 8050798:	bf00      	nop
 805079a:	3708      	adds	r7, #8
 805079c:	46bd      	mov	sp, r7
 805079e:	bd80      	pop	{r7, pc}

080507a0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80507a0:	b480      	push	{r7}
 80507a2:	b085      	sub	sp, #20
 80507a4:	af00      	add	r7, sp, #0
 80507a6:	6078      	str	r0, [r7, #4]
 80507a8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80507aa:	2300      	movs	r3, #0
 80507ac:	60bb      	str	r3, [r7, #8]
 80507ae:	68bb      	ldr	r3, [r7, #8]
 80507b0:	60fb      	str	r3, [r7, #12]
 80507b2:	e029      	b.n	8050808 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80507b4:	4a27      	ldr	r2, [pc, #156]	; (8050854 <chk_lock+0xb4>)
 80507b6:	68fb      	ldr	r3, [r7, #12]
 80507b8:	011b      	lsls	r3, r3, #4
 80507ba:	4413      	add	r3, r2
 80507bc:	681b      	ldr	r3, [r3, #0]
 80507be:	2b00      	cmp	r3, #0
 80507c0:	d01d      	beq.n	80507fe <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80507c2:	4a24      	ldr	r2, [pc, #144]	; (8050854 <chk_lock+0xb4>)
 80507c4:	68fb      	ldr	r3, [r7, #12]
 80507c6:	011b      	lsls	r3, r3, #4
 80507c8:	4413      	add	r3, r2
 80507ca:	681a      	ldr	r2, [r3, #0]
 80507cc:	687b      	ldr	r3, [r7, #4]
 80507ce:	681b      	ldr	r3, [r3, #0]
 80507d0:	429a      	cmp	r2, r3
 80507d2:	d116      	bne.n	8050802 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80507d4:	4a1f      	ldr	r2, [pc, #124]	; (8050854 <chk_lock+0xb4>)
 80507d6:	68fb      	ldr	r3, [r7, #12]
 80507d8:	011b      	lsls	r3, r3, #4
 80507da:	4413      	add	r3, r2
 80507dc:	3304      	adds	r3, #4
 80507de:	681a      	ldr	r2, [r3, #0]
 80507e0:	687b      	ldr	r3, [r7, #4]
 80507e2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80507e4:	429a      	cmp	r2, r3
 80507e6:	d10c      	bne.n	8050802 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80507e8:	4a1a      	ldr	r2, [pc, #104]	; (8050854 <chk_lock+0xb4>)
 80507ea:	68fb      	ldr	r3, [r7, #12]
 80507ec:	011b      	lsls	r3, r3, #4
 80507ee:	4413      	add	r3, r2
 80507f0:	3308      	adds	r3, #8
 80507f2:	681a      	ldr	r2, [r3, #0]
 80507f4:	687b      	ldr	r3, [r7, #4]
 80507f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 80507f8:	429a      	cmp	r2, r3
 80507fa:	d102      	bne.n	8050802 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80507fc:	e007      	b.n	805080e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80507fe:	2301      	movs	r3, #1
 8050800:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8050802:	68fb      	ldr	r3, [r7, #12]
 8050804:	3301      	adds	r3, #1
 8050806:	60fb      	str	r3, [r7, #12]
 8050808:	68fb      	ldr	r3, [r7, #12]
 805080a:	2b01      	cmp	r3, #1
 805080c:	d9d2      	bls.n	80507b4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 805080e:	68fb      	ldr	r3, [r7, #12]
 8050810:	2b02      	cmp	r3, #2
 8050812:	d109      	bne.n	8050828 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8050814:	68bb      	ldr	r3, [r7, #8]
 8050816:	2b00      	cmp	r3, #0
 8050818:	d102      	bne.n	8050820 <chk_lock+0x80>
 805081a:	683b      	ldr	r3, [r7, #0]
 805081c:	2b02      	cmp	r3, #2
 805081e:	d101      	bne.n	8050824 <chk_lock+0x84>
 8050820:	2300      	movs	r3, #0
 8050822:	e010      	b.n	8050846 <chk_lock+0xa6>
 8050824:	2312      	movs	r3, #18
 8050826:	e00e      	b.n	8050846 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8050828:	683b      	ldr	r3, [r7, #0]
 805082a:	2b00      	cmp	r3, #0
 805082c:	d108      	bne.n	8050840 <chk_lock+0xa0>
 805082e:	4a09      	ldr	r2, [pc, #36]	; (8050854 <chk_lock+0xb4>)
 8050830:	68fb      	ldr	r3, [r7, #12]
 8050832:	011b      	lsls	r3, r3, #4
 8050834:	4413      	add	r3, r2
 8050836:	330c      	adds	r3, #12
 8050838:	881b      	ldrh	r3, [r3, #0]
 805083a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 805083e:	d101      	bne.n	8050844 <chk_lock+0xa4>
 8050840:	2310      	movs	r3, #16
 8050842:	e000      	b.n	8050846 <chk_lock+0xa6>
 8050844:	2300      	movs	r3, #0
}
 8050846:	4618      	mov	r0, r3
 8050848:	3714      	adds	r7, #20
 805084a:	46bd      	mov	sp, r7
 805084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8050850:	4770      	bx	lr
 8050852:	bf00      	nop
 8050854:	24002c08 	.word	0x24002c08

08050858 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8050858:	b480      	push	{r7}
 805085a:	b083      	sub	sp, #12
 805085c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 805085e:	2300      	movs	r3, #0
 8050860:	607b      	str	r3, [r7, #4]
 8050862:	e002      	b.n	805086a <enq_lock+0x12>
 8050864:	687b      	ldr	r3, [r7, #4]
 8050866:	3301      	adds	r3, #1
 8050868:	607b      	str	r3, [r7, #4]
 805086a:	687b      	ldr	r3, [r7, #4]
 805086c:	2b01      	cmp	r3, #1
 805086e:	d806      	bhi.n	805087e <enq_lock+0x26>
 8050870:	4a09      	ldr	r2, [pc, #36]	; (8050898 <enq_lock+0x40>)
 8050872:	687b      	ldr	r3, [r7, #4]
 8050874:	011b      	lsls	r3, r3, #4
 8050876:	4413      	add	r3, r2
 8050878:	681b      	ldr	r3, [r3, #0]
 805087a:	2b00      	cmp	r3, #0
 805087c:	d1f2      	bne.n	8050864 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 805087e:	687b      	ldr	r3, [r7, #4]
 8050880:	2b02      	cmp	r3, #2
 8050882:	bf14      	ite	ne
 8050884:	2301      	movne	r3, #1
 8050886:	2300      	moveq	r3, #0
 8050888:	b2db      	uxtb	r3, r3
}
 805088a:	4618      	mov	r0, r3
 805088c:	370c      	adds	r7, #12
 805088e:	46bd      	mov	sp, r7
 8050890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8050894:	4770      	bx	lr
 8050896:	bf00      	nop
 8050898:	24002c08 	.word	0x24002c08

0805089c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 805089c:	b480      	push	{r7}
 805089e:	b085      	sub	sp, #20
 80508a0:	af00      	add	r7, sp, #0
 80508a2:	6078      	str	r0, [r7, #4]
 80508a4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80508a6:	2300      	movs	r3, #0
 80508a8:	60fb      	str	r3, [r7, #12]
 80508aa:	e01f      	b.n	80508ec <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80508ac:	4a41      	ldr	r2, [pc, #260]	; (80509b4 <inc_lock+0x118>)
 80508ae:	68fb      	ldr	r3, [r7, #12]
 80508b0:	011b      	lsls	r3, r3, #4
 80508b2:	4413      	add	r3, r2
 80508b4:	681a      	ldr	r2, [r3, #0]
 80508b6:	687b      	ldr	r3, [r7, #4]
 80508b8:	681b      	ldr	r3, [r3, #0]
 80508ba:	429a      	cmp	r2, r3
 80508bc:	d113      	bne.n	80508e6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80508be:	4a3d      	ldr	r2, [pc, #244]	; (80509b4 <inc_lock+0x118>)
 80508c0:	68fb      	ldr	r3, [r7, #12]
 80508c2:	011b      	lsls	r3, r3, #4
 80508c4:	4413      	add	r3, r2
 80508c6:	3304      	adds	r3, #4
 80508c8:	681a      	ldr	r2, [r3, #0]
 80508ca:	687b      	ldr	r3, [r7, #4]
 80508cc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80508ce:	429a      	cmp	r2, r3
 80508d0:	d109      	bne.n	80508e6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80508d2:	4a38      	ldr	r2, [pc, #224]	; (80509b4 <inc_lock+0x118>)
 80508d4:	68fb      	ldr	r3, [r7, #12]
 80508d6:	011b      	lsls	r3, r3, #4
 80508d8:	4413      	add	r3, r2
 80508da:	3308      	adds	r3, #8
 80508dc:	681a      	ldr	r2, [r3, #0]
 80508de:	687b      	ldr	r3, [r7, #4]
 80508e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 80508e2:	429a      	cmp	r2, r3
 80508e4:	d006      	beq.n	80508f4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80508e6:	68fb      	ldr	r3, [r7, #12]
 80508e8:	3301      	adds	r3, #1
 80508ea:	60fb      	str	r3, [r7, #12]
 80508ec:	68fb      	ldr	r3, [r7, #12]
 80508ee:	2b01      	cmp	r3, #1
 80508f0:	d9dc      	bls.n	80508ac <inc_lock+0x10>
 80508f2:	e000      	b.n	80508f6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80508f4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80508f6:	68fb      	ldr	r3, [r7, #12]
 80508f8:	2b02      	cmp	r3, #2
 80508fa:	d132      	bne.n	8050962 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80508fc:	2300      	movs	r3, #0
 80508fe:	60fb      	str	r3, [r7, #12]
 8050900:	e002      	b.n	8050908 <inc_lock+0x6c>
 8050902:	68fb      	ldr	r3, [r7, #12]
 8050904:	3301      	adds	r3, #1
 8050906:	60fb      	str	r3, [r7, #12]
 8050908:	68fb      	ldr	r3, [r7, #12]
 805090a:	2b01      	cmp	r3, #1
 805090c:	d806      	bhi.n	805091c <inc_lock+0x80>
 805090e:	4a29      	ldr	r2, [pc, #164]	; (80509b4 <inc_lock+0x118>)
 8050910:	68fb      	ldr	r3, [r7, #12]
 8050912:	011b      	lsls	r3, r3, #4
 8050914:	4413      	add	r3, r2
 8050916:	681b      	ldr	r3, [r3, #0]
 8050918:	2b00      	cmp	r3, #0
 805091a:	d1f2      	bne.n	8050902 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 805091c:	68fb      	ldr	r3, [r7, #12]
 805091e:	2b02      	cmp	r3, #2
 8050920:	d101      	bne.n	8050926 <inc_lock+0x8a>
 8050922:	2300      	movs	r3, #0
 8050924:	e040      	b.n	80509a8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8050926:	687b      	ldr	r3, [r7, #4]
 8050928:	681a      	ldr	r2, [r3, #0]
 805092a:	4922      	ldr	r1, [pc, #136]	; (80509b4 <inc_lock+0x118>)
 805092c:	68fb      	ldr	r3, [r7, #12]
 805092e:	011b      	lsls	r3, r3, #4
 8050930:	440b      	add	r3, r1
 8050932:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8050934:	687b      	ldr	r3, [r7, #4]
 8050936:	689a      	ldr	r2, [r3, #8]
 8050938:	491e      	ldr	r1, [pc, #120]	; (80509b4 <inc_lock+0x118>)
 805093a:	68fb      	ldr	r3, [r7, #12]
 805093c:	011b      	lsls	r3, r3, #4
 805093e:	440b      	add	r3, r1
 8050940:	3304      	adds	r3, #4
 8050942:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8050944:	687b      	ldr	r3, [r7, #4]
 8050946:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8050948:	491a      	ldr	r1, [pc, #104]	; (80509b4 <inc_lock+0x118>)
 805094a:	68fb      	ldr	r3, [r7, #12]
 805094c:	011b      	lsls	r3, r3, #4
 805094e:	440b      	add	r3, r1
 8050950:	3308      	adds	r3, #8
 8050952:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8050954:	4a17      	ldr	r2, [pc, #92]	; (80509b4 <inc_lock+0x118>)
 8050956:	68fb      	ldr	r3, [r7, #12]
 8050958:	011b      	lsls	r3, r3, #4
 805095a:	4413      	add	r3, r2
 805095c:	330c      	adds	r3, #12
 805095e:	2200      	movs	r2, #0
 8050960:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8050962:	683b      	ldr	r3, [r7, #0]
 8050964:	2b00      	cmp	r3, #0
 8050966:	d009      	beq.n	805097c <inc_lock+0xe0>
 8050968:	4a12      	ldr	r2, [pc, #72]	; (80509b4 <inc_lock+0x118>)
 805096a:	68fb      	ldr	r3, [r7, #12]
 805096c:	011b      	lsls	r3, r3, #4
 805096e:	4413      	add	r3, r2
 8050970:	330c      	adds	r3, #12
 8050972:	881b      	ldrh	r3, [r3, #0]
 8050974:	2b00      	cmp	r3, #0
 8050976:	d001      	beq.n	805097c <inc_lock+0xe0>
 8050978:	2300      	movs	r3, #0
 805097a:	e015      	b.n	80509a8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 805097c:	683b      	ldr	r3, [r7, #0]
 805097e:	2b00      	cmp	r3, #0
 8050980:	d108      	bne.n	8050994 <inc_lock+0xf8>
 8050982:	4a0c      	ldr	r2, [pc, #48]	; (80509b4 <inc_lock+0x118>)
 8050984:	68fb      	ldr	r3, [r7, #12]
 8050986:	011b      	lsls	r3, r3, #4
 8050988:	4413      	add	r3, r2
 805098a:	330c      	adds	r3, #12
 805098c:	881b      	ldrh	r3, [r3, #0]
 805098e:	3301      	adds	r3, #1
 8050990:	b29a      	uxth	r2, r3
 8050992:	e001      	b.n	8050998 <inc_lock+0xfc>
 8050994:	f44f 7280 	mov.w	r2, #256	; 0x100
 8050998:	4906      	ldr	r1, [pc, #24]	; (80509b4 <inc_lock+0x118>)
 805099a:	68fb      	ldr	r3, [r7, #12]
 805099c:	011b      	lsls	r3, r3, #4
 805099e:	440b      	add	r3, r1
 80509a0:	330c      	adds	r3, #12
 80509a2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80509a4:	68fb      	ldr	r3, [r7, #12]
 80509a6:	3301      	adds	r3, #1
}
 80509a8:	4618      	mov	r0, r3
 80509aa:	3714      	adds	r7, #20
 80509ac:	46bd      	mov	sp, r7
 80509ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80509b2:	4770      	bx	lr
 80509b4:	24002c08 	.word	0x24002c08

080509b8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80509b8:	b480      	push	{r7}
 80509ba:	b085      	sub	sp, #20
 80509bc:	af00      	add	r7, sp, #0
 80509be:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80509c0:	687b      	ldr	r3, [r7, #4]
 80509c2:	3b01      	subs	r3, #1
 80509c4:	607b      	str	r3, [r7, #4]
 80509c6:	687b      	ldr	r3, [r7, #4]
 80509c8:	2b01      	cmp	r3, #1
 80509ca:	d825      	bhi.n	8050a18 <dec_lock+0x60>
		n = Files[i].ctr;
 80509cc:	4a17      	ldr	r2, [pc, #92]	; (8050a2c <dec_lock+0x74>)
 80509ce:	687b      	ldr	r3, [r7, #4]
 80509d0:	011b      	lsls	r3, r3, #4
 80509d2:	4413      	add	r3, r2
 80509d4:	330c      	adds	r3, #12
 80509d6:	881b      	ldrh	r3, [r3, #0]
 80509d8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80509da:	89fb      	ldrh	r3, [r7, #14]
 80509dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80509e0:	d101      	bne.n	80509e6 <dec_lock+0x2e>
 80509e2:	2300      	movs	r3, #0
 80509e4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80509e6:	89fb      	ldrh	r3, [r7, #14]
 80509e8:	2b00      	cmp	r3, #0
 80509ea:	d002      	beq.n	80509f2 <dec_lock+0x3a>
 80509ec:	89fb      	ldrh	r3, [r7, #14]
 80509ee:	3b01      	subs	r3, #1
 80509f0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80509f2:	4a0e      	ldr	r2, [pc, #56]	; (8050a2c <dec_lock+0x74>)
 80509f4:	687b      	ldr	r3, [r7, #4]
 80509f6:	011b      	lsls	r3, r3, #4
 80509f8:	4413      	add	r3, r2
 80509fa:	330c      	adds	r3, #12
 80509fc:	89fa      	ldrh	r2, [r7, #14]
 80509fe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8050a00:	89fb      	ldrh	r3, [r7, #14]
 8050a02:	2b00      	cmp	r3, #0
 8050a04:	d105      	bne.n	8050a12 <dec_lock+0x5a>
 8050a06:	4a09      	ldr	r2, [pc, #36]	; (8050a2c <dec_lock+0x74>)
 8050a08:	687b      	ldr	r3, [r7, #4]
 8050a0a:	011b      	lsls	r3, r3, #4
 8050a0c:	4413      	add	r3, r2
 8050a0e:	2200      	movs	r2, #0
 8050a10:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8050a12:	2300      	movs	r3, #0
 8050a14:	737b      	strb	r3, [r7, #13]
 8050a16:	e001      	b.n	8050a1c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8050a18:	2302      	movs	r3, #2
 8050a1a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8050a1c:	7b7b      	ldrb	r3, [r7, #13]
}
 8050a1e:	4618      	mov	r0, r3
 8050a20:	3714      	adds	r7, #20
 8050a22:	46bd      	mov	sp, r7
 8050a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8050a28:	4770      	bx	lr
 8050a2a:	bf00      	nop
 8050a2c:	24002c08 	.word	0x24002c08

08050a30 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8050a30:	b480      	push	{r7}
 8050a32:	b085      	sub	sp, #20
 8050a34:	af00      	add	r7, sp, #0
 8050a36:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8050a38:	2300      	movs	r3, #0
 8050a3a:	60fb      	str	r3, [r7, #12]
 8050a3c:	e010      	b.n	8050a60 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8050a3e:	4a0d      	ldr	r2, [pc, #52]	; (8050a74 <clear_lock+0x44>)
 8050a40:	68fb      	ldr	r3, [r7, #12]
 8050a42:	011b      	lsls	r3, r3, #4
 8050a44:	4413      	add	r3, r2
 8050a46:	681b      	ldr	r3, [r3, #0]
 8050a48:	687a      	ldr	r2, [r7, #4]
 8050a4a:	429a      	cmp	r2, r3
 8050a4c:	d105      	bne.n	8050a5a <clear_lock+0x2a>
 8050a4e:	4a09      	ldr	r2, [pc, #36]	; (8050a74 <clear_lock+0x44>)
 8050a50:	68fb      	ldr	r3, [r7, #12]
 8050a52:	011b      	lsls	r3, r3, #4
 8050a54:	4413      	add	r3, r2
 8050a56:	2200      	movs	r2, #0
 8050a58:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8050a5a:	68fb      	ldr	r3, [r7, #12]
 8050a5c:	3301      	adds	r3, #1
 8050a5e:	60fb      	str	r3, [r7, #12]
 8050a60:	68fb      	ldr	r3, [r7, #12]
 8050a62:	2b01      	cmp	r3, #1
 8050a64:	d9eb      	bls.n	8050a3e <clear_lock+0xe>
	}
}
 8050a66:	bf00      	nop
 8050a68:	bf00      	nop
 8050a6a:	3714      	adds	r7, #20
 8050a6c:	46bd      	mov	sp, r7
 8050a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8050a72:	4770      	bx	lr
 8050a74:	24002c08 	.word	0x24002c08

08050a78 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8050a78:	b580      	push	{r7, lr}
 8050a7a:	b086      	sub	sp, #24
 8050a7c:	af00      	add	r7, sp, #0
 8050a7e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8050a80:	2300      	movs	r3, #0
 8050a82:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8050a84:	687b      	ldr	r3, [r7, #4]
 8050a86:	78db      	ldrb	r3, [r3, #3]
 8050a88:	2b00      	cmp	r3, #0
 8050a8a:	d034      	beq.n	8050af6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8050a8c:	687b      	ldr	r3, [r7, #4]
 8050a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8050a90:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8050a92:	687b      	ldr	r3, [r7, #4]
 8050a94:	7858      	ldrb	r0, [r3, #1]
 8050a96:	687b      	ldr	r3, [r7, #4]
 8050a98:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8050a9c:	2301      	movs	r3, #1
 8050a9e:	697a      	ldr	r2, [r7, #20]
 8050aa0:	f7ff fbac 	bl	80501fc <disk_write>
 8050aa4:	4603      	mov	r3, r0
 8050aa6:	2b00      	cmp	r3, #0
 8050aa8:	d002      	beq.n	8050ab0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8050aaa:	2301      	movs	r3, #1
 8050aac:	73fb      	strb	r3, [r7, #15]
 8050aae:	e022      	b.n	8050af6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8050ab0:	687b      	ldr	r3, [r7, #4]
 8050ab2:	2200      	movs	r2, #0
 8050ab4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8050ab6:	687b      	ldr	r3, [r7, #4]
 8050ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8050aba:	697a      	ldr	r2, [r7, #20]
 8050abc:	1ad2      	subs	r2, r2, r3
 8050abe:	687b      	ldr	r3, [r7, #4]
 8050ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8050ac2:	429a      	cmp	r2, r3
 8050ac4:	d217      	bcs.n	8050af6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8050ac6:	687b      	ldr	r3, [r7, #4]
 8050ac8:	789b      	ldrb	r3, [r3, #2]
 8050aca:	613b      	str	r3, [r7, #16]
 8050acc:	e010      	b.n	8050af0 <sync_window+0x78>
					wsect += fs->fsize;
 8050ace:	687b      	ldr	r3, [r7, #4]
 8050ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8050ad2:	697a      	ldr	r2, [r7, #20]
 8050ad4:	4413      	add	r3, r2
 8050ad6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8050ad8:	687b      	ldr	r3, [r7, #4]
 8050ada:	7858      	ldrb	r0, [r3, #1]
 8050adc:	687b      	ldr	r3, [r7, #4]
 8050ade:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8050ae2:	2301      	movs	r3, #1
 8050ae4:	697a      	ldr	r2, [r7, #20]
 8050ae6:	f7ff fb89 	bl	80501fc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8050aea:	693b      	ldr	r3, [r7, #16]
 8050aec:	3b01      	subs	r3, #1
 8050aee:	613b      	str	r3, [r7, #16]
 8050af0:	693b      	ldr	r3, [r7, #16]
 8050af2:	2b01      	cmp	r3, #1
 8050af4:	d8eb      	bhi.n	8050ace <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8050af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8050af8:	4618      	mov	r0, r3
 8050afa:	3718      	adds	r7, #24
 8050afc:	46bd      	mov	sp, r7
 8050afe:	bd80      	pop	{r7, pc}

08050b00 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8050b00:	b580      	push	{r7, lr}
 8050b02:	b084      	sub	sp, #16
 8050b04:	af00      	add	r7, sp, #0
 8050b06:	6078      	str	r0, [r7, #4]
 8050b08:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8050b0a:	2300      	movs	r3, #0
 8050b0c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8050b0e:	687b      	ldr	r3, [r7, #4]
 8050b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8050b12:	683a      	ldr	r2, [r7, #0]
 8050b14:	429a      	cmp	r2, r3
 8050b16:	d01b      	beq.n	8050b50 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8050b18:	6878      	ldr	r0, [r7, #4]
 8050b1a:	f7ff ffad 	bl	8050a78 <sync_window>
 8050b1e:	4603      	mov	r3, r0
 8050b20:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8050b22:	7bfb      	ldrb	r3, [r7, #15]
 8050b24:	2b00      	cmp	r3, #0
 8050b26:	d113      	bne.n	8050b50 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8050b28:	687b      	ldr	r3, [r7, #4]
 8050b2a:	7858      	ldrb	r0, [r3, #1]
 8050b2c:	687b      	ldr	r3, [r7, #4]
 8050b2e:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8050b32:	2301      	movs	r3, #1
 8050b34:	683a      	ldr	r2, [r7, #0]
 8050b36:	f7ff fb41 	bl	80501bc <disk_read>
 8050b3a:	4603      	mov	r3, r0
 8050b3c:	2b00      	cmp	r3, #0
 8050b3e:	d004      	beq.n	8050b4a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8050b40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8050b44:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8050b46:	2301      	movs	r3, #1
 8050b48:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8050b4a:	687b      	ldr	r3, [r7, #4]
 8050b4c:	683a      	ldr	r2, [r7, #0]
 8050b4e:	64da      	str	r2, [r3, #76]	; 0x4c
		}
	}
	return res;
 8050b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8050b52:	4618      	mov	r0, r3
 8050b54:	3710      	adds	r7, #16
 8050b56:	46bd      	mov	sp, r7
 8050b58:	bd80      	pop	{r7, pc}
	...

08050b5c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8050b5c:	b580      	push	{r7, lr}
 8050b5e:	b084      	sub	sp, #16
 8050b60:	af00      	add	r7, sp, #0
 8050b62:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8050b64:	6878      	ldr	r0, [r7, #4]
 8050b66:	f7ff ff87 	bl	8050a78 <sync_window>
 8050b6a:	4603      	mov	r3, r0
 8050b6c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8050b6e:	7bfb      	ldrb	r3, [r7, #15]
 8050b70:	2b00      	cmp	r3, #0
 8050b72:	d159      	bne.n	8050c28 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8050b74:	687b      	ldr	r3, [r7, #4]
 8050b76:	781b      	ldrb	r3, [r3, #0]
 8050b78:	2b03      	cmp	r3, #3
 8050b7a:	d149      	bne.n	8050c10 <sync_fs+0xb4>
 8050b7c:	687b      	ldr	r3, [r7, #4]
 8050b7e:	791b      	ldrb	r3, [r3, #4]
 8050b80:	2b01      	cmp	r3, #1
 8050b82:	d145      	bne.n	8050c10 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8050b84:	687b      	ldr	r3, [r7, #4]
 8050b86:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8050b8a:	687b      	ldr	r3, [r7, #4]
 8050b8c:	899b      	ldrh	r3, [r3, #12]
 8050b8e:	461a      	mov	r2, r3
 8050b90:	2100      	movs	r1, #0
 8050b92:	f7ff fd77 	bl	8050684 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8050b96:	687b      	ldr	r3, [r7, #4]
 8050b98:	3350      	adds	r3, #80	; 0x50
 8050b9a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8050b9e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8050ba2:	4618      	mov	r0, r3
 8050ba4:	f7ff fc7e 	bl	80504a4 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8050ba8:	687b      	ldr	r3, [r7, #4]
 8050baa:	3350      	adds	r3, #80	; 0x50
 8050bac:	4921      	ldr	r1, [pc, #132]	; (8050c34 <sync_fs+0xd8>)
 8050bae:	4618      	mov	r0, r3
 8050bb0:	f7ff fc93 	bl	80504da <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8050bb4:	687b      	ldr	r3, [r7, #4]
 8050bb6:	3350      	adds	r3, #80	; 0x50
 8050bb8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8050bbc:	491e      	ldr	r1, [pc, #120]	; (8050c38 <sync_fs+0xdc>)
 8050bbe:	4618      	mov	r0, r3
 8050bc0:	f7ff fc8b 	bl	80504da <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8050bc4:	687b      	ldr	r3, [r7, #4]
 8050bc6:	3350      	adds	r3, #80	; 0x50
 8050bc8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8050bcc:	687b      	ldr	r3, [r7, #4]
 8050bce:	6a1b      	ldr	r3, [r3, #32]
 8050bd0:	4619      	mov	r1, r3
 8050bd2:	4610      	mov	r0, r2
 8050bd4:	f7ff fc81 	bl	80504da <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8050bd8:	687b      	ldr	r3, [r7, #4]
 8050bda:	3350      	adds	r3, #80	; 0x50
 8050bdc:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8050be0:	687b      	ldr	r3, [r7, #4]
 8050be2:	69db      	ldr	r3, [r3, #28]
 8050be4:	4619      	mov	r1, r3
 8050be6:	4610      	mov	r0, r2
 8050be8:	f7ff fc77 	bl	80504da <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8050bec:	687b      	ldr	r3, [r7, #4]
 8050bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8050bf0:	1c5a      	adds	r2, r3, #1
 8050bf2:	687b      	ldr	r3, [r7, #4]
 8050bf4:	64da      	str	r2, [r3, #76]	; 0x4c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8050bf6:	687b      	ldr	r3, [r7, #4]
 8050bf8:	7858      	ldrb	r0, [r3, #1]
 8050bfa:	687b      	ldr	r3, [r7, #4]
 8050bfc:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8050c00:	687b      	ldr	r3, [r7, #4]
 8050c02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8050c04:	2301      	movs	r3, #1
 8050c06:	f7ff faf9 	bl	80501fc <disk_write>
			fs->fsi_flag = 0;
 8050c0a:	687b      	ldr	r3, [r7, #4]
 8050c0c:	2200      	movs	r2, #0
 8050c0e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8050c10:	687b      	ldr	r3, [r7, #4]
 8050c12:	785b      	ldrb	r3, [r3, #1]
 8050c14:	2200      	movs	r2, #0
 8050c16:	2100      	movs	r1, #0
 8050c18:	4618      	mov	r0, r3
 8050c1a:	f7ff fb0f 	bl	805023c <disk_ioctl>
 8050c1e:	4603      	mov	r3, r0
 8050c20:	2b00      	cmp	r3, #0
 8050c22:	d001      	beq.n	8050c28 <sync_fs+0xcc>
 8050c24:	2301      	movs	r3, #1
 8050c26:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8050c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8050c2a:	4618      	mov	r0, r3
 8050c2c:	3710      	adds	r7, #16
 8050c2e:	46bd      	mov	sp, r7
 8050c30:	bd80      	pop	{r7, pc}
 8050c32:	bf00      	nop
 8050c34:	41615252 	.word	0x41615252
 8050c38:	61417272 	.word	0x61417272

08050c3c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8050c3c:	b480      	push	{r7}
 8050c3e:	b083      	sub	sp, #12
 8050c40:	af00      	add	r7, sp, #0
 8050c42:	6078      	str	r0, [r7, #4]
 8050c44:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8050c46:	683b      	ldr	r3, [r7, #0]
 8050c48:	3b02      	subs	r3, #2
 8050c4a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8050c4c:	687b      	ldr	r3, [r7, #4]
 8050c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8050c50:	3b02      	subs	r3, #2
 8050c52:	683a      	ldr	r2, [r7, #0]
 8050c54:	429a      	cmp	r2, r3
 8050c56:	d301      	bcc.n	8050c5c <clust2sect+0x20>
 8050c58:	2300      	movs	r3, #0
 8050c5a:	e008      	b.n	8050c6e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8050c5c:	687b      	ldr	r3, [r7, #4]
 8050c5e:	895b      	ldrh	r3, [r3, #10]
 8050c60:	461a      	mov	r2, r3
 8050c62:	683b      	ldr	r3, [r7, #0]
 8050c64:	fb03 f202 	mul.w	r2, r3, r2
 8050c68:	687b      	ldr	r3, [r7, #4]
 8050c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8050c6c:	4413      	add	r3, r2
}
 8050c6e:	4618      	mov	r0, r3
 8050c70:	370c      	adds	r7, #12
 8050c72:	46bd      	mov	sp, r7
 8050c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8050c78:	4770      	bx	lr
	...

08050c7c <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8050c7c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8050c80:	b088      	sub	sp, #32
 8050c82:	af00      	add	r7, sp, #0
 8050c84:	6078      	str	r0, [r7, #4]
 8050c86:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8050c88:	687b      	ldr	r3, [r7, #4]
 8050c8a:	681b      	ldr	r3, [r3, #0]
 8050c8c:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8050c8e:	683b      	ldr	r3, [r7, #0]
 8050c90:	2b01      	cmp	r3, #1
 8050c92:	d904      	bls.n	8050c9e <get_fat+0x22>
 8050c94:	69bb      	ldr	r3, [r7, #24]
 8050c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8050c98:	683a      	ldr	r2, [r7, #0]
 8050c9a:	429a      	cmp	r2, r3
 8050c9c:	d302      	bcc.n	8050ca4 <get_fat+0x28>
		val = 1;	/* Internal error */
 8050c9e:	2301      	movs	r3, #1
 8050ca0:	61fb      	str	r3, [r7, #28]
 8050ca2:	e13a      	b.n	8050f1a <get_fat+0x29e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8050ca4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8050ca8:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 8050caa:	69bb      	ldr	r3, [r7, #24]
 8050cac:	781b      	ldrb	r3, [r3, #0]
 8050cae:	3b01      	subs	r3, #1
 8050cb0:	2b03      	cmp	r3, #3
 8050cb2:	f200 8126 	bhi.w	8050f02 <get_fat+0x286>
 8050cb6:	a201      	add	r2, pc, #4	; (adr r2, 8050cbc <get_fat+0x40>)
 8050cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8050cbc:	08050ccd 	.word	0x08050ccd
 8050cc0:	08050d7b 	.word	0x08050d7b
 8050cc4:	08050dc7 	.word	0x08050dc7
 8050cc8:	08050e17 	.word	0x08050e17
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8050ccc:	683b      	ldr	r3, [r7, #0]
 8050cce:	60fb      	str	r3, [r7, #12]
 8050cd0:	68fb      	ldr	r3, [r7, #12]
 8050cd2:	085b      	lsrs	r3, r3, #1
 8050cd4:	68fa      	ldr	r2, [r7, #12]
 8050cd6:	4413      	add	r3, r2
 8050cd8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8050cda:	69bb      	ldr	r3, [r7, #24]
 8050cdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8050cde:	69bb      	ldr	r3, [r7, #24]
 8050ce0:	899b      	ldrh	r3, [r3, #12]
 8050ce2:	4619      	mov	r1, r3
 8050ce4:	68fb      	ldr	r3, [r7, #12]
 8050ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8050cea:	4413      	add	r3, r2
 8050cec:	4619      	mov	r1, r3
 8050cee:	69b8      	ldr	r0, [r7, #24]
 8050cf0:	f7ff ff06 	bl	8050b00 <move_window>
 8050cf4:	4603      	mov	r3, r0
 8050cf6:	2b00      	cmp	r3, #0
 8050cf8:	f040 8106 	bne.w	8050f08 <get_fat+0x28c>
			wc = fs->win[bc++ % SS(fs)];
 8050cfc:	68fb      	ldr	r3, [r7, #12]
 8050cfe:	1c5a      	adds	r2, r3, #1
 8050d00:	60fa      	str	r2, [r7, #12]
 8050d02:	69ba      	ldr	r2, [r7, #24]
 8050d04:	8992      	ldrh	r2, [r2, #12]
 8050d06:	fbb3 f1f2 	udiv	r1, r3, r2
 8050d0a:	fb01 f202 	mul.w	r2, r1, r2
 8050d0e:	1a9b      	subs	r3, r3, r2
 8050d10:	69ba      	ldr	r2, [r7, #24]
 8050d12:	4413      	add	r3, r2
 8050d14:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8050d18:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8050d1a:	69bb      	ldr	r3, [r7, #24]
 8050d1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8050d1e:	69bb      	ldr	r3, [r7, #24]
 8050d20:	899b      	ldrh	r3, [r3, #12]
 8050d22:	4619      	mov	r1, r3
 8050d24:	68fb      	ldr	r3, [r7, #12]
 8050d26:	fbb3 f3f1 	udiv	r3, r3, r1
 8050d2a:	4413      	add	r3, r2
 8050d2c:	4619      	mov	r1, r3
 8050d2e:	69b8      	ldr	r0, [r7, #24]
 8050d30:	f7ff fee6 	bl	8050b00 <move_window>
 8050d34:	4603      	mov	r3, r0
 8050d36:	2b00      	cmp	r3, #0
 8050d38:	f040 80e8 	bne.w	8050f0c <get_fat+0x290>
			wc |= fs->win[bc % SS(fs)] << 8;
 8050d3c:	69bb      	ldr	r3, [r7, #24]
 8050d3e:	899b      	ldrh	r3, [r3, #12]
 8050d40:	461a      	mov	r2, r3
 8050d42:	68fb      	ldr	r3, [r7, #12]
 8050d44:	fbb3 f1f2 	udiv	r1, r3, r2
 8050d48:	fb01 f202 	mul.w	r2, r1, r2
 8050d4c:	1a9b      	subs	r3, r3, r2
 8050d4e:	69ba      	ldr	r2, [r7, #24]
 8050d50:	4413      	add	r3, r2
 8050d52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8050d56:	021b      	lsls	r3, r3, #8
 8050d58:	461a      	mov	r2, r3
 8050d5a:	68bb      	ldr	r3, [r7, #8]
 8050d5c:	4313      	orrs	r3, r2
 8050d5e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8050d60:	683b      	ldr	r3, [r7, #0]
 8050d62:	f003 0301 	and.w	r3, r3, #1
 8050d66:	2b00      	cmp	r3, #0
 8050d68:	d002      	beq.n	8050d70 <get_fat+0xf4>
 8050d6a:	68bb      	ldr	r3, [r7, #8]
 8050d6c:	091b      	lsrs	r3, r3, #4
 8050d6e:	e002      	b.n	8050d76 <get_fat+0xfa>
 8050d70:	68bb      	ldr	r3, [r7, #8]
 8050d72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8050d76:	61fb      	str	r3, [r7, #28]
			break;
 8050d78:	e0cf      	b.n	8050f1a <get_fat+0x29e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8050d7a:	69bb      	ldr	r3, [r7, #24]
 8050d7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8050d7e:	69bb      	ldr	r3, [r7, #24]
 8050d80:	899b      	ldrh	r3, [r3, #12]
 8050d82:	085b      	lsrs	r3, r3, #1
 8050d84:	b29b      	uxth	r3, r3
 8050d86:	4619      	mov	r1, r3
 8050d88:	683b      	ldr	r3, [r7, #0]
 8050d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8050d8e:	4413      	add	r3, r2
 8050d90:	4619      	mov	r1, r3
 8050d92:	69b8      	ldr	r0, [r7, #24]
 8050d94:	f7ff feb4 	bl	8050b00 <move_window>
 8050d98:	4603      	mov	r3, r0
 8050d9a:	2b00      	cmp	r3, #0
 8050d9c:	f040 80b8 	bne.w	8050f10 <get_fat+0x294>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8050da0:	69bb      	ldr	r3, [r7, #24]
 8050da2:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8050da6:	683b      	ldr	r3, [r7, #0]
 8050da8:	005b      	lsls	r3, r3, #1
 8050daa:	69ba      	ldr	r2, [r7, #24]
 8050dac:	8992      	ldrh	r2, [r2, #12]
 8050dae:	fbb3 f0f2 	udiv	r0, r3, r2
 8050db2:	fb00 f202 	mul.w	r2, r0, r2
 8050db6:	1a9b      	subs	r3, r3, r2
 8050db8:	440b      	add	r3, r1
 8050dba:	4618      	mov	r0, r3
 8050dbc:	f7ff fa5c 	bl	8050278 <ld_word>
 8050dc0:	4603      	mov	r3, r0
 8050dc2:	61fb      	str	r3, [r7, #28]
			break;
 8050dc4:	e0a9      	b.n	8050f1a <get_fat+0x29e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8050dc6:	69bb      	ldr	r3, [r7, #24]
 8050dc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8050dca:	69bb      	ldr	r3, [r7, #24]
 8050dcc:	899b      	ldrh	r3, [r3, #12]
 8050dce:	089b      	lsrs	r3, r3, #2
 8050dd0:	b29b      	uxth	r3, r3
 8050dd2:	4619      	mov	r1, r3
 8050dd4:	683b      	ldr	r3, [r7, #0]
 8050dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8050dda:	4413      	add	r3, r2
 8050ddc:	4619      	mov	r1, r3
 8050dde:	69b8      	ldr	r0, [r7, #24]
 8050de0:	f7ff fe8e 	bl	8050b00 <move_window>
 8050de4:	4603      	mov	r3, r0
 8050de6:	2b00      	cmp	r3, #0
 8050de8:	f040 8094 	bne.w	8050f14 <get_fat+0x298>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8050dec:	69bb      	ldr	r3, [r7, #24]
 8050dee:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8050df2:	683b      	ldr	r3, [r7, #0]
 8050df4:	009b      	lsls	r3, r3, #2
 8050df6:	69ba      	ldr	r2, [r7, #24]
 8050df8:	8992      	ldrh	r2, [r2, #12]
 8050dfa:	fbb3 f0f2 	udiv	r0, r3, r2
 8050dfe:	fb00 f202 	mul.w	r2, r0, r2
 8050e02:	1a9b      	subs	r3, r3, r2
 8050e04:	440b      	add	r3, r1
 8050e06:	4618      	mov	r0, r3
 8050e08:	f7ff fa4e 	bl	80502a8 <ld_dword>
 8050e0c:	4603      	mov	r3, r0
 8050e0e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8050e12:	61fb      	str	r3, [r7, #28]
			break;
 8050e14:	e081      	b.n	8050f1a <get_fat+0x29e>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 8050e16:	687b      	ldr	r3, [r7, #4]
 8050e18:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8050e1c:	4313      	orrs	r3, r2
 8050e1e:	d070      	beq.n	8050f02 <get_fat+0x286>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8050e20:	687b      	ldr	r3, [r7, #4]
 8050e22:	689b      	ldr	r3, [r3, #8]
 8050e24:	683a      	ldr	r2, [r7, #0]
 8050e26:	1ad3      	subs	r3, r2, r3
 8050e28:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 8050e2a:	687b      	ldr	r3, [r7, #4]
 8050e2c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8050e30:	1e54      	subs	r4, r2, #1
 8050e32:	f143 35ff 	adc.w	r5, r3, #4294967295	; 0xffffffff
 8050e36:	69bb      	ldr	r3, [r7, #24]
 8050e38:	899b      	ldrh	r3, [r3, #12]
 8050e3a:	b29b      	uxth	r3, r3
 8050e3c:	2200      	movs	r2, #0
 8050e3e:	4698      	mov	r8, r3
 8050e40:	4691      	mov	r9, r2
 8050e42:	4642      	mov	r2, r8
 8050e44:	464b      	mov	r3, r9
 8050e46:	4620      	mov	r0, r4
 8050e48:	4629      	mov	r1, r5
 8050e4a:	f7ef fac9 	bl	80403e0 <__aeabi_uldivmod>
 8050e4e:	4602      	mov	r2, r0
 8050e50:	460b      	mov	r3, r1
 8050e52:	69bb      	ldr	r3, [r7, #24]
 8050e54:	895b      	ldrh	r3, [r3, #10]
 8050e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8050e5a:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8050e5c:	687b      	ldr	r3, [r7, #4]
 8050e5e:	79db      	ldrb	r3, [r3, #7]
 8050e60:	2b02      	cmp	r3, #2
 8050e62:	d10e      	bne.n	8050e82 <get_fat+0x206>
					if (cofs <= clen) {
 8050e64:	697a      	ldr	r2, [r7, #20]
 8050e66:	693b      	ldr	r3, [r7, #16]
 8050e68:	429a      	cmp	r2, r3
 8050e6a:	d80a      	bhi.n	8050e82 <get_fat+0x206>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8050e6c:	697a      	ldr	r2, [r7, #20]
 8050e6e:	693b      	ldr	r3, [r7, #16]
 8050e70:	429a      	cmp	r2, r3
 8050e72:	d002      	beq.n	8050e7a <get_fat+0x1fe>
 8050e74:	683b      	ldr	r3, [r7, #0]
 8050e76:	3301      	adds	r3, #1
 8050e78:	e001      	b.n	8050e7e <get_fat+0x202>
 8050e7a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8050e7e:	61fb      	str	r3, [r7, #28]
						break;
 8050e80:	e04b      	b.n	8050f1a <get_fat+0x29e>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8050e82:	687b      	ldr	r3, [r7, #4]
 8050e84:	79db      	ldrb	r3, [r3, #7]
 8050e86:	2b03      	cmp	r3, #3
 8050e88:	d108      	bne.n	8050e9c <get_fat+0x220>
 8050e8a:	687b      	ldr	r3, [r7, #4]
 8050e8c:	699b      	ldr	r3, [r3, #24]
 8050e8e:	697a      	ldr	r2, [r7, #20]
 8050e90:	429a      	cmp	r2, r3
 8050e92:	d203      	bcs.n	8050e9c <get_fat+0x220>
					val = clst + 1; 	/* Generate the value */
 8050e94:	683b      	ldr	r3, [r7, #0]
 8050e96:	3301      	adds	r3, #1
 8050e98:	61fb      	str	r3, [r7, #28]
					break;
 8050e9a:	e03e      	b.n	8050f1a <get_fat+0x29e>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 8050e9c:	687b      	ldr	r3, [r7, #4]
 8050e9e:	79db      	ldrb	r3, [r3, #7]
 8050ea0:	2b02      	cmp	r3, #2
 8050ea2:	d02e      	beq.n	8050f02 <get_fat+0x286>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8050ea4:	687b      	ldr	r3, [r7, #4]
 8050ea6:	69db      	ldr	r3, [r3, #28]
 8050ea8:	2b00      	cmp	r3, #0
 8050eaa:	d003      	beq.n	8050eb4 <get_fat+0x238>
						val = 0x7FFFFFFF;	/* Generate EOC */
 8050eac:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8050eb0:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 8050eb2:	e032      	b.n	8050f1a <get_fat+0x29e>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8050eb4:	69bb      	ldr	r3, [r7, #24]
 8050eb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8050eb8:	69bb      	ldr	r3, [r7, #24]
 8050eba:	899b      	ldrh	r3, [r3, #12]
 8050ebc:	089b      	lsrs	r3, r3, #2
 8050ebe:	b29b      	uxth	r3, r3
 8050ec0:	4619      	mov	r1, r3
 8050ec2:	683b      	ldr	r3, [r7, #0]
 8050ec4:	fbb3 f3f1 	udiv	r3, r3, r1
 8050ec8:	4413      	add	r3, r2
 8050eca:	4619      	mov	r1, r3
 8050ecc:	69b8      	ldr	r0, [r7, #24]
 8050ece:	f7ff fe17 	bl	8050b00 <move_window>
 8050ed2:	4603      	mov	r3, r0
 8050ed4:	2b00      	cmp	r3, #0
 8050ed6:	d11f      	bne.n	8050f18 <get_fat+0x29c>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8050ed8:	69bb      	ldr	r3, [r7, #24]
 8050eda:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8050ede:	683b      	ldr	r3, [r7, #0]
 8050ee0:	009b      	lsls	r3, r3, #2
 8050ee2:	69ba      	ldr	r2, [r7, #24]
 8050ee4:	8992      	ldrh	r2, [r2, #12]
 8050ee6:	fbb3 f0f2 	udiv	r0, r3, r2
 8050eea:	fb00 f202 	mul.w	r2, r0, r2
 8050eee:	1a9b      	subs	r3, r3, r2
 8050ef0:	440b      	add	r3, r1
 8050ef2:	4618      	mov	r0, r3
 8050ef4:	f7ff f9d8 	bl	80502a8 <ld_dword>
 8050ef8:	4603      	mov	r3, r0
 8050efa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8050efe:	61fb      	str	r3, [r7, #28]
					break;
 8050f00:	e00b      	b.n	8050f1a <get_fat+0x29e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8050f02:	2301      	movs	r3, #1
 8050f04:	61fb      	str	r3, [r7, #28]
 8050f06:	e008      	b.n	8050f1a <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8050f08:	bf00      	nop
 8050f0a:	e006      	b.n	8050f1a <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8050f0c:	bf00      	nop
 8050f0e:	e004      	b.n	8050f1a <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8050f10:	bf00      	nop
 8050f12:	e002      	b.n	8050f1a <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8050f14:	bf00      	nop
 8050f16:	e000      	b.n	8050f1a <get_fat+0x29e>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8050f18:	bf00      	nop
		}
	}

	return val;
 8050f1a:	69fb      	ldr	r3, [r7, #28]
}
 8050f1c:	4618      	mov	r0, r3
 8050f1e:	3720      	adds	r7, #32
 8050f20:	46bd      	mov	sp, r7
 8050f22:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8050f26:	bf00      	nop

08050f28 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8050f28:	b590      	push	{r4, r7, lr}
 8050f2a:	b089      	sub	sp, #36	; 0x24
 8050f2c:	af00      	add	r7, sp, #0
 8050f2e:	60f8      	str	r0, [r7, #12]
 8050f30:	60b9      	str	r1, [r7, #8]
 8050f32:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8050f34:	2302      	movs	r3, #2
 8050f36:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8050f38:	68bb      	ldr	r3, [r7, #8]
 8050f3a:	2b01      	cmp	r3, #1
 8050f3c:	f240 8106 	bls.w	805114c <put_fat+0x224>
 8050f40:	68fb      	ldr	r3, [r7, #12]
 8050f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8050f44:	68ba      	ldr	r2, [r7, #8]
 8050f46:	429a      	cmp	r2, r3
 8050f48:	f080 8100 	bcs.w	805114c <put_fat+0x224>
		switch (fs->fs_type) {
 8050f4c:	68fb      	ldr	r3, [r7, #12]
 8050f4e:	781b      	ldrb	r3, [r3, #0]
 8050f50:	2b04      	cmp	r3, #4
 8050f52:	f300 8104 	bgt.w	805115e <put_fat+0x236>
 8050f56:	2b03      	cmp	r3, #3
 8050f58:	f280 80b3 	bge.w	80510c2 <put_fat+0x19a>
 8050f5c:	2b01      	cmp	r3, #1
 8050f5e:	d003      	beq.n	8050f68 <put_fat+0x40>
 8050f60:	2b02      	cmp	r3, #2
 8050f62:	f000 8083 	beq.w	805106c <put_fat+0x144>
 8050f66:	e0fa      	b.n	805115e <put_fat+0x236>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8050f68:	68bb      	ldr	r3, [r7, #8]
 8050f6a:	61bb      	str	r3, [r7, #24]
 8050f6c:	69bb      	ldr	r3, [r7, #24]
 8050f6e:	085b      	lsrs	r3, r3, #1
 8050f70:	69ba      	ldr	r2, [r7, #24]
 8050f72:	4413      	add	r3, r2
 8050f74:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8050f76:	68fb      	ldr	r3, [r7, #12]
 8050f78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8050f7a:	68fb      	ldr	r3, [r7, #12]
 8050f7c:	899b      	ldrh	r3, [r3, #12]
 8050f7e:	4619      	mov	r1, r3
 8050f80:	69bb      	ldr	r3, [r7, #24]
 8050f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8050f86:	4413      	add	r3, r2
 8050f88:	4619      	mov	r1, r3
 8050f8a:	68f8      	ldr	r0, [r7, #12]
 8050f8c:	f7ff fdb8 	bl	8050b00 <move_window>
 8050f90:	4603      	mov	r3, r0
 8050f92:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8050f94:	7ffb      	ldrb	r3, [r7, #31]
 8050f96:	2b00      	cmp	r3, #0
 8050f98:	f040 80da 	bne.w	8051150 <put_fat+0x228>
			p = fs->win + bc++ % SS(fs);
 8050f9c:	68fb      	ldr	r3, [r7, #12]
 8050f9e:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8050fa2:	69bb      	ldr	r3, [r7, #24]
 8050fa4:	1c5a      	adds	r2, r3, #1
 8050fa6:	61ba      	str	r2, [r7, #24]
 8050fa8:	68fa      	ldr	r2, [r7, #12]
 8050faa:	8992      	ldrh	r2, [r2, #12]
 8050fac:	fbb3 f0f2 	udiv	r0, r3, r2
 8050fb0:	fb00 f202 	mul.w	r2, r0, r2
 8050fb4:	1a9b      	subs	r3, r3, r2
 8050fb6:	440b      	add	r3, r1
 8050fb8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8050fba:	68bb      	ldr	r3, [r7, #8]
 8050fbc:	f003 0301 	and.w	r3, r3, #1
 8050fc0:	2b00      	cmp	r3, #0
 8050fc2:	d00d      	beq.n	8050fe0 <put_fat+0xb8>
 8050fc4:	697b      	ldr	r3, [r7, #20]
 8050fc6:	781b      	ldrb	r3, [r3, #0]
 8050fc8:	b25b      	sxtb	r3, r3
 8050fca:	f003 030f 	and.w	r3, r3, #15
 8050fce:	b25a      	sxtb	r2, r3
 8050fd0:	687b      	ldr	r3, [r7, #4]
 8050fd2:	b2db      	uxtb	r3, r3
 8050fd4:	011b      	lsls	r3, r3, #4
 8050fd6:	b25b      	sxtb	r3, r3
 8050fd8:	4313      	orrs	r3, r2
 8050fda:	b25b      	sxtb	r3, r3
 8050fdc:	b2db      	uxtb	r3, r3
 8050fde:	e001      	b.n	8050fe4 <put_fat+0xbc>
 8050fe0:	687b      	ldr	r3, [r7, #4]
 8050fe2:	b2db      	uxtb	r3, r3
 8050fe4:	697a      	ldr	r2, [r7, #20]
 8050fe6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8050fe8:	68fb      	ldr	r3, [r7, #12]
 8050fea:	2201      	movs	r2, #1
 8050fec:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8050fee:	68fb      	ldr	r3, [r7, #12]
 8050ff0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8050ff2:	68fb      	ldr	r3, [r7, #12]
 8050ff4:	899b      	ldrh	r3, [r3, #12]
 8050ff6:	4619      	mov	r1, r3
 8050ff8:	69bb      	ldr	r3, [r7, #24]
 8050ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8050ffe:	4413      	add	r3, r2
 8051000:	4619      	mov	r1, r3
 8051002:	68f8      	ldr	r0, [r7, #12]
 8051004:	f7ff fd7c 	bl	8050b00 <move_window>
 8051008:	4603      	mov	r3, r0
 805100a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 805100c:	7ffb      	ldrb	r3, [r7, #31]
 805100e:	2b00      	cmp	r3, #0
 8051010:	f040 80a0 	bne.w	8051154 <put_fat+0x22c>
			p = fs->win + bc % SS(fs);
 8051014:	68fb      	ldr	r3, [r7, #12]
 8051016:	f103 0150 	add.w	r1, r3, #80	; 0x50
 805101a:	68fb      	ldr	r3, [r7, #12]
 805101c:	899b      	ldrh	r3, [r3, #12]
 805101e:	461a      	mov	r2, r3
 8051020:	69bb      	ldr	r3, [r7, #24]
 8051022:	fbb3 f0f2 	udiv	r0, r3, r2
 8051026:	fb00 f202 	mul.w	r2, r0, r2
 805102a:	1a9b      	subs	r3, r3, r2
 805102c:	440b      	add	r3, r1
 805102e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8051030:	68bb      	ldr	r3, [r7, #8]
 8051032:	f003 0301 	and.w	r3, r3, #1
 8051036:	2b00      	cmp	r3, #0
 8051038:	d003      	beq.n	8051042 <put_fat+0x11a>
 805103a:	687b      	ldr	r3, [r7, #4]
 805103c:	091b      	lsrs	r3, r3, #4
 805103e:	b2db      	uxtb	r3, r3
 8051040:	e00e      	b.n	8051060 <put_fat+0x138>
 8051042:	697b      	ldr	r3, [r7, #20]
 8051044:	781b      	ldrb	r3, [r3, #0]
 8051046:	b25b      	sxtb	r3, r3
 8051048:	f023 030f 	bic.w	r3, r3, #15
 805104c:	b25a      	sxtb	r2, r3
 805104e:	687b      	ldr	r3, [r7, #4]
 8051050:	0a1b      	lsrs	r3, r3, #8
 8051052:	b25b      	sxtb	r3, r3
 8051054:	f003 030f 	and.w	r3, r3, #15
 8051058:	b25b      	sxtb	r3, r3
 805105a:	4313      	orrs	r3, r2
 805105c:	b25b      	sxtb	r3, r3
 805105e:	b2db      	uxtb	r3, r3
 8051060:	697a      	ldr	r2, [r7, #20]
 8051062:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8051064:	68fb      	ldr	r3, [r7, #12]
 8051066:	2201      	movs	r2, #1
 8051068:	70da      	strb	r2, [r3, #3]
			break;
 805106a:	e078      	b.n	805115e <put_fat+0x236>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 805106c:	68fb      	ldr	r3, [r7, #12]
 805106e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8051070:	68fb      	ldr	r3, [r7, #12]
 8051072:	899b      	ldrh	r3, [r3, #12]
 8051074:	085b      	lsrs	r3, r3, #1
 8051076:	b29b      	uxth	r3, r3
 8051078:	4619      	mov	r1, r3
 805107a:	68bb      	ldr	r3, [r7, #8]
 805107c:	fbb3 f3f1 	udiv	r3, r3, r1
 8051080:	4413      	add	r3, r2
 8051082:	4619      	mov	r1, r3
 8051084:	68f8      	ldr	r0, [r7, #12]
 8051086:	f7ff fd3b 	bl	8050b00 <move_window>
 805108a:	4603      	mov	r3, r0
 805108c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 805108e:	7ffb      	ldrb	r3, [r7, #31]
 8051090:	2b00      	cmp	r3, #0
 8051092:	d161      	bne.n	8051158 <put_fat+0x230>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8051094:	68fb      	ldr	r3, [r7, #12]
 8051096:	f103 0150 	add.w	r1, r3, #80	; 0x50
 805109a:	68bb      	ldr	r3, [r7, #8]
 805109c:	005b      	lsls	r3, r3, #1
 805109e:	68fa      	ldr	r2, [r7, #12]
 80510a0:	8992      	ldrh	r2, [r2, #12]
 80510a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80510a6:	fb00 f202 	mul.w	r2, r0, r2
 80510aa:	1a9b      	subs	r3, r3, r2
 80510ac:	440b      	add	r3, r1
 80510ae:	687a      	ldr	r2, [r7, #4]
 80510b0:	b292      	uxth	r2, r2
 80510b2:	4611      	mov	r1, r2
 80510b4:	4618      	mov	r0, r3
 80510b6:	f7ff f9f5 	bl	80504a4 <st_word>
			fs->wflag = 1;
 80510ba:	68fb      	ldr	r3, [r7, #12]
 80510bc:	2201      	movs	r2, #1
 80510be:	70da      	strb	r2, [r3, #3]
			break;
 80510c0:	e04d      	b.n	805115e <put_fat+0x236>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80510c2:	68fb      	ldr	r3, [r7, #12]
 80510c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80510c6:	68fb      	ldr	r3, [r7, #12]
 80510c8:	899b      	ldrh	r3, [r3, #12]
 80510ca:	089b      	lsrs	r3, r3, #2
 80510cc:	b29b      	uxth	r3, r3
 80510ce:	4619      	mov	r1, r3
 80510d0:	68bb      	ldr	r3, [r7, #8]
 80510d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80510d6:	4413      	add	r3, r2
 80510d8:	4619      	mov	r1, r3
 80510da:	68f8      	ldr	r0, [r7, #12]
 80510dc:	f7ff fd10 	bl	8050b00 <move_window>
 80510e0:	4603      	mov	r3, r0
 80510e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80510e4:	7ffb      	ldrb	r3, [r7, #31]
 80510e6:	2b00      	cmp	r3, #0
 80510e8:	d138      	bne.n	805115c <put_fat+0x234>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 80510ea:	68fb      	ldr	r3, [r7, #12]
 80510ec:	781b      	ldrb	r3, [r3, #0]
 80510ee:	2b04      	cmp	r3, #4
 80510f0:	d017      	beq.n	8051122 <put_fat+0x1fa>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80510f2:	687b      	ldr	r3, [r7, #4]
 80510f4:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80510f8:	68fb      	ldr	r3, [r7, #12]
 80510fa:	f103 0150 	add.w	r1, r3, #80	; 0x50
 80510fe:	68bb      	ldr	r3, [r7, #8]
 8051100:	009b      	lsls	r3, r3, #2
 8051102:	68fa      	ldr	r2, [r7, #12]
 8051104:	8992      	ldrh	r2, [r2, #12]
 8051106:	fbb3 f0f2 	udiv	r0, r3, r2
 805110a:	fb00 f202 	mul.w	r2, r0, r2
 805110e:	1a9b      	subs	r3, r3, r2
 8051110:	440b      	add	r3, r1
 8051112:	4618      	mov	r0, r3
 8051114:	f7ff f8c8 	bl	80502a8 <ld_dword>
 8051118:	4603      	mov	r3, r0
 805111a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 805111e:	4323      	orrs	r3, r4
 8051120:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8051122:	68fb      	ldr	r3, [r7, #12]
 8051124:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8051128:	68bb      	ldr	r3, [r7, #8]
 805112a:	009b      	lsls	r3, r3, #2
 805112c:	68fa      	ldr	r2, [r7, #12]
 805112e:	8992      	ldrh	r2, [r2, #12]
 8051130:	fbb3 f0f2 	udiv	r0, r3, r2
 8051134:	fb00 f202 	mul.w	r2, r0, r2
 8051138:	1a9b      	subs	r3, r3, r2
 805113a:	440b      	add	r3, r1
 805113c:	6879      	ldr	r1, [r7, #4]
 805113e:	4618      	mov	r0, r3
 8051140:	f7ff f9cb 	bl	80504da <st_dword>
			fs->wflag = 1;
 8051144:	68fb      	ldr	r3, [r7, #12]
 8051146:	2201      	movs	r2, #1
 8051148:	70da      	strb	r2, [r3, #3]
			break;
 805114a:	e008      	b.n	805115e <put_fat+0x236>
		}
	}
 805114c:	bf00      	nop
 805114e:	e006      	b.n	805115e <put_fat+0x236>
			if (res != FR_OK) break;
 8051150:	bf00      	nop
 8051152:	e004      	b.n	805115e <put_fat+0x236>
			if (res != FR_OK) break;
 8051154:	bf00      	nop
 8051156:	e002      	b.n	805115e <put_fat+0x236>
			if (res != FR_OK) break;
 8051158:	bf00      	nop
 805115a:	e000      	b.n	805115e <put_fat+0x236>
			if (res != FR_OK) break;
 805115c:	bf00      	nop
	return res;
 805115e:	7ffb      	ldrb	r3, [r7, #31]
}
 8051160:	4618      	mov	r0, r3
 8051162:	3724      	adds	r7, #36	; 0x24
 8051164:	46bd      	mov	sp, r7
 8051166:	bd90      	pop	{r4, r7, pc}

08051168 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 8051168:	b580      	push	{r7, lr}
 805116a:	b08a      	sub	sp, #40	; 0x28
 805116c:	af00      	add	r7, sp, #0
 805116e:	60f8      	str	r0, [r7, #12]
 8051170:	60b9      	str	r1, [r7, #8]
 8051172:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8051174:	68bb      	ldr	r3, [r7, #8]
 8051176:	3b02      	subs	r3, #2
 8051178:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 805117a:	68fb      	ldr	r3, [r7, #12]
 805117c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 805117e:	3b02      	subs	r3, #2
 8051180:	68ba      	ldr	r2, [r7, #8]
 8051182:	429a      	cmp	r2, r3
 8051184:	d301      	bcc.n	805118a <find_bitmap+0x22>
 8051186:	2300      	movs	r3, #0
 8051188:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 805118a:	68bb      	ldr	r3, [r7, #8]
 805118c:	61fb      	str	r3, [r7, #28]
 805118e:	69fb      	ldr	r3, [r7, #28]
 8051190:	61bb      	str	r3, [r7, #24]
 8051192:	2300      	movs	r3, #0
 8051194:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8051196:	68fb      	ldr	r3, [r7, #12]
 8051198:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 805119a:	69fb      	ldr	r3, [r7, #28]
 805119c:	08db      	lsrs	r3, r3, #3
 805119e:	68f9      	ldr	r1, [r7, #12]
 80511a0:	8989      	ldrh	r1, [r1, #12]
 80511a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80511a6:	4413      	add	r3, r2
 80511a8:	4619      	mov	r1, r3
 80511aa:	68f8      	ldr	r0, [r7, #12]
 80511ac:	f7ff fca8 	bl	8050b00 <move_window>
 80511b0:	4603      	mov	r3, r0
 80511b2:	2b00      	cmp	r3, #0
 80511b4:	d002      	beq.n	80511bc <find_bitmap+0x54>
 80511b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80511ba:	e058      	b.n	805126e <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 80511bc:	69fb      	ldr	r3, [r7, #28]
 80511be:	08db      	lsrs	r3, r3, #3
 80511c0:	68fa      	ldr	r2, [r7, #12]
 80511c2:	8992      	ldrh	r2, [r2, #12]
 80511c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80511c8:	fb01 f202 	mul.w	r2, r1, r2
 80511cc:	1a9b      	subs	r3, r3, r2
 80511ce:	623b      	str	r3, [r7, #32]
 80511d0:	69fb      	ldr	r3, [r7, #28]
 80511d2:	f003 0307 	and.w	r3, r3, #7
 80511d6:	2201      	movs	r2, #1
 80511d8:	fa02 f303 	lsl.w	r3, r2, r3
 80511dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 80511e0:	68fa      	ldr	r2, [r7, #12]
 80511e2:	6a3b      	ldr	r3, [r7, #32]
 80511e4:	4413      	add	r3, r2
 80511e6:	3350      	adds	r3, #80	; 0x50
 80511e8:	781a      	ldrb	r2, [r3, #0]
 80511ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80511ee:	4013      	ands	r3, r2
 80511f0:	74fb      	strb	r3, [r7, #19]
 80511f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80511f6:	005b      	lsls	r3, r3, #1
 80511f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 80511fc:	69fb      	ldr	r3, [r7, #28]
 80511fe:	3301      	adds	r3, #1
 8051200:	61fb      	str	r3, [r7, #28]
 8051202:	68fb      	ldr	r3, [r7, #12]
 8051204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8051206:	3b02      	subs	r3, #2
 8051208:	69fa      	ldr	r2, [r7, #28]
 805120a:	429a      	cmp	r2, r3
 805120c:	d307      	bcc.n	805121e <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 805120e:	2300      	movs	r3, #0
 8051210:	61fb      	str	r3, [r7, #28]
 8051212:	2300      	movs	r3, #0
 8051214:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8051218:	68fb      	ldr	r3, [r7, #12]
 805121a:	899b      	ldrh	r3, [r3, #12]
 805121c:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 805121e:	7cfb      	ldrb	r3, [r7, #19]
 8051220:	2b00      	cmp	r3, #0
 8051222:	d109      	bne.n	8051238 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 8051224:	697b      	ldr	r3, [r7, #20]
 8051226:	3301      	adds	r3, #1
 8051228:	617b      	str	r3, [r7, #20]
 805122a:	697a      	ldr	r2, [r7, #20]
 805122c:	687b      	ldr	r3, [r7, #4]
 805122e:	429a      	cmp	r2, r3
 8051230:	d106      	bne.n	8051240 <find_bitmap+0xd8>
 8051232:	69bb      	ldr	r3, [r7, #24]
 8051234:	3302      	adds	r3, #2
 8051236:	e01a      	b.n	805126e <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 8051238:	69fb      	ldr	r3, [r7, #28]
 805123a:	61bb      	str	r3, [r7, #24]
 805123c:	2300      	movs	r3, #0
 805123e:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 8051240:	69fa      	ldr	r2, [r7, #28]
 8051242:	68bb      	ldr	r3, [r7, #8]
 8051244:	429a      	cmp	r2, r3
 8051246:	d101      	bne.n	805124c <find_bitmap+0xe4>
 8051248:	2300      	movs	r3, #0
 805124a:	e010      	b.n	805126e <find_bitmap+0x106>
			} while (bm);
 805124c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8051250:	2b00      	cmp	r3, #0
 8051252:	d1c5      	bne.n	80511e0 <find_bitmap+0x78>
			bm = 1;
 8051254:	2301      	movs	r3, #1
 8051256:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 805125a:	6a3b      	ldr	r3, [r7, #32]
 805125c:	3301      	adds	r3, #1
 805125e:	623b      	str	r3, [r7, #32]
 8051260:	68fb      	ldr	r3, [r7, #12]
 8051262:	899b      	ldrh	r3, [r3, #12]
 8051264:	461a      	mov	r2, r3
 8051266:	6a3b      	ldr	r3, [r7, #32]
 8051268:	4293      	cmp	r3, r2
 805126a:	d3b9      	bcc.n	80511e0 <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 805126c:	e793      	b.n	8051196 <find_bitmap+0x2e>
	}
}
 805126e:	4618      	mov	r0, r3
 8051270:	3728      	adds	r7, #40	; 0x28
 8051272:	46bd      	mov	sp, r7
 8051274:	bd80      	pop	{r7, pc}

08051276 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 8051276:	b580      	push	{r7, lr}
 8051278:	b088      	sub	sp, #32
 805127a:	af00      	add	r7, sp, #0
 805127c:	60f8      	str	r0, [r7, #12]
 805127e:	60b9      	str	r1, [r7, #8]
 8051280:	607a      	str	r2, [r7, #4]
 8051282:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8051284:	68bb      	ldr	r3, [r7, #8]
 8051286:	3b02      	subs	r3, #2
 8051288:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 805128a:	68fb      	ldr	r3, [r7, #12]
 805128c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 805128e:	68bb      	ldr	r3, [r7, #8]
 8051290:	08db      	lsrs	r3, r3, #3
 8051292:	68f9      	ldr	r1, [r7, #12]
 8051294:	8989      	ldrh	r1, [r1, #12]
 8051296:	fbb3 f3f1 	udiv	r3, r3, r1
 805129a:	4413      	add	r3, r2
 805129c:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 805129e:	68bb      	ldr	r3, [r7, #8]
 80512a0:	08db      	lsrs	r3, r3, #3
 80512a2:	68fa      	ldr	r2, [r7, #12]
 80512a4:	8992      	ldrh	r2, [r2, #12]
 80512a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80512aa:	fb01 f202 	mul.w	r2, r1, r2
 80512ae:	1a9b      	subs	r3, r3, r2
 80512b0:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 80512b2:	68bb      	ldr	r3, [r7, #8]
 80512b4:	f003 0307 	and.w	r3, r3, #7
 80512b8:	2201      	movs	r2, #1
 80512ba:	fa02 f303 	lsl.w	r3, r2, r3
 80512be:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 80512c0:	697b      	ldr	r3, [r7, #20]
 80512c2:	1c5a      	adds	r2, r3, #1
 80512c4:	617a      	str	r2, [r7, #20]
 80512c6:	4619      	mov	r1, r3
 80512c8:	68f8      	ldr	r0, [r7, #12]
 80512ca:	f7ff fc19 	bl	8050b00 <move_window>
 80512ce:	4603      	mov	r3, r0
 80512d0:	2b00      	cmp	r3, #0
 80512d2:	d001      	beq.n	80512d8 <change_bitmap+0x62>
 80512d4:	2301      	movs	r3, #1
 80512d6:	e03f      	b.n	8051358 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 80512d8:	68fa      	ldr	r2, [r7, #12]
 80512da:	69bb      	ldr	r3, [r7, #24]
 80512dc:	4413      	add	r3, r2
 80512de:	3350      	adds	r3, #80	; 0x50
 80512e0:	781a      	ldrb	r2, [r3, #0]
 80512e2:	7ffb      	ldrb	r3, [r7, #31]
 80512e4:	4013      	ands	r3, r2
 80512e6:	b2db      	uxtb	r3, r3
 80512e8:	2b00      	cmp	r3, #0
 80512ea:	bf14      	ite	ne
 80512ec:	2301      	movne	r3, #1
 80512ee:	2300      	moveq	r3, #0
 80512f0:	b2db      	uxtb	r3, r3
 80512f2:	461a      	mov	r2, r3
 80512f4:	683b      	ldr	r3, [r7, #0]
 80512f6:	4293      	cmp	r3, r2
 80512f8:	d101      	bne.n	80512fe <change_bitmap+0x88>
 80512fa:	2302      	movs	r3, #2
 80512fc:	e02c      	b.n	8051358 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 80512fe:	68fa      	ldr	r2, [r7, #12]
 8051300:	69bb      	ldr	r3, [r7, #24]
 8051302:	4413      	add	r3, r2
 8051304:	3350      	adds	r3, #80	; 0x50
 8051306:	781a      	ldrb	r2, [r3, #0]
 8051308:	7ffb      	ldrb	r3, [r7, #31]
 805130a:	4053      	eors	r3, r2
 805130c:	b2d9      	uxtb	r1, r3
 805130e:	68fa      	ldr	r2, [r7, #12]
 8051310:	69bb      	ldr	r3, [r7, #24]
 8051312:	4413      	add	r3, r2
 8051314:	3350      	adds	r3, #80	; 0x50
 8051316:	460a      	mov	r2, r1
 8051318:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 805131a:	68fb      	ldr	r3, [r7, #12]
 805131c:	2201      	movs	r2, #1
 805131e:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8051320:	687b      	ldr	r3, [r7, #4]
 8051322:	3b01      	subs	r3, #1
 8051324:	607b      	str	r3, [r7, #4]
 8051326:	687b      	ldr	r3, [r7, #4]
 8051328:	2b00      	cmp	r3, #0
 805132a:	d101      	bne.n	8051330 <change_bitmap+0xba>
 805132c:	2300      	movs	r3, #0
 805132e:	e013      	b.n	8051358 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 8051330:	7ffb      	ldrb	r3, [r7, #31]
 8051332:	005b      	lsls	r3, r3, #1
 8051334:	77fb      	strb	r3, [r7, #31]
 8051336:	7ffb      	ldrb	r3, [r7, #31]
 8051338:	2b00      	cmp	r3, #0
 805133a:	d1cd      	bne.n	80512d8 <change_bitmap+0x62>
			bm = 1;
 805133c:	2301      	movs	r3, #1
 805133e:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 8051340:	69bb      	ldr	r3, [r7, #24]
 8051342:	3301      	adds	r3, #1
 8051344:	61bb      	str	r3, [r7, #24]
 8051346:	68fb      	ldr	r3, [r7, #12]
 8051348:	899b      	ldrh	r3, [r3, #12]
 805134a:	461a      	mov	r2, r3
 805134c:	69bb      	ldr	r3, [r7, #24]
 805134e:	4293      	cmp	r3, r2
 8051350:	d3c2      	bcc.n	80512d8 <change_bitmap+0x62>
		i = 0;
 8051352:	2300      	movs	r3, #0
 8051354:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8051356:	e7b3      	b.n	80512c0 <change_bitmap+0x4a>
	}
}
 8051358:	4618      	mov	r0, r3
 805135a:	3720      	adds	r7, #32
 805135c:	46bd      	mov	sp, r7
 805135e:	bd80      	pop	{r7, pc}

08051360 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 8051360:	b580      	push	{r7, lr}
 8051362:	b086      	sub	sp, #24
 8051364:	af00      	add	r7, sp, #0
 8051366:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 8051368:	687b      	ldr	r3, [r7, #4]
 805136a:	79db      	ldrb	r3, [r3, #7]
 805136c:	2b03      	cmp	r3, #3
 805136e:	d121      	bne.n	80513b4 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8051370:	687b      	ldr	r3, [r7, #4]
 8051372:	689b      	ldr	r3, [r3, #8]
 8051374:	617b      	str	r3, [r7, #20]
 8051376:	687b      	ldr	r3, [r7, #4]
 8051378:	699b      	ldr	r3, [r3, #24]
 805137a:	613b      	str	r3, [r7, #16]
 805137c:	e014      	b.n	80513a8 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 805137e:	687b      	ldr	r3, [r7, #4]
 8051380:	6818      	ldr	r0, [r3, #0]
 8051382:	697b      	ldr	r3, [r7, #20]
 8051384:	3301      	adds	r3, #1
 8051386:	461a      	mov	r2, r3
 8051388:	6979      	ldr	r1, [r7, #20]
 805138a:	f7ff fdcd 	bl	8050f28 <put_fat>
 805138e:	4603      	mov	r3, r0
 8051390:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 8051392:	7bfb      	ldrb	r3, [r7, #15]
 8051394:	2b00      	cmp	r3, #0
 8051396:	d001      	beq.n	805139c <fill_first_frag+0x3c>
 8051398:	7bfb      	ldrb	r3, [r7, #15]
 805139a:	e00c      	b.n	80513b6 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 805139c:	697b      	ldr	r3, [r7, #20]
 805139e:	3301      	adds	r3, #1
 80513a0:	617b      	str	r3, [r7, #20]
 80513a2:	693b      	ldr	r3, [r7, #16]
 80513a4:	3b01      	subs	r3, #1
 80513a6:	613b      	str	r3, [r7, #16]
 80513a8:	693b      	ldr	r3, [r7, #16]
 80513aa:	2b00      	cmp	r3, #0
 80513ac:	d1e7      	bne.n	805137e <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 80513ae:	687b      	ldr	r3, [r7, #4]
 80513b0:	2200      	movs	r2, #0
 80513b2:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 80513b4:	2300      	movs	r3, #0
}
 80513b6:	4618      	mov	r0, r3
 80513b8:	3718      	adds	r7, #24
 80513ba:	46bd      	mov	sp, r7
 80513bc:	bd80      	pop	{r7, pc}

080513be <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 80513be:	b580      	push	{r7, lr}
 80513c0:	b086      	sub	sp, #24
 80513c2:	af00      	add	r7, sp, #0
 80513c4:	60f8      	str	r0, [r7, #12]
 80513c6:	60b9      	str	r1, [r7, #8]
 80513c8:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 80513ca:	e020      	b.n	805140e <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 80513cc:	68fb      	ldr	r3, [r7, #12]
 80513ce:	6818      	ldr	r0, [r3, #0]
 80513d0:	68fb      	ldr	r3, [r7, #12]
 80513d2:	69db      	ldr	r3, [r3, #28]
 80513d4:	68ba      	ldr	r2, [r7, #8]
 80513d6:	1ad3      	subs	r3, r2, r3
 80513d8:	1c59      	adds	r1, r3, #1
 80513da:	68fb      	ldr	r3, [r7, #12]
 80513dc:	69db      	ldr	r3, [r3, #28]
 80513de:	2b01      	cmp	r3, #1
 80513e0:	d905      	bls.n	80513ee <fill_last_frag+0x30>
 80513e2:	68fb      	ldr	r3, [r7, #12]
 80513e4:	69db      	ldr	r3, [r3, #28]
 80513e6:	68ba      	ldr	r2, [r7, #8]
 80513e8:	1ad3      	subs	r3, r2, r3
 80513ea:	3302      	adds	r3, #2
 80513ec:	e000      	b.n	80513f0 <fill_last_frag+0x32>
 80513ee:	687b      	ldr	r3, [r7, #4]
 80513f0:	461a      	mov	r2, r3
 80513f2:	f7ff fd99 	bl	8050f28 <put_fat>
 80513f6:	4603      	mov	r3, r0
 80513f8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 80513fa:	7dfb      	ldrb	r3, [r7, #23]
 80513fc:	2b00      	cmp	r3, #0
 80513fe:	d001      	beq.n	8051404 <fill_last_frag+0x46>
 8051400:	7dfb      	ldrb	r3, [r7, #23]
 8051402:	e009      	b.n	8051418 <fill_last_frag+0x5a>
		obj->n_frag--;
 8051404:	68fb      	ldr	r3, [r7, #12]
 8051406:	69db      	ldr	r3, [r3, #28]
 8051408:	1e5a      	subs	r2, r3, #1
 805140a:	68fb      	ldr	r3, [r7, #12]
 805140c:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 805140e:	68fb      	ldr	r3, [r7, #12]
 8051410:	69db      	ldr	r3, [r3, #28]
 8051412:	2b00      	cmp	r3, #0
 8051414:	d1da      	bne.n	80513cc <fill_last_frag+0xe>
	}
	return FR_OK;
 8051416:	2300      	movs	r3, #0
}
 8051418:	4618      	mov	r0, r3
 805141a:	3718      	adds	r7, #24
 805141c:	46bd      	mov	sp, r7
 805141e:	bd80      	pop	{r7, pc}

08051420 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8051420:	b580      	push	{r7, lr}
 8051422:	b08a      	sub	sp, #40	; 0x28
 8051424:	af00      	add	r7, sp, #0
 8051426:	60f8      	str	r0, [r7, #12]
 8051428:	60b9      	str	r1, [r7, #8]
 805142a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 805142c:	2300      	movs	r3, #0
 805142e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8051430:	68fb      	ldr	r3, [r7, #12]
 8051432:	681b      	ldr	r3, [r3, #0]
 8051434:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 8051436:	68bb      	ldr	r3, [r7, #8]
 8051438:	627b      	str	r3, [r7, #36]	; 0x24
 805143a:	68bb      	ldr	r3, [r7, #8]
 805143c:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 805143e:	68bb      	ldr	r3, [r7, #8]
 8051440:	2b01      	cmp	r3, #1
 8051442:	d904      	bls.n	805144e <remove_chain+0x2e>
 8051444:	69bb      	ldr	r3, [r7, #24]
 8051446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8051448:	68ba      	ldr	r2, [r7, #8]
 805144a:	429a      	cmp	r2, r3
 805144c:	d301      	bcc.n	8051452 <remove_chain+0x32>
 805144e:	2302      	movs	r3, #2
 8051450:	e096      	b.n	8051580 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8051452:	687b      	ldr	r3, [r7, #4]
 8051454:	2b00      	cmp	r3, #0
 8051456:	d014      	beq.n	8051482 <remove_chain+0x62>
 8051458:	69bb      	ldr	r3, [r7, #24]
 805145a:	781b      	ldrb	r3, [r3, #0]
 805145c:	2b04      	cmp	r3, #4
 805145e:	d103      	bne.n	8051468 <remove_chain+0x48>
 8051460:	68fb      	ldr	r3, [r7, #12]
 8051462:	79db      	ldrb	r3, [r3, #7]
 8051464:	2b02      	cmp	r3, #2
 8051466:	d00c      	beq.n	8051482 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8051468:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 805146c:	6879      	ldr	r1, [r7, #4]
 805146e:	69b8      	ldr	r0, [r7, #24]
 8051470:	f7ff fd5a 	bl	8050f28 <put_fat>
 8051474:	4603      	mov	r3, r0
 8051476:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8051478:	7ffb      	ldrb	r3, [r7, #31]
 805147a:	2b00      	cmp	r3, #0
 805147c:	d001      	beq.n	8051482 <remove_chain+0x62>
 805147e:	7ffb      	ldrb	r3, [r7, #31]
 8051480:	e07e      	b.n	8051580 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8051482:	68b9      	ldr	r1, [r7, #8]
 8051484:	68f8      	ldr	r0, [r7, #12]
 8051486:	f7ff fbf9 	bl	8050c7c <get_fat>
 805148a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 805148c:	697b      	ldr	r3, [r7, #20]
 805148e:	2b00      	cmp	r3, #0
 8051490:	d055      	beq.n	805153e <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8051492:	697b      	ldr	r3, [r7, #20]
 8051494:	2b01      	cmp	r3, #1
 8051496:	d101      	bne.n	805149c <remove_chain+0x7c>
 8051498:	2302      	movs	r3, #2
 805149a:	e071      	b.n	8051580 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 805149c:	697b      	ldr	r3, [r7, #20]
 805149e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80514a2:	d101      	bne.n	80514a8 <remove_chain+0x88>
 80514a4:	2301      	movs	r3, #1
 80514a6:	e06b      	b.n	8051580 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 80514a8:	69bb      	ldr	r3, [r7, #24]
 80514aa:	781b      	ldrb	r3, [r3, #0]
 80514ac:	2b04      	cmp	r3, #4
 80514ae:	d00b      	beq.n	80514c8 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80514b0:	2200      	movs	r2, #0
 80514b2:	68b9      	ldr	r1, [r7, #8]
 80514b4:	69b8      	ldr	r0, [r7, #24]
 80514b6:	f7ff fd37 	bl	8050f28 <put_fat>
 80514ba:	4603      	mov	r3, r0
 80514bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80514be:	7ffb      	ldrb	r3, [r7, #31]
 80514c0:	2b00      	cmp	r3, #0
 80514c2:	d001      	beq.n	80514c8 <remove_chain+0xa8>
 80514c4:	7ffb      	ldrb	r3, [r7, #31]
 80514c6:	e05b      	b.n	8051580 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80514c8:	69bb      	ldr	r3, [r7, #24]
 80514ca:	6a1a      	ldr	r2, [r3, #32]
 80514cc:	69bb      	ldr	r3, [r7, #24]
 80514ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80514d0:	3b02      	subs	r3, #2
 80514d2:	429a      	cmp	r2, r3
 80514d4:	d20b      	bcs.n	80514ee <remove_chain+0xce>
			fs->free_clst++;
 80514d6:	69bb      	ldr	r3, [r7, #24]
 80514d8:	6a1b      	ldr	r3, [r3, #32]
 80514da:	1c5a      	adds	r2, r3, #1
 80514dc:	69bb      	ldr	r3, [r7, #24]
 80514de:	621a      	str	r2, [r3, #32]
			fs->fsi_flag |= 1;
 80514e0:	69bb      	ldr	r3, [r7, #24]
 80514e2:	791b      	ldrb	r3, [r3, #4]
 80514e4:	f043 0301 	orr.w	r3, r3, #1
 80514e8:	b2da      	uxtb	r2, r3
 80514ea:	69bb      	ldr	r3, [r7, #24]
 80514ec:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 80514ee:	6a3b      	ldr	r3, [r7, #32]
 80514f0:	3301      	adds	r3, #1
 80514f2:	697a      	ldr	r2, [r7, #20]
 80514f4:	429a      	cmp	r2, r3
 80514f6:	d102      	bne.n	80514fe <remove_chain+0xde>
			ecl = nxt;
 80514f8:	697b      	ldr	r3, [r7, #20]
 80514fa:	623b      	str	r3, [r7, #32]
 80514fc:	e017      	b.n	805152e <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80514fe:	69bb      	ldr	r3, [r7, #24]
 8051500:	781b      	ldrb	r3, [r3, #0]
 8051502:	2b04      	cmp	r3, #4
 8051504:	d10f      	bne.n	8051526 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 8051506:	6a3a      	ldr	r2, [r7, #32]
 8051508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805150a:	1ad3      	subs	r3, r2, r3
 805150c:	1c5a      	adds	r2, r3, #1
 805150e:	2300      	movs	r3, #0
 8051510:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8051512:	69b8      	ldr	r0, [r7, #24]
 8051514:	f7ff feaf 	bl	8051276 <change_bitmap>
 8051518:	4603      	mov	r3, r0
 805151a:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 805151c:	7ffb      	ldrb	r3, [r7, #31]
 805151e:	2b00      	cmp	r3, #0
 8051520:	d001      	beq.n	8051526 <remove_chain+0x106>
 8051522:	7ffb      	ldrb	r3, [r7, #31]
 8051524:	e02c      	b.n	8051580 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 8051526:	697b      	ldr	r3, [r7, #20]
 8051528:	623b      	str	r3, [r7, #32]
 805152a:	6a3b      	ldr	r3, [r7, #32]
 805152c:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 805152e:	697b      	ldr	r3, [r7, #20]
 8051530:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8051532:	69bb      	ldr	r3, [r7, #24]
 8051534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8051536:	68ba      	ldr	r2, [r7, #8]
 8051538:	429a      	cmp	r2, r3
 805153a:	d3a2      	bcc.n	8051482 <remove_chain+0x62>
 805153c:	e000      	b.n	8051540 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 805153e:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 8051540:	69bb      	ldr	r3, [r7, #24]
 8051542:	781b      	ldrb	r3, [r3, #0]
 8051544:	2b04      	cmp	r3, #4
 8051546:	d11a      	bne.n	805157e <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 8051548:	687b      	ldr	r3, [r7, #4]
 805154a:	2b00      	cmp	r3, #0
 805154c:	d103      	bne.n	8051556 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 805154e:	68fb      	ldr	r3, [r7, #12]
 8051550:	2200      	movs	r2, #0
 8051552:	71da      	strb	r2, [r3, #7]
 8051554:	e013      	b.n	805157e <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 8051556:	68fb      	ldr	r3, [r7, #12]
 8051558:	79db      	ldrb	r3, [r3, #7]
 805155a:	2b03      	cmp	r3, #3
 805155c:	d10f      	bne.n	805157e <remove_chain+0x15e>
 805155e:	68fb      	ldr	r3, [r7, #12]
 8051560:	689b      	ldr	r3, [r3, #8]
 8051562:	687a      	ldr	r2, [r7, #4]
 8051564:	429a      	cmp	r2, r3
 8051566:	d30a      	bcc.n	805157e <remove_chain+0x15e>
 8051568:	68fb      	ldr	r3, [r7, #12]
 805156a:	689a      	ldr	r2, [r3, #8]
 805156c:	68fb      	ldr	r3, [r7, #12]
 805156e:	699b      	ldr	r3, [r3, #24]
 8051570:	4413      	add	r3, r2
 8051572:	687a      	ldr	r2, [r7, #4]
 8051574:	429a      	cmp	r2, r3
 8051576:	d802      	bhi.n	805157e <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 8051578:	68fb      	ldr	r3, [r7, #12]
 805157a:	2202      	movs	r2, #2
 805157c:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 805157e:	2300      	movs	r3, #0
}
 8051580:	4618      	mov	r0, r3
 8051582:	3728      	adds	r7, #40	; 0x28
 8051584:	46bd      	mov	sp, r7
 8051586:	bd80      	pop	{r7, pc}

08051588 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8051588:	b580      	push	{r7, lr}
 805158a:	b088      	sub	sp, #32
 805158c:	af00      	add	r7, sp, #0
 805158e:	6078      	str	r0, [r7, #4]
 8051590:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8051592:	687b      	ldr	r3, [r7, #4]
 8051594:	681b      	ldr	r3, [r3, #0]
 8051596:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8051598:	683b      	ldr	r3, [r7, #0]
 805159a:	2b00      	cmp	r3, #0
 805159c:	d10d      	bne.n	80515ba <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 805159e:	693b      	ldr	r3, [r7, #16]
 80515a0:	69db      	ldr	r3, [r3, #28]
 80515a2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80515a4:	69bb      	ldr	r3, [r7, #24]
 80515a6:	2b00      	cmp	r3, #0
 80515a8:	d004      	beq.n	80515b4 <create_chain+0x2c>
 80515aa:	693b      	ldr	r3, [r7, #16]
 80515ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80515ae:	69ba      	ldr	r2, [r7, #24]
 80515b0:	429a      	cmp	r2, r3
 80515b2:	d31b      	bcc.n	80515ec <create_chain+0x64>
 80515b4:	2301      	movs	r3, #1
 80515b6:	61bb      	str	r3, [r7, #24]
 80515b8:	e018      	b.n	80515ec <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80515ba:	6839      	ldr	r1, [r7, #0]
 80515bc:	6878      	ldr	r0, [r7, #4]
 80515be:	f7ff fb5d 	bl	8050c7c <get_fat>
 80515c2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80515c4:	68fb      	ldr	r3, [r7, #12]
 80515c6:	2b01      	cmp	r3, #1
 80515c8:	d801      	bhi.n	80515ce <create_chain+0x46>
 80515ca:	2301      	movs	r3, #1
 80515cc:	e0d9      	b.n	8051782 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80515ce:	68fb      	ldr	r3, [r7, #12]
 80515d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80515d4:	d101      	bne.n	80515da <create_chain+0x52>
 80515d6:	68fb      	ldr	r3, [r7, #12]
 80515d8:	e0d3      	b.n	8051782 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80515da:	693b      	ldr	r3, [r7, #16]
 80515dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80515de:	68fa      	ldr	r2, [r7, #12]
 80515e0:	429a      	cmp	r2, r3
 80515e2:	d201      	bcs.n	80515e8 <create_chain+0x60>
 80515e4:	68fb      	ldr	r3, [r7, #12]
 80515e6:	e0cc      	b.n	8051782 <create_chain+0x1fa>
		scl = clst;
 80515e8:	683b      	ldr	r3, [r7, #0]
 80515ea:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80515ec:	693b      	ldr	r3, [r7, #16]
 80515ee:	781b      	ldrb	r3, [r3, #0]
 80515f0:	2b04      	cmp	r3, #4
 80515f2:	d164      	bne.n	80516be <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 80515f4:	2201      	movs	r2, #1
 80515f6:	69b9      	ldr	r1, [r7, #24]
 80515f8:	6938      	ldr	r0, [r7, #16]
 80515fa:	f7ff fdb5 	bl	8051168 <find_bitmap>
 80515fe:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8051600:	69fb      	ldr	r3, [r7, #28]
 8051602:	2b00      	cmp	r3, #0
 8051604:	d003      	beq.n	805160e <create_chain+0x86>
 8051606:	69fb      	ldr	r3, [r7, #28]
 8051608:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 805160c:	d101      	bne.n	8051612 <create_chain+0x8a>
 805160e:	69fb      	ldr	r3, [r7, #28]
 8051610:	e0b7      	b.n	8051782 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 8051612:	2301      	movs	r3, #1
 8051614:	2201      	movs	r2, #1
 8051616:	69f9      	ldr	r1, [r7, #28]
 8051618:	6938      	ldr	r0, [r7, #16]
 805161a:	f7ff fe2c 	bl	8051276 <change_bitmap>
 805161e:	4603      	mov	r3, r0
 8051620:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 8051622:	7dfb      	ldrb	r3, [r7, #23]
 8051624:	2b02      	cmp	r3, #2
 8051626:	d101      	bne.n	805162c <create_chain+0xa4>
 8051628:	2301      	movs	r3, #1
 805162a:	e0aa      	b.n	8051782 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 805162c:	7dfb      	ldrb	r3, [r7, #23]
 805162e:	2b01      	cmp	r3, #1
 8051630:	d102      	bne.n	8051638 <create_chain+0xb0>
 8051632:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8051636:	e0a4      	b.n	8051782 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 8051638:	683b      	ldr	r3, [r7, #0]
 805163a:	2b00      	cmp	r3, #0
 805163c:	d103      	bne.n	8051646 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 805163e:	687b      	ldr	r3, [r7, #4]
 8051640:	2202      	movs	r2, #2
 8051642:	71da      	strb	r2, [r3, #7]
 8051644:	e011      	b.n	805166a <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 8051646:	687b      	ldr	r3, [r7, #4]
 8051648:	79db      	ldrb	r3, [r3, #7]
 805164a:	2b02      	cmp	r3, #2
 805164c:	d10d      	bne.n	805166a <create_chain+0xe2>
 805164e:	69bb      	ldr	r3, [r7, #24]
 8051650:	3301      	adds	r3, #1
 8051652:	69fa      	ldr	r2, [r7, #28]
 8051654:	429a      	cmp	r2, r3
 8051656:	d008      	beq.n	805166a <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8051658:	687b      	ldr	r3, [r7, #4]
 805165a:	689b      	ldr	r3, [r3, #8]
 805165c:	69ba      	ldr	r2, [r7, #24]
 805165e:	1ad2      	subs	r2, r2, r3
 8051660:	687b      	ldr	r3, [r7, #4]
 8051662:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8051664:	687b      	ldr	r3, [r7, #4]
 8051666:	2203      	movs	r2, #3
 8051668:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 805166a:	687b      	ldr	r3, [r7, #4]
 805166c:	79db      	ldrb	r3, [r3, #7]
 805166e:	2b02      	cmp	r3, #2
 8051670:	d064      	beq.n	805173c <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8051672:	683b      	ldr	r3, [r7, #0]
 8051674:	3301      	adds	r3, #1
 8051676:	69fa      	ldr	r2, [r7, #28]
 8051678:	429a      	cmp	r2, r3
 805167a:	d10b      	bne.n	8051694 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 805167c:	687b      	ldr	r3, [r7, #4]
 805167e:	69db      	ldr	r3, [r3, #28]
 8051680:	2b00      	cmp	r3, #0
 8051682:	d003      	beq.n	805168c <create_chain+0x104>
 8051684:	687b      	ldr	r3, [r7, #4]
 8051686:	69db      	ldr	r3, [r3, #28]
 8051688:	3301      	adds	r3, #1
 805168a:	e000      	b.n	805168e <create_chain+0x106>
 805168c:	2302      	movs	r3, #2
 805168e:	687a      	ldr	r2, [r7, #4]
 8051690:	61d3      	str	r3, [r2, #28]
 8051692:	e053      	b.n	805173c <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 8051694:	687b      	ldr	r3, [r7, #4]
 8051696:	69db      	ldr	r3, [r3, #28]
 8051698:	2b00      	cmp	r3, #0
 805169a:	d102      	bne.n	80516a2 <create_chain+0x11a>
 805169c:	687b      	ldr	r3, [r7, #4]
 805169e:	2201      	movs	r2, #1
 80516a0:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 80516a2:	69fa      	ldr	r2, [r7, #28]
 80516a4:	6839      	ldr	r1, [r7, #0]
 80516a6:	6878      	ldr	r0, [r7, #4]
 80516a8:	f7ff fe89 	bl	80513be <fill_last_frag>
 80516ac:	4603      	mov	r3, r0
 80516ae:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 80516b0:	7dfb      	ldrb	r3, [r7, #23]
 80516b2:	2b00      	cmp	r3, #0
 80516b4:	d142      	bne.n	805173c <create_chain+0x1b4>
 80516b6:	687b      	ldr	r3, [r7, #4]
 80516b8:	2201      	movs	r2, #1
 80516ba:	61da      	str	r2, [r3, #28]
 80516bc:	e03e      	b.n	805173c <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80516be:	69bb      	ldr	r3, [r7, #24]
 80516c0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80516c2:	69fb      	ldr	r3, [r7, #28]
 80516c4:	3301      	adds	r3, #1
 80516c6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80516c8:	693b      	ldr	r3, [r7, #16]
 80516ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80516cc:	69fa      	ldr	r2, [r7, #28]
 80516ce:	429a      	cmp	r2, r3
 80516d0:	d307      	bcc.n	80516e2 <create_chain+0x15a>
				ncl = 2;
 80516d2:	2302      	movs	r3, #2
 80516d4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80516d6:	69fa      	ldr	r2, [r7, #28]
 80516d8:	69bb      	ldr	r3, [r7, #24]
 80516da:	429a      	cmp	r2, r3
 80516dc:	d901      	bls.n	80516e2 <create_chain+0x15a>
 80516de:	2300      	movs	r3, #0
 80516e0:	e04f      	b.n	8051782 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80516e2:	69f9      	ldr	r1, [r7, #28]
 80516e4:	6878      	ldr	r0, [r7, #4]
 80516e6:	f7ff fac9 	bl	8050c7c <get_fat>
 80516ea:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80516ec:	68fb      	ldr	r3, [r7, #12]
 80516ee:	2b00      	cmp	r3, #0
 80516f0:	d00e      	beq.n	8051710 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80516f2:	68fb      	ldr	r3, [r7, #12]
 80516f4:	2b01      	cmp	r3, #1
 80516f6:	d003      	beq.n	8051700 <create_chain+0x178>
 80516f8:	68fb      	ldr	r3, [r7, #12]
 80516fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80516fe:	d101      	bne.n	8051704 <create_chain+0x17c>
 8051700:	68fb      	ldr	r3, [r7, #12]
 8051702:	e03e      	b.n	8051782 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 8051704:	69fa      	ldr	r2, [r7, #28]
 8051706:	69bb      	ldr	r3, [r7, #24]
 8051708:	429a      	cmp	r2, r3
 805170a:	d1da      	bne.n	80516c2 <create_chain+0x13a>
 805170c:	2300      	movs	r3, #0
 805170e:	e038      	b.n	8051782 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 8051710:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8051712:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8051716:	69f9      	ldr	r1, [r7, #28]
 8051718:	6938      	ldr	r0, [r7, #16]
 805171a:	f7ff fc05 	bl	8050f28 <put_fat>
 805171e:	4603      	mov	r3, r0
 8051720:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8051722:	7dfb      	ldrb	r3, [r7, #23]
 8051724:	2b00      	cmp	r3, #0
 8051726:	d109      	bne.n	805173c <create_chain+0x1b4>
 8051728:	683b      	ldr	r3, [r7, #0]
 805172a:	2b00      	cmp	r3, #0
 805172c:	d006      	beq.n	805173c <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 805172e:	69fa      	ldr	r2, [r7, #28]
 8051730:	6839      	ldr	r1, [r7, #0]
 8051732:	6938      	ldr	r0, [r7, #16]
 8051734:	f7ff fbf8 	bl	8050f28 <put_fat>
 8051738:	4603      	mov	r3, r0
 805173a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 805173c:	7dfb      	ldrb	r3, [r7, #23]
 805173e:	2b00      	cmp	r3, #0
 8051740:	d116      	bne.n	8051770 <create_chain+0x1e8>
		fs->last_clst = ncl;
 8051742:	693b      	ldr	r3, [r7, #16]
 8051744:	69fa      	ldr	r2, [r7, #28]
 8051746:	61da      	str	r2, [r3, #28]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8051748:	693b      	ldr	r3, [r7, #16]
 805174a:	6a1a      	ldr	r2, [r3, #32]
 805174c:	693b      	ldr	r3, [r7, #16]
 805174e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8051750:	3b02      	subs	r3, #2
 8051752:	429a      	cmp	r2, r3
 8051754:	d804      	bhi.n	8051760 <create_chain+0x1d8>
 8051756:	693b      	ldr	r3, [r7, #16]
 8051758:	6a1b      	ldr	r3, [r3, #32]
 805175a:	1e5a      	subs	r2, r3, #1
 805175c:	693b      	ldr	r3, [r7, #16]
 805175e:	621a      	str	r2, [r3, #32]
		fs->fsi_flag |= 1;
 8051760:	693b      	ldr	r3, [r7, #16]
 8051762:	791b      	ldrb	r3, [r3, #4]
 8051764:	f043 0301 	orr.w	r3, r3, #1
 8051768:	b2da      	uxtb	r2, r3
 805176a:	693b      	ldr	r3, [r7, #16]
 805176c:	711a      	strb	r2, [r3, #4]
 805176e:	e007      	b.n	8051780 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8051770:	7dfb      	ldrb	r3, [r7, #23]
 8051772:	2b01      	cmp	r3, #1
 8051774:	d102      	bne.n	805177c <create_chain+0x1f4>
 8051776:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 805177a:	e000      	b.n	805177e <create_chain+0x1f6>
 805177c:	2301      	movs	r3, #1
 805177e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8051780:	69fb      	ldr	r3, [r7, #28]
}
 8051782:	4618      	mov	r0, r3
 8051784:	3720      	adds	r7, #32
 8051786:	46bd      	mov	sp, r7
 8051788:	bd80      	pop	{r7, pc}

0805178a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 805178a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 805178e:	b088      	sub	sp, #32
 8051790:	af00      	add	r7, sp, #0
 8051792:	60f8      	str	r0, [r7, #12]
 8051794:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8051798:	68fb      	ldr	r3, [r7, #12]
 805179a:	681b      	ldr	r3, [r3, #0]
 805179c:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 805179e:	68fb      	ldr	r3, [r7, #12]
 80517a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80517a2:	3304      	adds	r3, #4
 80517a4:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80517a6:	697b      	ldr	r3, [r7, #20]
 80517a8:	899b      	ldrh	r3, [r3, #12]
 80517aa:	b29b      	uxth	r3, r3
 80517ac:	2200      	movs	r2, #0
 80517ae:	4698      	mov	r8, r3
 80517b0:	4691      	mov	r9, r2
 80517b2:	4642      	mov	r2, r8
 80517b4:	464b      	mov	r3, r9
 80517b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80517ba:	f7ee fe11 	bl	80403e0 <__aeabi_uldivmod>
 80517be:	4602      	mov	r2, r0
 80517c0:	460b      	mov	r3, r1
 80517c2:	4610      	mov	r0, r2
 80517c4:	4619      	mov	r1, r3
 80517c6:	697b      	ldr	r3, [r7, #20]
 80517c8:	895b      	ldrh	r3, [r3, #10]
 80517ca:	b29b      	uxth	r3, r3
 80517cc:	2200      	movs	r2, #0
 80517ce:	461c      	mov	r4, r3
 80517d0:	4615      	mov	r5, r2
 80517d2:	4622      	mov	r2, r4
 80517d4:	462b      	mov	r3, r5
 80517d6:	f7ee fe03 	bl	80403e0 <__aeabi_uldivmod>
 80517da:	4602      	mov	r2, r0
 80517dc:	460b      	mov	r3, r1
 80517de:	4613      	mov	r3, r2
 80517e0:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80517e2:	69bb      	ldr	r3, [r7, #24]
 80517e4:	1d1a      	adds	r2, r3, #4
 80517e6:	61ba      	str	r2, [r7, #24]
 80517e8:	681b      	ldr	r3, [r3, #0]
 80517ea:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80517ec:	693b      	ldr	r3, [r7, #16]
 80517ee:	2b00      	cmp	r3, #0
 80517f0:	d101      	bne.n	80517f6 <clmt_clust+0x6c>
 80517f2:	2300      	movs	r3, #0
 80517f4:	e010      	b.n	8051818 <clmt_clust+0x8e>
		if (cl < ncl) break;	/* In this fragment? */
 80517f6:	69fa      	ldr	r2, [r7, #28]
 80517f8:	693b      	ldr	r3, [r7, #16]
 80517fa:	429a      	cmp	r2, r3
 80517fc:	d307      	bcc.n	805180e <clmt_clust+0x84>
		cl -= ncl; tbl++;		/* Next fragment */
 80517fe:	69fa      	ldr	r2, [r7, #28]
 8051800:	693b      	ldr	r3, [r7, #16]
 8051802:	1ad3      	subs	r3, r2, r3
 8051804:	61fb      	str	r3, [r7, #28]
 8051806:	69bb      	ldr	r3, [r7, #24]
 8051808:	3304      	adds	r3, #4
 805180a:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 805180c:	e7e9      	b.n	80517e2 <clmt_clust+0x58>
		if (cl < ncl) break;	/* In this fragment? */
 805180e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8051810:	69bb      	ldr	r3, [r7, #24]
 8051812:	681a      	ldr	r2, [r3, #0]
 8051814:	69fb      	ldr	r3, [r7, #28]
 8051816:	4413      	add	r3, r2
}
 8051818:	4618      	mov	r0, r3
 805181a:	3720      	adds	r7, #32
 805181c:	46bd      	mov	sp, r7
 805181e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08051822 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8051822:	b580      	push	{r7, lr}
 8051824:	b086      	sub	sp, #24
 8051826:	af00      	add	r7, sp, #0
 8051828:	6078      	str	r0, [r7, #4]
 805182a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 805182c:	687b      	ldr	r3, [r7, #4]
 805182e:	681b      	ldr	r3, [r3, #0]
 8051830:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8051832:	693b      	ldr	r3, [r7, #16]
 8051834:	781b      	ldrb	r3, [r3, #0]
 8051836:	2b04      	cmp	r3, #4
 8051838:	d102      	bne.n	8051840 <dir_sdi+0x1e>
 805183a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 805183e:	e001      	b.n	8051844 <dir_sdi+0x22>
 8051840:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8051844:	683b      	ldr	r3, [r7, #0]
 8051846:	429a      	cmp	r2, r3
 8051848:	d904      	bls.n	8051854 <dir_sdi+0x32>
 805184a:	683b      	ldr	r3, [r7, #0]
 805184c:	f003 031f 	and.w	r3, r3, #31
 8051850:	2b00      	cmp	r3, #0
 8051852:	d001      	beq.n	8051858 <dir_sdi+0x36>
		return FR_INT_ERR;
 8051854:	2302      	movs	r3, #2
 8051856:	e074      	b.n	8051942 <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 8051858:	687b      	ldr	r3, [r7, #4]
 805185a:	683a      	ldr	r2, [r7, #0]
 805185c:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 805185e:	687b      	ldr	r3, [r7, #4]
 8051860:	689b      	ldr	r3, [r3, #8]
 8051862:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8051864:	697b      	ldr	r3, [r7, #20]
 8051866:	2b00      	cmp	r3, #0
 8051868:	d109      	bne.n	805187e <dir_sdi+0x5c>
 805186a:	693b      	ldr	r3, [r7, #16]
 805186c:	781b      	ldrb	r3, [r3, #0]
 805186e:	2b02      	cmp	r3, #2
 8051870:	d905      	bls.n	805187e <dir_sdi+0x5c>
		clst = fs->dirbase;
 8051872:	693b      	ldr	r3, [r7, #16]
 8051874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8051876:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8051878:	687b      	ldr	r3, [r7, #4]
 805187a:	2200      	movs	r2, #0
 805187c:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 805187e:	697b      	ldr	r3, [r7, #20]
 8051880:	2b00      	cmp	r3, #0
 8051882:	d10c      	bne.n	805189e <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8051884:	683b      	ldr	r3, [r7, #0]
 8051886:	095b      	lsrs	r3, r3, #5
 8051888:	693a      	ldr	r2, [r7, #16]
 805188a:	8912      	ldrh	r2, [r2, #8]
 805188c:	4293      	cmp	r3, r2
 805188e:	d301      	bcc.n	8051894 <dir_sdi+0x72>
 8051890:	2302      	movs	r3, #2
 8051892:	e056      	b.n	8051942 <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 8051894:	693b      	ldr	r3, [r7, #16]
 8051896:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8051898:	687b      	ldr	r3, [r7, #4]
 805189a:	639a      	str	r2, [r3, #56]	; 0x38
 805189c:	e02d      	b.n	80518fa <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 805189e:	693b      	ldr	r3, [r7, #16]
 80518a0:	895b      	ldrh	r3, [r3, #10]
 80518a2:	461a      	mov	r2, r3
 80518a4:	693b      	ldr	r3, [r7, #16]
 80518a6:	899b      	ldrh	r3, [r3, #12]
 80518a8:	fb02 f303 	mul.w	r3, r2, r3
 80518ac:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80518ae:	e019      	b.n	80518e4 <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80518b0:	687b      	ldr	r3, [r7, #4]
 80518b2:	6979      	ldr	r1, [r7, #20]
 80518b4:	4618      	mov	r0, r3
 80518b6:	f7ff f9e1 	bl	8050c7c <get_fat>
 80518ba:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80518bc:	697b      	ldr	r3, [r7, #20]
 80518be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80518c2:	d101      	bne.n	80518c8 <dir_sdi+0xa6>
 80518c4:	2301      	movs	r3, #1
 80518c6:	e03c      	b.n	8051942 <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80518c8:	697b      	ldr	r3, [r7, #20]
 80518ca:	2b01      	cmp	r3, #1
 80518cc:	d904      	bls.n	80518d8 <dir_sdi+0xb6>
 80518ce:	693b      	ldr	r3, [r7, #16]
 80518d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80518d2:	697a      	ldr	r2, [r7, #20]
 80518d4:	429a      	cmp	r2, r3
 80518d6:	d301      	bcc.n	80518dc <dir_sdi+0xba>
 80518d8:	2302      	movs	r3, #2
 80518da:	e032      	b.n	8051942 <dir_sdi+0x120>
			ofs -= csz;
 80518dc:	683a      	ldr	r2, [r7, #0]
 80518de:	68fb      	ldr	r3, [r7, #12]
 80518e0:	1ad3      	subs	r3, r2, r3
 80518e2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80518e4:	683a      	ldr	r2, [r7, #0]
 80518e6:	68fb      	ldr	r3, [r7, #12]
 80518e8:	429a      	cmp	r2, r3
 80518ea:	d2e1      	bcs.n	80518b0 <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 80518ec:	6979      	ldr	r1, [r7, #20]
 80518ee:	6938      	ldr	r0, [r7, #16]
 80518f0:	f7ff f9a4 	bl	8050c3c <clust2sect>
 80518f4:	4602      	mov	r2, r0
 80518f6:	687b      	ldr	r3, [r7, #4]
 80518f8:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 80518fa:	687b      	ldr	r3, [r7, #4]
 80518fc:	697a      	ldr	r2, [r7, #20]
 80518fe:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 8051900:	687b      	ldr	r3, [r7, #4]
 8051902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8051904:	2b00      	cmp	r3, #0
 8051906:	d101      	bne.n	805190c <dir_sdi+0xea>
 8051908:	2302      	movs	r3, #2
 805190a:	e01a      	b.n	8051942 <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 805190c:	687b      	ldr	r3, [r7, #4]
 805190e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8051910:	693b      	ldr	r3, [r7, #16]
 8051912:	899b      	ldrh	r3, [r3, #12]
 8051914:	4619      	mov	r1, r3
 8051916:	683b      	ldr	r3, [r7, #0]
 8051918:	fbb3 f3f1 	udiv	r3, r3, r1
 805191c:	441a      	add	r2, r3
 805191e:	687b      	ldr	r3, [r7, #4]
 8051920:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8051922:	693b      	ldr	r3, [r7, #16]
 8051924:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8051928:	693b      	ldr	r3, [r7, #16]
 805192a:	899b      	ldrh	r3, [r3, #12]
 805192c:	461a      	mov	r2, r3
 805192e:	683b      	ldr	r3, [r7, #0]
 8051930:	fbb3 f0f2 	udiv	r0, r3, r2
 8051934:	fb00 f202 	mul.w	r2, r0, r2
 8051938:	1a9b      	subs	r3, r3, r2
 805193a:	18ca      	adds	r2, r1, r3
 805193c:	687b      	ldr	r3, [r7, #4]
 805193e:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 8051940:	2300      	movs	r3, #0
}
 8051942:	4618      	mov	r0, r3
 8051944:	3718      	adds	r7, #24
 8051946:	46bd      	mov	sp, r7
 8051948:	bd80      	pop	{r7, pc}

0805194a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 805194a:	b580      	push	{r7, lr}
 805194c:	b086      	sub	sp, #24
 805194e:	af00      	add	r7, sp, #0
 8051950:	6078      	str	r0, [r7, #4]
 8051952:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8051954:	687b      	ldr	r3, [r7, #4]
 8051956:	681b      	ldr	r3, [r3, #0]
 8051958:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 805195a:	687b      	ldr	r3, [r7, #4]
 805195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 805195e:	3320      	adds	r3, #32
 8051960:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8051962:	687b      	ldr	r3, [r7, #4]
 8051964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8051966:	2b00      	cmp	r3, #0
 8051968:	d00b      	beq.n	8051982 <dir_next+0x38>
 805196a:	68fb      	ldr	r3, [r7, #12]
 805196c:	781b      	ldrb	r3, [r3, #0]
 805196e:	2b04      	cmp	r3, #4
 8051970:	d102      	bne.n	8051978 <dir_next+0x2e>
 8051972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8051976:	e001      	b.n	805197c <dir_next+0x32>
 8051978:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 805197c:	68bb      	ldr	r3, [r7, #8]
 805197e:	429a      	cmp	r2, r3
 8051980:	d801      	bhi.n	8051986 <dir_next+0x3c>
 8051982:	2304      	movs	r3, #4
 8051984:	e0c3      	b.n	8051b0e <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8051986:	68fb      	ldr	r3, [r7, #12]
 8051988:	899b      	ldrh	r3, [r3, #12]
 805198a:	461a      	mov	r2, r3
 805198c:	68bb      	ldr	r3, [r7, #8]
 805198e:	fbb3 f1f2 	udiv	r1, r3, r2
 8051992:	fb01 f202 	mul.w	r2, r1, r2
 8051996:	1a9b      	subs	r3, r3, r2
 8051998:	2b00      	cmp	r3, #0
 805199a:	f040 80a5 	bne.w	8051ae8 <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 805199e:	687b      	ldr	r3, [r7, #4]
 80519a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80519a2:	1c5a      	adds	r2, r3, #1
 80519a4:	687b      	ldr	r3, [r7, #4]
 80519a6:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 80519a8:	687b      	ldr	r3, [r7, #4]
 80519aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80519ac:	2b00      	cmp	r3, #0
 80519ae:	d10b      	bne.n	80519c8 <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80519b0:	68bb      	ldr	r3, [r7, #8]
 80519b2:	095b      	lsrs	r3, r3, #5
 80519b4:	68fa      	ldr	r2, [r7, #12]
 80519b6:	8912      	ldrh	r2, [r2, #8]
 80519b8:	4293      	cmp	r3, r2
 80519ba:	f0c0 8095 	bcc.w	8051ae8 <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 80519be:	687b      	ldr	r3, [r7, #4]
 80519c0:	2200      	movs	r2, #0
 80519c2:	639a      	str	r2, [r3, #56]	; 0x38
 80519c4:	2304      	movs	r3, #4
 80519c6:	e0a2      	b.n	8051b0e <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80519c8:	68fb      	ldr	r3, [r7, #12]
 80519ca:	899b      	ldrh	r3, [r3, #12]
 80519cc:	461a      	mov	r2, r3
 80519ce:	68bb      	ldr	r3, [r7, #8]
 80519d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80519d4:	68fa      	ldr	r2, [r7, #12]
 80519d6:	8952      	ldrh	r2, [r2, #10]
 80519d8:	3a01      	subs	r2, #1
 80519da:	4013      	ands	r3, r2
 80519dc:	2b00      	cmp	r3, #0
 80519de:	f040 8083 	bne.w	8051ae8 <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80519e2:	687a      	ldr	r2, [r7, #4]
 80519e4:	687b      	ldr	r3, [r7, #4]
 80519e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80519e8:	4619      	mov	r1, r3
 80519ea:	4610      	mov	r0, r2
 80519ec:	f7ff f946 	bl	8050c7c <get_fat>
 80519f0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80519f2:	697b      	ldr	r3, [r7, #20]
 80519f4:	2b01      	cmp	r3, #1
 80519f6:	d801      	bhi.n	80519fc <dir_next+0xb2>
 80519f8:	2302      	movs	r3, #2
 80519fa:	e088      	b.n	8051b0e <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80519fc:	697b      	ldr	r3, [r7, #20]
 80519fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8051a02:	d101      	bne.n	8051a08 <dir_next+0xbe>
 8051a04:	2301      	movs	r3, #1
 8051a06:	e082      	b.n	8051b0e <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8051a08:	68fb      	ldr	r3, [r7, #12]
 8051a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8051a0c:	697a      	ldr	r2, [r7, #20]
 8051a0e:	429a      	cmp	r2, r3
 8051a10:	d360      	bcc.n	8051ad4 <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8051a12:	683b      	ldr	r3, [r7, #0]
 8051a14:	2b00      	cmp	r3, #0
 8051a16:	d104      	bne.n	8051a22 <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 8051a18:	687b      	ldr	r3, [r7, #4]
 8051a1a:	2200      	movs	r2, #0
 8051a1c:	639a      	str	r2, [r3, #56]	; 0x38
 8051a1e:	2304      	movs	r3, #4
 8051a20:	e075      	b.n	8051b0e <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8051a22:	687a      	ldr	r2, [r7, #4]
 8051a24:	687b      	ldr	r3, [r7, #4]
 8051a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8051a28:	4619      	mov	r1, r3
 8051a2a:	4610      	mov	r0, r2
 8051a2c:	f7ff fdac 	bl	8051588 <create_chain>
 8051a30:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8051a32:	697b      	ldr	r3, [r7, #20]
 8051a34:	2b00      	cmp	r3, #0
 8051a36:	d101      	bne.n	8051a3c <dir_next+0xf2>
 8051a38:	2307      	movs	r3, #7
 8051a3a:	e068      	b.n	8051b0e <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8051a3c:	697b      	ldr	r3, [r7, #20]
 8051a3e:	2b01      	cmp	r3, #1
 8051a40:	d101      	bne.n	8051a46 <dir_next+0xfc>
 8051a42:	2302      	movs	r3, #2
 8051a44:	e063      	b.n	8051b0e <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8051a46:	697b      	ldr	r3, [r7, #20]
 8051a48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8051a4c:	d101      	bne.n	8051a52 <dir_next+0x108>
 8051a4e:	2301      	movs	r3, #1
 8051a50:	e05d      	b.n	8051b0e <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 8051a52:	687b      	ldr	r3, [r7, #4]
 8051a54:	79db      	ldrb	r3, [r3, #7]
 8051a56:	f043 0304 	orr.w	r3, r3, #4
 8051a5a:	b2da      	uxtb	r2, r3
 8051a5c:	687b      	ldr	r3, [r7, #4]
 8051a5e:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8051a60:	68f8      	ldr	r0, [r7, #12]
 8051a62:	f7ff f809 	bl	8050a78 <sync_window>
 8051a66:	4603      	mov	r3, r0
 8051a68:	2b00      	cmp	r3, #0
 8051a6a:	d001      	beq.n	8051a70 <dir_next+0x126>
 8051a6c:	2301      	movs	r3, #1
 8051a6e:	e04e      	b.n	8051b0e <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8051a70:	68fb      	ldr	r3, [r7, #12]
 8051a72:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8051a76:	68fb      	ldr	r3, [r7, #12]
 8051a78:	899b      	ldrh	r3, [r3, #12]
 8051a7a:	461a      	mov	r2, r3
 8051a7c:	2100      	movs	r1, #0
 8051a7e:	f7fe fe01 	bl	8050684 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8051a82:	2300      	movs	r3, #0
 8051a84:	613b      	str	r3, [r7, #16]
 8051a86:	6979      	ldr	r1, [r7, #20]
 8051a88:	68f8      	ldr	r0, [r7, #12]
 8051a8a:	f7ff f8d7 	bl	8050c3c <clust2sect>
 8051a8e:	4602      	mov	r2, r0
 8051a90:	68fb      	ldr	r3, [r7, #12]
 8051a92:	64da      	str	r2, [r3, #76]	; 0x4c
 8051a94:	e012      	b.n	8051abc <dir_next+0x172>
						fs->wflag = 1;
 8051a96:	68fb      	ldr	r3, [r7, #12]
 8051a98:	2201      	movs	r2, #1
 8051a9a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8051a9c:	68f8      	ldr	r0, [r7, #12]
 8051a9e:	f7fe ffeb 	bl	8050a78 <sync_window>
 8051aa2:	4603      	mov	r3, r0
 8051aa4:	2b00      	cmp	r3, #0
 8051aa6:	d001      	beq.n	8051aac <dir_next+0x162>
 8051aa8:	2301      	movs	r3, #1
 8051aaa:	e030      	b.n	8051b0e <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8051aac:	693b      	ldr	r3, [r7, #16]
 8051aae:	3301      	adds	r3, #1
 8051ab0:	613b      	str	r3, [r7, #16]
 8051ab2:	68fb      	ldr	r3, [r7, #12]
 8051ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8051ab6:	1c5a      	adds	r2, r3, #1
 8051ab8:	68fb      	ldr	r3, [r7, #12]
 8051aba:	64da      	str	r2, [r3, #76]	; 0x4c
 8051abc:	68fb      	ldr	r3, [r7, #12]
 8051abe:	895b      	ldrh	r3, [r3, #10]
 8051ac0:	461a      	mov	r2, r3
 8051ac2:	693b      	ldr	r3, [r7, #16]
 8051ac4:	4293      	cmp	r3, r2
 8051ac6:	d3e6      	bcc.n	8051a96 <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8051ac8:	68fb      	ldr	r3, [r7, #12]
 8051aca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8051acc:	693b      	ldr	r3, [r7, #16]
 8051ace:	1ad2      	subs	r2, r2, r3
 8051ad0:	68fb      	ldr	r3, [r7, #12]
 8051ad2:	64da      	str	r2, [r3, #76]	; 0x4c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8051ad4:	687b      	ldr	r3, [r7, #4]
 8051ad6:	697a      	ldr	r2, [r7, #20]
 8051ad8:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 8051ada:	6979      	ldr	r1, [r7, #20]
 8051adc:	68f8      	ldr	r0, [r7, #12]
 8051ade:	f7ff f8ad 	bl	8050c3c <clust2sect>
 8051ae2:	4602      	mov	r2, r0
 8051ae4:	687b      	ldr	r3, [r7, #4]
 8051ae6:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8051ae8:	687b      	ldr	r3, [r7, #4]
 8051aea:	68ba      	ldr	r2, [r7, #8]
 8051aec:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8051aee:	68fb      	ldr	r3, [r7, #12]
 8051af0:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8051af4:	68fb      	ldr	r3, [r7, #12]
 8051af6:	899b      	ldrh	r3, [r3, #12]
 8051af8:	461a      	mov	r2, r3
 8051afa:	68bb      	ldr	r3, [r7, #8]
 8051afc:	fbb3 f0f2 	udiv	r0, r3, r2
 8051b00:	fb00 f202 	mul.w	r2, r0, r2
 8051b04:	1a9b      	subs	r3, r3, r2
 8051b06:	18ca      	adds	r2, r1, r3
 8051b08:	687b      	ldr	r3, [r7, #4]
 8051b0a:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 8051b0c:	2300      	movs	r3, #0
}
 8051b0e:	4618      	mov	r0, r3
 8051b10:	3718      	adds	r7, #24
 8051b12:	46bd      	mov	sp, r7
 8051b14:	bd80      	pop	{r7, pc}

08051b16 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8051b16:	b580      	push	{r7, lr}
 8051b18:	b086      	sub	sp, #24
 8051b1a:	af00      	add	r7, sp, #0
 8051b1c:	6078      	str	r0, [r7, #4]
 8051b1e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8051b20:	687b      	ldr	r3, [r7, #4]
 8051b22:	681b      	ldr	r3, [r3, #0]
 8051b24:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8051b26:	2100      	movs	r1, #0
 8051b28:	6878      	ldr	r0, [r7, #4]
 8051b2a:	f7ff fe7a 	bl	8051822 <dir_sdi>
 8051b2e:	4603      	mov	r3, r0
 8051b30:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8051b32:	7dfb      	ldrb	r3, [r7, #23]
 8051b34:	2b00      	cmp	r3, #0
 8051b36:	d140      	bne.n	8051bba <dir_alloc+0xa4>
		n = 0;
 8051b38:	2300      	movs	r3, #0
 8051b3a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8051b3c:	687b      	ldr	r3, [r7, #4]
 8051b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8051b40:	4619      	mov	r1, r3
 8051b42:	68f8      	ldr	r0, [r7, #12]
 8051b44:	f7fe ffdc 	bl	8050b00 <move_window>
 8051b48:	4603      	mov	r3, r0
 8051b4a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8051b4c:	7dfb      	ldrb	r3, [r7, #23]
 8051b4e:	2b00      	cmp	r3, #0
 8051b50:	d132      	bne.n	8051bb8 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 8051b52:	68fb      	ldr	r3, [r7, #12]
 8051b54:	781b      	ldrb	r3, [r3, #0]
 8051b56:	2b04      	cmp	r3, #4
 8051b58:	d108      	bne.n	8051b6c <dir_alloc+0x56>
 8051b5a:	687b      	ldr	r3, [r7, #4]
 8051b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8051b5e:	781b      	ldrb	r3, [r3, #0]
 8051b60:	b25b      	sxtb	r3, r3
 8051b62:	43db      	mvns	r3, r3
 8051b64:	b2db      	uxtb	r3, r3
 8051b66:	09db      	lsrs	r3, r3, #7
 8051b68:	b2db      	uxtb	r3, r3
 8051b6a:	e00f      	b.n	8051b8c <dir_alloc+0x76>
 8051b6c:	687b      	ldr	r3, [r7, #4]
 8051b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8051b70:	781b      	ldrb	r3, [r3, #0]
 8051b72:	2be5      	cmp	r3, #229	; 0xe5
 8051b74:	d004      	beq.n	8051b80 <dir_alloc+0x6a>
 8051b76:	687b      	ldr	r3, [r7, #4]
 8051b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8051b7a:	781b      	ldrb	r3, [r3, #0]
 8051b7c:	2b00      	cmp	r3, #0
 8051b7e:	d101      	bne.n	8051b84 <dir_alloc+0x6e>
 8051b80:	2301      	movs	r3, #1
 8051b82:	e000      	b.n	8051b86 <dir_alloc+0x70>
 8051b84:	2300      	movs	r3, #0
 8051b86:	f003 0301 	and.w	r3, r3, #1
 8051b8a:	b2db      	uxtb	r3, r3
 8051b8c:	2b00      	cmp	r3, #0
 8051b8e:	d007      	beq.n	8051ba0 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8051b90:	693b      	ldr	r3, [r7, #16]
 8051b92:	3301      	adds	r3, #1
 8051b94:	613b      	str	r3, [r7, #16]
 8051b96:	693a      	ldr	r2, [r7, #16]
 8051b98:	683b      	ldr	r3, [r7, #0]
 8051b9a:	429a      	cmp	r2, r3
 8051b9c:	d102      	bne.n	8051ba4 <dir_alloc+0x8e>
 8051b9e:	e00c      	b.n	8051bba <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8051ba0:	2300      	movs	r3, #0
 8051ba2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8051ba4:	2101      	movs	r1, #1
 8051ba6:	6878      	ldr	r0, [r7, #4]
 8051ba8:	f7ff fecf 	bl	805194a <dir_next>
 8051bac:	4603      	mov	r3, r0
 8051bae:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8051bb0:	7dfb      	ldrb	r3, [r7, #23]
 8051bb2:	2b00      	cmp	r3, #0
 8051bb4:	d0c2      	beq.n	8051b3c <dir_alloc+0x26>
 8051bb6:	e000      	b.n	8051bba <dir_alloc+0xa4>
			if (res != FR_OK) break;
 8051bb8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8051bba:	7dfb      	ldrb	r3, [r7, #23]
 8051bbc:	2b04      	cmp	r3, #4
 8051bbe:	d101      	bne.n	8051bc4 <dir_alloc+0xae>
 8051bc0:	2307      	movs	r3, #7
 8051bc2:	75fb      	strb	r3, [r7, #23]
	return res;
 8051bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8051bc6:	4618      	mov	r0, r3
 8051bc8:	3718      	adds	r7, #24
 8051bca:	46bd      	mov	sp, r7
 8051bcc:	bd80      	pop	{r7, pc}

08051bce <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8051bce:	b580      	push	{r7, lr}
 8051bd0:	b084      	sub	sp, #16
 8051bd2:	af00      	add	r7, sp, #0
 8051bd4:	6078      	str	r0, [r7, #4]
 8051bd6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8051bd8:	683b      	ldr	r3, [r7, #0]
 8051bda:	331a      	adds	r3, #26
 8051bdc:	4618      	mov	r0, r3
 8051bde:	f7fe fb4b 	bl	8050278 <ld_word>
 8051be2:	4603      	mov	r3, r0
 8051be4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8051be6:	687b      	ldr	r3, [r7, #4]
 8051be8:	781b      	ldrb	r3, [r3, #0]
 8051bea:	2b03      	cmp	r3, #3
 8051bec:	d109      	bne.n	8051c02 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8051bee:	683b      	ldr	r3, [r7, #0]
 8051bf0:	3314      	adds	r3, #20
 8051bf2:	4618      	mov	r0, r3
 8051bf4:	f7fe fb40 	bl	8050278 <ld_word>
 8051bf8:	4603      	mov	r3, r0
 8051bfa:	041b      	lsls	r3, r3, #16
 8051bfc:	68fa      	ldr	r2, [r7, #12]
 8051bfe:	4313      	orrs	r3, r2
 8051c00:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8051c02:	68fb      	ldr	r3, [r7, #12]
}
 8051c04:	4618      	mov	r0, r3
 8051c06:	3710      	adds	r7, #16
 8051c08:	46bd      	mov	sp, r7
 8051c0a:	bd80      	pop	{r7, pc}

08051c0c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8051c0c:	b580      	push	{r7, lr}
 8051c0e:	b084      	sub	sp, #16
 8051c10:	af00      	add	r7, sp, #0
 8051c12:	60f8      	str	r0, [r7, #12]
 8051c14:	60b9      	str	r1, [r7, #8]
 8051c16:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8051c18:	68bb      	ldr	r3, [r7, #8]
 8051c1a:	331a      	adds	r3, #26
 8051c1c:	687a      	ldr	r2, [r7, #4]
 8051c1e:	b292      	uxth	r2, r2
 8051c20:	4611      	mov	r1, r2
 8051c22:	4618      	mov	r0, r3
 8051c24:	f7fe fc3e 	bl	80504a4 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8051c28:	68fb      	ldr	r3, [r7, #12]
 8051c2a:	781b      	ldrb	r3, [r3, #0]
 8051c2c:	2b03      	cmp	r3, #3
 8051c2e:	d109      	bne.n	8051c44 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8051c30:	68bb      	ldr	r3, [r7, #8]
 8051c32:	f103 0214 	add.w	r2, r3, #20
 8051c36:	687b      	ldr	r3, [r7, #4]
 8051c38:	0c1b      	lsrs	r3, r3, #16
 8051c3a:	b29b      	uxth	r3, r3
 8051c3c:	4619      	mov	r1, r3
 8051c3e:	4610      	mov	r0, r2
 8051c40:	f7fe fc30 	bl	80504a4 <st_word>
	}
}
 8051c44:	bf00      	nop
 8051c46:	3710      	adds	r7, #16
 8051c48:	46bd      	mov	sp, r7
 8051c4a:	bd80      	pop	{r7, pc}

08051c4c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8051c4c:	b590      	push	{r4, r7, lr}
 8051c4e:	b087      	sub	sp, #28
 8051c50:	af00      	add	r7, sp, #0
 8051c52:	6078      	str	r0, [r7, #4]
 8051c54:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8051c56:	683b      	ldr	r3, [r7, #0]
 8051c58:	331a      	adds	r3, #26
 8051c5a:	4618      	mov	r0, r3
 8051c5c:	f7fe fb0c 	bl	8050278 <ld_word>
 8051c60:	4603      	mov	r3, r0
 8051c62:	2b00      	cmp	r3, #0
 8051c64:	d001      	beq.n	8051c6a <cmp_lfn+0x1e>
 8051c66:	2300      	movs	r3, #0
 8051c68:	e059      	b.n	8051d1e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8051c6a:	683b      	ldr	r3, [r7, #0]
 8051c6c:	781b      	ldrb	r3, [r3, #0]
 8051c6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8051c72:	1e5a      	subs	r2, r3, #1
 8051c74:	4613      	mov	r3, r2
 8051c76:	005b      	lsls	r3, r3, #1
 8051c78:	4413      	add	r3, r2
 8051c7a:	009b      	lsls	r3, r3, #2
 8051c7c:	4413      	add	r3, r2
 8051c7e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8051c80:	2301      	movs	r3, #1
 8051c82:	81fb      	strh	r3, [r7, #14]
 8051c84:	2300      	movs	r3, #0
 8051c86:	613b      	str	r3, [r7, #16]
 8051c88:	e033      	b.n	8051cf2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8051c8a:	4a27      	ldr	r2, [pc, #156]	; (8051d28 <cmp_lfn+0xdc>)
 8051c8c:	693b      	ldr	r3, [r7, #16]
 8051c8e:	4413      	add	r3, r2
 8051c90:	781b      	ldrb	r3, [r3, #0]
 8051c92:	461a      	mov	r2, r3
 8051c94:	683b      	ldr	r3, [r7, #0]
 8051c96:	4413      	add	r3, r2
 8051c98:	4618      	mov	r0, r3
 8051c9a:	f7fe faed 	bl	8050278 <ld_word>
 8051c9e:	4603      	mov	r3, r0
 8051ca0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8051ca2:	89fb      	ldrh	r3, [r7, #14]
 8051ca4:	2b00      	cmp	r3, #0
 8051ca6:	d01a      	beq.n	8051cde <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8051ca8:	697b      	ldr	r3, [r7, #20]
 8051caa:	2bfe      	cmp	r3, #254	; 0xfe
 8051cac:	d812      	bhi.n	8051cd4 <cmp_lfn+0x88>
 8051cae:	89bb      	ldrh	r3, [r7, #12]
 8051cb0:	4618      	mov	r0, r3
 8051cb2:	f003 ffd1 	bl	8055c58 <ff_wtoupper>
 8051cb6:	4603      	mov	r3, r0
 8051cb8:	461c      	mov	r4, r3
 8051cba:	697b      	ldr	r3, [r7, #20]
 8051cbc:	1c5a      	adds	r2, r3, #1
 8051cbe:	617a      	str	r2, [r7, #20]
 8051cc0:	005b      	lsls	r3, r3, #1
 8051cc2:	687a      	ldr	r2, [r7, #4]
 8051cc4:	4413      	add	r3, r2
 8051cc6:	881b      	ldrh	r3, [r3, #0]
 8051cc8:	4618      	mov	r0, r3
 8051cca:	f003 ffc5 	bl	8055c58 <ff_wtoupper>
 8051cce:	4603      	mov	r3, r0
 8051cd0:	429c      	cmp	r4, r3
 8051cd2:	d001      	beq.n	8051cd8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8051cd4:	2300      	movs	r3, #0
 8051cd6:	e022      	b.n	8051d1e <cmp_lfn+0xd2>
			}
			wc = uc;
 8051cd8:	89bb      	ldrh	r3, [r7, #12]
 8051cda:	81fb      	strh	r3, [r7, #14]
 8051cdc:	e006      	b.n	8051cec <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8051cde:	89bb      	ldrh	r3, [r7, #12]
 8051ce0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8051ce4:	4293      	cmp	r3, r2
 8051ce6:	d001      	beq.n	8051cec <cmp_lfn+0xa0>
 8051ce8:	2300      	movs	r3, #0
 8051cea:	e018      	b.n	8051d1e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8051cec:	693b      	ldr	r3, [r7, #16]
 8051cee:	3301      	adds	r3, #1
 8051cf0:	613b      	str	r3, [r7, #16]
 8051cf2:	693b      	ldr	r3, [r7, #16]
 8051cf4:	2b0c      	cmp	r3, #12
 8051cf6:	d9c8      	bls.n	8051c8a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8051cf8:	683b      	ldr	r3, [r7, #0]
 8051cfa:	781b      	ldrb	r3, [r3, #0]
 8051cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8051d00:	2b00      	cmp	r3, #0
 8051d02:	d00b      	beq.n	8051d1c <cmp_lfn+0xd0>
 8051d04:	89fb      	ldrh	r3, [r7, #14]
 8051d06:	2b00      	cmp	r3, #0
 8051d08:	d008      	beq.n	8051d1c <cmp_lfn+0xd0>
 8051d0a:	697b      	ldr	r3, [r7, #20]
 8051d0c:	005b      	lsls	r3, r3, #1
 8051d0e:	687a      	ldr	r2, [r7, #4]
 8051d10:	4413      	add	r3, r2
 8051d12:	881b      	ldrh	r3, [r3, #0]
 8051d14:	2b00      	cmp	r3, #0
 8051d16:	d001      	beq.n	8051d1c <cmp_lfn+0xd0>
 8051d18:	2300      	movs	r3, #0
 8051d1a:	e000      	b.n	8051d1e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8051d1c:	2301      	movs	r3, #1
}
 8051d1e:	4618      	mov	r0, r3
 8051d20:	371c      	adds	r7, #28
 8051d22:	46bd      	mov	sp, r7
 8051d24:	bd90      	pop	{r4, r7, pc}
 8051d26:	bf00      	nop
 8051d28:	0805ba24 	.word	0x0805ba24

08051d2c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8051d2c:	b580      	push	{r7, lr}
 8051d2e:	b086      	sub	sp, #24
 8051d30:	af00      	add	r7, sp, #0
 8051d32:	6078      	str	r0, [r7, #4]
 8051d34:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8051d36:	683b      	ldr	r3, [r7, #0]
 8051d38:	331a      	adds	r3, #26
 8051d3a:	4618      	mov	r0, r3
 8051d3c:	f7fe fa9c 	bl	8050278 <ld_word>
 8051d40:	4603      	mov	r3, r0
 8051d42:	2b00      	cmp	r3, #0
 8051d44:	d001      	beq.n	8051d4a <pick_lfn+0x1e>
 8051d46:	2300      	movs	r3, #0
 8051d48:	e04d      	b.n	8051de6 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8051d4a:	683b      	ldr	r3, [r7, #0]
 8051d4c:	781b      	ldrb	r3, [r3, #0]
 8051d4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8051d52:	1e5a      	subs	r2, r3, #1
 8051d54:	4613      	mov	r3, r2
 8051d56:	005b      	lsls	r3, r3, #1
 8051d58:	4413      	add	r3, r2
 8051d5a:	009b      	lsls	r3, r3, #2
 8051d5c:	4413      	add	r3, r2
 8051d5e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8051d60:	2301      	movs	r3, #1
 8051d62:	81fb      	strh	r3, [r7, #14]
 8051d64:	2300      	movs	r3, #0
 8051d66:	613b      	str	r3, [r7, #16]
 8051d68:	e028      	b.n	8051dbc <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8051d6a:	4a21      	ldr	r2, [pc, #132]	; (8051df0 <pick_lfn+0xc4>)
 8051d6c:	693b      	ldr	r3, [r7, #16]
 8051d6e:	4413      	add	r3, r2
 8051d70:	781b      	ldrb	r3, [r3, #0]
 8051d72:	461a      	mov	r2, r3
 8051d74:	683b      	ldr	r3, [r7, #0]
 8051d76:	4413      	add	r3, r2
 8051d78:	4618      	mov	r0, r3
 8051d7a:	f7fe fa7d 	bl	8050278 <ld_word>
 8051d7e:	4603      	mov	r3, r0
 8051d80:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8051d82:	89fb      	ldrh	r3, [r7, #14]
 8051d84:	2b00      	cmp	r3, #0
 8051d86:	d00f      	beq.n	8051da8 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8051d88:	697b      	ldr	r3, [r7, #20]
 8051d8a:	2bfe      	cmp	r3, #254	; 0xfe
 8051d8c:	d901      	bls.n	8051d92 <pick_lfn+0x66>
 8051d8e:	2300      	movs	r3, #0
 8051d90:	e029      	b.n	8051de6 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8051d92:	89bb      	ldrh	r3, [r7, #12]
 8051d94:	81fb      	strh	r3, [r7, #14]
 8051d96:	697b      	ldr	r3, [r7, #20]
 8051d98:	1c5a      	adds	r2, r3, #1
 8051d9a:	617a      	str	r2, [r7, #20]
 8051d9c:	005b      	lsls	r3, r3, #1
 8051d9e:	687a      	ldr	r2, [r7, #4]
 8051da0:	4413      	add	r3, r2
 8051da2:	89fa      	ldrh	r2, [r7, #14]
 8051da4:	801a      	strh	r2, [r3, #0]
 8051da6:	e006      	b.n	8051db6 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8051da8:	89bb      	ldrh	r3, [r7, #12]
 8051daa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8051dae:	4293      	cmp	r3, r2
 8051db0:	d001      	beq.n	8051db6 <pick_lfn+0x8a>
 8051db2:	2300      	movs	r3, #0
 8051db4:	e017      	b.n	8051de6 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8051db6:	693b      	ldr	r3, [r7, #16]
 8051db8:	3301      	adds	r3, #1
 8051dba:	613b      	str	r3, [r7, #16]
 8051dbc:	693b      	ldr	r3, [r7, #16]
 8051dbe:	2b0c      	cmp	r3, #12
 8051dc0:	d9d3      	bls.n	8051d6a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8051dc2:	683b      	ldr	r3, [r7, #0]
 8051dc4:	781b      	ldrb	r3, [r3, #0]
 8051dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8051dca:	2b00      	cmp	r3, #0
 8051dcc:	d00a      	beq.n	8051de4 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8051dce:	697b      	ldr	r3, [r7, #20]
 8051dd0:	2bfe      	cmp	r3, #254	; 0xfe
 8051dd2:	d901      	bls.n	8051dd8 <pick_lfn+0xac>
 8051dd4:	2300      	movs	r3, #0
 8051dd6:	e006      	b.n	8051de6 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8051dd8:	697b      	ldr	r3, [r7, #20]
 8051dda:	005b      	lsls	r3, r3, #1
 8051ddc:	687a      	ldr	r2, [r7, #4]
 8051dde:	4413      	add	r3, r2
 8051de0:	2200      	movs	r2, #0
 8051de2:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8051de4:	2301      	movs	r3, #1
}
 8051de6:	4618      	mov	r0, r3
 8051de8:	3718      	adds	r7, #24
 8051dea:	46bd      	mov	sp, r7
 8051dec:	bd80      	pop	{r7, pc}
 8051dee:	bf00      	nop
 8051df0:	0805ba24 	.word	0x0805ba24

08051df4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8051df4:	b580      	push	{r7, lr}
 8051df6:	b088      	sub	sp, #32
 8051df8:	af00      	add	r7, sp, #0
 8051dfa:	60f8      	str	r0, [r7, #12]
 8051dfc:	60b9      	str	r1, [r7, #8]
 8051dfe:	4611      	mov	r1, r2
 8051e00:	461a      	mov	r2, r3
 8051e02:	460b      	mov	r3, r1
 8051e04:	71fb      	strb	r3, [r7, #7]
 8051e06:	4613      	mov	r3, r2
 8051e08:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8051e0a:	68bb      	ldr	r3, [r7, #8]
 8051e0c:	330d      	adds	r3, #13
 8051e0e:	79ba      	ldrb	r2, [r7, #6]
 8051e10:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8051e12:	68bb      	ldr	r3, [r7, #8]
 8051e14:	330b      	adds	r3, #11
 8051e16:	220f      	movs	r2, #15
 8051e18:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8051e1a:	68bb      	ldr	r3, [r7, #8]
 8051e1c:	330c      	adds	r3, #12
 8051e1e:	2200      	movs	r2, #0
 8051e20:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8051e22:	68bb      	ldr	r3, [r7, #8]
 8051e24:	331a      	adds	r3, #26
 8051e26:	2100      	movs	r1, #0
 8051e28:	4618      	mov	r0, r3
 8051e2a:	f7fe fb3b 	bl	80504a4 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8051e2e:	79fb      	ldrb	r3, [r7, #7]
 8051e30:	1e5a      	subs	r2, r3, #1
 8051e32:	4613      	mov	r3, r2
 8051e34:	005b      	lsls	r3, r3, #1
 8051e36:	4413      	add	r3, r2
 8051e38:	009b      	lsls	r3, r3, #2
 8051e3a:	4413      	add	r3, r2
 8051e3c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8051e3e:	2300      	movs	r3, #0
 8051e40:	82fb      	strh	r3, [r7, #22]
 8051e42:	2300      	movs	r3, #0
 8051e44:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8051e46:	8afb      	ldrh	r3, [r7, #22]
 8051e48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8051e4c:	4293      	cmp	r3, r2
 8051e4e:	d007      	beq.n	8051e60 <put_lfn+0x6c>
 8051e50:	69fb      	ldr	r3, [r7, #28]
 8051e52:	1c5a      	adds	r2, r3, #1
 8051e54:	61fa      	str	r2, [r7, #28]
 8051e56:	005b      	lsls	r3, r3, #1
 8051e58:	68fa      	ldr	r2, [r7, #12]
 8051e5a:	4413      	add	r3, r2
 8051e5c:	881b      	ldrh	r3, [r3, #0]
 8051e5e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8051e60:	4a17      	ldr	r2, [pc, #92]	; (8051ec0 <put_lfn+0xcc>)
 8051e62:	69bb      	ldr	r3, [r7, #24]
 8051e64:	4413      	add	r3, r2
 8051e66:	781b      	ldrb	r3, [r3, #0]
 8051e68:	461a      	mov	r2, r3
 8051e6a:	68bb      	ldr	r3, [r7, #8]
 8051e6c:	4413      	add	r3, r2
 8051e6e:	8afa      	ldrh	r2, [r7, #22]
 8051e70:	4611      	mov	r1, r2
 8051e72:	4618      	mov	r0, r3
 8051e74:	f7fe fb16 	bl	80504a4 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8051e78:	8afb      	ldrh	r3, [r7, #22]
 8051e7a:	2b00      	cmp	r3, #0
 8051e7c:	d102      	bne.n	8051e84 <put_lfn+0x90>
 8051e7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8051e82:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8051e84:	69bb      	ldr	r3, [r7, #24]
 8051e86:	3301      	adds	r3, #1
 8051e88:	61bb      	str	r3, [r7, #24]
 8051e8a:	69bb      	ldr	r3, [r7, #24]
 8051e8c:	2b0c      	cmp	r3, #12
 8051e8e:	d9da      	bls.n	8051e46 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8051e90:	8afb      	ldrh	r3, [r7, #22]
 8051e92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8051e96:	4293      	cmp	r3, r2
 8051e98:	d006      	beq.n	8051ea8 <put_lfn+0xb4>
 8051e9a:	69fb      	ldr	r3, [r7, #28]
 8051e9c:	005b      	lsls	r3, r3, #1
 8051e9e:	68fa      	ldr	r2, [r7, #12]
 8051ea0:	4413      	add	r3, r2
 8051ea2:	881b      	ldrh	r3, [r3, #0]
 8051ea4:	2b00      	cmp	r3, #0
 8051ea6:	d103      	bne.n	8051eb0 <put_lfn+0xbc>
 8051ea8:	79fb      	ldrb	r3, [r7, #7]
 8051eaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8051eae:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8051eb0:	68bb      	ldr	r3, [r7, #8]
 8051eb2:	79fa      	ldrb	r2, [r7, #7]
 8051eb4:	701a      	strb	r2, [r3, #0]
}
 8051eb6:	bf00      	nop
 8051eb8:	3720      	adds	r7, #32
 8051eba:	46bd      	mov	sp, r7
 8051ebc:	bd80      	pop	{r7, pc}
 8051ebe:	bf00      	nop
 8051ec0:	0805ba24 	.word	0x0805ba24

08051ec4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8051ec4:	b580      	push	{r7, lr}
 8051ec6:	b08c      	sub	sp, #48	; 0x30
 8051ec8:	af00      	add	r7, sp, #0
 8051eca:	60f8      	str	r0, [r7, #12]
 8051ecc:	60b9      	str	r1, [r7, #8]
 8051ece:	607a      	str	r2, [r7, #4]
 8051ed0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8051ed2:	220b      	movs	r2, #11
 8051ed4:	68b9      	ldr	r1, [r7, #8]
 8051ed6:	68f8      	ldr	r0, [r7, #12]
 8051ed8:	f7fe fbb3 	bl	8050642 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8051edc:	683b      	ldr	r3, [r7, #0]
 8051ede:	2b05      	cmp	r3, #5
 8051ee0:	d929      	bls.n	8051f36 <gen_numname+0x72>
		sr = seq;
 8051ee2:	683b      	ldr	r3, [r7, #0]
 8051ee4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8051ee6:	e020      	b.n	8051f2a <gen_numname+0x66>
			wc = *lfn++;
 8051ee8:	687b      	ldr	r3, [r7, #4]
 8051eea:	1c9a      	adds	r2, r3, #2
 8051eec:	607a      	str	r2, [r7, #4]
 8051eee:	881b      	ldrh	r3, [r3, #0]
 8051ef0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8051ef2:	2300      	movs	r3, #0
 8051ef4:	62bb      	str	r3, [r7, #40]	; 0x28
 8051ef6:	e015      	b.n	8051f24 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8051ef8:	69fb      	ldr	r3, [r7, #28]
 8051efa:	005a      	lsls	r2, r3, #1
 8051efc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8051efe:	f003 0301 	and.w	r3, r3, #1
 8051f02:	4413      	add	r3, r2
 8051f04:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8051f06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8051f08:	085b      	lsrs	r3, r3, #1
 8051f0a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8051f0c:	69fb      	ldr	r3, [r7, #28]
 8051f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8051f12:	2b00      	cmp	r3, #0
 8051f14:	d003      	beq.n	8051f1e <gen_numname+0x5a>
 8051f16:	69fa      	ldr	r2, [r7, #28]
 8051f18:	4b30      	ldr	r3, [pc, #192]	; (8051fdc <gen_numname+0x118>)
 8051f1a:	4053      	eors	r3, r2
 8051f1c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8051f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8051f20:	3301      	adds	r3, #1
 8051f22:	62bb      	str	r3, [r7, #40]	; 0x28
 8051f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8051f26:	2b0f      	cmp	r3, #15
 8051f28:	d9e6      	bls.n	8051ef8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8051f2a:	687b      	ldr	r3, [r7, #4]
 8051f2c:	881b      	ldrh	r3, [r3, #0]
 8051f2e:	2b00      	cmp	r3, #0
 8051f30:	d1da      	bne.n	8051ee8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8051f32:	69fb      	ldr	r3, [r7, #28]
 8051f34:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8051f36:	2307      	movs	r3, #7
 8051f38:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8051f3a:	683b      	ldr	r3, [r7, #0]
 8051f3c:	b2db      	uxtb	r3, r3
 8051f3e:	f003 030f 	and.w	r3, r3, #15
 8051f42:	b2db      	uxtb	r3, r3
 8051f44:	3330      	adds	r3, #48	; 0x30
 8051f46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8051f4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8051f4e:	2b39      	cmp	r3, #57	; 0x39
 8051f50:	d904      	bls.n	8051f5c <gen_numname+0x98>
 8051f52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8051f56:	3307      	adds	r3, #7
 8051f58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8051f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8051f5e:	1e5a      	subs	r2, r3, #1
 8051f60:	62ba      	str	r2, [r7, #40]	; 0x28
 8051f62:	3330      	adds	r3, #48	; 0x30
 8051f64:	443b      	add	r3, r7
 8051f66:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8051f6a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8051f6e:	683b      	ldr	r3, [r7, #0]
 8051f70:	091b      	lsrs	r3, r3, #4
 8051f72:	603b      	str	r3, [r7, #0]
	} while (seq);
 8051f74:	683b      	ldr	r3, [r7, #0]
 8051f76:	2b00      	cmp	r3, #0
 8051f78:	d1df      	bne.n	8051f3a <gen_numname+0x76>
	ns[i] = '~';
 8051f7a:	f107 0214 	add.w	r2, r7, #20
 8051f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8051f80:	4413      	add	r3, r2
 8051f82:	227e      	movs	r2, #126	; 0x7e
 8051f84:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8051f86:	2300      	movs	r3, #0
 8051f88:	627b      	str	r3, [r7, #36]	; 0x24
 8051f8a:	e002      	b.n	8051f92 <gen_numname+0xce>
 8051f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8051f8e:	3301      	adds	r3, #1
 8051f90:	627b      	str	r3, [r7, #36]	; 0x24
 8051f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8051f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8051f96:	429a      	cmp	r2, r3
 8051f98:	d205      	bcs.n	8051fa6 <gen_numname+0xe2>
 8051f9a:	68fa      	ldr	r2, [r7, #12]
 8051f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8051f9e:	4413      	add	r3, r2
 8051fa0:	781b      	ldrb	r3, [r3, #0]
 8051fa2:	2b20      	cmp	r3, #32
 8051fa4:	d1f2      	bne.n	8051f8c <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8051fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8051fa8:	2b07      	cmp	r3, #7
 8051faa:	d807      	bhi.n	8051fbc <gen_numname+0xf8>
 8051fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8051fae:	1c5a      	adds	r2, r3, #1
 8051fb0:	62ba      	str	r2, [r7, #40]	; 0x28
 8051fb2:	3330      	adds	r3, #48	; 0x30
 8051fb4:	443b      	add	r3, r7
 8051fb6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8051fba:	e000      	b.n	8051fbe <gen_numname+0xfa>
 8051fbc:	2120      	movs	r1, #32
 8051fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8051fc0:	1c5a      	adds	r2, r3, #1
 8051fc2:	627a      	str	r2, [r7, #36]	; 0x24
 8051fc4:	68fa      	ldr	r2, [r7, #12]
 8051fc6:	4413      	add	r3, r2
 8051fc8:	460a      	mov	r2, r1
 8051fca:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8051fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8051fce:	2b07      	cmp	r3, #7
 8051fd0:	d9e9      	bls.n	8051fa6 <gen_numname+0xe2>
}
 8051fd2:	bf00      	nop
 8051fd4:	bf00      	nop
 8051fd6:	3730      	adds	r7, #48	; 0x30
 8051fd8:	46bd      	mov	sp, r7
 8051fda:	bd80      	pop	{r7, pc}
 8051fdc:	00011021 	.word	0x00011021

08051fe0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8051fe0:	b480      	push	{r7}
 8051fe2:	b085      	sub	sp, #20
 8051fe4:	af00      	add	r7, sp, #0
 8051fe6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8051fe8:	2300      	movs	r3, #0
 8051fea:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8051fec:	230b      	movs	r3, #11
 8051fee:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8051ff0:	7bfb      	ldrb	r3, [r7, #15]
 8051ff2:	b2da      	uxtb	r2, r3
 8051ff4:	0852      	lsrs	r2, r2, #1
 8051ff6:	01db      	lsls	r3, r3, #7
 8051ff8:	4313      	orrs	r3, r2
 8051ffa:	b2da      	uxtb	r2, r3
 8051ffc:	687b      	ldr	r3, [r7, #4]
 8051ffe:	1c59      	adds	r1, r3, #1
 8052000:	6079      	str	r1, [r7, #4]
 8052002:	781b      	ldrb	r3, [r3, #0]
 8052004:	4413      	add	r3, r2
 8052006:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8052008:	68bb      	ldr	r3, [r7, #8]
 805200a:	3b01      	subs	r3, #1
 805200c:	60bb      	str	r3, [r7, #8]
 805200e:	68bb      	ldr	r3, [r7, #8]
 8052010:	2b00      	cmp	r3, #0
 8052012:	d1ed      	bne.n	8051ff0 <sum_sfn+0x10>
	return sum;
 8052014:	7bfb      	ldrb	r3, [r7, #15]
}
 8052016:	4618      	mov	r0, r3
 8052018:	3714      	adds	r7, #20
 805201a:	46bd      	mov	sp, r7
 805201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8052020:	4770      	bx	lr

08052022 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 8052022:	b480      	push	{r7}
 8052024:	b087      	sub	sp, #28
 8052026:	af00      	add	r7, sp, #0
 8052028:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 805202a:	687b      	ldr	r3, [r7, #4]
 805202c:	3301      	adds	r3, #1
 805202e:	781b      	ldrb	r3, [r3, #0]
 8052030:	3301      	adds	r3, #1
 8052032:	015b      	lsls	r3, r3, #5
 8052034:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 8052036:	2300      	movs	r3, #0
 8052038:	827b      	strh	r3, [r7, #18]
 805203a:	2300      	movs	r3, #0
 805203c:	617b      	str	r3, [r7, #20]
 805203e:	e018      	b.n	8052072 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 8052040:	697b      	ldr	r3, [r7, #20]
 8052042:	2b02      	cmp	r3, #2
 8052044:	d103      	bne.n	805204e <xdir_sum+0x2c>
			i++;
 8052046:	697b      	ldr	r3, [r7, #20]
 8052048:	3301      	adds	r3, #1
 805204a:	617b      	str	r3, [r7, #20]
 805204c:	e00e      	b.n	805206c <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 805204e:	8a7b      	ldrh	r3, [r7, #18]
 8052050:	03db      	lsls	r3, r3, #15
 8052052:	b29a      	uxth	r2, r3
 8052054:	8a7b      	ldrh	r3, [r7, #18]
 8052056:	085b      	lsrs	r3, r3, #1
 8052058:	b29b      	uxth	r3, r3
 805205a:	4413      	add	r3, r2
 805205c:	b29a      	uxth	r2, r3
 805205e:	6879      	ldr	r1, [r7, #4]
 8052060:	697b      	ldr	r3, [r7, #20]
 8052062:	440b      	add	r3, r1
 8052064:	781b      	ldrb	r3, [r3, #0]
 8052066:	b29b      	uxth	r3, r3
 8052068:	4413      	add	r3, r2
 805206a:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 805206c:	697b      	ldr	r3, [r7, #20]
 805206e:	3301      	adds	r3, #1
 8052070:	617b      	str	r3, [r7, #20]
 8052072:	697a      	ldr	r2, [r7, #20]
 8052074:	68fb      	ldr	r3, [r7, #12]
 8052076:	429a      	cmp	r2, r3
 8052078:	d3e2      	bcc.n	8052040 <xdir_sum+0x1e>
		}
	}
	return sum;
 805207a:	8a7b      	ldrh	r3, [r7, #18]
}
 805207c:	4618      	mov	r0, r3
 805207e:	371c      	adds	r7, #28
 8052080:	46bd      	mov	sp, r7
 8052082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8052086:	4770      	bx	lr

08052088 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 8052088:	b580      	push	{r7, lr}
 805208a:	b084      	sub	sp, #16
 805208c:	af00      	add	r7, sp, #0
 805208e:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 8052090:	2300      	movs	r3, #0
 8052092:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 8052094:	e01f      	b.n	80520d6 <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 8052096:	89bb      	ldrh	r3, [r7, #12]
 8052098:	4618      	mov	r0, r3
 805209a:	f003 fddd 	bl	8055c58 <ff_wtoupper>
 805209e:	4603      	mov	r3, r0
 80520a0:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 80520a2:	89fb      	ldrh	r3, [r7, #14]
 80520a4:	03db      	lsls	r3, r3, #15
 80520a6:	b29a      	uxth	r2, r3
 80520a8:	89fb      	ldrh	r3, [r7, #14]
 80520aa:	085b      	lsrs	r3, r3, #1
 80520ac:	b29b      	uxth	r3, r3
 80520ae:	4413      	add	r3, r2
 80520b0:	b29a      	uxth	r2, r3
 80520b2:	89bb      	ldrh	r3, [r7, #12]
 80520b4:	b2db      	uxtb	r3, r3
 80520b6:	b29b      	uxth	r3, r3
 80520b8:	4413      	add	r3, r2
 80520ba:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 80520bc:	89fb      	ldrh	r3, [r7, #14]
 80520be:	03db      	lsls	r3, r3, #15
 80520c0:	b29a      	uxth	r2, r3
 80520c2:	89fb      	ldrh	r3, [r7, #14]
 80520c4:	085b      	lsrs	r3, r3, #1
 80520c6:	b29b      	uxth	r3, r3
 80520c8:	4413      	add	r3, r2
 80520ca:	b29a      	uxth	r2, r3
 80520cc:	89bb      	ldrh	r3, [r7, #12]
 80520ce:	0a1b      	lsrs	r3, r3, #8
 80520d0:	b29b      	uxth	r3, r3
 80520d2:	4413      	add	r3, r2
 80520d4:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 80520d6:	687b      	ldr	r3, [r7, #4]
 80520d8:	1c9a      	adds	r2, r3, #2
 80520da:	607a      	str	r2, [r7, #4]
 80520dc:	881b      	ldrh	r3, [r3, #0]
 80520de:	81bb      	strh	r3, [r7, #12]
 80520e0:	89bb      	ldrh	r3, [r7, #12]
 80520e2:	2b00      	cmp	r3, #0
 80520e4:	d1d7      	bne.n	8052096 <xname_sum+0xe>
	}
	return sum;
 80520e6:	89fb      	ldrh	r3, [r7, #14]
}
 80520e8:	4618      	mov	r0, r3
 80520ea:	3710      	adds	r7, #16
 80520ec:	46bd      	mov	sp, r7
 80520ee:	bd80      	pop	{r7, pc}

080520f0 <get_xdir_info>:
static
void get_xdir_info (
	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
	FILINFO* fno		/* Buffer to store the extracted file information */
)
{
 80520f0:	b580      	push	{r7, lr}
 80520f2:	b086      	sub	sp, #24
 80520f4:	af00      	add	r7, sp, #0
 80520f6:	6078      	str	r0, [r7, #4]
 80520f8:	6039      	str	r1, [r7, #0]
#if !_LFN_UNICODE
	UINT nc;
#endif

	/* Get file name */
	di = 0;
 80520fa:	2300      	movs	r3, #0
 80520fc:	617b      	str	r3, [r7, #20]
		w = ld_word(dirb + si);					/* Get a character */
		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow --> inaccessible object name */
		fno->fname[di] = w;						/* Store it */
	}
#else
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 80520fe:	2340      	movs	r3, #64	; 0x40
 8052100:	613b      	str	r3, [r7, #16]
 8052102:	2300      	movs	r3, #0
 8052104:	60fb      	str	r3, [r7, #12]
 8052106:	e02c      	b.n	8052162 <get_xdir_info+0x72>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 8052108:	693b      	ldr	r3, [r7, #16]
 805210a:	f003 031f 	and.w	r3, r3, #31
 805210e:	2b00      	cmp	r3, #0
 8052110:	d102      	bne.n	8052118 <get_xdir_info+0x28>
 8052112:	693b      	ldr	r3, [r7, #16]
 8052114:	3302      	adds	r3, #2
 8052116:	613b      	str	r3, [r7, #16]
		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
 8052118:	687a      	ldr	r2, [r7, #4]
 805211a:	693b      	ldr	r3, [r7, #16]
 805211c:	4413      	add	r3, r2
 805211e:	4618      	mov	r0, r3
 8052120:	f7fe f8aa 	bl	8050278 <ld_word>
 8052124:	4603      	mov	r3, r0
 8052126:	2100      	movs	r1, #0
 8052128:	4618      	mov	r0, r3
 805212a:	f003 fd59 	bl	8055be0 <ff_convert>
 805212e:	4603      	mov	r3, r0
 8052130:	817b      	strh	r3, [r7, #10]
		if (_DF1S && w >= 0x100) {				/* Is it a double byte char? (always false at SBCS cfg) */
			fno->fname[di++] = (char)(w >> 8);	/* Put 1st byte of the DBC */
		}
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 8052132:	897b      	ldrh	r3, [r7, #10]
 8052134:	2b00      	cmp	r3, #0
 8052136:	d002      	beq.n	805213e <get_xdir_info+0x4e>
 8052138:	697b      	ldr	r3, [r7, #20]
 805213a:	2bfe      	cmp	r3, #254	; 0xfe
 805213c:	d902      	bls.n	8052144 <get_xdir_info+0x54>
 805213e:	2300      	movs	r3, #0
 8052140:	617b      	str	r3, [r7, #20]
 8052142:	e015      	b.n	8052170 <get_xdir_info+0x80>
		fno->fname[di++] = (char)w;
 8052144:	697b      	ldr	r3, [r7, #20]
 8052146:	1c5a      	adds	r2, r3, #1
 8052148:	617a      	str	r2, [r7, #20]
 805214a:	897a      	ldrh	r2, [r7, #10]
 805214c:	b2d1      	uxtb	r1, r2
 805214e:	683a      	ldr	r2, [r7, #0]
 8052150:	4413      	add	r3, r2
 8052152:	460a      	mov	r2, r1
 8052154:	769a      	strb	r2, [r3, #26]
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 8052156:	693b      	ldr	r3, [r7, #16]
 8052158:	3302      	adds	r3, #2
 805215a:	613b      	str	r3, [r7, #16]
 805215c:	68fb      	ldr	r3, [r7, #12]
 805215e:	3301      	adds	r3, #1
 8052160:	60fb      	str	r3, [r7, #12]
 8052162:	687b      	ldr	r3, [r7, #4]
 8052164:	3323      	adds	r3, #35	; 0x23
 8052166:	781b      	ldrb	r3, [r3, #0]
 8052168:	461a      	mov	r2, r3
 805216a:	68fb      	ldr	r3, [r7, #12]
 805216c:	4293      	cmp	r3, r2
 805216e:	d3cb      	bcc.n	8052108 <get_xdir_info+0x18>
	}
#endif
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 8052170:	697b      	ldr	r3, [r7, #20]
 8052172:	2b00      	cmp	r3, #0
 8052174:	d106      	bne.n	8052184 <get_xdir_info+0x94>
 8052176:	697b      	ldr	r3, [r7, #20]
 8052178:	1c5a      	adds	r2, r3, #1
 805217a:	617a      	str	r2, [r7, #20]
 805217c:	683a      	ldr	r2, [r7, #0]
 805217e:	4413      	add	r3, r2
 8052180:	223f      	movs	r2, #63	; 0x3f
 8052182:	769a      	strb	r2, [r3, #26]
	fno->fname[di] = 0;						/* Terminate file name */
 8052184:	683a      	ldr	r2, [r7, #0]
 8052186:	697b      	ldr	r3, [r7, #20]
 8052188:	4413      	add	r3, r2
 805218a:	331a      	adds	r3, #26
 805218c:	2200      	movs	r2, #0
 805218e:	701a      	strb	r2, [r3, #0]

	fno->altname[0] = 0;							/* No SFN */
 8052190:	683b      	ldr	r3, [r7, #0]
 8052192:	2200      	movs	r2, #0
 8052194:	735a      	strb	r2, [r3, #13]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
 8052196:	687b      	ldr	r3, [r7, #4]
 8052198:	791a      	ldrb	r2, [r3, #4]
 805219a:	683b      	ldr	r3, [r7, #0]
 805219c:	731a      	strb	r2, [r3, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 805219e:	683b      	ldr	r3, [r7, #0]
 80521a0:	7b1b      	ldrb	r3, [r3, #12]
 80521a2:	f003 0310 	and.w	r3, r3, #16
 80521a6:	2b00      	cmp	r3, #0
 80521a8:	d107      	bne.n	80521ba <get_xdir_info+0xca>
 80521aa:	687b      	ldr	r3, [r7, #4]
 80521ac:	3338      	adds	r3, #56	; 0x38
 80521ae:	4618      	mov	r0, r3
 80521b0:	f7fe f89d 	bl	80502ee <ld_qword>
 80521b4:	4602      	mov	r2, r0
 80521b6:	460b      	mov	r3, r1
 80521b8:	e003      	b.n	80521c2 <get_xdir_info+0xd2>
 80521ba:	f04f 0200 	mov.w	r2, #0
 80521be:	f04f 0300 	mov.w	r3, #0
 80521c2:	6839      	ldr	r1, [r7, #0]
 80521c4:	e9c1 2300 	strd	r2, r3, [r1]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 80521c8:	687b      	ldr	r3, [r7, #4]
 80521ca:	330c      	adds	r3, #12
 80521cc:	4618      	mov	r0, r3
 80521ce:	f7fe f853 	bl	8050278 <ld_word>
 80521d2:	4603      	mov	r3, r0
 80521d4:	461a      	mov	r2, r3
 80521d6:	683b      	ldr	r3, [r7, #0]
 80521d8:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 80521da:	687b      	ldr	r3, [r7, #4]
 80521dc:	330e      	adds	r3, #14
 80521de:	4618      	mov	r0, r3
 80521e0:	f7fe f84a 	bl	8050278 <ld_word>
 80521e4:	4603      	mov	r3, r0
 80521e6:	461a      	mov	r2, r3
 80521e8:	683b      	ldr	r3, [r7, #0]
 80521ea:	811a      	strh	r2, [r3, #8]
}
 80521ec:	bf00      	nop
 80521ee:	3718      	adds	r7, #24
 80521f0:	46bd      	mov	sp, r7
 80521f2:	bd80      	pop	{r7, pc}

080521f4 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 80521f4:	b590      	push	{r4, r7, lr}
 80521f6:	b087      	sub	sp, #28
 80521f8:	af00      	add	r7, sp, #0
 80521fa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 80521fc:	687b      	ldr	r3, [r7, #4]
 80521fe:	681b      	ldr	r3, [r3, #0]
 8052200:	695b      	ldr	r3, [r3, #20]
 8052202:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 8052204:	687b      	ldr	r3, [r7, #4]
 8052206:	681a      	ldr	r2, [r3, #0]
 8052208:	687b      	ldr	r3, [r7, #4]
 805220a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 805220c:	4619      	mov	r1, r3
 805220e:	4610      	mov	r0, r2
 8052210:	f7fe fc76 	bl	8050b00 <move_window>
 8052214:	4603      	mov	r3, r0
 8052216:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8052218:	7bfb      	ldrb	r3, [r7, #15]
 805221a:	2b00      	cmp	r3, #0
 805221c:	d001      	beq.n	8052222 <load_xdir+0x2e>
 805221e:	7bfb      	ldrb	r3, [r7, #15]
 8052220:	e09f      	b.n	8052362 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 8052222:	687b      	ldr	r3, [r7, #4]
 8052224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8052226:	781b      	ldrb	r3, [r3, #0]
 8052228:	2b85      	cmp	r3, #133	; 0x85
 805222a:	d001      	beq.n	8052230 <load_xdir+0x3c>
 805222c:	2302      	movs	r3, #2
 805222e:	e098      	b.n	8052362 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 8052230:	687b      	ldr	r3, [r7, #4]
 8052232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8052234:	2220      	movs	r2, #32
 8052236:	4619      	mov	r1, r3
 8052238:	6938      	ldr	r0, [r7, #16]
 805223a:	f7fe fa02 	bl	8050642 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 805223e:	693b      	ldr	r3, [r7, #16]
 8052240:	3301      	adds	r3, #1
 8052242:	781b      	ldrb	r3, [r3, #0]
 8052244:	3301      	adds	r3, #1
 8052246:	015b      	lsls	r3, r3, #5
 8052248:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 805224a:	68bb      	ldr	r3, [r7, #8]
 805224c:	2b5f      	cmp	r3, #95	; 0x5f
 805224e:	d903      	bls.n	8052258 <load_xdir+0x64>
 8052250:	68bb      	ldr	r3, [r7, #8]
 8052252:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8052256:	d901      	bls.n	805225c <load_xdir+0x68>
 8052258:	2302      	movs	r3, #2
 805225a:	e082      	b.n	8052362 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 805225c:	2100      	movs	r1, #0
 805225e:	6878      	ldr	r0, [r7, #4]
 8052260:	f7ff fb73 	bl	805194a <dir_next>
 8052264:	4603      	mov	r3, r0
 8052266:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8052268:	7bfb      	ldrb	r3, [r7, #15]
 805226a:	2b00      	cmp	r3, #0
 805226c:	d001      	beq.n	8052272 <load_xdir+0x7e>
 805226e:	7bfb      	ldrb	r3, [r7, #15]
 8052270:	e077      	b.n	8052362 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 8052272:	687b      	ldr	r3, [r7, #4]
 8052274:	681a      	ldr	r2, [r3, #0]
 8052276:	687b      	ldr	r3, [r7, #4]
 8052278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 805227a:	4619      	mov	r1, r3
 805227c:	4610      	mov	r0, r2
 805227e:	f7fe fc3f 	bl	8050b00 <move_window>
 8052282:	4603      	mov	r3, r0
 8052284:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8052286:	7bfb      	ldrb	r3, [r7, #15]
 8052288:	2b00      	cmp	r3, #0
 805228a:	d001      	beq.n	8052290 <load_xdir+0x9c>
 805228c:	7bfb      	ldrb	r3, [r7, #15]
 805228e:	e068      	b.n	8052362 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 8052290:	687b      	ldr	r3, [r7, #4]
 8052292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8052294:	781b      	ldrb	r3, [r3, #0]
 8052296:	2bc0      	cmp	r3, #192	; 0xc0
 8052298:	d001      	beq.n	805229e <load_xdir+0xaa>
 805229a:	2302      	movs	r3, #2
 805229c:	e061      	b.n	8052362 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 805229e:	693b      	ldr	r3, [r7, #16]
 80522a0:	f103 0020 	add.w	r0, r3, #32
 80522a4:	687b      	ldr	r3, [r7, #4]
 80522a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80522a8:	2220      	movs	r2, #32
 80522aa:	4619      	mov	r1, r3
 80522ac:	f7fe f9c9 	bl	8050642 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 80522b0:	693b      	ldr	r3, [r7, #16]
 80522b2:	3323      	adds	r3, #35	; 0x23
 80522b4:	781b      	ldrb	r3, [r3, #0]
 80522b6:	332c      	adds	r3, #44	; 0x2c
 80522b8:	4a2c      	ldr	r2, [pc, #176]	; (805236c <load_xdir+0x178>)
 80522ba:	fba2 2303 	umull	r2, r3, r2, r3
 80522be:	08db      	lsrs	r3, r3, #3
 80522c0:	015b      	lsls	r3, r3, #5
 80522c2:	68ba      	ldr	r2, [r7, #8]
 80522c4:	429a      	cmp	r2, r3
 80522c6:	d201      	bcs.n	80522cc <load_xdir+0xd8>
 80522c8:	2302      	movs	r3, #2
 80522ca:	e04a      	b.n	8052362 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 80522cc:	2340      	movs	r3, #64	; 0x40
 80522ce:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 80522d0:	2100      	movs	r1, #0
 80522d2:	6878      	ldr	r0, [r7, #4]
 80522d4:	f7ff fb39 	bl	805194a <dir_next>
 80522d8:	4603      	mov	r3, r0
 80522da:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 80522dc:	7bfb      	ldrb	r3, [r7, #15]
 80522de:	2b00      	cmp	r3, #0
 80522e0:	d001      	beq.n	80522e6 <load_xdir+0xf2>
 80522e2:	7bfb      	ldrb	r3, [r7, #15]
 80522e4:	e03d      	b.n	8052362 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 80522e6:	687b      	ldr	r3, [r7, #4]
 80522e8:	681a      	ldr	r2, [r3, #0]
 80522ea:	687b      	ldr	r3, [r7, #4]
 80522ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80522ee:	4619      	mov	r1, r3
 80522f0:	4610      	mov	r0, r2
 80522f2:	f7fe fc05 	bl	8050b00 <move_window>
 80522f6:	4603      	mov	r3, r0
 80522f8:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 80522fa:	7bfb      	ldrb	r3, [r7, #15]
 80522fc:	2b00      	cmp	r3, #0
 80522fe:	d001      	beq.n	8052304 <load_xdir+0x110>
 8052300:	7bfb      	ldrb	r3, [r7, #15]
 8052302:	e02e      	b.n	8052362 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 8052304:	687b      	ldr	r3, [r7, #4]
 8052306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8052308:	781b      	ldrb	r3, [r3, #0]
 805230a:	2bc1      	cmp	r3, #193	; 0xc1
 805230c:	d001      	beq.n	8052312 <load_xdir+0x11e>
 805230e:	2302      	movs	r3, #2
 8052310:	e027      	b.n	8052362 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 8052312:	697b      	ldr	r3, [r7, #20]
 8052314:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8052318:	d208      	bcs.n	805232c <load_xdir+0x138>
 805231a:	693a      	ldr	r2, [r7, #16]
 805231c:	697b      	ldr	r3, [r7, #20]
 805231e:	18d0      	adds	r0, r2, r3
 8052320:	687b      	ldr	r3, [r7, #4]
 8052322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8052324:	2220      	movs	r2, #32
 8052326:	4619      	mov	r1, r3
 8052328:	f7fe f98b 	bl	8050642 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 805232c:	697b      	ldr	r3, [r7, #20]
 805232e:	3320      	adds	r3, #32
 8052330:	617b      	str	r3, [r7, #20]
 8052332:	697a      	ldr	r2, [r7, #20]
 8052334:	68bb      	ldr	r3, [r7, #8]
 8052336:	429a      	cmp	r2, r3
 8052338:	d3ca      	bcc.n	80522d0 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 805233a:	697b      	ldr	r3, [r7, #20]
 805233c:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8052340:	d80e      	bhi.n	8052360 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 8052342:	6938      	ldr	r0, [r7, #16]
 8052344:	f7ff fe6d 	bl	8052022 <xdir_sum>
 8052348:	4603      	mov	r3, r0
 805234a:	461c      	mov	r4, r3
 805234c:	693b      	ldr	r3, [r7, #16]
 805234e:	3302      	adds	r3, #2
 8052350:	4618      	mov	r0, r3
 8052352:	f7fd ff91 	bl	8050278 <ld_word>
 8052356:	4603      	mov	r3, r0
 8052358:	429c      	cmp	r4, r3
 805235a:	d001      	beq.n	8052360 <load_xdir+0x16c>
 805235c:	2302      	movs	r3, #2
 805235e:	e000      	b.n	8052362 <load_xdir+0x16e>
	}
	return FR_OK;
 8052360:	2300      	movs	r3, #0
}
 8052362:	4618      	mov	r0, r3
 8052364:	371c      	adds	r7, #28
 8052366:	46bd      	mov	sp, r7
 8052368:	bd90      	pop	{r4, r7, pc}
 805236a:	bf00      	nop
 805236c:	88888889 	.word	0x88888889

08052370 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 8052370:	b5b0      	push	{r4, r5, r7, lr}
 8052372:	b084      	sub	sp, #16
 8052374:	af00      	add	r7, sp, #0
 8052376:	6078      	str	r0, [r7, #4]
 8052378:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 805237a:	6839      	ldr	r1, [r7, #0]
 805237c:	6808      	ldr	r0, [r1, #0]
 805237e:	6879      	ldr	r1, [r7, #4]
 8052380:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 8052382:	6839      	ldr	r1, [r7, #0]
 8052384:	6a08      	ldr	r0, [r1, #32]
 8052386:	6879      	ldr	r1, [r7, #4]
 8052388:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 805238a:	6839      	ldr	r1, [r7, #0]
 805238c:	6a49      	ldr	r1, [r1, #36]	; 0x24
 805238e:	b2c8      	uxtb	r0, r1
 8052390:	6879      	ldr	r1, [r7, #4]
 8052392:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8052394:	6839      	ldr	r1, [r7, #0]
 8052396:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8052398:	2000      	movs	r0, #0
 805239a:	460c      	mov	r4, r1
 805239c:	4605      	mov	r5, r0
 805239e:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 80523a2:	2300      	movs	r3, #0
 80523a4:	6879      	ldr	r1, [r7, #4]
 80523a6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 80523aa:	683b      	ldr	r3, [r7, #0]
 80523ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80523ae:	687b      	ldr	r3, [r7, #4]
 80523b0:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 80523b2:	687b      	ldr	r3, [r7, #4]
 80523b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80523b6:	4619      	mov	r1, r3
 80523b8:	6878      	ldr	r0, [r7, #4]
 80523ba:	f7ff fa32 	bl	8051822 <dir_sdi>
 80523be:	4603      	mov	r3, r0
 80523c0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80523c2:	7bfb      	ldrb	r3, [r7, #15]
 80523c4:	2b00      	cmp	r3, #0
 80523c6:	d104      	bne.n	80523d2 <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 80523c8:	6878      	ldr	r0, [r7, #4]
 80523ca:	f7ff ff13 	bl	80521f4 <load_xdir>
 80523ce:	4603      	mov	r3, r0
 80523d0:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 80523d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80523d4:	4618      	mov	r0, r3
 80523d6:	3710      	adds	r7, #16
 80523d8:	46bd      	mov	sp, r7
 80523da:	bdb0      	pop	{r4, r5, r7, pc}

080523dc <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 80523dc:	b590      	push	{r4, r7, lr}
 80523de:	b087      	sub	sp, #28
 80523e0:	af00      	add	r7, sp, #0
 80523e2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 80523e4:	687b      	ldr	r3, [r7, #4]
 80523e6:	681b      	ldr	r3, [r3, #0]
 80523e8:	695b      	ldr	r3, [r3, #20]
 80523ea:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 80523ec:	68fb      	ldr	r3, [r7, #12]
 80523ee:	1c9c      	adds	r4, r3, #2
 80523f0:	68f8      	ldr	r0, [r7, #12]
 80523f2:	f7ff fe16 	bl	8052022 <xdir_sum>
 80523f6:	4603      	mov	r3, r0
 80523f8:	4619      	mov	r1, r3
 80523fa:	4620      	mov	r0, r4
 80523fc:	f7fe f852 	bl	80504a4 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 8052400:	68fb      	ldr	r3, [r7, #12]
 8052402:	3301      	adds	r3, #1
 8052404:	781b      	ldrb	r3, [r3, #0]
 8052406:	3301      	adds	r3, #1
 8052408:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 805240a:	687b      	ldr	r3, [r7, #4]
 805240c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 805240e:	4619      	mov	r1, r3
 8052410:	6878      	ldr	r0, [r7, #4]
 8052412:	f7ff fa06 	bl	8051822 <dir_sdi>
 8052416:	4603      	mov	r3, r0
 8052418:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 805241a:	e026      	b.n	805246a <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 805241c:	687b      	ldr	r3, [r7, #4]
 805241e:	681a      	ldr	r2, [r3, #0]
 8052420:	687b      	ldr	r3, [r7, #4]
 8052422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8052424:	4619      	mov	r1, r3
 8052426:	4610      	mov	r0, r2
 8052428:	f7fe fb6a 	bl	8050b00 <move_window>
 805242c:	4603      	mov	r3, r0
 805242e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8052430:	7dfb      	ldrb	r3, [r7, #23]
 8052432:	2b00      	cmp	r3, #0
 8052434:	d11d      	bne.n	8052472 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 8052436:	687b      	ldr	r3, [r7, #4]
 8052438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 805243a:	2220      	movs	r2, #32
 805243c:	68f9      	ldr	r1, [r7, #12]
 805243e:	4618      	mov	r0, r3
 8052440:	f7fe f8ff 	bl	8050642 <mem_cpy>
		dp->obj.fs->wflag = 1;
 8052444:	687b      	ldr	r3, [r7, #4]
 8052446:	681b      	ldr	r3, [r3, #0]
 8052448:	2201      	movs	r2, #1
 805244a:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 805244c:	693b      	ldr	r3, [r7, #16]
 805244e:	3b01      	subs	r3, #1
 8052450:	613b      	str	r3, [r7, #16]
 8052452:	693b      	ldr	r3, [r7, #16]
 8052454:	2b00      	cmp	r3, #0
 8052456:	d00e      	beq.n	8052476 <store_xdir+0x9a>
		dirb += SZDIRE;
 8052458:	68fb      	ldr	r3, [r7, #12]
 805245a:	3320      	adds	r3, #32
 805245c:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 805245e:	2100      	movs	r1, #0
 8052460:	6878      	ldr	r0, [r7, #4]
 8052462:	f7ff fa72 	bl	805194a <dir_next>
 8052466:	4603      	mov	r3, r0
 8052468:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 805246a:	7dfb      	ldrb	r3, [r7, #23]
 805246c:	2b00      	cmp	r3, #0
 805246e:	d0d5      	beq.n	805241c <store_xdir+0x40>
 8052470:	e002      	b.n	8052478 <store_xdir+0x9c>
		if (res != FR_OK) break;
 8052472:	bf00      	nop
 8052474:	e000      	b.n	8052478 <store_xdir+0x9c>
		if (--nent == 0) break;
 8052476:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 8052478:	7dfb      	ldrb	r3, [r7, #23]
 805247a:	2b00      	cmp	r3, #0
 805247c:	d002      	beq.n	8052484 <store_xdir+0xa8>
 805247e:	7dfb      	ldrb	r3, [r7, #23]
 8052480:	2b01      	cmp	r3, #1
 8052482:	d101      	bne.n	8052488 <store_xdir+0xac>
 8052484:	7dfb      	ldrb	r3, [r7, #23]
 8052486:	e000      	b.n	805248a <store_xdir+0xae>
 8052488:	2302      	movs	r3, #2
}
 805248a:	4618      	mov	r0, r3
 805248c:	371c      	adds	r7, #28
 805248e:	46bd      	mov	sp, r7
 8052490:	bd90      	pop	{r4, r7, pc}

08052492 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 8052492:	b590      	push	{r4, r7, lr}
 8052494:	b085      	sub	sp, #20
 8052496:	af00      	add	r7, sp, #0
 8052498:	6078      	str	r0, [r7, #4]
 805249a:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 805249c:	2240      	movs	r2, #64	; 0x40
 805249e:	2100      	movs	r1, #0
 80524a0:	6878      	ldr	r0, [r7, #4]
 80524a2:	f7fe f8ef 	bl	8050684 <mem_set>
	dirb[XDIR_Type] = 0x85;
 80524a6:	687b      	ldr	r3, [r7, #4]
 80524a8:	2285      	movs	r2, #133	; 0x85
 80524aa:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 80524ac:	687b      	ldr	r3, [r7, #4]
 80524ae:	3320      	adds	r3, #32
 80524b0:	22c0      	movs	r2, #192	; 0xc0
 80524b2:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 80524b4:	2300      	movs	r3, #0
 80524b6:	72bb      	strb	r3, [r7, #10]
 80524b8:	2301      	movs	r3, #1
 80524ba:	72fb      	strb	r3, [r7, #11]
 80524bc:	2301      	movs	r3, #1
 80524be:	813b      	strh	r3, [r7, #8]
 80524c0:	2340      	movs	r3, #64	; 0x40
 80524c2:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 80524c4:	68fb      	ldr	r3, [r7, #12]
 80524c6:	1c5a      	adds	r2, r3, #1
 80524c8:	60fa      	str	r2, [r7, #12]
 80524ca:	687a      	ldr	r2, [r7, #4]
 80524cc:	4413      	add	r3, r2
 80524ce:	22c1      	movs	r2, #193	; 0xc1
 80524d0:	701a      	strb	r2, [r3, #0]
 80524d2:	68fb      	ldr	r3, [r7, #12]
 80524d4:	1c5a      	adds	r2, r3, #1
 80524d6:	60fa      	str	r2, [r7, #12]
 80524d8:	687a      	ldr	r2, [r7, #4]
 80524da:	4413      	add	r3, r2
 80524dc:	2200      	movs	r2, #0
 80524de:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 80524e0:	893b      	ldrh	r3, [r7, #8]
 80524e2:	2b00      	cmp	r3, #0
 80524e4:	d00b      	beq.n	80524fe <create_xdir+0x6c>
 80524e6:	7abb      	ldrb	r3, [r7, #10]
 80524e8:	005b      	lsls	r3, r3, #1
 80524ea:	683a      	ldr	r2, [r7, #0]
 80524ec:	4413      	add	r3, r2
 80524ee:	881b      	ldrh	r3, [r3, #0]
 80524f0:	813b      	strh	r3, [r7, #8]
 80524f2:	893b      	ldrh	r3, [r7, #8]
 80524f4:	2b00      	cmp	r3, #0
 80524f6:	d002      	beq.n	80524fe <create_xdir+0x6c>
 80524f8:	7abb      	ldrb	r3, [r7, #10]
 80524fa:	3301      	adds	r3, #1
 80524fc:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 80524fe:	687a      	ldr	r2, [r7, #4]
 8052500:	68fb      	ldr	r3, [r7, #12]
 8052502:	4413      	add	r3, r2
 8052504:	893a      	ldrh	r2, [r7, #8]
 8052506:	4611      	mov	r1, r2
 8052508:	4618      	mov	r0, r3
 805250a:	f7fd ffcb 	bl	80504a4 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 805250e:	68fb      	ldr	r3, [r7, #12]
 8052510:	3302      	adds	r3, #2
 8052512:	60fb      	str	r3, [r7, #12]
 8052514:	68fb      	ldr	r3, [r7, #12]
 8052516:	f003 031f 	and.w	r3, r3, #31
 805251a:	2b00      	cmp	r3, #0
 805251c:	d1e0      	bne.n	80524e0 <create_xdir+0x4e>
		nb++;
 805251e:	7afb      	ldrb	r3, [r7, #11]
 8052520:	3301      	adds	r3, #1
 8052522:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 8052524:	7abb      	ldrb	r3, [r7, #10]
 8052526:	005b      	lsls	r3, r3, #1
 8052528:	683a      	ldr	r2, [r7, #0]
 805252a:	4413      	add	r3, r2
 805252c:	881b      	ldrh	r3, [r3, #0]
 805252e:	2b00      	cmp	r3, #0
 8052530:	d1c8      	bne.n	80524c4 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 8052532:	687b      	ldr	r3, [r7, #4]
 8052534:	3323      	adds	r3, #35	; 0x23
 8052536:	7aba      	ldrb	r2, [r7, #10]
 8052538:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 805253a:	687b      	ldr	r3, [r7, #4]
 805253c:	3301      	adds	r3, #1
 805253e:	7afa      	ldrb	r2, [r7, #11]
 8052540:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 8052542:	687b      	ldr	r3, [r7, #4]
 8052544:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8052548:	6838      	ldr	r0, [r7, #0]
 805254a:	f7ff fd9d 	bl	8052088 <xname_sum>
 805254e:	4603      	mov	r3, r0
 8052550:	4619      	mov	r1, r3
 8052552:	4620      	mov	r0, r4
 8052554:	f7fd ffa6 	bl	80504a4 <st_word>
}
 8052558:	bf00      	nop
 805255a:	3714      	adds	r7, #20
 805255c:	46bd      	mov	sp, r7
 805255e:	bd90      	pop	{r4, r7, pc}

08052560 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8052560:	b580      	push	{r7, lr}
 8052562:	b086      	sub	sp, #24
 8052564:	af00      	add	r7, sp, #0
 8052566:	6078      	str	r0, [r7, #4]
 8052568:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 805256a:	2304      	movs	r3, #4
 805256c:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 805256e:	687b      	ldr	r3, [r7, #4]
 8052570:	681b      	ldr	r3, [r3, #0]
 8052572:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8052574:	23ff      	movs	r3, #255	; 0xff
 8052576:	757b      	strb	r3, [r7, #21]
 8052578:	23ff      	movs	r3, #255	; 0xff
 805257a:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 805257c:	e09f      	b.n	80526be <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 805257e:	687b      	ldr	r3, [r7, #4]
 8052580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8052582:	4619      	mov	r1, r3
 8052584:	6938      	ldr	r0, [r7, #16]
 8052586:	f7fe fabb 	bl	8050b00 <move_window>
 805258a:	4603      	mov	r3, r0
 805258c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 805258e:	7dfb      	ldrb	r3, [r7, #23]
 8052590:	2b00      	cmp	r3, #0
 8052592:	f040 809a 	bne.w	80526ca <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8052596:	687b      	ldr	r3, [r7, #4]
 8052598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 805259a:	781b      	ldrb	r3, [r3, #0]
 805259c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 805259e:	7dbb      	ldrb	r3, [r7, #22]
 80525a0:	2b00      	cmp	r3, #0
 80525a2:	d102      	bne.n	80525aa <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80525a4:	2304      	movs	r3, #4
 80525a6:	75fb      	strb	r3, [r7, #23]
 80525a8:	e096      	b.n	80526d8 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80525aa:	693b      	ldr	r3, [r7, #16]
 80525ac:	781b      	ldrb	r3, [r3, #0]
 80525ae:	2b04      	cmp	r3, #4
 80525b0:	d118      	bne.n	80525e4 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 80525b2:	7dbb      	ldrb	r3, [r7, #22]
 80525b4:	2b85      	cmp	r3, #133	; 0x85
 80525b6:	d179      	bne.n	80526ac <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 80525b8:	687b      	ldr	r3, [r7, #4]
 80525ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80525bc:	687b      	ldr	r3, [r7, #4]
 80525be:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 80525c0:	6878      	ldr	r0, [r7, #4]
 80525c2:	f7ff fe17 	bl	80521f4 <load_xdir>
 80525c6:	4603      	mov	r3, r0
 80525c8:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 80525ca:	7dfb      	ldrb	r3, [r7, #23]
 80525cc:	2b00      	cmp	r3, #0
 80525ce:	d17e      	bne.n	80526ce <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 80525d0:	693b      	ldr	r3, [r7, #16]
 80525d2:	695b      	ldr	r3, [r3, #20]
 80525d4:	3304      	adds	r3, #4
 80525d6:	781b      	ldrb	r3, [r3, #0]
 80525d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80525dc:	b2da      	uxtb	r2, r3
 80525de:	687b      	ldr	r3, [r7, #4]
 80525e0:	719a      	strb	r2, [r3, #6]
					}
					break;
 80525e2:	e074      	b.n	80526ce <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80525e4:	687b      	ldr	r3, [r7, #4]
 80525e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80525e8:	330b      	adds	r3, #11
 80525ea:	781b      	ldrb	r3, [r3, #0]
 80525ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80525f0:	73fb      	strb	r3, [r7, #15]
 80525f2:	687b      	ldr	r3, [r7, #4]
 80525f4:	7bfa      	ldrb	r2, [r7, #15]
 80525f6:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 80525f8:	7dbb      	ldrb	r3, [r7, #22]
 80525fa:	2be5      	cmp	r3, #229	; 0xe5
 80525fc:	d00e      	beq.n	805261c <dir_read+0xbc>
 80525fe:	7dbb      	ldrb	r3, [r7, #22]
 8052600:	2b2e      	cmp	r3, #46	; 0x2e
 8052602:	d00b      	beq.n	805261c <dir_read+0xbc>
 8052604:	7bfb      	ldrb	r3, [r7, #15]
 8052606:	f023 0320 	bic.w	r3, r3, #32
 805260a:	2b08      	cmp	r3, #8
 805260c:	bf0c      	ite	eq
 805260e:	2301      	moveq	r3, #1
 8052610:	2300      	movne	r3, #0
 8052612:	b2db      	uxtb	r3, r3
 8052614:	461a      	mov	r2, r3
 8052616:	683b      	ldr	r3, [r7, #0]
 8052618:	4293      	cmp	r3, r2
 805261a:	d002      	beq.n	8052622 <dir_read+0xc2>
				ord = 0xFF;
 805261c:	23ff      	movs	r3, #255	; 0xff
 805261e:	757b      	strb	r3, [r7, #21]
 8052620:	e044      	b.n	80526ac <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8052622:	7bfb      	ldrb	r3, [r7, #15]
 8052624:	2b0f      	cmp	r3, #15
 8052626:	d12f      	bne.n	8052688 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8052628:	7dbb      	ldrb	r3, [r7, #22]
 805262a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 805262e:	2b00      	cmp	r3, #0
 8052630:	d00d      	beq.n	805264e <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 8052632:	687b      	ldr	r3, [r7, #4]
 8052634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8052636:	7b5b      	ldrb	r3, [r3, #13]
 8052638:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 805263a:	7dbb      	ldrb	r3, [r7, #22]
 805263c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8052640:	75bb      	strb	r3, [r7, #22]
 8052642:	7dbb      	ldrb	r3, [r7, #22]
 8052644:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8052646:	687b      	ldr	r3, [r7, #4]
 8052648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 805264a:	687b      	ldr	r3, [r7, #4]
 805264c:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 805264e:	7dba      	ldrb	r2, [r7, #22]
 8052650:	7d7b      	ldrb	r3, [r7, #21]
 8052652:	429a      	cmp	r2, r3
 8052654:	d115      	bne.n	8052682 <dir_read+0x122>
 8052656:	687b      	ldr	r3, [r7, #4]
 8052658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 805265a:	330d      	adds	r3, #13
 805265c:	781b      	ldrb	r3, [r3, #0]
 805265e:	7d3a      	ldrb	r2, [r7, #20]
 8052660:	429a      	cmp	r2, r3
 8052662:	d10e      	bne.n	8052682 <dir_read+0x122>
 8052664:	693b      	ldr	r3, [r7, #16]
 8052666:	691a      	ldr	r2, [r3, #16]
 8052668:	687b      	ldr	r3, [r7, #4]
 805266a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 805266c:	4619      	mov	r1, r3
 805266e:	4610      	mov	r0, r2
 8052670:	f7ff fb5c 	bl	8051d2c <pick_lfn>
 8052674:	4603      	mov	r3, r0
 8052676:	2b00      	cmp	r3, #0
 8052678:	d003      	beq.n	8052682 <dir_read+0x122>
 805267a:	7d7b      	ldrb	r3, [r7, #21]
 805267c:	3b01      	subs	r3, #1
 805267e:	b2db      	uxtb	r3, r3
 8052680:	e000      	b.n	8052684 <dir_read+0x124>
 8052682:	23ff      	movs	r3, #255	; 0xff
 8052684:	757b      	strb	r3, [r7, #21]
 8052686:	e011      	b.n	80526ac <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8052688:	7d7b      	ldrb	r3, [r7, #21]
 805268a:	2b00      	cmp	r3, #0
 805268c:	d109      	bne.n	80526a2 <dir_read+0x142>
 805268e:	687b      	ldr	r3, [r7, #4]
 8052690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8052692:	4618      	mov	r0, r3
 8052694:	f7ff fca4 	bl	8051fe0 <sum_sfn>
 8052698:	4603      	mov	r3, r0
 805269a:	461a      	mov	r2, r3
 805269c:	7d3b      	ldrb	r3, [r7, #20]
 805269e:	4293      	cmp	r3, r2
 80526a0:	d017      	beq.n	80526d2 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 80526a2:	687b      	ldr	r3, [r7, #4]
 80526a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80526a8:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 80526aa:	e012      	b.n	80526d2 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80526ac:	2100      	movs	r1, #0
 80526ae:	6878      	ldr	r0, [r7, #4]
 80526b0:	f7ff f94b 	bl	805194a <dir_next>
 80526b4:	4603      	mov	r3, r0
 80526b6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80526b8:	7dfb      	ldrb	r3, [r7, #23]
 80526ba:	2b00      	cmp	r3, #0
 80526bc:	d10b      	bne.n	80526d6 <dir_read+0x176>
	while (dp->sect) {
 80526be:	687b      	ldr	r3, [r7, #4]
 80526c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80526c2:	2b00      	cmp	r3, #0
 80526c4:	f47f af5b 	bne.w	805257e <dir_read+0x1e>
 80526c8:	e006      	b.n	80526d8 <dir_read+0x178>
		if (res != FR_OK) break;
 80526ca:	bf00      	nop
 80526cc:	e004      	b.n	80526d8 <dir_read+0x178>
					break;
 80526ce:	bf00      	nop
 80526d0:	e002      	b.n	80526d8 <dir_read+0x178>
					break;
 80526d2:	bf00      	nop
 80526d4:	e000      	b.n	80526d8 <dir_read+0x178>
		if (res != FR_OK) break;
 80526d6:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80526d8:	7dfb      	ldrb	r3, [r7, #23]
 80526da:	2b00      	cmp	r3, #0
 80526dc:	d002      	beq.n	80526e4 <dir_read+0x184>
 80526de:	687b      	ldr	r3, [r7, #4]
 80526e0:	2200      	movs	r2, #0
 80526e2:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 80526e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80526e6:	4618      	mov	r0, r3
 80526e8:	3718      	adds	r7, #24
 80526ea:	46bd      	mov	sp, r7
 80526ec:	bd80      	pop	{r7, pc}

080526ee <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80526ee:	b590      	push	{r4, r7, lr}
 80526f0:	b089      	sub	sp, #36	; 0x24
 80526f2:	af00      	add	r7, sp, #0
 80526f4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80526f6:	687b      	ldr	r3, [r7, #4]
 80526f8:	681b      	ldr	r3, [r3, #0]
 80526fa:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80526fc:	2100      	movs	r1, #0
 80526fe:	6878      	ldr	r0, [r7, #4]
 8052700:	f7ff f88f 	bl	8051822 <dir_sdi>
 8052704:	4603      	mov	r3, r0
 8052706:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 8052708:	7ffb      	ldrb	r3, [r7, #31]
 805270a:	2b00      	cmp	r3, #0
 805270c:	d001      	beq.n	8052712 <dir_find+0x24>
 805270e:	7ffb      	ldrb	r3, [r7, #31]
 8052710:	e112      	b.n	8052938 <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8052712:	68fb      	ldr	r3, [r7, #12]
 8052714:	781b      	ldrb	r3, [r3, #0]
 8052716:	2b04      	cmp	r3, #4
 8052718:	d164      	bne.n	80527e4 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 805271a:	68fb      	ldr	r3, [r7, #12]
 805271c:	691b      	ldr	r3, [r3, #16]
 805271e:	4618      	mov	r0, r3
 8052720:	f7ff fcb2 	bl	8052088 <xname_sum>
 8052724:	4603      	mov	r3, r0
 8052726:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8052728:	e04f      	b.n	80527ca <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 805272a:	68fb      	ldr	r3, [r7, #12]
 805272c:	695b      	ldr	r3, [r3, #20]
 805272e:	3324      	adds	r3, #36	; 0x24
 8052730:	4618      	mov	r0, r3
 8052732:	f7fd fda1 	bl	8050278 <ld_word>
 8052736:	4603      	mov	r3, r0
 8052738:	461a      	mov	r2, r3
 805273a:	893b      	ldrh	r3, [r7, #8]
 805273c:	4293      	cmp	r3, r2
 805273e:	d000      	beq.n	8052742 <dir_find+0x54>
 8052740:	e043      	b.n	80527ca <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8052742:	68fb      	ldr	r3, [r7, #12]
 8052744:	695b      	ldr	r3, [r3, #20]
 8052746:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 805274a:	76fb      	strb	r3, [r7, #27]
 805274c:	2340      	movs	r3, #64	; 0x40
 805274e:	617b      	str	r3, [r7, #20]
 8052750:	2300      	movs	r3, #0
 8052752:	613b      	str	r3, [r7, #16]
 8052754:	e029      	b.n	80527aa <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 8052756:	697b      	ldr	r3, [r7, #20]
 8052758:	f003 031f 	and.w	r3, r3, #31
 805275c:	2b00      	cmp	r3, #0
 805275e:	d102      	bne.n	8052766 <dir_find+0x78>
 8052760:	697b      	ldr	r3, [r7, #20]
 8052762:	3302      	adds	r3, #2
 8052764:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8052766:	68fb      	ldr	r3, [r7, #12]
 8052768:	695a      	ldr	r2, [r3, #20]
 805276a:	697b      	ldr	r3, [r7, #20]
 805276c:	4413      	add	r3, r2
 805276e:	4618      	mov	r0, r3
 8052770:	f7fd fd82 	bl	8050278 <ld_word>
 8052774:	4603      	mov	r3, r0
 8052776:	4618      	mov	r0, r3
 8052778:	f003 fa6e 	bl	8055c58 <ff_wtoupper>
 805277c:	4603      	mov	r3, r0
 805277e:	461c      	mov	r4, r3
 8052780:	68fb      	ldr	r3, [r7, #12]
 8052782:	691a      	ldr	r2, [r3, #16]
 8052784:	693b      	ldr	r3, [r7, #16]
 8052786:	005b      	lsls	r3, r3, #1
 8052788:	4413      	add	r3, r2
 805278a:	881b      	ldrh	r3, [r3, #0]
 805278c:	4618      	mov	r0, r3
 805278e:	f003 fa63 	bl	8055c58 <ff_wtoupper>
 8052792:	4603      	mov	r3, r0
 8052794:	429c      	cmp	r4, r3
 8052796:	d10c      	bne.n	80527b2 <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8052798:	7efb      	ldrb	r3, [r7, #27]
 805279a:	3b01      	subs	r3, #1
 805279c:	76fb      	strb	r3, [r7, #27]
 805279e:	697b      	ldr	r3, [r7, #20]
 80527a0:	3302      	adds	r3, #2
 80527a2:	617b      	str	r3, [r7, #20]
 80527a4:	693b      	ldr	r3, [r7, #16]
 80527a6:	3301      	adds	r3, #1
 80527a8:	613b      	str	r3, [r7, #16]
 80527aa:	7efb      	ldrb	r3, [r7, #27]
 80527ac:	2b00      	cmp	r3, #0
 80527ae:	d1d2      	bne.n	8052756 <dir_find+0x68>
 80527b0:	e000      	b.n	80527b4 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 80527b2:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 80527b4:	7efb      	ldrb	r3, [r7, #27]
 80527b6:	2b00      	cmp	r3, #0
 80527b8:	d107      	bne.n	80527ca <dir_find+0xdc>
 80527ba:	68fb      	ldr	r3, [r7, #12]
 80527bc:	691a      	ldr	r2, [r3, #16]
 80527be:	693b      	ldr	r3, [r7, #16]
 80527c0:	005b      	lsls	r3, r3, #1
 80527c2:	4413      	add	r3, r2
 80527c4:	881b      	ldrh	r3, [r3, #0]
 80527c6:	2b00      	cmp	r3, #0
 80527c8:	d009      	beq.n	80527de <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 80527ca:	2100      	movs	r1, #0
 80527cc:	6878      	ldr	r0, [r7, #4]
 80527ce:	f7ff fec7 	bl	8052560 <dir_read>
 80527d2:	4603      	mov	r3, r0
 80527d4:	77fb      	strb	r3, [r7, #31]
 80527d6:	7ffb      	ldrb	r3, [r7, #31]
 80527d8:	2b00      	cmp	r3, #0
 80527da:	d0a6      	beq.n	805272a <dir_find+0x3c>
 80527dc:	e000      	b.n	80527e0 <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 80527de:	bf00      	nop
		}
		return res;
 80527e0:	7ffb      	ldrb	r3, [r7, #31]
 80527e2:	e0a9      	b.n	8052938 <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80527e4:	23ff      	movs	r3, #255	; 0xff
 80527e6:	773b      	strb	r3, [r7, #28]
 80527e8:	7f3b      	ldrb	r3, [r7, #28]
 80527ea:	777b      	strb	r3, [r7, #29]
 80527ec:	687b      	ldr	r3, [r7, #4]
 80527ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80527f2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 80527f4:	687b      	ldr	r3, [r7, #4]
 80527f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80527f8:	4619      	mov	r1, r3
 80527fa:	68f8      	ldr	r0, [r7, #12]
 80527fc:	f7fe f980 	bl	8050b00 <move_window>
 8052800:	4603      	mov	r3, r0
 8052802:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 8052804:	7ffb      	ldrb	r3, [r7, #31]
 8052806:	2b00      	cmp	r3, #0
 8052808:	f040 8090 	bne.w	805292c <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 805280c:	687b      	ldr	r3, [r7, #4]
 805280e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8052810:	781b      	ldrb	r3, [r3, #0]
 8052812:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8052814:	7fbb      	ldrb	r3, [r7, #30]
 8052816:	2b00      	cmp	r3, #0
 8052818:	d102      	bne.n	8052820 <dir_find+0x132>
 805281a:	2304      	movs	r3, #4
 805281c:	77fb      	strb	r3, [r7, #31]
 805281e:	e08a      	b.n	8052936 <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8052820:	687b      	ldr	r3, [r7, #4]
 8052822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8052824:	330b      	adds	r3, #11
 8052826:	781b      	ldrb	r3, [r3, #0]
 8052828:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 805282c:	72fb      	strb	r3, [r7, #11]
 805282e:	687b      	ldr	r3, [r7, #4]
 8052830:	7afa      	ldrb	r2, [r7, #11]
 8052832:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8052834:	7fbb      	ldrb	r3, [r7, #30]
 8052836:	2be5      	cmp	r3, #229	; 0xe5
 8052838:	d007      	beq.n	805284a <dir_find+0x15c>
 805283a:	7afb      	ldrb	r3, [r7, #11]
 805283c:	f003 0308 	and.w	r3, r3, #8
 8052840:	2b00      	cmp	r3, #0
 8052842:	d009      	beq.n	8052858 <dir_find+0x16a>
 8052844:	7afb      	ldrb	r3, [r7, #11]
 8052846:	2b0f      	cmp	r3, #15
 8052848:	d006      	beq.n	8052858 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 805284a:	23ff      	movs	r3, #255	; 0xff
 805284c:	777b      	strb	r3, [r7, #29]
 805284e:	687b      	ldr	r3, [r7, #4]
 8052850:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8052854:	64da      	str	r2, [r3, #76]	; 0x4c
 8052856:	e05e      	b.n	8052916 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8052858:	7afb      	ldrb	r3, [r7, #11]
 805285a:	2b0f      	cmp	r3, #15
 805285c:	d136      	bne.n	80528cc <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 805285e:	687b      	ldr	r3, [r7, #4]
 8052860:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8052864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8052868:	2b00      	cmp	r3, #0
 805286a:	d154      	bne.n	8052916 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 805286c:	7fbb      	ldrb	r3, [r7, #30]
 805286e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8052872:	2b00      	cmp	r3, #0
 8052874:	d00d      	beq.n	8052892 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 8052876:	687b      	ldr	r3, [r7, #4]
 8052878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 805287a:	7b5b      	ldrb	r3, [r3, #13]
 805287c:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 805287e:	7fbb      	ldrb	r3, [r7, #30]
 8052880:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8052884:	77bb      	strb	r3, [r7, #30]
 8052886:	7fbb      	ldrb	r3, [r7, #30]
 8052888:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 805288a:	687b      	ldr	r3, [r7, #4]
 805288c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 805288e:	687b      	ldr	r3, [r7, #4]
 8052890:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8052892:	7fba      	ldrb	r2, [r7, #30]
 8052894:	7f7b      	ldrb	r3, [r7, #29]
 8052896:	429a      	cmp	r2, r3
 8052898:	d115      	bne.n	80528c6 <dir_find+0x1d8>
 805289a:	687b      	ldr	r3, [r7, #4]
 805289c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 805289e:	330d      	adds	r3, #13
 80528a0:	781b      	ldrb	r3, [r3, #0]
 80528a2:	7f3a      	ldrb	r2, [r7, #28]
 80528a4:	429a      	cmp	r2, r3
 80528a6:	d10e      	bne.n	80528c6 <dir_find+0x1d8>
 80528a8:	68fb      	ldr	r3, [r7, #12]
 80528aa:	691a      	ldr	r2, [r3, #16]
 80528ac:	687b      	ldr	r3, [r7, #4]
 80528ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80528b0:	4619      	mov	r1, r3
 80528b2:	4610      	mov	r0, r2
 80528b4:	f7ff f9ca 	bl	8051c4c <cmp_lfn>
 80528b8:	4603      	mov	r3, r0
 80528ba:	2b00      	cmp	r3, #0
 80528bc:	d003      	beq.n	80528c6 <dir_find+0x1d8>
 80528be:	7f7b      	ldrb	r3, [r7, #29]
 80528c0:	3b01      	subs	r3, #1
 80528c2:	b2db      	uxtb	r3, r3
 80528c4:	e000      	b.n	80528c8 <dir_find+0x1da>
 80528c6:	23ff      	movs	r3, #255	; 0xff
 80528c8:	777b      	strb	r3, [r7, #29]
 80528ca:	e024      	b.n	8052916 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80528cc:	7f7b      	ldrb	r3, [r7, #29]
 80528ce:	2b00      	cmp	r3, #0
 80528d0:	d109      	bne.n	80528e6 <dir_find+0x1f8>
 80528d2:	687b      	ldr	r3, [r7, #4]
 80528d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80528d6:	4618      	mov	r0, r3
 80528d8:	f7ff fb82 	bl	8051fe0 <sum_sfn>
 80528dc:	4603      	mov	r3, r0
 80528de:	461a      	mov	r2, r3
 80528e0:	7f3b      	ldrb	r3, [r7, #28]
 80528e2:	4293      	cmp	r3, r2
 80528e4:	d024      	beq.n	8052930 <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80528e6:	687b      	ldr	r3, [r7, #4]
 80528e8:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80528ec:	f003 0301 	and.w	r3, r3, #1
 80528f0:	2b00      	cmp	r3, #0
 80528f2:	d10a      	bne.n	805290a <dir_find+0x21c>
 80528f4:	687b      	ldr	r3, [r7, #4]
 80528f6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80528f8:	687b      	ldr	r3, [r7, #4]
 80528fa:	3340      	adds	r3, #64	; 0x40
 80528fc:	220b      	movs	r2, #11
 80528fe:	4619      	mov	r1, r3
 8052900:	f7fd fedb 	bl	80506ba <mem_cmp>
 8052904:	4603      	mov	r3, r0
 8052906:	2b00      	cmp	r3, #0
 8052908:	d014      	beq.n	8052934 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 805290a:	23ff      	movs	r3, #255	; 0xff
 805290c:	777b      	strb	r3, [r7, #29]
 805290e:	687b      	ldr	r3, [r7, #4]
 8052910:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8052914:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8052916:	2100      	movs	r1, #0
 8052918:	6878      	ldr	r0, [r7, #4]
 805291a:	f7ff f816 	bl	805194a <dir_next>
 805291e:	4603      	mov	r3, r0
 8052920:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 8052922:	7ffb      	ldrb	r3, [r7, #31]
 8052924:	2b00      	cmp	r3, #0
 8052926:	f43f af65 	beq.w	80527f4 <dir_find+0x106>
 805292a:	e004      	b.n	8052936 <dir_find+0x248>
		if (res != FR_OK) break;
 805292c:	bf00      	nop
 805292e:	e002      	b.n	8052936 <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8052930:	bf00      	nop
 8052932:	e000      	b.n	8052936 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8052934:	bf00      	nop

	return res;
 8052936:	7ffb      	ldrb	r3, [r7, #31]
}
 8052938:	4618      	mov	r0, r3
 805293a:	3724      	adds	r7, #36	; 0x24
 805293c:	46bd      	mov	sp, r7
 805293e:	bd90      	pop	{r4, r7, pc}

08052940 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8052940:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8052944:	b0a0      	sub	sp, #128	; 0x80
 8052946:	af00      	add	r7, sp, #0
 8052948:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 805294a:	687b      	ldr	r3, [r7, #4]
 805294c:	681b      	ldr	r3, [r3, #0]
 805294e:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8052950:	687b      	ldr	r3, [r7, #4]
 8052952:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8052956:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 805295a:	2b00      	cmp	r3, #0
 805295c:	d001      	beq.n	8052962 <dir_register+0x22>
 805295e:	2306      	movs	r3, #6
 8052960:	e192      	b.n	8052c88 <dir_register+0x348>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8052962:	2300      	movs	r3, #0
 8052964:	677b      	str	r3, [r7, #116]	; 0x74
 8052966:	e002      	b.n	805296e <dir_register+0x2e>
 8052968:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 805296a:	3301      	adds	r3, #1
 805296c:	677b      	str	r3, [r7, #116]	; 0x74
 805296e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8052970:	691a      	ldr	r2, [r3, #16]
 8052972:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8052974:	005b      	lsls	r3, r3, #1
 8052976:	4413      	add	r3, r2
 8052978:	881b      	ldrh	r3, [r3, #0]
 805297a:	2b00      	cmp	r3, #0
 805297c:	d1f4      	bne.n	8052968 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 805297e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8052980:	781b      	ldrb	r3, [r3, #0]
 8052982:	2b04      	cmp	r3, #4
 8052984:	f040 80a3 	bne.w	8052ace <dir_register+0x18e>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8052988:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 805298a:	330e      	adds	r3, #14
 805298c:	4aa4      	ldr	r2, [pc, #656]	; (8052c20 <dir_register+0x2e0>)
 805298e:	fba2 2303 	umull	r2, r3, r2, r3
 8052992:	08db      	lsrs	r3, r3, #3
 8052994:	3302      	adds	r3, #2
 8052996:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 8052998:	6f39      	ldr	r1, [r7, #112]	; 0x70
 805299a:	6878      	ldr	r0, [r7, #4]
 805299c:	f7ff f8bb 	bl	8051b16 <dir_alloc>
 80529a0:	4603      	mov	r3, r0
 80529a2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 80529a6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80529aa:	2b00      	cmp	r3, #0
 80529ac:	d002      	beq.n	80529b4 <dir_register+0x74>
 80529ae:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80529b2:	e169      	b.n	8052c88 <dir_register+0x348>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 80529b4:	687b      	ldr	r3, [r7, #4]
 80529b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80529b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80529ba:	3b01      	subs	r3, #1
 80529bc:	015b      	lsls	r3, r3, #5
 80529be:	1ad2      	subs	r2, r2, r3
 80529c0:	687b      	ldr	r3, [r7, #4]
 80529c2:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 80529c4:	687b      	ldr	r3, [r7, #4]
 80529c6:	689b      	ldr	r3, [r3, #8]
 80529c8:	2b00      	cmp	r3, #0
 80529ca:	d076      	beq.n	8052aba <dir_register+0x17a>
 80529cc:	687b      	ldr	r3, [r7, #4]
 80529ce:	79db      	ldrb	r3, [r3, #7]
 80529d0:	f003 0304 	and.w	r3, r3, #4
 80529d4:	2b00      	cmp	r3, #0
 80529d6:	d070      	beq.n	8052aba <dir_register+0x17a>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 80529d8:	687b      	ldr	r3, [r7, #4]
 80529da:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80529de:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80529e0:	8949      	ldrh	r1, [r1, #10]
 80529e2:	4608      	mov	r0, r1
 80529e4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80529e6:	8989      	ldrh	r1, [r1, #12]
 80529e8:	fb00 f101 	mul.w	r1, r0, r1
 80529ec:	2000      	movs	r0, #0
 80529ee:	460c      	mov	r4, r1
 80529f0:	4605      	mov	r5, r0
 80529f2:	eb12 0804 	adds.w	r8, r2, r4
 80529f6:	eb43 0905 	adc.w	r9, r3, r5
 80529fa:	687b      	ldr	r3, [r7, #4]
 80529fc:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 8052a00:	687b      	ldr	r3, [r7, #4]
 8052a02:	4618      	mov	r0, r3
 8052a04:	f7fe fcac 	bl	8051360 <fill_first_frag>
 8052a08:	4603      	mov	r3, r0
 8052a0a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8052a0e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8052a12:	2b00      	cmp	r3, #0
 8052a14:	d002      	beq.n	8052a1c <dir_register+0xdc>
 8052a16:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8052a1a:	e135      	b.n	8052c88 <dir_register+0x348>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8052a1c:	6878      	ldr	r0, [r7, #4]
 8052a1e:	687b      	ldr	r3, [r7, #4]
 8052a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8052a22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8052a26:	4619      	mov	r1, r3
 8052a28:	f7fe fcc9 	bl	80513be <fill_last_frag>
 8052a2c:	4603      	mov	r3, r0
 8052a2e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8052a32:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8052a36:	2b00      	cmp	r3, #0
 8052a38:	d002      	beq.n	8052a40 <dir_register+0x100>
 8052a3a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8052a3e:	e123      	b.n	8052c88 <dir_register+0x348>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 8052a40:	687a      	ldr	r2, [r7, #4]
 8052a42:	f107 0308 	add.w	r3, r7, #8
 8052a46:	4611      	mov	r1, r2
 8052a48:	4618      	mov	r0, r3
 8052a4a:	f7ff fc91 	bl	8052370 <load_obj_dir>
 8052a4e:	4603      	mov	r3, r0
 8052a50:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8052a54:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8052a58:	2b00      	cmp	r3, #0
 8052a5a:	d002      	beq.n	8052a62 <dir_register+0x122>
 8052a5c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8052a60:	e112      	b.n	8052c88 <dir_register+0x348>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 8052a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8052a64:	695b      	ldr	r3, [r3, #20]
 8052a66:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8052a6a:	687b      	ldr	r3, [r7, #4]
 8052a6c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8052a70:	4608      	mov	r0, r1
 8052a72:	f7fd fd5e 	bl	8050532 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 8052a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8052a78:	695b      	ldr	r3, [r3, #20]
 8052a7a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8052a7e:	687b      	ldr	r3, [r7, #4]
 8052a80:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8052a84:	4608      	mov	r0, r1
 8052a86:	f7fd fd54 	bl	8050532 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 8052a8a:	687b      	ldr	r3, [r7, #4]
 8052a8c:	79da      	ldrb	r2, [r3, #7]
 8052a8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8052a90:	695b      	ldr	r3, [r3, #20]
 8052a92:	3321      	adds	r3, #33	; 0x21
 8052a94:	f042 0201 	orr.w	r2, r2, #1
 8052a98:	b2d2      	uxtb	r2, r2
 8052a9a:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 8052a9c:	f107 0308 	add.w	r3, r7, #8
 8052aa0:	4618      	mov	r0, r3
 8052aa2:	f7ff fc9b 	bl	80523dc <store_xdir>
 8052aa6:	4603      	mov	r3, r0
 8052aa8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8052aac:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8052ab0:	2b00      	cmp	r3, #0
 8052ab2:	d002      	beq.n	8052aba <dir_register+0x17a>
 8052ab4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8052ab8:	e0e6      	b.n	8052c88 <dir_register+0x348>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 8052aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8052abc:	695a      	ldr	r2, [r3, #20]
 8052abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8052ac0:	691b      	ldr	r3, [r3, #16]
 8052ac2:	4619      	mov	r1, r3
 8052ac4:	4610      	mov	r0, r2
 8052ac6:	f7ff fce4 	bl	8052492 <create_xdir>
		return FR_OK;
 8052aca:	2300      	movs	r3, #0
 8052acc:	e0dc      	b.n	8052c88 <dir_register+0x348>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8052ace:	687b      	ldr	r3, [r7, #4]
 8052ad0:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8052ad4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8052ad8:	220c      	movs	r2, #12
 8052ada:	4618      	mov	r0, r3
 8052adc:	f7fd fdb1 	bl	8050642 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8052ae0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8052ae4:	f003 0301 	and.w	r3, r3, #1
 8052ae8:	2b00      	cmp	r3, #0
 8052aea:	d033      	beq.n	8052b54 <dir_register+0x214>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8052aec:	687b      	ldr	r3, [r7, #4]
 8052aee:	2240      	movs	r2, #64	; 0x40
 8052af0:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 8052af4:	2301      	movs	r3, #1
 8052af6:	67bb      	str	r3, [r7, #120]	; 0x78
 8052af8:	e016      	b.n	8052b28 <dir_register+0x1e8>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8052afa:	687b      	ldr	r3, [r7, #4]
 8052afc:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8052b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8052b02:	691a      	ldr	r2, [r3, #16]
 8052b04:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8052b08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8052b0a:	f7ff f9db 	bl	8051ec4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8052b0e:	6878      	ldr	r0, [r7, #4]
 8052b10:	f7ff fded 	bl	80526ee <dir_find>
 8052b14:	4603      	mov	r3, r0
 8052b16:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 8052b1a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8052b1e:	2b00      	cmp	r3, #0
 8052b20:	d106      	bne.n	8052b30 <dir_register+0x1f0>
		for (n = 1; n < 100; n++) {
 8052b22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8052b24:	3301      	adds	r3, #1
 8052b26:	67bb      	str	r3, [r7, #120]	; 0x78
 8052b28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8052b2a:	2b63      	cmp	r3, #99	; 0x63
 8052b2c:	d9e5      	bls.n	8052afa <dir_register+0x1ba>
 8052b2e:	e000      	b.n	8052b32 <dir_register+0x1f2>
			if (res != FR_OK) break;
 8052b30:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8052b32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8052b34:	2b64      	cmp	r3, #100	; 0x64
 8052b36:	d101      	bne.n	8052b3c <dir_register+0x1fc>
 8052b38:	2307      	movs	r3, #7
 8052b3a:	e0a5      	b.n	8052c88 <dir_register+0x348>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8052b3c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8052b40:	2b04      	cmp	r3, #4
 8052b42:	d002      	beq.n	8052b4a <dir_register+0x20a>
 8052b44:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8052b48:	e09e      	b.n	8052c88 <dir_register+0x348>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8052b4a:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8052b4e:	687b      	ldr	r3, [r7, #4]
 8052b50:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8052b54:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8052b58:	f003 0302 	and.w	r3, r3, #2
 8052b5c:	2b00      	cmp	r3, #0
 8052b5e:	d007      	beq.n	8052b70 <dir_register+0x230>
 8052b60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8052b62:	330c      	adds	r3, #12
 8052b64:	4a2f      	ldr	r2, [pc, #188]	; (8052c24 <dir_register+0x2e4>)
 8052b66:	fba2 2303 	umull	r2, r3, r2, r3
 8052b6a:	089b      	lsrs	r3, r3, #2
 8052b6c:	3301      	adds	r3, #1
 8052b6e:	e000      	b.n	8052b72 <dir_register+0x232>
 8052b70:	2301      	movs	r3, #1
 8052b72:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8052b74:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8052b76:	6878      	ldr	r0, [r7, #4]
 8052b78:	f7fe ffcd 	bl	8051b16 <dir_alloc>
 8052b7c:	4603      	mov	r3, r0
 8052b7e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8052b82:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8052b86:	2b00      	cmp	r3, #0
 8052b88:	d14f      	bne.n	8052c2a <dir_register+0x2ea>
 8052b8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8052b8c:	3b01      	subs	r3, #1
 8052b8e:	673b      	str	r3, [r7, #112]	; 0x70
 8052b90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8052b92:	2b00      	cmp	r3, #0
 8052b94:	d049      	beq.n	8052c2a <dir_register+0x2ea>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8052b96:	687b      	ldr	r3, [r7, #4]
 8052b98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8052b9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8052b9c:	015b      	lsls	r3, r3, #5
 8052b9e:	1ad3      	subs	r3, r2, r3
 8052ba0:	4619      	mov	r1, r3
 8052ba2:	6878      	ldr	r0, [r7, #4]
 8052ba4:	f7fe fe3d 	bl	8051822 <dir_sdi>
 8052ba8:	4603      	mov	r3, r0
 8052baa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 8052bae:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8052bb2:	2b00      	cmp	r3, #0
 8052bb4:	d139      	bne.n	8052c2a <dir_register+0x2ea>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8052bb6:	687b      	ldr	r3, [r7, #4]
 8052bb8:	3340      	adds	r3, #64	; 0x40
 8052bba:	4618      	mov	r0, r3
 8052bbc:	f7ff fa10 	bl	8051fe0 <sum_sfn>
 8052bc0:	4603      	mov	r3, r0
 8052bc2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8052bc6:	687b      	ldr	r3, [r7, #4]
 8052bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8052bca:	4619      	mov	r1, r3
 8052bcc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8052bce:	f7fd ff97 	bl	8050b00 <move_window>
 8052bd2:	4603      	mov	r3, r0
 8052bd4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 8052bd8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8052bdc:	2b00      	cmp	r3, #0
 8052bde:	d123      	bne.n	8052c28 <dir_register+0x2e8>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8052be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8052be2:	6918      	ldr	r0, [r3, #16]
 8052be4:	687b      	ldr	r3, [r7, #4]
 8052be6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8052be8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8052bea:	b2da      	uxtb	r2, r3
 8052bec:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8052bf0:	f7ff f900 	bl	8051df4 <put_lfn>
				fs->wflag = 1;
 8052bf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8052bf6:	2201      	movs	r2, #1
 8052bf8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8052bfa:	2100      	movs	r1, #0
 8052bfc:	6878      	ldr	r0, [r7, #4]
 8052bfe:	f7fe fea4 	bl	805194a <dir_next>
 8052c02:	4603      	mov	r3, r0
 8052c04:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 8052c08:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8052c0c:	2b00      	cmp	r3, #0
 8052c0e:	d10c      	bne.n	8052c2a <dir_register+0x2ea>
 8052c10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8052c12:	3b01      	subs	r3, #1
 8052c14:	673b      	str	r3, [r7, #112]	; 0x70
 8052c16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8052c18:	2b00      	cmp	r3, #0
 8052c1a:	d1d4      	bne.n	8052bc6 <dir_register+0x286>
 8052c1c:	e005      	b.n	8052c2a <dir_register+0x2ea>
 8052c1e:	bf00      	nop
 8052c20:	88888889 	.word	0x88888889
 8052c24:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 8052c28:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8052c2a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8052c2e:	2b00      	cmp	r3, #0
 8052c30:	d128      	bne.n	8052c84 <dir_register+0x344>
		res = move_window(fs, dp->sect);
 8052c32:	687b      	ldr	r3, [r7, #4]
 8052c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8052c36:	4619      	mov	r1, r3
 8052c38:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8052c3a:	f7fd ff61 	bl	8050b00 <move_window>
 8052c3e:	4603      	mov	r3, r0
 8052c40:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 8052c44:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8052c48:	2b00      	cmp	r3, #0
 8052c4a:	d11b      	bne.n	8052c84 <dir_register+0x344>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8052c4c:	687b      	ldr	r3, [r7, #4]
 8052c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8052c50:	2220      	movs	r2, #32
 8052c52:	2100      	movs	r1, #0
 8052c54:	4618      	mov	r0, r3
 8052c56:	f7fd fd15 	bl	8050684 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8052c5a:	687b      	ldr	r3, [r7, #4]
 8052c5c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8052c5e:	687b      	ldr	r3, [r7, #4]
 8052c60:	3340      	adds	r3, #64	; 0x40
 8052c62:	220b      	movs	r2, #11
 8052c64:	4619      	mov	r1, r3
 8052c66:	f7fd fcec 	bl	8050642 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8052c6a:	687b      	ldr	r3, [r7, #4]
 8052c6c:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8052c70:	687b      	ldr	r3, [r7, #4]
 8052c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8052c74:	330c      	adds	r3, #12
 8052c76:	f002 0218 	and.w	r2, r2, #24
 8052c7a:	b2d2      	uxtb	r2, r2
 8052c7c:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8052c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8052c80:	2201      	movs	r2, #1
 8052c82:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8052c84:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8052c88:	4618      	mov	r0, r3
 8052c8a:	3780      	adds	r7, #128	; 0x80
 8052c8c:	46bd      	mov	sp, r7
 8052c8e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8052c92:	bf00      	nop

08052c94 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8052c94:	b580      	push	{r7, lr}
 8052c96:	b086      	sub	sp, #24
 8052c98:	af00      	add	r7, sp, #0
 8052c9a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8052c9c:	687b      	ldr	r3, [r7, #4]
 8052c9e:	681b      	ldr	r3, [r3, #0]
 8052ca0:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 8052ca2:	687b      	ldr	r3, [r7, #4]
 8052ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8052ca6:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8052ca8:	687b      	ldr	r3, [r7, #4]
 8052caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8052cac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8052cb0:	d007      	beq.n	8052cc2 <dir_remove+0x2e>
 8052cb2:	687b      	ldr	r3, [r7, #4]
 8052cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8052cb6:	4619      	mov	r1, r3
 8052cb8:	6878      	ldr	r0, [r7, #4]
 8052cba:	f7fe fdb2 	bl	8051822 <dir_sdi>
 8052cbe:	4603      	mov	r3, r0
 8052cc0:	e000      	b.n	8052cc4 <dir_remove+0x30>
 8052cc2:	2300      	movs	r3, #0
 8052cc4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8052cc6:	7dfb      	ldrb	r3, [r7, #23]
 8052cc8:	2b00      	cmp	r3, #0
 8052cca:	d136      	bne.n	8052d3a <dir_remove+0xa6>
		do {
			res = move_window(fs, dp->sect);
 8052ccc:	687b      	ldr	r3, [r7, #4]
 8052cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8052cd0:	4619      	mov	r1, r3
 8052cd2:	6938      	ldr	r0, [r7, #16]
 8052cd4:	f7fd ff14 	bl	8050b00 <move_window>
 8052cd8:	4603      	mov	r3, r0
 8052cda:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8052cdc:	7dfb      	ldrb	r3, [r7, #23]
 8052cde:	2b00      	cmp	r3, #0
 8052ce0:	d123      	bne.n	8052d2a <dir_remove+0x96>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8052ce2:	693b      	ldr	r3, [r7, #16]
 8052ce4:	781b      	ldrb	r3, [r3, #0]
 8052ce6:	2b04      	cmp	r3, #4
 8052ce8:	d109      	bne.n	8052cfe <dir_remove+0x6a>
				dp->dir[XDIR_Type] &= 0x7F;
 8052cea:	687b      	ldr	r3, [r7, #4]
 8052cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8052cee:	781a      	ldrb	r2, [r3, #0]
 8052cf0:	687b      	ldr	r3, [r7, #4]
 8052cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8052cf4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8052cf8:	b2d2      	uxtb	r2, r2
 8052cfa:	701a      	strb	r2, [r3, #0]
 8052cfc:	e003      	b.n	8052d06 <dir_remove+0x72>
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 8052cfe:	687b      	ldr	r3, [r7, #4]
 8052d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8052d02:	22e5      	movs	r2, #229	; 0xe5
 8052d04:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 8052d06:	693b      	ldr	r3, [r7, #16]
 8052d08:	2201      	movs	r2, #1
 8052d0a:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8052d0c:	687b      	ldr	r3, [r7, #4]
 8052d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8052d10:	68fa      	ldr	r2, [r7, #12]
 8052d12:	429a      	cmp	r2, r3
 8052d14:	d90b      	bls.n	8052d2e <dir_remove+0x9a>
			res = dir_next(dp, 0);	/* Next entry */
 8052d16:	2100      	movs	r1, #0
 8052d18:	6878      	ldr	r0, [r7, #4]
 8052d1a:	f7fe fe16 	bl	805194a <dir_next>
 8052d1e:	4603      	mov	r3, r0
 8052d20:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8052d22:	7dfb      	ldrb	r3, [r7, #23]
 8052d24:	2b00      	cmp	r3, #0
 8052d26:	d0d1      	beq.n	8052ccc <dir_remove+0x38>
 8052d28:	e002      	b.n	8052d30 <dir_remove+0x9c>
			if (res != FR_OK) break;
 8052d2a:	bf00      	nop
 8052d2c:	e000      	b.n	8052d30 <dir_remove+0x9c>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8052d2e:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 8052d30:	7dfb      	ldrb	r3, [r7, #23]
 8052d32:	2b04      	cmp	r3, #4
 8052d34:	d101      	bne.n	8052d3a <dir_remove+0xa6>
 8052d36:	2302      	movs	r3, #2
 8052d38:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 8052d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8052d3c:	4618      	mov	r0, r3
 8052d3e:	3718      	adds	r7, #24
 8052d40:	46bd      	mov	sp, r7
 8052d42:	bd80      	pop	{r7, pc}

08052d44 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8052d44:	b5b0      	push	{r4, r5, r7, lr}
 8052d46:	b088      	sub	sp, #32
 8052d48:	af00      	add	r7, sp, #0
 8052d4a:	6078      	str	r0, [r7, #4]
 8052d4c:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8052d4e:	687b      	ldr	r3, [r7, #4]
 8052d50:	681b      	ldr	r3, [r3, #0]
 8052d52:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8052d54:	683b      	ldr	r3, [r7, #0]
 8052d56:	2200      	movs	r2, #0
 8052d58:	769a      	strb	r2, [r3, #26]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8052d5a:	687b      	ldr	r3, [r7, #4]
 8052d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8052d5e:	2b00      	cmp	r3, #0
 8052d60:	f000 80d8 	beq.w	8052f14 <get_fileinfo+0x1d0>

#if _USE_LFN != 0	/* LFN configuration */
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8052d64:	693b      	ldr	r3, [r7, #16]
 8052d66:	781b      	ldrb	r3, [r3, #0]
 8052d68:	2b04      	cmp	r3, #4
 8052d6a:	d106      	bne.n	8052d7a <get_fileinfo+0x36>
		get_xdir_info(fs->dirbuf, fno);
 8052d6c:	693b      	ldr	r3, [r7, #16]
 8052d6e:	695b      	ldr	r3, [r3, #20]
 8052d70:	6839      	ldr	r1, [r7, #0]
 8052d72:	4618      	mov	r0, r3
 8052d74:	f7ff f9bc 	bl	80520f0 <get_xdir_info>
		return;
 8052d78:	e0cd      	b.n	8052f16 <get_fileinfo+0x1d2>
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8052d7a:	687b      	ldr	r3, [r7, #4]
 8052d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8052d7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8052d82:	d032      	beq.n	8052dea <get_fileinfo+0xa6>
			i = j = 0;
 8052d84:	2300      	movs	r3, #0
 8052d86:	61bb      	str	r3, [r7, #24]
 8052d88:	69bb      	ldr	r3, [r7, #24]
 8052d8a:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8052d8c:	e01b      	b.n	8052dc6 <get_fileinfo+0x82>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8052d8e:	89fb      	ldrh	r3, [r7, #14]
 8052d90:	2100      	movs	r1, #0
 8052d92:	4618      	mov	r0, r3
 8052d94:	f002 ff24 	bl	8055be0 <ff_convert>
 8052d98:	4603      	mov	r3, r0
 8052d9a:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8052d9c:	89fb      	ldrh	r3, [r7, #14]
 8052d9e:	2b00      	cmp	r3, #0
 8052da0:	d102      	bne.n	8052da8 <get_fileinfo+0x64>
 8052da2:	2300      	movs	r3, #0
 8052da4:	61fb      	str	r3, [r7, #28]
 8052da6:	e01a      	b.n	8052dde <get_fileinfo+0x9a>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8052da8:	69fb      	ldr	r3, [r7, #28]
 8052daa:	2bfe      	cmp	r3, #254	; 0xfe
 8052dac:	d902      	bls.n	8052db4 <get_fileinfo+0x70>
 8052dae:	2300      	movs	r3, #0
 8052db0:	61fb      	str	r3, [r7, #28]
 8052db2:	e014      	b.n	8052dde <get_fileinfo+0x9a>
				fno->fname[i++] = (TCHAR)w;
 8052db4:	69fb      	ldr	r3, [r7, #28]
 8052db6:	1c5a      	adds	r2, r3, #1
 8052db8:	61fa      	str	r2, [r7, #28]
 8052dba:	89fa      	ldrh	r2, [r7, #14]
 8052dbc:	b2d1      	uxtb	r1, r2
 8052dbe:	683a      	ldr	r2, [r7, #0]
 8052dc0:	4413      	add	r3, r2
 8052dc2:	460a      	mov	r2, r1
 8052dc4:	769a      	strb	r2, [r3, #26]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8052dc6:	693b      	ldr	r3, [r7, #16]
 8052dc8:	691a      	ldr	r2, [r3, #16]
 8052dca:	69bb      	ldr	r3, [r7, #24]
 8052dcc:	1c59      	adds	r1, r3, #1
 8052dce:	61b9      	str	r1, [r7, #24]
 8052dd0:	005b      	lsls	r3, r3, #1
 8052dd2:	4413      	add	r3, r2
 8052dd4:	881b      	ldrh	r3, [r3, #0]
 8052dd6:	81fb      	strh	r3, [r7, #14]
 8052dd8:	89fb      	ldrh	r3, [r7, #14]
 8052dda:	2b00      	cmp	r3, #0
 8052ddc:	d1d7      	bne.n	8052d8e <get_fileinfo+0x4a>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8052dde:	683a      	ldr	r2, [r7, #0]
 8052de0:	69fb      	ldr	r3, [r7, #28]
 8052de2:	4413      	add	r3, r2
 8052de4:	331a      	adds	r3, #26
 8052de6:	2200      	movs	r2, #0
 8052de8:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8052dea:	2300      	movs	r3, #0
 8052dec:	61bb      	str	r3, [r7, #24]
 8052dee:	69bb      	ldr	r3, [r7, #24]
 8052df0:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8052df2:	683a      	ldr	r2, [r7, #0]
 8052df4:	69fb      	ldr	r3, [r7, #28]
 8052df6:	4413      	add	r3, r2
 8052df8:	331a      	adds	r3, #26
 8052dfa:	781b      	ldrb	r3, [r3, #0]
 8052dfc:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8052dfe:	e04c      	b.n	8052e9a <get_fileinfo+0x156>
		c = (TCHAR)dp->dir[i++];
 8052e00:	687b      	ldr	r3, [r7, #4]
 8052e02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8052e04:	69fb      	ldr	r3, [r7, #28]
 8052e06:	1c59      	adds	r1, r3, #1
 8052e08:	61f9      	str	r1, [r7, #28]
 8052e0a:	4413      	add	r3, r2
 8052e0c:	781b      	ldrb	r3, [r3, #0]
 8052e0e:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8052e10:	7dfb      	ldrb	r3, [r7, #23]
 8052e12:	2b20      	cmp	r3, #32
 8052e14:	d100      	bne.n	8052e18 <get_fileinfo+0xd4>
 8052e16:	e040      	b.n	8052e9a <get_fileinfo+0x156>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8052e18:	7dfb      	ldrb	r3, [r7, #23]
 8052e1a:	2b05      	cmp	r3, #5
 8052e1c:	d101      	bne.n	8052e22 <get_fileinfo+0xde>
 8052e1e:	23e5      	movs	r3, #229	; 0xe5
 8052e20:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8052e22:	69fb      	ldr	r3, [r7, #28]
 8052e24:	2b09      	cmp	r3, #9
 8052e26:	d10f      	bne.n	8052e48 <get_fileinfo+0x104>
			if (!lfv) fno->fname[j] = '.';
 8052e28:	89bb      	ldrh	r3, [r7, #12]
 8052e2a:	2b00      	cmp	r3, #0
 8052e2c:	d105      	bne.n	8052e3a <get_fileinfo+0xf6>
 8052e2e:	683a      	ldr	r2, [r7, #0]
 8052e30:	69bb      	ldr	r3, [r7, #24]
 8052e32:	4413      	add	r3, r2
 8052e34:	331a      	adds	r3, #26
 8052e36:	222e      	movs	r2, #46	; 0x2e
 8052e38:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8052e3a:	69bb      	ldr	r3, [r7, #24]
 8052e3c:	1c5a      	adds	r2, r3, #1
 8052e3e:	61ba      	str	r2, [r7, #24]
 8052e40:	683a      	ldr	r2, [r7, #0]
 8052e42:	4413      	add	r3, r2
 8052e44:	222e      	movs	r2, #46	; 0x2e
 8052e46:	735a      	strb	r2, [r3, #13]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8052e48:	683a      	ldr	r2, [r7, #0]
 8052e4a:	69bb      	ldr	r3, [r7, #24]
 8052e4c:	4413      	add	r3, r2
 8052e4e:	330d      	adds	r3, #13
 8052e50:	7dfa      	ldrb	r2, [r7, #23]
 8052e52:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8052e54:	89bb      	ldrh	r3, [r7, #12]
 8052e56:	2b00      	cmp	r3, #0
 8052e58:	d11c      	bne.n	8052e94 <get_fileinfo+0x150>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8052e5a:	7dfb      	ldrb	r3, [r7, #23]
 8052e5c:	2b40      	cmp	r3, #64	; 0x40
 8052e5e:	d913      	bls.n	8052e88 <get_fileinfo+0x144>
 8052e60:	7dfb      	ldrb	r3, [r7, #23]
 8052e62:	2b5a      	cmp	r3, #90	; 0x5a
 8052e64:	d810      	bhi.n	8052e88 <get_fileinfo+0x144>
 8052e66:	687b      	ldr	r3, [r7, #4]
 8052e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8052e6a:	330c      	adds	r3, #12
 8052e6c:	781b      	ldrb	r3, [r3, #0]
 8052e6e:	461a      	mov	r2, r3
 8052e70:	69fb      	ldr	r3, [r7, #28]
 8052e72:	2b08      	cmp	r3, #8
 8052e74:	d901      	bls.n	8052e7a <get_fileinfo+0x136>
 8052e76:	2310      	movs	r3, #16
 8052e78:	e000      	b.n	8052e7c <get_fileinfo+0x138>
 8052e7a:	2308      	movs	r3, #8
 8052e7c:	4013      	ands	r3, r2
 8052e7e:	2b00      	cmp	r3, #0
 8052e80:	d002      	beq.n	8052e88 <get_fileinfo+0x144>
				c += 0x20;			/* To lower */
 8052e82:	7dfb      	ldrb	r3, [r7, #23]
 8052e84:	3320      	adds	r3, #32
 8052e86:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8052e88:	683a      	ldr	r2, [r7, #0]
 8052e8a:	69bb      	ldr	r3, [r7, #24]
 8052e8c:	4413      	add	r3, r2
 8052e8e:	331a      	adds	r3, #26
 8052e90:	7dfa      	ldrb	r2, [r7, #23]
 8052e92:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8052e94:	69bb      	ldr	r3, [r7, #24]
 8052e96:	3301      	adds	r3, #1
 8052e98:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8052e9a:	69fb      	ldr	r3, [r7, #28]
 8052e9c:	2b0a      	cmp	r3, #10
 8052e9e:	d9af      	bls.n	8052e00 <get_fileinfo+0xbc>
	}
	if (!lfv) {
 8052ea0:	89bb      	ldrh	r3, [r7, #12]
 8052ea2:	2b00      	cmp	r3, #0
 8052ea4:	d10d      	bne.n	8052ec2 <get_fileinfo+0x17e>
		fno->fname[j] = 0;
 8052ea6:	683a      	ldr	r2, [r7, #0]
 8052ea8:	69bb      	ldr	r3, [r7, #24]
 8052eaa:	4413      	add	r3, r2
 8052eac:	331a      	adds	r3, #26
 8052eae:	2200      	movs	r2, #0
 8052eb0:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8052eb2:	687b      	ldr	r3, [r7, #4]
 8052eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8052eb6:	330c      	adds	r3, #12
 8052eb8:	781b      	ldrb	r3, [r3, #0]
 8052eba:	2b00      	cmp	r3, #0
 8052ebc:	d101      	bne.n	8052ec2 <get_fileinfo+0x17e>
 8052ebe:	2300      	movs	r3, #0
 8052ec0:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8052ec2:	683a      	ldr	r2, [r7, #0]
 8052ec4:	69bb      	ldr	r3, [r7, #24]
 8052ec6:	4413      	add	r3, r2
 8052ec8:	330d      	adds	r3, #13
 8052eca:	2200      	movs	r2, #0
 8052ecc:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8052ece:	687b      	ldr	r3, [r7, #4]
 8052ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8052ed2:	7ada      	ldrb	r2, [r3, #11]
 8052ed4:	683b      	ldr	r3, [r7, #0]
 8052ed6:	731a      	strb	r2, [r3, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8052ed8:	687b      	ldr	r3, [r7, #4]
 8052eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8052edc:	331c      	adds	r3, #28
 8052ede:	4618      	mov	r0, r3
 8052ee0:	f7fd f9e2 	bl	80502a8 <ld_dword>
 8052ee4:	4603      	mov	r3, r0
 8052ee6:	2200      	movs	r2, #0
 8052ee8:	461c      	mov	r4, r3
 8052eea:	4615      	mov	r5, r2
 8052eec:	683b      	ldr	r3, [r7, #0]
 8052eee:	e9c3 4500 	strd	r4, r5, [r3]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8052ef2:	687b      	ldr	r3, [r7, #4]
 8052ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8052ef6:	3316      	adds	r3, #22
 8052ef8:	4618      	mov	r0, r3
 8052efa:	f7fd f9d5 	bl	80502a8 <ld_dword>
 8052efe:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8052f00:	68bb      	ldr	r3, [r7, #8]
 8052f02:	b29a      	uxth	r2, r3
 8052f04:	683b      	ldr	r3, [r7, #0]
 8052f06:	815a      	strh	r2, [r3, #10]
 8052f08:	68bb      	ldr	r3, [r7, #8]
 8052f0a:	0c1b      	lsrs	r3, r3, #16
 8052f0c:	b29a      	uxth	r2, r3
 8052f0e:	683b      	ldr	r3, [r7, #0]
 8052f10:	811a      	strh	r2, [r3, #8]
 8052f12:	e000      	b.n	8052f16 <get_fileinfo+0x1d2>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8052f14:	bf00      	nop
}
 8052f16:	3720      	adds	r7, #32
 8052f18:	46bd      	mov	sp, r7
 8052f1a:	bdb0      	pop	{r4, r5, r7, pc}

08052f1c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8052f1c:	b580      	push	{r7, lr}
 8052f1e:	b08a      	sub	sp, #40	; 0x28
 8052f20:	af00      	add	r7, sp, #0
 8052f22:	6078      	str	r0, [r7, #4]
 8052f24:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8052f26:	683b      	ldr	r3, [r7, #0]
 8052f28:	681b      	ldr	r3, [r3, #0]
 8052f2a:	613b      	str	r3, [r7, #16]
 8052f2c:	687b      	ldr	r3, [r7, #4]
 8052f2e:	681b      	ldr	r3, [r3, #0]
 8052f30:	691b      	ldr	r3, [r3, #16]
 8052f32:	60fb      	str	r3, [r7, #12]
 8052f34:	2300      	movs	r3, #0
 8052f36:	617b      	str	r3, [r7, #20]
 8052f38:	697b      	ldr	r3, [r7, #20]
 8052f3a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8052f3c:	69bb      	ldr	r3, [r7, #24]
 8052f3e:	1c5a      	adds	r2, r3, #1
 8052f40:	61ba      	str	r2, [r7, #24]
 8052f42:	693a      	ldr	r2, [r7, #16]
 8052f44:	4413      	add	r3, r2
 8052f46:	781b      	ldrb	r3, [r3, #0]
 8052f48:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8052f4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8052f4c:	2b1f      	cmp	r3, #31
 8052f4e:	d940      	bls.n	8052fd2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8052f50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8052f52:	2b2f      	cmp	r3, #47	; 0x2f
 8052f54:	d006      	beq.n	8052f64 <create_name+0x48>
 8052f56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8052f58:	2b5c      	cmp	r3, #92	; 0x5c
 8052f5a:	d110      	bne.n	8052f7e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8052f5c:	e002      	b.n	8052f64 <create_name+0x48>
 8052f5e:	69bb      	ldr	r3, [r7, #24]
 8052f60:	3301      	adds	r3, #1
 8052f62:	61bb      	str	r3, [r7, #24]
 8052f64:	693a      	ldr	r2, [r7, #16]
 8052f66:	69bb      	ldr	r3, [r7, #24]
 8052f68:	4413      	add	r3, r2
 8052f6a:	781b      	ldrb	r3, [r3, #0]
 8052f6c:	2b2f      	cmp	r3, #47	; 0x2f
 8052f6e:	d0f6      	beq.n	8052f5e <create_name+0x42>
 8052f70:	693a      	ldr	r2, [r7, #16]
 8052f72:	69bb      	ldr	r3, [r7, #24]
 8052f74:	4413      	add	r3, r2
 8052f76:	781b      	ldrb	r3, [r3, #0]
 8052f78:	2b5c      	cmp	r3, #92	; 0x5c
 8052f7a:	d0f0      	beq.n	8052f5e <create_name+0x42>
			break;
 8052f7c:	e02a      	b.n	8052fd4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8052f7e:	697b      	ldr	r3, [r7, #20]
 8052f80:	2bfe      	cmp	r3, #254	; 0xfe
 8052f82:	d901      	bls.n	8052f88 <create_name+0x6c>
 8052f84:	2306      	movs	r3, #6
 8052f86:	e1ca      	b.n	805331e <create_name+0x402>
#if !_LFN_UNICODE
		w &= 0xFF;
 8052f88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8052f8a:	b2db      	uxtb	r3, r3
 8052f8c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8052f8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8052f90:	2101      	movs	r1, #1
 8052f92:	4618      	mov	r0, r3
 8052f94:	f002 fe24 	bl	8055be0 <ff_convert>
 8052f98:	4603      	mov	r3, r0
 8052f9a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8052f9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8052f9e:	2b00      	cmp	r3, #0
 8052fa0:	d101      	bne.n	8052fa6 <create_name+0x8a>
 8052fa2:	2306      	movs	r3, #6
 8052fa4:	e1bb      	b.n	805331e <create_name+0x402>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8052fa6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8052fa8:	2b7f      	cmp	r3, #127	; 0x7f
 8052faa:	d809      	bhi.n	8052fc0 <create_name+0xa4>
 8052fac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8052fae:	4619      	mov	r1, r3
 8052fb0:	489e      	ldr	r0, [pc, #632]	; (805322c <create_name+0x310>)
 8052fb2:	f7fd fba9 	bl	8050708 <chk_chr>
 8052fb6:	4603      	mov	r3, r0
 8052fb8:	2b00      	cmp	r3, #0
 8052fba:	d001      	beq.n	8052fc0 <create_name+0xa4>
 8052fbc:	2306      	movs	r3, #6
 8052fbe:	e1ae      	b.n	805331e <create_name+0x402>
		lfn[di++] = w;					/* Store the Unicode character */
 8052fc0:	697b      	ldr	r3, [r7, #20]
 8052fc2:	1c5a      	adds	r2, r3, #1
 8052fc4:	617a      	str	r2, [r7, #20]
 8052fc6:	005b      	lsls	r3, r3, #1
 8052fc8:	68fa      	ldr	r2, [r7, #12]
 8052fca:	4413      	add	r3, r2
 8052fcc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8052fce:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8052fd0:	e7b4      	b.n	8052f3c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8052fd2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8052fd4:	693a      	ldr	r2, [r7, #16]
 8052fd6:	69bb      	ldr	r3, [r7, #24]
 8052fd8:	441a      	add	r2, r3
 8052fda:	683b      	ldr	r3, [r7, #0]
 8052fdc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8052fde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8052fe0:	2b1f      	cmp	r3, #31
 8052fe2:	d801      	bhi.n	8052fe8 <create_name+0xcc>
 8052fe4:	2304      	movs	r3, #4
 8052fe6:	e000      	b.n	8052fea <create_name+0xce>
 8052fe8:	2300      	movs	r3, #0
 8052fea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 8052fee:	697b      	ldr	r3, [r7, #20]
 8052ff0:	2b01      	cmp	r3, #1
 8052ff2:	d109      	bne.n	8053008 <create_name+0xec>
 8052ff4:	697a      	ldr	r2, [r7, #20]
 8052ff6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8052ffa:	4413      	add	r3, r2
 8052ffc:	005b      	lsls	r3, r3, #1
 8052ffe:	68fa      	ldr	r2, [r7, #12]
 8053000:	4413      	add	r3, r2
 8053002:	881b      	ldrh	r3, [r3, #0]
 8053004:	2b2e      	cmp	r3, #46	; 0x2e
 8053006:	d015      	beq.n	8053034 <create_name+0x118>
 8053008:	697b      	ldr	r3, [r7, #20]
 805300a:	2b02      	cmp	r3, #2
 805300c:	d14d      	bne.n	80530aa <create_name+0x18e>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 805300e:	697a      	ldr	r2, [r7, #20]
 8053010:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8053014:	4413      	add	r3, r2
 8053016:	005b      	lsls	r3, r3, #1
 8053018:	68fa      	ldr	r2, [r7, #12]
 805301a:	4413      	add	r3, r2
 805301c:	881b      	ldrh	r3, [r3, #0]
 805301e:	2b2e      	cmp	r3, #46	; 0x2e
 8053020:	d143      	bne.n	80530aa <create_name+0x18e>
 8053022:	697a      	ldr	r2, [r7, #20]
 8053024:	4b82      	ldr	r3, [pc, #520]	; (8053230 <create_name+0x314>)
 8053026:	4413      	add	r3, r2
 8053028:	005b      	lsls	r3, r3, #1
 805302a:	68fa      	ldr	r2, [r7, #12]
 805302c:	4413      	add	r3, r2
 805302e:	881b      	ldrh	r3, [r3, #0]
 8053030:	2b2e      	cmp	r3, #46	; 0x2e
 8053032:	d13a      	bne.n	80530aa <create_name+0x18e>
		lfn[di] = 0;
 8053034:	697b      	ldr	r3, [r7, #20]
 8053036:	005b      	lsls	r3, r3, #1
 8053038:	68fa      	ldr	r2, [r7, #12]
 805303a:	4413      	add	r3, r2
 805303c:	2200      	movs	r2, #0
 805303e:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 8053040:	2300      	movs	r3, #0
 8053042:	623b      	str	r3, [r7, #32]
 8053044:	e00f      	b.n	8053066 <create_name+0x14a>
			dp->fn[i] = (i < di) ? '.' : ' ';
 8053046:	6a3a      	ldr	r2, [r7, #32]
 8053048:	697b      	ldr	r3, [r7, #20]
 805304a:	429a      	cmp	r2, r3
 805304c:	d201      	bcs.n	8053052 <create_name+0x136>
 805304e:	212e      	movs	r1, #46	; 0x2e
 8053050:	e000      	b.n	8053054 <create_name+0x138>
 8053052:	2120      	movs	r1, #32
 8053054:	687a      	ldr	r2, [r7, #4]
 8053056:	6a3b      	ldr	r3, [r7, #32]
 8053058:	4413      	add	r3, r2
 805305a:	3340      	adds	r3, #64	; 0x40
 805305c:	460a      	mov	r2, r1
 805305e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 8053060:	6a3b      	ldr	r3, [r7, #32]
 8053062:	3301      	adds	r3, #1
 8053064:	623b      	str	r3, [r7, #32]
 8053066:	6a3b      	ldr	r3, [r7, #32]
 8053068:	2b0a      	cmp	r3, #10
 805306a:	d9ec      	bls.n	8053046 <create_name+0x12a>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 805306c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8053070:	f043 0320 	orr.w	r3, r3, #32
 8053074:	b2d9      	uxtb	r1, r3
 8053076:	687a      	ldr	r2, [r7, #4]
 8053078:	6a3b      	ldr	r3, [r7, #32]
 805307a:	4413      	add	r3, r2
 805307c:	3340      	adds	r3, #64	; 0x40
 805307e:	460a      	mov	r2, r1
 8053080:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8053082:	2300      	movs	r3, #0
 8053084:	e14b      	b.n	805331e <create_name+0x402>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 8053086:	697a      	ldr	r2, [r7, #20]
 8053088:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 805308c:	4413      	add	r3, r2
 805308e:	005b      	lsls	r3, r3, #1
 8053090:	68fa      	ldr	r2, [r7, #12]
 8053092:	4413      	add	r3, r2
 8053094:	881b      	ldrh	r3, [r3, #0]
 8053096:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8053098:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 805309a:	2b20      	cmp	r3, #32
 805309c:	d002      	beq.n	80530a4 <create_name+0x188>
 805309e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80530a0:	2b2e      	cmp	r3, #46	; 0x2e
 80530a2:	d106      	bne.n	80530b2 <create_name+0x196>
		di--;
 80530a4:	697b      	ldr	r3, [r7, #20]
 80530a6:	3b01      	subs	r3, #1
 80530a8:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80530aa:	697b      	ldr	r3, [r7, #20]
 80530ac:	2b00      	cmp	r3, #0
 80530ae:	d1ea      	bne.n	8053086 <create_name+0x16a>
 80530b0:	e000      	b.n	80530b4 <create_name+0x198>
		if (w != ' ' && w != '.') break;
 80530b2:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80530b4:	697b      	ldr	r3, [r7, #20]
 80530b6:	005b      	lsls	r3, r3, #1
 80530b8:	68fa      	ldr	r2, [r7, #12]
 80530ba:	4413      	add	r3, r2
 80530bc:	2200      	movs	r2, #0
 80530be:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80530c0:	697b      	ldr	r3, [r7, #20]
 80530c2:	2b00      	cmp	r3, #0
 80530c4:	d101      	bne.n	80530ca <create_name+0x1ae>
 80530c6:	2306      	movs	r3, #6
 80530c8:	e129      	b.n	805331e <create_name+0x402>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80530ca:	687b      	ldr	r3, [r7, #4]
 80530cc:	3340      	adds	r3, #64	; 0x40
 80530ce:	220b      	movs	r2, #11
 80530d0:	2120      	movs	r1, #32
 80530d2:	4618      	mov	r0, r3
 80530d4:	f7fd fad6 	bl	8050684 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80530d8:	2300      	movs	r3, #0
 80530da:	61bb      	str	r3, [r7, #24]
 80530dc:	e002      	b.n	80530e4 <create_name+0x1c8>
 80530de:	69bb      	ldr	r3, [r7, #24]
 80530e0:	3301      	adds	r3, #1
 80530e2:	61bb      	str	r3, [r7, #24]
 80530e4:	69bb      	ldr	r3, [r7, #24]
 80530e6:	005b      	lsls	r3, r3, #1
 80530e8:	68fa      	ldr	r2, [r7, #12]
 80530ea:	4413      	add	r3, r2
 80530ec:	881b      	ldrh	r3, [r3, #0]
 80530ee:	2b20      	cmp	r3, #32
 80530f0:	d0f5      	beq.n	80530de <create_name+0x1c2>
 80530f2:	69bb      	ldr	r3, [r7, #24]
 80530f4:	005b      	lsls	r3, r3, #1
 80530f6:	68fa      	ldr	r2, [r7, #12]
 80530f8:	4413      	add	r3, r2
 80530fa:	881b      	ldrh	r3, [r3, #0]
 80530fc:	2b2e      	cmp	r3, #46	; 0x2e
 80530fe:	d0ee      	beq.n	80530de <create_name+0x1c2>
	if (si) cf |= NS_LOSS | NS_LFN;
 8053100:	69bb      	ldr	r3, [r7, #24]
 8053102:	2b00      	cmp	r3, #0
 8053104:	d009      	beq.n	805311a <create_name+0x1fe>
 8053106:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 805310a:	f043 0303 	orr.w	r3, r3, #3
 805310e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8053112:	e002      	b.n	805311a <create_name+0x1fe>
 8053114:	697b      	ldr	r3, [r7, #20]
 8053116:	3b01      	subs	r3, #1
 8053118:	617b      	str	r3, [r7, #20]
 805311a:	697b      	ldr	r3, [r7, #20]
 805311c:	2b00      	cmp	r3, #0
 805311e:	d009      	beq.n	8053134 <create_name+0x218>
 8053120:	697a      	ldr	r2, [r7, #20]
 8053122:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8053126:	4413      	add	r3, r2
 8053128:	005b      	lsls	r3, r3, #1
 805312a:	68fa      	ldr	r2, [r7, #12]
 805312c:	4413      	add	r3, r2
 805312e:	881b      	ldrh	r3, [r3, #0]
 8053130:	2b2e      	cmp	r3, #46	; 0x2e
 8053132:	d1ef      	bne.n	8053114 <create_name+0x1f8>

	i = b = 0; ni = 8;
 8053134:	2300      	movs	r3, #0
 8053136:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 805313a:	2300      	movs	r3, #0
 805313c:	623b      	str	r3, [r7, #32]
 805313e:	2308      	movs	r3, #8
 8053140:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8053142:	69bb      	ldr	r3, [r7, #24]
 8053144:	1c5a      	adds	r2, r3, #1
 8053146:	61ba      	str	r2, [r7, #24]
 8053148:	005b      	lsls	r3, r3, #1
 805314a:	68fa      	ldr	r2, [r7, #12]
 805314c:	4413      	add	r3, r2
 805314e:	881b      	ldrh	r3, [r3, #0]
 8053150:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8053152:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8053154:	2b00      	cmp	r3, #0
 8053156:	f000 8098 	beq.w	805328a <create_name+0x36e>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 805315a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 805315c:	2b20      	cmp	r3, #32
 805315e:	d006      	beq.n	805316e <create_name+0x252>
 8053160:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8053162:	2b2e      	cmp	r3, #46	; 0x2e
 8053164:	d10a      	bne.n	805317c <create_name+0x260>
 8053166:	69ba      	ldr	r2, [r7, #24]
 8053168:	697b      	ldr	r3, [r7, #20]
 805316a:	429a      	cmp	r2, r3
 805316c:	d006      	beq.n	805317c <create_name+0x260>
			cf |= NS_LOSS | NS_LFN; continue;
 805316e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8053172:	f043 0303 	orr.w	r3, r3, #3
 8053176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 805317a:	e085      	b.n	8053288 <create_name+0x36c>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 805317c:	6a3a      	ldr	r2, [r7, #32]
 805317e:	69fb      	ldr	r3, [r7, #28]
 8053180:	429a      	cmp	r2, r3
 8053182:	d203      	bcs.n	805318c <create_name+0x270>
 8053184:	69ba      	ldr	r2, [r7, #24]
 8053186:	697b      	ldr	r3, [r7, #20]
 8053188:	429a      	cmp	r2, r3
 805318a:	d123      	bne.n	80531d4 <create_name+0x2b8>
			if (ni == 11) {				/* Long extension */
 805318c:	69fb      	ldr	r3, [r7, #28]
 805318e:	2b0b      	cmp	r3, #11
 8053190:	d106      	bne.n	80531a0 <create_name+0x284>
				cf |= NS_LOSS | NS_LFN; break;
 8053192:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8053196:	f043 0303 	orr.w	r3, r3, #3
 805319a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 805319e:	e077      	b.n	8053290 <create_name+0x374>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80531a0:	69ba      	ldr	r2, [r7, #24]
 80531a2:	697b      	ldr	r3, [r7, #20]
 80531a4:	429a      	cmp	r2, r3
 80531a6:	d005      	beq.n	80531b4 <create_name+0x298>
 80531a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80531ac:	f043 0303 	orr.w	r3, r3, #3
 80531b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80531b4:	69ba      	ldr	r2, [r7, #24]
 80531b6:	697b      	ldr	r3, [r7, #20]
 80531b8:	429a      	cmp	r2, r3
 80531ba:	d868      	bhi.n	805328e <create_name+0x372>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80531bc:	697b      	ldr	r3, [r7, #20]
 80531be:	61bb      	str	r3, [r7, #24]
 80531c0:	2308      	movs	r3, #8
 80531c2:	623b      	str	r3, [r7, #32]
 80531c4:	230b      	movs	r3, #11
 80531c6:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80531c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80531cc:	009b      	lsls	r3, r3, #2
 80531ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80531d2:	e059      	b.n	8053288 <create_name+0x36c>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80531d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80531d6:	2b7f      	cmp	r3, #127	; 0x7f
 80531d8:	d914      	bls.n	8053204 <create_name+0x2e8>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80531da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80531dc:	2100      	movs	r1, #0
 80531de:	4618      	mov	r0, r3
 80531e0:	f002 fcfe 	bl	8055be0 <ff_convert>
 80531e4:	4603      	mov	r3, r0
 80531e6:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80531e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80531ea:	2b00      	cmp	r3, #0
 80531ec:	d004      	beq.n	80531f8 <create_name+0x2dc>
 80531ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80531f0:	3b80      	subs	r3, #128	; 0x80
 80531f2:	4a10      	ldr	r2, [pc, #64]	; (8053234 <create_name+0x318>)
 80531f4:	5cd3      	ldrb	r3, [r2, r3]
 80531f6:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80531f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80531fc:	f043 0302 	orr.w	r3, r3, #2
 8053200:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8053204:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8053206:	2b00      	cmp	r3, #0
 8053208:	d007      	beq.n	805321a <create_name+0x2fe>
 805320a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 805320c:	4619      	mov	r1, r3
 805320e:	480a      	ldr	r0, [pc, #40]	; (8053238 <create_name+0x31c>)
 8053210:	f7fd fa7a 	bl	8050708 <chk_chr>
 8053214:	4603      	mov	r3, r0
 8053216:	2b00      	cmp	r3, #0
 8053218:	d010      	beq.n	805323c <create_name+0x320>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 805321a:	235f      	movs	r3, #95	; 0x5f
 805321c:	84bb      	strh	r3, [r7, #36]	; 0x24
 805321e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8053222:	f043 0303 	orr.w	r3, r3, #3
 8053226:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 805322a:	e023      	b.n	8053274 <create_name+0x358>
 805322c:	0805b89c 	.word	0x0805b89c
 8053230:	7ffffffe 	.word	0x7ffffffe
 8053234:	0805b9a4 	.word	0x0805b9a4
 8053238:	0805b8a8 	.word	0x0805b8a8
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 805323c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 805323e:	2b40      	cmp	r3, #64	; 0x40
 8053240:	d909      	bls.n	8053256 <create_name+0x33a>
 8053242:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8053244:	2b5a      	cmp	r3, #90	; 0x5a
 8053246:	d806      	bhi.n	8053256 <create_name+0x33a>
					b |= 2;
 8053248:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 805324c:	f043 0302 	orr.w	r3, r3, #2
 8053250:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8053254:	e00e      	b.n	8053274 <create_name+0x358>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8053256:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8053258:	2b60      	cmp	r3, #96	; 0x60
 805325a:	d90b      	bls.n	8053274 <create_name+0x358>
 805325c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 805325e:	2b7a      	cmp	r3, #122	; 0x7a
 8053260:	d808      	bhi.n	8053274 <create_name+0x358>
						b |= 1; w -= 0x20;
 8053262:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8053266:	f043 0301 	orr.w	r3, r3, #1
 805326a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 805326e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8053270:	3b20      	subs	r3, #32
 8053272:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8053274:	6a3b      	ldr	r3, [r7, #32]
 8053276:	1c5a      	adds	r2, r3, #1
 8053278:	623a      	str	r2, [r7, #32]
 805327a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 805327c:	b2d1      	uxtb	r1, r2
 805327e:	687a      	ldr	r2, [r7, #4]
 8053280:	4413      	add	r3, r2
 8053282:	460a      	mov	r2, r1
 8053284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 8053288:	e75b      	b.n	8053142 <create_name+0x226>
		if (!w) break;					/* Break on end of the LFN */
 805328a:	bf00      	nop
 805328c:	e000      	b.n	8053290 <create_name+0x374>
			if (si > di) break;			/* No extension */
 805328e:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8053290:	687b      	ldr	r3, [r7, #4]
 8053292:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8053296:	2be5      	cmp	r3, #229	; 0xe5
 8053298:	d103      	bne.n	80532a2 <create_name+0x386>
 805329a:	687b      	ldr	r3, [r7, #4]
 805329c:	2205      	movs	r2, #5
 805329e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 80532a2:	69fb      	ldr	r3, [r7, #28]
 80532a4:	2b08      	cmp	r3, #8
 80532a6:	d104      	bne.n	80532b2 <create_name+0x396>
 80532a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80532ac:	009b      	lsls	r3, r3, #2
 80532ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80532b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80532b6:	f003 030c 	and.w	r3, r3, #12
 80532ba:	2b0c      	cmp	r3, #12
 80532bc:	d005      	beq.n	80532ca <create_name+0x3ae>
 80532be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80532c2:	f003 0303 	and.w	r3, r3, #3
 80532c6:	2b03      	cmp	r3, #3
 80532c8:	d105      	bne.n	80532d6 <create_name+0x3ba>
 80532ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80532ce:	f043 0302 	orr.w	r3, r3, #2
 80532d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80532d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80532da:	f003 0302 	and.w	r3, r3, #2
 80532de:	2b00      	cmp	r3, #0
 80532e0:	d117      	bne.n	8053312 <create_name+0x3f6>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80532e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80532e6:	f003 0303 	and.w	r3, r3, #3
 80532ea:	2b01      	cmp	r3, #1
 80532ec:	d105      	bne.n	80532fa <create_name+0x3de>
 80532ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80532f2:	f043 0310 	orr.w	r3, r3, #16
 80532f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80532fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80532fe:	f003 030c 	and.w	r3, r3, #12
 8053302:	2b04      	cmp	r3, #4
 8053304:	d105      	bne.n	8053312 <create_name+0x3f6>
 8053306:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 805330a:	f043 0308 	orr.w	r3, r3, #8
 805330e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8053312:	687b      	ldr	r3, [r7, #4]
 8053314:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8053318:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 805331c:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 805331e:	4618      	mov	r0, r3
 8053320:	3728      	adds	r7, #40	; 0x28
 8053322:	46bd      	mov	sp, r7
 8053324:	bd80      	pop	{r7, pc}
 8053326:	bf00      	nop

08053328 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8053328:	b5b0      	push	{r4, r5, r7, lr}
 805332a:	b09a      	sub	sp, #104	; 0x68
 805332c:	af00      	add	r7, sp, #0
 805332e:	6078      	str	r0, [r7, #4]
 8053330:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8053332:	687b      	ldr	r3, [r7, #4]
 8053334:	663b      	str	r3, [r7, #96]	; 0x60
	FATFS *fs = obj->fs;
 8053336:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8053338:	681b      	ldr	r3, [r3, #0]
 805333a:	65fb      	str	r3, [r7, #92]	; 0x5c


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 805333c:	683b      	ldr	r3, [r7, #0]
 805333e:	781b      	ldrb	r3, [r3, #0]
 8053340:	2b2f      	cmp	r3, #47	; 0x2f
 8053342:	d00b      	beq.n	805335c <follow_path+0x34>
 8053344:	683b      	ldr	r3, [r7, #0]
 8053346:	781b      	ldrb	r3, [r3, #0]
 8053348:	2b5c      	cmp	r3, #92	; 0x5c
 805334a:	d007      	beq.n	805335c <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 805334c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 805334e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8053350:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8053352:	609a      	str	r2, [r3, #8]
 8053354:	e00d      	b.n	8053372 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8053356:	683b      	ldr	r3, [r7, #0]
 8053358:	3301      	adds	r3, #1
 805335a:	603b      	str	r3, [r7, #0]
 805335c:	683b      	ldr	r3, [r7, #0]
 805335e:	781b      	ldrb	r3, [r3, #0]
 8053360:	2b2f      	cmp	r3, #47	; 0x2f
 8053362:	d0f8      	beq.n	8053356 <follow_path+0x2e>
 8053364:	683b      	ldr	r3, [r7, #0]
 8053366:	781b      	ldrb	r3, [r3, #0]
 8053368:	2b5c      	cmp	r3, #92	; 0x5c
 805336a:	d0f4      	beq.n	8053356 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 805336c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 805336e:	2200      	movs	r2, #0
 8053370:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 8053372:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8053374:	2200      	movs	r2, #0
 8053376:	61da      	str	r2, [r3, #28]
#if _FS_RPATH != 0
	if (fs->fs_type == FS_EXFAT && obj->sclust) {	/* Retrieve the sub-directory status if needed */
 8053378:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 805337a:	781b      	ldrb	r3, [r3, #0]
 805337c:	2b04      	cmp	r3, #4
 805337e:	d135      	bne.n	80533ec <follow_path+0xc4>
 8053380:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8053382:	689b      	ldr	r3, [r3, #8]
 8053384:	2b00      	cmp	r3, #0
 8053386:	d031      	beq.n	80533ec <follow_path+0xc4>
		DIR dj;

		obj->c_scl = fs->cdc_scl;
 8053388:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 805338a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 805338c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 805338e:	621a      	str	r2, [r3, #32]
		obj->c_size = fs->cdc_size;
 8053390:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8053392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8053394:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8053396:	625a      	str	r2, [r3, #36]	; 0x24
		obj->c_ofs = fs->cdc_ofs;
 8053398:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 805339a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 805339c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 805339e:	629a      	str	r2, [r3, #40]	; 0x28
		res = load_obj_dir(&dj, obj);
 80533a0:	f107 0308 	add.w	r3, r7, #8
 80533a4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80533a6:	4618      	mov	r0, r3
 80533a8:	f7fe ffe2 	bl	8052370 <load_obj_dir>
 80533ac:	4603      	mov	r3, r0
 80533ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		if (res != FR_OK) return res;
 80533b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80533b6:	2b00      	cmp	r3, #0
 80533b8:	d002      	beq.n	80533c0 <follow_path+0x98>
 80533ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80533be:	e0c6      	b.n	805354e <follow_path+0x226>
		obj->objsize = ld_dword(fs->dirbuf + XDIR_FileSize);
 80533c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80533c2:	695b      	ldr	r3, [r3, #20]
 80533c4:	3338      	adds	r3, #56	; 0x38
 80533c6:	4618      	mov	r0, r3
 80533c8:	f7fc ff6e 	bl	80502a8 <ld_dword>
 80533cc:	4603      	mov	r3, r0
 80533ce:	2200      	movs	r2, #0
 80533d0:	461c      	mov	r4, r3
 80533d2:	4615      	mov	r5, r2
 80533d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80533d6:	e9c3 4504 	strd	r4, r5, [r3, #16]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 80533da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80533dc:	695b      	ldr	r3, [r3, #20]
 80533de:	3321      	adds	r3, #33	; 0x21
 80533e0:	781b      	ldrb	r3, [r3, #0]
 80533e2:	f003 0302 	and.w	r3, r3, #2
 80533e6:	b2da      	uxtb	r2, r3
 80533e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80533ea:	71da      	strb	r2, [r3, #7]
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80533ec:	683b      	ldr	r3, [r7, #0]
 80533ee:	781b      	ldrb	r3, [r3, #0]
 80533f0:	2b1f      	cmp	r3, #31
 80533f2:	d80b      	bhi.n	805340c <follow_path+0xe4>
		dp->fn[NSFLAG] = NS_NONAME;
 80533f4:	687b      	ldr	r3, [r7, #4]
 80533f6:	2280      	movs	r2, #128	; 0x80
 80533f8:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 80533fc:	2100      	movs	r1, #0
 80533fe:	6878      	ldr	r0, [r7, #4]
 8053400:	f7fe fa0f 	bl	8051822 <dir_sdi>
 8053404:	4603      	mov	r3, r0
 8053406:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 805340a:	e09e      	b.n	805354a <follow_path+0x222>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 805340c:	463b      	mov	r3, r7
 805340e:	4619      	mov	r1, r3
 8053410:	6878      	ldr	r0, [r7, #4]
 8053412:	f7ff fd83 	bl	8052f1c <create_name>
 8053416:	4603      	mov	r3, r0
 8053418:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			if (res != FR_OK) break;
 805341c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8053420:	2b00      	cmp	r3, #0
 8053422:	f040 808d 	bne.w	8053540 <follow_path+0x218>
			res = dir_find(dp);				/* Find an object with the segment name */
 8053426:	6878      	ldr	r0, [r7, #4]
 8053428:	f7ff f961 	bl	80526ee <dir_find>
 805342c:	4603      	mov	r3, r0
 805342e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			ns = dp->fn[NSFLAG];
 8053432:	687b      	ldr	r3, [r7, #4]
 8053434:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8053438:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			if (res != FR_OK) {				/* Failed to find the object */
 805343c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8053440:	2b00      	cmp	r3, #0
 8053442:	d021      	beq.n	8053488 <follow_path+0x160>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8053444:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8053448:	2b04      	cmp	r3, #4
 805344a:	d17b      	bne.n	8053544 <follow_path+0x21c>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 805344c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8053450:	f003 0320 	and.w	r3, r3, #32
 8053454:	2b00      	cmp	r3, #0
 8053456:	d00d      	beq.n	8053474 <follow_path+0x14c>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8053458:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 805345c:	f003 0304 	and.w	r3, r3, #4
 8053460:	2b00      	cmp	r3, #0
 8053462:	d06b      	beq.n	805353c <follow_path+0x214>
						dp->fn[NSFLAG] = NS_NONAME;
 8053464:	687b      	ldr	r3, [r7, #4]
 8053466:	2280      	movs	r2, #128	; 0x80
 8053468:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
						res = FR_OK;
 805346c:	2300      	movs	r3, #0
 805346e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8053472:	e067      	b.n	8053544 <follow_path+0x21c>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8053474:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8053478:	f003 0304 	and.w	r3, r3, #4
 805347c:	2b00      	cmp	r3, #0
 805347e:	d161      	bne.n	8053544 <follow_path+0x21c>
 8053480:	2305      	movs	r3, #5
 8053482:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8053486:	e05d      	b.n	8053544 <follow_path+0x21c>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8053488:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 805348c:	f003 0304 	and.w	r3, r3, #4
 8053490:	2b00      	cmp	r3, #0
 8053492:	d159      	bne.n	8053548 <follow_path+0x220>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8053494:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8053496:	799b      	ldrb	r3, [r3, #6]
 8053498:	f003 0310 	and.w	r3, r3, #16
 805349c:	2b00      	cmp	r3, #0
 805349e:	d103      	bne.n	80534a8 <follow_path+0x180>
				res = FR_NO_PATH; break;
 80534a0:	2305      	movs	r3, #5
 80534a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80534a6:	e050      	b.n	805354a <follow_path+0x222>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 80534a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80534aa:	781b      	ldrb	r3, [r3, #0]
 80534ac:	2b04      	cmp	r3, #4
 80534ae:	d130      	bne.n	8053512 <follow_path+0x1ea>
				obj->c_scl = obj->sclust;
 80534b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80534b2:	689a      	ldr	r2, [r3, #8]
 80534b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80534b6:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 80534b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80534ba:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80534be:	4613      	mov	r3, r2
 80534c0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80534c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80534c6:	79d2      	ldrb	r2, [r2, #7]
 80534c8:	431a      	orrs	r2, r3
 80534ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80534cc:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 80534ce:	687b      	ldr	r3, [r7, #4]
 80534d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80534d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80534d4:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 80534d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80534d8:	695b      	ldr	r3, [r3, #20]
 80534da:	3334      	adds	r3, #52	; 0x34
 80534dc:	4618      	mov	r0, r3
 80534de:	f7fc fee3 	bl	80502a8 <ld_dword>
 80534e2:	4602      	mov	r2, r0
 80534e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80534e6:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 80534e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80534ea:	695b      	ldr	r3, [r3, #20]
 80534ec:	3321      	adds	r3, #33	; 0x21
 80534ee:	781b      	ldrb	r3, [r3, #0]
 80534f0:	f003 0302 	and.w	r3, r3, #2
 80534f4:	b2da      	uxtb	r2, r3
 80534f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80534f8:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 80534fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80534fc:	695b      	ldr	r3, [r3, #20]
 80534fe:	3338      	adds	r3, #56	; 0x38
 8053500:	4618      	mov	r0, r3
 8053502:	f7fc fef4 	bl	80502ee <ld_qword>
 8053506:	4602      	mov	r2, r0
 8053508:	460b      	mov	r3, r1
 805350a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 805350c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8053510:	e77c      	b.n	805340c <follow_path+0xe4>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8053512:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8053514:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8053518:	687b      	ldr	r3, [r7, #4]
 805351a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 805351c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 805351e:	8992      	ldrh	r2, [r2, #12]
 8053520:	fbb3 f0f2 	udiv	r0, r3, r2
 8053524:	fb00 f202 	mul.w	r2, r0, r2
 8053528:	1a9b      	subs	r3, r3, r2
 805352a:	440b      	add	r3, r1
 805352c:	4619      	mov	r1, r3
 805352e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8053530:	f7fe fb4d 	bl	8051bce <ld_clust>
 8053534:	4602      	mov	r2, r0
 8053536:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8053538:	609a      	str	r2, [r3, #8]
 805353a:	e767      	b.n	805340c <follow_path+0xe4>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 805353c:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 805353e:	e765      	b.n	805340c <follow_path+0xe4>
			if (res != FR_OK) break;
 8053540:	bf00      	nop
 8053542:	e002      	b.n	805354a <follow_path+0x222>
				break;
 8053544:	bf00      	nop
 8053546:	e000      	b.n	805354a <follow_path+0x222>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8053548:	bf00      	nop
			}
		}
	}

	return res;
 805354a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 805354e:	4618      	mov	r0, r3
 8053550:	3768      	adds	r7, #104	; 0x68
 8053552:	46bd      	mov	sp, r7
 8053554:	bdb0      	pop	{r4, r5, r7, pc}

08053556 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8053556:	b480      	push	{r7}
 8053558:	b087      	sub	sp, #28
 805355a:	af00      	add	r7, sp, #0
 805355c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 805355e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8053562:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8053564:	687b      	ldr	r3, [r7, #4]
 8053566:	681b      	ldr	r3, [r3, #0]
 8053568:	2b00      	cmp	r3, #0
 805356a:	d031      	beq.n	80535d0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 805356c:	687b      	ldr	r3, [r7, #4]
 805356e:	681b      	ldr	r3, [r3, #0]
 8053570:	617b      	str	r3, [r7, #20]
 8053572:	e002      	b.n	805357a <get_ldnumber+0x24>
 8053574:	697b      	ldr	r3, [r7, #20]
 8053576:	3301      	adds	r3, #1
 8053578:	617b      	str	r3, [r7, #20]
 805357a:	697b      	ldr	r3, [r7, #20]
 805357c:	781b      	ldrb	r3, [r3, #0]
 805357e:	2b1f      	cmp	r3, #31
 8053580:	d903      	bls.n	805358a <get_ldnumber+0x34>
 8053582:	697b      	ldr	r3, [r7, #20]
 8053584:	781b      	ldrb	r3, [r3, #0]
 8053586:	2b3a      	cmp	r3, #58	; 0x3a
 8053588:	d1f4      	bne.n	8053574 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 805358a:	697b      	ldr	r3, [r7, #20]
 805358c:	781b      	ldrb	r3, [r3, #0]
 805358e:	2b3a      	cmp	r3, #58	; 0x3a
 8053590:	d11c      	bne.n	80535cc <get_ldnumber+0x76>
			tp = *path;
 8053592:	687b      	ldr	r3, [r7, #4]
 8053594:	681b      	ldr	r3, [r3, #0]
 8053596:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8053598:	68fb      	ldr	r3, [r7, #12]
 805359a:	1c5a      	adds	r2, r3, #1
 805359c:	60fa      	str	r2, [r7, #12]
 805359e:	781b      	ldrb	r3, [r3, #0]
 80535a0:	3b30      	subs	r3, #48	; 0x30
 80535a2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80535a4:	68bb      	ldr	r3, [r7, #8]
 80535a6:	2b09      	cmp	r3, #9
 80535a8:	d80e      	bhi.n	80535c8 <get_ldnumber+0x72>
 80535aa:	68fa      	ldr	r2, [r7, #12]
 80535ac:	697b      	ldr	r3, [r7, #20]
 80535ae:	429a      	cmp	r2, r3
 80535b0:	d10a      	bne.n	80535c8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80535b2:	68bb      	ldr	r3, [r7, #8]
 80535b4:	2b00      	cmp	r3, #0
 80535b6:	d107      	bne.n	80535c8 <get_ldnumber+0x72>
					vol = (int)i;
 80535b8:	68bb      	ldr	r3, [r7, #8]
 80535ba:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80535bc:	697b      	ldr	r3, [r7, #20]
 80535be:	3301      	adds	r3, #1
 80535c0:	617b      	str	r3, [r7, #20]
 80535c2:	687b      	ldr	r3, [r7, #4]
 80535c4:	697a      	ldr	r2, [r7, #20]
 80535c6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80535c8:	693b      	ldr	r3, [r7, #16]
 80535ca:	e002      	b.n	80535d2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80535cc:	2300      	movs	r3, #0
 80535ce:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80535d0:	693b      	ldr	r3, [r7, #16]
}
 80535d2:	4618      	mov	r0, r3
 80535d4:	371c      	adds	r7, #28
 80535d6:	46bd      	mov	sp, r7
 80535d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80535dc:	4770      	bx	lr
	...

080535e0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80535e0:	b580      	push	{r7, lr}
 80535e2:	b082      	sub	sp, #8
 80535e4:	af00      	add	r7, sp, #0
 80535e6:	6078      	str	r0, [r7, #4]
 80535e8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80535ea:	687b      	ldr	r3, [r7, #4]
 80535ec:	2200      	movs	r2, #0
 80535ee:	70da      	strb	r2, [r3, #3]
 80535f0:	687b      	ldr	r3, [r7, #4]
 80535f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80535f6:	64da      	str	r2, [r3, #76]	; 0x4c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80535f8:	6839      	ldr	r1, [r7, #0]
 80535fa:	6878      	ldr	r0, [r7, #4]
 80535fc:	f7fd fa80 	bl	8050b00 <move_window>
 8053600:	4603      	mov	r3, r0
 8053602:	2b00      	cmp	r3, #0
 8053604:	d001      	beq.n	805360a <check_fs+0x2a>
 8053606:	2304      	movs	r3, #4
 8053608:	e044      	b.n	8053694 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 805360a:	687b      	ldr	r3, [r7, #4]
 805360c:	3350      	adds	r3, #80	; 0x50
 805360e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8053612:	4618      	mov	r0, r3
 8053614:	f7fc fe30 	bl	8050278 <ld_word>
 8053618:	4603      	mov	r3, r0
 805361a:	461a      	mov	r2, r3
 805361c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8053620:	429a      	cmp	r2, r3
 8053622:	d001      	beq.n	8053628 <check_fs+0x48>
 8053624:	2303      	movs	r3, #3
 8053626:	e035      	b.n	8053694 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8053628:	687b      	ldr	r3, [r7, #4]
 805362a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 805362e:	2be9      	cmp	r3, #233	; 0xe9
 8053630:	d009      	beq.n	8053646 <check_fs+0x66>
 8053632:	687b      	ldr	r3, [r7, #4]
 8053634:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8053638:	2beb      	cmp	r3, #235	; 0xeb
 805363a:	d11e      	bne.n	805367a <check_fs+0x9a>
 805363c:	687b      	ldr	r3, [r7, #4]
 805363e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8053642:	2b90      	cmp	r3, #144	; 0x90
 8053644:	d119      	bne.n	805367a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8053646:	687b      	ldr	r3, [r7, #4]
 8053648:	3350      	adds	r3, #80	; 0x50
 805364a:	3336      	adds	r3, #54	; 0x36
 805364c:	4618      	mov	r0, r3
 805364e:	f7fc fe2b 	bl	80502a8 <ld_dword>
 8053652:	4603      	mov	r3, r0
 8053654:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8053658:	4a10      	ldr	r2, [pc, #64]	; (805369c <check_fs+0xbc>)
 805365a:	4293      	cmp	r3, r2
 805365c:	d101      	bne.n	8053662 <check_fs+0x82>
 805365e:	2300      	movs	r3, #0
 8053660:	e018      	b.n	8053694 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8053662:	687b      	ldr	r3, [r7, #4]
 8053664:	3350      	adds	r3, #80	; 0x50
 8053666:	3352      	adds	r3, #82	; 0x52
 8053668:	4618      	mov	r0, r3
 805366a:	f7fc fe1d 	bl	80502a8 <ld_dword>
 805366e:	4603      	mov	r3, r0
 8053670:	4a0b      	ldr	r2, [pc, #44]	; (80536a0 <check_fs+0xc0>)
 8053672:	4293      	cmp	r3, r2
 8053674:	d101      	bne.n	805367a <check_fs+0x9a>
 8053676:	2300      	movs	r3, #0
 8053678:	e00c      	b.n	8053694 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 805367a:	687b      	ldr	r3, [r7, #4]
 805367c:	3350      	adds	r3, #80	; 0x50
 805367e:	220b      	movs	r2, #11
 8053680:	4908      	ldr	r1, [pc, #32]	; (80536a4 <check_fs+0xc4>)
 8053682:	4618      	mov	r0, r3
 8053684:	f7fd f819 	bl	80506ba <mem_cmp>
 8053688:	4603      	mov	r3, r0
 805368a:	2b00      	cmp	r3, #0
 805368c:	d101      	bne.n	8053692 <check_fs+0xb2>
 805368e:	2301      	movs	r3, #1
 8053690:	e000      	b.n	8053694 <check_fs+0xb4>
#endif
	return 2;
 8053692:	2302      	movs	r3, #2
}
 8053694:	4618      	mov	r0, r3
 8053696:	3708      	adds	r7, #8
 8053698:	46bd      	mov	sp, r7
 805369a:	bd80      	pop	{r7, pc}
 805369c:	00544146 	.word	0x00544146
 80536a0:	33544146 	.word	0x33544146
 80536a4:	0805b8b0 	.word	0x0805b8b0

080536a8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80536a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80536ac:	b09c      	sub	sp, #112	; 0x70
 80536ae:	af00      	add	r7, sp, #0
 80536b0:	61f8      	str	r0, [r7, #28]
 80536b2:	61b9      	str	r1, [r7, #24]
 80536b4:	4613      	mov	r3, r2
 80536b6:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80536b8:	69bb      	ldr	r3, [r7, #24]
 80536ba:	2200      	movs	r2, #0
 80536bc:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80536be:	69f8      	ldr	r0, [r7, #28]
 80536c0:	f7ff ff49 	bl	8053556 <get_ldnumber>
 80536c4:	6578      	str	r0, [r7, #84]	; 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 80536c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80536c8:	2b00      	cmp	r3, #0
 80536ca:	da01      	bge.n	80536d0 <find_volume+0x28>
 80536cc:	230b      	movs	r3, #11
 80536ce:	e37b      	b.n	8053dc8 <find_volume+0x720>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80536d0:	4aa2      	ldr	r2, [pc, #648]	; (805395c <find_volume+0x2b4>)
 80536d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80536d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80536d8:	653b      	str	r3, [r7, #80]	; 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80536da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80536dc:	2b00      	cmp	r3, #0
 80536de:	d101      	bne.n	80536e4 <find_volume+0x3c>
 80536e0:	230c      	movs	r3, #12
 80536e2:	e371      	b.n	8053dc8 <find_volume+0x720>

	ENTER_FF(fs);						/* Lock the volume */
 80536e4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80536e6:	f7fd f82a 	bl	805073e <lock_fs>
 80536ea:	4603      	mov	r3, r0
 80536ec:	2b00      	cmp	r3, #0
 80536ee:	d101      	bne.n	80536f4 <find_volume+0x4c>
 80536f0:	230f      	movs	r3, #15
 80536f2:	e369      	b.n	8053dc8 <find_volume+0x720>
	*rfs = fs;							/* Return pointer to the file system object */
 80536f4:	69bb      	ldr	r3, [r7, #24]
 80536f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80536f8:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80536fa:	7dfb      	ldrb	r3, [r7, #23]
 80536fc:	f023 0301 	bic.w	r3, r3, #1
 8053700:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8053702:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053704:	781b      	ldrb	r3, [r3, #0]
 8053706:	2b00      	cmp	r3, #0
 8053708:	d01a      	beq.n	8053740 <find_volume+0x98>
		stat = disk_status(fs->drv);
 805370a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 805370c:	785b      	ldrb	r3, [r3, #1]
 805370e:	4618      	mov	r0, r3
 8053710:	f7fc fd14 	bl	805013c <disk_status>
 8053714:	4603      	mov	r3, r0
 8053716:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 805371a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 805371e:	f003 0301 	and.w	r3, r3, #1
 8053722:	2b00      	cmp	r3, #0
 8053724:	d10c      	bne.n	8053740 <find_volume+0x98>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8053726:	7dfb      	ldrb	r3, [r7, #23]
 8053728:	2b00      	cmp	r3, #0
 805372a:	d007      	beq.n	805373c <find_volume+0x94>
 805372c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8053730:	f003 0304 	and.w	r3, r3, #4
 8053734:	2b00      	cmp	r3, #0
 8053736:	d001      	beq.n	805373c <find_volume+0x94>
				return FR_WRITE_PROTECTED;
 8053738:	230a      	movs	r3, #10
 805373a:	e345      	b.n	8053dc8 <find_volume+0x720>
			}
			return FR_OK;				/* The file system object is valid */
 805373c:	2300      	movs	r3, #0
 805373e:	e343      	b.n	8053dc8 <find_volume+0x720>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8053740:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053742:	2200      	movs	r2, #0
 8053744:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8053746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8053748:	b2da      	uxtb	r2, r3
 805374a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 805374c:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 805374e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053750:	785b      	ldrb	r3, [r3, #1]
 8053752:	4618      	mov	r0, r3
 8053754:	f7fc fd0c 	bl	8050170 <disk_initialize>
 8053758:	4603      	mov	r3, r0
 805375a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 805375e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8053762:	f003 0301 	and.w	r3, r3, #1
 8053766:	2b00      	cmp	r3, #0
 8053768:	d001      	beq.n	805376e <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 805376a:	2303      	movs	r3, #3
 805376c:	e32c      	b.n	8053dc8 <find_volume+0x720>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 805376e:	7dfb      	ldrb	r3, [r7, #23]
 8053770:	2b00      	cmp	r3, #0
 8053772:	d007      	beq.n	8053784 <find_volume+0xdc>
 8053774:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8053778:	f003 0304 	and.w	r3, r3, #4
 805377c:	2b00      	cmp	r3, #0
 805377e:	d001      	beq.n	8053784 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 8053780:	230a      	movs	r3, #10
 8053782:	e321      	b.n	8053dc8 <find_volume+0x720>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8053784:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053786:	7858      	ldrb	r0, [r3, #1]
 8053788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 805378a:	330c      	adds	r3, #12
 805378c:	461a      	mov	r2, r3
 805378e:	2102      	movs	r1, #2
 8053790:	f7fc fd54 	bl	805023c <disk_ioctl>
 8053794:	4603      	mov	r3, r0
 8053796:	2b00      	cmp	r3, #0
 8053798:	d001      	beq.n	805379e <find_volume+0xf6>
 805379a:	2301      	movs	r3, #1
 805379c:	e314      	b.n	8053dc8 <find_volume+0x720>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 805379e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80537a0:	899b      	ldrh	r3, [r3, #12]
 80537a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80537a6:	d80d      	bhi.n	80537c4 <find_volume+0x11c>
 80537a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80537aa:	899b      	ldrh	r3, [r3, #12]
 80537ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80537b0:	d308      	bcc.n	80537c4 <find_volume+0x11c>
 80537b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80537b4:	899b      	ldrh	r3, [r3, #12]
 80537b6:	461a      	mov	r2, r3
 80537b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80537ba:	899b      	ldrh	r3, [r3, #12]
 80537bc:	3b01      	subs	r3, #1
 80537be:	4013      	ands	r3, r2
 80537c0:	2b00      	cmp	r3, #0
 80537c2:	d001      	beq.n	80537c8 <find_volume+0x120>
 80537c4:	2301      	movs	r3, #1
 80537c6:	e2ff      	b.n	8053dc8 <find_volume+0x720>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80537c8:	2300      	movs	r3, #0
 80537ca:	66bb      	str	r3, [r7, #104]	; 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80537cc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80537ce:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80537d0:	f7ff ff06 	bl	80535e0 <check_fs>
 80537d4:	4603      	mov	r3, r0
 80537d6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80537da:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80537de:	2b02      	cmp	r3, #2
 80537e0:	d14d      	bne.n	805387e <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80537e2:	2300      	movs	r3, #0
 80537e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80537e6:	e020      	b.n	805382a <find_volume+0x182>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80537e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80537ea:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80537ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80537f0:	011b      	lsls	r3, r3, #4
 80537f2:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80537f6:	4413      	add	r3, r2
 80537f8:	64bb      	str	r3, [r7, #72]	; 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80537fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80537fc:	3304      	adds	r3, #4
 80537fe:	781b      	ldrb	r3, [r3, #0]
 8053800:	2b00      	cmp	r3, #0
 8053802:	d006      	beq.n	8053812 <find_volume+0x16a>
 8053804:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8053806:	3308      	adds	r3, #8
 8053808:	4618      	mov	r0, r3
 805380a:	f7fc fd4d 	bl	80502a8 <ld_dword>
 805380e:	4602      	mov	r2, r0
 8053810:	e000      	b.n	8053814 <find_volume+0x16c>
 8053812:	2200      	movs	r2, #0
 8053814:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8053816:	009b      	lsls	r3, r3, #2
 8053818:	3360      	adds	r3, #96	; 0x60
 805381a:	f107 0110 	add.w	r1, r7, #16
 805381e:	440b      	add	r3, r1
 8053820:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8053824:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8053826:	3301      	adds	r3, #1
 8053828:	65bb      	str	r3, [r7, #88]	; 0x58
 805382a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 805382c:	2b03      	cmp	r3, #3
 805382e:	d9db      	bls.n	80537e8 <find_volume+0x140>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8053830:	2300      	movs	r3, #0
 8053832:	65bb      	str	r3, [r7, #88]	; 0x58
		if (i) i--;
 8053834:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8053836:	2b00      	cmp	r3, #0
 8053838:	d002      	beq.n	8053840 <find_volume+0x198>
 805383a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 805383c:	3b01      	subs	r3, #1
 805383e:	65bb      	str	r3, [r7, #88]	; 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 8053840:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8053842:	009b      	lsls	r3, r3, #2
 8053844:	3360      	adds	r3, #96	; 0x60
 8053846:	f107 0210 	add.w	r2, r7, #16
 805384a:	4413      	add	r3, r2
 805384c:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8053850:	66bb      	str	r3, [r7, #104]	; 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8053852:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8053854:	2b00      	cmp	r3, #0
 8053856:	d005      	beq.n	8053864 <find_volume+0x1bc>
 8053858:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 805385a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 805385c:	f7ff fec0 	bl	80535e0 <check_fs>
 8053860:	4603      	mov	r3, r0
 8053862:	e000      	b.n	8053866 <find_volume+0x1be>
 8053864:	2303      	movs	r3, #3
 8053866:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 805386a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 805386e:	2b01      	cmp	r3, #1
 8053870:	d905      	bls.n	805387e <find_volume+0x1d6>
 8053872:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8053874:	3301      	adds	r3, #1
 8053876:	65bb      	str	r3, [r7, #88]	; 0x58
 8053878:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 805387a:	2b03      	cmp	r3, #3
 805387c:	d9e0      	bls.n	8053840 <find_volume+0x198>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 805387e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8053882:	2b04      	cmp	r3, #4
 8053884:	d101      	bne.n	805388a <find_volume+0x1e2>
 8053886:	2301      	movs	r3, #1
 8053888:	e29e      	b.n	8053dc8 <find_volume+0x720>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 805388a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 805388e:	2b01      	cmp	r3, #1
 8053890:	d901      	bls.n	8053896 <find_volume+0x1ee>
 8053892:	230d      	movs	r3, #13
 8053894:	e298      	b.n	8053dc8 <find_volume+0x720>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 8053896:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 805389a:	2b01      	cmp	r3, #1
 805389c:	f040 8100 	bne.w	8053aa0 <find_volume+0x3f8>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 80538a0:	230b      	movs	r3, #11
 80538a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80538a4:	e002      	b.n	80538ac <find_volume+0x204>
 80538a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80538a8:	3301      	adds	r3, #1
 80538aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80538ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80538ae:	2b3f      	cmp	r3, #63	; 0x3f
 80538b0:	d806      	bhi.n	80538c0 <find_volume+0x218>
 80538b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80538b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80538b6:	4413      	add	r3, r2
 80538b8:	3350      	adds	r3, #80	; 0x50
 80538ba:	781b      	ldrb	r3, [r3, #0]
 80538bc:	2b00      	cmp	r3, #0
 80538be:	d0f2      	beq.n	80538a6 <find_volume+0x1fe>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 80538c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80538c2:	2b3f      	cmp	r3, #63	; 0x3f
 80538c4:	d801      	bhi.n	80538ca <find_volume+0x222>
 80538c6:	230d      	movs	r3, #13
 80538c8:	e27e      	b.n	8053dc8 <find_volume+0x720>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 80538ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80538cc:	3350      	adds	r3, #80	; 0x50
 80538ce:	3368      	adds	r3, #104	; 0x68
 80538d0:	4618      	mov	r0, r3
 80538d2:	f7fc fcd1 	bl	8050278 <ld_word>
 80538d6:	4603      	mov	r3, r0
 80538d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80538dc:	d001      	beq.n	80538e2 <find_volume+0x23a>
 80538de:	230d      	movs	r3, #13
 80538e0:	e272      	b.n	8053dc8 <find_volume+0x720>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 80538e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80538e4:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80538e8:	461a      	mov	r2, r3
 80538ea:	2301      	movs	r3, #1
 80538ec:	4093      	lsls	r3, r2
 80538ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80538f0:	8992      	ldrh	r2, [r2, #12]
 80538f2:	4293      	cmp	r3, r2
 80538f4:	d001      	beq.n	80538fa <find_volume+0x252>
			return FR_NO_FILESYSTEM;
 80538f6:	230d      	movs	r3, #13
 80538f8:	e266      	b.n	8053dc8 <find_volume+0x720>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 80538fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80538fc:	3350      	adds	r3, #80	; 0x50
 80538fe:	3348      	adds	r3, #72	; 0x48
 8053900:	4618      	mov	r0, r3
 8053902:	f7fc fcf4 	bl	80502ee <ld_qword>
 8053906:	4602      	mov	r2, r0
 8053908:	460b      	mov	r3, r1
 805390a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 805390c:	2000      	movs	r0, #0
 805390e:	60b9      	str	r1, [r7, #8]
 8053910:	60f8      	str	r0, [r7, #12]
 8053912:	68b9      	ldr	r1, [r7, #8]
 8053914:	1851      	adds	r1, r2, r1
 8053916:	6039      	str	r1, [r7, #0]
 8053918:	68f9      	ldr	r1, [r7, #12]
 805391a:	eb43 0101 	adc.w	r1, r3, r1
 805391e:	6079      	str	r1, [r7, #4]
 8053920:	e9d7 2300 	ldrd	r2, r3, [r7]
 8053924:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 8053928:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 805392c:	2b01      	cmp	r3, #1
 805392e:	d301      	bcc.n	8053934 <find_volume+0x28c>
 8053930:	230d      	movs	r3, #13
 8053932:	e249      	b.n	8053dc8 <find_volume+0x720>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 8053934:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053936:	3350      	adds	r3, #80	; 0x50
 8053938:	3354      	adds	r3, #84	; 0x54
 805393a:	4618      	mov	r0, r3
 805393c:	f7fc fcb4 	bl	80502a8 <ld_dword>
 8053940:	4602      	mov	r2, r0
 8053942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053944:	639a      	str	r2, [r3, #56]	; 0x38

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8053946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053948:	f893 20be 	ldrb.w	r2, [r3, #190]	; 0xbe
 805394c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 805394e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8053950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053952:	789b      	ldrb	r3, [r3, #2]
 8053954:	2b01      	cmp	r3, #1
 8053956:	d003      	beq.n	8053960 <find_volume+0x2b8>
 8053958:	230d      	movs	r3, #13
 805395a:	e235      	b.n	8053dc8 <find_volume+0x720>
 805395c:	24002c00 	.word	0x24002c00

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 8053960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053962:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8053966:	461a      	mov	r2, r3
 8053968:	2301      	movs	r3, #1
 805396a:	4093      	lsls	r3, r2
 805396c:	b29a      	uxth	r2, r3
 805396e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053970:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 8053972:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053974:	895b      	ldrh	r3, [r3, #10]
 8053976:	2b00      	cmp	r3, #0
 8053978:	d101      	bne.n	805397e <find_volume+0x2d6>
 805397a:	230d      	movs	r3, #13
 805397c:	e224      	b.n	8053dc8 <find_volume+0x720>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 805397e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053980:	3350      	adds	r3, #80	; 0x50
 8053982:	335c      	adds	r3, #92	; 0x5c
 8053984:	4618      	mov	r0, r3
 8053986:	f7fc fc8f 	bl	80502a8 <ld_dword>
 805398a:	63f8      	str	r0, [r7, #60]	; 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 805398c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 805398e:	4a9a      	ldr	r2, [pc, #616]	; (8053bf8 <find_volume+0x550>)
 8053990:	4293      	cmp	r3, r2
 8053992:	d901      	bls.n	8053998 <find_volume+0x2f0>
 8053994:	230d      	movs	r3, #13
 8053996:	e217      	b.n	8053dc8 <find_volume+0x720>
		fs->n_fatent = nclst + 2;
 8053998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 805399a:	1c9a      	adds	r2, r3, #2
 805399c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 805399e:	635a      	str	r2, [r3, #52]	; 0x34

		/* Boundaries and Limits */
		fs->volbase = bsect;
 80539a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80539a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80539a4:	63da      	str	r2, [r3, #60]	; 0x3c
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 80539a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80539a8:	3350      	adds	r3, #80	; 0x50
 80539aa:	3358      	adds	r3, #88	; 0x58
 80539ac:	4618      	mov	r0, r3
 80539ae:	f7fc fc7b 	bl	80502a8 <ld_dword>
 80539b2:	4602      	mov	r2, r0
 80539b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80539b6:	441a      	add	r2, r3
 80539b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80539ba:	649a      	str	r2, [r3, #72]	; 0x48
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 80539bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80539be:	3350      	adds	r3, #80	; 0x50
 80539c0:	3350      	adds	r3, #80	; 0x50
 80539c2:	4618      	mov	r0, r3
 80539c4:	f7fc fc70 	bl	80502a8 <ld_dword>
 80539c8:	4602      	mov	r2, r0
 80539ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80539cc:	441a      	add	r2, r3
 80539ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80539d0:	641a      	str	r2, [r3, #64]	; 0x40
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 80539d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80539d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80539d6:	2200      	movs	r2, #0
 80539d8:	469a      	mov	sl, r3
 80539da:	4693      	mov	fp, r2
 80539dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80539de:	895b      	ldrh	r3, [r3, #10]
 80539e0:	461a      	mov	r2, r3
 80539e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80539e4:	fb02 f303 	mul.w	r3, r2, r3
 80539e8:	2200      	movs	r2, #0
 80539ea:	4698      	mov	r8, r3
 80539ec:	4691      	mov	r9, r2
 80539ee:	eb1a 0408 	adds.w	r4, sl, r8
 80539f2:	eb4b 0509 	adc.w	r5, fp, r9
 80539f6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80539fa:	42a2      	cmp	r2, r4
 80539fc:	41ab      	sbcs	r3, r5
 80539fe:	d201      	bcs.n	8053a04 <find_volume+0x35c>
 8053a00:	230d      	movs	r3, #13
 8053a02:	e1e1      	b.n	8053dc8 <find_volume+0x720>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 8053a04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053a06:	3350      	adds	r3, #80	; 0x50
 8053a08:	3360      	adds	r3, #96	; 0x60
 8053a0a:	4618      	mov	r0, r3
 8053a0c:	f7fc fc4c 	bl	80502a8 <ld_dword>
 8053a10:	4602      	mov	r2, r0
 8053a12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053a14:	645a      	str	r2, [r3, #68]	; 0x44

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 8053a16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8053a1a:	4619      	mov	r1, r3
 8053a1c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8053a1e:	f7fd f90d 	bl	8050c3c <clust2sect>
 8053a22:	4603      	mov	r3, r0
 8053a24:	4619      	mov	r1, r3
 8053a26:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8053a28:	f7fd f86a 	bl	8050b00 <move_window>
 8053a2c:	4603      	mov	r3, r0
 8053a2e:	2b00      	cmp	r3, #0
 8053a30:	d001      	beq.n	8053a36 <find_volume+0x38e>
 8053a32:	2301      	movs	r3, #1
 8053a34:	e1c8      	b.n	8053dc8 <find_volume+0x720>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8053a36:	2300      	movs	r3, #0
 8053a38:	65bb      	str	r3, [r7, #88]	; 0x58
 8053a3a:	e015      	b.n	8053a68 <find_volume+0x3c0>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8053a3c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8053a3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8053a40:	4413      	add	r3, r2
 8053a42:	3350      	adds	r3, #80	; 0x50
 8053a44:	781b      	ldrb	r3, [r3, #0]
 8053a46:	2b81      	cmp	r3, #129	; 0x81
 8053a48:	d10b      	bne.n	8053a62 <find_volume+0x3ba>
 8053a4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053a4c:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8053a50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8053a52:	3314      	adds	r3, #20
 8053a54:	4413      	add	r3, r2
 8053a56:	4618      	mov	r0, r3
 8053a58:	f7fc fc26 	bl	80502a8 <ld_dword>
 8053a5c:	4603      	mov	r3, r0
 8053a5e:	2b02      	cmp	r3, #2
 8053a60:	d009      	beq.n	8053a76 <find_volume+0x3ce>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8053a62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8053a64:	3320      	adds	r3, #32
 8053a66:	65bb      	str	r3, [r7, #88]	; 0x58
 8053a68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053a6a:	899b      	ldrh	r3, [r3, #12]
 8053a6c:	461a      	mov	r2, r3
 8053a6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8053a70:	4293      	cmp	r3, r2
 8053a72:	d3e3      	bcc.n	8053a3c <find_volume+0x394>
 8053a74:	e000      	b.n	8053a78 <find_volume+0x3d0>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8053a76:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 8053a78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053a7a:	899b      	ldrh	r3, [r3, #12]
 8053a7c:	461a      	mov	r2, r3
 8053a7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8053a80:	4293      	cmp	r3, r2
 8053a82:	d101      	bne.n	8053a88 <find_volume+0x3e0>
 8053a84:	230d      	movs	r3, #13
 8053a86:	e19f      	b.n	8053dc8 <find_volume+0x720>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8053a88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053a8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8053a8e:	621a      	str	r2, [r3, #32]
 8053a90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053a92:	6a1a      	ldr	r2, [r3, #32]
 8053a94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053a96:	61da      	str	r2, [r3, #28]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 8053a98:	2304      	movs	r3, #4
 8053a9a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8053a9e:	e17e      	b.n	8053d9e <find_volume+0x6f6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8053aa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053aa2:	3350      	adds	r3, #80	; 0x50
 8053aa4:	330b      	adds	r3, #11
 8053aa6:	4618      	mov	r0, r3
 8053aa8:	f7fc fbe6 	bl	8050278 <ld_word>
 8053aac:	4603      	mov	r3, r0
 8053aae:	461a      	mov	r2, r3
 8053ab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053ab2:	899b      	ldrh	r3, [r3, #12]
 8053ab4:	429a      	cmp	r2, r3
 8053ab6:	d001      	beq.n	8053abc <find_volume+0x414>
 8053ab8:	230d      	movs	r3, #13
 8053aba:	e185      	b.n	8053dc8 <find_volume+0x720>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8053abc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053abe:	3350      	adds	r3, #80	; 0x50
 8053ac0:	3316      	adds	r3, #22
 8053ac2:	4618      	mov	r0, r3
 8053ac4:	f7fc fbd8 	bl	8050278 <ld_word>
 8053ac8:	4603      	mov	r3, r0
 8053aca:	667b      	str	r3, [r7, #100]	; 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8053acc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8053ace:	2b00      	cmp	r3, #0
 8053ad0:	d106      	bne.n	8053ae0 <find_volume+0x438>
 8053ad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053ad4:	3350      	adds	r3, #80	; 0x50
 8053ad6:	3324      	adds	r3, #36	; 0x24
 8053ad8:	4618      	mov	r0, r3
 8053ada:	f7fc fbe5 	bl	80502a8 <ld_dword>
 8053ade:	6678      	str	r0, [r7, #100]	; 0x64
		fs->fsize = fasize;
 8053ae0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053ae2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8053ae4:	639a      	str	r2, [r3, #56]	; 0x38

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8053ae6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053ae8:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8053aec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053aee:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8053af0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053af2:	789b      	ldrb	r3, [r3, #2]
 8053af4:	2b01      	cmp	r3, #1
 8053af6:	d005      	beq.n	8053b04 <find_volume+0x45c>
 8053af8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053afa:	789b      	ldrb	r3, [r3, #2]
 8053afc:	2b02      	cmp	r3, #2
 8053afe:	d001      	beq.n	8053b04 <find_volume+0x45c>
 8053b00:	230d      	movs	r3, #13
 8053b02:	e161      	b.n	8053dc8 <find_volume+0x720>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8053b04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053b06:	789b      	ldrb	r3, [r3, #2]
 8053b08:	461a      	mov	r2, r3
 8053b0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8053b0c:	fb02 f303 	mul.w	r3, r2, r3
 8053b10:	667b      	str	r3, [r7, #100]	; 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8053b12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053b14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8053b18:	b29a      	uxth	r2, r3
 8053b1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053b1c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8053b1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053b20:	895b      	ldrh	r3, [r3, #10]
 8053b22:	2b00      	cmp	r3, #0
 8053b24:	d008      	beq.n	8053b38 <find_volume+0x490>
 8053b26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053b28:	895b      	ldrh	r3, [r3, #10]
 8053b2a:	461a      	mov	r2, r3
 8053b2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053b2e:	895b      	ldrh	r3, [r3, #10]
 8053b30:	3b01      	subs	r3, #1
 8053b32:	4013      	ands	r3, r2
 8053b34:	2b00      	cmp	r3, #0
 8053b36:	d001      	beq.n	8053b3c <find_volume+0x494>
 8053b38:	230d      	movs	r3, #13
 8053b3a:	e145      	b.n	8053dc8 <find_volume+0x720>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8053b3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053b3e:	3350      	adds	r3, #80	; 0x50
 8053b40:	3311      	adds	r3, #17
 8053b42:	4618      	mov	r0, r3
 8053b44:	f7fc fb98 	bl	8050278 <ld_word>
 8053b48:	4603      	mov	r3, r0
 8053b4a:	461a      	mov	r2, r3
 8053b4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053b4e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8053b50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053b52:	891b      	ldrh	r3, [r3, #8]
 8053b54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8053b56:	8992      	ldrh	r2, [r2, #12]
 8053b58:	0952      	lsrs	r2, r2, #5
 8053b5a:	b292      	uxth	r2, r2
 8053b5c:	fbb3 f1f2 	udiv	r1, r3, r2
 8053b60:	fb01 f202 	mul.w	r2, r1, r2
 8053b64:	1a9b      	subs	r3, r3, r2
 8053b66:	b29b      	uxth	r3, r3
 8053b68:	2b00      	cmp	r3, #0
 8053b6a:	d001      	beq.n	8053b70 <find_volume+0x4c8>
 8053b6c:	230d      	movs	r3, #13
 8053b6e:	e12b      	b.n	8053dc8 <find_volume+0x720>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8053b70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053b72:	3350      	adds	r3, #80	; 0x50
 8053b74:	3313      	adds	r3, #19
 8053b76:	4618      	mov	r0, r3
 8053b78:	f7fc fb7e 	bl	8050278 <ld_word>
 8053b7c:	4603      	mov	r3, r0
 8053b7e:	663b      	str	r3, [r7, #96]	; 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8053b80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8053b82:	2b00      	cmp	r3, #0
 8053b84:	d106      	bne.n	8053b94 <find_volume+0x4ec>
 8053b86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053b88:	3350      	adds	r3, #80	; 0x50
 8053b8a:	3320      	adds	r3, #32
 8053b8c:	4618      	mov	r0, r3
 8053b8e:	f7fc fb8b 	bl	80502a8 <ld_dword>
 8053b92:	6638      	str	r0, [r7, #96]	; 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8053b94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053b96:	3350      	adds	r3, #80	; 0x50
 8053b98:	330e      	adds	r3, #14
 8053b9a:	4618      	mov	r0, r3
 8053b9c:	f7fc fb6c 	bl	8050278 <ld_word>
 8053ba0:	4603      	mov	r3, r0
 8053ba2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8053ba6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8053baa:	2b00      	cmp	r3, #0
 8053bac:	d101      	bne.n	8053bb2 <find_volume+0x50a>
 8053bae:	230d      	movs	r3, #13
 8053bb0:	e10a      	b.n	8053dc8 <find_volume+0x720>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8053bb2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8053bb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8053bb8:	4413      	add	r3, r2
 8053bba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8053bbc:	8911      	ldrh	r1, [r2, #8]
 8053bbe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8053bc0:	8992      	ldrh	r2, [r2, #12]
 8053bc2:	0952      	lsrs	r2, r2, #5
 8053bc4:	b292      	uxth	r2, r2
 8053bc6:	fbb1 f2f2 	udiv	r2, r1, r2
 8053bca:	b292      	uxth	r2, r2
 8053bcc:	4413      	add	r3, r2
 8053bce:	643b      	str	r3, [r7, #64]	; 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8053bd0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8053bd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8053bd4:	429a      	cmp	r2, r3
 8053bd6:	d201      	bcs.n	8053bdc <find_volume+0x534>
 8053bd8:	230d      	movs	r3, #13
 8053bda:	e0f5      	b.n	8053dc8 <find_volume+0x720>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8053bdc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8053bde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8053be0:	1ad3      	subs	r3, r2, r3
 8053be2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8053be4:	8952      	ldrh	r2, [r2, #10]
 8053be6:	fbb3 f3f2 	udiv	r3, r3, r2
 8053bea:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8053bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8053bee:	2b00      	cmp	r3, #0
 8053bf0:	d104      	bne.n	8053bfc <find_volume+0x554>
 8053bf2:	230d      	movs	r3, #13
 8053bf4:	e0e8      	b.n	8053dc8 <find_volume+0x720>
 8053bf6:	bf00      	nop
 8053bf8:	7ffffffd 	.word	0x7ffffffd
		fmt = FS_FAT32;
 8053bfc:	2303      	movs	r3, #3
 8053bfe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8053c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8053c04:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8053c08:	4293      	cmp	r3, r2
 8053c0a:	d802      	bhi.n	8053c12 <find_volume+0x56a>
 8053c0c:	2302      	movs	r3, #2
 8053c0e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8053c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8053c14:	f640 72f5 	movw	r2, #4085	; 0xff5
 8053c18:	4293      	cmp	r3, r2
 8053c1a:	d802      	bhi.n	8053c22 <find_volume+0x57a>
 8053c1c:	2301      	movs	r3, #1
 8053c1e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8053c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8053c24:	1c9a      	adds	r2, r3, #2
 8053c26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053c28:	635a      	str	r2, [r3, #52]	; 0x34
		fs->volbase = bsect;							/* Volume start sector */
 8053c2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053c2c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8053c2e:	63da      	str	r2, [r3, #60]	; 0x3c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8053c30:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8053c34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8053c36:	441a      	add	r2, r3
 8053c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053c3a:	641a      	str	r2, [r3, #64]	; 0x40
		fs->database = bsect + sysect;					/* Data start sector */
 8053c3c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8053c3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8053c40:	441a      	add	r2, r3
 8053c42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053c44:	649a      	str	r2, [r3, #72]	; 0x48
		if (fmt == FS_FAT32) {
 8053c46:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8053c4a:	2b03      	cmp	r3, #3
 8053c4c:	d11e      	bne.n	8053c8c <find_volume+0x5e4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8053c4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053c50:	3350      	adds	r3, #80	; 0x50
 8053c52:	332a      	adds	r3, #42	; 0x2a
 8053c54:	4618      	mov	r0, r3
 8053c56:	f7fc fb0f 	bl	8050278 <ld_word>
 8053c5a:	4603      	mov	r3, r0
 8053c5c:	2b00      	cmp	r3, #0
 8053c5e:	d001      	beq.n	8053c64 <find_volume+0x5bc>
 8053c60:	230d      	movs	r3, #13
 8053c62:	e0b1      	b.n	8053dc8 <find_volume+0x720>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8053c64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053c66:	891b      	ldrh	r3, [r3, #8]
 8053c68:	2b00      	cmp	r3, #0
 8053c6a:	d001      	beq.n	8053c70 <find_volume+0x5c8>
 8053c6c:	230d      	movs	r3, #13
 8053c6e:	e0ab      	b.n	8053dc8 <find_volume+0x720>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8053c70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053c72:	3350      	adds	r3, #80	; 0x50
 8053c74:	332c      	adds	r3, #44	; 0x2c
 8053c76:	4618      	mov	r0, r3
 8053c78:	f7fc fb16 	bl	80502a8 <ld_dword>
 8053c7c:	4602      	mov	r2, r0
 8053c7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053c80:	645a      	str	r2, [r3, #68]	; 0x44
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8053c82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8053c86:	009b      	lsls	r3, r3, #2
 8053c88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8053c8a:	e01f      	b.n	8053ccc <find_volume+0x624>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8053c8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053c8e:	891b      	ldrh	r3, [r3, #8]
 8053c90:	2b00      	cmp	r3, #0
 8053c92:	d101      	bne.n	8053c98 <find_volume+0x5f0>
 8053c94:	230d      	movs	r3, #13
 8053c96:	e097      	b.n	8053dc8 <find_volume+0x720>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8053c98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053c9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8053c9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8053c9e:	441a      	add	r2, r3
 8053ca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053ca2:	645a      	str	r2, [r3, #68]	; 0x44
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8053ca4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8053ca8:	2b02      	cmp	r3, #2
 8053caa:	d103      	bne.n	8053cb4 <find_volume+0x60c>
 8053cac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8053cb0:	005b      	lsls	r3, r3, #1
 8053cb2:	e00a      	b.n	8053cca <find_volume+0x622>
 8053cb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053cb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8053cb8:	4613      	mov	r3, r2
 8053cba:	005b      	lsls	r3, r3, #1
 8053cbc:	4413      	add	r3, r2
 8053cbe:	085a      	lsrs	r2, r3, #1
 8053cc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8053cc4:	f003 0301 	and.w	r3, r3, #1
 8053cc8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8053cca:	65fb      	str	r3, [r7, #92]	; 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8053ccc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053cce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8053cd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053cd2:	899b      	ldrh	r3, [r3, #12]
 8053cd4:	4619      	mov	r1, r3
 8053cd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8053cd8:	440b      	add	r3, r1
 8053cda:	3b01      	subs	r3, #1
 8053cdc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8053cde:	8989      	ldrh	r1, [r1, #12]
 8053ce0:	fbb3 f3f1 	udiv	r3, r3, r1
 8053ce4:	429a      	cmp	r2, r3
 8053ce6:	d201      	bcs.n	8053cec <find_volume+0x644>
 8053ce8:	230d      	movs	r3, #13
 8053cea:	e06d      	b.n	8053dc8 <find_volume+0x720>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8053cec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053cee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8053cf2:	621a      	str	r2, [r3, #32]
 8053cf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053cf6:	6a1a      	ldr	r2, [r3, #32]
 8053cf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053cfa:	61da      	str	r2, [r3, #28]
		fs->fsi_flag = 0x80;
 8053cfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053cfe:	2280      	movs	r2, #128	; 0x80
 8053d00:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8053d02:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8053d06:	2b03      	cmp	r3, #3
 8053d08:	d149      	bne.n	8053d9e <find_volume+0x6f6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8053d0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053d0c:	3350      	adds	r3, #80	; 0x50
 8053d0e:	3330      	adds	r3, #48	; 0x30
 8053d10:	4618      	mov	r0, r3
 8053d12:	f7fc fab1 	bl	8050278 <ld_word>
 8053d16:	4603      	mov	r3, r0
 8053d18:	2b01      	cmp	r3, #1
 8053d1a:	d140      	bne.n	8053d9e <find_volume+0x6f6>
			&& move_window(fs, bsect + 1) == FR_OK)
 8053d1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8053d1e:	3301      	adds	r3, #1
 8053d20:	4619      	mov	r1, r3
 8053d22:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8053d24:	f7fc feec 	bl	8050b00 <move_window>
 8053d28:	4603      	mov	r3, r0
 8053d2a:	2b00      	cmp	r3, #0
 8053d2c:	d137      	bne.n	8053d9e <find_volume+0x6f6>
		{
			fs->fsi_flag = 0;
 8053d2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053d30:	2200      	movs	r2, #0
 8053d32:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8053d34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053d36:	3350      	adds	r3, #80	; 0x50
 8053d38:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8053d3c:	4618      	mov	r0, r3
 8053d3e:	f7fc fa9b 	bl	8050278 <ld_word>
 8053d42:	4603      	mov	r3, r0
 8053d44:	461a      	mov	r2, r3
 8053d46:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8053d4a:	429a      	cmp	r2, r3
 8053d4c:	d127      	bne.n	8053d9e <find_volume+0x6f6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8053d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053d50:	3350      	adds	r3, #80	; 0x50
 8053d52:	4618      	mov	r0, r3
 8053d54:	f7fc faa8 	bl	80502a8 <ld_dword>
 8053d58:	4603      	mov	r3, r0
 8053d5a:	4a1e      	ldr	r2, [pc, #120]	; (8053dd4 <find_volume+0x72c>)
 8053d5c:	4293      	cmp	r3, r2
 8053d5e:	d11e      	bne.n	8053d9e <find_volume+0x6f6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8053d60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053d62:	3350      	adds	r3, #80	; 0x50
 8053d64:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8053d68:	4618      	mov	r0, r3
 8053d6a:	f7fc fa9d 	bl	80502a8 <ld_dword>
 8053d6e:	4603      	mov	r3, r0
 8053d70:	4a19      	ldr	r2, [pc, #100]	; (8053dd8 <find_volume+0x730>)
 8053d72:	4293      	cmp	r3, r2
 8053d74:	d113      	bne.n	8053d9e <find_volume+0x6f6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8053d76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053d78:	3350      	adds	r3, #80	; 0x50
 8053d7a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8053d7e:	4618      	mov	r0, r3
 8053d80:	f7fc fa92 	bl	80502a8 <ld_dword>
 8053d84:	4602      	mov	r2, r0
 8053d86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053d88:	621a      	str	r2, [r3, #32]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8053d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053d8c:	3350      	adds	r3, #80	; 0x50
 8053d8e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8053d92:	4618      	mov	r0, r3
 8053d94:	f7fc fa88 	bl	80502a8 <ld_dword>
 8053d98:	4602      	mov	r2, r0
 8053d9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053d9c:	61da      	str	r2, [r3, #28]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8053d9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053da0:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8053da4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8053da6:	4b0d      	ldr	r3, [pc, #52]	; (8053ddc <find_volume+0x734>)
 8053da8:	881b      	ldrh	r3, [r3, #0]
 8053daa:	3301      	adds	r3, #1
 8053dac:	b29a      	uxth	r2, r3
 8053dae:	4b0b      	ldr	r3, [pc, #44]	; (8053ddc <find_volume+0x734>)
 8053db0:	801a      	strh	r2, [r3, #0]
 8053db2:	4b0a      	ldr	r3, [pc, #40]	; (8053ddc <find_volume+0x734>)
 8053db4:	881a      	ldrh	r2, [r3, #0]
 8053db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053db8:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8053dba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053dbc:	2200      	movs	r2, #0
 8053dbe:	625a      	str	r2, [r3, #36]	; 0x24
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8053dc0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8053dc2:	f7fc fe35 	bl	8050a30 <clear_lock>
#endif
	return FR_OK;
 8053dc6:	2300      	movs	r3, #0
}
 8053dc8:	4618      	mov	r0, r3
 8053dca:	3770      	adds	r7, #112	; 0x70
 8053dcc:	46bd      	mov	sp, r7
 8053dce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8053dd2:	bf00      	nop
 8053dd4:	41615252 	.word	0x41615252
 8053dd8:	61417272 	.word	0x61417272
 8053ddc:	24002c04 	.word	0x24002c04

08053de0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8053de0:	b580      	push	{r7, lr}
 8053de2:	b084      	sub	sp, #16
 8053de4:	af00      	add	r7, sp, #0
 8053de6:	6078      	str	r0, [r7, #4]
 8053de8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8053dea:	2309      	movs	r3, #9
 8053dec:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8053dee:	687b      	ldr	r3, [r7, #4]
 8053df0:	2b00      	cmp	r3, #0
 8053df2:	d02e      	beq.n	8053e52 <validate+0x72>
 8053df4:	687b      	ldr	r3, [r7, #4]
 8053df6:	681b      	ldr	r3, [r3, #0]
 8053df8:	2b00      	cmp	r3, #0
 8053dfa:	d02a      	beq.n	8053e52 <validate+0x72>
 8053dfc:	687b      	ldr	r3, [r7, #4]
 8053dfe:	681b      	ldr	r3, [r3, #0]
 8053e00:	781b      	ldrb	r3, [r3, #0]
 8053e02:	2b00      	cmp	r3, #0
 8053e04:	d025      	beq.n	8053e52 <validate+0x72>
 8053e06:	687b      	ldr	r3, [r7, #4]
 8053e08:	889a      	ldrh	r2, [r3, #4]
 8053e0a:	687b      	ldr	r3, [r7, #4]
 8053e0c:	681b      	ldr	r3, [r3, #0]
 8053e0e:	88db      	ldrh	r3, [r3, #6]
 8053e10:	429a      	cmp	r2, r3
 8053e12:	d11e      	bne.n	8053e52 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8053e14:	687b      	ldr	r3, [r7, #4]
 8053e16:	681b      	ldr	r3, [r3, #0]
 8053e18:	4618      	mov	r0, r3
 8053e1a:	f7fc fc90 	bl	805073e <lock_fs>
 8053e1e:	4603      	mov	r3, r0
 8053e20:	2b00      	cmp	r3, #0
 8053e22:	d014      	beq.n	8053e4e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8053e24:	687b      	ldr	r3, [r7, #4]
 8053e26:	681b      	ldr	r3, [r3, #0]
 8053e28:	785b      	ldrb	r3, [r3, #1]
 8053e2a:	4618      	mov	r0, r3
 8053e2c:	f7fc f986 	bl	805013c <disk_status>
 8053e30:	4603      	mov	r3, r0
 8053e32:	f003 0301 	and.w	r3, r3, #1
 8053e36:	2b00      	cmp	r3, #0
 8053e38:	d102      	bne.n	8053e40 <validate+0x60>
				res = FR_OK;
 8053e3a:	2300      	movs	r3, #0
 8053e3c:	73fb      	strb	r3, [r7, #15]
 8053e3e:	e008      	b.n	8053e52 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8053e40:	687b      	ldr	r3, [r7, #4]
 8053e42:	681b      	ldr	r3, [r3, #0]
 8053e44:	2100      	movs	r1, #0
 8053e46:	4618      	mov	r0, r3
 8053e48:	f7fc fc8f 	bl	805076a <unlock_fs>
 8053e4c:	e001      	b.n	8053e52 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8053e4e:	230f      	movs	r3, #15
 8053e50:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8053e52:	7bfb      	ldrb	r3, [r7, #15]
 8053e54:	2b00      	cmp	r3, #0
 8053e56:	d102      	bne.n	8053e5e <validate+0x7e>
 8053e58:	687b      	ldr	r3, [r7, #4]
 8053e5a:	681b      	ldr	r3, [r3, #0]
 8053e5c:	e000      	b.n	8053e60 <validate+0x80>
 8053e5e:	2300      	movs	r3, #0
 8053e60:	683a      	ldr	r2, [r7, #0]
 8053e62:	6013      	str	r3, [r2, #0]
	return res;
 8053e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8053e66:	4618      	mov	r0, r3
 8053e68:	3710      	adds	r7, #16
 8053e6a:	46bd      	mov	sp, r7
 8053e6c:	bd80      	pop	{r7, pc}
	...

08053e70 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8053e70:	b580      	push	{r7, lr}
 8053e72:	b088      	sub	sp, #32
 8053e74:	af00      	add	r7, sp, #0
 8053e76:	60f8      	str	r0, [r7, #12]
 8053e78:	60b9      	str	r1, [r7, #8]
 8053e7a:	4613      	mov	r3, r2
 8053e7c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8053e7e:	68bb      	ldr	r3, [r7, #8]
 8053e80:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8053e82:	f107 0310 	add.w	r3, r7, #16
 8053e86:	4618      	mov	r0, r3
 8053e88:	f7ff fb65 	bl	8053556 <get_ldnumber>
 8053e8c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8053e8e:	69fb      	ldr	r3, [r7, #28]
 8053e90:	2b00      	cmp	r3, #0
 8053e92:	da01      	bge.n	8053e98 <f_mount+0x28>
 8053e94:	230b      	movs	r3, #11
 8053e96:	e048      	b.n	8053f2a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8053e98:	4a26      	ldr	r2, [pc, #152]	; (8053f34 <f_mount+0xc4>)
 8053e9a:	69fb      	ldr	r3, [r7, #28]
 8053e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8053ea0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8053ea2:	69bb      	ldr	r3, [r7, #24]
 8053ea4:	2b00      	cmp	r3, #0
 8053ea6:	d00f      	beq.n	8053ec8 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8053ea8:	69b8      	ldr	r0, [r7, #24]
 8053eaa:	f7fc fdc1 	bl	8050a30 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8053eae:	69bb      	ldr	r3, [r7, #24]
 8053eb0:	699b      	ldr	r3, [r3, #24]
 8053eb2:	4618      	mov	r0, r3
 8053eb4:	f001 ff79 	bl	8055daa <ff_del_syncobj>
 8053eb8:	4603      	mov	r3, r0
 8053eba:	2b00      	cmp	r3, #0
 8053ebc:	d101      	bne.n	8053ec2 <f_mount+0x52>
 8053ebe:	2302      	movs	r3, #2
 8053ec0:	e033      	b.n	8053f2a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8053ec2:	69bb      	ldr	r3, [r7, #24]
 8053ec4:	2200      	movs	r2, #0
 8053ec6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8053ec8:	68fb      	ldr	r3, [r7, #12]
 8053eca:	2b00      	cmp	r3, #0
 8053ecc:	d00f      	beq.n	8053eee <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8053ece:	68fb      	ldr	r3, [r7, #12]
 8053ed0:	2200      	movs	r2, #0
 8053ed2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8053ed4:	69fb      	ldr	r3, [r7, #28]
 8053ed6:	b2da      	uxtb	r2, r3
 8053ed8:	68fb      	ldr	r3, [r7, #12]
 8053eda:	3318      	adds	r3, #24
 8053edc:	4619      	mov	r1, r3
 8053ede:	4610      	mov	r0, r2
 8053ee0:	f001 ff44 	bl	8055d6c <ff_cre_syncobj>
 8053ee4:	4603      	mov	r3, r0
 8053ee6:	2b00      	cmp	r3, #0
 8053ee8:	d101      	bne.n	8053eee <f_mount+0x7e>
 8053eea:	2302      	movs	r3, #2
 8053eec:	e01d      	b.n	8053f2a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8053eee:	68fa      	ldr	r2, [r7, #12]
 8053ef0:	4910      	ldr	r1, [pc, #64]	; (8053f34 <f_mount+0xc4>)
 8053ef2:	69fb      	ldr	r3, [r7, #28]
 8053ef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8053ef8:	68fb      	ldr	r3, [r7, #12]
 8053efa:	2b00      	cmp	r3, #0
 8053efc:	d002      	beq.n	8053f04 <f_mount+0x94>
 8053efe:	79fb      	ldrb	r3, [r7, #7]
 8053f00:	2b01      	cmp	r3, #1
 8053f02:	d001      	beq.n	8053f08 <f_mount+0x98>
 8053f04:	2300      	movs	r3, #0
 8053f06:	e010      	b.n	8053f2a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8053f08:	f107 010c 	add.w	r1, r7, #12
 8053f0c:	f107 0308 	add.w	r3, r7, #8
 8053f10:	2200      	movs	r2, #0
 8053f12:	4618      	mov	r0, r3
 8053f14:	f7ff fbc8 	bl	80536a8 <find_volume>
 8053f18:	4603      	mov	r3, r0
 8053f1a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8053f1c:	68fb      	ldr	r3, [r7, #12]
 8053f1e:	7dfa      	ldrb	r2, [r7, #23]
 8053f20:	4611      	mov	r1, r2
 8053f22:	4618      	mov	r0, r3
 8053f24:	f7fc fc21 	bl	805076a <unlock_fs>
 8053f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8053f2a:	4618      	mov	r0, r3
 8053f2c:	3720      	adds	r7, #32
 8053f2e:	46bd      	mov	sp, r7
 8053f30:	bd80      	pop	{r7, pc}
 8053f32:	bf00      	nop
 8053f34:	24002c00 	.word	0x24002c00

08053f38 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8053f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8053f3c:	b0aa      	sub	sp, #168	; 0xa8
 8053f3e:	af00      	add	r7, sp, #0
 8053f40:	6278      	str	r0, [r7, #36]	; 0x24
 8053f42:	6239      	str	r1, [r7, #32]
 8053f44:	4613      	mov	r3, r2
 8053f46:	77fb      	strb	r3, [r7, #31]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8053f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8053f4a:	2b00      	cmp	r3, #0
 8053f4c:	d101      	bne.n	8053f52 <f_open+0x1a>
 8053f4e:	2309      	movs	r3, #9
 8053f50:	e2e6      	b.n	8054520 <f_open+0x5e8>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8053f52:	7ffb      	ldrb	r3, [r7, #31]
 8053f54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8053f58:	77fb      	strb	r3, [r7, #31]
	res = find_volume(&path, &fs, mode);
 8053f5a:	7ffb      	ldrb	r3, [r7, #31]
 8053f5c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8053f60:	f107 0020 	add.w	r0, r7, #32
 8053f64:	461a      	mov	r2, r3
 8053f66:	f7ff fb9f 	bl	80536a8 <find_volume>
 8053f6a:	4603      	mov	r3, r0
 8053f6c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	if (res == FR_OK) {
 8053f70:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8053f74:	2b00      	cmp	r3, #0
 8053f76:	f040 82c3 	bne.w	8054500 <f_open+0x5c8>
		dj.obj.fs = fs;
 8053f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8053f7c:	633b      	str	r3, [r7, #48]	; 0x30
		INIT_NAMBUF(fs);
 8053f7e:	f44f 608c 	mov.w	r0, #1120	; 0x460
 8053f82:	f001 ff3e 	bl	8055e02 <ff_memalloc>
 8053f86:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 8053f8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8053f8e:	2b00      	cmp	r3, #0
 8053f90:	d106      	bne.n	8053fa0 <f_open+0x68>
 8053f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8053f94:	2111      	movs	r1, #17
 8053f96:	4618      	mov	r0, r3
 8053f98:	f7fc fbe7 	bl	805076a <unlock_fs>
 8053f9c:	2311      	movs	r3, #17
 8053f9e:	e2bf      	b.n	8054520 <f_open+0x5e8>
 8053fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8053fa2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8053fa6:	611a      	str	r2, [r3, #16]
 8053fa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8053faa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8053fae:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8053fb2:	6153      	str	r3, [r2, #20]
		res = follow_path(&dj, path);	/* Follow the file path */
 8053fb4:	6a3b      	ldr	r3, [r7, #32]
 8053fb6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8053fba:	4619      	mov	r1, r3
 8053fbc:	4610      	mov	r0, r2
 8053fbe:	f7ff f9b3 	bl	8053328 <follow_path>
 8053fc2:	4603      	mov	r3, r0
 8053fc4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8053fc8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8053fcc:	2b00      	cmp	r3, #0
 8053fce:	d11a      	bne.n	8054006 <f_open+0xce>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8053fd0:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8053fd4:	b25b      	sxtb	r3, r3
 8053fd6:	2b00      	cmp	r3, #0
 8053fd8:	da03      	bge.n	8053fe2 <f_open+0xaa>
				res = FR_INVALID_NAME;
 8053fda:	2306      	movs	r3, #6
 8053fdc:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8053fe0:	e011      	b.n	8054006 <f_open+0xce>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8053fe2:	7ffb      	ldrb	r3, [r7, #31]
 8053fe4:	f023 0301 	bic.w	r3, r3, #1
 8053fe8:	2b00      	cmp	r3, #0
 8053fea:	bf14      	ite	ne
 8053fec:	2301      	movne	r3, #1
 8053fee:	2300      	moveq	r3, #0
 8053ff0:	b2db      	uxtb	r3, r3
 8053ff2:	461a      	mov	r2, r3
 8053ff4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8053ff8:	4611      	mov	r1, r2
 8053ffa:	4618      	mov	r0, r3
 8053ffc:	f7fc fbd0 	bl	80507a0 <chk_lock>
 8054000:	4603      	mov	r3, r0
 8054002:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8054006:	7ffb      	ldrb	r3, [r7, #31]
 8054008:	f003 031c 	and.w	r3, r3, #28
 805400c:	2b00      	cmp	r3, #0
 805400e:	f000 8117 	beq.w	8054240 <f_open+0x308>
			if (res != FR_OK) {					/* No file, create new */
 8054012:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8054016:	2b00      	cmp	r3, #0
 8054018:	d017      	beq.n	805404a <f_open+0x112>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 805401a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 805401e:	2b04      	cmp	r3, #4
 8054020:	d10e      	bne.n	8054040 <f_open+0x108>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8054022:	f7fc fc19 	bl	8050858 <enq_lock>
 8054026:	4603      	mov	r3, r0
 8054028:	2b00      	cmp	r3, #0
 805402a:	d006      	beq.n	805403a <f_open+0x102>
 805402c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8054030:	4618      	mov	r0, r3
 8054032:	f7fe fc85 	bl	8052940 <dir_register>
 8054036:	4603      	mov	r3, r0
 8054038:	e000      	b.n	805403c <f_open+0x104>
 805403a:	2312      	movs	r3, #18
 805403c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8054040:	7ffb      	ldrb	r3, [r7, #31]
 8054042:	f043 0308 	orr.w	r3, r3, #8
 8054046:	77fb      	strb	r3, [r7, #31]
 8054048:	e011      	b.n	805406e <f_open+0x136>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 805404a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 805404e:	f003 0311 	and.w	r3, r3, #17
 8054052:	2b00      	cmp	r3, #0
 8054054:	d003      	beq.n	805405e <f_open+0x126>
					res = FR_DENIED;
 8054056:	2307      	movs	r3, #7
 8054058:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 805405c:	e007      	b.n	805406e <f_open+0x136>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 805405e:	7ffb      	ldrb	r3, [r7, #31]
 8054060:	f003 0304 	and.w	r3, r3, #4
 8054064:	2b00      	cmp	r3, #0
 8054066:	d002      	beq.n	805406e <f_open+0x136>
 8054068:	2308      	movs	r3, #8
 805406a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 805406e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8054072:	2b00      	cmp	r3, #0
 8054074:	f040 8100 	bne.w	8054278 <f_open+0x340>
 8054078:	7ffb      	ldrb	r3, [r7, #31]
 805407a:	f003 0308 	and.w	r3, r3, #8
 805407e:	2b00      	cmp	r3, #0
 8054080:	f000 80fa 	beq.w	8054278 <f_open+0x340>
				dw = GET_FATTIME();
 8054084:	f7f8 fc4c 	bl	804c920 <get_fattime>
 8054088:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 805408c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 805408e:	781b      	ldrb	r3, [r3, #0]
 8054090:	2b04      	cmp	r3, #4
 8054092:	f040 8085 	bne.w	80541a0 <f_open+0x268>
					/* Get current allocation info */
					fp->obj.fs = fs;
 8054096:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8054098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805409a:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 805409c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 805409e:	695b      	ldr	r3, [r3, #20]
 80540a0:	3334      	adds	r3, #52	; 0x34
 80540a2:	4618      	mov	r0, r3
 80540a4:	f7fc f900 	bl	80502a8 <ld_dword>
 80540a8:	4602      	mov	r2, r0
 80540aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80540ac:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 80540ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80540b0:	695b      	ldr	r3, [r3, #20]
 80540b2:	3338      	adds	r3, #56	; 0x38
 80540b4:	4618      	mov	r0, r3
 80540b6:	f7fc f91a 	bl	80502ee <ld_qword>
 80540ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80540bc:	e9c3 0104 	strd	r0, r1, [r3, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 80540c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80540c2:	695b      	ldr	r3, [r3, #20]
 80540c4:	3321      	adds	r3, #33	; 0x21
 80540c6:	781b      	ldrb	r3, [r3, #0]
 80540c8:	f003 0302 	and.w	r3, r3, #2
 80540cc:	b2db      	uxtb	r3, r3
 80540ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80540d0:	71d3      	strb	r3, [r2, #7]
					fp->obj.n_frag = 0;
 80540d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80540d4:	2200      	movs	r2, #0
 80540d6:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 80540d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80540da:	695b      	ldr	r3, [r3, #20]
 80540dc:	3308      	adds	r3, #8
 80540de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80540e2:	4618      	mov	r0, r3
 80540e4:	f7fc f9f9 	bl	80504da <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 80540e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80540ea:	695b      	ldr	r3, [r3, #20]
 80540ec:	f103 0214 	add.w	r2, r3, #20
 80540f0:	2300      	movs	r3, #0
 80540f2:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 80540f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80540f6:	695b      	ldr	r3, [r3, #20]
 80540f8:	330c      	adds	r3, #12
 80540fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80540fe:	4618      	mov	r0, r3
 8054100:	f7fc f9eb 	bl	80504da <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 8054104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8054106:	695b      	ldr	r3, [r3, #20]
 8054108:	f103 0215 	add.w	r2, r3, #21
 805410c:	2300      	movs	r3, #0
 805410e:	7013      	strb	r3, [r2, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 8054110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8054112:	695b      	ldr	r3, [r3, #20]
 8054114:	1d1a      	adds	r2, r3, #4
 8054116:	2320      	movs	r3, #32
 8054118:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 805411a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 805411c:	695b      	ldr	r3, [r3, #20]
 805411e:	3334      	adds	r3, #52	; 0x34
 8054120:	2100      	movs	r1, #0
 8054122:	4618      	mov	r0, r3
 8054124:	f7fc f9d9 	bl	80504da <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 8054128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 805412a:	695b      	ldr	r3, [r3, #20]
 805412c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8054130:	f04f 0200 	mov.w	r2, #0
 8054134:	f04f 0300 	mov.w	r3, #0
 8054138:	4608      	mov	r0, r1
 805413a:	f7fc f9fa 	bl	8050532 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 805413e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8054140:	695b      	ldr	r3, [r3, #20]
 8054142:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8054146:	f04f 0200 	mov.w	r2, #0
 805414a:	f04f 0300 	mov.w	r3, #0
 805414e:	4608      	mov	r0, r1
 8054150:	f7fc f9ef 	bl	8050532 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 8054154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8054156:	695b      	ldr	r3, [r3, #20]
 8054158:	f103 0221 	add.w	r2, r3, #33	; 0x21
 805415c:	2301      	movs	r3, #1
 805415e:	7013      	strb	r3, [r2, #0]
					res = store_xdir(&dj);
 8054160:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8054164:	4618      	mov	r0, r3
 8054166:	f7fe f939 	bl	80523dc <store_xdir>
 805416a:	4603      	mov	r3, r0
 805416c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 8054170:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8054174:	2b00      	cmp	r3, #0
 8054176:	d17f      	bne.n	8054278 <f_open+0x340>
 8054178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805417a:	689b      	ldr	r3, [r3, #8]
 805417c:	2b00      	cmp	r3, #0
 805417e:	d07b      	beq.n	8054278 <f_open+0x340>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8054180:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8054182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8054184:	689b      	ldr	r3, [r3, #8]
 8054186:	2200      	movs	r2, #0
 8054188:	4619      	mov	r1, r3
 805418a:	f7fd f949 	bl	8051420 <remove_chain>
 805418e:	4603      	mov	r3, r0
 8054190:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 8054194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8054196:	689b      	ldr	r3, [r3, #8]
 8054198:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 805419a:	3b01      	subs	r3, #1
 805419c:	61d3      	str	r3, [r2, #28]
 805419e:	e06b      	b.n	8054278 <f_open+0x340>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80541a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80541a2:	330e      	adds	r3, #14
 80541a4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80541a8:	4618      	mov	r0, r3
 80541aa:	f7fc f996 	bl	80504da <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80541ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80541b0:	3316      	adds	r3, #22
 80541b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80541b6:	4618      	mov	r0, r3
 80541b8:	f7fc f98f 	bl	80504da <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80541bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80541be:	f103 020b 	add.w	r2, r3, #11
 80541c2:	2320      	movs	r3, #32
 80541c4:	7013      	strb	r3, [r2, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80541c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80541c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80541ca:	4619      	mov	r1, r3
 80541cc:	4610      	mov	r0, r2
 80541ce:	f7fd fcfe 	bl	8051bce <ld_clust>
 80541d2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80541d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80541d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80541da:	2200      	movs	r2, #0
 80541dc:	4619      	mov	r1, r3
 80541de:	f7fd fd15 	bl	8051c0c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80541e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80541e4:	331c      	adds	r3, #28
 80541e6:	2100      	movs	r1, #0
 80541e8:	4618      	mov	r0, r3
 80541ea:	f7fc f976 	bl	80504da <st_dword>
					fs->wflag = 1;
 80541ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80541f0:	2301      	movs	r3, #1
 80541f2:	70d3      	strb	r3, [r2, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80541f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80541f8:	2b00      	cmp	r3, #0
 80541fa:	d03d      	beq.n	8054278 <f_open+0x340>
						dw = fs->winsect;
 80541fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80541fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8054200:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
						res = remove_chain(&dj.obj, cl, 0);
 8054204:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8054208:	2200      	movs	r2, #0
 805420a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 805420e:	4618      	mov	r0, r3
 8054210:	f7fd f906 	bl	8051420 <remove_chain>
 8054214:	4603      	mov	r3, r0
 8054216:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						if (res == FR_OK) {
 805421a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 805421e:	2b00      	cmp	r3, #0
 8054220:	d12a      	bne.n	8054278 <f_open+0x340>
							res = move_window(fs, dw);
 8054222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8054224:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8054228:	4618      	mov	r0, r3
 805422a:	f7fc fc69 	bl	8050b00 <move_window>
 805422e:	4603      	mov	r3, r0
 8054230:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8054234:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8054236:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 805423a:	3b01      	subs	r3, #1
 805423c:	61d3      	str	r3, [r2, #28]
 805423e:	e01b      	b.n	8054278 <f_open+0x340>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8054240:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8054244:	2b00      	cmp	r3, #0
 8054246:	d117      	bne.n	8054278 <f_open+0x340>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8054248:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 805424c:	f003 0310 	and.w	r3, r3, #16
 8054250:	2b00      	cmp	r3, #0
 8054252:	d003      	beq.n	805425c <f_open+0x324>
					res = FR_NO_FILE;
 8054254:	2304      	movs	r3, #4
 8054256:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 805425a:	e00d      	b.n	8054278 <f_open+0x340>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 805425c:	7ffb      	ldrb	r3, [r7, #31]
 805425e:	f003 0302 	and.w	r3, r3, #2
 8054262:	2b00      	cmp	r3, #0
 8054264:	d008      	beq.n	8054278 <f_open+0x340>
 8054266:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 805426a:	f003 0301 	and.w	r3, r3, #1
 805426e:	2b00      	cmp	r3, #0
 8054270:	d002      	beq.n	8054278 <f_open+0x340>
						res = FR_DENIED;
 8054272:	2307      	movs	r3, #7
 8054274:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
					}
				}
			}
		}
		if (res == FR_OK) {
 8054278:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 805427c:	2b00      	cmp	r3, #0
 805427e:	d128      	bne.n	80542d2 <f_open+0x39a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8054280:	7ffb      	ldrb	r3, [r7, #31]
 8054282:	f003 0308 	and.w	r3, r3, #8
 8054286:	2b00      	cmp	r3, #0
 8054288:	d003      	beq.n	8054292 <f_open+0x35a>
				mode |= FA_MODIFIED;
 805428a:	7ffb      	ldrb	r3, [r7, #31]
 805428c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8054290:	77fb      	strb	r3, [r7, #31]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8054292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8054294:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8054296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8054298:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 805429a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 805429c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805429e:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80542a0:	7ffb      	ldrb	r3, [r7, #31]
 80542a2:	f023 0301 	bic.w	r3, r3, #1
 80542a6:	2b00      	cmp	r3, #0
 80542a8:	bf14      	ite	ne
 80542aa:	2301      	movne	r3, #1
 80542ac:	2300      	moveq	r3, #0
 80542ae:	b2db      	uxtb	r3, r3
 80542b0:	461a      	mov	r2, r3
 80542b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80542b6:	4611      	mov	r1, r2
 80542b8:	4618      	mov	r0, r3
 80542ba:	f7fc faef 	bl	805089c <inc_lock>
 80542be:	4602      	mov	r2, r0
 80542c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80542c2:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80542c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80542c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80542c8:	2b00      	cmp	r3, #0
 80542ca:	d102      	bne.n	80542d2 <f_open+0x39a>
 80542cc:	2302      	movs	r3, #2
 80542ce:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
				}
			}
		}
#endif

		if (res == FR_OK) {
 80542d2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80542d6:	2b00      	cmp	r3, #0
 80542d8:	f040 810e 	bne.w	80544f8 <f_open+0x5c0>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80542dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80542de:	781b      	ldrb	r3, [r3, #0]
 80542e0:	2b04      	cmp	r3, #4
 80542e2:	d12d      	bne.n	8054340 <f_open+0x408>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 80542e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80542e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80542e8:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 80542ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80542ee:	4613      	mov	r3, r2
 80542f0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80542f4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80542f8:	431a      	orrs	r2, r3
 80542fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80542fc:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 80542fe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8054300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8054302:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 8054304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8054306:	695b      	ldr	r3, [r3, #20]
 8054308:	3334      	adds	r3, #52	; 0x34
 805430a:	4618      	mov	r0, r3
 805430c:	f7fb ffcc 	bl	80502a8 <ld_dword>
 8054310:	4602      	mov	r2, r0
 8054312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8054314:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8054316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8054318:	695b      	ldr	r3, [r3, #20]
 805431a:	3338      	adds	r3, #56	; 0x38
 805431c:	4618      	mov	r0, r3
 805431e:	f7fb ffe6 	bl	80502ee <ld_qword>
 8054322:	4602      	mov	r2, r0
 8054324:	460b      	mov	r3, r1
 8054326:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8054328:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 805432c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 805432e:	695b      	ldr	r3, [r3, #20]
 8054330:	3321      	adds	r3, #33	; 0x21
 8054332:	781b      	ldrb	r3, [r3, #0]
 8054334:	f003 0302 	and.w	r3, r3, #2
 8054338:	b2da      	uxtb	r2, r3
 805433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805433c:	71da      	strb	r2, [r3, #7]
 805433e:	e016      	b.n	805436e <f_open+0x436>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8054340:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8054342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8054344:	4619      	mov	r1, r3
 8054346:	4610      	mov	r0, r2
 8054348:	f7fd fc41 	bl	8051bce <ld_clust>
 805434c:	4602      	mov	r2, r0
 805434e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8054350:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8054352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8054354:	331c      	adds	r3, #28
 8054356:	4618      	mov	r0, r3
 8054358:	f7fb ffa6 	bl	80502a8 <ld_dword>
 805435c:	4603      	mov	r3, r0
 805435e:	2200      	movs	r2, #0
 8054360:	613b      	str	r3, [r7, #16]
 8054362:	617a      	str	r2, [r7, #20]
 8054364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8054366:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 805436a:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 805436e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8054370:	2200      	movs	r2, #0
 8054372:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8054374:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8054376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8054378:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 805437a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 805437c:	88da      	ldrh	r2, [r3, #6]
 805437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8054380:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8054382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8054384:	7ffa      	ldrb	r2, [r7, #31]
 8054386:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 805438a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805438c:	2200      	movs	r2, #0
 805438e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 8054392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8054394:	2200      	movs	r2, #0
 8054396:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 8054398:	6a79      	ldr	r1, [r7, #36]	; 0x24
 805439a:	f04f 0200 	mov.w	r2, #0
 805439e:	f04f 0300 	mov.w	r3, #0
 80543a2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80543a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80543a8:	3354      	adds	r3, #84	; 0x54
 80543aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80543ae:	2100      	movs	r1, #0
 80543b0:	4618      	mov	r0, r3
 80543b2:	f7fc f967 	bl	8050684 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80543b6:	7ffb      	ldrb	r3, [r7, #31]
 80543b8:	f003 0320 	and.w	r3, r3, #32
 80543bc:	2b00      	cmp	r3, #0
 80543be:	f000 809b 	beq.w	80544f8 <f_open+0x5c0>
 80543c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80543c4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80543c8:	4313      	orrs	r3, r2
 80543ca:	f000 8095 	beq.w	80544f8 <f_open+0x5c0>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80543ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80543d0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80543d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80543d6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80543da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80543dc:	895b      	ldrh	r3, [r3, #10]
 80543de:	461a      	mov	r2, r3
 80543e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80543e2:	899b      	ldrh	r3, [r3, #12]
 80543e4:	fb02 f303 	mul.w	r3, r2, r3
 80543e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80543ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80543ee:	689b      	ldr	r3, [r3, #8]
 80543f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80543f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80543f6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80543fa:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
 80543fe:	e023      	b.n	8054448 <f_open+0x510>
					clst = get_fat(&fp->obj, clst);
 8054400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8054402:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8054406:	4618      	mov	r0, r3
 8054408:	f7fc fc38 	bl	8050c7c <get_fat>
 805440c:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
					if (clst <= 1) res = FR_INT_ERR;
 8054410:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8054414:	2b01      	cmp	r3, #1
 8054416:	d802      	bhi.n	805441e <f_open+0x4e6>
 8054418:	2302      	movs	r3, #2
 805441a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 805441e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8054422:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8054426:	d102      	bne.n	805442e <f_open+0x4f6>
 8054428:	2301      	movs	r3, #1
 805442a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 805442e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8054432:	2200      	movs	r2, #0
 8054434:	4698      	mov	r8, r3
 8054436:	4691      	mov	r9, r2
 8054438:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 805443c:	ebb2 0a08 	subs.w	sl, r2, r8
 8054440:	eb63 0b09 	sbc.w	fp, r3, r9
 8054444:	e9c7 ab26 	strd	sl, fp, [r7, #152]	; 0x98
 8054448:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 805444c:	2b00      	cmp	r3, #0
 805444e:	d10a      	bne.n	8054466 <f_open+0x52e>
 8054450:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8054454:	2200      	movs	r2, #0
 8054456:	461c      	mov	r4, r3
 8054458:	4615      	mov	r5, r2
 805445a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 805445e:	4294      	cmp	r4, r2
 8054460:	eb75 0303 	sbcs.w	r3, r5, r3
 8054464:	d3cc      	bcc.n	8054400 <f_open+0x4c8>
				}
				fp->clust = clst;
 8054466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8054468:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 805446c:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 805446e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8054472:	2b00      	cmp	r3, #0
 8054474:	d140      	bne.n	80544f8 <f_open+0x5c0>
 8054476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8054478:	899b      	ldrh	r3, [r3, #12]
 805447a:	b29b      	uxth	r3, r3
 805447c:	2200      	movs	r2, #0
 805447e:	60bb      	str	r3, [r7, #8]
 8054480:	60fa      	str	r2, [r7, #12]
 8054482:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8054486:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 805448a:	f7eb ffa9 	bl	80403e0 <__aeabi_uldivmod>
 805448e:	4313      	orrs	r3, r2
 8054490:	d032      	beq.n	80544f8 <f_open+0x5c0>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8054492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8054494:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8054498:	4618      	mov	r0, r3
 805449a:	f7fc fbcf 	bl	8050c3c <clust2sect>
 805449e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 80544a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80544a6:	2b00      	cmp	r3, #0
 80544a8:	d103      	bne.n	80544b2 <f_open+0x57a>
						res = FR_INT_ERR;
 80544aa:	2302      	movs	r3, #2
 80544ac:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80544b0:	e022      	b.n	80544f8 <f_open+0x5c0>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80544b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80544b4:	899b      	ldrh	r3, [r3, #12]
 80544b6:	b29b      	uxth	r3, r3
 80544b8:	2200      	movs	r2, #0
 80544ba:	603b      	str	r3, [r7, #0]
 80544bc:	607a      	str	r2, [r7, #4]
 80544be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80544c2:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80544c6:	f7eb ff8b 	bl	80403e0 <__aeabi_uldivmod>
 80544ca:	4602      	mov	r2, r0
 80544cc:	460b      	mov	r3, r1
 80544ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80544d2:	441a      	add	r2, r3
 80544d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80544d6:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80544d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80544da:	7858      	ldrb	r0, [r3, #1]
 80544dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80544de:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80544e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80544e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80544e6:	2301      	movs	r3, #1
 80544e8:	f7fb fe68 	bl	80501bc <disk_read>
 80544ec:	4603      	mov	r3, r0
 80544ee:	2b00      	cmp	r3, #0
 80544f0:	d002      	beq.n	80544f8 <f_open+0x5c0>
 80544f2:	2301      	movs	r3, #1
 80544f4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
				}
			}
#endif
		}

		FREE_NAMBUF();
 80544f8:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80544fc:	f001 fc8d 	bl	8055e1a <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8054500:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8054504:	2b00      	cmp	r3, #0
 8054506:	d002      	beq.n	805450e <f_open+0x5d6>
 8054508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805450a:	2200      	movs	r2, #0
 805450c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 805450e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8054510:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8054514:	4611      	mov	r1, r2
 8054516:	4618      	mov	r0, r3
 8054518:	f7fc f927 	bl	805076a <unlock_fs>
 805451c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
}
 8054520:	4618      	mov	r0, r3
 8054522:	37a8      	adds	r7, #168	; 0xa8
 8054524:	46bd      	mov	sp, r7
 8054526:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0805452a <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 805452a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 805452e:	b098      	sub	sp, #96	; 0x60
 8054530:	af00      	add	r7, sp, #0
 8054532:	62f8      	str	r0, [r7, #44]	; 0x2c
 8054534:	62b9      	str	r1, [r7, #40]	; 0x28
 8054536:	627a      	str	r2, [r7, #36]	; 0x24
 8054538:	623b      	str	r3, [r7, #32]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 805453a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 805453c:	64fb      	str	r3, [r7, #76]	; 0x4c


	*br = 0;	/* Clear read byte counter */
 805453e:	6a3a      	ldr	r2, [r7, #32]
 8054540:	2300      	movs	r3, #0
 8054542:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8054544:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8054546:	f107 0334 	add.w	r3, r7, #52	; 0x34
 805454a:	4619      	mov	r1, r3
 805454c:	4610      	mov	r0, r2
 805454e:	f7ff fc47 	bl	8053de0 <validate>
 8054552:	4603      	mov	r3, r0
 8054554:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8054558:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 805455c:	2b00      	cmp	r3, #0
 805455e:	d108      	bne.n	8054572 <f_read+0x48>
 8054560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8054562:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8054566:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 805456a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 805456e:	2b00      	cmp	r3, #0
 8054570:	d009      	beq.n	8054586 <f_read+0x5c>
 8054572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8054574:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8054578:	4611      	mov	r1, r2
 805457a:	4618      	mov	r0, r3
 805457c:	f7fc f8f5 	bl	805076a <unlock_fs>
 8054580:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8054584:	e193      	b.n	80548ae <f_read+0x384>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8054586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8054588:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 805458c:	f003 0301 	and.w	r3, r3, #1
 8054590:	2b00      	cmp	r3, #0
 8054592:	d106      	bne.n	80545a2 <f_read+0x78>
 8054594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8054596:	2107      	movs	r1, #7
 8054598:	4618      	mov	r0, r3
 805459a:	f7fc f8e6 	bl	805076a <unlock_fs>
 805459e:	2307      	movs	r3, #7
 80545a0:	e185      	b.n	80548ae <f_read+0x384>
	remain = fp->obj.objsize - fp->fptr;
 80545a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80545a4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80545a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80545aa:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80545ae:	ebb0 0802 	subs.w	r8, r0, r2
 80545b2:	eb61 0903 	sbc.w	r9, r1, r3
 80545b6:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80545ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80545bc:	2200      	movs	r2, #0
 80545be:	461c      	mov	r4, r3
 80545c0:	4615      	mov	r5, r2
 80545c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80545c6:	42a2      	cmp	r2, r4
 80545c8:	41ab      	sbcs	r3, r5
 80545ca:	f080 8166 	bcs.w	805489a <f_read+0x370>
 80545ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80545d0:	627b      	str	r3, [r7, #36]	; 0x24

	for ( ;  btr;								/* Repeat until all data read */
 80545d2:	e162      	b.n	805489a <f_read+0x370>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80545d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80545d6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80545da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80545dc:	899b      	ldrh	r3, [r3, #12]
 80545de:	b29b      	uxth	r3, r3
 80545e0:	2200      	movs	r2, #0
 80545e2:	61bb      	str	r3, [r7, #24]
 80545e4:	61fa      	str	r2, [r7, #28]
 80545e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80545ea:	f7eb fef9 	bl	80403e0 <__aeabi_uldivmod>
 80545ee:	4313      	orrs	r3, r2
 80545f0:	f040 8107 	bne.w	8054802 <f_read+0x2d8>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80545f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80545f6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80545fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80545fc:	899b      	ldrh	r3, [r3, #12]
 80545fe:	b29b      	uxth	r3, r3
 8054600:	2200      	movs	r2, #0
 8054602:	613b      	str	r3, [r7, #16]
 8054604:	617a      	str	r2, [r7, #20]
 8054606:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 805460a:	f7eb fee9 	bl	80403e0 <__aeabi_uldivmod>
 805460e:	4602      	mov	r2, r0
 8054610:	460b      	mov	r3, r1
 8054612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8054614:	895b      	ldrh	r3, [r3, #10]
 8054616:	3b01      	subs	r3, #1
 8054618:	4013      	ands	r3, r2
 805461a:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (csect == 0) {					/* On the cluster boundary? */
 805461c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 805461e:	2b00      	cmp	r3, #0
 8054620:	d13c      	bne.n	805469c <f_read+0x172>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8054622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8054624:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8054628:	4313      	orrs	r3, r2
 805462a:	d103      	bne.n	8054634 <f_read+0x10a>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 805462c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 805462e:	689b      	ldr	r3, [r3, #8]
 8054630:	65bb      	str	r3, [r7, #88]	; 0x58
 8054632:	e013      	b.n	805465c <f_read+0x132>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8054634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8054636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8054638:	2b00      	cmp	r3, #0
 805463a:	d007      	beq.n	805464c <f_read+0x122>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 805463c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 805463e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8054642:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8054644:	f7fd f8a1 	bl	805178a <clmt_clust>
 8054648:	65b8      	str	r0, [r7, #88]	; 0x58
 805464a:	e007      	b.n	805465c <f_read+0x132>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 805464c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 805464e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8054650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8054652:	4619      	mov	r1, r3
 8054654:	4610      	mov	r0, r2
 8054656:	f7fc fb11 	bl	8050c7c <get_fat>
 805465a:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 805465c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 805465e:	2b01      	cmp	r3, #1
 8054660:	d80a      	bhi.n	8054678 <f_read+0x14e>
 8054662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8054664:	2202      	movs	r2, #2
 8054666:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 805466a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 805466c:	2102      	movs	r1, #2
 805466e:	4618      	mov	r0, r3
 8054670:	f7fc f87b 	bl	805076a <unlock_fs>
 8054674:	2302      	movs	r3, #2
 8054676:	e11a      	b.n	80548ae <f_read+0x384>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8054678:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 805467a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 805467e:	d10a      	bne.n	8054696 <f_read+0x16c>
 8054680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8054682:	2201      	movs	r2, #1
 8054684:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8054688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 805468a:	2101      	movs	r1, #1
 805468c:	4618      	mov	r0, r3
 805468e:	f7fc f86c 	bl	805076a <unlock_fs>
 8054692:	2301      	movs	r3, #1
 8054694:	e10b      	b.n	80548ae <f_read+0x384>
				fp->clust = clst;				/* Update current cluster */
 8054696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8054698:	6dba      	ldr	r2, [r7, #88]	; 0x58
 805469a:	641a      	str	r2, [r3, #64]	; 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 805469c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 805469e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80546a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80546a2:	4619      	mov	r1, r3
 80546a4:	4610      	mov	r0, r2
 80546a6:	f7fc fac9 	bl	8050c3c <clust2sect>
 80546aa:	63b8      	str	r0, [r7, #56]	; 0x38
			if (!sect) ABORT(fs, FR_INT_ERR);
 80546ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80546ae:	2b00      	cmp	r3, #0
 80546b0:	d10a      	bne.n	80546c8 <f_read+0x19e>
 80546b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80546b4:	2202      	movs	r2, #2
 80546b6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80546ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80546bc:	2102      	movs	r1, #2
 80546be:	4618      	mov	r0, r3
 80546c0:	f7fc f853 	bl	805076a <unlock_fs>
 80546c4:	2302      	movs	r3, #2
 80546c6:	e0f2      	b.n	80548ae <f_read+0x384>
			sect += csect;
 80546c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80546ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80546cc:	4413      	add	r3, r2
 80546ce:	63bb      	str	r3, [r7, #56]	; 0x38
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80546d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80546d2:	899b      	ldrh	r3, [r3, #12]
 80546d4:	461a      	mov	r2, r3
 80546d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80546d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80546dc:	653b      	str	r3, [r7, #80]	; 0x50
			if (cc) {							/* Read maximum contiguous sectors directly */
 80546de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80546e0:	2b00      	cmp	r3, #0
 80546e2:	d048      	beq.n	8054776 <f_read+0x24c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80546e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80546e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80546e8:	4413      	add	r3, r2
 80546ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80546ec:	8952      	ldrh	r2, [r2, #10]
 80546ee:	4293      	cmp	r3, r2
 80546f0:	d905      	bls.n	80546fe <f_read+0x1d4>
					cc = fs->csize - csect;
 80546f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80546f4:	895b      	ldrh	r3, [r3, #10]
 80546f6:	461a      	mov	r2, r3
 80546f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80546fa:	1ad3      	subs	r3, r2, r3
 80546fc:	653b      	str	r3, [r7, #80]	; 0x50
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80546fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8054700:	7858      	ldrb	r0, [r3, #1]
 8054702:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8054704:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8054706:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8054708:	f7fb fd58 	bl	80501bc <disk_read>
 805470c:	4603      	mov	r3, r0
 805470e:	2b00      	cmp	r3, #0
 8054710:	d00a      	beq.n	8054728 <f_read+0x1fe>
 8054712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8054714:	2201      	movs	r2, #1
 8054716:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 805471a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 805471c:	2101      	movs	r1, #1
 805471e:	4618      	mov	r0, r3
 8054720:	f7fc f823 	bl	805076a <unlock_fs>
 8054724:	2301      	movs	r3, #1
 8054726:	e0c2      	b.n	80548ae <f_read+0x384>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8054728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 805472a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 805472e:	b25b      	sxtb	r3, r3
 8054730:	2b00      	cmp	r3, #0
 8054732:	da18      	bge.n	8054766 <f_read+0x23c>
 8054734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8054736:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8054738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 805473a:	1ad3      	subs	r3, r2, r3
 805473c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 805473e:	429a      	cmp	r2, r3
 8054740:	d911      	bls.n	8054766 <f_read+0x23c>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8054742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8054744:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8054746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8054748:	1ad3      	subs	r3, r2, r3
 805474a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 805474c:	8992      	ldrh	r2, [r2, #12]
 805474e:	fb02 f303 	mul.w	r3, r2, r3
 8054752:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8054754:	18d0      	adds	r0, r2, r3
 8054756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8054758:	f103 0154 	add.w	r1, r3, #84	; 0x54
 805475c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 805475e:	899b      	ldrh	r3, [r3, #12]
 8054760:	461a      	mov	r2, r3
 8054762:	f7fb ff6e 	bl	8050642 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8054766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8054768:	899b      	ldrh	r3, [r3, #12]
 805476a:	461a      	mov	r2, r3
 805476c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 805476e:	fb02 f303 	mul.w	r3, r2, r3
 8054772:	657b      	str	r3, [r7, #84]	; 0x54
				continue;
 8054774:	e071      	b.n	805485a <f_read+0x330>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8054776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8054778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 805477a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 805477c:	429a      	cmp	r2, r3
 805477e:	d03d      	beq.n	80547fc <f_read+0x2d2>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8054780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8054782:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8054786:	b25b      	sxtb	r3, r3
 8054788:	2b00      	cmp	r3, #0
 805478a:	da20      	bge.n	80547ce <f_read+0x2a4>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 805478c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 805478e:	7858      	ldrb	r0, [r3, #1]
 8054790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8054792:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8054796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8054798:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 805479a:	2301      	movs	r3, #1
 805479c:	f7fb fd2e 	bl	80501fc <disk_write>
 80547a0:	4603      	mov	r3, r0
 80547a2:	2b00      	cmp	r3, #0
 80547a4:	d00a      	beq.n	80547bc <f_read+0x292>
 80547a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80547a8:	2201      	movs	r2, #1
 80547aa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80547ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80547b0:	2101      	movs	r1, #1
 80547b2:	4618      	mov	r0, r3
 80547b4:	f7fb ffd9 	bl	805076a <unlock_fs>
 80547b8:	2301      	movs	r3, #1
 80547ba:	e078      	b.n	80548ae <f_read+0x384>
					fp->flag &= (BYTE)~FA_DIRTY;
 80547bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80547be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80547c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80547c6:	b2da      	uxtb	r2, r3
 80547c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80547ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80547ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80547d0:	7858      	ldrb	r0, [r3, #1]
 80547d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80547d4:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80547d8:	2301      	movs	r3, #1
 80547da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80547dc:	f7fb fcee 	bl	80501bc <disk_read>
 80547e0:	4603      	mov	r3, r0
 80547e2:	2b00      	cmp	r3, #0
 80547e4:	d00a      	beq.n	80547fc <f_read+0x2d2>
 80547e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80547e8:	2201      	movs	r2, #1
 80547ea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80547ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80547f0:	2101      	movs	r1, #1
 80547f2:	4618      	mov	r0, r3
 80547f4:	f7fb ffb9 	bl	805076a <unlock_fs>
 80547f8:	2301      	movs	r3, #1
 80547fa:	e058      	b.n	80548ae <f_read+0x384>
			}
#endif
			fp->sect = sect;
 80547fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80547fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8054800:	645a      	str	r2, [r3, #68]	; 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8054802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8054804:	899b      	ldrh	r3, [r3, #12]
 8054806:	4618      	mov	r0, r3
 8054808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 805480a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 805480e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8054810:	899b      	ldrh	r3, [r3, #12]
 8054812:	fbb2 f1f3 	udiv	r1, r2, r3
 8054816:	fb01 f303 	mul.w	r3, r1, r3
 805481a:	1ad3      	subs	r3, r2, r3
 805481c:	1ac3      	subs	r3, r0, r3
 805481e:	657b      	str	r3, [r7, #84]	; 0x54
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8054820:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8054822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8054824:	429a      	cmp	r2, r3
 8054826:	d901      	bls.n	805482c <f_read+0x302>
 8054828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805482a:	657b      	str	r3, [r7, #84]	; 0x54
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 805482c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 805482e:	f103 0454 	add.w	r4, r3, #84	; 0x54
 8054832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8054834:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8054838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 805483a:	899b      	ldrh	r3, [r3, #12]
 805483c:	b29b      	uxth	r3, r3
 805483e:	2200      	movs	r2, #0
 8054840:	60bb      	str	r3, [r7, #8]
 8054842:	60fa      	str	r2, [r7, #12]
 8054844:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8054848:	f7eb fdca 	bl	80403e0 <__aeabi_uldivmod>
 805484c:	4613      	mov	r3, r2
 805484e:	4423      	add	r3, r4
 8054850:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8054852:	4619      	mov	r1, r3
 8054854:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8054856:	f7fb fef4 	bl	8050642 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 805485a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 805485c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 805485e:	4413      	add	r3, r2
 8054860:	64fb      	str	r3, [r7, #76]	; 0x4c
 8054862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8054864:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8054868:	6d79      	ldr	r1, [r7, #84]	; 0x54
 805486a:	2000      	movs	r0, #0
 805486c:	468a      	mov	sl, r1
 805486e:	4683      	mov	fp, r0
 8054870:	eb12 010a 	adds.w	r1, r2, sl
 8054874:	6039      	str	r1, [r7, #0]
 8054876:	eb43 030b 	adc.w	r3, r3, fp
 805487a:	607b      	str	r3, [r7, #4]
 805487c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 805487e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8054882:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
 8054886:	6a3b      	ldr	r3, [r7, #32]
 8054888:	681a      	ldr	r2, [r3, #0]
 805488a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 805488c:	441a      	add	r2, r3
 805488e:	6a3b      	ldr	r3, [r7, #32]
 8054890:	601a      	str	r2, [r3, #0]
 8054892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8054894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8054896:	1ad3      	subs	r3, r2, r3
 8054898:	627b      	str	r3, [r7, #36]	; 0x24
	for ( ;  btr;								/* Repeat until all data read */
 805489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805489c:	2b00      	cmp	r3, #0
 805489e:	f47f ae99 	bne.w	80545d4 <f_read+0xaa>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80548a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80548a4:	2100      	movs	r1, #0
 80548a6:	4618      	mov	r0, r3
 80548a8:	f7fb ff5f 	bl	805076a <unlock_fs>
 80548ac:	2300      	movs	r3, #0
}
 80548ae:	4618      	mov	r0, r3
 80548b0:	3760      	adds	r7, #96	; 0x60
 80548b2:	46bd      	mov	sp, r7
 80548b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080548b8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80548b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80548bc:	b091      	sub	sp, #68	; 0x44
 80548be:	af00      	add	r7, sp, #0
 80548c0:	61f8      	str	r0, [r7, #28]
 80548c2:	61b9      	str	r1, [r7, #24]
 80548c4:	617a      	str	r2, [r7, #20]
 80548c6:	613b      	str	r3, [r7, #16]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80548c8:	69bb      	ldr	r3, [r7, #24]
 80548ca:	62fb      	str	r3, [r7, #44]	; 0x2c


	*bw = 0;	/* Clear write byte counter */
 80548cc:	693b      	ldr	r3, [r7, #16]
 80548ce:	2200      	movs	r2, #0
 80548d0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80548d2:	69fb      	ldr	r3, [r7, #28]
 80548d4:	f107 0220 	add.w	r2, r7, #32
 80548d8:	4611      	mov	r1, r2
 80548da:	4618      	mov	r0, r3
 80548dc:	f7ff fa80 	bl	8053de0 <validate>
 80548e0:	4603      	mov	r3, r0
 80548e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80548e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80548ea:	2b00      	cmp	r3, #0
 80548ec:	d108      	bne.n	8054900 <f_write+0x48>
 80548ee:	69fb      	ldr	r3, [r7, #28]
 80548f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80548f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80548f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80548fc:	2b00      	cmp	r3, #0
 80548fe:	d009      	beq.n	8054914 <f_write+0x5c>
 8054900:	6a3b      	ldr	r3, [r7, #32]
 8054902:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8054906:	4611      	mov	r1, r2
 8054908:	4618      	mov	r0, r3
 805490a:	f7fb ff2e 	bl	805076a <unlock_fs>
 805490e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8054912:	e1d2      	b.n	8054cba <f_write+0x402>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8054914:	69fb      	ldr	r3, [r7, #28]
 8054916:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 805491a:	f003 0302 	and.w	r3, r3, #2
 805491e:	2b00      	cmp	r3, #0
 8054920:	d106      	bne.n	8054930 <f_write+0x78>
 8054922:	6a3b      	ldr	r3, [r7, #32]
 8054924:	2107      	movs	r1, #7
 8054926:	4618      	mov	r0, r3
 8054928:	f7fb ff1f 	bl	805076a <unlock_fs>
 805492c:	2307      	movs	r3, #7
 805492e:	e1c4      	b.n	8054cba <f_write+0x402>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8054930:	6a3b      	ldr	r3, [r7, #32]
 8054932:	781b      	ldrb	r3, [r3, #0]
 8054934:	2b04      	cmp	r3, #4
 8054936:	f000 81ab 	beq.w	8054c90 <f_write+0x3d8>
 805493a:	69fb      	ldr	r3, [r7, #28]
 805493c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8054940:	697b      	ldr	r3, [r7, #20]
 8054942:	18d1      	adds	r1, r2, r3
 8054944:	69fb      	ldr	r3, [r7, #28]
 8054946:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 805494a:	4613      	mov	r3, r2
 805494c:	4299      	cmp	r1, r3
 805494e:	f080 819f 	bcs.w	8054c90 <f_write+0x3d8>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8054952:	69fb      	ldr	r3, [r7, #28]
 8054954:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8054958:	4613      	mov	r3, r2
 805495a:	43db      	mvns	r3, r3
 805495c:	617b      	str	r3, [r7, #20]
	}

	for ( ;  btw;							/* Repeat until all data written */
 805495e:	e197      	b.n	8054c90 <f_write+0x3d8>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8054960:	69fb      	ldr	r3, [r7, #28]
 8054962:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8054966:	6a3b      	ldr	r3, [r7, #32]
 8054968:	899b      	ldrh	r3, [r3, #12]
 805496a:	b29b      	uxth	r3, r3
 805496c:	2200      	movs	r2, #0
 805496e:	461d      	mov	r5, r3
 8054970:	4616      	mov	r6, r2
 8054972:	462a      	mov	r2, r5
 8054974:	4633      	mov	r3, r6
 8054976:	f7eb fd33 	bl	80403e0 <__aeabi_uldivmod>
 805497a:	4313      	orrs	r3, r2
 805497c:	f040 8128 	bne.w	8054bd0 <f_write+0x318>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8054980:	69fb      	ldr	r3, [r7, #28]
 8054982:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8054986:	6a3b      	ldr	r3, [r7, #32]
 8054988:	899b      	ldrh	r3, [r3, #12]
 805498a:	b29b      	uxth	r3, r3
 805498c:	2200      	movs	r2, #0
 805498e:	60bb      	str	r3, [r7, #8]
 8054990:	60fa      	str	r2, [r7, #12]
 8054992:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8054996:	f7eb fd23 	bl	80403e0 <__aeabi_uldivmod>
 805499a:	4602      	mov	r2, r0
 805499c:	460b      	mov	r3, r1
 805499e:	6a3b      	ldr	r3, [r7, #32]
 80549a0:	895b      	ldrh	r3, [r3, #10]
 80549a2:	3b01      	subs	r3, #1
 80549a4:	4013      	ands	r3, r2
 80549a6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (csect == 0) {				/* On the cluster boundary? */
 80549a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80549aa:	2b00      	cmp	r3, #0
 80549ac:	d150      	bne.n	8054a50 <f_write+0x198>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80549ae:	69fb      	ldr	r3, [r7, #28]
 80549b0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80549b4:	4313      	orrs	r3, r2
 80549b6:	d10c      	bne.n	80549d2 <f_write+0x11a>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80549b8:	69fb      	ldr	r3, [r7, #28]
 80549ba:	689b      	ldr	r3, [r3, #8]
 80549bc:	63bb      	str	r3, [r7, #56]	; 0x38
					if (clst == 0) {		/* If no cluster is allocated, */
 80549be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80549c0:	2b00      	cmp	r3, #0
 80549c2:	d11a      	bne.n	80549fa <f_write+0x142>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80549c4:	69fb      	ldr	r3, [r7, #28]
 80549c6:	2100      	movs	r1, #0
 80549c8:	4618      	mov	r0, r3
 80549ca:	f7fc fddd 	bl	8051588 <create_chain>
 80549ce:	63b8      	str	r0, [r7, #56]	; 0x38
 80549d0:	e013      	b.n	80549fa <f_write+0x142>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80549d2:	69fb      	ldr	r3, [r7, #28]
 80549d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80549d6:	2b00      	cmp	r3, #0
 80549d8:	d007      	beq.n	80549ea <f_write+0x132>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80549da:	69fb      	ldr	r3, [r7, #28]
 80549dc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80549e0:	69f8      	ldr	r0, [r7, #28]
 80549e2:	f7fc fed2 	bl	805178a <clmt_clust>
 80549e6:	63b8      	str	r0, [r7, #56]	; 0x38
 80549e8:	e007      	b.n	80549fa <f_write+0x142>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80549ea:	69fa      	ldr	r2, [r7, #28]
 80549ec:	69fb      	ldr	r3, [r7, #28]
 80549ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80549f0:	4619      	mov	r1, r3
 80549f2:	4610      	mov	r0, r2
 80549f4:	f7fc fdc8 	bl	8051588 <create_chain>
 80549f8:	63b8      	str	r0, [r7, #56]	; 0x38
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80549fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80549fc:	2b00      	cmp	r3, #0
 80549fe:	f000 814c 	beq.w	8054c9a <f_write+0x3e2>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8054a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8054a04:	2b01      	cmp	r3, #1
 8054a06:	d10a      	bne.n	8054a1e <f_write+0x166>
 8054a08:	69fb      	ldr	r3, [r7, #28]
 8054a0a:	2202      	movs	r2, #2
 8054a0c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8054a10:	6a3b      	ldr	r3, [r7, #32]
 8054a12:	2102      	movs	r1, #2
 8054a14:	4618      	mov	r0, r3
 8054a16:	f7fb fea8 	bl	805076a <unlock_fs>
 8054a1a:	2302      	movs	r3, #2
 8054a1c:	e14d      	b.n	8054cba <f_write+0x402>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8054a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8054a20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8054a24:	d10a      	bne.n	8054a3c <f_write+0x184>
 8054a26:	69fb      	ldr	r3, [r7, #28]
 8054a28:	2201      	movs	r2, #1
 8054a2a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8054a2e:	6a3b      	ldr	r3, [r7, #32]
 8054a30:	2101      	movs	r1, #1
 8054a32:	4618      	mov	r0, r3
 8054a34:	f7fb fe99 	bl	805076a <unlock_fs>
 8054a38:	2301      	movs	r3, #1
 8054a3a:	e13e      	b.n	8054cba <f_write+0x402>
				fp->clust = clst;			/* Update current cluster */
 8054a3c:	69fb      	ldr	r3, [r7, #28]
 8054a3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8054a40:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8054a42:	69fb      	ldr	r3, [r7, #28]
 8054a44:	689b      	ldr	r3, [r3, #8]
 8054a46:	2b00      	cmp	r3, #0
 8054a48:	d102      	bne.n	8054a50 <f_write+0x198>
 8054a4a:	69fb      	ldr	r3, [r7, #28]
 8054a4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8054a4e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8054a50:	69fb      	ldr	r3, [r7, #28]
 8054a52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8054a56:	b25b      	sxtb	r3, r3
 8054a58:	2b00      	cmp	r3, #0
 8054a5a:	da20      	bge.n	8054a9e <f_write+0x1e6>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8054a5c:	6a3b      	ldr	r3, [r7, #32]
 8054a5e:	7858      	ldrb	r0, [r3, #1]
 8054a60:	69fb      	ldr	r3, [r7, #28]
 8054a62:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8054a66:	69fb      	ldr	r3, [r7, #28]
 8054a68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8054a6a:	2301      	movs	r3, #1
 8054a6c:	f7fb fbc6 	bl	80501fc <disk_write>
 8054a70:	4603      	mov	r3, r0
 8054a72:	2b00      	cmp	r3, #0
 8054a74:	d00a      	beq.n	8054a8c <f_write+0x1d4>
 8054a76:	69fb      	ldr	r3, [r7, #28]
 8054a78:	2201      	movs	r2, #1
 8054a7a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8054a7e:	6a3b      	ldr	r3, [r7, #32]
 8054a80:	2101      	movs	r1, #1
 8054a82:	4618      	mov	r0, r3
 8054a84:	f7fb fe71 	bl	805076a <unlock_fs>
 8054a88:	2301      	movs	r3, #1
 8054a8a:	e116      	b.n	8054cba <f_write+0x402>
				fp->flag &= (BYTE)~FA_DIRTY;
 8054a8c:	69fb      	ldr	r3, [r7, #28]
 8054a8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8054a92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8054a96:	b2da      	uxtb	r2, r3
 8054a98:	69fb      	ldr	r3, [r7, #28]
 8054a9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8054a9e:	6a3a      	ldr	r2, [r7, #32]
 8054aa0:	69fb      	ldr	r3, [r7, #28]
 8054aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8054aa4:	4619      	mov	r1, r3
 8054aa6:	4610      	mov	r0, r2
 8054aa8:	f7fc f8c8 	bl	8050c3c <clust2sect>
 8054aac:	6278      	str	r0, [r7, #36]	; 0x24
			if (!sect) ABORT(fs, FR_INT_ERR);
 8054aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8054ab0:	2b00      	cmp	r3, #0
 8054ab2:	d10a      	bne.n	8054aca <f_write+0x212>
 8054ab4:	69fb      	ldr	r3, [r7, #28]
 8054ab6:	2202      	movs	r2, #2
 8054ab8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8054abc:	6a3b      	ldr	r3, [r7, #32]
 8054abe:	2102      	movs	r1, #2
 8054ac0:	4618      	mov	r0, r3
 8054ac2:	f7fb fe52 	bl	805076a <unlock_fs>
 8054ac6:	2302      	movs	r3, #2
 8054ac8:	e0f7      	b.n	8054cba <f_write+0x402>
			sect += csect;
 8054aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8054acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8054ace:	4413      	add	r3, r2
 8054ad0:	627b      	str	r3, [r7, #36]	; 0x24
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8054ad2:	6a3b      	ldr	r3, [r7, #32]
 8054ad4:	899b      	ldrh	r3, [r3, #12]
 8054ad6:	461a      	mov	r2, r3
 8054ad8:	697b      	ldr	r3, [r7, #20]
 8054ada:	fbb3 f3f2 	udiv	r3, r3, r2
 8054ade:	633b      	str	r3, [r7, #48]	; 0x30
			if (cc) {						/* Write maximum contiguous sectors directly */
 8054ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8054ae2:	2b00      	cmp	r3, #0
 8054ae4:	d04b      	beq.n	8054b7e <f_write+0x2c6>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8054ae6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8054ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8054aea:	4413      	add	r3, r2
 8054aec:	6a3a      	ldr	r2, [r7, #32]
 8054aee:	8952      	ldrh	r2, [r2, #10]
 8054af0:	4293      	cmp	r3, r2
 8054af2:	d905      	bls.n	8054b00 <f_write+0x248>
					cc = fs->csize - csect;
 8054af4:	6a3b      	ldr	r3, [r7, #32]
 8054af6:	895b      	ldrh	r3, [r3, #10]
 8054af8:	461a      	mov	r2, r3
 8054afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8054afc:	1ad3      	subs	r3, r2, r3
 8054afe:	633b      	str	r3, [r7, #48]	; 0x30
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8054b00:	6a3b      	ldr	r3, [r7, #32]
 8054b02:	7858      	ldrb	r0, [r3, #1]
 8054b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8054b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8054b08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8054b0a:	f7fb fb77 	bl	80501fc <disk_write>
 8054b0e:	4603      	mov	r3, r0
 8054b10:	2b00      	cmp	r3, #0
 8054b12:	d00a      	beq.n	8054b2a <f_write+0x272>
 8054b14:	69fb      	ldr	r3, [r7, #28]
 8054b16:	2201      	movs	r2, #1
 8054b18:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8054b1c:	6a3b      	ldr	r3, [r7, #32]
 8054b1e:	2101      	movs	r1, #1
 8054b20:	4618      	mov	r0, r3
 8054b22:	f7fb fe22 	bl	805076a <unlock_fs>
 8054b26:	2301      	movs	r3, #1
 8054b28:	e0c7      	b.n	8054cba <f_write+0x402>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8054b2a:	69fb      	ldr	r3, [r7, #28]
 8054b2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8054b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8054b30:	1ad3      	subs	r3, r2, r3
 8054b32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8054b34:	429a      	cmp	r2, r3
 8054b36:	d91a      	bls.n	8054b6e <f_write+0x2b6>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8054b38:	69fb      	ldr	r3, [r7, #28]
 8054b3a:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8054b3e:	69fb      	ldr	r3, [r7, #28]
 8054b40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8054b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8054b44:	1ad3      	subs	r3, r2, r3
 8054b46:	6a3a      	ldr	r2, [r7, #32]
 8054b48:	8992      	ldrh	r2, [r2, #12]
 8054b4a:	fb02 f303 	mul.w	r3, r2, r3
 8054b4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8054b50:	18d1      	adds	r1, r2, r3
 8054b52:	6a3b      	ldr	r3, [r7, #32]
 8054b54:	899b      	ldrh	r3, [r3, #12]
 8054b56:	461a      	mov	r2, r3
 8054b58:	f7fb fd73 	bl	8050642 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8054b5c:	69fb      	ldr	r3, [r7, #28]
 8054b5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8054b62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8054b66:	b2da      	uxtb	r2, r3
 8054b68:	69fb      	ldr	r3, [r7, #28]
 8054b6a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8054b6e:	6a3b      	ldr	r3, [r7, #32]
 8054b70:	899b      	ldrh	r3, [r3, #12]
 8054b72:	461a      	mov	r2, r3
 8054b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8054b76:	fb02 f303 	mul.w	r3, r2, r3
 8054b7a:	637b      	str	r3, [r7, #52]	; 0x34
				continue;
 8054b7c:	e05d      	b.n	8054c3a <f_write+0x382>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8054b7e:	69fb      	ldr	r3, [r7, #28]
 8054b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8054b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8054b84:	429a      	cmp	r2, r3
 8054b86:	d020      	beq.n	8054bca <f_write+0x312>
				fp->fptr < fp->obj.objsize &&
 8054b88:	69fb      	ldr	r3, [r7, #28]
 8054b8a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8054b8e:	69fb      	ldr	r3, [r7, #28]
 8054b90:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8054b94:	4290      	cmp	r0, r2
 8054b96:	eb71 0303 	sbcs.w	r3, r1, r3
 8054b9a:	d216      	bcs.n	8054bca <f_write+0x312>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8054b9c:	6a3b      	ldr	r3, [r7, #32]
 8054b9e:	7858      	ldrb	r0, [r3, #1]
 8054ba0:	69fb      	ldr	r3, [r7, #28]
 8054ba2:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8054ba6:	2301      	movs	r3, #1
 8054ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8054baa:	f7fb fb07 	bl	80501bc <disk_read>
 8054bae:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8054bb0:	2b00      	cmp	r3, #0
 8054bb2:	d00a      	beq.n	8054bca <f_write+0x312>
					ABORT(fs, FR_DISK_ERR);
 8054bb4:	69fb      	ldr	r3, [r7, #28]
 8054bb6:	2201      	movs	r2, #1
 8054bb8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8054bbc:	6a3b      	ldr	r3, [r7, #32]
 8054bbe:	2101      	movs	r1, #1
 8054bc0:	4618      	mov	r0, r3
 8054bc2:	f7fb fdd2 	bl	805076a <unlock_fs>
 8054bc6:	2301      	movs	r3, #1
 8054bc8:	e077      	b.n	8054cba <f_write+0x402>
			}
#endif
			fp->sect = sect;
 8054bca:	69fb      	ldr	r3, [r7, #28]
 8054bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8054bce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8054bd0:	6a3b      	ldr	r3, [r7, #32]
 8054bd2:	899b      	ldrh	r3, [r3, #12]
 8054bd4:	4618      	mov	r0, r3
 8054bd6:	69fb      	ldr	r3, [r7, #28]
 8054bd8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8054bdc:	6a3b      	ldr	r3, [r7, #32]
 8054bde:	899b      	ldrh	r3, [r3, #12]
 8054be0:	fbb2 f1f3 	udiv	r1, r2, r3
 8054be4:	fb01 f303 	mul.w	r3, r1, r3
 8054be8:	1ad3      	subs	r3, r2, r3
 8054bea:	1ac3      	subs	r3, r0, r3
 8054bec:	637b      	str	r3, [r7, #52]	; 0x34
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8054bee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8054bf0:	697b      	ldr	r3, [r7, #20]
 8054bf2:	429a      	cmp	r2, r3
 8054bf4:	d901      	bls.n	8054bfa <f_write+0x342>
 8054bf6:	697b      	ldr	r3, [r7, #20]
 8054bf8:	637b      	str	r3, [r7, #52]	; 0x34
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8054bfa:	69fb      	ldr	r3, [r7, #28]
 8054bfc:	f103 0454 	add.w	r4, r3, #84	; 0x54
 8054c00:	69fb      	ldr	r3, [r7, #28]
 8054c02:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8054c06:	6a3b      	ldr	r3, [r7, #32]
 8054c08:	899b      	ldrh	r3, [r3, #12]
 8054c0a:	b29b      	uxth	r3, r3
 8054c0c:	2200      	movs	r2, #0
 8054c0e:	603b      	str	r3, [r7, #0]
 8054c10:	607a      	str	r2, [r7, #4]
 8054c12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8054c16:	f7eb fbe3 	bl	80403e0 <__aeabi_uldivmod>
 8054c1a:	4613      	mov	r3, r2
 8054c1c:	4423      	add	r3, r4
 8054c1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8054c20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8054c22:	4618      	mov	r0, r3
 8054c24:	f7fb fd0d 	bl	8050642 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8054c28:	69fb      	ldr	r3, [r7, #28]
 8054c2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8054c2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8054c32:	b2da      	uxtb	r2, r3
 8054c34:	69fb      	ldr	r3, [r7, #28]
 8054c36:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8054c3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8054c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8054c3e:	4413      	add	r3, r2
 8054c40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8054c42:	69fb      	ldr	r3, [r7, #28]
 8054c44:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8054c48:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8054c4a:	2000      	movs	r0, #0
 8054c4c:	4688      	mov	r8, r1
 8054c4e:	4681      	mov	r9, r0
 8054c50:	eb12 0a08 	adds.w	sl, r2, r8
 8054c54:	eb43 0b09 	adc.w	fp, r3, r9
 8054c58:	69fb      	ldr	r3, [r7, #28]
 8054c5a:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38
 8054c5e:	69fb      	ldr	r3, [r7, #28]
 8054c60:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8054c64:	69fb      	ldr	r3, [r7, #28]
 8054c66:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8054c6a:	4290      	cmp	r0, r2
 8054c6c:	eb71 0403 	sbcs.w	r4, r1, r3
 8054c70:	d201      	bcs.n	8054c76 <f_write+0x3be>
 8054c72:	4610      	mov	r0, r2
 8054c74:	4619      	mov	r1, r3
 8054c76:	69fb      	ldr	r3, [r7, #28]
 8054c78:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8054c7c:	693b      	ldr	r3, [r7, #16]
 8054c7e:	681a      	ldr	r2, [r3, #0]
 8054c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8054c82:	441a      	add	r2, r3
 8054c84:	693b      	ldr	r3, [r7, #16]
 8054c86:	601a      	str	r2, [r3, #0]
 8054c88:	697a      	ldr	r2, [r7, #20]
 8054c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8054c8c:	1ad3      	subs	r3, r2, r3
 8054c8e:	617b      	str	r3, [r7, #20]
	for ( ;  btw;							/* Repeat until all data written */
 8054c90:	697b      	ldr	r3, [r7, #20]
 8054c92:	2b00      	cmp	r3, #0
 8054c94:	f47f ae64 	bne.w	8054960 <f_write+0xa8>
 8054c98:	e000      	b.n	8054c9c <f_write+0x3e4>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8054c9a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8054c9c:	69fb      	ldr	r3, [r7, #28]
 8054c9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8054ca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8054ca6:	b2da      	uxtb	r2, r3
 8054ca8:	69fb      	ldr	r3, [r7, #28]
 8054caa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 8054cae:	6a3b      	ldr	r3, [r7, #32]
 8054cb0:	2100      	movs	r1, #0
 8054cb2:	4618      	mov	r0, r3
 8054cb4:	f7fb fd59 	bl	805076a <unlock_fs>
 8054cb8:	2300      	movs	r3, #0
}
 8054cba:	4618      	mov	r0, r3
 8054cbc:	3744      	adds	r7, #68	; 0x44
 8054cbe:	46bd      	mov	sp, r7
 8054cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08054cc4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8054cc4:	b580      	push	{r7, lr}
 8054cc6:	b09c      	sub	sp, #112	; 0x70
 8054cc8:	af00      	add	r7, sp, #0
 8054cca:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8054ccc:	687b      	ldr	r3, [r7, #4]
 8054cce:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8054cd2:	4611      	mov	r1, r2
 8054cd4:	4618      	mov	r0, r3
 8054cd6:	f7ff f883 	bl	8053de0 <validate>
 8054cda:	4603      	mov	r3, r0
 8054cdc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (res == FR_OK) {
 8054ce0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8054ce4:	2b00      	cmp	r3, #0
 8054ce6:	f040 8123 	bne.w	8054f30 <f_sync+0x26c>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8054cea:	687b      	ldr	r3, [r7, #4]
 8054cec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8054cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8054cf4:	2b00      	cmp	r3, #0
 8054cf6:	f000 811b 	beq.w	8054f30 <f_sync+0x26c>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8054cfa:	687b      	ldr	r3, [r7, #4]
 8054cfc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8054d00:	b25b      	sxtb	r3, r3
 8054d02:	2b00      	cmp	r3, #0
 8054d04:	da1c      	bge.n	8054d40 <f_sync+0x7c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8054d06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8054d08:	7858      	ldrb	r0, [r3, #1]
 8054d0a:	687b      	ldr	r3, [r7, #4]
 8054d0c:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8054d10:	687b      	ldr	r3, [r7, #4]
 8054d12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8054d14:	2301      	movs	r3, #1
 8054d16:	f7fb fa71 	bl	80501fc <disk_write>
 8054d1a:	4603      	mov	r3, r0
 8054d1c:	2b00      	cmp	r3, #0
 8054d1e:	d006      	beq.n	8054d2e <f_sync+0x6a>
 8054d20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8054d22:	2101      	movs	r1, #1
 8054d24:	4618      	mov	r0, r3
 8054d26:	f7fb fd20 	bl	805076a <unlock_fs>
 8054d2a:	2301      	movs	r3, #1
 8054d2c:	e109      	b.n	8054f42 <f_sync+0x27e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8054d2e:	687b      	ldr	r3, [r7, #4]
 8054d30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8054d34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8054d38:	b2da      	uxtb	r2, r3
 8054d3a:	687b      	ldr	r3, [r7, #4]
 8054d3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8054d40:	f7f7 fdee 	bl	804c920 <get_fattime>
 8054d44:	66b8      	str	r0, [r7, #104]	; 0x68
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8054d46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8054d48:	781b      	ldrb	r3, [r3, #0]
 8054d4a:	2b04      	cmp	r3, #4
 8054d4c:	f040 80a5 	bne.w	8054e9a <f_sync+0x1d6>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 8054d50:	687b      	ldr	r3, [r7, #4]
 8054d52:	4618      	mov	r0, r3
 8054d54:	f7fc fb04 	bl	8051360 <fill_first_frag>
 8054d58:	4603      	mov	r3, r0
 8054d5a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 8054d5e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8054d62:	2b00      	cmp	r3, #0
 8054d64:	d10a      	bne.n	8054d7c <f_sync+0xb8>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8054d66:	6878      	ldr	r0, [r7, #4]
 8054d68:	687b      	ldr	r3, [r7, #4]
 8054d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8054d6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8054d70:	4619      	mov	r1, r3
 8054d72:	f7fc fb24 	bl	80513be <fill_last_frag>
 8054d76:	4603      	mov	r3, r0
 8054d78:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				}
				if (res == FR_OK) {
 8054d7c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8054d80:	2b00      	cmp	r3, #0
 8054d82:	f040 80d5 	bne.w	8054f30 <f_sync+0x26c>
					INIT_NAMBUF(fs);
 8054d86:	f44f 608c 	mov.w	r0, #1120	; 0x460
 8054d8a:	f001 f83a 	bl	8055e02 <ff_memalloc>
 8054d8e:	6638      	str	r0, [r7, #96]	; 0x60
 8054d90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8054d92:	2b00      	cmp	r3, #0
 8054d94:	d106      	bne.n	8054da4 <f_sync+0xe0>
 8054d96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8054d98:	2111      	movs	r1, #17
 8054d9a:	4618      	mov	r0, r3
 8054d9c:	f7fb fce5 	bl	805076a <unlock_fs>
 8054da0:	2311      	movs	r3, #17
 8054da2:	e0ce      	b.n	8054f42 <f_sync+0x27e>
 8054da4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8054da6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8054da8:	611a      	str	r2, [r3, #16]
 8054daa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8054dac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8054dae:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8054db2:	615a      	str	r2, [r3, #20]
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 8054db4:	687a      	ldr	r2, [r7, #4]
 8054db6:	f107 0308 	add.w	r3, r7, #8
 8054dba:	4611      	mov	r1, r2
 8054dbc:	4618      	mov	r0, r3
 8054dbe:	f7fd fad7 	bl	8052370 <load_obj_dir>
 8054dc2:	4603      	mov	r3, r0
 8054dc4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					if (res == FR_OK) {
 8054dc8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8054dcc:	2b00      	cmp	r3, #0
 8054dce:	d160      	bne.n	8054e92 <f_sync+0x1ce>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 8054dd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8054dd2:	695b      	ldr	r3, [r3, #20]
 8054dd4:	3304      	adds	r3, #4
 8054dd6:	781a      	ldrb	r2, [r3, #0]
 8054dd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8054dda:	695b      	ldr	r3, [r3, #20]
 8054ddc:	3304      	adds	r3, #4
 8054dde:	f042 0220 	orr.w	r2, r2, #32
 8054de2:	b2d2      	uxtb	r2, r2
 8054de4:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 8054de6:	687b      	ldr	r3, [r7, #4]
 8054de8:	79da      	ldrb	r2, [r3, #7]
 8054dea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8054dec:	695b      	ldr	r3, [r3, #20]
 8054dee:	3321      	adds	r3, #33	; 0x21
 8054df0:	f042 0201 	orr.w	r2, r2, #1
 8054df4:	b2d2      	uxtb	r2, r2
 8054df6:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 8054df8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8054dfa:	695b      	ldr	r3, [r3, #20]
 8054dfc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8054e00:	687b      	ldr	r3, [r7, #4]
 8054e02:	689b      	ldr	r3, [r3, #8]
 8054e04:	4619      	mov	r1, r3
 8054e06:	4610      	mov	r0, r2
 8054e08:	f7fb fb67 	bl	80504da <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 8054e0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8054e0e:	695b      	ldr	r3, [r3, #20]
 8054e10:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8054e14:	687b      	ldr	r3, [r7, #4]
 8054e16:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8054e1a:	4608      	mov	r0, r1
 8054e1c:	f7fb fb89 	bl	8050532 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 8054e20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8054e22:	695b      	ldr	r3, [r3, #20]
 8054e24:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8054e28:	687b      	ldr	r3, [r7, #4]
 8054e2a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8054e2e:	4608      	mov	r0, r1
 8054e30:	f7fb fb7f 	bl	8050532 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 8054e34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8054e36:	695b      	ldr	r3, [r3, #20]
 8054e38:	330c      	adds	r3, #12
 8054e3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8054e3c:	4618      	mov	r0, r3
 8054e3e:	f7fb fb4c 	bl	80504da <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 8054e42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8054e44:	695b      	ldr	r3, [r3, #20]
 8054e46:	3315      	adds	r3, #21
 8054e48:	2200      	movs	r2, #0
 8054e4a:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 8054e4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8054e4e:	695b      	ldr	r3, [r3, #20]
 8054e50:	3310      	adds	r3, #16
 8054e52:	2100      	movs	r1, #0
 8054e54:	4618      	mov	r0, r3
 8054e56:	f7fb fb40 	bl	80504da <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 8054e5a:	f107 0308 	add.w	r3, r7, #8
 8054e5e:	4618      	mov	r0, r3
 8054e60:	f7fd fabc 	bl	80523dc <store_xdir>
 8054e64:	4603      	mov	r3, r0
 8054e66:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						if (res == FR_OK) {
 8054e6a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8054e6e:	2b00      	cmp	r3, #0
 8054e70:	d10f      	bne.n	8054e92 <f_sync+0x1ce>
							res = sync_fs(fs);
 8054e72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8054e74:	4618      	mov	r0, r3
 8054e76:	f7fb fe71 	bl	8050b5c <sync_fs>
 8054e7a:	4603      	mov	r3, r0
 8054e7c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
							fp->flag &= (BYTE)~FA_MODIFIED;
 8054e80:	687b      	ldr	r3, [r7, #4]
 8054e82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8054e86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8054e8a:	b2da      	uxtb	r2, r3
 8054e8c:	687b      	ldr	r3, [r7, #4]
 8054e8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
						}
					}
					FREE_NAMBUF();
 8054e92:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8054e94:	f000 ffc1 	bl	8055e1a <ff_memfree>
 8054e98:	e04a      	b.n	8054f30 <f_sync+0x26c>
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8054e9a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8054e9c:	687b      	ldr	r3, [r7, #4]
 8054e9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8054ea0:	4619      	mov	r1, r3
 8054ea2:	4610      	mov	r0, r2
 8054ea4:	f7fb fe2c 	bl	8050b00 <move_window>
 8054ea8:	4603      	mov	r3, r0
 8054eaa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 8054eae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8054eb2:	2b00      	cmp	r3, #0
 8054eb4:	d13c      	bne.n	8054f30 <f_sync+0x26c>
					dir = fp->dir_ptr;
 8054eb6:	687b      	ldr	r3, [r7, #4]
 8054eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8054eba:	667b      	str	r3, [r7, #100]	; 0x64
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8054ebc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8054ebe:	330b      	adds	r3, #11
 8054ec0:	781a      	ldrb	r2, [r3, #0]
 8054ec2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8054ec4:	330b      	adds	r3, #11
 8054ec6:	f042 0220 	orr.w	r2, r2, #32
 8054eca:	b2d2      	uxtb	r2, r2
 8054ecc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8054ece:	687b      	ldr	r3, [r7, #4]
 8054ed0:	6818      	ldr	r0, [r3, #0]
 8054ed2:	687b      	ldr	r3, [r7, #4]
 8054ed4:	689b      	ldr	r3, [r3, #8]
 8054ed6:	461a      	mov	r2, r3
 8054ed8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8054eda:	f7fc fe97 	bl	8051c0c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8054ede:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8054ee0:	f103 001c 	add.w	r0, r3, #28
 8054ee4:	687b      	ldr	r3, [r7, #4]
 8054ee6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8054eea:	4613      	mov	r3, r2
 8054eec:	4619      	mov	r1, r3
 8054eee:	f7fb faf4 	bl	80504da <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8054ef2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8054ef4:	3316      	adds	r3, #22
 8054ef6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8054ef8:	4618      	mov	r0, r3
 8054efa:	f7fb faee 	bl	80504da <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8054efe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8054f00:	3312      	adds	r3, #18
 8054f02:	2100      	movs	r1, #0
 8054f04:	4618      	mov	r0, r3
 8054f06:	f7fb facd 	bl	80504a4 <st_word>
					fs->wflag = 1;
 8054f0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8054f0c:	2201      	movs	r2, #1
 8054f0e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8054f10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8054f12:	4618      	mov	r0, r3
 8054f14:	f7fb fe22 	bl	8050b5c <sync_fs>
 8054f18:	4603      	mov	r3, r0
 8054f1a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					fp->flag &= (BYTE)~FA_MODIFIED;
 8054f1e:	687b      	ldr	r3, [r7, #4]
 8054f20:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8054f24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8054f28:	b2da      	uxtb	r2, r3
 8054f2a:	687b      	ldr	r3, [r7, #4]
 8054f2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8054f30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8054f32:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8054f36:	4611      	mov	r1, r2
 8054f38:	4618      	mov	r0, r3
 8054f3a:	f7fb fc16 	bl	805076a <unlock_fs>
 8054f3e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8054f42:	4618      	mov	r0, r3
 8054f44:	3770      	adds	r7, #112	; 0x70
 8054f46:	46bd      	mov	sp, r7
 8054f48:	bd80      	pop	{r7, pc}

08054f4a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8054f4a:	b580      	push	{r7, lr}
 8054f4c:	b084      	sub	sp, #16
 8054f4e:	af00      	add	r7, sp, #0
 8054f50:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8054f52:	6878      	ldr	r0, [r7, #4]
 8054f54:	f7ff feb6 	bl	8054cc4 <f_sync>
 8054f58:	4603      	mov	r3, r0
 8054f5a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8054f5c:	7bfb      	ldrb	r3, [r7, #15]
 8054f5e:	2b00      	cmp	r3, #0
 8054f60:	d11d      	bne.n	8054f9e <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8054f62:	687b      	ldr	r3, [r7, #4]
 8054f64:	f107 0208 	add.w	r2, r7, #8
 8054f68:	4611      	mov	r1, r2
 8054f6a:	4618      	mov	r0, r3
 8054f6c:	f7fe ff38 	bl	8053de0 <validate>
 8054f70:	4603      	mov	r3, r0
 8054f72:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8054f74:	7bfb      	ldrb	r3, [r7, #15]
 8054f76:	2b00      	cmp	r3, #0
 8054f78:	d111      	bne.n	8054f9e <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8054f7a:	687b      	ldr	r3, [r7, #4]
 8054f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8054f7e:	4618      	mov	r0, r3
 8054f80:	f7fb fd1a 	bl	80509b8 <dec_lock>
 8054f84:	4603      	mov	r3, r0
 8054f86:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8054f88:	7bfb      	ldrb	r3, [r7, #15]
 8054f8a:	2b00      	cmp	r3, #0
 8054f8c:	d102      	bne.n	8054f94 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8054f8e:	687b      	ldr	r3, [r7, #4]
 8054f90:	2200      	movs	r2, #0
 8054f92:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8054f94:	68bb      	ldr	r3, [r7, #8]
 8054f96:	2100      	movs	r1, #0
 8054f98:	4618      	mov	r0, r3
 8054f9a:	f7fb fbe6 	bl	805076a <unlock_fs>
#endif
		}
	}
	return res;
 8054f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8054fa0:	4618      	mov	r0, r3
 8054fa2:	3710      	adds	r7, #16
 8054fa4:	46bd      	mov	sp, r7
 8054fa6:	bd80      	pop	{r7, pc}

08054fa8 <f_getcwd>:
#if _FS_RPATH >= 2
FRESULT f_getcwd (
	TCHAR* buff,	/* Pointer to the directory path */
	UINT len		/* Size of path */
)
{
 8054fa8:	b580      	push	{r7, lr}
 8054faa:	b0e6      	sub	sp, #408	; 0x198
 8054fac:	af00      	add	r7, sp, #0
 8054fae:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8054fb2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8054fb6:	6018      	str	r0, [r3, #0]
 8054fb8:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8054fbc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8054fc0:	6019      	str	r1, [r3, #0]
	TCHAR *tp;
	FILINFO fno;
	DEF_NAMBUF


	*buff = 0;
 8054fc2:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8054fc6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8054fca:	681b      	ldr	r3, [r3, #0]
 8054fcc:	2200      	movs	r2, #0
 8054fce:	701a      	strb	r2, [r3, #0]
	/* Get logical drive */
	res = find_volume((const TCHAR**)&buff, &fs, 0);	/* Get current volume */
 8054fd0:	f507 7196 	add.w	r1, r7, #300	; 0x12c
 8054fd4:	1d3b      	adds	r3, r7, #4
 8054fd6:	2200      	movs	r2, #0
 8054fd8:	4618      	mov	r0, r3
 8054fda:	f7fe fb65 	bl	80536a8 <find_volume>
 8054fde:	4603      	mov	r3, r0
 8054fe0:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
	if (res == FR_OK) {
 8054fe4:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8054fe8:	2b00      	cmp	r3, #0
 8054fea:	f040 8148 	bne.w	805527e <f_getcwd+0x2d6>
		dj.obj.fs = fs;
 8054fee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8054ff2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		INIT_NAMBUF(fs);
 8054ff6:	f44f 608c 	mov.w	r0, #1120	; 0x460
 8054ffa:	f000 ff02 	bl	8055e02 <ff_memalloc>
 8054ffe:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8055002:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8055006:	2b00      	cmp	r3, #0
 8055008:	d107      	bne.n	805501a <f_getcwd+0x72>
 805500a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 805500e:	2111      	movs	r1, #17
 8055010:	4618      	mov	r0, r3
 8055012:	f7fb fbaa 	bl	805076a <unlock_fs>
 8055016:	2311      	movs	r3, #17
 8055018:	e13b      	b.n	8055292 <f_getcwd+0x2ea>
 805501a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 805501e:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8055022:	611a      	str	r2, [r3, #16]
 8055024:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8055028:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 805502c:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8055030:	615a      	str	r2, [r3, #20]
		i = len;			/* Bottom of buffer (directory stack base) */
 8055032:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8055036:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 805503a:	681b      	ldr	r3, [r3, #0]
 805503c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* (Cannot do getcwd on exFAT and returns root path) */
 8055040:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8055044:	781b      	ldrb	r3, [r3, #0]
 8055046:	2b04      	cmp	r3, #4
 8055048:	f000 80da 	beq.w	8055200 <f_getcwd+0x258>
			dj.obj.sclust = fs->cdir;				/* Start to follow upper directory from current directory */
 805504c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8055050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8055052:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
			while ((ccl = dj.obj.sclust) != 0) {	/* Repeat while current directory is a sub-directory */
 8055056:	e0c2      	b.n	80551de <f_getcwd+0x236>
				res = dir_sdi(&dj, 1 * SZDIRE);	/* Get parent directory */
 8055058:	f507 7398 	add.w	r3, r7, #304	; 0x130
 805505c:	2120      	movs	r1, #32
 805505e:	4618      	mov	r0, r3
 8055060:	f7fc fbdf 	bl	8051822 <dir_sdi>
 8055064:	4603      	mov	r3, r0
 8055066:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
				if (res != FR_OK) break;
 805506a:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 805506e:	2b00      	cmp	r3, #0
 8055070:	f040 80bf 	bne.w	80551f2 <f_getcwd+0x24a>
				res = move_window(fs, dj.sect);
 8055074:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8055078:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 805507c:	4611      	mov	r1, r2
 805507e:	4618      	mov	r0, r3
 8055080:	f7fb fd3e 	bl	8050b00 <move_window>
 8055084:	4603      	mov	r3, r0
 8055086:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
				if (res != FR_OK) break;
 805508a:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 805508e:	2b00      	cmp	r3, #0
 8055090:	f040 80b1 	bne.w	80551f6 <f_getcwd+0x24e>
				dj.obj.sclust = ld_clust(fs, dj.dir);	/* Goto parent directory */
 8055094:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8055098:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 805509c:	4611      	mov	r1, r2
 805509e:	4618      	mov	r0, r3
 80550a0:	f7fc fd95 	bl	8051bce <ld_clust>
 80550a4:	4603      	mov	r3, r0
 80550a6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
				res = dir_sdi(&dj, 0);
 80550aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80550ae:	2100      	movs	r1, #0
 80550b0:	4618      	mov	r0, r3
 80550b2:	f7fc fbb6 	bl	8051822 <dir_sdi>
 80550b6:	4603      	mov	r3, r0
 80550b8:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
				if (res != FR_OK) break;
 80550bc:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 80550c0:	2b00      	cmp	r3, #0
 80550c2:	f040 809a 	bne.w	80551fa <f_getcwd+0x252>
				do {							/* Find the entry links to the child directory */
					res = dir_read(&dj, 0);
 80550c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80550ca:	2100      	movs	r1, #0
 80550cc:	4618      	mov	r0, r3
 80550ce:	f7fd fa47 	bl	8052560 <dir_read>
 80550d2:	4603      	mov	r3, r0
 80550d4:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
					if (res != FR_OK) break;
 80550d8:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 80550dc:	2b00      	cmp	r3, #0
 80550de:	d11a      	bne.n	8055116 <f_getcwd+0x16e>
					if (ccl == ld_clust(fs, dj.dir)) break;	/* Found the entry */
 80550e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80550e4:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 80550e8:	4611      	mov	r1, r2
 80550ea:	4618      	mov	r0, r3
 80550ec:	f7fc fd6f 	bl	8051bce <ld_clust>
 80550f0:	4602      	mov	r2, r0
 80550f2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80550f6:	4293      	cmp	r3, r2
 80550f8:	d00f      	beq.n	805511a <f_getcwd+0x172>
					res = dir_next(&dj, 0);
 80550fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80550fe:	2100      	movs	r1, #0
 8055100:	4618      	mov	r0, r3
 8055102:	f7fc fc22 	bl	805194a <dir_next>
 8055106:	4603      	mov	r3, r0
 8055108:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
				} while (res == FR_OK);
 805510c:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8055110:	2b00      	cmp	r3, #0
 8055112:	d0d8      	beq.n	80550c6 <f_getcwd+0x11e>
 8055114:	e002      	b.n	805511c <f_getcwd+0x174>
					if (res != FR_OK) break;
 8055116:	bf00      	nop
 8055118:	e000      	b.n	805511c <f_getcwd+0x174>
					if (ccl == ld_clust(fs, dj.dir)) break;	/* Found the entry */
 805511a:	bf00      	nop
				if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
 805511c:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8055120:	2b04      	cmp	r3, #4
 8055122:	d102      	bne.n	805512a <f_getcwd+0x182>
 8055124:	2302      	movs	r3, #2
 8055126:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
				if (res != FR_OK) break;
 805512a:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 805512e:	2b00      	cmp	r3, #0
 8055130:	d165      	bne.n	80551fe <f_getcwd+0x256>
				get_fileinfo(&dj, &fno);		/* Get the directory name and push it to the buffer */
 8055132:	f107 0208 	add.w	r2, r7, #8
 8055136:	f507 7398 	add.w	r3, r7, #304	; 0x130
 805513a:	4611      	mov	r1, r2
 805513c:	4618      	mov	r0, r3
 805513e:	f7fd fe01 	bl	8052d44 <get_fileinfo>
				for (n = 0; fno.fname[n]; n++) ;
 8055142:	2300      	movs	r3, #0
 8055144:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8055148:	e004      	b.n	8055154 <f_getcwd+0x1ac>
 805514a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 805514e:	3301      	adds	r3, #1
 8055150:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8055154:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8055158:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 805515c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8055160:	4413      	add	r3, r2
 8055162:	331a      	adds	r3, #26
 8055164:	781b      	ldrb	r3, [r3, #0]
 8055166:	2b00      	cmp	r3, #0
 8055168:	d1ef      	bne.n	805514a <f_getcwd+0x1a2>
				if (i < n + 3) {
 805516a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 805516e:	3303      	adds	r3, #3
 8055170:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8055174:	429a      	cmp	r2, r3
 8055176:	d21f      	bcs.n	80551b8 <f_getcwd+0x210>
					res = FR_NOT_ENOUGH_CORE; break;
 8055178:	2311      	movs	r3, #17
 805517a:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
 805517e:	e03f      	b.n	8055200 <f_getcwd+0x258>
				}
				while (n) buff[--i] = fno.fname[--n];
 8055180:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8055184:	3b01      	subs	r3, #1
 8055186:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 805518a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 805518e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8055192:	681a      	ldr	r2, [r3, #0]
 8055194:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8055198:	3b01      	subs	r3, #1
 805519a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 805519e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80551a2:	4413      	add	r3, r2
 80551a4:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 80551a8:	f5a2 71c8 	sub.w	r1, r2, #400	; 0x190
 80551ac:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80551b0:	440a      	add	r2, r1
 80551b2:	321a      	adds	r2, #26
 80551b4:	7812      	ldrb	r2, [r2, #0]
 80551b6:	701a      	strb	r2, [r3, #0]
 80551b8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80551bc:	2b00      	cmp	r3, #0
 80551be:	d1df      	bne.n	8055180 <f_getcwd+0x1d8>
				buff[--i] = '/';
 80551c0:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80551c4:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80551c8:	681a      	ldr	r2, [r3, #0]
 80551ca:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80551ce:	3b01      	subs	r3, #1
 80551d0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 80551d4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80551d8:	4413      	add	r3, r2
 80551da:	222f      	movs	r2, #47	; 0x2f
 80551dc:	701a      	strb	r2, [r3, #0]
			while ((ccl = dj.obj.sclust) != 0) {	/* Repeat while current directory is a sub-directory */
 80551de:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80551e2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80551e6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80551ea:	2b00      	cmp	r3, #0
 80551ec:	f47f af34 	bne.w	8055058 <f_getcwd+0xb0>
 80551f0:	e006      	b.n	8055200 <f_getcwd+0x258>
				if (res != FR_OK) break;
 80551f2:	bf00      	nop
 80551f4:	e004      	b.n	8055200 <f_getcwd+0x258>
				if (res != FR_OK) break;
 80551f6:	bf00      	nop
 80551f8:	e002      	b.n	8055200 <f_getcwd+0x258>
				if (res != FR_OK) break;
 80551fa:	bf00      	nop
 80551fc:	e000      	b.n	8055200 <f_getcwd+0x258>
				if (res != FR_OK) break;
 80551fe:	bf00      	nop
			}
		}
		tp = buff;
 8055200:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8055204:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8055208:	681b      	ldr	r3, [r3, #0]
 805520a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
		if (res == FR_OK) {
 805520e:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8055212:	2b00      	cmp	r3, #0
 8055214:	d12b      	bne.n	805526e <f_getcwd+0x2c6>
#if _VOLUMES >= 2
			*tp++ = '0' + CurrVol;			/* Put drive number */
			*tp++ = ':';
#endif
			if (i == len) {					/* Root-directory */
 8055216:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 805521a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 805521e:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8055222:	681b      	ldr	r3, [r3, #0]
 8055224:	429a      	cmp	r2, r3
 8055226:	d107      	bne.n	8055238 <f_getcwd+0x290>
				*tp++ = '/';
 8055228:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 805522c:	1c5a      	adds	r2, r3, #1
 805522e:	f8c7 2188 	str.w	r2, [r7, #392]	; 0x188
 8055232:	222f      	movs	r2, #47	; 0x2f
 8055234:	701a      	strb	r2, [r3, #0]
 8055236:	e01a      	b.n	805526e <f_getcwd+0x2c6>
			} else {						/* Sub-directroy */
				do		/* Add stacked path str */
					*tp++ = buff[i++];
 8055238:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 805523c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8055240:	681a      	ldr	r2, [r3, #0]
 8055242:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8055246:	1c59      	adds	r1, r3, #1
 8055248:	f8c7 1190 	str.w	r1, [r7, #400]	; 0x190
 805524c:	441a      	add	r2, r3
 805524e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8055252:	1c59      	adds	r1, r3, #1
 8055254:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 8055258:	7812      	ldrb	r2, [r2, #0]
 805525a:	701a      	strb	r2, [r3, #0]
				while (i < len);
 805525c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8055260:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8055264:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8055268:	681b      	ldr	r3, [r3, #0]
 805526a:	429a      	cmp	r2, r3
 805526c:	d3e4      	bcc.n	8055238 <f_getcwd+0x290>
			}
		}
		*tp = 0;
 805526e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8055272:	2200      	movs	r2, #0
 8055274:	701a      	strb	r2, [r3, #0]
		FREE_NAMBUF();
 8055276:	f8d7 0184 	ldr.w	r0, [r7, #388]	; 0x184
 805527a:	f000 fdce 	bl	8055e1a <ff_memfree>
	}

	LEAVE_FF(fs, res);
 805527e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8055282:	f897 2197 	ldrb.w	r2, [r7, #407]	; 0x197
 8055286:	4611      	mov	r1, r2
 8055288:	4618      	mov	r0, r3
 805528a:	f7fb fa6e 	bl	805076a <unlock_fs>
 805528e:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
}
 8055292:	4618      	mov	r0, r3
 8055294:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 8055298:	46bd      	mov	sp, r7
 805529a:	bd80      	pop	{r7, pc}

0805529c <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 805529c:	b580      	push	{r7, lr}
 805529e:	b086      	sub	sp, #24
 80552a0:	af00      	add	r7, sp, #0
 80552a2:	6078      	str	r0, [r7, #4]
 80552a4:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80552a6:	687b      	ldr	r3, [r7, #4]
 80552a8:	2b00      	cmp	r3, #0
 80552aa:	d101      	bne.n	80552b0 <f_opendir+0x14>
 80552ac:	2309      	movs	r3, #9
 80552ae:	e0ba      	b.n	8055426 <f_opendir+0x18a>

	/* Get logical drive */
	obj = &dp->obj;
 80552b0:	687b      	ldr	r3, [r7, #4]
 80552b2:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 80552b4:	f107 0108 	add.w	r1, r7, #8
 80552b8:	463b      	mov	r3, r7
 80552ba:	2200      	movs	r2, #0
 80552bc:	4618      	mov	r0, r3
 80552be:	f7fe f9f3 	bl	80536a8 <find_volume>
 80552c2:	4603      	mov	r3, r0
 80552c4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80552c6:	7dfb      	ldrb	r3, [r7, #23]
 80552c8:	2b00      	cmp	r3, #0
 80552ca:	f040 809f 	bne.w	805540c <f_opendir+0x170>
		obj->fs = fs;
 80552ce:	68ba      	ldr	r2, [r7, #8]
 80552d0:	693b      	ldr	r3, [r7, #16]
 80552d2:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 80552d4:	f44f 608c 	mov.w	r0, #1120	; 0x460
 80552d8:	f000 fd93 	bl	8055e02 <ff_memalloc>
 80552dc:	60f8      	str	r0, [r7, #12]
 80552de:	68fb      	ldr	r3, [r7, #12]
 80552e0:	2b00      	cmp	r3, #0
 80552e2:	d106      	bne.n	80552f2 <f_opendir+0x56>
 80552e4:	68bb      	ldr	r3, [r7, #8]
 80552e6:	2111      	movs	r1, #17
 80552e8:	4618      	mov	r0, r3
 80552ea:	f7fb fa3e 	bl	805076a <unlock_fs>
 80552ee:	2311      	movs	r3, #17
 80552f0:	e099      	b.n	8055426 <f_opendir+0x18a>
 80552f2:	68bb      	ldr	r3, [r7, #8]
 80552f4:	68fa      	ldr	r2, [r7, #12]
 80552f6:	611a      	str	r2, [r3, #16]
 80552f8:	68bb      	ldr	r3, [r7, #8]
 80552fa:	68fa      	ldr	r2, [r7, #12]
 80552fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8055300:	615a      	str	r2, [r3, #20]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8055302:	683b      	ldr	r3, [r7, #0]
 8055304:	4619      	mov	r1, r3
 8055306:	6878      	ldr	r0, [r7, #4]
 8055308:	f7fe f80e 	bl	8053328 <follow_path>
 805530c:	4603      	mov	r3, r0
 805530e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8055310:	7dfb      	ldrb	r3, [r7, #23]
 8055312:	2b00      	cmp	r3, #0
 8055314:	d172      	bne.n	80553fc <f_opendir+0x160>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8055316:	687b      	ldr	r3, [r7, #4]
 8055318:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 805531c:	b25b      	sxtb	r3, r3
 805531e:	2b00      	cmp	r3, #0
 8055320:	db47      	blt.n	80553b2 <f_opendir+0x116>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8055322:	693b      	ldr	r3, [r7, #16]
 8055324:	799b      	ldrb	r3, [r3, #6]
 8055326:	f003 0310 	and.w	r3, r3, #16
 805532a:	2b00      	cmp	r3, #0
 805532c:	d03f      	beq.n	80553ae <f_opendir+0x112>
#if _FS_EXFAT
					if (fs->fs_type == FS_EXFAT) {
 805532e:	68bb      	ldr	r3, [r7, #8]
 8055330:	781b      	ldrb	r3, [r3, #0]
 8055332:	2b04      	cmp	r3, #4
 8055334:	d130      	bne.n	8055398 <f_opendir+0xfc>
						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
 8055336:	693b      	ldr	r3, [r7, #16]
 8055338:	689a      	ldr	r2, [r3, #8]
 805533a:	693b      	ldr	r3, [r7, #16]
 805533c:	621a      	str	r2, [r3, #32]
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 805533e:	693b      	ldr	r3, [r7, #16]
 8055340:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8055344:	4613      	mov	r3, r2
 8055346:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 805534a:	693a      	ldr	r2, [r7, #16]
 805534c:	79d2      	ldrb	r2, [r2, #7]
 805534e:	431a      	orrs	r2, r3
 8055350:	693b      	ldr	r3, [r7, #16]
 8055352:	625a      	str	r2, [r3, #36]	; 0x24
						obj->c_ofs = dp->blk_ofs;
 8055354:	687b      	ldr	r3, [r7, #4]
 8055356:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8055358:	693b      	ldr	r3, [r7, #16]
 805535a:	629a      	str	r2, [r3, #40]	; 0x28
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 805535c:	68bb      	ldr	r3, [r7, #8]
 805535e:	695b      	ldr	r3, [r3, #20]
 8055360:	3334      	adds	r3, #52	; 0x34
 8055362:	4618      	mov	r0, r3
 8055364:	f7fa ffa0 	bl	80502a8 <ld_dword>
 8055368:	4602      	mov	r2, r0
 805536a:	693b      	ldr	r3, [r7, #16]
 805536c:	609a      	str	r2, [r3, #8]
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 805536e:	68bb      	ldr	r3, [r7, #8]
 8055370:	695b      	ldr	r3, [r3, #20]
 8055372:	3338      	adds	r3, #56	; 0x38
 8055374:	4618      	mov	r0, r3
 8055376:	f7fa ffba 	bl	80502ee <ld_qword>
 805537a:	4602      	mov	r2, r0
 805537c:	460b      	mov	r3, r1
 805537e:	6939      	ldr	r1, [r7, #16]
 8055380:	e9c1 2304 	strd	r2, r3, [r1, #16]
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8055384:	68bb      	ldr	r3, [r7, #8]
 8055386:	695b      	ldr	r3, [r3, #20]
 8055388:	3321      	adds	r3, #33	; 0x21
 805538a:	781b      	ldrb	r3, [r3, #0]
 805538c:	f003 0302 	and.w	r3, r3, #2
 8055390:	b2da      	uxtb	r2, r3
 8055392:	693b      	ldr	r3, [r7, #16]
 8055394:	71da      	strb	r2, [r3, #7]
 8055396:	e00c      	b.n	80553b2 <f_opendir+0x116>
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8055398:	68ba      	ldr	r2, [r7, #8]
 805539a:	687b      	ldr	r3, [r7, #4]
 805539c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 805539e:	4619      	mov	r1, r3
 80553a0:	4610      	mov	r0, r2
 80553a2:	f7fc fc14 	bl	8051bce <ld_clust>
 80553a6:	4602      	mov	r2, r0
 80553a8:	693b      	ldr	r3, [r7, #16]
 80553aa:	609a      	str	r2, [r3, #8]
 80553ac:	e001      	b.n	80553b2 <f_opendir+0x116>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80553ae:	2305      	movs	r3, #5
 80553b0:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80553b2:	7dfb      	ldrb	r3, [r7, #23]
 80553b4:	2b00      	cmp	r3, #0
 80553b6:	d121      	bne.n	80553fc <f_opendir+0x160>
				obj->id = fs->id;
 80553b8:	68bb      	ldr	r3, [r7, #8]
 80553ba:	88da      	ldrh	r2, [r3, #6]
 80553bc:	693b      	ldr	r3, [r7, #16]
 80553be:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80553c0:	2100      	movs	r1, #0
 80553c2:	6878      	ldr	r0, [r7, #4]
 80553c4:	f7fc fa2d 	bl	8051822 <dir_sdi>
 80553c8:	4603      	mov	r3, r0
 80553ca:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80553cc:	7dfb      	ldrb	r3, [r7, #23]
 80553ce:	2b00      	cmp	r3, #0
 80553d0:	d114      	bne.n	80553fc <f_opendir+0x160>
					if (obj->sclust) {
 80553d2:	693b      	ldr	r3, [r7, #16]
 80553d4:	689b      	ldr	r3, [r3, #8]
 80553d6:	2b00      	cmp	r3, #0
 80553d8:	d00d      	beq.n	80553f6 <f_opendir+0x15a>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80553da:	2100      	movs	r1, #0
 80553dc:	6878      	ldr	r0, [r7, #4]
 80553de:	f7fb fa5d 	bl	805089c <inc_lock>
 80553e2:	4602      	mov	r2, r0
 80553e4:	693b      	ldr	r3, [r7, #16]
 80553e6:	62da      	str	r2, [r3, #44]	; 0x2c
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80553e8:	693b      	ldr	r3, [r7, #16]
 80553ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80553ec:	2b00      	cmp	r3, #0
 80553ee:	d105      	bne.n	80553fc <f_opendir+0x160>
 80553f0:	2312      	movs	r3, #18
 80553f2:	75fb      	strb	r3, [r7, #23]
 80553f4:	e002      	b.n	80553fc <f_opendir+0x160>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80553f6:	693b      	ldr	r3, [r7, #16]
 80553f8:	2200      	movs	r2, #0
 80553fa:	62da      	str	r2, [r3, #44]	; 0x2c
					}
				}
#endif
			}
		}
		FREE_NAMBUF();
 80553fc:	68f8      	ldr	r0, [r7, #12]
 80553fe:	f000 fd0c 	bl	8055e1a <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8055402:	7dfb      	ldrb	r3, [r7, #23]
 8055404:	2b04      	cmp	r3, #4
 8055406:	d101      	bne.n	805540c <f_opendir+0x170>
 8055408:	2305      	movs	r3, #5
 805540a:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 805540c:	7dfb      	ldrb	r3, [r7, #23]
 805540e:	2b00      	cmp	r3, #0
 8055410:	d002      	beq.n	8055418 <f_opendir+0x17c>
 8055412:	693b      	ldr	r3, [r7, #16]
 8055414:	2200      	movs	r2, #0
 8055416:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8055418:	68bb      	ldr	r3, [r7, #8]
 805541a:	7dfa      	ldrb	r2, [r7, #23]
 805541c:	4611      	mov	r1, r2
 805541e:	4618      	mov	r0, r3
 8055420:	f7fb f9a3 	bl	805076a <unlock_fs>
 8055424:	7dfb      	ldrb	r3, [r7, #23]
}
 8055426:	4618      	mov	r0, r3
 8055428:	3718      	adds	r7, #24
 805542a:	46bd      	mov	sp, r7
 805542c:	bd80      	pop	{r7, pc}

0805542e <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 805542e:	b580      	push	{r7, lr}
 8055430:	b084      	sub	sp, #16
 8055432:	af00      	add	r7, sp, #0
 8055434:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8055436:	687b      	ldr	r3, [r7, #4]
 8055438:	f107 0208 	add.w	r2, r7, #8
 805543c:	4611      	mov	r1, r2
 805543e:	4618      	mov	r0, r3
 8055440:	f7fe fcce 	bl	8053de0 <validate>
 8055444:	4603      	mov	r3, r0
 8055446:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8055448:	7bfb      	ldrb	r3, [r7, #15]
 805544a:	2b00      	cmp	r3, #0
 805544c:	d115      	bne.n	805547a <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 805544e:	687b      	ldr	r3, [r7, #4]
 8055450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8055452:	2b00      	cmp	r3, #0
 8055454:	d006      	beq.n	8055464 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8055456:	687b      	ldr	r3, [r7, #4]
 8055458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 805545a:	4618      	mov	r0, r3
 805545c:	f7fb faac 	bl	80509b8 <dec_lock>
 8055460:	4603      	mov	r3, r0
 8055462:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8055464:	7bfb      	ldrb	r3, [r7, #15]
 8055466:	2b00      	cmp	r3, #0
 8055468:	d102      	bne.n	8055470 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 805546a:	687b      	ldr	r3, [r7, #4]
 805546c:	2200      	movs	r2, #0
 805546e:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 8055470:	68bb      	ldr	r3, [r7, #8]
 8055472:	2100      	movs	r1, #0
 8055474:	4618      	mov	r0, r3
 8055476:	f7fb f978 	bl	805076a <unlock_fs>
#endif
	}
	return res;
 805547a:	7bfb      	ldrb	r3, [r7, #15]
}
 805547c:	4618      	mov	r0, r3
 805547e:	3710      	adds	r7, #16
 8055480:	46bd      	mov	sp, r7
 8055482:	bd80      	pop	{r7, pc}

08055484 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8055484:	b580      	push	{r7, lr}
 8055486:	b086      	sub	sp, #24
 8055488:	af00      	add	r7, sp, #0
 805548a:	6078      	str	r0, [r7, #4]
 805548c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 805548e:	687b      	ldr	r3, [r7, #4]
 8055490:	f107 020c 	add.w	r2, r7, #12
 8055494:	4611      	mov	r1, r2
 8055496:	4618      	mov	r0, r3
 8055498:	f7fe fca2 	bl	8053de0 <validate>
 805549c:	4603      	mov	r3, r0
 805549e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80554a0:	7dfb      	ldrb	r3, [r7, #23]
 80554a2:	2b00      	cmp	r3, #0
 80554a4:	d140      	bne.n	8055528 <f_readdir+0xa4>
		if (!fno) {
 80554a6:	683b      	ldr	r3, [r7, #0]
 80554a8:	2b00      	cmp	r3, #0
 80554aa:	d106      	bne.n	80554ba <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80554ac:	2100      	movs	r1, #0
 80554ae:	6878      	ldr	r0, [r7, #4]
 80554b0:	f7fc f9b7 	bl	8051822 <dir_sdi>
 80554b4:	4603      	mov	r3, r0
 80554b6:	75fb      	strb	r3, [r7, #23]
 80554b8:	e036      	b.n	8055528 <f_readdir+0xa4>
		} else {
			INIT_NAMBUF(fs);
 80554ba:	f44f 608c 	mov.w	r0, #1120	; 0x460
 80554be:	f000 fca0 	bl	8055e02 <ff_memalloc>
 80554c2:	6138      	str	r0, [r7, #16]
 80554c4:	693b      	ldr	r3, [r7, #16]
 80554c6:	2b00      	cmp	r3, #0
 80554c8:	d106      	bne.n	80554d8 <f_readdir+0x54>
 80554ca:	68fb      	ldr	r3, [r7, #12]
 80554cc:	2111      	movs	r1, #17
 80554ce:	4618      	mov	r0, r3
 80554d0:	f7fb f94b 	bl	805076a <unlock_fs>
 80554d4:	2311      	movs	r3, #17
 80554d6:	e02e      	b.n	8055536 <f_readdir+0xb2>
 80554d8:	68fb      	ldr	r3, [r7, #12]
 80554da:	693a      	ldr	r2, [r7, #16]
 80554dc:	611a      	str	r2, [r3, #16]
 80554de:	68fb      	ldr	r3, [r7, #12]
 80554e0:	693a      	ldr	r2, [r7, #16]
 80554e2:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80554e6:	615a      	str	r2, [r3, #20]
			res = dir_read(dp, 0);			/* Read an item */
 80554e8:	2100      	movs	r1, #0
 80554ea:	6878      	ldr	r0, [r7, #4]
 80554ec:	f7fd f838 	bl	8052560 <dir_read>
 80554f0:	4603      	mov	r3, r0
 80554f2:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80554f4:	7dfb      	ldrb	r3, [r7, #23]
 80554f6:	2b04      	cmp	r3, #4
 80554f8:	d101      	bne.n	80554fe <f_readdir+0x7a>
 80554fa:	2300      	movs	r3, #0
 80554fc:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {				/* A valid entry is found */
 80554fe:	7dfb      	ldrb	r3, [r7, #23]
 8055500:	2b00      	cmp	r3, #0
 8055502:	d10e      	bne.n	8055522 <f_readdir+0x9e>
				get_fileinfo(dp, fno);		/* Get the object information */
 8055504:	6839      	ldr	r1, [r7, #0]
 8055506:	6878      	ldr	r0, [r7, #4]
 8055508:	f7fd fc1c 	bl	8052d44 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 805550c:	2100      	movs	r1, #0
 805550e:	6878      	ldr	r0, [r7, #4]
 8055510:	f7fc fa1b 	bl	805194a <dir_next>
 8055514:	4603      	mov	r3, r0
 8055516:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8055518:	7dfb      	ldrb	r3, [r7, #23]
 805551a:	2b04      	cmp	r3, #4
 805551c:	d101      	bne.n	8055522 <f_readdir+0x9e>
 805551e:	2300      	movs	r3, #0
 8055520:	75fb      	strb	r3, [r7, #23]
			}
			FREE_NAMBUF();
 8055522:	6938      	ldr	r0, [r7, #16]
 8055524:	f000 fc79 	bl	8055e1a <ff_memfree>
		}
	}
	LEAVE_FF(fs, res);
 8055528:	68fb      	ldr	r3, [r7, #12]
 805552a:	7dfa      	ldrb	r2, [r7, #23]
 805552c:	4611      	mov	r1, r2
 805552e:	4618      	mov	r0, r3
 8055530:	f7fb f91b 	bl	805076a <unlock_fs>
 8055534:	7dfb      	ldrb	r3, [r7, #23]
}
 8055536:	4618      	mov	r0, r3
 8055538:	3718      	adds	r7, #24
 805553a:	46bd      	mov	sp, r7
 805553c:	bd80      	pop	{r7, pc}

0805553e <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 805553e:	b580      	push	{r7, lr}
 8055540:	b098      	sub	sp, #96	; 0x60
 8055542:	af00      	add	r7, sp, #0
 8055544:	6078      	str	r0, [r7, #4]
 8055546:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8055548:	f107 0108 	add.w	r1, r7, #8
 805554c:	1d3b      	adds	r3, r7, #4
 805554e:	2200      	movs	r2, #0
 8055550:	4618      	mov	r0, r3
 8055552:	f7fe f8a9 	bl	80536a8 <find_volume>
 8055556:	4603      	mov	r3, r0
 8055558:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 805555c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8055560:	2b00      	cmp	r3, #0
 8055562:	d139      	bne.n	80555d8 <f_stat+0x9a>
		INIT_NAMBUF(dj.obj.fs);
 8055564:	f44f 608c 	mov.w	r0, #1120	; 0x460
 8055568:	f000 fc4b 	bl	8055e02 <ff_memalloc>
 805556c:	65b8      	str	r0, [r7, #88]	; 0x58
 805556e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8055570:	2b00      	cmp	r3, #0
 8055572:	d106      	bne.n	8055582 <f_stat+0x44>
 8055574:	68bb      	ldr	r3, [r7, #8]
 8055576:	2111      	movs	r1, #17
 8055578:	4618      	mov	r0, r3
 805557a:	f7fb f8f6 	bl	805076a <unlock_fs>
 805557e:	2311      	movs	r3, #17
 8055580:	e033      	b.n	80555ea <f_stat+0xac>
 8055582:	68bb      	ldr	r3, [r7, #8]
 8055584:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8055586:	611a      	str	r2, [r3, #16]
 8055588:	68bb      	ldr	r3, [r7, #8]
 805558a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 805558c:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8055590:	615a      	str	r2, [r3, #20]
		res = follow_path(&dj, path);	/* Follow the file path */
 8055592:	687a      	ldr	r2, [r7, #4]
 8055594:	f107 0308 	add.w	r3, r7, #8
 8055598:	4611      	mov	r1, r2
 805559a:	4618      	mov	r0, r3
 805559c:	f7fd fec4 	bl	8053328 <follow_path>
 80555a0:	4603      	mov	r3, r0
 80555a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) {				/* Follow completed */
 80555a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80555aa:	2b00      	cmp	r3, #0
 80555ac:	d111      	bne.n	80555d2 <f_stat+0x94>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 80555ae:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80555b2:	b25b      	sxtb	r3, r3
 80555b4:	2b00      	cmp	r3, #0
 80555b6:	da03      	bge.n	80555c0 <f_stat+0x82>
				res = FR_INVALID_NAME;
 80555b8:	2306      	movs	r3, #6
 80555ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80555be:	e008      	b.n	80555d2 <f_stat+0x94>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 80555c0:	683b      	ldr	r3, [r7, #0]
 80555c2:	2b00      	cmp	r3, #0
 80555c4:	d005      	beq.n	80555d2 <f_stat+0x94>
 80555c6:	f107 0308 	add.w	r3, r7, #8
 80555ca:	6839      	ldr	r1, [r7, #0]
 80555cc:	4618      	mov	r0, r3
 80555ce:	f7fd fbb9 	bl	8052d44 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
 80555d2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80555d4:	f000 fc21 	bl	8055e1a <ff_memfree>
	}

	LEAVE_FF(dj.obj.fs, res);
 80555d8:	68bb      	ldr	r3, [r7, #8]
 80555da:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80555de:	4611      	mov	r1, r2
 80555e0:	4618      	mov	r0, r3
 80555e2:	f7fb f8c2 	bl	805076a <unlock_fs>
 80555e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80555ea:	4618      	mov	r0, r3
 80555ec:	3760      	adds	r7, #96	; 0x60
 80555ee:	46bd      	mov	sp, r7
 80555f0:	bd80      	pop	{r7, pc}

080555f2 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80555f2:	b580      	push	{r7, lr}
 80555f4:	b0bc      	sub	sp, #240	; 0xf0
 80555f6:	af00      	add	r7, sp, #0
 80555f8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 80555fa:	2300      	movs	r3, #0
 80555fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8055600:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8055604:	1d3b      	adds	r3, r7, #4
 8055606:	2202      	movs	r2, #2
 8055608:	4618      	mov	r0, r3
 805560a:	f7fe f84d 	bl	80536a8 <find_volume>
 805560e:	4603      	mov	r3, r0
 8055610:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
	dj.obj.fs = fs;
 8055614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8055616:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	if (res == FR_OK) {
 805561a:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 805561e:	2b00      	cmp	r3, #0
 8055620:	f040 80f9 	bne.w	8055816 <f_unlink+0x224>
		INIT_NAMBUF(fs);
 8055624:	f44f 608c 	mov.w	r0, #1120	; 0x460
 8055628:	f000 fbeb 	bl	8055e02 <ff_memalloc>
 805562c:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
 8055630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8055634:	2b00      	cmp	r3, #0
 8055636:	d106      	bne.n	8055646 <f_unlink+0x54>
 8055638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 805563a:	2111      	movs	r1, #17
 805563c:	4618      	mov	r0, r3
 805563e:	f7fb f894 	bl	805076a <unlock_fs>
 8055642:	2311      	movs	r3, #17
 8055644:	e0f0      	b.n	8055828 <f_unlink+0x236>
 8055646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8055648:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 805564c:	611a      	str	r2, [r3, #16]
 805564e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8055650:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8055654:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8055658:	615a      	str	r2, [r3, #20]
		res = follow_path(&dj, path);		/* Follow the file path */
 805565a:	687a      	ldr	r2, [r7, #4]
 805565c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8055660:	4611      	mov	r1, r2
 8055662:	4618      	mov	r0, r3
 8055664:	f7fd fe60 	bl	8053328 <follow_path>
 8055668:	4603      	mov	r3, r0
 805566a:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 805566e:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8055672:	2b00      	cmp	r3, #0
 8055674:	d108      	bne.n	8055688 <f_unlink+0x96>
 8055676:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 805567a:	f003 0320 	and.w	r3, r3, #32
 805567e:	2b00      	cmp	r3, #0
 8055680:	d002      	beq.n	8055688 <f_unlink+0x96>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8055682:	2306      	movs	r3, #6
 8055684:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8055688:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 805568c:	2b00      	cmp	r3, #0
 805568e:	d108      	bne.n	80556a2 <f_unlink+0xb0>
 8055690:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8055694:	2102      	movs	r1, #2
 8055696:	4618      	mov	r0, r3
 8055698:	f7fb f882 	bl	80507a0 <chk_lock>
 805569c:	4603      	mov	r3, r0
 805569e:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80556a2:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80556a6:	2b00      	cmp	r3, #0
 80556a8:	f040 80b1 	bne.w	805580e <f_unlink+0x21c>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80556ac:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80556b0:	b25b      	sxtb	r3, r3
 80556b2:	2b00      	cmp	r3, #0
 80556b4:	da03      	bge.n	80556be <f_unlink+0xcc>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80556b6:	2306      	movs	r3, #6
 80556b8:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 80556bc:	e008      	b.n	80556d0 <f_unlink+0xde>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80556be:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80556c2:	f003 0301 	and.w	r3, r3, #1
 80556c6:	2b00      	cmp	r3, #0
 80556c8:	d002      	beq.n	80556d0 <f_unlink+0xde>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80556ca:	2307      	movs	r3, #7
 80556cc:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
				}
			}
			if (res == FR_OK) {
 80556d0:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80556d4:	2b00      	cmp	r3, #0
 80556d6:	d170      	bne.n	80557ba <f_unlink+0x1c8>
#if _FS_EXFAT
				obj.fs = fs;
 80556d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80556da:	60bb      	str	r3, [r7, #8]
				if (fs->fs_type == FS_EXFAT) {
 80556dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80556de:	781b      	ldrb	r3, [r3, #0]
 80556e0:	2b04      	cmp	r3, #4
 80556e2:	d11d      	bne.n	8055720 <f_unlink+0x12e>
					obj.sclust = dclst = ld_dword(fs->dirbuf + XDIR_FstClus);
 80556e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80556e6:	695b      	ldr	r3, [r3, #20]
 80556e8:	3334      	adds	r3, #52	; 0x34
 80556ea:	4618      	mov	r0, r3
 80556ec:	f7fa fddc 	bl	80502a8 <ld_dword>
 80556f0:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
 80556f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80556f8:	613b      	str	r3, [r7, #16]
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 80556fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80556fc:	695b      	ldr	r3, [r3, #20]
 80556fe:	3338      	adds	r3, #56	; 0x38
 8055700:	4618      	mov	r0, r3
 8055702:	f7fa fdf4 	bl	80502ee <ld_qword>
 8055706:	4602      	mov	r2, r0
 8055708:	460b      	mov	r3, r1
 805570a:	e9c7 2306 	strd	r2, r3, [r7, #24]
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 805570e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8055710:	695b      	ldr	r3, [r3, #20]
 8055712:	3321      	adds	r3, #33	; 0x21
 8055714:	781b      	ldrb	r3, [r3, #0]
 8055716:	f003 0302 	and.w	r3, r3, #2
 805571a:	b2db      	uxtb	r3, r3
 805571c:	73fb      	strb	r3, [r7, #15]
 805571e:	e008      	b.n	8055732 <f_unlink+0x140>
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8055720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8055722:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8055726:	4611      	mov	r1, r2
 8055728:	4618      	mov	r0, r3
 805572a:	f7fc fa50 	bl	8051bce <ld_clust>
 805572e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8055732:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8055736:	f003 0310 	and.w	r3, r3, #16
 805573a:	2b00      	cmp	r3, #0
 805573c:	d03d      	beq.n	80557ba <f_unlink+0x1c8>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 805573e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8055740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8055742:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8055746:	429a      	cmp	r2, r3
 8055748:	d103      	bne.n	8055752 <f_unlink+0x160>
						res = FR_DENIED;
 805574a:	2307      	movs	r3, #7
 805574c:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8055750:	e033      	b.n	80557ba <f_unlink+0x1c8>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8055752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8055754:	643b      	str	r3, [r7, #64]	; 0x40
						sdj.obj.sclust = dclst;
 8055756:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 805575a:	64bb      	str	r3, [r7, #72]	; 0x48
#if _FS_EXFAT
						if (fs->fs_type == FS_EXFAT) {
 805575c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 805575e:	781b      	ldrb	r3, [r3, #0]
 8055760:	2b04      	cmp	r3, #4
 8055762:	d106      	bne.n	8055772 <f_unlink+0x180>
							sdj.obj.objsize = obj.objsize;
 8055764:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8055768:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
							sdj.obj.stat = obj.stat;
 805576c:	7bfb      	ldrb	r3, [r7, #15]
 805576e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						}
#endif
						res = dir_sdi(&sdj, 0);
 8055772:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8055776:	2100      	movs	r1, #0
 8055778:	4618      	mov	r0, r3
 805577a:	f7fc f852 	bl	8051822 <dir_sdi>
 805577e:	4603      	mov	r3, r0
 8055780:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
						if (res == FR_OK) {
 8055784:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8055788:	2b00      	cmp	r3, #0
 805578a:	d116      	bne.n	80557ba <f_unlink+0x1c8>
							res = dir_read(&sdj, 0);			/* Read an item */
 805578c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8055790:	2100      	movs	r1, #0
 8055792:	4618      	mov	r0, r3
 8055794:	f7fc fee4 	bl	8052560 <dir_read>
 8055798:	4603      	mov	r3, r0
 805579a:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 805579e:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80557a2:	2b00      	cmp	r3, #0
 80557a4:	d102      	bne.n	80557ac <f_unlink+0x1ba>
 80557a6:	2307      	movs	r3, #7
 80557a8:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 80557ac:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80557b0:	2b04      	cmp	r3, #4
 80557b2:	d102      	bne.n	80557ba <f_unlink+0x1c8>
 80557b4:	2300      	movs	r3, #0
 80557b6:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
						}
					}
				}
			}
			if (res == FR_OK) {
 80557ba:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80557be:	2b00      	cmp	r3, #0
 80557c0:	d125      	bne.n	805580e <f_unlink+0x21c>
				res = dir_remove(&dj);			/* Remove the directory entry */
 80557c2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80557c6:	4618      	mov	r0, r3
 80557c8:	f7fd fa64 	bl	8052c94 <dir_remove>
 80557cc:	4603      	mov	r3, r0
 80557ce:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 80557d2:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80557d6:	2b00      	cmp	r3, #0
 80557d8:	d10e      	bne.n	80557f8 <f_unlink+0x206>
 80557da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80557de:	2b00      	cmp	r3, #0
 80557e0:	d00a      	beq.n	80557f8 <f_unlink+0x206>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
 80557e2:	f107 0308 	add.w	r3, r7, #8
 80557e6:	2200      	movs	r2, #0
 80557e8:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80557ec:	4618      	mov	r0, r3
 80557ee:	f7fb fe17 	bl	8051420 <remove_chain>
 80557f2:	4603      	mov	r3, r0
 80557f4:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 80557f8:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80557fc:	2b00      	cmp	r3, #0
 80557fe:	d106      	bne.n	805580e <f_unlink+0x21c>
 8055800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8055802:	4618      	mov	r0, r3
 8055804:	f7fb f9aa 	bl	8050b5c <sync_fs>
 8055808:	4603      	mov	r3, r0
 805580a:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
			}
		}
		FREE_NAMBUF();
 805580e:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8055812:	f000 fb02 	bl	8055e1a <ff_memfree>
	}

	LEAVE_FF(fs, res);
 8055816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8055818:	f897 20ef 	ldrb.w	r2, [r7, #239]	; 0xef
 805581c:	4611      	mov	r1, r2
 805581e:	4618      	mov	r0, r3
 8055820:	f7fa ffa3 	bl	805076a <unlock_fs>
 8055824:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
}
 8055828:	4618      	mov	r0, r3
 805582a:	37f0      	adds	r7, #240	; 0xf0
 805582c:	46bd      	mov	sp, r7
 805582e:	bd80      	pop	{r7, pc}

08055830 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8055830:	b5b0      	push	{r4, r5, r7, lr}
 8055832:	b0a0      	sub	sp, #128	; 0x80
 8055834:	af00      	add	r7, sp, #0
 8055836:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8055838:	f107 010c 	add.w	r1, r7, #12
 805583c:	1d3b      	adds	r3, r7, #4
 805583e:	2202      	movs	r2, #2
 8055840:	4618      	mov	r0, r3
 8055842:	f7fd ff31 	bl	80536a8 <find_volume>
 8055846:	4603      	mov	r3, r0
 8055848:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 805584c:	68fb      	ldr	r3, [r7, #12]
 805584e:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 8055850:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8055854:	2b00      	cmp	r3, #0
 8055856:	f040 815a 	bne.w	8055b0e <f_mkdir+0x2de>
		INIT_NAMBUF(fs);
 805585a:	f44f 608c 	mov.w	r0, #1120	; 0x460
 805585e:	f000 fad0 	bl	8055e02 <ff_memalloc>
 8055862:	66f8      	str	r0, [r7, #108]	; 0x6c
 8055864:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8055866:	2b00      	cmp	r3, #0
 8055868:	d106      	bne.n	8055878 <f_mkdir+0x48>
 805586a:	68fb      	ldr	r3, [r7, #12]
 805586c:	2111      	movs	r1, #17
 805586e:	4618      	mov	r0, r3
 8055870:	f7fa ff7b 	bl	805076a <unlock_fs>
 8055874:	2311      	movs	r3, #17
 8055876:	e153      	b.n	8055b20 <f_mkdir+0x2f0>
 8055878:	68fb      	ldr	r3, [r7, #12]
 805587a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 805587c:	611a      	str	r2, [r3, #16]
 805587e:	68fb      	ldr	r3, [r7, #12]
 8055880:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8055882:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8055886:	615a      	str	r2, [r3, #20]
		res = follow_path(&dj, path);			/* Follow the file path */
 8055888:	687a      	ldr	r2, [r7, #4]
 805588a:	f107 0310 	add.w	r3, r7, #16
 805588e:	4611      	mov	r1, r2
 8055890:	4618      	mov	r0, r3
 8055892:	f7fd fd49 	bl	8053328 <follow_path>
 8055896:	4603      	mov	r3, r0
 8055898:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 805589c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80558a0:	2b00      	cmp	r3, #0
 80558a2:	d102      	bne.n	80558aa <f_mkdir+0x7a>
 80558a4:	2308      	movs	r3, #8
 80558a6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 80558aa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80558ae:	2b04      	cmp	r3, #4
 80558b0:	d108      	bne.n	80558c4 <f_mkdir+0x94>
 80558b2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80558b6:	f003 0320 	and.w	r3, r3, #32
 80558ba:	2b00      	cmp	r3, #0
 80558bc:	d002      	beq.n	80558c4 <f_mkdir+0x94>
			res = FR_INVALID_NAME;
 80558be:	2306      	movs	r3, #6
 80558c0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80558c4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80558c8:	2b04      	cmp	r3, #4
 80558ca:	f040 811d 	bne.w	8055b08 <f_mkdir+0x2d8>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80558ce:	f107 0310 	add.w	r3, r7, #16
 80558d2:	2100      	movs	r1, #0
 80558d4:	4618      	mov	r0, r3
 80558d6:	f7fb fe57 	bl	8051588 <create_chain>
 80558da:	66b8      	str	r0, [r7, #104]	; 0x68
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80558dc:	68fb      	ldr	r3, [r7, #12]
 80558de:	895b      	ldrh	r3, [r3, #10]
 80558e0:	461a      	mov	r2, r3
 80558e2:	68fb      	ldr	r3, [r7, #12]
 80558e4:	899b      	ldrh	r3, [r3, #12]
 80558e6:	fb02 f303 	mul.w	r3, r2, r3
 80558ea:	2200      	movs	r2, #0
 80558ec:	461c      	mov	r4, r3
 80558ee:	4615      	mov	r5, r2
 80558f0:	e9c7 4508 	strd	r4, r5, [r7, #32]
			res = FR_OK;
 80558f4:	2300      	movs	r3, #0
 80558f6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80558fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80558fc:	2b00      	cmp	r3, #0
 80558fe:	d102      	bne.n	8055906 <f_mkdir+0xd6>
 8055900:	2307      	movs	r3, #7
 8055902:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (dcl == 1) res = FR_INT_ERR;
 8055906:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8055908:	2b01      	cmp	r3, #1
 805590a:	d102      	bne.n	8055912 <f_mkdir+0xe2>
 805590c:	2302      	movs	r3, #2
 805590e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8055912:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8055914:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8055918:	d102      	bne.n	8055920 <f_mkdir+0xf0>
 805591a:	2301      	movs	r3, #1
 805591c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8055920:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8055924:	2b00      	cmp	r3, #0
 8055926:	d106      	bne.n	8055936 <f_mkdir+0x106>
 8055928:	68fb      	ldr	r3, [r7, #12]
 805592a:	4618      	mov	r0, r3
 805592c:	f7fb f8a4 	bl	8050a78 <sync_window>
 8055930:	4603      	mov	r3, r0
 8055932:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			tm = GET_FATTIME();
 8055936:	f7f6 fff3 	bl	804c920 <get_fattime>
 805593a:	6678      	str	r0, [r7, #100]	; 0x64
			if (res == FR_OK) {					/* Initialize the new directory table */
 805593c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8055940:	2b00      	cmp	r3, #0
 8055942:	d170      	bne.n	8055a26 <f_mkdir+0x1f6>
				dsc = clust2sect(fs, dcl);
 8055944:	68fb      	ldr	r3, [r7, #12]
 8055946:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8055948:	4618      	mov	r0, r3
 805594a:	f7fb f977 	bl	8050c3c <clust2sect>
 805594e:	6778      	str	r0, [r7, #116]	; 0x74
				dir = fs->win;
 8055950:	68fb      	ldr	r3, [r7, #12]
 8055952:	3350      	adds	r3, #80	; 0x50
 8055954:	663b      	str	r3, [r7, #96]	; 0x60
				mem_set(dir, 0, SS(fs));
 8055956:	68fb      	ldr	r3, [r7, #12]
 8055958:	899b      	ldrh	r3, [r3, #12]
 805595a:	461a      	mov	r2, r3
 805595c:	2100      	movs	r1, #0
 805595e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8055960:	f7fa fe90 	bl	8050684 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8055964:	68fb      	ldr	r3, [r7, #12]
 8055966:	781b      	ldrb	r3, [r3, #0]
 8055968:	2b04      	cmp	r3, #4
 805596a:	d036      	beq.n	80559da <f_mkdir+0x1aa>
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 805596c:	220b      	movs	r2, #11
 805596e:	2120      	movs	r1, #32
 8055970:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8055972:	f7fa fe87 	bl	8050684 <mem_set>
					dir[DIR_Name] = '.';
 8055976:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8055978:	222e      	movs	r2, #46	; 0x2e
 805597a:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 805597c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 805597e:	330b      	adds	r3, #11
 8055980:	2210      	movs	r2, #16
 8055982:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8055984:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8055986:	3316      	adds	r3, #22
 8055988:	6e79      	ldr	r1, [r7, #100]	; 0x64
 805598a:	4618      	mov	r0, r3
 805598c:	f7fa fda5 	bl	80504da <st_dword>
					st_clust(fs, dir, dcl);
 8055990:	68fb      	ldr	r3, [r7, #12]
 8055992:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8055994:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8055996:	4618      	mov	r0, r3
 8055998:	f7fc f938 	bl	8051c0c <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 805599c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 805599e:	3320      	adds	r3, #32
 80559a0:	2220      	movs	r2, #32
 80559a2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80559a4:	4618      	mov	r0, r3
 80559a6:	f7fa fe4c 	bl	8050642 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80559aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80559ac:	3321      	adds	r3, #33	; 0x21
 80559ae:	222e      	movs	r2, #46	; 0x2e
 80559b0:	701a      	strb	r2, [r3, #0]
 80559b2:	69bb      	ldr	r3, [r7, #24]
 80559b4:	673b      	str	r3, [r7, #112]	; 0x70
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80559b6:	68fb      	ldr	r3, [r7, #12]
 80559b8:	781b      	ldrb	r3, [r3, #0]
 80559ba:	2b03      	cmp	r3, #3
 80559bc:	d106      	bne.n	80559cc <f_mkdir+0x19c>
 80559be:	68fb      	ldr	r3, [r7, #12]
 80559c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80559c2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80559c4:	429a      	cmp	r2, r3
 80559c6:	d101      	bne.n	80559cc <f_mkdir+0x19c>
 80559c8:	2300      	movs	r3, #0
 80559ca:	673b      	str	r3, [r7, #112]	; 0x70
					st_clust(fs, dir + SZDIRE, pcl);
 80559cc:	68f8      	ldr	r0, [r7, #12]
 80559ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80559d0:	3320      	adds	r3, #32
 80559d2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80559d4:	4619      	mov	r1, r3
 80559d6:	f7fc f919 	bl	8051c0c <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80559da:	68fb      	ldr	r3, [r7, #12]
 80559dc:	895b      	ldrh	r3, [r3, #10]
 80559de:	67bb      	str	r3, [r7, #120]	; 0x78
 80559e0:	e01c      	b.n	8055a1c <f_mkdir+0x1ec>
					fs->winsect = dsc++;
 80559e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80559e4:	1c5a      	adds	r2, r3, #1
 80559e6:	677a      	str	r2, [r7, #116]	; 0x74
 80559e8:	68fa      	ldr	r2, [r7, #12]
 80559ea:	64d3      	str	r3, [r2, #76]	; 0x4c
					fs->wflag = 1;
 80559ec:	68fb      	ldr	r3, [r7, #12]
 80559ee:	2201      	movs	r2, #1
 80559f0:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80559f2:	68fb      	ldr	r3, [r7, #12]
 80559f4:	4618      	mov	r0, r3
 80559f6:	f7fb f83f 	bl	8050a78 <sync_window>
 80559fa:	4603      	mov	r3, r0
 80559fc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
					if (res != FR_OK) break;
 8055a00:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8055a04:	2b00      	cmp	r3, #0
 8055a06:	d10d      	bne.n	8055a24 <f_mkdir+0x1f4>
					mem_set(dir, 0, SS(fs));
 8055a08:	68fb      	ldr	r3, [r7, #12]
 8055a0a:	899b      	ldrh	r3, [r3, #12]
 8055a0c:	461a      	mov	r2, r3
 8055a0e:	2100      	movs	r1, #0
 8055a10:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8055a12:	f7fa fe37 	bl	8050684 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8055a16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8055a18:	3b01      	subs	r3, #1
 8055a1a:	67bb      	str	r3, [r7, #120]	; 0x78
 8055a1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8055a1e:	2b00      	cmp	r3, #0
 8055a20:	d1df      	bne.n	80559e2 <f_mkdir+0x1b2>
 8055a22:	e000      	b.n	8055a26 <f_mkdir+0x1f6>
					if (res != FR_OK) break;
 8055a24:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8055a26:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8055a2a:	2b00      	cmp	r3, #0
 8055a2c:	d107      	bne.n	8055a3e <f_mkdir+0x20e>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8055a2e:	f107 0310 	add.w	r3, r7, #16
 8055a32:	4618      	mov	r0, r3
 8055a34:	f7fc ff84 	bl	8052940 <dir_register>
 8055a38:	4603      	mov	r3, r0
 8055a3a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
			if (res == FR_OK) {
 8055a3e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8055a42:	2b00      	cmp	r3, #0
 8055a44:	d159      	bne.n	8055afa <f_mkdir+0x2ca>
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* Initialize directory entry block */
 8055a46:	68fb      	ldr	r3, [r7, #12]
 8055a48:	781b      	ldrb	r3, [r3, #0]
 8055a4a:	2b04      	cmp	r3, #4
 8055a4c:	d134      	bne.n	8055ab8 <f_mkdir+0x288>
					st_dword(fs->dirbuf + XDIR_ModTime, tm);	/* Created time */
 8055a4e:	68fb      	ldr	r3, [r7, #12]
 8055a50:	695b      	ldr	r3, [r3, #20]
 8055a52:	330c      	adds	r3, #12
 8055a54:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8055a56:	4618      	mov	r0, r3
 8055a58:	f7fa fd3f 	bl	80504da <st_dword>
					st_dword(fs->dirbuf + XDIR_FstClus, dcl);	/* Table start cluster */
 8055a5c:	68fb      	ldr	r3, [r7, #12]
 8055a5e:	695b      	ldr	r3, [r3, #20]
 8055a60:	3334      	adds	r3, #52	; 0x34
 8055a62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8055a64:	4618      	mov	r0, r3
 8055a66:	f7fa fd38 	bl	80504da <st_dword>
					st_dword(fs->dirbuf + XDIR_FileSize, (DWORD)dj.obj.objsize);	/* File size needs to be valid */
 8055a6a:	68fb      	ldr	r3, [r7, #12]
 8055a6c:	695b      	ldr	r3, [r3, #20]
 8055a6e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8055a72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8055a76:	4613      	mov	r3, r2
 8055a78:	4619      	mov	r1, r3
 8055a7a:	f7fa fd2e 	bl	80504da <st_dword>
					st_dword(fs->dirbuf + XDIR_ValidFileSize, (DWORD)dj.obj.objsize);
 8055a7e:	68fb      	ldr	r3, [r7, #12]
 8055a80:	695b      	ldr	r3, [r3, #20]
 8055a82:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8055a86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8055a8a:	4613      	mov	r3, r2
 8055a8c:	4619      	mov	r1, r3
 8055a8e:	f7fa fd24 	bl	80504da <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 3;				/* Initialize the object flag (contiguous) */
 8055a92:	68fb      	ldr	r3, [r7, #12]
 8055a94:	695b      	ldr	r3, [r3, #20]
 8055a96:	3321      	adds	r3, #33	; 0x21
 8055a98:	2203      	movs	r2, #3
 8055a9a:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
 8055a9c:	68fb      	ldr	r3, [r7, #12]
 8055a9e:	695b      	ldr	r3, [r3, #20]
 8055aa0:	3304      	adds	r3, #4
 8055aa2:	2210      	movs	r2, #16
 8055aa4:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 8055aa6:	f107 0310 	add.w	r3, r7, #16
 8055aaa:	4618      	mov	r0, r3
 8055aac:	f7fc fc96 	bl	80523dc <store_xdir>
 8055ab0:	4603      	mov	r3, r0
 8055ab2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8055ab6:	e014      	b.n	8055ae2 <f_mkdir+0x2b2>
				} else
#endif
				{
					dir = dj.dir;
 8055ab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8055aba:	663b      	str	r3, [r7, #96]	; 0x60
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8055abc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8055abe:	3316      	adds	r3, #22
 8055ac0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8055ac2:	4618      	mov	r0, r3
 8055ac4:	f7fa fd09 	bl	80504da <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8055ac8:	68fb      	ldr	r3, [r7, #12]
 8055aca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8055acc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8055ace:	4618      	mov	r0, r3
 8055ad0:	f7fc f89c 	bl	8051c0c <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8055ad4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8055ad6:	330b      	adds	r3, #11
 8055ad8:	2210      	movs	r2, #16
 8055ada:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8055adc:	68fb      	ldr	r3, [r7, #12]
 8055ade:	2201      	movs	r2, #1
 8055ae0:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8055ae2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8055ae6:	2b00      	cmp	r3, #0
 8055ae8:	d10e      	bne.n	8055b08 <f_mkdir+0x2d8>
					res = sync_fs(fs);
 8055aea:	68fb      	ldr	r3, [r7, #12]
 8055aec:	4618      	mov	r0, r3
 8055aee:	f7fb f835 	bl	8050b5c <sync_fs>
 8055af2:	4603      	mov	r3, r0
 8055af4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8055af8:	e006      	b.n	8055b08 <f_mkdir+0x2d8>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8055afa:	f107 0310 	add.w	r3, r7, #16
 8055afe:	2200      	movs	r2, #0
 8055b00:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8055b02:	4618      	mov	r0, r3
 8055b04:	f7fb fc8c 	bl	8051420 <remove_chain>
			}
		}
		FREE_NAMBUF();
 8055b08:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8055b0a:	f000 f986 	bl	8055e1a <ff_memfree>
	}

	LEAVE_FF(fs, res);
 8055b0e:	68fb      	ldr	r3, [r7, #12]
 8055b10:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8055b14:	4611      	mov	r1, r2
 8055b16:	4618      	mov	r0, r3
 8055b18:	f7fa fe27 	bl	805076a <unlock_fs>
 8055b1c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8055b20:	4618      	mov	r0, r3
 8055b22:	3780      	adds	r7, #128	; 0x80
 8055b24:	46bd      	mov	sp, r7
 8055b26:	bdb0      	pop	{r4, r5, r7, pc}

08055b28 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8055b28:	b480      	push	{r7}
 8055b2a:	b087      	sub	sp, #28
 8055b2c:	af00      	add	r7, sp, #0
 8055b2e:	60f8      	str	r0, [r7, #12]
 8055b30:	60b9      	str	r1, [r7, #8]
 8055b32:	4613      	mov	r3, r2
 8055b34:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8055b36:	2301      	movs	r3, #1
 8055b38:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8055b3a:	2300      	movs	r3, #0
 8055b3c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8055b3e:	4b1f      	ldr	r3, [pc, #124]	; (8055bbc <FATFS_LinkDriverEx+0x94>)
 8055b40:	7a5b      	ldrb	r3, [r3, #9]
 8055b42:	b2db      	uxtb	r3, r3
 8055b44:	2b00      	cmp	r3, #0
 8055b46:	d131      	bne.n	8055bac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8055b48:	4b1c      	ldr	r3, [pc, #112]	; (8055bbc <FATFS_LinkDriverEx+0x94>)
 8055b4a:	7a5b      	ldrb	r3, [r3, #9]
 8055b4c:	b2db      	uxtb	r3, r3
 8055b4e:	461a      	mov	r2, r3
 8055b50:	4b1a      	ldr	r3, [pc, #104]	; (8055bbc <FATFS_LinkDriverEx+0x94>)
 8055b52:	2100      	movs	r1, #0
 8055b54:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8055b56:	4b19      	ldr	r3, [pc, #100]	; (8055bbc <FATFS_LinkDriverEx+0x94>)
 8055b58:	7a5b      	ldrb	r3, [r3, #9]
 8055b5a:	b2db      	uxtb	r3, r3
 8055b5c:	4a17      	ldr	r2, [pc, #92]	; (8055bbc <FATFS_LinkDriverEx+0x94>)
 8055b5e:	009b      	lsls	r3, r3, #2
 8055b60:	4413      	add	r3, r2
 8055b62:	68fa      	ldr	r2, [r7, #12]
 8055b64:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8055b66:	4b15      	ldr	r3, [pc, #84]	; (8055bbc <FATFS_LinkDriverEx+0x94>)
 8055b68:	7a5b      	ldrb	r3, [r3, #9]
 8055b6a:	b2db      	uxtb	r3, r3
 8055b6c:	461a      	mov	r2, r3
 8055b6e:	4b13      	ldr	r3, [pc, #76]	; (8055bbc <FATFS_LinkDriverEx+0x94>)
 8055b70:	4413      	add	r3, r2
 8055b72:	79fa      	ldrb	r2, [r7, #7]
 8055b74:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8055b76:	4b11      	ldr	r3, [pc, #68]	; (8055bbc <FATFS_LinkDriverEx+0x94>)
 8055b78:	7a5b      	ldrb	r3, [r3, #9]
 8055b7a:	b2db      	uxtb	r3, r3
 8055b7c:	1c5a      	adds	r2, r3, #1
 8055b7e:	b2d1      	uxtb	r1, r2
 8055b80:	4a0e      	ldr	r2, [pc, #56]	; (8055bbc <FATFS_LinkDriverEx+0x94>)
 8055b82:	7251      	strb	r1, [r2, #9]
 8055b84:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8055b86:	7dbb      	ldrb	r3, [r7, #22]
 8055b88:	3330      	adds	r3, #48	; 0x30
 8055b8a:	b2da      	uxtb	r2, r3
 8055b8c:	68bb      	ldr	r3, [r7, #8]
 8055b8e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8055b90:	68bb      	ldr	r3, [r7, #8]
 8055b92:	3301      	adds	r3, #1
 8055b94:	223a      	movs	r2, #58	; 0x3a
 8055b96:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8055b98:	68bb      	ldr	r3, [r7, #8]
 8055b9a:	3302      	adds	r3, #2
 8055b9c:	222f      	movs	r2, #47	; 0x2f
 8055b9e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8055ba0:	68bb      	ldr	r3, [r7, #8]
 8055ba2:	3303      	adds	r3, #3
 8055ba4:	2200      	movs	r2, #0
 8055ba6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8055ba8:	2300      	movs	r3, #0
 8055baa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8055bac:	7dfb      	ldrb	r3, [r7, #23]
}
 8055bae:	4618      	mov	r0, r3
 8055bb0:	371c      	adds	r7, #28
 8055bb2:	46bd      	mov	sp, r7
 8055bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8055bb8:	4770      	bx	lr
 8055bba:	bf00      	nop
 8055bbc:	24002c28 	.word	0x24002c28

08055bc0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8055bc0:	b580      	push	{r7, lr}
 8055bc2:	b082      	sub	sp, #8
 8055bc4:	af00      	add	r7, sp, #0
 8055bc6:	6078      	str	r0, [r7, #4]
 8055bc8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8055bca:	2200      	movs	r2, #0
 8055bcc:	6839      	ldr	r1, [r7, #0]
 8055bce:	6878      	ldr	r0, [r7, #4]
 8055bd0:	f7ff ffaa 	bl	8055b28 <FATFS_LinkDriverEx>
 8055bd4:	4603      	mov	r3, r0
}
 8055bd6:	4618      	mov	r0, r3
 8055bd8:	3708      	adds	r7, #8
 8055bda:	46bd      	mov	sp, r7
 8055bdc:	bd80      	pop	{r7, pc}
	...

08055be0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8055be0:	b480      	push	{r7}
 8055be2:	b085      	sub	sp, #20
 8055be4:	af00      	add	r7, sp, #0
 8055be6:	4603      	mov	r3, r0
 8055be8:	6039      	str	r1, [r7, #0]
 8055bea:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8055bec:	88fb      	ldrh	r3, [r7, #6]
 8055bee:	2b7f      	cmp	r3, #127	; 0x7f
 8055bf0:	d802      	bhi.n	8055bf8 <ff_convert+0x18>
		c = chr;
 8055bf2:	88fb      	ldrh	r3, [r7, #6]
 8055bf4:	81fb      	strh	r3, [r7, #14]
 8055bf6:	e025      	b.n	8055c44 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8055bf8:	683b      	ldr	r3, [r7, #0]
 8055bfa:	2b00      	cmp	r3, #0
 8055bfc:	d00b      	beq.n	8055c16 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8055bfe:	88fb      	ldrh	r3, [r7, #6]
 8055c00:	2bff      	cmp	r3, #255	; 0xff
 8055c02:	d805      	bhi.n	8055c10 <ff_convert+0x30>
 8055c04:	88fb      	ldrh	r3, [r7, #6]
 8055c06:	3b80      	subs	r3, #128	; 0x80
 8055c08:	4a12      	ldr	r2, [pc, #72]	; (8055c54 <ff_convert+0x74>)
 8055c0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8055c0e:	e000      	b.n	8055c12 <ff_convert+0x32>
 8055c10:	2300      	movs	r3, #0
 8055c12:	81fb      	strh	r3, [r7, #14]
 8055c14:	e016      	b.n	8055c44 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8055c16:	2300      	movs	r3, #0
 8055c18:	81fb      	strh	r3, [r7, #14]
 8055c1a:	e009      	b.n	8055c30 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8055c1c:	89fb      	ldrh	r3, [r7, #14]
 8055c1e:	4a0d      	ldr	r2, [pc, #52]	; (8055c54 <ff_convert+0x74>)
 8055c20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8055c24:	88fa      	ldrh	r2, [r7, #6]
 8055c26:	429a      	cmp	r2, r3
 8055c28:	d006      	beq.n	8055c38 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8055c2a:	89fb      	ldrh	r3, [r7, #14]
 8055c2c:	3301      	adds	r3, #1
 8055c2e:	81fb      	strh	r3, [r7, #14]
 8055c30:	89fb      	ldrh	r3, [r7, #14]
 8055c32:	2b7f      	cmp	r3, #127	; 0x7f
 8055c34:	d9f2      	bls.n	8055c1c <ff_convert+0x3c>
 8055c36:	e000      	b.n	8055c3a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8055c38:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8055c3a:	89fb      	ldrh	r3, [r7, #14]
 8055c3c:	3380      	adds	r3, #128	; 0x80
 8055c3e:	b29b      	uxth	r3, r3
 8055c40:	b2db      	uxtb	r3, r3
 8055c42:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8055c44:	89fb      	ldrh	r3, [r7, #14]
}
 8055c46:	4618      	mov	r0, r3
 8055c48:	3714      	adds	r7, #20
 8055c4a:	46bd      	mov	sp, r7
 8055c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8055c50:	4770      	bx	lr
 8055c52:	bf00      	nop
 8055c54:	0805ba34 	.word	0x0805ba34

08055c58 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8055c58:	b480      	push	{r7}
 8055c5a:	b087      	sub	sp, #28
 8055c5c:	af00      	add	r7, sp, #0
 8055c5e:	4603      	mov	r3, r0
 8055c60:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8055c62:	88fb      	ldrh	r3, [r7, #6]
 8055c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8055c68:	d201      	bcs.n	8055c6e <ff_wtoupper+0x16>
 8055c6a:	4b3e      	ldr	r3, [pc, #248]	; (8055d64 <ff_wtoupper+0x10c>)
 8055c6c:	e000      	b.n	8055c70 <ff_wtoupper+0x18>
 8055c6e:	4b3e      	ldr	r3, [pc, #248]	; (8055d68 <ff_wtoupper+0x110>)
 8055c70:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8055c72:	697b      	ldr	r3, [r7, #20]
 8055c74:	1c9a      	adds	r2, r3, #2
 8055c76:	617a      	str	r2, [r7, #20]
 8055c78:	881b      	ldrh	r3, [r3, #0]
 8055c7a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8055c7c:	8a7b      	ldrh	r3, [r7, #18]
 8055c7e:	2b00      	cmp	r3, #0
 8055c80:	d068      	beq.n	8055d54 <ff_wtoupper+0xfc>
 8055c82:	88fa      	ldrh	r2, [r7, #6]
 8055c84:	8a7b      	ldrh	r3, [r7, #18]
 8055c86:	429a      	cmp	r2, r3
 8055c88:	d364      	bcc.n	8055d54 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8055c8a:	697b      	ldr	r3, [r7, #20]
 8055c8c:	1c9a      	adds	r2, r3, #2
 8055c8e:	617a      	str	r2, [r7, #20]
 8055c90:	881b      	ldrh	r3, [r3, #0]
 8055c92:	823b      	strh	r3, [r7, #16]
 8055c94:	8a3b      	ldrh	r3, [r7, #16]
 8055c96:	0a1b      	lsrs	r3, r3, #8
 8055c98:	81fb      	strh	r3, [r7, #14]
 8055c9a:	8a3b      	ldrh	r3, [r7, #16]
 8055c9c:	b2db      	uxtb	r3, r3
 8055c9e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8055ca0:	88fa      	ldrh	r2, [r7, #6]
 8055ca2:	8a79      	ldrh	r1, [r7, #18]
 8055ca4:	8a3b      	ldrh	r3, [r7, #16]
 8055ca6:	440b      	add	r3, r1
 8055ca8:	429a      	cmp	r2, r3
 8055caa:	da49      	bge.n	8055d40 <ff_wtoupper+0xe8>
			switch (cmd) {
 8055cac:	89fb      	ldrh	r3, [r7, #14]
 8055cae:	2b08      	cmp	r3, #8
 8055cb0:	d84f      	bhi.n	8055d52 <ff_wtoupper+0xfa>
 8055cb2:	a201      	add	r2, pc, #4	; (adr r2, 8055cb8 <ff_wtoupper+0x60>)
 8055cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8055cb8:	08055cdd 	.word	0x08055cdd
 8055cbc:	08055cef 	.word	0x08055cef
 8055cc0:	08055d05 	.word	0x08055d05
 8055cc4:	08055d0d 	.word	0x08055d0d
 8055cc8:	08055d15 	.word	0x08055d15
 8055ccc:	08055d1d 	.word	0x08055d1d
 8055cd0:	08055d25 	.word	0x08055d25
 8055cd4:	08055d2d 	.word	0x08055d2d
 8055cd8:	08055d35 	.word	0x08055d35
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8055cdc:	88fa      	ldrh	r2, [r7, #6]
 8055cde:	8a7b      	ldrh	r3, [r7, #18]
 8055ce0:	1ad3      	subs	r3, r2, r3
 8055ce2:	005b      	lsls	r3, r3, #1
 8055ce4:	697a      	ldr	r2, [r7, #20]
 8055ce6:	4413      	add	r3, r2
 8055ce8:	881b      	ldrh	r3, [r3, #0]
 8055cea:	80fb      	strh	r3, [r7, #6]
 8055cec:	e027      	b.n	8055d3e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8055cee:	88fa      	ldrh	r2, [r7, #6]
 8055cf0:	8a7b      	ldrh	r3, [r7, #18]
 8055cf2:	1ad3      	subs	r3, r2, r3
 8055cf4:	b29b      	uxth	r3, r3
 8055cf6:	f003 0301 	and.w	r3, r3, #1
 8055cfa:	b29b      	uxth	r3, r3
 8055cfc:	88fa      	ldrh	r2, [r7, #6]
 8055cfe:	1ad3      	subs	r3, r2, r3
 8055d00:	80fb      	strh	r3, [r7, #6]
 8055d02:	e01c      	b.n	8055d3e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8055d04:	88fb      	ldrh	r3, [r7, #6]
 8055d06:	3b10      	subs	r3, #16
 8055d08:	80fb      	strh	r3, [r7, #6]
 8055d0a:	e018      	b.n	8055d3e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8055d0c:	88fb      	ldrh	r3, [r7, #6]
 8055d0e:	3b20      	subs	r3, #32
 8055d10:	80fb      	strh	r3, [r7, #6]
 8055d12:	e014      	b.n	8055d3e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8055d14:	88fb      	ldrh	r3, [r7, #6]
 8055d16:	3b30      	subs	r3, #48	; 0x30
 8055d18:	80fb      	strh	r3, [r7, #6]
 8055d1a:	e010      	b.n	8055d3e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8055d1c:	88fb      	ldrh	r3, [r7, #6]
 8055d1e:	3b1a      	subs	r3, #26
 8055d20:	80fb      	strh	r3, [r7, #6]
 8055d22:	e00c      	b.n	8055d3e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8055d24:	88fb      	ldrh	r3, [r7, #6]
 8055d26:	3308      	adds	r3, #8
 8055d28:	80fb      	strh	r3, [r7, #6]
 8055d2a:	e008      	b.n	8055d3e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8055d2c:	88fb      	ldrh	r3, [r7, #6]
 8055d2e:	3b50      	subs	r3, #80	; 0x50
 8055d30:	80fb      	strh	r3, [r7, #6]
 8055d32:	e004      	b.n	8055d3e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8055d34:	88fb      	ldrh	r3, [r7, #6]
 8055d36:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8055d3a:	80fb      	strh	r3, [r7, #6]
 8055d3c:	bf00      	nop
			}
			break;
 8055d3e:	e008      	b.n	8055d52 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8055d40:	89fb      	ldrh	r3, [r7, #14]
 8055d42:	2b00      	cmp	r3, #0
 8055d44:	d195      	bne.n	8055c72 <ff_wtoupper+0x1a>
 8055d46:	8a3b      	ldrh	r3, [r7, #16]
 8055d48:	005b      	lsls	r3, r3, #1
 8055d4a:	697a      	ldr	r2, [r7, #20]
 8055d4c:	4413      	add	r3, r2
 8055d4e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8055d50:	e78f      	b.n	8055c72 <ff_wtoupper+0x1a>
			break;
 8055d52:	bf00      	nop
	}

	return chr;
 8055d54:	88fb      	ldrh	r3, [r7, #6]
}
 8055d56:	4618      	mov	r0, r3
 8055d58:	371c      	adds	r7, #28
 8055d5a:	46bd      	mov	sp, r7
 8055d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8055d60:	4770      	bx	lr
 8055d62:	bf00      	nop
 8055d64:	0805bb34 	.word	0x0805bb34
 8055d68:	0805bd28 	.word	0x0805bd28

08055d6c <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8055d6c:	b580      	push	{r7, lr}
 8055d6e:	b086      	sub	sp, #24
 8055d70:	af00      	add	r7, sp, #0
 8055d72:	4603      	mov	r3, r0
 8055d74:	6039      	str	r1, [r7, #0]
 8055d76:	71fb      	strb	r3, [r7, #7]

    int ret;
#if _USE_MUTEX

#if (osCMSIS < 0x20000U)
    osMutexDef(MTX);
 8055d78:	2300      	movs	r3, #0
 8055d7a:	60fb      	str	r3, [r7, #12]
 8055d7c:	2300      	movs	r3, #0
 8055d7e:	613b      	str	r3, [r7, #16]
    *sobj = osMutexCreate(osMutex(MTX));
 8055d80:	f107 030c 	add.w	r3, r7, #12
 8055d84:	4618      	mov	r0, r3
 8055d86:	f000 f919 	bl	8055fbc <osMutexCreate>
 8055d8a:	4602      	mov	r2, r0
 8055d8c:	683b      	ldr	r3, [r7, #0]
 8055d8e:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8055d90:	683b      	ldr	r3, [r7, #0]
 8055d92:	681b      	ldr	r3, [r3, #0]
 8055d94:	2b00      	cmp	r3, #0
 8055d96:	bf14      	ite	ne
 8055d98:	2301      	movne	r3, #1
 8055d9a:	2300      	moveq	r3, #0
 8055d9c:	b2db      	uxtb	r3, r3
 8055d9e:	617b      	str	r3, [r7, #20]

    return ret;
 8055da0:	697b      	ldr	r3, [r7, #20]
}
 8055da2:	4618      	mov	r0, r3
 8055da4:	3718      	adds	r7, #24
 8055da6:	46bd      	mov	sp, r7
 8055da8:	bd80      	pop	{r7, pc}

08055daa <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8055daa:	b580      	push	{r7, lr}
 8055dac:	b082      	sub	sp, #8
 8055dae:	af00      	add	r7, sp, #0
 8055db0:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
 8055db2:	6878      	ldr	r0, [r7, #4]
 8055db4:	f000 f99e 	bl	80560f4 <osMutexDelete>
#else
    osSemaphoreDelete (sobj);
#endif
    return 1;
 8055db8:	2301      	movs	r3, #1
}
 8055dba:	4618      	mov	r0, r3
 8055dbc:	3708      	adds	r7, #8
 8055dbe:	46bd      	mov	sp, r7
 8055dc0:	bd80      	pop	{r7, pc}

08055dc2 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8055dc2:	b580      	push	{r7, lr}
 8055dc4:	b084      	sub	sp, #16
 8055dc6:	af00      	add	r7, sp, #0
 8055dc8:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8055dca:	2300      	movs	r3, #0
 8055dcc:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
 8055dce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8055dd2:	6878      	ldr	r0, [r7, #4]
 8055dd4:	f000 f90a 	bl	8055fec <osMutexWait>
 8055dd8:	4603      	mov	r3, r0
 8055dda:	2b00      	cmp	r3, #0
 8055ddc:	d101      	bne.n	8055de2 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8055dde:	2301      	movs	r3, #1
 8055de0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8055de2:	68fb      	ldr	r3, [r7, #12]
}
 8055de4:	4618      	mov	r0, r3
 8055de6:	3710      	adds	r7, #16
 8055de8:	46bd      	mov	sp, r7
 8055dea:	bd80      	pop	{r7, pc}

08055dec <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8055dec:	b580      	push	{r7, lr}
 8055dee:	b082      	sub	sp, #8
 8055df0:	af00      	add	r7, sp, #0
 8055df2:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
 8055df4:	6878      	ldr	r0, [r7, #4]
 8055df6:	f000 f947 	bl	8056088 <osMutexRelease>
#else
  osSemaphoreRelease(sobj);
#endif
}
 8055dfa:	bf00      	nop
 8055dfc:	3708      	adds	r7, #8
 8055dfe:	46bd      	mov	sp, r7
 8055e00:	bd80      	pop	{r7, pc}

08055e02 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8055e02:	b580      	push	{r7, lr}
 8055e04:	b082      	sub	sp, #8
 8055e06:	af00      	add	r7, sp, #0
 8055e08:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8055e0a:	6878      	ldr	r0, [r7, #4]
 8055e0c:	f003 faf4 	bl	80593f8 <pvPortMalloc>
 8055e10:	4603      	mov	r3, r0
}
 8055e12:	4618      	mov	r0, r3
 8055e14:	3708      	adds	r7, #8
 8055e16:	46bd      	mov	sp, r7
 8055e18:	bd80      	pop	{r7, pc}

08055e1a <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 8055e1a:	b580      	push	{r7, lr}
 8055e1c:	b082      	sub	sp, #8
 8055e1e:	af00      	add	r7, sp, #0
 8055e20:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8055e22:	6878      	ldr	r0, [r7, #4]
 8055e24:	f003 fbb4 	bl	8059590 <vPortFree>
}
 8055e28:	bf00      	nop
 8055e2a:	3708      	adds	r7, #8
 8055e2c:	46bd      	mov	sp, r7
 8055e2e:	bd80      	pop	{r7, pc}

08055e30 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8055e30:	b480      	push	{r7}
 8055e32:	b085      	sub	sp, #20
 8055e34:	af00      	add	r7, sp, #0
 8055e36:	4603      	mov	r3, r0
 8055e38:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8055e3a:	2300      	movs	r3, #0
 8055e3c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8055e3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8055e42:	2b84      	cmp	r3, #132	; 0x84
 8055e44:	d005      	beq.n	8055e52 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8055e46:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8055e4a:	68fb      	ldr	r3, [r7, #12]
 8055e4c:	4413      	add	r3, r2
 8055e4e:	3303      	adds	r3, #3
 8055e50:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8055e52:	68fb      	ldr	r3, [r7, #12]
}
 8055e54:	4618      	mov	r0, r3
 8055e56:	3714      	adds	r7, #20
 8055e58:	46bd      	mov	sp, r7
 8055e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8055e5e:	4770      	bx	lr

08055e60 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8055e60:	b480      	push	{r7}
 8055e62:	b083      	sub	sp, #12
 8055e64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8055e66:	f3ef 8305 	mrs	r3, IPSR
 8055e6a:	607b      	str	r3, [r7, #4]
  return(result);
 8055e6c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8055e6e:	2b00      	cmp	r3, #0
 8055e70:	bf14      	ite	ne
 8055e72:	2301      	movne	r3, #1
 8055e74:	2300      	moveq	r3, #0
 8055e76:	b2db      	uxtb	r3, r3
}
 8055e78:	4618      	mov	r0, r3
 8055e7a:	370c      	adds	r7, #12
 8055e7c:	46bd      	mov	sp, r7
 8055e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8055e82:	4770      	bx	lr

08055e84 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8055e84:	b580      	push	{r7, lr}
 8055e86:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8055e88:	f001 fd42 	bl	8057910 <vTaskStartScheduler>
  
  return osOK;
 8055e8c:	2300      	movs	r3, #0
}
 8055e8e:	4618      	mov	r0, r3
 8055e90:	bd80      	pop	{r7, pc}

08055e92 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8055e92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8055e94:	b089      	sub	sp, #36	; 0x24
 8055e96:	af04      	add	r7, sp, #16
 8055e98:	6078      	str	r0, [r7, #4]
 8055e9a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8055e9c:	687b      	ldr	r3, [r7, #4]
 8055e9e:	695b      	ldr	r3, [r3, #20]
 8055ea0:	2b00      	cmp	r3, #0
 8055ea2:	d020      	beq.n	8055ee6 <osThreadCreate+0x54>
 8055ea4:	687b      	ldr	r3, [r7, #4]
 8055ea6:	699b      	ldr	r3, [r3, #24]
 8055ea8:	2b00      	cmp	r3, #0
 8055eaa:	d01c      	beq.n	8055ee6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8055eac:	687b      	ldr	r3, [r7, #4]
 8055eae:	685c      	ldr	r4, [r3, #4]
 8055eb0:	687b      	ldr	r3, [r7, #4]
 8055eb2:	681d      	ldr	r5, [r3, #0]
 8055eb4:	687b      	ldr	r3, [r7, #4]
 8055eb6:	691e      	ldr	r6, [r3, #16]
 8055eb8:	687b      	ldr	r3, [r7, #4]
 8055eba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8055ebe:	4618      	mov	r0, r3
 8055ec0:	f7ff ffb6 	bl	8055e30 <makeFreeRtosPriority>
 8055ec4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8055ec6:	687b      	ldr	r3, [r7, #4]
 8055ec8:	695b      	ldr	r3, [r3, #20]
 8055eca:	687a      	ldr	r2, [r7, #4]
 8055ecc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8055ece:	9202      	str	r2, [sp, #8]
 8055ed0:	9301      	str	r3, [sp, #4]
 8055ed2:	9100      	str	r1, [sp, #0]
 8055ed4:	683b      	ldr	r3, [r7, #0]
 8055ed6:	4632      	mov	r2, r6
 8055ed8:	4629      	mov	r1, r5
 8055eda:	4620      	mov	r0, r4
 8055edc:	f001 fb50 	bl	8057580 <xTaskCreateStatic>
 8055ee0:	4603      	mov	r3, r0
 8055ee2:	60fb      	str	r3, [r7, #12]
 8055ee4:	e01c      	b.n	8055f20 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8055ee6:	687b      	ldr	r3, [r7, #4]
 8055ee8:	685c      	ldr	r4, [r3, #4]
 8055eea:	687b      	ldr	r3, [r7, #4]
 8055eec:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8055eee:	687b      	ldr	r3, [r7, #4]
 8055ef0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8055ef2:	b29e      	uxth	r6, r3
 8055ef4:	687b      	ldr	r3, [r7, #4]
 8055ef6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8055efa:	4618      	mov	r0, r3
 8055efc:	f7ff ff98 	bl	8055e30 <makeFreeRtosPriority>
 8055f00:	4602      	mov	r2, r0
 8055f02:	f107 030c 	add.w	r3, r7, #12
 8055f06:	9301      	str	r3, [sp, #4]
 8055f08:	9200      	str	r2, [sp, #0]
 8055f0a:	683b      	ldr	r3, [r7, #0]
 8055f0c:	4632      	mov	r2, r6
 8055f0e:	4629      	mov	r1, r5
 8055f10:	4620      	mov	r0, r4
 8055f12:	f001 fb92 	bl	805763a <xTaskCreate>
 8055f16:	4603      	mov	r3, r0
 8055f18:	2b01      	cmp	r3, #1
 8055f1a:	d001      	beq.n	8055f20 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8055f1c:	2300      	movs	r3, #0
 8055f1e:	e000      	b.n	8055f22 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8055f20:	68fb      	ldr	r3, [r7, #12]
}
 8055f22:	4618      	mov	r0, r3
 8055f24:	3714      	adds	r7, #20
 8055f26:	46bd      	mov	sp, r7
 8055f28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08055f2a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8055f2a:	b580      	push	{r7, lr}
 8055f2c:	b084      	sub	sp, #16
 8055f2e:	af00      	add	r7, sp, #0
 8055f30:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8055f32:	687b      	ldr	r3, [r7, #4]
 8055f34:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8055f36:	68fb      	ldr	r3, [r7, #12]
 8055f38:	2b00      	cmp	r3, #0
 8055f3a:	d001      	beq.n	8055f40 <osDelay+0x16>
 8055f3c:	68fb      	ldr	r3, [r7, #12]
 8055f3e:	e000      	b.n	8055f42 <osDelay+0x18>
 8055f40:	2301      	movs	r3, #1
 8055f42:	4618      	mov	r0, r3
 8055f44:	f001 fcb0 	bl	80578a8 <vTaskDelay>
  
  return osOK;
 8055f48:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8055f4a:	4618      	mov	r0, r3
 8055f4c:	3710      	adds	r7, #16
 8055f4e:	46bd      	mov	sp, r7
 8055f50:	bd80      	pop	{r7, pc}
	...

08055f54 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8055f54:	b580      	push	{r7, lr}
 8055f56:	b086      	sub	sp, #24
 8055f58:	af02      	add	r7, sp, #8
 8055f5a:	60f8      	str	r0, [r7, #12]
 8055f5c:	460b      	mov	r3, r1
 8055f5e:	607a      	str	r2, [r7, #4]
 8055f60:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8055f62:	68fb      	ldr	r3, [r7, #12]
 8055f64:	685b      	ldr	r3, [r3, #4]
 8055f66:	2b00      	cmp	r3, #0
 8055f68:	d013      	beq.n	8055f92 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8055f6a:	7afb      	ldrb	r3, [r7, #11]
 8055f6c:	2b01      	cmp	r3, #1
 8055f6e:	d101      	bne.n	8055f74 <osTimerCreate+0x20>
 8055f70:	2101      	movs	r1, #1
 8055f72:	e000      	b.n	8055f76 <osTimerCreate+0x22>
 8055f74:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 8055f76:	68fb      	ldr	r3, [r7, #12]
 8055f78:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8055f7a:	68fa      	ldr	r2, [r7, #12]
 8055f7c:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8055f7e:	9201      	str	r2, [sp, #4]
 8055f80:	9300      	str	r3, [sp, #0]
 8055f82:	687b      	ldr	r3, [r7, #4]
 8055f84:	460a      	mov	r2, r1
 8055f86:	2101      	movs	r1, #1
 8055f88:	480b      	ldr	r0, [pc, #44]	; (8055fb8 <osTimerCreate+0x64>)
 8055f8a:	f002 fc66 	bl	805885a <xTimerCreateStatic>
 8055f8e:	4603      	mov	r3, r0
 8055f90:	e00e      	b.n	8055fb0 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8055f92:	7afb      	ldrb	r3, [r7, #11]
 8055f94:	2b01      	cmp	r3, #1
 8055f96:	d101      	bne.n	8055f9c <osTimerCreate+0x48>
 8055f98:	2201      	movs	r2, #1
 8055f9a:	e000      	b.n	8055f9e <osTimerCreate+0x4a>
 8055f9c:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8055f9e:	68fb      	ldr	r3, [r7, #12]
 8055fa0:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8055fa2:	9300      	str	r3, [sp, #0]
 8055fa4:	687b      	ldr	r3, [r7, #4]
 8055fa6:	2101      	movs	r1, #1
 8055fa8:	4803      	ldr	r0, [pc, #12]	; (8055fb8 <osTimerCreate+0x64>)
 8055faa:	f002 fc35 	bl	8058818 <xTimerCreate>
 8055fae:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8055fb0:	4618      	mov	r0, r3
 8055fb2:	3710      	adds	r7, #16
 8055fb4:	46bd      	mov	sp, r7
 8055fb6:	bd80      	pop	{r7, pc}
 8055fb8:	0805b8f0 	.word	0x0805b8f0

08055fbc <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8055fbc:	b580      	push	{r7, lr}
 8055fbe:	b082      	sub	sp, #8
 8055fc0:	af00      	add	r7, sp, #0
 8055fc2:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8055fc4:	687b      	ldr	r3, [r7, #4]
 8055fc6:	685b      	ldr	r3, [r3, #4]
 8055fc8:	2b00      	cmp	r3, #0
 8055fca:	d007      	beq.n	8055fdc <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8055fcc:	687b      	ldr	r3, [r7, #4]
 8055fce:	685b      	ldr	r3, [r3, #4]
 8055fd0:	4619      	mov	r1, r3
 8055fd2:	2001      	movs	r0, #1
 8055fd4:	f000 fc53 	bl	805687e <xQueueCreateMutexStatic>
 8055fd8:	4603      	mov	r3, r0
 8055fda:	e003      	b.n	8055fe4 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8055fdc:	2001      	movs	r0, #1
 8055fde:	f000 fc36 	bl	805684e <xQueueCreateMutex>
 8055fe2:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8055fe4:	4618      	mov	r0, r3
 8055fe6:	3708      	adds	r7, #8
 8055fe8:	46bd      	mov	sp, r7
 8055fea:	bd80      	pop	{r7, pc}

08055fec <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8055fec:	b580      	push	{r7, lr}
 8055fee:	b084      	sub	sp, #16
 8055ff0:	af00      	add	r7, sp, #0
 8055ff2:	6078      	str	r0, [r7, #4]
 8055ff4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8055ff6:	2300      	movs	r3, #0
 8055ff8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8055ffa:	687b      	ldr	r3, [r7, #4]
 8055ffc:	2b00      	cmp	r3, #0
 8055ffe:	d101      	bne.n	8056004 <osMutexWait+0x18>
    return osErrorParameter;
 8056000:	2380      	movs	r3, #128	; 0x80
 8056002:	e03a      	b.n	805607a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8056004:	2300      	movs	r3, #0
 8056006:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8056008:	683b      	ldr	r3, [r7, #0]
 805600a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 805600e:	d103      	bne.n	8056018 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8056010:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8056014:	60fb      	str	r3, [r7, #12]
 8056016:	e009      	b.n	805602c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8056018:	683b      	ldr	r3, [r7, #0]
 805601a:	2b00      	cmp	r3, #0
 805601c:	d006      	beq.n	805602c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 805601e:	683b      	ldr	r3, [r7, #0]
 8056020:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8056022:	68fb      	ldr	r3, [r7, #12]
 8056024:	2b00      	cmp	r3, #0
 8056026:	d101      	bne.n	805602c <osMutexWait+0x40>
      ticks = 1;
 8056028:	2301      	movs	r3, #1
 805602a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 805602c:	f7ff ff18 	bl	8055e60 <inHandlerMode>
 8056030:	4603      	mov	r3, r0
 8056032:	2b00      	cmp	r3, #0
 8056034:	d017      	beq.n	8056066 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8056036:	f107 0308 	add.w	r3, r7, #8
 805603a:	461a      	mov	r2, r3
 805603c:	2100      	movs	r1, #0
 805603e:	6878      	ldr	r0, [r7, #4]
 8056040:	f001 f84a 	bl	80570d8 <xQueueReceiveFromISR>
 8056044:	4603      	mov	r3, r0
 8056046:	2b01      	cmp	r3, #1
 8056048:	d001      	beq.n	805604e <osMutexWait+0x62>
      return osErrorOS;
 805604a:	23ff      	movs	r3, #255	; 0xff
 805604c:	e015      	b.n	805607a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 805604e:	68bb      	ldr	r3, [r7, #8]
 8056050:	2b00      	cmp	r3, #0
 8056052:	d011      	beq.n	8056078 <osMutexWait+0x8c>
 8056054:	4b0b      	ldr	r3, [pc, #44]	; (8056084 <osMutexWait+0x98>)
 8056056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 805605a:	601a      	str	r2, [r3, #0]
 805605c:	f3bf 8f4f 	dsb	sy
 8056060:	f3bf 8f6f 	isb	sy
 8056064:	e008      	b.n	8056078 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8056066:	68f9      	ldr	r1, [r7, #12]
 8056068:	6878      	ldr	r0, [r7, #4]
 805606a:	f000 ff29 	bl	8056ec0 <xQueueSemaphoreTake>
 805606e:	4603      	mov	r3, r0
 8056070:	2b01      	cmp	r3, #1
 8056072:	d001      	beq.n	8056078 <osMutexWait+0x8c>
    return osErrorOS;
 8056074:	23ff      	movs	r3, #255	; 0xff
 8056076:	e000      	b.n	805607a <osMutexWait+0x8e>
  }
  
  return osOK;
 8056078:	2300      	movs	r3, #0
}
 805607a:	4618      	mov	r0, r3
 805607c:	3710      	adds	r7, #16
 805607e:	46bd      	mov	sp, r7
 8056080:	bd80      	pop	{r7, pc}
 8056082:	bf00      	nop
 8056084:	e000ed04 	.word	0xe000ed04

08056088 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8056088:	b580      	push	{r7, lr}
 805608a:	b084      	sub	sp, #16
 805608c:	af00      	add	r7, sp, #0
 805608e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8056090:	2300      	movs	r3, #0
 8056092:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8056094:	2300      	movs	r3, #0
 8056096:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8056098:	f7ff fee2 	bl	8055e60 <inHandlerMode>
 805609c:	4603      	mov	r3, r0
 805609e:	2b00      	cmp	r3, #0
 80560a0:	d016      	beq.n	80560d0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80560a2:	f107 0308 	add.w	r3, r7, #8
 80560a6:	4619      	mov	r1, r3
 80560a8:	6878      	ldr	r0, [r7, #4]
 80560aa:	f000 fd9c 	bl	8056be6 <xQueueGiveFromISR>
 80560ae:	4603      	mov	r3, r0
 80560b0:	2b01      	cmp	r3, #1
 80560b2:	d001      	beq.n	80560b8 <osMutexRelease+0x30>
      return osErrorOS;
 80560b4:	23ff      	movs	r3, #255	; 0xff
 80560b6:	e017      	b.n	80560e8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80560b8:	68bb      	ldr	r3, [r7, #8]
 80560ba:	2b00      	cmp	r3, #0
 80560bc:	d013      	beq.n	80560e6 <osMutexRelease+0x5e>
 80560be:	4b0c      	ldr	r3, [pc, #48]	; (80560f0 <osMutexRelease+0x68>)
 80560c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80560c4:	601a      	str	r2, [r3, #0]
 80560c6:	f3bf 8f4f 	dsb	sy
 80560ca:	f3bf 8f6f 	isb	sy
 80560ce:	e00a      	b.n	80560e6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80560d0:	2300      	movs	r3, #0
 80560d2:	2200      	movs	r2, #0
 80560d4:	2100      	movs	r1, #0
 80560d6:	6878      	ldr	r0, [r7, #4]
 80560d8:	f000 fbec 	bl	80568b4 <xQueueGenericSend>
 80560dc:	4603      	mov	r3, r0
 80560de:	2b01      	cmp	r3, #1
 80560e0:	d001      	beq.n	80560e6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80560e2:	23ff      	movs	r3, #255	; 0xff
 80560e4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80560e6:	68fb      	ldr	r3, [r7, #12]
}
 80560e8:	4618      	mov	r0, r3
 80560ea:	3710      	adds	r7, #16
 80560ec:	46bd      	mov	sp, r7
 80560ee:	bd80      	pop	{r7, pc}
 80560f0:	e000ed04 	.word	0xe000ed04

080560f4 <osMutexDelete>:
* @param mutex_id  mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexDelete (osMutexId mutex_id)
{
 80560f4:	b580      	push	{r7, lr}
 80560f6:	b082      	sub	sp, #8
 80560f8:	af00      	add	r7, sp, #0
 80560fa:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80560fc:	f7ff feb0 	bl	8055e60 <inHandlerMode>
 8056100:	4603      	mov	r3, r0
 8056102:	2b00      	cmp	r3, #0
 8056104:	d001      	beq.n	805610a <osMutexDelete+0x16>
    return osErrorISR;
 8056106:	2382      	movs	r3, #130	; 0x82
 8056108:	e003      	b.n	8056112 <osMutexDelete+0x1e>
  }

  vQueueDelete(mutex_id);
 805610a:	6878      	ldr	r0, [r7, #4]
 805610c:	f001 f864 	bl	80571d8 <vQueueDelete>

  return osOK;
 8056110:	2300      	movs	r3, #0
}
 8056112:	4618      	mov	r0, r3
 8056114:	3708      	adds	r7, #8
 8056116:	46bd      	mov	sp, r7
 8056118:	bd80      	pop	{r7, pc}

0805611a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 805611a:	b580      	push	{r7, lr}
 805611c:	b086      	sub	sp, #24
 805611e:	af02      	add	r7, sp, #8
 8056120:	6078      	str	r0, [r7, #4]
 8056122:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8056124:	687b      	ldr	r3, [r7, #4]
 8056126:	685b      	ldr	r3, [r3, #4]
 8056128:	2b00      	cmp	r3, #0
 805612a:	d00f      	beq.n	805614c <osSemaphoreCreate+0x32>
    if (count == 1) {
 805612c:	683b      	ldr	r3, [r7, #0]
 805612e:	2b01      	cmp	r3, #1
 8056130:	d10a      	bne.n	8056148 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8056132:	687b      	ldr	r3, [r7, #4]
 8056134:	685b      	ldr	r3, [r3, #4]
 8056136:	2203      	movs	r2, #3
 8056138:	9200      	str	r2, [sp, #0]
 805613a:	2200      	movs	r2, #0
 805613c:	2100      	movs	r1, #0
 805613e:	2001      	movs	r0, #1
 8056140:	f000 fa9a 	bl	8056678 <xQueueGenericCreateStatic>
 8056144:	4603      	mov	r3, r0
 8056146:	e016      	b.n	8056176 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8056148:	2300      	movs	r3, #0
 805614a:	e014      	b.n	8056176 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 805614c:	683b      	ldr	r3, [r7, #0]
 805614e:	2b01      	cmp	r3, #1
 8056150:	d110      	bne.n	8056174 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8056152:	2203      	movs	r2, #3
 8056154:	2100      	movs	r1, #0
 8056156:	2001      	movs	r0, #1
 8056158:	f000 fb06 	bl	8056768 <xQueueGenericCreate>
 805615c:	60f8      	str	r0, [r7, #12]
 805615e:	68fb      	ldr	r3, [r7, #12]
 8056160:	2b00      	cmp	r3, #0
 8056162:	d005      	beq.n	8056170 <osSemaphoreCreate+0x56>
 8056164:	2300      	movs	r3, #0
 8056166:	2200      	movs	r2, #0
 8056168:	2100      	movs	r1, #0
 805616a:	68f8      	ldr	r0, [r7, #12]
 805616c:	f000 fba2 	bl	80568b4 <xQueueGenericSend>
      return sema;
 8056170:	68fb      	ldr	r3, [r7, #12]
 8056172:	e000      	b.n	8056176 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8056174:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8056176:	4618      	mov	r0, r3
 8056178:	3710      	adds	r7, #16
 805617a:	46bd      	mov	sp, r7
 805617c:	bd80      	pop	{r7, pc}
	...

08056180 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8056180:	b580      	push	{r7, lr}
 8056182:	b084      	sub	sp, #16
 8056184:	af00      	add	r7, sp, #0
 8056186:	6078      	str	r0, [r7, #4]
 8056188:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 805618a:	2300      	movs	r3, #0
 805618c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 805618e:	687b      	ldr	r3, [r7, #4]
 8056190:	2b00      	cmp	r3, #0
 8056192:	d101      	bne.n	8056198 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8056194:	2380      	movs	r3, #128	; 0x80
 8056196:	e03a      	b.n	805620e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8056198:	2300      	movs	r3, #0
 805619a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 805619c:	683b      	ldr	r3, [r7, #0]
 805619e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80561a2:	d103      	bne.n	80561ac <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80561a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80561a8:	60fb      	str	r3, [r7, #12]
 80561aa:	e009      	b.n	80561c0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80561ac:	683b      	ldr	r3, [r7, #0]
 80561ae:	2b00      	cmp	r3, #0
 80561b0:	d006      	beq.n	80561c0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80561b2:	683b      	ldr	r3, [r7, #0]
 80561b4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80561b6:	68fb      	ldr	r3, [r7, #12]
 80561b8:	2b00      	cmp	r3, #0
 80561ba:	d101      	bne.n	80561c0 <osSemaphoreWait+0x40>
      ticks = 1;
 80561bc:	2301      	movs	r3, #1
 80561be:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80561c0:	f7ff fe4e 	bl	8055e60 <inHandlerMode>
 80561c4:	4603      	mov	r3, r0
 80561c6:	2b00      	cmp	r3, #0
 80561c8:	d017      	beq.n	80561fa <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80561ca:	f107 0308 	add.w	r3, r7, #8
 80561ce:	461a      	mov	r2, r3
 80561d0:	2100      	movs	r1, #0
 80561d2:	6878      	ldr	r0, [r7, #4]
 80561d4:	f000 ff80 	bl	80570d8 <xQueueReceiveFromISR>
 80561d8:	4603      	mov	r3, r0
 80561da:	2b01      	cmp	r3, #1
 80561dc:	d001      	beq.n	80561e2 <osSemaphoreWait+0x62>
      return osErrorOS;
 80561de:	23ff      	movs	r3, #255	; 0xff
 80561e0:	e015      	b.n	805620e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80561e2:	68bb      	ldr	r3, [r7, #8]
 80561e4:	2b00      	cmp	r3, #0
 80561e6:	d011      	beq.n	805620c <osSemaphoreWait+0x8c>
 80561e8:	4b0b      	ldr	r3, [pc, #44]	; (8056218 <osSemaphoreWait+0x98>)
 80561ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80561ee:	601a      	str	r2, [r3, #0]
 80561f0:	f3bf 8f4f 	dsb	sy
 80561f4:	f3bf 8f6f 	isb	sy
 80561f8:	e008      	b.n	805620c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80561fa:	68f9      	ldr	r1, [r7, #12]
 80561fc:	6878      	ldr	r0, [r7, #4]
 80561fe:	f000 fe5f 	bl	8056ec0 <xQueueSemaphoreTake>
 8056202:	4603      	mov	r3, r0
 8056204:	2b01      	cmp	r3, #1
 8056206:	d001      	beq.n	805620c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8056208:	23ff      	movs	r3, #255	; 0xff
 805620a:	e000      	b.n	805620e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 805620c:	2300      	movs	r3, #0
}
 805620e:	4618      	mov	r0, r3
 8056210:	3710      	adds	r7, #16
 8056212:	46bd      	mov	sp, r7
 8056214:	bd80      	pop	{r7, pc}
 8056216:	bf00      	nop
 8056218:	e000ed04 	.word	0xe000ed04

0805621c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 805621c:	b580      	push	{r7, lr}
 805621e:	b084      	sub	sp, #16
 8056220:	af00      	add	r7, sp, #0
 8056222:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8056224:	2300      	movs	r3, #0
 8056226:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8056228:	2300      	movs	r3, #0
 805622a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 805622c:	f7ff fe18 	bl	8055e60 <inHandlerMode>
 8056230:	4603      	mov	r3, r0
 8056232:	2b00      	cmp	r3, #0
 8056234:	d016      	beq.n	8056264 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8056236:	f107 0308 	add.w	r3, r7, #8
 805623a:	4619      	mov	r1, r3
 805623c:	6878      	ldr	r0, [r7, #4]
 805623e:	f000 fcd2 	bl	8056be6 <xQueueGiveFromISR>
 8056242:	4603      	mov	r3, r0
 8056244:	2b01      	cmp	r3, #1
 8056246:	d001      	beq.n	805624c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8056248:	23ff      	movs	r3, #255	; 0xff
 805624a:	e017      	b.n	805627c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 805624c:	68bb      	ldr	r3, [r7, #8]
 805624e:	2b00      	cmp	r3, #0
 8056250:	d013      	beq.n	805627a <osSemaphoreRelease+0x5e>
 8056252:	4b0c      	ldr	r3, [pc, #48]	; (8056284 <osSemaphoreRelease+0x68>)
 8056254:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8056258:	601a      	str	r2, [r3, #0]
 805625a:	f3bf 8f4f 	dsb	sy
 805625e:	f3bf 8f6f 	isb	sy
 8056262:	e00a      	b.n	805627a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8056264:	2300      	movs	r3, #0
 8056266:	2200      	movs	r2, #0
 8056268:	2100      	movs	r1, #0
 805626a:	6878      	ldr	r0, [r7, #4]
 805626c:	f000 fb22 	bl	80568b4 <xQueueGenericSend>
 8056270:	4603      	mov	r3, r0
 8056272:	2b01      	cmp	r3, #1
 8056274:	d001      	beq.n	805627a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8056276:	23ff      	movs	r3, #255	; 0xff
 8056278:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 805627a:	68fb      	ldr	r3, [r7, #12]
}
 805627c:	4618      	mov	r0, r3
 805627e:	3710      	adds	r7, #16
 8056280:	46bd      	mov	sp, r7
 8056282:	bd80      	pop	{r7, pc}
 8056284:	e000ed04 	.word	0xe000ed04

08056288 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8056288:	b590      	push	{r4, r7, lr}
 805628a:	b085      	sub	sp, #20
 805628c:	af02      	add	r7, sp, #8
 805628e:	6078      	str	r0, [r7, #4]
 8056290:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8056292:	687b      	ldr	r3, [r7, #4]
 8056294:	689b      	ldr	r3, [r3, #8]
 8056296:	2b00      	cmp	r3, #0
 8056298:	d011      	beq.n	80562be <osMessageCreate+0x36>
 805629a:	687b      	ldr	r3, [r7, #4]
 805629c:	68db      	ldr	r3, [r3, #12]
 805629e:	2b00      	cmp	r3, #0
 80562a0:	d00d      	beq.n	80562be <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80562a2:	687b      	ldr	r3, [r7, #4]
 80562a4:	6818      	ldr	r0, [r3, #0]
 80562a6:	687b      	ldr	r3, [r7, #4]
 80562a8:	6859      	ldr	r1, [r3, #4]
 80562aa:	687b      	ldr	r3, [r7, #4]
 80562ac:	689a      	ldr	r2, [r3, #8]
 80562ae:	687b      	ldr	r3, [r7, #4]
 80562b0:	68db      	ldr	r3, [r3, #12]
 80562b2:	2400      	movs	r4, #0
 80562b4:	9400      	str	r4, [sp, #0]
 80562b6:	f000 f9df 	bl	8056678 <xQueueGenericCreateStatic>
 80562ba:	4603      	mov	r3, r0
 80562bc:	e008      	b.n	80562d0 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80562be:	687b      	ldr	r3, [r7, #4]
 80562c0:	6818      	ldr	r0, [r3, #0]
 80562c2:	687b      	ldr	r3, [r7, #4]
 80562c4:	685b      	ldr	r3, [r3, #4]
 80562c6:	2200      	movs	r2, #0
 80562c8:	4619      	mov	r1, r3
 80562ca:	f000 fa4d 	bl	8056768 <xQueueGenericCreate>
 80562ce:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80562d0:	4618      	mov	r0, r3
 80562d2:	370c      	adds	r7, #12
 80562d4:	46bd      	mov	sp, r7
 80562d6:	bd90      	pop	{r4, r7, pc}

080562d8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80562d8:	b580      	push	{r7, lr}
 80562da:	b086      	sub	sp, #24
 80562dc:	af00      	add	r7, sp, #0
 80562de:	60f8      	str	r0, [r7, #12]
 80562e0:	60b9      	str	r1, [r7, #8]
 80562e2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80562e4:	2300      	movs	r3, #0
 80562e6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80562e8:	687b      	ldr	r3, [r7, #4]
 80562ea:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80562ec:	697b      	ldr	r3, [r7, #20]
 80562ee:	2b00      	cmp	r3, #0
 80562f0:	d101      	bne.n	80562f6 <osMessagePut+0x1e>
    ticks = 1;
 80562f2:	2301      	movs	r3, #1
 80562f4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80562f6:	f7ff fdb3 	bl	8055e60 <inHandlerMode>
 80562fa:	4603      	mov	r3, r0
 80562fc:	2b00      	cmp	r3, #0
 80562fe:	d018      	beq.n	8056332 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8056300:	f107 0210 	add.w	r2, r7, #16
 8056304:	f107 0108 	add.w	r1, r7, #8
 8056308:	2300      	movs	r3, #0
 805630a:	68f8      	ldr	r0, [r7, #12]
 805630c:	f000 fbd0 	bl	8056ab0 <xQueueGenericSendFromISR>
 8056310:	4603      	mov	r3, r0
 8056312:	2b01      	cmp	r3, #1
 8056314:	d001      	beq.n	805631a <osMessagePut+0x42>
      return osErrorOS;
 8056316:	23ff      	movs	r3, #255	; 0xff
 8056318:	e018      	b.n	805634c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 805631a:	693b      	ldr	r3, [r7, #16]
 805631c:	2b00      	cmp	r3, #0
 805631e:	d014      	beq.n	805634a <osMessagePut+0x72>
 8056320:	4b0c      	ldr	r3, [pc, #48]	; (8056354 <osMessagePut+0x7c>)
 8056322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8056326:	601a      	str	r2, [r3, #0]
 8056328:	f3bf 8f4f 	dsb	sy
 805632c:	f3bf 8f6f 	isb	sy
 8056330:	e00b      	b.n	805634a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8056332:	f107 0108 	add.w	r1, r7, #8
 8056336:	2300      	movs	r3, #0
 8056338:	697a      	ldr	r2, [r7, #20]
 805633a:	68f8      	ldr	r0, [r7, #12]
 805633c:	f000 faba 	bl	80568b4 <xQueueGenericSend>
 8056340:	4603      	mov	r3, r0
 8056342:	2b01      	cmp	r3, #1
 8056344:	d001      	beq.n	805634a <osMessagePut+0x72>
      return osErrorOS;
 8056346:	23ff      	movs	r3, #255	; 0xff
 8056348:	e000      	b.n	805634c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 805634a:	2300      	movs	r3, #0
}
 805634c:	4618      	mov	r0, r3
 805634e:	3718      	adds	r7, #24
 8056350:	46bd      	mov	sp, r7
 8056352:	bd80      	pop	{r7, pc}
 8056354:	e000ed04 	.word	0xe000ed04

08056358 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8056358:	b590      	push	{r4, r7, lr}
 805635a:	b08b      	sub	sp, #44	; 0x2c
 805635c:	af00      	add	r7, sp, #0
 805635e:	60f8      	str	r0, [r7, #12]
 8056360:	60b9      	str	r1, [r7, #8]
 8056362:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8056364:	68bb      	ldr	r3, [r7, #8]
 8056366:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8056368:	2300      	movs	r3, #0
 805636a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 805636c:	68bb      	ldr	r3, [r7, #8]
 805636e:	2b00      	cmp	r3, #0
 8056370:	d10a      	bne.n	8056388 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8056372:	2380      	movs	r3, #128	; 0x80
 8056374:	617b      	str	r3, [r7, #20]
    return event;
 8056376:	68fb      	ldr	r3, [r7, #12]
 8056378:	461c      	mov	r4, r3
 805637a:	f107 0314 	add.w	r3, r7, #20
 805637e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8056382:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8056386:	e054      	b.n	8056432 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8056388:	2300      	movs	r3, #0
 805638a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 805638c:	2300      	movs	r3, #0
 805638e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8056390:	687b      	ldr	r3, [r7, #4]
 8056392:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8056396:	d103      	bne.n	80563a0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8056398:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 805639c:	627b      	str	r3, [r7, #36]	; 0x24
 805639e:	e009      	b.n	80563b4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80563a0:	687b      	ldr	r3, [r7, #4]
 80563a2:	2b00      	cmp	r3, #0
 80563a4:	d006      	beq.n	80563b4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80563a6:	687b      	ldr	r3, [r7, #4]
 80563a8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80563aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80563ac:	2b00      	cmp	r3, #0
 80563ae:	d101      	bne.n	80563b4 <osMessageGet+0x5c>
      ticks = 1;
 80563b0:	2301      	movs	r3, #1
 80563b2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80563b4:	f7ff fd54 	bl	8055e60 <inHandlerMode>
 80563b8:	4603      	mov	r3, r0
 80563ba:	2b00      	cmp	r3, #0
 80563bc:	d01c      	beq.n	80563f8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80563be:	f107 0220 	add.w	r2, r7, #32
 80563c2:	f107 0314 	add.w	r3, r7, #20
 80563c6:	3304      	adds	r3, #4
 80563c8:	4619      	mov	r1, r3
 80563ca:	68b8      	ldr	r0, [r7, #8]
 80563cc:	f000 fe84 	bl	80570d8 <xQueueReceiveFromISR>
 80563d0:	4603      	mov	r3, r0
 80563d2:	2b01      	cmp	r3, #1
 80563d4:	d102      	bne.n	80563dc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80563d6:	2310      	movs	r3, #16
 80563d8:	617b      	str	r3, [r7, #20]
 80563da:	e001      	b.n	80563e0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80563dc:	2300      	movs	r3, #0
 80563de:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80563e0:	6a3b      	ldr	r3, [r7, #32]
 80563e2:	2b00      	cmp	r3, #0
 80563e4:	d01d      	beq.n	8056422 <osMessageGet+0xca>
 80563e6:	4b15      	ldr	r3, [pc, #84]	; (805643c <osMessageGet+0xe4>)
 80563e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80563ec:	601a      	str	r2, [r3, #0]
 80563ee:	f3bf 8f4f 	dsb	sy
 80563f2:	f3bf 8f6f 	isb	sy
 80563f6:	e014      	b.n	8056422 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80563f8:	f107 0314 	add.w	r3, r7, #20
 80563fc:	3304      	adds	r3, #4
 80563fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8056400:	4619      	mov	r1, r3
 8056402:	68b8      	ldr	r0, [r7, #8]
 8056404:	f000 fc7c 	bl	8056d00 <xQueueReceive>
 8056408:	4603      	mov	r3, r0
 805640a:	2b01      	cmp	r3, #1
 805640c:	d102      	bne.n	8056414 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 805640e:	2310      	movs	r3, #16
 8056410:	617b      	str	r3, [r7, #20]
 8056412:	e006      	b.n	8056422 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8056414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8056416:	2b00      	cmp	r3, #0
 8056418:	d101      	bne.n	805641e <osMessageGet+0xc6>
 805641a:	2300      	movs	r3, #0
 805641c:	e000      	b.n	8056420 <osMessageGet+0xc8>
 805641e:	2340      	movs	r3, #64	; 0x40
 8056420:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8056422:	68fb      	ldr	r3, [r7, #12]
 8056424:	461c      	mov	r4, r3
 8056426:	f107 0314 	add.w	r3, r7, #20
 805642a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 805642e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8056432:	68f8      	ldr	r0, [r7, #12]
 8056434:	372c      	adds	r7, #44	; 0x2c
 8056436:	46bd      	mov	sp, r7
 8056438:	bd90      	pop	{r4, r7, pc}
 805643a:	bf00      	nop
 805643c:	e000ed04 	.word	0xe000ed04

08056440 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8056440:	b480      	push	{r7}
 8056442:	b083      	sub	sp, #12
 8056444:	af00      	add	r7, sp, #0
 8056446:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8056448:	687b      	ldr	r3, [r7, #4]
 805644a:	f103 0208 	add.w	r2, r3, #8
 805644e:	687b      	ldr	r3, [r7, #4]
 8056450:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8056452:	687b      	ldr	r3, [r7, #4]
 8056454:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8056458:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 805645a:	687b      	ldr	r3, [r7, #4]
 805645c:	f103 0208 	add.w	r2, r3, #8
 8056460:	687b      	ldr	r3, [r7, #4]
 8056462:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8056464:	687b      	ldr	r3, [r7, #4]
 8056466:	f103 0208 	add.w	r2, r3, #8
 805646a:	687b      	ldr	r3, [r7, #4]
 805646c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 805646e:	687b      	ldr	r3, [r7, #4]
 8056470:	2200      	movs	r2, #0
 8056472:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8056474:	bf00      	nop
 8056476:	370c      	adds	r7, #12
 8056478:	46bd      	mov	sp, r7
 805647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 805647e:	4770      	bx	lr

08056480 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8056480:	b480      	push	{r7}
 8056482:	b083      	sub	sp, #12
 8056484:	af00      	add	r7, sp, #0
 8056486:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8056488:	687b      	ldr	r3, [r7, #4]
 805648a:	2200      	movs	r2, #0
 805648c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 805648e:	bf00      	nop
 8056490:	370c      	adds	r7, #12
 8056492:	46bd      	mov	sp, r7
 8056494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8056498:	4770      	bx	lr

0805649a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 805649a:	b480      	push	{r7}
 805649c:	b085      	sub	sp, #20
 805649e:	af00      	add	r7, sp, #0
 80564a0:	6078      	str	r0, [r7, #4]
 80564a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80564a4:	687b      	ldr	r3, [r7, #4]
 80564a6:	685b      	ldr	r3, [r3, #4]
 80564a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80564aa:	683b      	ldr	r3, [r7, #0]
 80564ac:	68fa      	ldr	r2, [r7, #12]
 80564ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80564b0:	68fb      	ldr	r3, [r7, #12]
 80564b2:	689a      	ldr	r2, [r3, #8]
 80564b4:	683b      	ldr	r3, [r7, #0]
 80564b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80564b8:	68fb      	ldr	r3, [r7, #12]
 80564ba:	689b      	ldr	r3, [r3, #8]
 80564bc:	683a      	ldr	r2, [r7, #0]
 80564be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80564c0:	68fb      	ldr	r3, [r7, #12]
 80564c2:	683a      	ldr	r2, [r7, #0]
 80564c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80564c6:	683b      	ldr	r3, [r7, #0]
 80564c8:	687a      	ldr	r2, [r7, #4]
 80564ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80564cc:	687b      	ldr	r3, [r7, #4]
 80564ce:	681b      	ldr	r3, [r3, #0]
 80564d0:	1c5a      	adds	r2, r3, #1
 80564d2:	687b      	ldr	r3, [r7, #4]
 80564d4:	601a      	str	r2, [r3, #0]
}
 80564d6:	bf00      	nop
 80564d8:	3714      	adds	r7, #20
 80564da:	46bd      	mov	sp, r7
 80564dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80564e0:	4770      	bx	lr

080564e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80564e2:	b480      	push	{r7}
 80564e4:	b085      	sub	sp, #20
 80564e6:	af00      	add	r7, sp, #0
 80564e8:	6078      	str	r0, [r7, #4]
 80564ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80564ec:	683b      	ldr	r3, [r7, #0]
 80564ee:	681b      	ldr	r3, [r3, #0]
 80564f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80564f2:	68bb      	ldr	r3, [r7, #8]
 80564f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80564f8:	d103      	bne.n	8056502 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80564fa:	687b      	ldr	r3, [r7, #4]
 80564fc:	691b      	ldr	r3, [r3, #16]
 80564fe:	60fb      	str	r3, [r7, #12]
 8056500:	e00c      	b.n	805651c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8056502:	687b      	ldr	r3, [r7, #4]
 8056504:	3308      	adds	r3, #8
 8056506:	60fb      	str	r3, [r7, #12]
 8056508:	e002      	b.n	8056510 <vListInsert+0x2e>
 805650a:	68fb      	ldr	r3, [r7, #12]
 805650c:	685b      	ldr	r3, [r3, #4]
 805650e:	60fb      	str	r3, [r7, #12]
 8056510:	68fb      	ldr	r3, [r7, #12]
 8056512:	685b      	ldr	r3, [r3, #4]
 8056514:	681b      	ldr	r3, [r3, #0]
 8056516:	68ba      	ldr	r2, [r7, #8]
 8056518:	429a      	cmp	r2, r3
 805651a:	d2f6      	bcs.n	805650a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 805651c:	68fb      	ldr	r3, [r7, #12]
 805651e:	685a      	ldr	r2, [r3, #4]
 8056520:	683b      	ldr	r3, [r7, #0]
 8056522:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8056524:	683b      	ldr	r3, [r7, #0]
 8056526:	685b      	ldr	r3, [r3, #4]
 8056528:	683a      	ldr	r2, [r7, #0]
 805652a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 805652c:	683b      	ldr	r3, [r7, #0]
 805652e:	68fa      	ldr	r2, [r7, #12]
 8056530:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8056532:	68fb      	ldr	r3, [r7, #12]
 8056534:	683a      	ldr	r2, [r7, #0]
 8056536:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8056538:	683b      	ldr	r3, [r7, #0]
 805653a:	687a      	ldr	r2, [r7, #4]
 805653c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 805653e:	687b      	ldr	r3, [r7, #4]
 8056540:	681b      	ldr	r3, [r3, #0]
 8056542:	1c5a      	adds	r2, r3, #1
 8056544:	687b      	ldr	r3, [r7, #4]
 8056546:	601a      	str	r2, [r3, #0]
}
 8056548:	bf00      	nop
 805654a:	3714      	adds	r7, #20
 805654c:	46bd      	mov	sp, r7
 805654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8056552:	4770      	bx	lr

08056554 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8056554:	b480      	push	{r7}
 8056556:	b085      	sub	sp, #20
 8056558:	af00      	add	r7, sp, #0
 805655a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 805655c:	687b      	ldr	r3, [r7, #4]
 805655e:	691b      	ldr	r3, [r3, #16]
 8056560:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8056562:	687b      	ldr	r3, [r7, #4]
 8056564:	685b      	ldr	r3, [r3, #4]
 8056566:	687a      	ldr	r2, [r7, #4]
 8056568:	6892      	ldr	r2, [r2, #8]
 805656a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 805656c:	687b      	ldr	r3, [r7, #4]
 805656e:	689b      	ldr	r3, [r3, #8]
 8056570:	687a      	ldr	r2, [r7, #4]
 8056572:	6852      	ldr	r2, [r2, #4]
 8056574:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8056576:	68fb      	ldr	r3, [r7, #12]
 8056578:	685b      	ldr	r3, [r3, #4]
 805657a:	687a      	ldr	r2, [r7, #4]
 805657c:	429a      	cmp	r2, r3
 805657e:	d103      	bne.n	8056588 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8056580:	687b      	ldr	r3, [r7, #4]
 8056582:	689a      	ldr	r2, [r3, #8]
 8056584:	68fb      	ldr	r3, [r7, #12]
 8056586:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8056588:	687b      	ldr	r3, [r7, #4]
 805658a:	2200      	movs	r2, #0
 805658c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 805658e:	68fb      	ldr	r3, [r7, #12]
 8056590:	681b      	ldr	r3, [r3, #0]
 8056592:	1e5a      	subs	r2, r3, #1
 8056594:	68fb      	ldr	r3, [r7, #12]
 8056596:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8056598:	68fb      	ldr	r3, [r7, #12]
 805659a:	681b      	ldr	r3, [r3, #0]
}
 805659c:	4618      	mov	r0, r3
 805659e:	3714      	adds	r7, #20
 80565a0:	46bd      	mov	sp, r7
 80565a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80565a6:	4770      	bx	lr

080565a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80565a8:	b580      	push	{r7, lr}
 80565aa:	b084      	sub	sp, #16
 80565ac:	af00      	add	r7, sp, #0
 80565ae:	6078      	str	r0, [r7, #4]
 80565b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80565b2:	687b      	ldr	r3, [r7, #4]
 80565b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80565b6:	68fb      	ldr	r3, [r7, #12]
 80565b8:	2b00      	cmp	r3, #0
 80565ba:	d10a      	bne.n	80565d2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80565bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80565c0:	f383 8811 	msr	BASEPRI, r3
 80565c4:	f3bf 8f6f 	isb	sy
 80565c8:	f3bf 8f4f 	dsb	sy
 80565cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80565ce:	bf00      	nop
 80565d0:	e7fe      	b.n	80565d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80565d2:	f002 fdef 	bl	80591b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80565d6:	68fb      	ldr	r3, [r7, #12]
 80565d8:	681a      	ldr	r2, [r3, #0]
 80565da:	68fb      	ldr	r3, [r7, #12]
 80565dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80565de:	68f9      	ldr	r1, [r7, #12]
 80565e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80565e2:	fb01 f303 	mul.w	r3, r1, r3
 80565e6:	441a      	add	r2, r3
 80565e8:	68fb      	ldr	r3, [r7, #12]
 80565ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80565ec:	68fb      	ldr	r3, [r7, #12]
 80565ee:	2200      	movs	r2, #0
 80565f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80565f2:	68fb      	ldr	r3, [r7, #12]
 80565f4:	681a      	ldr	r2, [r3, #0]
 80565f6:	68fb      	ldr	r3, [r7, #12]
 80565f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80565fa:	68fb      	ldr	r3, [r7, #12]
 80565fc:	681a      	ldr	r2, [r3, #0]
 80565fe:	68fb      	ldr	r3, [r7, #12]
 8056600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8056602:	3b01      	subs	r3, #1
 8056604:	68f9      	ldr	r1, [r7, #12]
 8056606:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8056608:	fb01 f303 	mul.w	r3, r1, r3
 805660c:	441a      	add	r2, r3
 805660e:	68fb      	ldr	r3, [r7, #12]
 8056610:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8056612:	68fb      	ldr	r3, [r7, #12]
 8056614:	22ff      	movs	r2, #255	; 0xff
 8056616:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 805661a:	68fb      	ldr	r3, [r7, #12]
 805661c:	22ff      	movs	r2, #255	; 0xff
 805661e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8056622:	683b      	ldr	r3, [r7, #0]
 8056624:	2b00      	cmp	r3, #0
 8056626:	d114      	bne.n	8056652 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8056628:	68fb      	ldr	r3, [r7, #12]
 805662a:	691b      	ldr	r3, [r3, #16]
 805662c:	2b00      	cmp	r3, #0
 805662e:	d01a      	beq.n	8056666 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8056630:	68fb      	ldr	r3, [r7, #12]
 8056632:	3310      	adds	r3, #16
 8056634:	4618      	mov	r0, r3
 8056636:	f001 fbef 	bl	8057e18 <xTaskRemoveFromEventList>
 805663a:	4603      	mov	r3, r0
 805663c:	2b00      	cmp	r3, #0
 805663e:	d012      	beq.n	8056666 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8056640:	4b0c      	ldr	r3, [pc, #48]	; (8056674 <xQueueGenericReset+0xcc>)
 8056642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8056646:	601a      	str	r2, [r3, #0]
 8056648:	f3bf 8f4f 	dsb	sy
 805664c:	f3bf 8f6f 	isb	sy
 8056650:	e009      	b.n	8056666 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8056652:	68fb      	ldr	r3, [r7, #12]
 8056654:	3310      	adds	r3, #16
 8056656:	4618      	mov	r0, r3
 8056658:	f7ff fef2 	bl	8056440 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 805665c:	68fb      	ldr	r3, [r7, #12]
 805665e:	3324      	adds	r3, #36	; 0x24
 8056660:	4618      	mov	r0, r3
 8056662:	f7ff feed 	bl	8056440 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8056666:	f002 fdd5 	bl	8059214 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 805666a:	2301      	movs	r3, #1
}
 805666c:	4618      	mov	r0, r3
 805666e:	3710      	adds	r7, #16
 8056670:	46bd      	mov	sp, r7
 8056672:	bd80      	pop	{r7, pc}
 8056674:	e000ed04 	.word	0xe000ed04

08056678 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8056678:	b580      	push	{r7, lr}
 805667a:	b08e      	sub	sp, #56	; 0x38
 805667c:	af02      	add	r7, sp, #8
 805667e:	60f8      	str	r0, [r7, #12]
 8056680:	60b9      	str	r1, [r7, #8]
 8056682:	607a      	str	r2, [r7, #4]
 8056684:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8056686:	68fb      	ldr	r3, [r7, #12]
 8056688:	2b00      	cmp	r3, #0
 805668a:	d10a      	bne.n	80566a2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 805668c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8056690:	f383 8811 	msr	BASEPRI, r3
 8056694:	f3bf 8f6f 	isb	sy
 8056698:	f3bf 8f4f 	dsb	sy
 805669c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 805669e:	bf00      	nop
 80566a0:	e7fe      	b.n	80566a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80566a2:	683b      	ldr	r3, [r7, #0]
 80566a4:	2b00      	cmp	r3, #0
 80566a6:	d10a      	bne.n	80566be <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80566a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80566ac:	f383 8811 	msr	BASEPRI, r3
 80566b0:	f3bf 8f6f 	isb	sy
 80566b4:	f3bf 8f4f 	dsb	sy
 80566b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80566ba:	bf00      	nop
 80566bc:	e7fe      	b.n	80566bc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80566be:	687b      	ldr	r3, [r7, #4]
 80566c0:	2b00      	cmp	r3, #0
 80566c2:	d002      	beq.n	80566ca <xQueueGenericCreateStatic+0x52>
 80566c4:	68bb      	ldr	r3, [r7, #8]
 80566c6:	2b00      	cmp	r3, #0
 80566c8:	d001      	beq.n	80566ce <xQueueGenericCreateStatic+0x56>
 80566ca:	2301      	movs	r3, #1
 80566cc:	e000      	b.n	80566d0 <xQueueGenericCreateStatic+0x58>
 80566ce:	2300      	movs	r3, #0
 80566d0:	2b00      	cmp	r3, #0
 80566d2:	d10a      	bne.n	80566ea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80566d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80566d8:	f383 8811 	msr	BASEPRI, r3
 80566dc:	f3bf 8f6f 	isb	sy
 80566e0:	f3bf 8f4f 	dsb	sy
 80566e4:	623b      	str	r3, [r7, #32]
}
 80566e6:	bf00      	nop
 80566e8:	e7fe      	b.n	80566e8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80566ea:	687b      	ldr	r3, [r7, #4]
 80566ec:	2b00      	cmp	r3, #0
 80566ee:	d102      	bne.n	80566f6 <xQueueGenericCreateStatic+0x7e>
 80566f0:	68bb      	ldr	r3, [r7, #8]
 80566f2:	2b00      	cmp	r3, #0
 80566f4:	d101      	bne.n	80566fa <xQueueGenericCreateStatic+0x82>
 80566f6:	2301      	movs	r3, #1
 80566f8:	e000      	b.n	80566fc <xQueueGenericCreateStatic+0x84>
 80566fa:	2300      	movs	r3, #0
 80566fc:	2b00      	cmp	r3, #0
 80566fe:	d10a      	bne.n	8056716 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8056700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8056704:	f383 8811 	msr	BASEPRI, r3
 8056708:	f3bf 8f6f 	isb	sy
 805670c:	f3bf 8f4f 	dsb	sy
 8056710:	61fb      	str	r3, [r7, #28]
}
 8056712:	bf00      	nop
 8056714:	e7fe      	b.n	8056714 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8056716:	2348      	movs	r3, #72	; 0x48
 8056718:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 805671a:	697b      	ldr	r3, [r7, #20]
 805671c:	2b48      	cmp	r3, #72	; 0x48
 805671e:	d00a      	beq.n	8056736 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8056720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8056724:	f383 8811 	msr	BASEPRI, r3
 8056728:	f3bf 8f6f 	isb	sy
 805672c:	f3bf 8f4f 	dsb	sy
 8056730:	61bb      	str	r3, [r7, #24]
}
 8056732:	bf00      	nop
 8056734:	e7fe      	b.n	8056734 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8056736:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8056738:	683b      	ldr	r3, [r7, #0]
 805673a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 805673c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 805673e:	2b00      	cmp	r3, #0
 8056740:	d00d      	beq.n	805675e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8056742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8056744:	2201      	movs	r2, #1
 8056746:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 805674a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 805674e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8056750:	9300      	str	r3, [sp, #0]
 8056752:	4613      	mov	r3, r2
 8056754:	687a      	ldr	r2, [r7, #4]
 8056756:	68b9      	ldr	r1, [r7, #8]
 8056758:	68f8      	ldr	r0, [r7, #12]
 805675a:	f000 f83f 	bl	80567dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 805675e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8056760:	4618      	mov	r0, r3
 8056762:	3730      	adds	r7, #48	; 0x30
 8056764:	46bd      	mov	sp, r7
 8056766:	bd80      	pop	{r7, pc}

08056768 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8056768:	b580      	push	{r7, lr}
 805676a:	b08a      	sub	sp, #40	; 0x28
 805676c:	af02      	add	r7, sp, #8
 805676e:	60f8      	str	r0, [r7, #12]
 8056770:	60b9      	str	r1, [r7, #8]
 8056772:	4613      	mov	r3, r2
 8056774:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8056776:	68fb      	ldr	r3, [r7, #12]
 8056778:	2b00      	cmp	r3, #0
 805677a:	d10a      	bne.n	8056792 <xQueueGenericCreate+0x2a>
	__asm volatile
 805677c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8056780:	f383 8811 	msr	BASEPRI, r3
 8056784:	f3bf 8f6f 	isb	sy
 8056788:	f3bf 8f4f 	dsb	sy
 805678c:	613b      	str	r3, [r7, #16]
}
 805678e:	bf00      	nop
 8056790:	e7fe      	b.n	8056790 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8056792:	68fb      	ldr	r3, [r7, #12]
 8056794:	68ba      	ldr	r2, [r7, #8]
 8056796:	fb02 f303 	mul.w	r3, r2, r3
 805679a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 805679c:	69fb      	ldr	r3, [r7, #28]
 805679e:	3348      	adds	r3, #72	; 0x48
 80567a0:	4618      	mov	r0, r3
 80567a2:	f002 fe29 	bl	80593f8 <pvPortMalloc>
 80567a6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80567a8:	69bb      	ldr	r3, [r7, #24]
 80567aa:	2b00      	cmp	r3, #0
 80567ac:	d011      	beq.n	80567d2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80567ae:	69bb      	ldr	r3, [r7, #24]
 80567b0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80567b2:	697b      	ldr	r3, [r7, #20]
 80567b4:	3348      	adds	r3, #72	; 0x48
 80567b6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80567b8:	69bb      	ldr	r3, [r7, #24]
 80567ba:	2200      	movs	r2, #0
 80567bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80567c0:	79fa      	ldrb	r2, [r7, #7]
 80567c2:	69bb      	ldr	r3, [r7, #24]
 80567c4:	9300      	str	r3, [sp, #0]
 80567c6:	4613      	mov	r3, r2
 80567c8:	697a      	ldr	r2, [r7, #20]
 80567ca:	68b9      	ldr	r1, [r7, #8]
 80567cc:	68f8      	ldr	r0, [r7, #12]
 80567ce:	f000 f805 	bl	80567dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80567d2:	69bb      	ldr	r3, [r7, #24]
	}
 80567d4:	4618      	mov	r0, r3
 80567d6:	3720      	adds	r7, #32
 80567d8:	46bd      	mov	sp, r7
 80567da:	bd80      	pop	{r7, pc}

080567dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80567dc:	b580      	push	{r7, lr}
 80567de:	b084      	sub	sp, #16
 80567e0:	af00      	add	r7, sp, #0
 80567e2:	60f8      	str	r0, [r7, #12]
 80567e4:	60b9      	str	r1, [r7, #8]
 80567e6:	607a      	str	r2, [r7, #4]
 80567e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80567ea:	68bb      	ldr	r3, [r7, #8]
 80567ec:	2b00      	cmp	r3, #0
 80567ee:	d103      	bne.n	80567f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80567f0:	69bb      	ldr	r3, [r7, #24]
 80567f2:	69ba      	ldr	r2, [r7, #24]
 80567f4:	601a      	str	r2, [r3, #0]
 80567f6:	e002      	b.n	80567fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80567f8:	69bb      	ldr	r3, [r7, #24]
 80567fa:	687a      	ldr	r2, [r7, #4]
 80567fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80567fe:	69bb      	ldr	r3, [r7, #24]
 8056800:	68fa      	ldr	r2, [r7, #12]
 8056802:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8056804:	69bb      	ldr	r3, [r7, #24]
 8056806:	68ba      	ldr	r2, [r7, #8]
 8056808:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 805680a:	2101      	movs	r1, #1
 805680c:	69b8      	ldr	r0, [r7, #24]
 805680e:	f7ff fecb 	bl	80565a8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8056812:	bf00      	nop
 8056814:	3710      	adds	r7, #16
 8056816:	46bd      	mov	sp, r7
 8056818:	bd80      	pop	{r7, pc}

0805681a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 805681a:	b580      	push	{r7, lr}
 805681c:	b082      	sub	sp, #8
 805681e:	af00      	add	r7, sp, #0
 8056820:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8056822:	687b      	ldr	r3, [r7, #4]
 8056824:	2b00      	cmp	r3, #0
 8056826:	d00e      	beq.n	8056846 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8056828:	687b      	ldr	r3, [r7, #4]
 805682a:	2200      	movs	r2, #0
 805682c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 805682e:	687b      	ldr	r3, [r7, #4]
 8056830:	2200      	movs	r2, #0
 8056832:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8056834:	687b      	ldr	r3, [r7, #4]
 8056836:	2200      	movs	r2, #0
 8056838:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 805683a:	2300      	movs	r3, #0
 805683c:	2200      	movs	r2, #0
 805683e:	2100      	movs	r1, #0
 8056840:	6878      	ldr	r0, [r7, #4]
 8056842:	f000 f837 	bl	80568b4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8056846:	bf00      	nop
 8056848:	3708      	adds	r7, #8
 805684a:	46bd      	mov	sp, r7
 805684c:	bd80      	pop	{r7, pc}

0805684e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 805684e:	b580      	push	{r7, lr}
 8056850:	b086      	sub	sp, #24
 8056852:	af00      	add	r7, sp, #0
 8056854:	4603      	mov	r3, r0
 8056856:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8056858:	2301      	movs	r3, #1
 805685a:	617b      	str	r3, [r7, #20]
 805685c:	2300      	movs	r3, #0
 805685e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8056860:	79fb      	ldrb	r3, [r7, #7]
 8056862:	461a      	mov	r2, r3
 8056864:	6939      	ldr	r1, [r7, #16]
 8056866:	6978      	ldr	r0, [r7, #20]
 8056868:	f7ff ff7e 	bl	8056768 <xQueueGenericCreate>
 805686c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 805686e:	68f8      	ldr	r0, [r7, #12]
 8056870:	f7ff ffd3 	bl	805681a <prvInitialiseMutex>

		return xNewQueue;
 8056874:	68fb      	ldr	r3, [r7, #12]
	}
 8056876:	4618      	mov	r0, r3
 8056878:	3718      	adds	r7, #24
 805687a:	46bd      	mov	sp, r7
 805687c:	bd80      	pop	{r7, pc}

0805687e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 805687e:	b580      	push	{r7, lr}
 8056880:	b088      	sub	sp, #32
 8056882:	af02      	add	r7, sp, #8
 8056884:	4603      	mov	r3, r0
 8056886:	6039      	str	r1, [r7, #0]
 8056888:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 805688a:	2301      	movs	r3, #1
 805688c:	617b      	str	r3, [r7, #20]
 805688e:	2300      	movs	r3, #0
 8056890:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8056892:	79fb      	ldrb	r3, [r7, #7]
 8056894:	9300      	str	r3, [sp, #0]
 8056896:	683b      	ldr	r3, [r7, #0]
 8056898:	2200      	movs	r2, #0
 805689a:	6939      	ldr	r1, [r7, #16]
 805689c:	6978      	ldr	r0, [r7, #20]
 805689e:	f7ff feeb 	bl	8056678 <xQueueGenericCreateStatic>
 80568a2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80568a4:	68f8      	ldr	r0, [r7, #12]
 80568a6:	f7ff ffb8 	bl	805681a <prvInitialiseMutex>

		return xNewQueue;
 80568aa:	68fb      	ldr	r3, [r7, #12]
	}
 80568ac:	4618      	mov	r0, r3
 80568ae:	3718      	adds	r7, #24
 80568b0:	46bd      	mov	sp, r7
 80568b2:	bd80      	pop	{r7, pc}

080568b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80568b4:	b580      	push	{r7, lr}
 80568b6:	b08e      	sub	sp, #56	; 0x38
 80568b8:	af00      	add	r7, sp, #0
 80568ba:	60f8      	str	r0, [r7, #12]
 80568bc:	60b9      	str	r1, [r7, #8]
 80568be:	607a      	str	r2, [r7, #4]
 80568c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80568c2:	2300      	movs	r3, #0
 80568c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80568c6:	68fb      	ldr	r3, [r7, #12]
 80568c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80568ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80568cc:	2b00      	cmp	r3, #0
 80568ce:	d10a      	bne.n	80568e6 <xQueueGenericSend+0x32>
	__asm volatile
 80568d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80568d4:	f383 8811 	msr	BASEPRI, r3
 80568d8:	f3bf 8f6f 	isb	sy
 80568dc:	f3bf 8f4f 	dsb	sy
 80568e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80568e2:	bf00      	nop
 80568e4:	e7fe      	b.n	80568e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80568e6:	68bb      	ldr	r3, [r7, #8]
 80568e8:	2b00      	cmp	r3, #0
 80568ea:	d103      	bne.n	80568f4 <xQueueGenericSend+0x40>
 80568ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80568ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80568f0:	2b00      	cmp	r3, #0
 80568f2:	d101      	bne.n	80568f8 <xQueueGenericSend+0x44>
 80568f4:	2301      	movs	r3, #1
 80568f6:	e000      	b.n	80568fa <xQueueGenericSend+0x46>
 80568f8:	2300      	movs	r3, #0
 80568fa:	2b00      	cmp	r3, #0
 80568fc:	d10a      	bne.n	8056914 <xQueueGenericSend+0x60>
	__asm volatile
 80568fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8056902:	f383 8811 	msr	BASEPRI, r3
 8056906:	f3bf 8f6f 	isb	sy
 805690a:	f3bf 8f4f 	dsb	sy
 805690e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8056910:	bf00      	nop
 8056912:	e7fe      	b.n	8056912 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8056914:	683b      	ldr	r3, [r7, #0]
 8056916:	2b02      	cmp	r3, #2
 8056918:	d103      	bne.n	8056922 <xQueueGenericSend+0x6e>
 805691a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 805691c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 805691e:	2b01      	cmp	r3, #1
 8056920:	d101      	bne.n	8056926 <xQueueGenericSend+0x72>
 8056922:	2301      	movs	r3, #1
 8056924:	e000      	b.n	8056928 <xQueueGenericSend+0x74>
 8056926:	2300      	movs	r3, #0
 8056928:	2b00      	cmp	r3, #0
 805692a:	d10a      	bne.n	8056942 <xQueueGenericSend+0x8e>
	__asm volatile
 805692c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8056930:	f383 8811 	msr	BASEPRI, r3
 8056934:	f3bf 8f6f 	isb	sy
 8056938:	f3bf 8f4f 	dsb	sy
 805693c:	623b      	str	r3, [r7, #32]
}
 805693e:	bf00      	nop
 8056940:	e7fe      	b.n	8056940 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8056942:	f001 fc25 	bl	8058190 <xTaskGetSchedulerState>
 8056946:	4603      	mov	r3, r0
 8056948:	2b00      	cmp	r3, #0
 805694a:	d102      	bne.n	8056952 <xQueueGenericSend+0x9e>
 805694c:	687b      	ldr	r3, [r7, #4]
 805694e:	2b00      	cmp	r3, #0
 8056950:	d101      	bne.n	8056956 <xQueueGenericSend+0xa2>
 8056952:	2301      	movs	r3, #1
 8056954:	e000      	b.n	8056958 <xQueueGenericSend+0xa4>
 8056956:	2300      	movs	r3, #0
 8056958:	2b00      	cmp	r3, #0
 805695a:	d10a      	bne.n	8056972 <xQueueGenericSend+0xbe>
	__asm volatile
 805695c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8056960:	f383 8811 	msr	BASEPRI, r3
 8056964:	f3bf 8f6f 	isb	sy
 8056968:	f3bf 8f4f 	dsb	sy
 805696c:	61fb      	str	r3, [r7, #28]
}
 805696e:	bf00      	nop
 8056970:	e7fe      	b.n	8056970 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8056972:	f002 fc1f 	bl	80591b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8056976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8056978:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 805697a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 805697c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 805697e:	429a      	cmp	r2, r3
 8056980:	d302      	bcc.n	8056988 <xQueueGenericSend+0xd4>
 8056982:	683b      	ldr	r3, [r7, #0]
 8056984:	2b02      	cmp	r3, #2
 8056986:	d129      	bne.n	80569dc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8056988:	683a      	ldr	r2, [r7, #0]
 805698a:	68b9      	ldr	r1, [r7, #8]
 805698c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 805698e:	f000 fc5e 	bl	805724e <prvCopyDataToQueue>
 8056992:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8056994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8056996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8056998:	2b00      	cmp	r3, #0
 805699a:	d010      	beq.n	80569be <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 805699c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 805699e:	3324      	adds	r3, #36	; 0x24
 80569a0:	4618      	mov	r0, r3
 80569a2:	f001 fa39 	bl	8057e18 <xTaskRemoveFromEventList>
 80569a6:	4603      	mov	r3, r0
 80569a8:	2b00      	cmp	r3, #0
 80569aa:	d013      	beq.n	80569d4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80569ac:	4b3f      	ldr	r3, [pc, #252]	; (8056aac <xQueueGenericSend+0x1f8>)
 80569ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80569b2:	601a      	str	r2, [r3, #0]
 80569b4:	f3bf 8f4f 	dsb	sy
 80569b8:	f3bf 8f6f 	isb	sy
 80569bc:	e00a      	b.n	80569d4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80569be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80569c0:	2b00      	cmp	r3, #0
 80569c2:	d007      	beq.n	80569d4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80569c4:	4b39      	ldr	r3, [pc, #228]	; (8056aac <xQueueGenericSend+0x1f8>)
 80569c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80569ca:	601a      	str	r2, [r3, #0]
 80569cc:	f3bf 8f4f 	dsb	sy
 80569d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80569d4:	f002 fc1e 	bl	8059214 <vPortExitCritical>
				return pdPASS;
 80569d8:	2301      	movs	r3, #1
 80569da:	e063      	b.n	8056aa4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80569dc:	687b      	ldr	r3, [r7, #4]
 80569de:	2b00      	cmp	r3, #0
 80569e0:	d103      	bne.n	80569ea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80569e2:	f002 fc17 	bl	8059214 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80569e6:	2300      	movs	r3, #0
 80569e8:	e05c      	b.n	8056aa4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80569ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80569ec:	2b00      	cmp	r3, #0
 80569ee:	d106      	bne.n	80569fe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80569f0:	f107 0314 	add.w	r3, r7, #20
 80569f4:	4618      	mov	r0, r3
 80569f6:	f001 fa71 	bl	8057edc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80569fa:	2301      	movs	r3, #1
 80569fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80569fe:	f002 fc09 	bl	8059214 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8056a02:	f000 ffeb 	bl	80579dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8056a06:	f002 fbd5 	bl	80591b4 <vPortEnterCritical>
 8056a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8056a0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8056a10:	b25b      	sxtb	r3, r3
 8056a12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8056a16:	d103      	bne.n	8056a20 <xQueueGenericSend+0x16c>
 8056a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8056a1a:	2200      	movs	r2, #0
 8056a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8056a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8056a22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8056a26:	b25b      	sxtb	r3, r3
 8056a28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8056a2c:	d103      	bne.n	8056a36 <xQueueGenericSend+0x182>
 8056a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8056a30:	2200      	movs	r2, #0
 8056a32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8056a36:	f002 fbed 	bl	8059214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8056a3a:	1d3a      	adds	r2, r7, #4
 8056a3c:	f107 0314 	add.w	r3, r7, #20
 8056a40:	4611      	mov	r1, r2
 8056a42:	4618      	mov	r0, r3
 8056a44:	f001 fa60 	bl	8057f08 <xTaskCheckForTimeOut>
 8056a48:	4603      	mov	r3, r0
 8056a4a:	2b00      	cmp	r3, #0
 8056a4c:	d124      	bne.n	8056a98 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8056a4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8056a50:	f000 fcf5 	bl	805743e <prvIsQueueFull>
 8056a54:	4603      	mov	r3, r0
 8056a56:	2b00      	cmp	r3, #0
 8056a58:	d018      	beq.n	8056a8c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8056a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8056a5c:	3310      	adds	r3, #16
 8056a5e:	687a      	ldr	r2, [r7, #4]
 8056a60:	4611      	mov	r1, r2
 8056a62:	4618      	mov	r0, r3
 8056a64:	f001 f988 	bl	8057d78 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8056a68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8056a6a:	f000 fc80 	bl	805736e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8056a6e:	f000 ffc3 	bl	80579f8 <xTaskResumeAll>
 8056a72:	4603      	mov	r3, r0
 8056a74:	2b00      	cmp	r3, #0
 8056a76:	f47f af7c 	bne.w	8056972 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8056a7a:	4b0c      	ldr	r3, [pc, #48]	; (8056aac <xQueueGenericSend+0x1f8>)
 8056a7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8056a80:	601a      	str	r2, [r3, #0]
 8056a82:	f3bf 8f4f 	dsb	sy
 8056a86:	f3bf 8f6f 	isb	sy
 8056a8a:	e772      	b.n	8056972 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8056a8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8056a8e:	f000 fc6e 	bl	805736e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8056a92:	f000 ffb1 	bl	80579f8 <xTaskResumeAll>
 8056a96:	e76c      	b.n	8056972 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8056a98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8056a9a:	f000 fc68 	bl	805736e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8056a9e:	f000 ffab 	bl	80579f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8056aa2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8056aa4:	4618      	mov	r0, r3
 8056aa6:	3738      	adds	r7, #56	; 0x38
 8056aa8:	46bd      	mov	sp, r7
 8056aaa:	bd80      	pop	{r7, pc}
 8056aac:	e000ed04 	.word	0xe000ed04

08056ab0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8056ab0:	b580      	push	{r7, lr}
 8056ab2:	b090      	sub	sp, #64	; 0x40
 8056ab4:	af00      	add	r7, sp, #0
 8056ab6:	60f8      	str	r0, [r7, #12]
 8056ab8:	60b9      	str	r1, [r7, #8]
 8056aba:	607a      	str	r2, [r7, #4]
 8056abc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8056abe:	68fb      	ldr	r3, [r7, #12]
 8056ac0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8056ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8056ac4:	2b00      	cmp	r3, #0
 8056ac6:	d10a      	bne.n	8056ade <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8056ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8056acc:	f383 8811 	msr	BASEPRI, r3
 8056ad0:	f3bf 8f6f 	isb	sy
 8056ad4:	f3bf 8f4f 	dsb	sy
 8056ad8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8056ada:	bf00      	nop
 8056adc:	e7fe      	b.n	8056adc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8056ade:	68bb      	ldr	r3, [r7, #8]
 8056ae0:	2b00      	cmp	r3, #0
 8056ae2:	d103      	bne.n	8056aec <xQueueGenericSendFromISR+0x3c>
 8056ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8056ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8056ae8:	2b00      	cmp	r3, #0
 8056aea:	d101      	bne.n	8056af0 <xQueueGenericSendFromISR+0x40>
 8056aec:	2301      	movs	r3, #1
 8056aee:	e000      	b.n	8056af2 <xQueueGenericSendFromISR+0x42>
 8056af0:	2300      	movs	r3, #0
 8056af2:	2b00      	cmp	r3, #0
 8056af4:	d10a      	bne.n	8056b0c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8056af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8056afa:	f383 8811 	msr	BASEPRI, r3
 8056afe:	f3bf 8f6f 	isb	sy
 8056b02:	f3bf 8f4f 	dsb	sy
 8056b06:	627b      	str	r3, [r7, #36]	; 0x24
}
 8056b08:	bf00      	nop
 8056b0a:	e7fe      	b.n	8056b0a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8056b0c:	683b      	ldr	r3, [r7, #0]
 8056b0e:	2b02      	cmp	r3, #2
 8056b10:	d103      	bne.n	8056b1a <xQueueGenericSendFromISR+0x6a>
 8056b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8056b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8056b16:	2b01      	cmp	r3, #1
 8056b18:	d101      	bne.n	8056b1e <xQueueGenericSendFromISR+0x6e>
 8056b1a:	2301      	movs	r3, #1
 8056b1c:	e000      	b.n	8056b20 <xQueueGenericSendFromISR+0x70>
 8056b1e:	2300      	movs	r3, #0
 8056b20:	2b00      	cmp	r3, #0
 8056b22:	d10a      	bne.n	8056b3a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8056b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8056b28:	f383 8811 	msr	BASEPRI, r3
 8056b2c:	f3bf 8f6f 	isb	sy
 8056b30:	f3bf 8f4f 	dsb	sy
 8056b34:	623b      	str	r3, [r7, #32]
}
 8056b36:	bf00      	nop
 8056b38:	e7fe      	b.n	8056b38 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8056b3a:	f002 fc1d 	bl	8059378 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8056b3e:	f3ef 8211 	mrs	r2, BASEPRI
 8056b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8056b46:	f383 8811 	msr	BASEPRI, r3
 8056b4a:	f3bf 8f6f 	isb	sy
 8056b4e:	f3bf 8f4f 	dsb	sy
 8056b52:	61fa      	str	r2, [r7, #28]
 8056b54:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8056b56:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8056b58:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8056b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8056b5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8056b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8056b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8056b62:	429a      	cmp	r2, r3
 8056b64:	d302      	bcc.n	8056b6c <xQueueGenericSendFromISR+0xbc>
 8056b66:	683b      	ldr	r3, [r7, #0]
 8056b68:	2b02      	cmp	r3, #2
 8056b6a:	d12f      	bne.n	8056bcc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8056b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8056b6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8056b72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8056b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8056b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8056b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8056b7c:	683a      	ldr	r2, [r7, #0]
 8056b7e:	68b9      	ldr	r1, [r7, #8]
 8056b80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8056b82:	f000 fb64 	bl	805724e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8056b86:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8056b8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8056b8e:	d112      	bne.n	8056bb6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8056b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8056b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8056b94:	2b00      	cmp	r3, #0
 8056b96:	d016      	beq.n	8056bc6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8056b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8056b9a:	3324      	adds	r3, #36	; 0x24
 8056b9c:	4618      	mov	r0, r3
 8056b9e:	f001 f93b 	bl	8057e18 <xTaskRemoveFromEventList>
 8056ba2:	4603      	mov	r3, r0
 8056ba4:	2b00      	cmp	r3, #0
 8056ba6:	d00e      	beq.n	8056bc6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8056ba8:	687b      	ldr	r3, [r7, #4]
 8056baa:	2b00      	cmp	r3, #0
 8056bac:	d00b      	beq.n	8056bc6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8056bae:	687b      	ldr	r3, [r7, #4]
 8056bb0:	2201      	movs	r2, #1
 8056bb2:	601a      	str	r2, [r3, #0]
 8056bb4:	e007      	b.n	8056bc6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8056bb6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8056bba:	3301      	adds	r3, #1
 8056bbc:	b2db      	uxtb	r3, r3
 8056bbe:	b25a      	sxtb	r2, r3
 8056bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8056bc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8056bc6:	2301      	movs	r3, #1
 8056bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8056bca:	e001      	b.n	8056bd0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8056bcc:	2300      	movs	r3, #0
 8056bce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8056bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8056bd2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8056bd4:	697b      	ldr	r3, [r7, #20]
 8056bd6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8056bda:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8056bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8056bde:	4618      	mov	r0, r3
 8056be0:	3740      	adds	r7, #64	; 0x40
 8056be2:	46bd      	mov	sp, r7
 8056be4:	bd80      	pop	{r7, pc}

08056be6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8056be6:	b580      	push	{r7, lr}
 8056be8:	b08e      	sub	sp, #56	; 0x38
 8056bea:	af00      	add	r7, sp, #0
 8056bec:	6078      	str	r0, [r7, #4]
 8056bee:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8056bf0:	687b      	ldr	r3, [r7, #4]
 8056bf2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8056bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8056bf6:	2b00      	cmp	r3, #0
 8056bf8:	d10a      	bne.n	8056c10 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8056bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8056bfe:	f383 8811 	msr	BASEPRI, r3
 8056c02:	f3bf 8f6f 	isb	sy
 8056c06:	f3bf 8f4f 	dsb	sy
 8056c0a:	623b      	str	r3, [r7, #32]
}
 8056c0c:	bf00      	nop
 8056c0e:	e7fe      	b.n	8056c0e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8056c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8056c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8056c14:	2b00      	cmp	r3, #0
 8056c16:	d00a      	beq.n	8056c2e <xQueueGiveFromISR+0x48>
	__asm volatile
 8056c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8056c1c:	f383 8811 	msr	BASEPRI, r3
 8056c20:	f3bf 8f6f 	isb	sy
 8056c24:	f3bf 8f4f 	dsb	sy
 8056c28:	61fb      	str	r3, [r7, #28]
}
 8056c2a:	bf00      	nop
 8056c2c:	e7fe      	b.n	8056c2c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8056c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8056c30:	681b      	ldr	r3, [r3, #0]
 8056c32:	2b00      	cmp	r3, #0
 8056c34:	d103      	bne.n	8056c3e <xQueueGiveFromISR+0x58>
 8056c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8056c38:	689b      	ldr	r3, [r3, #8]
 8056c3a:	2b00      	cmp	r3, #0
 8056c3c:	d101      	bne.n	8056c42 <xQueueGiveFromISR+0x5c>
 8056c3e:	2301      	movs	r3, #1
 8056c40:	e000      	b.n	8056c44 <xQueueGiveFromISR+0x5e>
 8056c42:	2300      	movs	r3, #0
 8056c44:	2b00      	cmp	r3, #0
 8056c46:	d10a      	bne.n	8056c5e <xQueueGiveFromISR+0x78>
	__asm volatile
 8056c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8056c4c:	f383 8811 	msr	BASEPRI, r3
 8056c50:	f3bf 8f6f 	isb	sy
 8056c54:	f3bf 8f4f 	dsb	sy
 8056c58:	61bb      	str	r3, [r7, #24]
}
 8056c5a:	bf00      	nop
 8056c5c:	e7fe      	b.n	8056c5c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8056c5e:	f002 fb8b 	bl	8059378 <vPortValidateInterruptPriority>
	__asm volatile
 8056c62:	f3ef 8211 	mrs	r2, BASEPRI
 8056c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8056c6a:	f383 8811 	msr	BASEPRI, r3
 8056c6e:	f3bf 8f6f 	isb	sy
 8056c72:	f3bf 8f4f 	dsb	sy
 8056c76:	617a      	str	r2, [r7, #20]
 8056c78:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8056c7a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8056c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8056c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8056c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8056c82:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8056c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8056c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8056c88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8056c8a:	429a      	cmp	r2, r3
 8056c8c:	d22b      	bcs.n	8056ce6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8056c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8056c90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8056c94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8056c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8056c9a:	1c5a      	adds	r2, r3, #1
 8056c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8056c9e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8056ca0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8056ca4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8056ca8:	d112      	bne.n	8056cd0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8056caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8056cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8056cae:	2b00      	cmp	r3, #0
 8056cb0:	d016      	beq.n	8056ce0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8056cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8056cb4:	3324      	adds	r3, #36	; 0x24
 8056cb6:	4618      	mov	r0, r3
 8056cb8:	f001 f8ae 	bl	8057e18 <xTaskRemoveFromEventList>
 8056cbc:	4603      	mov	r3, r0
 8056cbe:	2b00      	cmp	r3, #0
 8056cc0:	d00e      	beq.n	8056ce0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8056cc2:	683b      	ldr	r3, [r7, #0]
 8056cc4:	2b00      	cmp	r3, #0
 8056cc6:	d00b      	beq.n	8056ce0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8056cc8:	683b      	ldr	r3, [r7, #0]
 8056cca:	2201      	movs	r2, #1
 8056ccc:	601a      	str	r2, [r3, #0]
 8056cce:	e007      	b.n	8056ce0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8056cd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8056cd4:	3301      	adds	r3, #1
 8056cd6:	b2db      	uxtb	r3, r3
 8056cd8:	b25a      	sxtb	r2, r3
 8056cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8056cdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8056ce0:	2301      	movs	r3, #1
 8056ce2:	637b      	str	r3, [r7, #52]	; 0x34
 8056ce4:	e001      	b.n	8056cea <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8056ce6:	2300      	movs	r3, #0
 8056ce8:	637b      	str	r3, [r7, #52]	; 0x34
 8056cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8056cec:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8056cee:	68fb      	ldr	r3, [r7, #12]
 8056cf0:	f383 8811 	msr	BASEPRI, r3
}
 8056cf4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8056cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8056cf8:	4618      	mov	r0, r3
 8056cfa:	3738      	adds	r7, #56	; 0x38
 8056cfc:	46bd      	mov	sp, r7
 8056cfe:	bd80      	pop	{r7, pc}

08056d00 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8056d00:	b580      	push	{r7, lr}
 8056d02:	b08c      	sub	sp, #48	; 0x30
 8056d04:	af00      	add	r7, sp, #0
 8056d06:	60f8      	str	r0, [r7, #12]
 8056d08:	60b9      	str	r1, [r7, #8]
 8056d0a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8056d0c:	2300      	movs	r3, #0
 8056d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8056d10:	68fb      	ldr	r3, [r7, #12]
 8056d12:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8056d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8056d16:	2b00      	cmp	r3, #0
 8056d18:	d10a      	bne.n	8056d30 <xQueueReceive+0x30>
	__asm volatile
 8056d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8056d1e:	f383 8811 	msr	BASEPRI, r3
 8056d22:	f3bf 8f6f 	isb	sy
 8056d26:	f3bf 8f4f 	dsb	sy
 8056d2a:	623b      	str	r3, [r7, #32]
}
 8056d2c:	bf00      	nop
 8056d2e:	e7fe      	b.n	8056d2e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8056d30:	68bb      	ldr	r3, [r7, #8]
 8056d32:	2b00      	cmp	r3, #0
 8056d34:	d103      	bne.n	8056d3e <xQueueReceive+0x3e>
 8056d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8056d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8056d3a:	2b00      	cmp	r3, #0
 8056d3c:	d101      	bne.n	8056d42 <xQueueReceive+0x42>
 8056d3e:	2301      	movs	r3, #1
 8056d40:	e000      	b.n	8056d44 <xQueueReceive+0x44>
 8056d42:	2300      	movs	r3, #0
 8056d44:	2b00      	cmp	r3, #0
 8056d46:	d10a      	bne.n	8056d5e <xQueueReceive+0x5e>
	__asm volatile
 8056d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8056d4c:	f383 8811 	msr	BASEPRI, r3
 8056d50:	f3bf 8f6f 	isb	sy
 8056d54:	f3bf 8f4f 	dsb	sy
 8056d58:	61fb      	str	r3, [r7, #28]
}
 8056d5a:	bf00      	nop
 8056d5c:	e7fe      	b.n	8056d5c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8056d5e:	f001 fa17 	bl	8058190 <xTaskGetSchedulerState>
 8056d62:	4603      	mov	r3, r0
 8056d64:	2b00      	cmp	r3, #0
 8056d66:	d102      	bne.n	8056d6e <xQueueReceive+0x6e>
 8056d68:	687b      	ldr	r3, [r7, #4]
 8056d6a:	2b00      	cmp	r3, #0
 8056d6c:	d101      	bne.n	8056d72 <xQueueReceive+0x72>
 8056d6e:	2301      	movs	r3, #1
 8056d70:	e000      	b.n	8056d74 <xQueueReceive+0x74>
 8056d72:	2300      	movs	r3, #0
 8056d74:	2b00      	cmp	r3, #0
 8056d76:	d10a      	bne.n	8056d8e <xQueueReceive+0x8e>
	__asm volatile
 8056d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8056d7c:	f383 8811 	msr	BASEPRI, r3
 8056d80:	f3bf 8f6f 	isb	sy
 8056d84:	f3bf 8f4f 	dsb	sy
 8056d88:	61bb      	str	r3, [r7, #24]
}
 8056d8a:	bf00      	nop
 8056d8c:	e7fe      	b.n	8056d8c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8056d8e:	f002 fa11 	bl	80591b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8056d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8056d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8056d96:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8056d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8056d9a:	2b00      	cmp	r3, #0
 8056d9c:	d01f      	beq.n	8056dde <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8056d9e:	68b9      	ldr	r1, [r7, #8]
 8056da0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8056da2:	f000 fabe 	bl	8057322 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8056da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8056da8:	1e5a      	subs	r2, r3, #1
 8056daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8056dac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8056dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8056db0:	691b      	ldr	r3, [r3, #16]
 8056db2:	2b00      	cmp	r3, #0
 8056db4:	d00f      	beq.n	8056dd6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8056db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8056db8:	3310      	adds	r3, #16
 8056dba:	4618      	mov	r0, r3
 8056dbc:	f001 f82c 	bl	8057e18 <xTaskRemoveFromEventList>
 8056dc0:	4603      	mov	r3, r0
 8056dc2:	2b00      	cmp	r3, #0
 8056dc4:	d007      	beq.n	8056dd6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8056dc6:	4b3d      	ldr	r3, [pc, #244]	; (8056ebc <xQueueReceive+0x1bc>)
 8056dc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8056dcc:	601a      	str	r2, [r3, #0]
 8056dce:	f3bf 8f4f 	dsb	sy
 8056dd2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8056dd6:	f002 fa1d 	bl	8059214 <vPortExitCritical>
				return pdPASS;
 8056dda:	2301      	movs	r3, #1
 8056ddc:	e069      	b.n	8056eb2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8056dde:	687b      	ldr	r3, [r7, #4]
 8056de0:	2b00      	cmp	r3, #0
 8056de2:	d103      	bne.n	8056dec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8056de4:	f002 fa16 	bl	8059214 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8056de8:	2300      	movs	r3, #0
 8056dea:	e062      	b.n	8056eb2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8056dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8056dee:	2b00      	cmp	r3, #0
 8056df0:	d106      	bne.n	8056e00 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8056df2:	f107 0310 	add.w	r3, r7, #16
 8056df6:	4618      	mov	r0, r3
 8056df8:	f001 f870 	bl	8057edc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8056dfc:	2301      	movs	r3, #1
 8056dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8056e00:	f002 fa08 	bl	8059214 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8056e04:	f000 fdea 	bl	80579dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8056e08:	f002 f9d4 	bl	80591b4 <vPortEnterCritical>
 8056e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8056e0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8056e12:	b25b      	sxtb	r3, r3
 8056e14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8056e18:	d103      	bne.n	8056e22 <xQueueReceive+0x122>
 8056e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8056e1c:	2200      	movs	r2, #0
 8056e1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8056e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8056e24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8056e28:	b25b      	sxtb	r3, r3
 8056e2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8056e2e:	d103      	bne.n	8056e38 <xQueueReceive+0x138>
 8056e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8056e32:	2200      	movs	r2, #0
 8056e34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8056e38:	f002 f9ec 	bl	8059214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8056e3c:	1d3a      	adds	r2, r7, #4
 8056e3e:	f107 0310 	add.w	r3, r7, #16
 8056e42:	4611      	mov	r1, r2
 8056e44:	4618      	mov	r0, r3
 8056e46:	f001 f85f 	bl	8057f08 <xTaskCheckForTimeOut>
 8056e4a:	4603      	mov	r3, r0
 8056e4c:	2b00      	cmp	r3, #0
 8056e4e:	d123      	bne.n	8056e98 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8056e50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8056e52:	f000 fade 	bl	8057412 <prvIsQueueEmpty>
 8056e56:	4603      	mov	r3, r0
 8056e58:	2b00      	cmp	r3, #0
 8056e5a:	d017      	beq.n	8056e8c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8056e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8056e5e:	3324      	adds	r3, #36	; 0x24
 8056e60:	687a      	ldr	r2, [r7, #4]
 8056e62:	4611      	mov	r1, r2
 8056e64:	4618      	mov	r0, r3
 8056e66:	f000 ff87 	bl	8057d78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8056e6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8056e6c:	f000 fa7f 	bl	805736e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8056e70:	f000 fdc2 	bl	80579f8 <xTaskResumeAll>
 8056e74:	4603      	mov	r3, r0
 8056e76:	2b00      	cmp	r3, #0
 8056e78:	d189      	bne.n	8056d8e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8056e7a:	4b10      	ldr	r3, [pc, #64]	; (8056ebc <xQueueReceive+0x1bc>)
 8056e7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8056e80:	601a      	str	r2, [r3, #0]
 8056e82:	f3bf 8f4f 	dsb	sy
 8056e86:	f3bf 8f6f 	isb	sy
 8056e8a:	e780      	b.n	8056d8e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8056e8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8056e8e:	f000 fa6e 	bl	805736e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8056e92:	f000 fdb1 	bl	80579f8 <xTaskResumeAll>
 8056e96:	e77a      	b.n	8056d8e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8056e98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8056e9a:	f000 fa68 	bl	805736e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8056e9e:	f000 fdab 	bl	80579f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8056ea2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8056ea4:	f000 fab5 	bl	8057412 <prvIsQueueEmpty>
 8056ea8:	4603      	mov	r3, r0
 8056eaa:	2b00      	cmp	r3, #0
 8056eac:	f43f af6f 	beq.w	8056d8e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8056eb0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8056eb2:	4618      	mov	r0, r3
 8056eb4:	3730      	adds	r7, #48	; 0x30
 8056eb6:	46bd      	mov	sp, r7
 8056eb8:	bd80      	pop	{r7, pc}
 8056eba:	bf00      	nop
 8056ebc:	e000ed04 	.word	0xe000ed04

08056ec0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8056ec0:	b580      	push	{r7, lr}
 8056ec2:	b08e      	sub	sp, #56	; 0x38
 8056ec4:	af00      	add	r7, sp, #0
 8056ec6:	6078      	str	r0, [r7, #4]
 8056ec8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8056eca:	2300      	movs	r3, #0
 8056ecc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8056ece:	687b      	ldr	r3, [r7, #4]
 8056ed0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8056ed2:	2300      	movs	r3, #0
 8056ed4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8056ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8056ed8:	2b00      	cmp	r3, #0
 8056eda:	d10a      	bne.n	8056ef2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8056edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8056ee0:	f383 8811 	msr	BASEPRI, r3
 8056ee4:	f3bf 8f6f 	isb	sy
 8056ee8:	f3bf 8f4f 	dsb	sy
 8056eec:	623b      	str	r3, [r7, #32]
}
 8056eee:	bf00      	nop
 8056ef0:	e7fe      	b.n	8056ef0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8056ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8056ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8056ef6:	2b00      	cmp	r3, #0
 8056ef8:	d00a      	beq.n	8056f10 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8056efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8056efe:	f383 8811 	msr	BASEPRI, r3
 8056f02:	f3bf 8f6f 	isb	sy
 8056f06:	f3bf 8f4f 	dsb	sy
 8056f0a:	61fb      	str	r3, [r7, #28]
}
 8056f0c:	bf00      	nop
 8056f0e:	e7fe      	b.n	8056f0e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8056f10:	f001 f93e 	bl	8058190 <xTaskGetSchedulerState>
 8056f14:	4603      	mov	r3, r0
 8056f16:	2b00      	cmp	r3, #0
 8056f18:	d102      	bne.n	8056f20 <xQueueSemaphoreTake+0x60>
 8056f1a:	683b      	ldr	r3, [r7, #0]
 8056f1c:	2b00      	cmp	r3, #0
 8056f1e:	d101      	bne.n	8056f24 <xQueueSemaphoreTake+0x64>
 8056f20:	2301      	movs	r3, #1
 8056f22:	e000      	b.n	8056f26 <xQueueSemaphoreTake+0x66>
 8056f24:	2300      	movs	r3, #0
 8056f26:	2b00      	cmp	r3, #0
 8056f28:	d10a      	bne.n	8056f40 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8056f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8056f2e:	f383 8811 	msr	BASEPRI, r3
 8056f32:	f3bf 8f6f 	isb	sy
 8056f36:	f3bf 8f4f 	dsb	sy
 8056f3a:	61bb      	str	r3, [r7, #24]
}
 8056f3c:	bf00      	nop
 8056f3e:	e7fe      	b.n	8056f3e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8056f40:	f002 f938 	bl	80591b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8056f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8056f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8056f48:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8056f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8056f4c:	2b00      	cmp	r3, #0
 8056f4e:	d024      	beq.n	8056f9a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8056f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8056f52:	1e5a      	subs	r2, r3, #1
 8056f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8056f56:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8056f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8056f5a:	681b      	ldr	r3, [r3, #0]
 8056f5c:	2b00      	cmp	r3, #0
 8056f5e:	d104      	bne.n	8056f6a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8056f60:	f001 fabe 	bl	80584e0 <pvTaskIncrementMutexHeldCount>
 8056f64:	4602      	mov	r2, r0
 8056f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8056f68:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8056f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8056f6c:	691b      	ldr	r3, [r3, #16]
 8056f6e:	2b00      	cmp	r3, #0
 8056f70:	d00f      	beq.n	8056f92 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8056f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8056f74:	3310      	adds	r3, #16
 8056f76:	4618      	mov	r0, r3
 8056f78:	f000 ff4e 	bl	8057e18 <xTaskRemoveFromEventList>
 8056f7c:	4603      	mov	r3, r0
 8056f7e:	2b00      	cmp	r3, #0
 8056f80:	d007      	beq.n	8056f92 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8056f82:	4b54      	ldr	r3, [pc, #336]	; (80570d4 <xQueueSemaphoreTake+0x214>)
 8056f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8056f88:	601a      	str	r2, [r3, #0]
 8056f8a:	f3bf 8f4f 	dsb	sy
 8056f8e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8056f92:	f002 f93f 	bl	8059214 <vPortExitCritical>
				return pdPASS;
 8056f96:	2301      	movs	r3, #1
 8056f98:	e097      	b.n	80570ca <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8056f9a:	683b      	ldr	r3, [r7, #0]
 8056f9c:	2b00      	cmp	r3, #0
 8056f9e:	d111      	bne.n	8056fc4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8056fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8056fa2:	2b00      	cmp	r3, #0
 8056fa4:	d00a      	beq.n	8056fbc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8056fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8056faa:	f383 8811 	msr	BASEPRI, r3
 8056fae:	f3bf 8f6f 	isb	sy
 8056fb2:	f3bf 8f4f 	dsb	sy
 8056fb6:	617b      	str	r3, [r7, #20]
}
 8056fb8:	bf00      	nop
 8056fba:	e7fe      	b.n	8056fba <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8056fbc:	f002 f92a 	bl	8059214 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8056fc0:	2300      	movs	r3, #0
 8056fc2:	e082      	b.n	80570ca <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8056fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8056fc6:	2b00      	cmp	r3, #0
 8056fc8:	d106      	bne.n	8056fd8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8056fca:	f107 030c 	add.w	r3, r7, #12
 8056fce:	4618      	mov	r0, r3
 8056fd0:	f000 ff84 	bl	8057edc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8056fd4:	2301      	movs	r3, #1
 8056fd6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8056fd8:	f002 f91c 	bl	8059214 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8056fdc:	f000 fcfe 	bl	80579dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8056fe0:	f002 f8e8 	bl	80591b4 <vPortEnterCritical>
 8056fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8056fe6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8056fea:	b25b      	sxtb	r3, r3
 8056fec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8056ff0:	d103      	bne.n	8056ffa <xQueueSemaphoreTake+0x13a>
 8056ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8056ff4:	2200      	movs	r2, #0
 8056ff6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8056ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8056ffc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8057000:	b25b      	sxtb	r3, r3
 8057002:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8057006:	d103      	bne.n	8057010 <xQueueSemaphoreTake+0x150>
 8057008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 805700a:	2200      	movs	r2, #0
 805700c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8057010:	f002 f900 	bl	8059214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8057014:	463a      	mov	r2, r7
 8057016:	f107 030c 	add.w	r3, r7, #12
 805701a:	4611      	mov	r1, r2
 805701c:	4618      	mov	r0, r3
 805701e:	f000 ff73 	bl	8057f08 <xTaskCheckForTimeOut>
 8057022:	4603      	mov	r3, r0
 8057024:	2b00      	cmp	r3, #0
 8057026:	d132      	bne.n	805708e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8057028:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 805702a:	f000 f9f2 	bl	8057412 <prvIsQueueEmpty>
 805702e:	4603      	mov	r3, r0
 8057030:	2b00      	cmp	r3, #0
 8057032:	d026      	beq.n	8057082 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8057034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8057036:	681b      	ldr	r3, [r3, #0]
 8057038:	2b00      	cmp	r3, #0
 805703a:	d109      	bne.n	8057050 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 805703c:	f002 f8ba 	bl	80591b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8057040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8057042:	689b      	ldr	r3, [r3, #8]
 8057044:	4618      	mov	r0, r3
 8057046:	f001 f8c1 	bl	80581cc <xTaskPriorityInherit>
 805704a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 805704c:	f002 f8e2 	bl	8059214 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8057050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8057052:	3324      	adds	r3, #36	; 0x24
 8057054:	683a      	ldr	r2, [r7, #0]
 8057056:	4611      	mov	r1, r2
 8057058:	4618      	mov	r0, r3
 805705a:	f000 fe8d 	bl	8057d78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 805705e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8057060:	f000 f985 	bl	805736e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8057064:	f000 fcc8 	bl	80579f8 <xTaskResumeAll>
 8057068:	4603      	mov	r3, r0
 805706a:	2b00      	cmp	r3, #0
 805706c:	f47f af68 	bne.w	8056f40 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8057070:	4b18      	ldr	r3, [pc, #96]	; (80570d4 <xQueueSemaphoreTake+0x214>)
 8057072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8057076:	601a      	str	r2, [r3, #0]
 8057078:	f3bf 8f4f 	dsb	sy
 805707c:	f3bf 8f6f 	isb	sy
 8057080:	e75e      	b.n	8056f40 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8057082:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8057084:	f000 f973 	bl	805736e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8057088:	f000 fcb6 	bl	80579f8 <xTaskResumeAll>
 805708c:	e758      	b.n	8056f40 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 805708e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8057090:	f000 f96d 	bl	805736e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8057094:	f000 fcb0 	bl	80579f8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8057098:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 805709a:	f000 f9ba 	bl	8057412 <prvIsQueueEmpty>
 805709e:	4603      	mov	r3, r0
 80570a0:	2b00      	cmp	r3, #0
 80570a2:	f43f af4d 	beq.w	8056f40 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80570a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80570a8:	2b00      	cmp	r3, #0
 80570aa:	d00d      	beq.n	80570c8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80570ac:	f002 f882 	bl	80591b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80570b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80570b2:	f000 f8b4 	bl	805721e <prvGetDisinheritPriorityAfterTimeout>
 80570b6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80570b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80570ba:	689b      	ldr	r3, [r3, #8]
 80570bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80570be:	4618      	mov	r0, r3
 80570c0:	f001 f980 	bl	80583c4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80570c4:	f002 f8a6 	bl	8059214 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80570c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80570ca:	4618      	mov	r0, r3
 80570cc:	3738      	adds	r7, #56	; 0x38
 80570ce:	46bd      	mov	sp, r7
 80570d0:	bd80      	pop	{r7, pc}
 80570d2:	bf00      	nop
 80570d4:	e000ed04 	.word	0xe000ed04

080570d8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80570d8:	b580      	push	{r7, lr}
 80570da:	b08e      	sub	sp, #56	; 0x38
 80570dc:	af00      	add	r7, sp, #0
 80570de:	60f8      	str	r0, [r7, #12]
 80570e0:	60b9      	str	r1, [r7, #8]
 80570e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80570e4:	68fb      	ldr	r3, [r7, #12]
 80570e6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80570e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80570ea:	2b00      	cmp	r3, #0
 80570ec:	d10a      	bne.n	8057104 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80570ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80570f2:	f383 8811 	msr	BASEPRI, r3
 80570f6:	f3bf 8f6f 	isb	sy
 80570fa:	f3bf 8f4f 	dsb	sy
 80570fe:	623b      	str	r3, [r7, #32]
}
 8057100:	bf00      	nop
 8057102:	e7fe      	b.n	8057102 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8057104:	68bb      	ldr	r3, [r7, #8]
 8057106:	2b00      	cmp	r3, #0
 8057108:	d103      	bne.n	8057112 <xQueueReceiveFromISR+0x3a>
 805710a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 805710c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 805710e:	2b00      	cmp	r3, #0
 8057110:	d101      	bne.n	8057116 <xQueueReceiveFromISR+0x3e>
 8057112:	2301      	movs	r3, #1
 8057114:	e000      	b.n	8057118 <xQueueReceiveFromISR+0x40>
 8057116:	2300      	movs	r3, #0
 8057118:	2b00      	cmp	r3, #0
 805711a:	d10a      	bne.n	8057132 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 805711c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8057120:	f383 8811 	msr	BASEPRI, r3
 8057124:	f3bf 8f6f 	isb	sy
 8057128:	f3bf 8f4f 	dsb	sy
 805712c:	61fb      	str	r3, [r7, #28]
}
 805712e:	bf00      	nop
 8057130:	e7fe      	b.n	8057130 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8057132:	f002 f921 	bl	8059378 <vPortValidateInterruptPriority>
	__asm volatile
 8057136:	f3ef 8211 	mrs	r2, BASEPRI
 805713a:	f04f 0350 	mov.w	r3, #80	; 0x50
 805713e:	f383 8811 	msr	BASEPRI, r3
 8057142:	f3bf 8f6f 	isb	sy
 8057146:	f3bf 8f4f 	dsb	sy
 805714a:	61ba      	str	r2, [r7, #24]
 805714c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 805714e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8057150:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8057152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8057154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8057156:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8057158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 805715a:	2b00      	cmp	r3, #0
 805715c:	d02f      	beq.n	80571be <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 805715e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8057160:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8057164:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8057168:	68b9      	ldr	r1, [r7, #8]
 805716a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 805716c:	f000 f8d9 	bl	8057322 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8057170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8057172:	1e5a      	subs	r2, r3, #1
 8057174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8057176:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8057178:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 805717c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8057180:	d112      	bne.n	80571a8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8057182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8057184:	691b      	ldr	r3, [r3, #16]
 8057186:	2b00      	cmp	r3, #0
 8057188:	d016      	beq.n	80571b8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 805718a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 805718c:	3310      	adds	r3, #16
 805718e:	4618      	mov	r0, r3
 8057190:	f000 fe42 	bl	8057e18 <xTaskRemoveFromEventList>
 8057194:	4603      	mov	r3, r0
 8057196:	2b00      	cmp	r3, #0
 8057198:	d00e      	beq.n	80571b8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 805719a:	687b      	ldr	r3, [r7, #4]
 805719c:	2b00      	cmp	r3, #0
 805719e:	d00b      	beq.n	80571b8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80571a0:	687b      	ldr	r3, [r7, #4]
 80571a2:	2201      	movs	r2, #1
 80571a4:	601a      	str	r2, [r3, #0]
 80571a6:	e007      	b.n	80571b8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80571a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80571ac:	3301      	adds	r3, #1
 80571ae:	b2db      	uxtb	r3, r3
 80571b0:	b25a      	sxtb	r2, r3
 80571b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80571b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80571b8:	2301      	movs	r3, #1
 80571ba:	637b      	str	r3, [r7, #52]	; 0x34
 80571bc:	e001      	b.n	80571c2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80571be:	2300      	movs	r3, #0
 80571c0:	637b      	str	r3, [r7, #52]	; 0x34
 80571c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80571c4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80571c6:	693b      	ldr	r3, [r7, #16]
 80571c8:	f383 8811 	msr	BASEPRI, r3
}
 80571cc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80571ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80571d0:	4618      	mov	r0, r3
 80571d2:	3738      	adds	r7, #56	; 0x38
 80571d4:	46bd      	mov	sp, r7
 80571d6:	bd80      	pop	{r7, pc}

080571d8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80571d8:	b580      	push	{r7, lr}
 80571da:	b084      	sub	sp, #16
 80571dc:	af00      	add	r7, sp, #0
 80571de:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80571e0:	687b      	ldr	r3, [r7, #4]
 80571e2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80571e4:	68fb      	ldr	r3, [r7, #12]
 80571e6:	2b00      	cmp	r3, #0
 80571e8:	d10a      	bne.n	8057200 <vQueueDelete+0x28>
	__asm volatile
 80571ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80571ee:	f383 8811 	msr	BASEPRI, r3
 80571f2:	f3bf 8f6f 	isb	sy
 80571f6:	f3bf 8f4f 	dsb	sy
 80571fa:	60bb      	str	r3, [r7, #8]
}
 80571fc:	bf00      	nop
 80571fe:	e7fe      	b.n	80571fe <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8057200:	68f8      	ldr	r0, [r7, #12]
 8057202:	f000 f95f 	bl	80574c4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8057206:	68fb      	ldr	r3, [r7, #12]
 8057208:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 805720c:	2b00      	cmp	r3, #0
 805720e:	d102      	bne.n	8057216 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8057210:	68f8      	ldr	r0, [r7, #12]
 8057212:	f002 f9bd 	bl	8059590 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8057216:	bf00      	nop
 8057218:	3710      	adds	r7, #16
 805721a:	46bd      	mov	sp, r7
 805721c:	bd80      	pop	{r7, pc}

0805721e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 805721e:	b480      	push	{r7}
 8057220:	b085      	sub	sp, #20
 8057222:	af00      	add	r7, sp, #0
 8057224:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8057226:	687b      	ldr	r3, [r7, #4]
 8057228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 805722a:	2b00      	cmp	r3, #0
 805722c:	d006      	beq.n	805723c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 805722e:	687b      	ldr	r3, [r7, #4]
 8057230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8057232:	681b      	ldr	r3, [r3, #0]
 8057234:	f1c3 0307 	rsb	r3, r3, #7
 8057238:	60fb      	str	r3, [r7, #12]
 805723a:	e001      	b.n	8057240 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 805723c:	2300      	movs	r3, #0
 805723e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8057240:	68fb      	ldr	r3, [r7, #12]
	}
 8057242:	4618      	mov	r0, r3
 8057244:	3714      	adds	r7, #20
 8057246:	46bd      	mov	sp, r7
 8057248:	f85d 7b04 	ldr.w	r7, [sp], #4
 805724c:	4770      	bx	lr

0805724e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 805724e:	b580      	push	{r7, lr}
 8057250:	b086      	sub	sp, #24
 8057252:	af00      	add	r7, sp, #0
 8057254:	60f8      	str	r0, [r7, #12]
 8057256:	60b9      	str	r1, [r7, #8]
 8057258:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 805725a:	2300      	movs	r3, #0
 805725c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 805725e:	68fb      	ldr	r3, [r7, #12]
 8057260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8057262:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8057264:	68fb      	ldr	r3, [r7, #12]
 8057266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8057268:	2b00      	cmp	r3, #0
 805726a:	d10d      	bne.n	8057288 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 805726c:	68fb      	ldr	r3, [r7, #12]
 805726e:	681b      	ldr	r3, [r3, #0]
 8057270:	2b00      	cmp	r3, #0
 8057272:	d14d      	bne.n	8057310 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8057274:	68fb      	ldr	r3, [r7, #12]
 8057276:	689b      	ldr	r3, [r3, #8]
 8057278:	4618      	mov	r0, r3
 805727a:	f001 f81d 	bl	80582b8 <xTaskPriorityDisinherit>
 805727e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8057280:	68fb      	ldr	r3, [r7, #12]
 8057282:	2200      	movs	r2, #0
 8057284:	609a      	str	r2, [r3, #8]
 8057286:	e043      	b.n	8057310 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8057288:	687b      	ldr	r3, [r7, #4]
 805728a:	2b00      	cmp	r3, #0
 805728c:	d119      	bne.n	80572c2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 805728e:	68fb      	ldr	r3, [r7, #12]
 8057290:	6858      	ldr	r0, [r3, #4]
 8057292:	68fb      	ldr	r3, [r7, #12]
 8057294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8057296:	461a      	mov	r2, r3
 8057298:	68b9      	ldr	r1, [r7, #8]
 805729a:	f002 fe35 	bl	8059f08 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 805729e:	68fb      	ldr	r3, [r7, #12]
 80572a0:	685a      	ldr	r2, [r3, #4]
 80572a2:	68fb      	ldr	r3, [r7, #12]
 80572a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80572a6:	441a      	add	r2, r3
 80572a8:	68fb      	ldr	r3, [r7, #12]
 80572aa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80572ac:	68fb      	ldr	r3, [r7, #12]
 80572ae:	685a      	ldr	r2, [r3, #4]
 80572b0:	68fb      	ldr	r3, [r7, #12]
 80572b2:	689b      	ldr	r3, [r3, #8]
 80572b4:	429a      	cmp	r2, r3
 80572b6:	d32b      	bcc.n	8057310 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80572b8:	68fb      	ldr	r3, [r7, #12]
 80572ba:	681a      	ldr	r2, [r3, #0]
 80572bc:	68fb      	ldr	r3, [r7, #12]
 80572be:	605a      	str	r2, [r3, #4]
 80572c0:	e026      	b.n	8057310 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80572c2:	68fb      	ldr	r3, [r7, #12]
 80572c4:	68d8      	ldr	r0, [r3, #12]
 80572c6:	68fb      	ldr	r3, [r7, #12]
 80572c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80572ca:	461a      	mov	r2, r3
 80572cc:	68b9      	ldr	r1, [r7, #8]
 80572ce:	f002 fe1b 	bl	8059f08 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80572d2:	68fb      	ldr	r3, [r7, #12]
 80572d4:	68da      	ldr	r2, [r3, #12]
 80572d6:	68fb      	ldr	r3, [r7, #12]
 80572d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80572da:	425b      	negs	r3, r3
 80572dc:	441a      	add	r2, r3
 80572de:	68fb      	ldr	r3, [r7, #12]
 80572e0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80572e2:	68fb      	ldr	r3, [r7, #12]
 80572e4:	68da      	ldr	r2, [r3, #12]
 80572e6:	68fb      	ldr	r3, [r7, #12]
 80572e8:	681b      	ldr	r3, [r3, #0]
 80572ea:	429a      	cmp	r2, r3
 80572ec:	d207      	bcs.n	80572fe <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80572ee:	68fb      	ldr	r3, [r7, #12]
 80572f0:	689a      	ldr	r2, [r3, #8]
 80572f2:	68fb      	ldr	r3, [r7, #12]
 80572f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80572f6:	425b      	negs	r3, r3
 80572f8:	441a      	add	r2, r3
 80572fa:	68fb      	ldr	r3, [r7, #12]
 80572fc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80572fe:	687b      	ldr	r3, [r7, #4]
 8057300:	2b02      	cmp	r3, #2
 8057302:	d105      	bne.n	8057310 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8057304:	693b      	ldr	r3, [r7, #16]
 8057306:	2b00      	cmp	r3, #0
 8057308:	d002      	beq.n	8057310 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 805730a:	693b      	ldr	r3, [r7, #16]
 805730c:	3b01      	subs	r3, #1
 805730e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8057310:	693b      	ldr	r3, [r7, #16]
 8057312:	1c5a      	adds	r2, r3, #1
 8057314:	68fb      	ldr	r3, [r7, #12]
 8057316:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8057318:	697b      	ldr	r3, [r7, #20]
}
 805731a:	4618      	mov	r0, r3
 805731c:	3718      	adds	r7, #24
 805731e:	46bd      	mov	sp, r7
 8057320:	bd80      	pop	{r7, pc}

08057322 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8057322:	b580      	push	{r7, lr}
 8057324:	b082      	sub	sp, #8
 8057326:	af00      	add	r7, sp, #0
 8057328:	6078      	str	r0, [r7, #4]
 805732a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 805732c:	687b      	ldr	r3, [r7, #4]
 805732e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8057330:	2b00      	cmp	r3, #0
 8057332:	d018      	beq.n	8057366 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8057334:	687b      	ldr	r3, [r7, #4]
 8057336:	68da      	ldr	r2, [r3, #12]
 8057338:	687b      	ldr	r3, [r7, #4]
 805733a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 805733c:	441a      	add	r2, r3
 805733e:	687b      	ldr	r3, [r7, #4]
 8057340:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8057342:	687b      	ldr	r3, [r7, #4]
 8057344:	68da      	ldr	r2, [r3, #12]
 8057346:	687b      	ldr	r3, [r7, #4]
 8057348:	689b      	ldr	r3, [r3, #8]
 805734a:	429a      	cmp	r2, r3
 805734c:	d303      	bcc.n	8057356 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 805734e:	687b      	ldr	r3, [r7, #4]
 8057350:	681a      	ldr	r2, [r3, #0]
 8057352:	687b      	ldr	r3, [r7, #4]
 8057354:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8057356:	687b      	ldr	r3, [r7, #4]
 8057358:	68d9      	ldr	r1, [r3, #12]
 805735a:	687b      	ldr	r3, [r7, #4]
 805735c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 805735e:	461a      	mov	r2, r3
 8057360:	6838      	ldr	r0, [r7, #0]
 8057362:	f002 fdd1 	bl	8059f08 <memcpy>
	}
}
 8057366:	bf00      	nop
 8057368:	3708      	adds	r7, #8
 805736a:	46bd      	mov	sp, r7
 805736c:	bd80      	pop	{r7, pc}

0805736e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 805736e:	b580      	push	{r7, lr}
 8057370:	b084      	sub	sp, #16
 8057372:	af00      	add	r7, sp, #0
 8057374:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8057376:	f001 ff1d 	bl	80591b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 805737a:	687b      	ldr	r3, [r7, #4]
 805737c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8057380:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8057382:	e011      	b.n	80573a8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8057384:	687b      	ldr	r3, [r7, #4]
 8057386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8057388:	2b00      	cmp	r3, #0
 805738a:	d012      	beq.n	80573b2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 805738c:	687b      	ldr	r3, [r7, #4]
 805738e:	3324      	adds	r3, #36	; 0x24
 8057390:	4618      	mov	r0, r3
 8057392:	f000 fd41 	bl	8057e18 <xTaskRemoveFromEventList>
 8057396:	4603      	mov	r3, r0
 8057398:	2b00      	cmp	r3, #0
 805739a:	d001      	beq.n	80573a0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 805739c:	f000 fe16 	bl	8057fcc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80573a0:	7bfb      	ldrb	r3, [r7, #15]
 80573a2:	3b01      	subs	r3, #1
 80573a4:	b2db      	uxtb	r3, r3
 80573a6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80573a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80573ac:	2b00      	cmp	r3, #0
 80573ae:	dce9      	bgt.n	8057384 <prvUnlockQueue+0x16>
 80573b0:	e000      	b.n	80573b4 <prvUnlockQueue+0x46>
					break;
 80573b2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80573b4:	687b      	ldr	r3, [r7, #4]
 80573b6:	22ff      	movs	r2, #255	; 0xff
 80573b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80573bc:	f001 ff2a 	bl	8059214 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80573c0:	f001 fef8 	bl	80591b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80573c4:	687b      	ldr	r3, [r7, #4]
 80573c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80573ca:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80573cc:	e011      	b.n	80573f2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80573ce:	687b      	ldr	r3, [r7, #4]
 80573d0:	691b      	ldr	r3, [r3, #16]
 80573d2:	2b00      	cmp	r3, #0
 80573d4:	d012      	beq.n	80573fc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80573d6:	687b      	ldr	r3, [r7, #4]
 80573d8:	3310      	adds	r3, #16
 80573da:	4618      	mov	r0, r3
 80573dc:	f000 fd1c 	bl	8057e18 <xTaskRemoveFromEventList>
 80573e0:	4603      	mov	r3, r0
 80573e2:	2b00      	cmp	r3, #0
 80573e4:	d001      	beq.n	80573ea <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80573e6:	f000 fdf1 	bl	8057fcc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80573ea:	7bbb      	ldrb	r3, [r7, #14]
 80573ec:	3b01      	subs	r3, #1
 80573ee:	b2db      	uxtb	r3, r3
 80573f0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80573f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80573f6:	2b00      	cmp	r3, #0
 80573f8:	dce9      	bgt.n	80573ce <prvUnlockQueue+0x60>
 80573fa:	e000      	b.n	80573fe <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80573fc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80573fe:	687b      	ldr	r3, [r7, #4]
 8057400:	22ff      	movs	r2, #255	; 0xff
 8057402:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8057406:	f001 ff05 	bl	8059214 <vPortExitCritical>
}
 805740a:	bf00      	nop
 805740c:	3710      	adds	r7, #16
 805740e:	46bd      	mov	sp, r7
 8057410:	bd80      	pop	{r7, pc}

08057412 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8057412:	b580      	push	{r7, lr}
 8057414:	b084      	sub	sp, #16
 8057416:	af00      	add	r7, sp, #0
 8057418:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 805741a:	f001 fecb 	bl	80591b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 805741e:	687b      	ldr	r3, [r7, #4]
 8057420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8057422:	2b00      	cmp	r3, #0
 8057424:	d102      	bne.n	805742c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8057426:	2301      	movs	r3, #1
 8057428:	60fb      	str	r3, [r7, #12]
 805742a:	e001      	b.n	8057430 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 805742c:	2300      	movs	r3, #0
 805742e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8057430:	f001 fef0 	bl	8059214 <vPortExitCritical>

	return xReturn;
 8057434:	68fb      	ldr	r3, [r7, #12]
}
 8057436:	4618      	mov	r0, r3
 8057438:	3710      	adds	r7, #16
 805743a:	46bd      	mov	sp, r7
 805743c:	bd80      	pop	{r7, pc}

0805743e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 805743e:	b580      	push	{r7, lr}
 8057440:	b084      	sub	sp, #16
 8057442:	af00      	add	r7, sp, #0
 8057444:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8057446:	f001 feb5 	bl	80591b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 805744a:	687b      	ldr	r3, [r7, #4]
 805744c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 805744e:	687b      	ldr	r3, [r7, #4]
 8057450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8057452:	429a      	cmp	r2, r3
 8057454:	d102      	bne.n	805745c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8057456:	2301      	movs	r3, #1
 8057458:	60fb      	str	r3, [r7, #12]
 805745a:	e001      	b.n	8057460 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 805745c:	2300      	movs	r3, #0
 805745e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8057460:	f001 fed8 	bl	8059214 <vPortExitCritical>

	return xReturn;
 8057464:	68fb      	ldr	r3, [r7, #12]
}
 8057466:	4618      	mov	r0, r3
 8057468:	3710      	adds	r7, #16
 805746a:	46bd      	mov	sp, r7
 805746c:	bd80      	pop	{r7, pc}
	...

08057470 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8057470:	b480      	push	{r7}
 8057472:	b085      	sub	sp, #20
 8057474:	af00      	add	r7, sp, #0
 8057476:	6078      	str	r0, [r7, #4]
 8057478:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 805747a:	2300      	movs	r3, #0
 805747c:	60fb      	str	r3, [r7, #12]
 805747e:	e014      	b.n	80574aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8057480:	4a0f      	ldr	r2, [pc, #60]	; (80574c0 <vQueueAddToRegistry+0x50>)
 8057482:	68fb      	ldr	r3, [r7, #12]
 8057484:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8057488:	2b00      	cmp	r3, #0
 805748a:	d10b      	bne.n	80574a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 805748c:	490c      	ldr	r1, [pc, #48]	; (80574c0 <vQueueAddToRegistry+0x50>)
 805748e:	68fb      	ldr	r3, [r7, #12]
 8057490:	683a      	ldr	r2, [r7, #0]
 8057492:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8057496:	4a0a      	ldr	r2, [pc, #40]	; (80574c0 <vQueueAddToRegistry+0x50>)
 8057498:	68fb      	ldr	r3, [r7, #12]
 805749a:	00db      	lsls	r3, r3, #3
 805749c:	4413      	add	r3, r2
 805749e:	687a      	ldr	r2, [r7, #4]
 80574a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80574a2:	e006      	b.n	80574b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80574a4:	68fb      	ldr	r3, [r7, #12]
 80574a6:	3301      	adds	r3, #1
 80574a8:	60fb      	str	r3, [r7, #12]
 80574aa:	68fb      	ldr	r3, [r7, #12]
 80574ac:	2b07      	cmp	r3, #7
 80574ae:	d9e7      	bls.n	8057480 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80574b0:	bf00      	nop
 80574b2:	bf00      	nop
 80574b4:	3714      	adds	r7, #20
 80574b6:	46bd      	mov	sp, r7
 80574b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80574bc:	4770      	bx	lr
 80574be:	bf00      	nop
 80574c0:	24002c34 	.word	0x24002c34

080574c4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80574c4:	b480      	push	{r7}
 80574c6:	b085      	sub	sp, #20
 80574c8:	af00      	add	r7, sp, #0
 80574ca:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80574cc:	2300      	movs	r3, #0
 80574ce:	60fb      	str	r3, [r7, #12]
 80574d0:	e016      	b.n	8057500 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80574d2:	4a10      	ldr	r2, [pc, #64]	; (8057514 <vQueueUnregisterQueue+0x50>)
 80574d4:	68fb      	ldr	r3, [r7, #12]
 80574d6:	00db      	lsls	r3, r3, #3
 80574d8:	4413      	add	r3, r2
 80574da:	685b      	ldr	r3, [r3, #4]
 80574dc:	687a      	ldr	r2, [r7, #4]
 80574de:	429a      	cmp	r2, r3
 80574e0:	d10b      	bne.n	80574fa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80574e2:	4a0c      	ldr	r2, [pc, #48]	; (8057514 <vQueueUnregisterQueue+0x50>)
 80574e4:	68fb      	ldr	r3, [r7, #12]
 80574e6:	2100      	movs	r1, #0
 80574e8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80574ec:	4a09      	ldr	r2, [pc, #36]	; (8057514 <vQueueUnregisterQueue+0x50>)
 80574ee:	68fb      	ldr	r3, [r7, #12]
 80574f0:	00db      	lsls	r3, r3, #3
 80574f2:	4413      	add	r3, r2
 80574f4:	2200      	movs	r2, #0
 80574f6:	605a      	str	r2, [r3, #4]
				break;
 80574f8:	e006      	b.n	8057508 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80574fa:	68fb      	ldr	r3, [r7, #12]
 80574fc:	3301      	adds	r3, #1
 80574fe:	60fb      	str	r3, [r7, #12]
 8057500:	68fb      	ldr	r3, [r7, #12]
 8057502:	2b07      	cmp	r3, #7
 8057504:	d9e5      	bls.n	80574d2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8057506:	bf00      	nop
 8057508:	bf00      	nop
 805750a:	3714      	adds	r7, #20
 805750c:	46bd      	mov	sp, r7
 805750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8057512:	4770      	bx	lr
 8057514:	24002c34 	.word	0x24002c34

08057518 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8057518:	b580      	push	{r7, lr}
 805751a:	b086      	sub	sp, #24
 805751c:	af00      	add	r7, sp, #0
 805751e:	60f8      	str	r0, [r7, #12]
 8057520:	60b9      	str	r1, [r7, #8]
 8057522:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8057524:	68fb      	ldr	r3, [r7, #12]
 8057526:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8057528:	f001 fe44 	bl	80591b4 <vPortEnterCritical>
 805752c:	697b      	ldr	r3, [r7, #20]
 805752e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8057532:	b25b      	sxtb	r3, r3
 8057534:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8057538:	d103      	bne.n	8057542 <vQueueWaitForMessageRestricted+0x2a>
 805753a:	697b      	ldr	r3, [r7, #20]
 805753c:	2200      	movs	r2, #0
 805753e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8057542:	697b      	ldr	r3, [r7, #20]
 8057544:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8057548:	b25b      	sxtb	r3, r3
 805754a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 805754e:	d103      	bne.n	8057558 <vQueueWaitForMessageRestricted+0x40>
 8057550:	697b      	ldr	r3, [r7, #20]
 8057552:	2200      	movs	r2, #0
 8057554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8057558:	f001 fe5c 	bl	8059214 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 805755c:	697b      	ldr	r3, [r7, #20]
 805755e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8057560:	2b00      	cmp	r3, #0
 8057562:	d106      	bne.n	8057572 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8057564:	697b      	ldr	r3, [r7, #20]
 8057566:	3324      	adds	r3, #36	; 0x24
 8057568:	687a      	ldr	r2, [r7, #4]
 805756a:	68b9      	ldr	r1, [r7, #8]
 805756c:	4618      	mov	r0, r3
 805756e:	f000 fc27 	bl	8057dc0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8057572:	6978      	ldr	r0, [r7, #20]
 8057574:	f7ff fefb 	bl	805736e <prvUnlockQueue>
	}
 8057578:	bf00      	nop
 805757a:	3718      	adds	r7, #24
 805757c:	46bd      	mov	sp, r7
 805757e:	bd80      	pop	{r7, pc}

08057580 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8057580:	b580      	push	{r7, lr}
 8057582:	b08e      	sub	sp, #56	; 0x38
 8057584:	af04      	add	r7, sp, #16
 8057586:	60f8      	str	r0, [r7, #12]
 8057588:	60b9      	str	r1, [r7, #8]
 805758a:	607a      	str	r2, [r7, #4]
 805758c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 805758e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8057590:	2b00      	cmp	r3, #0
 8057592:	d10a      	bne.n	80575aa <xTaskCreateStatic+0x2a>
	__asm volatile
 8057594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8057598:	f383 8811 	msr	BASEPRI, r3
 805759c:	f3bf 8f6f 	isb	sy
 80575a0:	f3bf 8f4f 	dsb	sy
 80575a4:	623b      	str	r3, [r7, #32]
}
 80575a6:	bf00      	nop
 80575a8:	e7fe      	b.n	80575a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80575aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80575ac:	2b00      	cmp	r3, #0
 80575ae:	d10a      	bne.n	80575c6 <xTaskCreateStatic+0x46>
	__asm volatile
 80575b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80575b4:	f383 8811 	msr	BASEPRI, r3
 80575b8:	f3bf 8f6f 	isb	sy
 80575bc:	f3bf 8f4f 	dsb	sy
 80575c0:	61fb      	str	r3, [r7, #28]
}
 80575c2:	bf00      	nop
 80575c4:	e7fe      	b.n	80575c4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80575c6:	2354      	movs	r3, #84	; 0x54
 80575c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80575ca:	693b      	ldr	r3, [r7, #16]
 80575cc:	2b54      	cmp	r3, #84	; 0x54
 80575ce:	d00a      	beq.n	80575e6 <xTaskCreateStatic+0x66>
	__asm volatile
 80575d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80575d4:	f383 8811 	msr	BASEPRI, r3
 80575d8:	f3bf 8f6f 	isb	sy
 80575dc:	f3bf 8f4f 	dsb	sy
 80575e0:	61bb      	str	r3, [r7, #24]
}
 80575e2:	bf00      	nop
 80575e4:	e7fe      	b.n	80575e4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80575e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80575e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80575ea:	2b00      	cmp	r3, #0
 80575ec:	d01e      	beq.n	805762c <xTaskCreateStatic+0xac>
 80575ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80575f0:	2b00      	cmp	r3, #0
 80575f2:	d01b      	beq.n	805762c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80575f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80575f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80575f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80575fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80575fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80575fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8057600:	2202      	movs	r2, #2
 8057602:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8057606:	2300      	movs	r3, #0
 8057608:	9303      	str	r3, [sp, #12]
 805760a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805760c:	9302      	str	r3, [sp, #8]
 805760e:	f107 0314 	add.w	r3, r7, #20
 8057612:	9301      	str	r3, [sp, #4]
 8057614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8057616:	9300      	str	r3, [sp, #0]
 8057618:	683b      	ldr	r3, [r7, #0]
 805761a:	687a      	ldr	r2, [r7, #4]
 805761c:	68b9      	ldr	r1, [r7, #8]
 805761e:	68f8      	ldr	r0, [r7, #12]
 8057620:	f000 f850 	bl	80576c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8057624:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8057626:	f000 f8d5 	bl	80577d4 <prvAddNewTaskToReadyList>
 805762a:	e001      	b.n	8057630 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 805762c:	2300      	movs	r3, #0
 805762e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8057630:	697b      	ldr	r3, [r7, #20]
	}
 8057632:	4618      	mov	r0, r3
 8057634:	3728      	adds	r7, #40	; 0x28
 8057636:	46bd      	mov	sp, r7
 8057638:	bd80      	pop	{r7, pc}

0805763a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 805763a:	b580      	push	{r7, lr}
 805763c:	b08c      	sub	sp, #48	; 0x30
 805763e:	af04      	add	r7, sp, #16
 8057640:	60f8      	str	r0, [r7, #12]
 8057642:	60b9      	str	r1, [r7, #8]
 8057644:	603b      	str	r3, [r7, #0]
 8057646:	4613      	mov	r3, r2
 8057648:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 805764a:	88fb      	ldrh	r3, [r7, #6]
 805764c:	009b      	lsls	r3, r3, #2
 805764e:	4618      	mov	r0, r3
 8057650:	f001 fed2 	bl	80593f8 <pvPortMalloc>
 8057654:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8057656:	697b      	ldr	r3, [r7, #20]
 8057658:	2b00      	cmp	r3, #0
 805765a:	d00e      	beq.n	805767a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 805765c:	2054      	movs	r0, #84	; 0x54
 805765e:	f001 fecb 	bl	80593f8 <pvPortMalloc>
 8057662:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8057664:	69fb      	ldr	r3, [r7, #28]
 8057666:	2b00      	cmp	r3, #0
 8057668:	d003      	beq.n	8057672 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 805766a:	69fb      	ldr	r3, [r7, #28]
 805766c:	697a      	ldr	r2, [r7, #20]
 805766e:	631a      	str	r2, [r3, #48]	; 0x30
 8057670:	e005      	b.n	805767e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8057672:	6978      	ldr	r0, [r7, #20]
 8057674:	f001 ff8c 	bl	8059590 <vPortFree>
 8057678:	e001      	b.n	805767e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 805767a:	2300      	movs	r3, #0
 805767c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 805767e:	69fb      	ldr	r3, [r7, #28]
 8057680:	2b00      	cmp	r3, #0
 8057682:	d017      	beq.n	80576b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8057684:	69fb      	ldr	r3, [r7, #28]
 8057686:	2200      	movs	r2, #0
 8057688:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 805768c:	88fa      	ldrh	r2, [r7, #6]
 805768e:	2300      	movs	r3, #0
 8057690:	9303      	str	r3, [sp, #12]
 8057692:	69fb      	ldr	r3, [r7, #28]
 8057694:	9302      	str	r3, [sp, #8]
 8057696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8057698:	9301      	str	r3, [sp, #4]
 805769a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 805769c:	9300      	str	r3, [sp, #0]
 805769e:	683b      	ldr	r3, [r7, #0]
 80576a0:	68b9      	ldr	r1, [r7, #8]
 80576a2:	68f8      	ldr	r0, [r7, #12]
 80576a4:	f000 f80e 	bl	80576c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80576a8:	69f8      	ldr	r0, [r7, #28]
 80576aa:	f000 f893 	bl	80577d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80576ae:	2301      	movs	r3, #1
 80576b0:	61bb      	str	r3, [r7, #24]
 80576b2:	e002      	b.n	80576ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80576b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80576b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80576ba:	69bb      	ldr	r3, [r7, #24]
	}
 80576bc:	4618      	mov	r0, r3
 80576be:	3720      	adds	r7, #32
 80576c0:	46bd      	mov	sp, r7
 80576c2:	bd80      	pop	{r7, pc}

080576c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80576c4:	b580      	push	{r7, lr}
 80576c6:	b088      	sub	sp, #32
 80576c8:	af00      	add	r7, sp, #0
 80576ca:	60f8      	str	r0, [r7, #12]
 80576cc:	60b9      	str	r1, [r7, #8]
 80576ce:	607a      	str	r2, [r7, #4]
 80576d0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80576d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80576d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80576d6:	6879      	ldr	r1, [r7, #4]
 80576d8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80576dc:	440b      	add	r3, r1
 80576de:	009b      	lsls	r3, r3, #2
 80576e0:	4413      	add	r3, r2
 80576e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80576e4:	69bb      	ldr	r3, [r7, #24]
 80576e6:	f023 0307 	bic.w	r3, r3, #7
 80576ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80576ec:	69bb      	ldr	r3, [r7, #24]
 80576ee:	f003 0307 	and.w	r3, r3, #7
 80576f2:	2b00      	cmp	r3, #0
 80576f4:	d00a      	beq.n	805770c <prvInitialiseNewTask+0x48>
	__asm volatile
 80576f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80576fa:	f383 8811 	msr	BASEPRI, r3
 80576fe:	f3bf 8f6f 	isb	sy
 8057702:	f3bf 8f4f 	dsb	sy
 8057706:	617b      	str	r3, [r7, #20]
}
 8057708:	bf00      	nop
 805770a:	e7fe      	b.n	805770a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 805770c:	68bb      	ldr	r3, [r7, #8]
 805770e:	2b00      	cmp	r3, #0
 8057710:	d01f      	beq.n	8057752 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8057712:	2300      	movs	r3, #0
 8057714:	61fb      	str	r3, [r7, #28]
 8057716:	e012      	b.n	805773e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8057718:	68ba      	ldr	r2, [r7, #8]
 805771a:	69fb      	ldr	r3, [r7, #28]
 805771c:	4413      	add	r3, r2
 805771e:	7819      	ldrb	r1, [r3, #0]
 8057720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8057722:	69fb      	ldr	r3, [r7, #28]
 8057724:	4413      	add	r3, r2
 8057726:	3334      	adds	r3, #52	; 0x34
 8057728:	460a      	mov	r2, r1
 805772a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 805772c:	68ba      	ldr	r2, [r7, #8]
 805772e:	69fb      	ldr	r3, [r7, #28]
 8057730:	4413      	add	r3, r2
 8057732:	781b      	ldrb	r3, [r3, #0]
 8057734:	2b00      	cmp	r3, #0
 8057736:	d006      	beq.n	8057746 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8057738:	69fb      	ldr	r3, [r7, #28]
 805773a:	3301      	adds	r3, #1
 805773c:	61fb      	str	r3, [r7, #28]
 805773e:	69fb      	ldr	r3, [r7, #28]
 8057740:	2b0f      	cmp	r3, #15
 8057742:	d9e9      	bls.n	8057718 <prvInitialiseNewTask+0x54>
 8057744:	e000      	b.n	8057748 <prvInitialiseNewTask+0x84>
			{
				break;
 8057746:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8057748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 805774a:	2200      	movs	r2, #0
 805774c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8057750:	e003      	b.n	805775a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8057752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8057754:	2200      	movs	r2, #0
 8057756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 805775a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 805775c:	2b06      	cmp	r3, #6
 805775e:	d901      	bls.n	8057764 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8057760:	2306      	movs	r3, #6
 8057762:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8057764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8057766:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8057768:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 805776a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 805776c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 805776e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8057770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8057772:	2200      	movs	r2, #0
 8057774:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8057776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8057778:	3304      	adds	r3, #4
 805777a:	4618      	mov	r0, r3
 805777c:	f7fe fe80 	bl	8056480 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8057780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8057782:	3318      	adds	r3, #24
 8057784:	4618      	mov	r0, r3
 8057786:	f7fe fe7b 	bl	8056480 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 805778a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 805778c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 805778e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8057790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8057792:	f1c3 0207 	rsb	r2, r3, #7
 8057796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8057798:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 805779a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 805779c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 805779e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80577a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80577a2:	2200      	movs	r2, #0
 80577a4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80577a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80577a8:	2200      	movs	r2, #0
 80577aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80577ae:	683a      	ldr	r2, [r7, #0]
 80577b0:	68f9      	ldr	r1, [r7, #12]
 80577b2:	69b8      	ldr	r0, [r7, #24]
 80577b4:	f001 fbd0 	bl	8058f58 <pxPortInitialiseStack>
 80577b8:	4602      	mov	r2, r0
 80577ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80577bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80577be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80577c0:	2b00      	cmp	r3, #0
 80577c2:	d002      	beq.n	80577ca <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80577c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80577c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80577c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80577ca:	bf00      	nop
 80577cc:	3720      	adds	r7, #32
 80577ce:	46bd      	mov	sp, r7
 80577d0:	bd80      	pop	{r7, pc}
	...

080577d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80577d4:	b580      	push	{r7, lr}
 80577d6:	b082      	sub	sp, #8
 80577d8:	af00      	add	r7, sp, #0
 80577da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80577dc:	f001 fcea 	bl	80591b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80577e0:	4b2a      	ldr	r3, [pc, #168]	; (805788c <prvAddNewTaskToReadyList+0xb8>)
 80577e2:	681b      	ldr	r3, [r3, #0]
 80577e4:	3301      	adds	r3, #1
 80577e6:	4a29      	ldr	r2, [pc, #164]	; (805788c <prvAddNewTaskToReadyList+0xb8>)
 80577e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80577ea:	4b29      	ldr	r3, [pc, #164]	; (8057890 <prvAddNewTaskToReadyList+0xbc>)
 80577ec:	681b      	ldr	r3, [r3, #0]
 80577ee:	2b00      	cmp	r3, #0
 80577f0:	d109      	bne.n	8057806 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80577f2:	4a27      	ldr	r2, [pc, #156]	; (8057890 <prvAddNewTaskToReadyList+0xbc>)
 80577f4:	687b      	ldr	r3, [r7, #4]
 80577f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80577f8:	4b24      	ldr	r3, [pc, #144]	; (805788c <prvAddNewTaskToReadyList+0xb8>)
 80577fa:	681b      	ldr	r3, [r3, #0]
 80577fc:	2b01      	cmp	r3, #1
 80577fe:	d110      	bne.n	8057822 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8057800:	f000 fc08 	bl	8058014 <prvInitialiseTaskLists>
 8057804:	e00d      	b.n	8057822 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8057806:	4b23      	ldr	r3, [pc, #140]	; (8057894 <prvAddNewTaskToReadyList+0xc0>)
 8057808:	681b      	ldr	r3, [r3, #0]
 805780a:	2b00      	cmp	r3, #0
 805780c:	d109      	bne.n	8057822 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 805780e:	4b20      	ldr	r3, [pc, #128]	; (8057890 <prvAddNewTaskToReadyList+0xbc>)
 8057810:	681b      	ldr	r3, [r3, #0]
 8057812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8057814:	687b      	ldr	r3, [r7, #4]
 8057816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8057818:	429a      	cmp	r2, r3
 805781a:	d802      	bhi.n	8057822 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 805781c:	4a1c      	ldr	r2, [pc, #112]	; (8057890 <prvAddNewTaskToReadyList+0xbc>)
 805781e:	687b      	ldr	r3, [r7, #4]
 8057820:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8057822:	4b1d      	ldr	r3, [pc, #116]	; (8057898 <prvAddNewTaskToReadyList+0xc4>)
 8057824:	681b      	ldr	r3, [r3, #0]
 8057826:	3301      	adds	r3, #1
 8057828:	4a1b      	ldr	r2, [pc, #108]	; (8057898 <prvAddNewTaskToReadyList+0xc4>)
 805782a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 805782c:	687b      	ldr	r3, [r7, #4]
 805782e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8057830:	2201      	movs	r2, #1
 8057832:	409a      	lsls	r2, r3
 8057834:	4b19      	ldr	r3, [pc, #100]	; (805789c <prvAddNewTaskToReadyList+0xc8>)
 8057836:	681b      	ldr	r3, [r3, #0]
 8057838:	4313      	orrs	r3, r2
 805783a:	4a18      	ldr	r2, [pc, #96]	; (805789c <prvAddNewTaskToReadyList+0xc8>)
 805783c:	6013      	str	r3, [r2, #0]
 805783e:	687b      	ldr	r3, [r7, #4]
 8057840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8057842:	4613      	mov	r3, r2
 8057844:	009b      	lsls	r3, r3, #2
 8057846:	4413      	add	r3, r2
 8057848:	009b      	lsls	r3, r3, #2
 805784a:	4a15      	ldr	r2, [pc, #84]	; (80578a0 <prvAddNewTaskToReadyList+0xcc>)
 805784c:	441a      	add	r2, r3
 805784e:	687b      	ldr	r3, [r7, #4]
 8057850:	3304      	adds	r3, #4
 8057852:	4619      	mov	r1, r3
 8057854:	4610      	mov	r0, r2
 8057856:	f7fe fe20 	bl	805649a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 805785a:	f001 fcdb 	bl	8059214 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 805785e:	4b0d      	ldr	r3, [pc, #52]	; (8057894 <prvAddNewTaskToReadyList+0xc0>)
 8057860:	681b      	ldr	r3, [r3, #0]
 8057862:	2b00      	cmp	r3, #0
 8057864:	d00e      	beq.n	8057884 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8057866:	4b0a      	ldr	r3, [pc, #40]	; (8057890 <prvAddNewTaskToReadyList+0xbc>)
 8057868:	681b      	ldr	r3, [r3, #0]
 805786a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 805786c:	687b      	ldr	r3, [r7, #4]
 805786e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8057870:	429a      	cmp	r2, r3
 8057872:	d207      	bcs.n	8057884 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8057874:	4b0b      	ldr	r3, [pc, #44]	; (80578a4 <prvAddNewTaskToReadyList+0xd0>)
 8057876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 805787a:	601a      	str	r2, [r3, #0]
 805787c:	f3bf 8f4f 	dsb	sy
 8057880:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8057884:	bf00      	nop
 8057886:	3708      	adds	r7, #8
 8057888:	46bd      	mov	sp, r7
 805788a:	bd80      	pop	{r7, pc}
 805788c:	24002d74 	.word	0x24002d74
 8057890:	24002c74 	.word	0x24002c74
 8057894:	24002d80 	.word	0x24002d80
 8057898:	24002d90 	.word	0x24002d90
 805789c:	24002d7c 	.word	0x24002d7c
 80578a0:	24002c78 	.word	0x24002c78
 80578a4:	e000ed04 	.word	0xe000ed04

080578a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80578a8:	b580      	push	{r7, lr}
 80578aa:	b084      	sub	sp, #16
 80578ac:	af00      	add	r7, sp, #0
 80578ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80578b0:	2300      	movs	r3, #0
 80578b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80578b4:	687b      	ldr	r3, [r7, #4]
 80578b6:	2b00      	cmp	r3, #0
 80578b8:	d017      	beq.n	80578ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80578ba:	4b13      	ldr	r3, [pc, #76]	; (8057908 <vTaskDelay+0x60>)
 80578bc:	681b      	ldr	r3, [r3, #0]
 80578be:	2b00      	cmp	r3, #0
 80578c0:	d00a      	beq.n	80578d8 <vTaskDelay+0x30>
	__asm volatile
 80578c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80578c6:	f383 8811 	msr	BASEPRI, r3
 80578ca:	f3bf 8f6f 	isb	sy
 80578ce:	f3bf 8f4f 	dsb	sy
 80578d2:	60bb      	str	r3, [r7, #8]
}
 80578d4:	bf00      	nop
 80578d6:	e7fe      	b.n	80578d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80578d8:	f000 f880 	bl	80579dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80578dc:	2100      	movs	r1, #0
 80578de:	6878      	ldr	r0, [r7, #4]
 80578e0:	f000 feec 	bl	80586bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80578e4:	f000 f888 	bl	80579f8 <xTaskResumeAll>
 80578e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80578ea:	68fb      	ldr	r3, [r7, #12]
 80578ec:	2b00      	cmp	r3, #0
 80578ee:	d107      	bne.n	8057900 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80578f0:	4b06      	ldr	r3, [pc, #24]	; (805790c <vTaskDelay+0x64>)
 80578f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80578f6:	601a      	str	r2, [r3, #0]
 80578f8:	f3bf 8f4f 	dsb	sy
 80578fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8057900:	bf00      	nop
 8057902:	3710      	adds	r7, #16
 8057904:	46bd      	mov	sp, r7
 8057906:	bd80      	pop	{r7, pc}
 8057908:	24002d9c 	.word	0x24002d9c
 805790c:	e000ed04 	.word	0xe000ed04

08057910 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8057910:	b580      	push	{r7, lr}
 8057912:	b08a      	sub	sp, #40	; 0x28
 8057914:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8057916:	2300      	movs	r3, #0
 8057918:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 805791a:	2300      	movs	r3, #0
 805791c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 805791e:	463a      	mov	r2, r7
 8057920:	1d39      	adds	r1, r7, #4
 8057922:	f107 0308 	add.w	r3, r7, #8
 8057926:	4618      	mov	r0, r3
 8057928:	f7e9 f9b4 	bl	8040c94 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 805792c:	6839      	ldr	r1, [r7, #0]
 805792e:	687b      	ldr	r3, [r7, #4]
 8057930:	68ba      	ldr	r2, [r7, #8]
 8057932:	9202      	str	r2, [sp, #8]
 8057934:	9301      	str	r3, [sp, #4]
 8057936:	2300      	movs	r3, #0
 8057938:	9300      	str	r3, [sp, #0]
 805793a:	2300      	movs	r3, #0
 805793c:	460a      	mov	r2, r1
 805793e:	4921      	ldr	r1, [pc, #132]	; (80579c4 <vTaskStartScheduler+0xb4>)
 8057940:	4821      	ldr	r0, [pc, #132]	; (80579c8 <vTaskStartScheduler+0xb8>)
 8057942:	f7ff fe1d 	bl	8057580 <xTaskCreateStatic>
 8057946:	4603      	mov	r3, r0
 8057948:	4a20      	ldr	r2, [pc, #128]	; (80579cc <vTaskStartScheduler+0xbc>)
 805794a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 805794c:	4b1f      	ldr	r3, [pc, #124]	; (80579cc <vTaskStartScheduler+0xbc>)
 805794e:	681b      	ldr	r3, [r3, #0]
 8057950:	2b00      	cmp	r3, #0
 8057952:	d002      	beq.n	805795a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8057954:	2301      	movs	r3, #1
 8057956:	617b      	str	r3, [r7, #20]
 8057958:	e001      	b.n	805795e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 805795a:	2300      	movs	r3, #0
 805795c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 805795e:	697b      	ldr	r3, [r7, #20]
 8057960:	2b01      	cmp	r3, #1
 8057962:	d102      	bne.n	805796a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8057964:	f000 ff10 	bl	8058788 <xTimerCreateTimerTask>
 8057968:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 805796a:	697b      	ldr	r3, [r7, #20]
 805796c:	2b01      	cmp	r3, #1
 805796e:	d116      	bne.n	805799e <vTaskStartScheduler+0x8e>
	__asm volatile
 8057970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8057974:	f383 8811 	msr	BASEPRI, r3
 8057978:	f3bf 8f6f 	isb	sy
 805797c:	f3bf 8f4f 	dsb	sy
 8057980:	613b      	str	r3, [r7, #16]
}
 8057982:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8057984:	4b12      	ldr	r3, [pc, #72]	; (80579d0 <vTaskStartScheduler+0xc0>)
 8057986:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 805798a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 805798c:	4b11      	ldr	r3, [pc, #68]	; (80579d4 <vTaskStartScheduler+0xc4>)
 805798e:	2201      	movs	r2, #1
 8057990:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8057992:	4b11      	ldr	r3, [pc, #68]	; (80579d8 <vTaskStartScheduler+0xc8>)
 8057994:	2200      	movs	r2, #0
 8057996:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8057998:	f001 fb6a 	bl	8059070 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 805799c:	e00e      	b.n	80579bc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 805799e:	697b      	ldr	r3, [r7, #20]
 80579a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80579a4:	d10a      	bne.n	80579bc <vTaskStartScheduler+0xac>
	__asm volatile
 80579a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80579aa:	f383 8811 	msr	BASEPRI, r3
 80579ae:	f3bf 8f6f 	isb	sy
 80579b2:	f3bf 8f4f 	dsb	sy
 80579b6:	60fb      	str	r3, [r7, #12]
}
 80579b8:	bf00      	nop
 80579ba:	e7fe      	b.n	80579ba <vTaskStartScheduler+0xaa>
}
 80579bc:	bf00      	nop
 80579be:	3718      	adds	r7, #24
 80579c0:	46bd      	mov	sp, r7
 80579c2:	bd80      	pop	{r7, pc}
 80579c4:	0805b8f4 	.word	0x0805b8f4
 80579c8:	08057fe5 	.word	0x08057fe5
 80579cc:	24002d98 	.word	0x24002d98
 80579d0:	24002d94 	.word	0x24002d94
 80579d4:	24002d80 	.word	0x24002d80
 80579d8:	24002d78 	.word	0x24002d78

080579dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80579dc:	b480      	push	{r7}
 80579de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80579e0:	4b04      	ldr	r3, [pc, #16]	; (80579f4 <vTaskSuspendAll+0x18>)
 80579e2:	681b      	ldr	r3, [r3, #0]
 80579e4:	3301      	adds	r3, #1
 80579e6:	4a03      	ldr	r2, [pc, #12]	; (80579f4 <vTaskSuspendAll+0x18>)
 80579e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80579ea:	bf00      	nop
 80579ec:	46bd      	mov	sp, r7
 80579ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80579f2:	4770      	bx	lr
 80579f4:	24002d9c 	.word	0x24002d9c

080579f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80579f8:	b580      	push	{r7, lr}
 80579fa:	b084      	sub	sp, #16
 80579fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80579fe:	2300      	movs	r3, #0
 8057a00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8057a02:	2300      	movs	r3, #0
 8057a04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8057a06:	4b41      	ldr	r3, [pc, #260]	; (8057b0c <xTaskResumeAll+0x114>)
 8057a08:	681b      	ldr	r3, [r3, #0]
 8057a0a:	2b00      	cmp	r3, #0
 8057a0c:	d10a      	bne.n	8057a24 <xTaskResumeAll+0x2c>
	__asm volatile
 8057a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8057a12:	f383 8811 	msr	BASEPRI, r3
 8057a16:	f3bf 8f6f 	isb	sy
 8057a1a:	f3bf 8f4f 	dsb	sy
 8057a1e:	603b      	str	r3, [r7, #0]
}
 8057a20:	bf00      	nop
 8057a22:	e7fe      	b.n	8057a22 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8057a24:	f001 fbc6 	bl	80591b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8057a28:	4b38      	ldr	r3, [pc, #224]	; (8057b0c <xTaskResumeAll+0x114>)
 8057a2a:	681b      	ldr	r3, [r3, #0]
 8057a2c:	3b01      	subs	r3, #1
 8057a2e:	4a37      	ldr	r2, [pc, #220]	; (8057b0c <xTaskResumeAll+0x114>)
 8057a30:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8057a32:	4b36      	ldr	r3, [pc, #216]	; (8057b0c <xTaskResumeAll+0x114>)
 8057a34:	681b      	ldr	r3, [r3, #0]
 8057a36:	2b00      	cmp	r3, #0
 8057a38:	d161      	bne.n	8057afe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8057a3a:	4b35      	ldr	r3, [pc, #212]	; (8057b10 <xTaskResumeAll+0x118>)
 8057a3c:	681b      	ldr	r3, [r3, #0]
 8057a3e:	2b00      	cmp	r3, #0
 8057a40:	d05d      	beq.n	8057afe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8057a42:	e02e      	b.n	8057aa2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8057a44:	4b33      	ldr	r3, [pc, #204]	; (8057b14 <xTaskResumeAll+0x11c>)
 8057a46:	68db      	ldr	r3, [r3, #12]
 8057a48:	68db      	ldr	r3, [r3, #12]
 8057a4a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8057a4c:	68fb      	ldr	r3, [r7, #12]
 8057a4e:	3318      	adds	r3, #24
 8057a50:	4618      	mov	r0, r3
 8057a52:	f7fe fd7f 	bl	8056554 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8057a56:	68fb      	ldr	r3, [r7, #12]
 8057a58:	3304      	adds	r3, #4
 8057a5a:	4618      	mov	r0, r3
 8057a5c:	f7fe fd7a 	bl	8056554 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8057a60:	68fb      	ldr	r3, [r7, #12]
 8057a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8057a64:	2201      	movs	r2, #1
 8057a66:	409a      	lsls	r2, r3
 8057a68:	4b2b      	ldr	r3, [pc, #172]	; (8057b18 <xTaskResumeAll+0x120>)
 8057a6a:	681b      	ldr	r3, [r3, #0]
 8057a6c:	4313      	orrs	r3, r2
 8057a6e:	4a2a      	ldr	r2, [pc, #168]	; (8057b18 <xTaskResumeAll+0x120>)
 8057a70:	6013      	str	r3, [r2, #0]
 8057a72:	68fb      	ldr	r3, [r7, #12]
 8057a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8057a76:	4613      	mov	r3, r2
 8057a78:	009b      	lsls	r3, r3, #2
 8057a7a:	4413      	add	r3, r2
 8057a7c:	009b      	lsls	r3, r3, #2
 8057a7e:	4a27      	ldr	r2, [pc, #156]	; (8057b1c <xTaskResumeAll+0x124>)
 8057a80:	441a      	add	r2, r3
 8057a82:	68fb      	ldr	r3, [r7, #12]
 8057a84:	3304      	adds	r3, #4
 8057a86:	4619      	mov	r1, r3
 8057a88:	4610      	mov	r0, r2
 8057a8a:	f7fe fd06 	bl	805649a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8057a8e:	68fb      	ldr	r3, [r7, #12]
 8057a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8057a92:	4b23      	ldr	r3, [pc, #140]	; (8057b20 <xTaskResumeAll+0x128>)
 8057a94:	681b      	ldr	r3, [r3, #0]
 8057a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8057a98:	429a      	cmp	r2, r3
 8057a9a:	d302      	bcc.n	8057aa2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8057a9c:	4b21      	ldr	r3, [pc, #132]	; (8057b24 <xTaskResumeAll+0x12c>)
 8057a9e:	2201      	movs	r2, #1
 8057aa0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8057aa2:	4b1c      	ldr	r3, [pc, #112]	; (8057b14 <xTaskResumeAll+0x11c>)
 8057aa4:	681b      	ldr	r3, [r3, #0]
 8057aa6:	2b00      	cmp	r3, #0
 8057aa8:	d1cc      	bne.n	8057a44 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8057aaa:	68fb      	ldr	r3, [r7, #12]
 8057aac:	2b00      	cmp	r3, #0
 8057aae:	d001      	beq.n	8057ab4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8057ab0:	f000 fb4e 	bl	8058150 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8057ab4:	4b1c      	ldr	r3, [pc, #112]	; (8057b28 <xTaskResumeAll+0x130>)
 8057ab6:	681b      	ldr	r3, [r3, #0]
 8057ab8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8057aba:	687b      	ldr	r3, [r7, #4]
 8057abc:	2b00      	cmp	r3, #0
 8057abe:	d010      	beq.n	8057ae2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8057ac0:	f000 f846 	bl	8057b50 <xTaskIncrementTick>
 8057ac4:	4603      	mov	r3, r0
 8057ac6:	2b00      	cmp	r3, #0
 8057ac8:	d002      	beq.n	8057ad0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8057aca:	4b16      	ldr	r3, [pc, #88]	; (8057b24 <xTaskResumeAll+0x12c>)
 8057acc:	2201      	movs	r2, #1
 8057ace:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8057ad0:	687b      	ldr	r3, [r7, #4]
 8057ad2:	3b01      	subs	r3, #1
 8057ad4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8057ad6:	687b      	ldr	r3, [r7, #4]
 8057ad8:	2b00      	cmp	r3, #0
 8057ada:	d1f1      	bne.n	8057ac0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8057adc:	4b12      	ldr	r3, [pc, #72]	; (8057b28 <xTaskResumeAll+0x130>)
 8057ade:	2200      	movs	r2, #0
 8057ae0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8057ae2:	4b10      	ldr	r3, [pc, #64]	; (8057b24 <xTaskResumeAll+0x12c>)
 8057ae4:	681b      	ldr	r3, [r3, #0]
 8057ae6:	2b00      	cmp	r3, #0
 8057ae8:	d009      	beq.n	8057afe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8057aea:	2301      	movs	r3, #1
 8057aec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8057aee:	4b0f      	ldr	r3, [pc, #60]	; (8057b2c <xTaskResumeAll+0x134>)
 8057af0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8057af4:	601a      	str	r2, [r3, #0]
 8057af6:	f3bf 8f4f 	dsb	sy
 8057afa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8057afe:	f001 fb89 	bl	8059214 <vPortExitCritical>

	return xAlreadyYielded;
 8057b02:	68bb      	ldr	r3, [r7, #8]
}
 8057b04:	4618      	mov	r0, r3
 8057b06:	3710      	adds	r7, #16
 8057b08:	46bd      	mov	sp, r7
 8057b0a:	bd80      	pop	{r7, pc}
 8057b0c:	24002d9c 	.word	0x24002d9c
 8057b10:	24002d74 	.word	0x24002d74
 8057b14:	24002d34 	.word	0x24002d34
 8057b18:	24002d7c 	.word	0x24002d7c
 8057b1c:	24002c78 	.word	0x24002c78
 8057b20:	24002c74 	.word	0x24002c74
 8057b24:	24002d88 	.word	0x24002d88
 8057b28:	24002d84 	.word	0x24002d84
 8057b2c:	e000ed04 	.word	0xe000ed04

08057b30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8057b30:	b480      	push	{r7}
 8057b32:	b083      	sub	sp, #12
 8057b34:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8057b36:	4b05      	ldr	r3, [pc, #20]	; (8057b4c <xTaskGetTickCount+0x1c>)
 8057b38:	681b      	ldr	r3, [r3, #0]
 8057b3a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8057b3c:	687b      	ldr	r3, [r7, #4]
}
 8057b3e:	4618      	mov	r0, r3
 8057b40:	370c      	adds	r7, #12
 8057b42:	46bd      	mov	sp, r7
 8057b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8057b48:	4770      	bx	lr
 8057b4a:	bf00      	nop
 8057b4c:	24002d78 	.word	0x24002d78

08057b50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8057b50:	b580      	push	{r7, lr}
 8057b52:	b086      	sub	sp, #24
 8057b54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8057b56:	2300      	movs	r3, #0
 8057b58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8057b5a:	4b4e      	ldr	r3, [pc, #312]	; (8057c94 <xTaskIncrementTick+0x144>)
 8057b5c:	681b      	ldr	r3, [r3, #0]
 8057b5e:	2b00      	cmp	r3, #0
 8057b60:	f040 808e 	bne.w	8057c80 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8057b64:	4b4c      	ldr	r3, [pc, #304]	; (8057c98 <xTaskIncrementTick+0x148>)
 8057b66:	681b      	ldr	r3, [r3, #0]
 8057b68:	3301      	adds	r3, #1
 8057b6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8057b6c:	4a4a      	ldr	r2, [pc, #296]	; (8057c98 <xTaskIncrementTick+0x148>)
 8057b6e:	693b      	ldr	r3, [r7, #16]
 8057b70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8057b72:	693b      	ldr	r3, [r7, #16]
 8057b74:	2b00      	cmp	r3, #0
 8057b76:	d120      	bne.n	8057bba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8057b78:	4b48      	ldr	r3, [pc, #288]	; (8057c9c <xTaskIncrementTick+0x14c>)
 8057b7a:	681b      	ldr	r3, [r3, #0]
 8057b7c:	681b      	ldr	r3, [r3, #0]
 8057b7e:	2b00      	cmp	r3, #0
 8057b80:	d00a      	beq.n	8057b98 <xTaskIncrementTick+0x48>
	__asm volatile
 8057b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8057b86:	f383 8811 	msr	BASEPRI, r3
 8057b8a:	f3bf 8f6f 	isb	sy
 8057b8e:	f3bf 8f4f 	dsb	sy
 8057b92:	603b      	str	r3, [r7, #0]
}
 8057b94:	bf00      	nop
 8057b96:	e7fe      	b.n	8057b96 <xTaskIncrementTick+0x46>
 8057b98:	4b40      	ldr	r3, [pc, #256]	; (8057c9c <xTaskIncrementTick+0x14c>)
 8057b9a:	681b      	ldr	r3, [r3, #0]
 8057b9c:	60fb      	str	r3, [r7, #12]
 8057b9e:	4b40      	ldr	r3, [pc, #256]	; (8057ca0 <xTaskIncrementTick+0x150>)
 8057ba0:	681b      	ldr	r3, [r3, #0]
 8057ba2:	4a3e      	ldr	r2, [pc, #248]	; (8057c9c <xTaskIncrementTick+0x14c>)
 8057ba4:	6013      	str	r3, [r2, #0]
 8057ba6:	4a3e      	ldr	r2, [pc, #248]	; (8057ca0 <xTaskIncrementTick+0x150>)
 8057ba8:	68fb      	ldr	r3, [r7, #12]
 8057baa:	6013      	str	r3, [r2, #0]
 8057bac:	4b3d      	ldr	r3, [pc, #244]	; (8057ca4 <xTaskIncrementTick+0x154>)
 8057bae:	681b      	ldr	r3, [r3, #0]
 8057bb0:	3301      	adds	r3, #1
 8057bb2:	4a3c      	ldr	r2, [pc, #240]	; (8057ca4 <xTaskIncrementTick+0x154>)
 8057bb4:	6013      	str	r3, [r2, #0]
 8057bb6:	f000 facb 	bl	8058150 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8057bba:	4b3b      	ldr	r3, [pc, #236]	; (8057ca8 <xTaskIncrementTick+0x158>)
 8057bbc:	681b      	ldr	r3, [r3, #0]
 8057bbe:	693a      	ldr	r2, [r7, #16]
 8057bc0:	429a      	cmp	r2, r3
 8057bc2:	d348      	bcc.n	8057c56 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8057bc4:	4b35      	ldr	r3, [pc, #212]	; (8057c9c <xTaskIncrementTick+0x14c>)
 8057bc6:	681b      	ldr	r3, [r3, #0]
 8057bc8:	681b      	ldr	r3, [r3, #0]
 8057bca:	2b00      	cmp	r3, #0
 8057bcc:	d104      	bne.n	8057bd8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8057bce:	4b36      	ldr	r3, [pc, #216]	; (8057ca8 <xTaskIncrementTick+0x158>)
 8057bd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8057bd4:	601a      	str	r2, [r3, #0]
					break;
 8057bd6:	e03e      	b.n	8057c56 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8057bd8:	4b30      	ldr	r3, [pc, #192]	; (8057c9c <xTaskIncrementTick+0x14c>)
 8057bda:	681b      	ldr	r3, [r3, #0]
 8057bdc:	68db      	ldr	r3, [r3, #12]
 8057bde:	68db      	ldr	r3, [r3, #12]
 8057be0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8057be2:	68bb      	ldr	r3, [r7, #8]
 8057be4:	685b      	ldr	r3, [r3, #4]
 8057be6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8057be8:	693a      	ldr	r2, [r7, #16]
 8057bea:	687b      	ldr	r3, [r7, #4]
 8057bec:	429a      	cmp	r2, r3
 8057bee:	d203      	bcs.n	8057bf8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8057bf0:	4a2d      	ldr	r2, [pc, #180]	; (8057ca8 <xTaskIncrementTick+0x158>)
 8057bf2:	687b      	ldr	r3, [r7, #4]
 8057bf4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8057bf6:	e02e      	b.n	8057c56 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8057bf8:	68bb      	ldr	r3, [r7, #8]
 8057bfa:	3304      	adds	r3, #4
 8057bfc:	4618      	mov	r0, r3
 8057bfe:	f7fe fca9 	bl	8056554 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8057c02:	68bb      	ldr	r3, [r7, #8]
 8057c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8057c06:	2b00      	cmp	r3, #0
 8057c08:	d004      	beq.n	8057c14 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8057c0a:	68bb      	ldr	r3, [r7, #8]
 8057c0c:	3318      	adds	r3, #24
 8057c0e:	4618      	mov	r0, r3
 8057c10:	f7fe fca0 	bl	8056554 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8057c14:	68bb      	ldr	r3, [r7, #8]
 8057c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8057c18:	2201      	movs	r2, #1
 8057c1a:	409a      	lsls	r2, r3
 8057c1c:	4b23      	ldr	r3, [pc, #140]	; (8057cac <xTaskIncrementTick+0x15c>)
 8057c1e:	681b      	ldr	r3, [r3, #0]
 8057c20:	4313      	orrs	r3, r2
 8057c22:	4a22      	ldr	r2, [pc, #136]	; (8057cac <xTaskIncrementTick+0x15c>)
 8057c24:	6013      	str	r3, [r2, #0]
 8057c26:	68bb      	ldr	r3, [r7, #8]
 8057c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8057c2a:	4613      	mov	r3, r2
 8057c2c:	009b      	lsls	r3, r3, #2
 8057c2e:	4413      	add	r3, r2
 8057c30:	009b      	lsls	r3, r3, #2
 8057c32:	4a1f      	ldr	r2, [pc, #124]	; (8057cb0 <xTaskIncrementTick+0x160>)
 8057c34:	441a      	add	r2, r3
 8057c36:	68bb      	ldr	r3, [r7, #8]
 8057c38:	3304      	adds	r3, #4
 8057c3a:	4619      	mov	r1, r3
 8057c3c:	4610      	mov	r0, r2
 8057c3e:	f7fe fc2c 	bl	805649a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8057c42:	68bb      	ldr	r3, [r7, #8]
 8057c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8057c46:	4b1b      	ldr	r3, [pc, #108]	; (8057cb4 <xTaskIncrementTick+0x164>)
 8057c48:	681b      	ldr	r3, [r3, #0]
 8057c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8057c4c:	429a      	cmp	r2, r3
 8057c4e:	d3b9      	bcc.n	8057bc4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8057c50:	2301      	movs	r3, #1
 8057c52:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8057c54:	e7b6      	b.n	8057bc4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8057c56:	4b17      	ldr	r3, [pc, #92]	; (8057cb4 <xTaskIncrementTick+0x164>)
 8057c58:	681b      	ldr	r3, [r3, #0]
 8057c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8057c5c:	4914      	ldr	r1, [pc, #80]	; (8057cb0 <xTaskIncrementTick+0x160>)
 8057c5e:	4613      	mov	r3, r2
 8057c60:	009b      	lsls	r3, r3, #2
 8057c62:	4413      	add	r3, r2
 8057c64:	009b      	lsls	r3, r3, #2
 8057c66:	440b      	add	r3, r1
 8057c68:	681b      	ldr	r3, [r3, #0]
 8057c6a:	2b01      	cmp	r3, #1
 8057c6c:	d901      	bls.n	8057c72 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8057c6e:	2301      	movs	r3, #1
 8057c70:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8057c72:	4b11      	ldr	r3, [pc, #68]	; (8057cb8 <xTaskIncrementTick+0x168>)
 8057c74:	681b      	ldr	r3, [r3, #0]
 8057c76:	2b00      	cmp	r3, #0
 8057c78:	d007      	beq.n	8057c8a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8057c7a:	2301      	movs	r3, #1
 8057c7c:	617b      	str	r3, [r7, #20]
 8057c7e:	e004      	b.n	8057c8a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8057c80:	4b0e      	ldr	r3, [pc, #56]	; (8057cbc <xTaskIncrementTick+0x16c>)
 8057c82:	681b      	ldr	r3, [r3, #0]
 8057c84:	3301      	adds	r3, #1
 8057c86:	4a0d      	ldr	r2, [pc, #52]	; (8057cbc <xTaskIncrementTick+0x16c>)
 8057c88:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8057c8a:	697b      	ldr	r3, [r7, #20]
}
 8057c8c:	4618      	mov	r0, r3
 8057c8e:	3718      	adds	r7, #24
 8057c90:	46bd      	mov	sp, r7
 8057c92:	bd80      	pop	{r7, pc}
 8057c94:	24002d9c 	.word	0x24002d9c
 8057c98:	24002d78 	.word	0x24002d78
 8057c9c:	24002d2c 	.word	0x24002d2c
 8057ca0:	24002d30 	.word	0x24002d30
 8057ca4:	24002d8c 	.word	0x24002d8c
 8057ca8:	24002d94 	.word	0x24002d94
 8057cac:	24002d7c 	.word	0x24002d7c
 8057cb0:	24002c78 	.word	0x24002c78
 8057cb4:	24002c74 	.word	0x24002c74
 8057cb8:	24002d88 	.word	0x24002d88
 8057cbc:	24002d84 	.word	0x24002d84

08057cc0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8057cc0:	b480      	push	{r7}
 8057cc2:	b087      	sub	sp, #28
 8057cc4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8057cc6:	4b27      	ldr	r3, [pc, #156]	; (8057d64 <vTaskSwitchContext+0xa4>)
 8057cc8:	681b      	ldr	r3, [r3, #0]
 8057cca:	2b00      	cmp	r3, #0
 8057ccc:	d003      	beq.n	8057cd6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8057cce:	4b26      	ldr	r3, [pc, #152]	; (8057d68 <vTaskSwitchContext+0xa8>)
 8057cd0:	2201      	movs	r2, #1
 8057cd2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8057cd4:	e03f      	b.n	8057d56 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8057cd6:	4b24      	ldr	r3, [pc, #144]	; (8057d68 <vTaskSwitchContext+0xa8>)
 8057cd8:	2200      	movs	r2, #0
 8057cda:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8057cdc:	4b23      	ldr	r3, [pc, #140]	; (8057d6c <vTaskSwitchContext+0xac>)
 8057cde:	681b      	ldr	r3, [r3, #0]
 8057ce0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8057ce2:	68fb      	ldr	r3, [r7, #12]
 8057ce4:	fab3 f383 	clz	r3, r3
 8057ce8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8057cea:	7afb      	ldrb	r3, [r7, #11]
 8057cec:	f1c3 031f 	rsb	r3, r3, #31
 8057cf0:	617b      	str	r3, [r7, #20]
 8057cf2:	491f      	ldr	r1, [pc, #124]	; (8057d70 <vTaskSwitchContext+0xb0>)
 8057cf4:	697a      	ldr	r2, [r7, #20]
 8057cf6:	4613      	mov	r3, r2
 8057cf8:	009b      	lsls	r3, r3, #2
 8057cfa:	4413      	add	r3, r2
 8057cfc:	009b      	lsls	r3, r3, #2
 8057cfe:	440b      	add	r3, r1
 8057d00:	681b      	ldr	r3, [r3, #0]
 8057d02:	2b00      	cmp	r3, #0
 8057d04:	d10a      	bne.n	8057d1c <vTaskSwitchContext+0x5c>
	__asm volatile
 8057d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8057d0a:	f383 8811 	msr	BASEPRI, r3
 8057d0e:	f3bf 8f6f 	isb	sy
 8057d12:	f3bf 8f4f 	dsb	sy
 8057d16:	607b      	str	r3, [r7, #4]
}
 8057d18:	bf00      	nop
 8057d1a:	e7fe      	b.n	8057d1a <vTaskSwitchContext+0x5a>
 8057d1c:	697a      	ldr	r2, [r7, #20]
 8057d1e:	4613      	mov	r3, r2
 8057d20:	009b      	lsls	r3, r3, #2
 8057d22:	4413      	add	r3, r2
 8057d24:	009b      	lsls	r3, r3, #2
 8057d26:	4a12      	ldr	r2, [pc, #72]	; (8057d70 <vTaskSwitchContext+0xb0>)
 8057d28:	4413      	add	r3, r2
 8057d2a:	613b      	str	r3, [r7, #16]
 8057d2c:	693b      	ldr	r3, [r7, #16]
 8057d2e:	685b      	ldr	r3, [r3, #4]
 8057d30:	685a      	ldr	r2, [r3, #4]
 8057d32:	693b      	ldr	r3, [r7, #16]
 8057d34:	605a      	str	r2, [r3, #4]
 8057d36:	693b      	ldr	r3, [r7, #16]
 8057d38:	685a      	ldr	r2, [r3, #4]
 8057d3a:	693b      	ldr	r3, [r7, #16]
 8057d3c:	3308      	adds	r3, #8
 8057d3e:	429a      	cmp	r2, r3
 8057d40:	d104      	bne.n	8057d4c <vTaskSwitchContext+0x8c>
 8057d42:	693b      	ldr	r3, [r7, #16]
 8057d44:	685b      	ldr	r3, [r3, #4]
 8057d46:	685a      	ldr	r2, [r3, #4]
 8057d48:	693b      	ldr	r3, [r7, #16]
 8057d4a:	605a      	str	r2, [r3, #4]
 8057d4c:	693b      	ldr	r3, [r7, #16]
 8057d4e:	685b      	ldr	r3, [r3, #4]
 8057d50:	68db      	ldr	r3, [r3, #12]
 8057d52:	4a08      	ldr	r2, [pc, #32]	; (8057d74 <vTaskSwitchContext+0xb4>)
 8057d54:	6013      	str	r3, [r2, #0]
}
 8057d56:	bf00      	nop
 8057d58:	371c      	adds	r7, #28
 8057d5a:	46bd      	mov	sp, r7
 8057d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8057d60:	4770      	bx	lr
 8057d62:	bf00      	nop
 8057d64:	24002d9c 	.word	0x24002d9c
 8057d68:	24002d88 	.word	0x24002d88
 8057d6c:	24002d7c 	.word	0x24002d7c
 8057d70:	24002c78 	.word	0x24002c78
 8057d74:	24002c74 	.word	0x24002c74

08057d78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8057d78:	b580      	push	{r7, lr}
 8057d7a:	b084      	sub	sp, #16
 8057d7c:	af00      	add	r7, sp, #0
 8057d7e:	6078      	str	r0, [r7, #4]
 8057d80:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8057d82:	687b      	ldr	r3, [r7, #4]
 8057d84:	2b00      	cmp	r3, #0
 8057d86:	d10a      	bne.n	8057d9e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8057d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8057d8c:	f383 8811 	msr	BASEPRI, r3
 8057d90:	f3bf 8f6f 	isb	sy
 8057d94:	f3bf 8f4f 	dsb	sy
 8057d98:	60fb      	str	r3, [r7, #12]
}
 8057d9a:	bf00      	nop
 8057d9c:	e7fe      	b.n	8057d9c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8057d9e:	4b07      	ldr	r3, [pc, #28]	; (8057dbc <vTaskPlaceOnEventList+0x44>)
 8057da0:	681b      	ldr	r3, [r3, #0]
 8057da2:	3318      	adds	r3, #24
 8057da4:	4619      	mov	r1, r3
 8057da6:	6878      	ldr	r0, [r7, #4]
 8057da8:	f7fe fb9b 	bl	80564e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8057dac:	2101      	movs	r1, #1
 8057dae:	6838      	ldr	r0, [r7, #0]
 8057db0:	f000 fc84 	bl	80586bc <prvAddCurrentTaskToDelayedList>
}
 8057db4:	bf00      	nop
 8057db6:	3710      	adds	r7, #16
 8057db8:	46bd      	mov	sp, r7
 8057dba:	bd80      	pop	{r7, pc}
 8057dbc:	24002c74 	.word	0x24002c74

08057dc0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8057dc0:	b580      	push	{r7, lr}
 8057dc2:	b086      	sub	sp, #24
 8057dc4:	af00      	add	r7, sp, #0
 8057dc6:	60f8      	str	r0, [r7, #12]
 8057dc8:	60b9      	str	r1, [r7, #8]
 8057dca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8057dcc:	68fb      	ldr	r3, [r7, #12]
 8057dce:	2b00      	cmp	r3, #0
 8057dd0:	d10a      	bne.n	8057de8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8057dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8057dd6:	f383 8811 	msr	BASEPRI, r3
 8057dda:	f3bf 8f6f 	isb	sy
 8057dde:	f3bf 8f4f 	dsb	sy
 8057de2:	617b      	str	r3, [r7, #20]
}
 8057de4:	bf00      	nop
 8057de6:	e7fe      	b.n	8057de6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8057de8:	4b0a      	ldr	r3, [pc, #40]	; (8057e14 <vTaskPlaceOnEventListRestricted+0x54>)
 8057dea:	681b      	ldr	r3, [r3, #0]
 8057dec:	3318      	adds	r3, #24
 8057dee:	4619      	mov	r1, r3
 8057df0:	68f8      	ldr	r0, [r7, #12]
 8057df2:	f7fe fb52 	bl	805649a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8057df6:	687b      	ldr	r3, [r7, #4]
 8057df8:	2b00      	cmp	r3, #0
 8057dfa:	d002      	beq.n	8057e02 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8057dfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8057e00:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8057e02:	6879      	ldr	r1, [r7, #4]
 8057e04:	68b8      	ldr	r0, [r7, #8]
 8057e06:	f000 fc59 	bl	80586bc <prvAddCurrentTaskToDelayedList>
	}
 8057e0a:	bf00      	nop
 8057e0c:	3718      	adds	r7, #24
 8057e0e:	46bd      	mov	sp, r7
 8057e10:	bd80      	pop	{r7, pc}
 8057e12:	bf00      	nop
 8057e14:	24002c74 	.word	0x24002c74

08057e18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8057e18:	b580      	push	{r7, lr}
 8057e1a:	b086      	sub	sp, #24
 8057e1c:	af00      	add	r7, sp, #0
 8057e1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8057e20:	687b      	ldr	r3, [r7, #4]
 8057e22:	68db      	ldr	r3, [r3, #12]
 8057e24:	68db      	ldr	r3, [r3, #12]
 8057e26:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8057e28:	693b      	ldr	r3, [r7, #16]
 8057e2a:	2b00      	cmp	r3, #0
 8057e2c:	d10a      	bne.n	8057e44 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8057e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8057e32:	f383 8811 	msr	BASEPRI, r3
 8057e36:	f3bf 8f6f 	isb	sy
 8057e3a:	f3bf 8f4f 	dsb	sy
 8057e3e:	60fb      	str	r3, [r7, #12]
}
 8057e40:	bf00      	nop
 8057e42:	e7fe      	b.n	8057e42 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8057e44:	693b      	ldr	r3, [r7, #16]
 8057e46:	3318      	adds	r3, #24
 8057e48:	4618      	mov	r0, r3
 8057e4a:	f7fe fb83 	bl	8056554 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8057e4e:	4b1d      	ldr	r3, [pc, #116]	; (8057ec4 <xTaskRemoveFromEventList+0xac>)
 8057e50:	681b      	ldr	r3, [r3, #0]
 8057e52:	2b00      	cmp	r3, #0
 8057e54:	d11c      	bne.n	8057e90 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8057e56:	693b      	ldr	r3, [r7, #16]
 8057e58:	3304      	adds	r3, #4
 8057e5a:	4618      	mov	r0, r3
 8057e5c:	f7fe fb7a 	bl	8056554 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8057e60:	693b      	ldr	r3, [r7, #16]
 8057e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8057e64:	2201      	movs	r2, #1
 8057e66:	409a      	lsls	r2, r3
 8057e68:	4b17      	ldr	r3, [pc, #92]	; (8057ec8 <xTaskRemoveFromEventList+0xb0>)
 8057e6a:	681b      	ldr	r3, [r3, #0]
 8057e6c:	4313      	orrs	r3, r2
 8057e6e:	4a16      	ldr	r2, [pc, #88]	; (8057ec8 <xTaskRemoveFromEventList+0xb0>)
 8057e70:	6013      	str	r3, [r2, #0]
 8057e72:	693b      	ldr	r3, [r7, #16]
 8057e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8057e76:	4613      	mov	r3, r2
 8057e78:	009b      	lsls	r3, r3, #2
 8057e7a:	4413      	add	r3, r2
 8057e7c:	009b      	lsls	r3, r3, #2
 8057e7e:	4a13      	ldr	r2, [pc, #76]	; (8057ecc <xTaskRemoveFromEventList+0xb4>)
 8057e80:	441a      	add	r2, r3
 8057e82:	693b      	ldr	r3, [r7, #16]
 8057e84:	3304      	adds	r3, #4
 8057e86:	4619      	mov	r1, r3
 8057e88:	4610      	mov	r0, r2
 8057e8a:	f7fe fb06 	bl	805649a <vListInsertEnd>
 8057e8e:	e005      	b.n	8057e9c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8057e90:	693b      	ldr	r3, [r7, #16]
 8057e92:	3318      	adds	r3, #24
 8057e94:	4619      	mov	r1, r3
 8057e96:	480e      	ldr	r0, [pc, #56]	; (8057ed0 <xTaskRemoveFromEventList+0xb8>)
 8057e98:	f7fe faff 	bl	805649a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8057e9c:	693b      	ldr	r3, [r7, #16]
 8057e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8057ea0:	4b0c      	ldr	r3, [pc, #48]	; (8057ed4 <xTaskRemoveFromEventList+0xbc>)
 8057ea2:	681b      	ldr	r3, [r3, #0]
 8057ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8057ea6:	429a      	cmp	r2, r3
 8057ea8:	d905      	bls.n	8057eb6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8057eaa:	2301      	movs	r3, #1
 8057eac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8057eae:	4b0a      	ldr	r3, [pc, #40]	; (8057ed8 <xTaskRemoveFromEventList+0xc0>)
 8057eb0:	2201      	movs	r2, #1
 8057eb2:	601a      	str	r2, [r3, #0]
 8057eb4:	e001      	b.n	8057eba <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8057eb6:	2300      	movs	r3, #0
 8057eb8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8057eba:	697b      	ldr	r3, [r7, #20]
}
 8057ebc:	4618      	mov	r0, r3
 8057ebe:	3718      	adds	r7, #24
 8057ec0:	46bd      	mov	sp, r7
 8057ec2:	bd80      	pop	{r7, pc}
 8057ec4:	24002d9c 	.word	0x24002d9c
 8057ec8:	24002d7c 	.word	0x24002d7c
 8057ecc:	24002c78 	.word	0x24002c78
 8057ed0:	24002d34 	.word	0x24002d34
 8057ed4:	24002c74 	.word	0x24002c74
 8057ed8:	24002d88 	.word	0x24002d88

08057edc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8057edc:	b480      	push	{r7}
 8057ede:	b083      	sub	sp, #12
 8057ee0:	af00      	add	r7, sp, #0
 8057ee2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8057ee4:	4b06      	ldr	r3, [pc, #24]	; (8057f00 <vTaskInternalSetTimeOutState+0x24>)
 8057ee6:	681a      	ldr	r2, [r3, #0]
 8057ee8:	687b      	ldr	r3, [r7, #4]
 8057eea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8057eec:	4b05      	ldr	r3, [pc, #20]	; (8057f04 <vTaskInternalSetTimeOutState+0x28>)
 8057eee:	681a      	ldr	r2, [r3, #0]
 8057ef0:	687b      	ldr	r3, [r7, #4]
 8057ef2:	605a      	str	r2, [r3, #4]
}
 8057ef4:	bf00      	nop
 8057ef6:	370c      	adds	r7, #12
 8057ef8:	46bd      	mov	sp, r7
 8057efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8057efe:	4770      	bx	lr
 8057f00:	24002d8c 	.word	0x24002d8c
 8057f04:	24002d78 	.word	0x24002d78

08057f08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8057f08:	b580      	push	{r7, lr}
 8057f0a:	b088      	sub	sp, #32
 8057f0c:	af00      	add	r7, sp, #0
 8057f0e:	6078      	str	r0, [r7, #4]
 8057f10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8057f12:	687b      	ldr	r3, [r7, #4]
 8057f14:	2b00      	cmp	r3, #0
 8057f16:	d10a      	bne.n	8057f2e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8057f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8057f1c:	f383 8811 	msr	BASEPRI, r3
 8057f20:	f3bf 8f6f 	isb	sy
 8057f24:	f3bf 8f4f 	dsb	sy
 8057f28:	613b      	str	r3, [r7, #16]
}
 8057f2a:	bf00      	nop
 8057f2c:	e7fe      	b.n	8057f2c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8057f2e:	683b      	ldr	r3, [r7, #0]
 8057f30:	2b00      	cmp	r3, #0
 8057f32:	d10a      	bne.n	8057f4a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8057f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8057f38:	f383 8811 	msr	BASEPRI, r3
 8057f3c:	f3bf 8f6f 	isb	sy
 8057f40:	f3bf 8f4f 	dsb	sy
 8057f44:	60fb      	str	r3, [r7, #12]
}
 8057f46:	bf00      	nop
 8057f48:	e7fe      	b.n	8057f48 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8057f4a:	f001 f933 	bl	80591b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8057f4e:	4b1d      	ldr	r3, [pc, #116]	; (8057fc4 <xTaskCheckForTimeOut+0xbc>)
 8057f50:	681b      	ldr	r3, [r3, #0]
 8057f52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8057f54:	687b      	ldr	r3, [r7, #4]
 8057f56:	685b      	ldr	r3, [r3, #4]
 8057f58:	69ba      	ldr	r2, [r7, #24]
 8057f5a:	1ad3      	subs	r3, r2, r3
 8057f5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8057f5e:	683b      	ldr	r3, [r7, #0]
 8057f60:	681b      	ldr	r3, [r3, #0]
 8057f62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8057f66:	d102      	bne.n	8057f6e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8057f68:	2300      	movs	r3, #0
 8057f6a:	61fb      	str	r3, [r7, #28]
 8057f6c:	e023      	b.n	8057fb6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8057f6e:	687b      	ldr	r3, [r7, #4]
 8057f70:	681a      	ldr	r2, [r3, #0]
 8057f72:	4b15      	ldr	r3, [pc, #84]	; (8057fc8 <xTaskCheckForTimeOut+0xc0>)
 8057f74:	681b      	ldr	r3, [r3, #0]
 8057f76:	429a      	cmp	r2, r3
 8057f78:	d007      	beq.n	8057f8a <xTaskCheckForTimeOut+0x82>
 8057f7a:	687b      	ldr	r3, [r7, #4]
 8057f7c:	685b      	ldr	r3, [r3, #4]
 8057f7e:	69ba      	ldr	r2, [r7, #24]
 8057f80:	429a      	cmp	r2, r3
 8057f82:	d302      	bcc.n	8057f8a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8057f84:	2301      	movs	r3, #1
 8057f86:	61fb      	str	r3, [r7, #28]
 8057f88:	e015      	b.n	8057fb6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8057f8a:	683b      	ldr	r3, [r7, #0]
 8057f8c:	681b      	ldr	r3, [r3, #0]
 8057f8e:	697a      	ldr	r2, [r7, #20]
 8057f90:	429a      	cmp	r2, r3
 8057f92:	d20b      	bcs.n	8057fac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8057f94:	683b      	ldr	r3, [r7, #0]
 8057f96:	681a      	ldr	r2, [r3, #0]
 8057f98:	697b      	ldr	r3, [r7, #20]
 8057f9a:	1ad2      	subs	r2, r2, r3
 8057f9c:	683b      	ldr	r3, [r7, #0]
 8057f9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8057fa0:	6878      	ldr	r0, [r7, #4]
 8057fa2:	f7ff ff9b 	bl	8057edc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8057fa6:	2300      	movs	r3, #0
 8057fa8:	61fb      	str	r3, [r7, #28]
 8057faa:	e004      	b.n	8057fb6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8057fac:	683b      	ldr	r3, [r7, #0]
 8057fae:	2200      	movs	r2, #0
 8057fb0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8057fb2:	2301      	movs	r3, #1
 8057fb4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8057fb6:	f001 f92d 	bl	8059214 <vPortExitCritical>

	return xReturn;
 8057fba:	69fb      	ldr	r3, [r7, #28]
}
 8057fbc:	4618      	mov	r0, r3
 8057fbe:	3720      	adds	r7, #32
 8057fc0:	46bd      	mov	sp, r7
 8057fc2:	bd80      	pop	{r7, pc}
 8057fc4:	24002d78 	.word	0x24002d78
 8057fc8:	24002d8c 	.word	0x24002d8c

08057fcc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8057fcc:	b480      	push	{r7}
 8057fce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8057fd0:	4b03      	ldr	r3, [pc, #12]	; (8057fe0 <vTaskMissedYield+0x14>)
 8057fd2:	2201      	movs	r2, #1
 8057fd4:	601a      	str	r2, [r3, #0]
}
 8057fd6:	bf00      	nop
 8057fd8:	46bd      	mov	sp, r7
 8057fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8057fde:	4770      	bx	lr
 8057fe0:	24002d88 	.word	0x24002d88

08057fe4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8057fe4:	b580      	push	{r7, lr}
 8057fe6:	b082      	sub	sp, #8
 8057fe8:	af00      	add	r7, sp, #0
 8057fea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8057fec:	f000 f852 	bl	8058094 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8057ff0:	4b06      	ldr	r3, [pc, #24]	; (805800c <prvIdleTask+0x28>)
 8057ff2:	681b      	ldr	r3, [r3, #0]
 8057ff4:	2b01      	cmp	r3, #1
 8057ff6:	d9f9      	bls.n	8057fec <prvIdleTask+0x8>
			{
				taskYIELD();
 8057ff8:	4b05      	ldr	r3, [pc, #20]	; (8058010 <prvIdleTask+0x2c>)
 8057ffa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8057ffe:	601a      	str	r2, [r3, #0]
 8058000:	f3bf 8f4f 	dsb	sy
 8058004:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8058008:	e7f0      	b.n	8057fec <prvIdleTask+0x8>
 805800a:	bf00      	nop
 805800c:	24002c78 	.word	0x24002c78
 8058010:	e000ed04 	.word	0xe000ed04

08058014 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8058014:	b580      	push	{r7, lr}
 8058016:	b082      	sub	sp, #8
 8058018:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 805801a:	2300      	movs	r3, #0
 805801c:	607b      	str	r3, [r7, #4]
 805801e:	e00c      	b.n	805803a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8058020:	687a      	ldr	r2, [r7, #4]
 8058022:	4613      	mov	r3, r2
 8058024:	009b      	lsls	r3, r3, #2
 8058026:	4413      	add	r3, r2
 8058028:	009b      	lsls	r3, r3, #2
 805802a:	4a12      	ldr	r2, [pc, #72]	; (8058074 <prvInitialiseTaskLists+0x60>)
 805802c:	4413      	add	r3, r2
 805802e:	4618      	mov	r0, r3
 8058030:	f7fe fa06 	bl	8056440 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8058034:	687b      	ldr	r3, [r7, #4]
 8058036:	3301      	adds	r3, #1
 8058038:	607b      	str	r3, [r7, #4]
 805803a:	687b      	ldr	r3, [r7, #4]
 805803c:	2b06      	cmp	r3, #6
 805803e:	d9ef      	bls.n	8058020 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8058040:	480d      	ldr	r0, [pc, #52]	; (8058078 <prvInitialiseTaskLists+0x64>)
 8058042:	f7fe f9fd 	bl	8056440 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8058046:	480d      	ldr	r0, [pc, #52]	; (805807c <prvInitialiseTaskLists+0x68>)
 8058048:	f7fe f9fa 	bl	8056440 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 805804c:	480c      	ldr	r0, [pc, #48]	; (8058080 <prvInitialiseTaskLists+0x6c>)
 805804e:	f7fe f9f7 	bl	8056440 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8058052:	480c      	ldr	r0, [pc, #48]	; (8058084 <prvInitialiseTaskLists+0x70>)
 8058054:	f7fe f9f4 	bl	8056440 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8058058:	480b      	ldr	r0, [pc, #44]	; (8058088 <prvInitialiseTaskLists+0x74>)
 805805a:	f7fe f9f1 	bl	8056440 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 805805e:	4b0b      	ldr	r3, [pc, #44]	; (805808c <prvInitialiseTaskLists+0x78>)
 8058060:	4a05      	ldr	r2, [pc, #20]	; (8058078 <prvInitialiseTaskLists+0x64>)
 8058062:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8058064:	4b0a      	ldr	r3, [pc, #40]	; (8058090 <prvInitialiseTaskLists+0x7c>)
 8058066:	4a05      	ldr	r2, [pc, #20]	; (805807c <prvInitialiseTaskLists+0x68>)
 8058068:	601a      	str	r2, [r3, #0]
}
 805806a:	bf00      	nop
 805806c:	3708      	adds	r7, #8
 805806e:	46bd      	mov	sp, r7
 8058070:	bd80      	pop	{r7, pc}
 8058072:	bf00      	nop
 8058074:	24002c78 	.word	0x24002c78
 8058078:	24002d04 	.word	0x24002d04
 805807c:	24002d18 	.word	0x24002d18
 8058080:	24002d34 	.word	0x24002d34
 8058084:	24002d48 	.word	0x24002d48
 8058088:	24002d60 	.word	0x24002d60
 805808c:	24002d2c 	.word	0x24002d2c
 8058090:	24002d30 	.word	0x24002d30

08058094 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8058094:	b580      	push	{r7, lr}
 8058096:	b082      	sub	sp, #8
 8058098:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 805809a:	e019      	b.n	80580d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 805809c:	f001 f88a 	bl	80591b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80580a0:	4b10      	ldr	r3, [pc, #64]	; (80580e4 <prvCheckTasksWaitingTermination+0x50>)
 80580a2:	68db      	ldr	r3, [r3, #12]
 80580a4:	68db      	ldr	r3, [r3, #12]
 80580a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80580a8:	687b      	ldr	r3, [r7, #4]
 80580aa:	3304      	adds	r3, #4
 80580ac:	4618      	mov	r0, r3
 80580ae:	f7fe fa51 	bl	8056554 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80580b2:	4b0d      	ldr	r3, [pc, #52]	; (80580e8 <prvCheckTasksWaitingTermination+0x54>)
 80580b4:	681b      	ldr	r3, [r3, #0]
 80580b6:	3b01      	subs	r3, #1
 80580b8:	4a0b      	ldr	r2, [pc, #44]	; (80580e8 <prvCheckTasksWaitingTermination+0x54>)
 80580ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80580bc:	4b0b      	ldr	r3, [pc, #44]	; (80580ec <prvCheckTasksWaitingTermination+0x58>)
 80580be:	681b      	ldr	r3, [r3, #0]
 80580c0:	3b01      	subs	r3, #1
 80580c2:	4a0a      	ldr	r2, [pc, #40]	; (80580ec <prvCheckTasksWaitingTermination+0x58>)
 80580c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80580c6:	f001 f8a5 	bl	8059214 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80580ca:	6878      	ldr	r0, [r7, #4]
 80580cc:	f000 f810 	bl	80580f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80580d0:	4b06      	ldr	r3, [pc, #24]	; (80580ec <prvCheckTasksWaitingTermination+0x58>)
 80580d2:	681b      	ldr	r3, [r3, #0]
 80580d4:	2b00      	cmp	r3, #0
 80580d6:	d1e1      	bne.n	805809c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80580d8:	bf00      	nop
 80580da:	bf00      	nop
 80580dc:	3708      	adds	r7, #8
 80580de:	46bd      	mov	sp, r7
 80580e0:	bd80      	pop	{r7, pc}
 80580e2:	bf00      	nop
 80580e4:	24002d48 	.word	0x24002d48
 80580e8:	24002d74 	.word	0x24002d74
 80580ec:	24002d5c 	.word	0x24002d5c

080580f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80580f0:	b580      	push	{r7, lr}
 80580f2:	b084      	sub	sp, #16
 80580f4:	af00      	add	r7, sp, #0
 80580f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80580f8:	687b      	ldr	r3, [r7, #4]
 80580fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80580fe:	2b00      	cmp	r3, #0
 8058100:	d108      	bne.n	8058114 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8058102:	687b      	ldr	r3, [r7, #4]
 8058104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8058106:	4618      	mov	r0, r3
 8058108:	f001 fa42 	bl	8059590 <vPortFree>
				vPortFree( pxTCB );
 805810c:	6878      	ldr	r0, [r7, #4]
 805810e:	f001 fa3f 	bl	8059590 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8058112:	e018      	b.n	8058146 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8058114:	687b      	ldr	r3, [r7, #4]
 8058116:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 805811a:	2b01      	cmp	r3, #1
 805811c:	d103      	bne.n	8058126 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 805811e:	6878      	ldr	r0, [r7, #4]
 8058120:	f001 fa36 	bl	8059590 <vPortFree>
	}
 8058124:	e00f      	b.n	8058146 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8058126:	687b      	ldr	r3, [r7, #4]
 8058128:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 805812c:	2b02      	cmp	r3, #2
 805812e:	d00a      	beq.n	8058146 <prvDeleteTCB+0x56>
	__asm volatile
 8058130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8058134:	f383 8811 	msr	BASEPRI, r3
 8058138:	f3bf 8f6f 	isb	sy
 805813c:	f3bf 8f4f 	dsb	sy
 8058140:	60fb      	str	r3, [r7, #12]
}
 8058142:	bf00      	nop
 8058144:	e7fe      	b.n	8058144 <prvDeleteTCB+0x54>
	}
 8058146:	bf00      	nop
 8058148:	3710      	adds	r7, #16
 805814a:	46bd      	mov	sp, r7
 805814c:	bd80      	pop	{r7, pc}
	...

08058150 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8058150:	b480      	push	{r7}
 8058152:	b083      	sub	sp, #12
 8058154:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8058156:	4b0c      	ldr	r3, [pc, #48]	; (8058188 <prvResetNextTaskUnblockTime+0x38>)
 8058158:	681b      	ldr	r3, [r3, #0]
 805815a:	681b      	ldr	r3, [r3, #0]
 805815c:	2b00      	cmp	r3, #0
 805815e:	d104      	bne.n	805816a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8058160:	4b0a      	ldr	r3, [pc, #40]	; (805818c <prvResetNextTaskUnblockTime+0x3c>)
 8058162:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8058166:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8058168:	e008      	b.n	805817c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 805816a:	4b07      	ldr	r3, [pc, #28]	; (8058188 <prvResetNextTaskUnblockTime+0x38>)
 805816c:	681b      	ldr	r3, [r3, #0]
 805816e:	68db      	ldr	r3, [r3, #12]
 8058170:	68db      	ldr	r3, [r3, #12]
 8058172:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8058174:	687b      	ldr	r3, [r7, #4]
 8058176:	685b      	ldr	r3, [r3, #4]
 8058178:	4a04      	ldr	r2, [pc, #16]	; (805818c <prvResetNextTaskUnblockTime+0x3c>)
 805817a:	6013      	str	r3, [r2, #0]
}
 805817c:	bf00      	nop
 805817e:	370c      	adds	r7, #12
 8058180:	46bd      	mov	sp, r7
 8058182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8058186:	4770      	bx	lr
 8058188:	24002d2c 	.word	0x24002d2c
 805818c:	24002d94 	.word	0x24002d94

08058190 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8058190:	b480      	push	{r7}
 8058192:	b083      	sub	sp, #12
 8058194:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8058196:	4b0b      	ldr	r3, [pc, #44]	; (80581c4 <xTaskGetSchedulerState+0x34>)
 8058198:	681b      	ldr	r3, [r3, #0]
 805819a:	2b00      	cmp	r3, #0
 805819c:	d102      	bne.n	80581a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 805819e:	2301      	movs	r3, #1
 80581a0:	607b      	str	r3, [r7, #4]
 80581a2:	e008      	b.n	80581b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80581a4:	4b08      	ldr	r3, [pc, #32]	; (80581c8 <xTaskGetSchedulerState+0x38>)
 80581a6:	681b      	ldr	r3, [r3, #0]
 80581a8:	2b00      	cmp	r3, #0
 80581aa:	d102      	bne.n	80581b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80581ac:	2302      	movs	r3, #2
 80581ae:	607b      	str	r3, [r7, #4]
 80581b0:	e001      	b.n	80581b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80581b2:	2300      	movs	r3, #0
 80581b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80581b6:	687b      	ldr	r3, [r7, #4]
	}
 80581b8:	4618      	mov	r0, r3
 80581ba:	370c      	adds	r7, #12
 80581bc:	46bd      	mov	sp, r7
 80581be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80581c2:	4770      	bx	lr
 80581c4:	24002d80 	.word	0x24002d80
 80581c8:	24002d9c 	.word	0x24002d9c

080581cc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80581cc:	b580      	push	{r7, lr}
 80581ce:	b084      	sub	sp, #16
 80581d0:	af00      	add	r7, sp, #0
 80581d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80581d4:	687b      	ldr	r3, [r7, #4]
 80581d6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80581d8:	2300      	movs	r3, #0
 80581da:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80581dc:	687b      	ldr	r3, [r7, #4]
 80581de:	2b00      	cmp	r3, #0
 80581e0:	d05e      	beq.n	80582a0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80581e2:	68bb      	ldr	r3, [r7, #8]
 80581e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80581e6:	4b31      	ldr	r3, [pc, #196]	; (80582ac <xTaskPriorityInherit+0xe0>)
 80581e8:	681b      	ldr	r3, [r3, #0]
 80581ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80581ec:	429a      	cmp	r2, r3
 80581ee:	d24e      	bcs.n	805828e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80581f0:	68bb      	ldr	r3, [r7, #8]
 80581f2:	699b      	ldr	r3, [r3, #24]
 80581f4:	2b00      	cmp	r3, #0
 80581f6:	db06      	blt.n	8058206 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80581f8:	4b2c      	ldr	r3, [pc, #176]	; (80582ac <xTaskPriorityInherit+0xe0>)
 80581fa:	681b      	ldr	r3, [r3, #0]
 80581fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80581fe:	f1c3 0207 	rsb	r2, r3, #7
 8058202:	68bb      	ldr	r3, [r7, #8]
 8058204:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8058206:	68bb      	ldr	r3, [r7, #8]
 8058208:	6959      	ldr	r1, [r3, #20]
 805820a:	68bb      	ldr	r3, [r7, #8]
 805820c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 805820e:	4613      	mov	r3, r2
 8058210:	009b      	lsls	r3, r3, #2
 8058212:	4413      	add	r3, r2
 8058214:	009b      	lsls	r3, r3, #2
 8058216:	4a26      	ldr	r2, [pc, #152]	; (80582b0 <xTaskPriorityInherit+0xe4>)
 8058218:	4413      	add	r3, r2
 805821a:	4299      	cmp	r1, r3
 805821c:	d12f      	bne.n	805827e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 805821e:	68bb      	ldr	r3, [r7, #8]
 8058220:	3304      	adds	r3, #4
 8058222:	4618      	mov	r0, r3
 8058224:	f7fe f996 	bl	8056554 <uxListRemove>
 8058228:	4603      	mov	r3, r0
 805822a:	2b00      	cmp	r3, #0
 805822c:	d10a      	bne.n	8058244 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 805822e:	68bb      	ldr	r3, [r7, #8]
 8058230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8058232:	2201      	movs	r2, #1
 8058234:	fa02 f303 	lsl.w	r3, r2, r3
 8058238:	43da      	mvns	r2, r3
 805823a:	4b1e      	ldr	r3, [pc, #120]	; (80582b4 <xTaskPriorityInherit+0xe8>)
 805823c:	681b      	ldr	r3, [r3, #0]
 805823e:	4013      	ands	r3, r2
 8058240:	4a1c      	ldr	r2, [pc, #112]	; (80582b4 <xTaskPriorityInherit+0xe8>)
 8058242:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8058244:	4b19      	ldr	r3, [pc, #100]	; (80582ac <xTaskPriorityInherit+0xe0>)
 8058246:	681b      	ldr	r3, [r3, #0]
 8058248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 805824a:	68bb      	ldr	r3, [r7, #8]
 805824c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 805824e:	68bb      	ldr	r3, [r7, #8]
 8058250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8058252:	2201      	movs	r2, #1
 8058254:	409a      	lsls	r2, r3
 8058256:	4b17      	ldr	r3, [pc, #92]	; (80582b4 <xTaskPriorityInherit+0xe8>)
 8058258:	681b      	ldr	r3, [r3, #0]
 805825a:	4313      	orrs	r3, r2
 805825c:	4a15      	ldr	r2, [pc, #84]	; (80582b4 <xTaskPriorityInherit+0xe8>)
 805825e:	6013      	str	r3, [r2, #0]
 8058260:	68bb      	ldr	r3, [r7, #8]
 8058262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8058264:	4613      	mov	r3, r2
 8058266:	009b      	lsls	r3, r3, #2
 8058268:	4413      	add	r3, r2
 805826a:	009b      	lsls	r3, r3, #2
 805826c:	4a10      	ldr	r2, [pc, #64]	; (80582b0 <xTaskPriorityInherit+0xe4>)
 805826e:	441a      	add	r2, r3
 8058270:	68bb      	ldr	r3, [r7, #8]
 8058272:	3304      	adds	r3, #4
 8058274:	4619      	mov	r1, r3
 8058276:	4610      	mov	r0, r2
 8058278:	f7fe f90f 	bl	805649a <vListInsertEnd>
 805827c:	e004      	b.n	8058288 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 805827e:	4b0b      	ldr	r3, [pc, #44]	; (80582ac <xTaskPriorityInherit+0xe0>)
 8058280:	681b      	ldr	r3, [r3, #0]
 8058282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8058284:	68bb      	ldr	r3, [r7, #8]
 8058286:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8058288:	2301      	movs	r3, #1
 805828a:	60fb      	str	r3, [r7, #12]
 805828c:	e008      	b.n	80582a0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 805828e:	68bb      	ldr	r3, [r7, #8]
 8058290:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8058292:	4b06      	ldr	r3, [pc, #24]	; (80582ac <xTaskPriorityInherit+0xe0>)
 8058294:	681b      	ldr	r3, [r3, #0]
 8058296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8058298:	429a      	cmp	r2, r3
 805829a:	d201      	bcs.n	80582a0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 805829c:	2301      	movs	r3, #1
 805829e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80582a0:	68fb      	ldr	r3, [r7, #12]
	}
 80582a2:	4618      	mov	r0, r3
 80582a4:	3710      	adds	r7, #16
 80582a6:	46bd      	mov	sp, r7
 80582a8:	bd80      	pop	{r7, pc}
 80582aa:	bf00      	nop
 80582ac:	24002c74 	.word	0x24002c74
 80582b0:	24002c78 	.word	0x24002c78
 80582b4:	24002d7c 	.word	0x24002d7c

080582b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80582b8:	b580      	push	{r7, lr}
 80582ba:	b086      	sub	sp, #24
 80582bc:	af00      	add	r7, sp, #0
 80582be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80582c0:	687b      	ldr	r3, [r7, #4]
 80582c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80582c4:	2300      	movs	r3, #0
 80582c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80582c8:	687b      	ldr	r3, [r7, #4]
 80582ca:	2b00      	cmp	r3, #0
 80582cc:	d06e      	beq.n	80583ac <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80582ce:	4b3a      	ldr	r3, [pc, #232]	; (80583b8 <xTaskPriorityDisinherit+0x100>)
 80582d0:	681b      	ldr	r3, [r3, #0]
 80582d2:	693a      	ldr	r2, [r7, #16]
 80582d4:	429a      	cmp	r2, r3
 80582d6:	d00a      	beq.n	80582ee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80582d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80582dc:	f383 8811 	msr	BASEPRI, r3
 80582e0:	f3bf 8f6f 	isb	sy
 80582e4:	f3bf 8f4f 	dsb	sy
 80582e8:	60fb      	str	r3, [r7, #12]
}
 80582ea:	bf00      	nop
 80582ec:	e7fe      	b.n	80582ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80582ee:	693b      	ldr	r3, [r7, #16]
 80582f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80582f2:	2b00      	cmp	r3, #0
 80582f4:	d10a      	bne.n	805830c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80582f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80582fa:	f383 8811 	msr	BASEPRI, r3
 80582fe:	f3bf 8f6f 	isb	sy
 8058302:	f3bf 8f4f 	dsb	sy
 8058306:	60bb      	str	r3, [r7, #8]
}
 8058308:	bf00      	nop
 805830a:	e7fe      	b.n	805830a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 805830c:	693b      	ldr	r3, [r7, #16]
 805830e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8058310:	1e5a      	subs	r2, r3, #1
 8058312:	693b      	ldr	r3, [r7, #16]
 8058314:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8058316:	693b      	ldr	r3, [r7, #16]
 8058318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 805831a:	693b      	ldr	r3, [r7, #16]
 805831c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 805831e:	429a      	cmp	r2, r3
 8058320:	d044      	beq.n	80583ac <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8058322:	693b      	ldr	r3, [r7, #16]
 8058324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8058326:	2b00      	cmp	r3, #0
 8058328:	d140      	bne.n	80583ac <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 805832a:	693b      	ldr	r3, [r7, #16]
 805832c:	3304      	adds	r3, #4
 805832e:	4618      	mov	r0, r3
 8058330:	f7fe f910 	bl	8056554 <uxListRemove>
 8058334:	4603      	mov	r3, r0
 8058336:	2b00      	cmp	r3, #0
 8058338:	d115      	bne.n	8058366 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 805833a:	693b      	ldr	r3, [r7, #16]
 805833c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 805833e:	491f      	ldr	r1, [pc, #124]	; (80583bc <xTaskPriorityDisinherit+0x104>)
 8058340:	4613      	mov	r3, r2
 8058342:	009b      	lsls	r3, r3, #2
 8058344:	4413      	add	r3, r2
 8058346:	009b      	lsls	r3, r3, #2
 8058348:	440b      	add	r3, r1
 805834a:	681b      	ldr	r3, [r3, #0]
 805834c:	2b00      	cmp	r3, #0
 805834e:	d10a      	bne.n	8058366 <xTaskPriorityDisinherit+0xae>
 8058350:	693b      	ldr	r3, [r7, #16]
 8058352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8058354:	2201      	movs	r2, #1
 8058356:	fa02 f303 	lsl.w	r3, r2, r3
 805835a:	43da      	mvns	r2, r3
 805835c:	4b18      	ldr	r3, [pc, #96]	; (80583c0 <xTaskPriorityDisinherit+0x108>)
 805835e:	681b      	ldr	r3, [r3, #0]
 8058360:	4013      	ands	r3, r2
 8058362:	4a17      	ldr	r2, [pc, #92]	; (80583c0 <xTaskPriorityDisinherit+0x108>)
 8058364:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8058366:	693b      	ldr	r3, [r7, #16]
 8058368:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 805836a:	693b      	ldr	r3, [r7, #16]
 805836c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 805836e:	693b      	ldr	r3, [r7, #16]
 8058370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8058372:	f1c3 0207 	rsb	r2, r3, #7
 8058376:	693b      	ldr	r3, [r7, #16]
 8058378:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 805837a:	693b      	ldr	r3, [r7, #16]
 805837c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 805837e:	2201      	movs	r2, #1
 8058380:	409a      	lsls	r2, r3
 8058382:	4b0f      	ldr	r3, [pc, #60]	; (80583c0 <xTaskPriorityDisinherit+0x108>)
 8058384:	681b      	ldr	r3, [r3, #0]
 8058386:	4313      	orrs	r3, r2
 8058388:	4a0d      	ldr	r2, [pc, #52]	; (80583c0 <xTaskPriorityDisinherit+0x108>)
 805838a:	6013      	str	r3, [r2, #0]
 805838c:	693b      	ldr	r3, [r7, #16]
 805838e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8058390:	4613      	mov	r3, r2
 8058392:	009b      	lsls	r3, r3, #2
 8058394:	4413      	add	r3, r2
 8058396:	009b      	lsls	r3, r3, #2
 8058398:	4a08      	ldr	r2, [pc, #32]	; (80583bc <xTaskPriorityDisinherit+0x104>)
 805839a:	441a      	add	r2, r3
 805839c:	693b      	ldr	r3, [r7, #16]
 805839e:	3304      	adds	r3, #4
 80583a0:	4619      	mov	r1, r3
 80583a2:	4610      	mov	r0, r2
 80583a4:	f7fe f879 	bl	805649a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80583a8:	2301      	movs	r3, #1
 80583aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80583ac:	697b      	ldr	r3, [r7, #20]
	}
 80583ae:	4618      	mov	r0, r3
 80583b0:	3718      	adds	r7, #24
 80583b2:	46bd      	mov	sp, r7
 80583b4:	bd80      	pop	{r7, pc}
 80583b6:	bf00      	nop
 80583b8:	24002c74 	.word	0x24002c74
 80583bc:	24002c78 	.word	0x24002c78
 80583c0:	24002d7c 	.word	0x24002d7c

080583c4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80583c4:	b580      	push	{r7, lr}
 80583c6:	b088      	sub	sp, #32
 80583c8:	af00      	add	r7, sp, #0
 80583ca:	6078      	str	r0, [r7, #4]
 80583cc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80583ce:	687b      	ldr	r3, [r7, #4]
 80583d0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80583d2:	2301      	movs	r3, #1
 80583d4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80583d6:	687b      	ldr	r3, [r7, #4]
 80583d8:	2b00      	cmp	r3, #0
 80583da:	d077      	beq.n	80584cc <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80583dc:	69bb      	ldr	r3, [r7, #24]
 80583de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80583e0:	2b00      	cmp	r3, #0
 80583e2:	d10a      	bne.n	80583fa <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80583e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80583e8:	f383 8811 	msr	BASEPRI, r3
 80583ec:	f3bf 8f6f 	isb	sy
 80583f0:	f3bf 8f4f 	dsb	sy
 80583f4:	60fb      	str	r3, [r7, #12]
}
 80583f6:	bf00      	nop
 80583f8:	e7fe      	b.n	80583f8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80583fa:	69bb      	ldr	r3, [r7, #24]
 80583fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80583fe:	683a      	ldr	r2, [r7, #0]
 8058400:	429a      	cmp	r2, r3
 8058402:	d902      	bls.n	805840a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8058404:	683b      	ldr	r3, [r7, #0]
 8058406:	61fb      	str	r3, [r7, #28]
 8058408:	e002      	b.n	8058410 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 805840a:	69bb      	ldr	r3, [r7, #24]
 805840c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 805840e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8058410:	69bb      	ldr	r3, [r7, #24]
 8058412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8058414:	69fa      	ldr	r2, [r7, #28]
 8058416:	429a      	cmp	r2, r3
 8058418:	d058      	beq.n	80584cc <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 805841a:	69bb      	ldr	r3, [r7, #24]
 805841c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 805841e:	697a      	ldr	r2, [r7, #20]
 8058420:	429a      	cmp	r2, r3
 8058422:	d153      	bne.n	80584cc <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8058424:	4b2b      	ldr	r3, [pc, #172]	; (80584d4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8058426:	681b      	ldr	r3, [r3, #0]
 8058428:	69ba      	ldr	r2, [r7, #24]
 805842a:	429a      	cmp	r2, r3
 805842c:	d10a      	bne.n	8058444 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 805842e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8058432:	f383 8811 	msr	BASEPRI, r3
 8058436:	f3bf 8f6f 	isb	sy
 805843a:	f3bf 8f4f 	dsb	sy
 805843e:	60bb      	str	r3, [r7, #8]
}
 8058440:	bf00      	nop
 8058442:	e7fe      	b.n	8058442 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8058444:	69bb      	ldr	r3, [r7, #24]
 8058446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8058448:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 805844a:	69bb      	ldr	r3, [r7, #24]
 805844c:	69fa      	ldr	r2, [r7, #28]
 805844e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8058450:	69bb      	ldr	r3, [r7, #24]
 8058452:	699b      	ldr	r3, [r3, #24]
 8058454:	2b00      	cmp	r3, #0
 8058456:	db04      	blt.n	8058462 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8058458:	69fb      	ldr	r3, [r7, #28]
 805845a:	f1c3 0207 	rsb	r2, r3, #7
 805845e:	69bb      	ldr	r3, [r7, #24]
 8058460:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8058462:	69bb      	ldr	r3, [r7, #24]
 8058464:	6959      	ldr	r1, [r3, #20]
 8058466:	693a      	ldr	r2, [r7, #16]
 8058468:	4613      	mov	r3, r2
 805846a:	009b      	lsls	r3, r3, #2
 805846c:	4413      	add	r3, r2
 805846e:	009b      	lsls	r3, r3, #2
 8058470:	4a19      	ldr	r2, [pc, #100]	; (80584d8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8058472:	4413      	add	r3, r2
 8058474:	4299      	cmp	r1, r3
 8058476:	d129      	bne.n	80584cc <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8058478:	69bb      	ldr	r3, [r7, #24]
 805847a:	3304      	adds	r3, #4
 805847c:	4618      	mov	r0, r3
 805847e:	f7fe f869 	bl	8056554 <uxListRemove>
 8058482:	4603      	mov	r3, r0
 8058484:	2b00      	cmp	r3, #0
 8058486:	d10a      	bne.n	805849e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8058488:	69bb      	ldr	r3, [r7, #24]
 805848a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 805848c:	2201      	movs	r2, #1
 805848e:	fa02 f303 	lsl.w	r3, r2, r3
 8058492:	43da      	mvns	r2, r3
 8058494:	4b11      	ldr	r3, [pc, #68]	; (80584dc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8058496:	681b      	ldr	r3, [r3, #0]
 8058498:	4013      	ands	r3, r2
 805849a:	4a10      	ldr	r2, [pc, #64]	; (80584dc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 805849c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 805849e:	69bb      	ldr	r3, [r7, #24]
 80584a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80584a2:	2201      	movs	r2, #1
 80584a4:	409a      	lsls	r2, r3
 80584a6:	4b0d      	ldr	r3, [pc, #52]	; (80584dc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80584a8:	681b      	ldr	r3, [r3, #0]
 80584aa:	4313      	orrs	r3, r2
 80584ac:	4a0b      	ldr	r2, [pc, #44]	; (80584dc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80584ae:	6013      	str	r3, [r2, #0]
 80584b0:	69bb      	ldr	r3, [r7, #24]
 80584b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80584b4:	4613      	mov	r3, r2
 80584b6:	009b      	lsls	r3, r3, #2
 80584b8:	4413      	add	r3, r2
 80584ba:	009b      	lsls	r3, r3, #2
 80584bc:	4a06      	ldr	r2, [pc, #24]	; (80584d8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80584be:	441a      	add	r2, r3
 80584c0:	69bb      	ldr	r3, [r7, #24]
 80584c2:	3304      	adds	r3, #4
 80584c4:	4619      	mov	r1, r3
 80584c6:	4610      	mov	r0, r2
 80584c8:	f7fd ffe7 	bl	805649a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80584cc:	bf00      	nop
 80584ce:	3720      	adds	r7, #32
 80584d0:	46bd      	mov	sp, r7
 80584d2:	bd80      	pop	{r7, pc}
 80584d4:	24002c74 	.word	0x24002c74
 80584d8:	24002c78 	.word	0x24002c78
 80584dc:	24002d7c 	.word	0x24002d7c

080584e0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80584e0:	b480      	push	{r7}
 80584e2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80584e4:	4b07      	ldr	r3, [pc, #28]	; (8058504 <pvTaskIncrementMutexHeldCount+0x24>)
 80584e6:	681b      	ldr	r3, [r3, #0]
 80584e8:	2b00      	cmp	r3, #0
 80584ea:	d004      	beq.n	80584f6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80584ec:	4b05      	ldr	r3, [pc, #20]	; (8058504 <pvTaskIncrementMutexHeldCount+0x24>)
 80584ee:	681b      	ldr	r3, [r3, #0]
 80584f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80584f2:	3201      	adds	r2, #1
 80584f4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80584f6:	4b03      	ldr	r3, [pc, #12]	; (8058504 <pvTaskIncrementMutexHeldCount+0x24>)
 80584f8:	681b      	ldr	r3, [r3, #0]
	}
 80584fa:	4618      	mov	r0, r3
 80584fc:	46bd      	mov	sp, r7
 80584fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8058502:	4770      	bx	lr
 8058504:	24002c74 	.word	0x24002c74

08058508 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8058508:	b580      	push	{r7, lr}
 805850a:	b084      	sub	sp, #16
 805850c:	af00      	add	r7, sp, #0
 805850e:	6078      	str	r0, [r7, #4]
 8058510:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8058512:	f000 fe4f 	bl	80591b4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8058516:	4b1e      	ldr	r3, [pc, #120]	; (8058590 <ulTaskNotifyTake+0x88>)
 8058518:	681b      	ldr	r3, [r3, #0]
 805851a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 805851c:	2b00      	cmp	r3, #0
 805851e:	d113      	bne.n	8058548 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8058520:	4b1b      	ldr	r3, [pc, #108]	; (8058590 <ulTaskNotifyTake+0x88>)
 8058522:	681b      	ldr	r3, [r3, #0]
 8058524:	2201      	movs	r2, #1
 8058526:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 805852a:	683b      	ldr	r3, [r7, #0]
 805852c:	2b00      	cmp	r3, #0
 805852e:	d00b      	beq.n	8058548 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8058530:	2101      	movs	r1, #1
 8058532:	6838      	ldr	r0, [r7, #0]
 8058534:	f000 f8c2 	bl	80586bc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8058538:	4b16      	ldr	r3, [pc, #88]	; (8058594 <ulTaskNotifyTake+0x8c>)
 805853a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 805853e:	601a      	str	r2, [r3, #0]
 8058540:	f3bf 8f4f 	dsb	sy
 8058544:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8058548:	f000 fe64 	bl	8059214 <vPortExitCritical>

		taskENTER_CRITICAL();
 805854c:	f000 fe32 	bl	80591b4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8058550:	4b0f      	ldr	r3, [pc, #60]	; (8058590 <ulTaskNotifyTake+0x88>)
 8058552:	681b      	ldr	r3, [r3, #0]
 8058554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8058556:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8058558:	68fb      	ldr	r3, [r7, #12]
 805855a:	2b00      	cmp	r3, #0
 805855c:	d00c      	beq.n	8058578 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 805855e:	687b      	ldr	r3, [r7, #4]
 8058560:	2b00      	cmp	r3, #0
 8058562:	d004      	beq.n	805856e <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8058564:	4b0a      	ldr	r3, [pc, #40]	; (8058590 <ulTaskNotifyTake+0x88>)
 8058566:	681b      	ldr	r3, [r3, #0]
 8058568:	2200      	movs	r2, #0
 805856a:	64da      	str	r2, [r3, #76]	; 0x4c
 805856c:	e004      	b.n	8058578 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 805856e:	4b08      	ldr	r3, [pc, #32]	; (8058590 <ulTaskNotifyTake+0x88>)
 8058570:	681b      	ldr	r3, [r3, #0]
 8058572:	68fa      	ldr	r2, [r7, #12]
 8058574:	3a01      	subs	r2, #1
 8058576:	64da      	str	r2, [r3, #76]	; 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8058578:	4b05      	ldr	r3, [pc, #20]	; (8058590 <ulTaskNotifyTake+0x88>)
 805857a:	681b      	ldr	r3, [r3, #0]
 805857c:	2200      	movs	r2, #0
 805857e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8058582:	f000 fe47 	bl	8059214 <vPortExitCritical>

		return ulReturn;
 8058586:	68fb      	ldr	r3, [r7, #12]
	}
 8058588:	4618      	mov	r0, r3
 805858a:	3710      	adds	r7, #16
 805858c:	46bd      	mov	sp, r7
 805858e:	bd80      	pop	{r7, pc}
 8058590:	24002c74 	.word	0x24002c74
 8058594:	e000ed04 	.word	0xe000ed04

08058598 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8058598:	b580      	push	{r7, lr}
 805859a:	b08a      	sub	sp, #40	; 0x28
 805859c:	af00      	add	r7, sp, #0
 805859e:	6078      	str	r0, [r7, #4]
 80585a0:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80585a2:	687b      	ldr	r3, [r7, #4]
 80585a4:	2b00      	cmp	r3, #0
 80585a6:	d10a      	bne.n	80585be <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 80585a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80585ac:	f383 8811 	msr	BASEPRI, r3
 80585b0:	f3bf 8f6f 	isb	sy
 80585b4:	f3bf 8f4f 	dsb	sy
 80585b8:	61bb      	str	r3, [r7, #24]
}
 80585ba:	bf00      	nop
 80585bc:	e7fe      	b.n	80585bc <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80585be:	f000 fedb 	bl	8059378 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80585c2:	687b      	ldr	r3, [r7, #4]
 80585c4:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 80585c6:	f3ef 8211 	mrs	r2, BASEPRI
 80585ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80585ce:	f383 8811 	msr	BASEPRI, r3
 80585d2:	f3bf 8f6f 	isb	sy
 80585d6:	f3bf 8f4f 	dsb	sy
 80585da:	617a      	str	r2, [r7, #20]
 80585dc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80585de:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80585e0:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80585e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80585e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80585e8:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80585ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80585ec:	2202      	movs	r2, #2
 80585ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 80585f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80585f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80585f6:	1c5a      	adds	r2, r3, #1
 80585f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80585fa:	64da      	str	r2, [r3, #76]	; 0x4c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80585fc:	7ffb      	ldrb	r3, [r7, #31]
 80585fe:	2b01      	cmp	r3, #1
 8058600:	d145      	bne.n	805868e <vTaskNotifyGiveFromISR+0xf6>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8058602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8058604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8058606:	2b00      	cmp	r3, #0
 8058608:	d00a      	beq.n	8058620 <vTaskNotifyGiveFromISR+0x88>
	__asm volatile
 805860a:	f04f 0350 	mov.w	r3, #80	; 0x50
 805860e:	f383 8811 	msr	BASEPRI, r3
 8058612:	f3bf 8f6f 	isb	sy
 8058616:	f3bf 8f4f 	dsb	sy
 805861a:	60fb      	str	r3, [r7, #12]
}
 805861c:	bf00      	nop
 805861e:	e7fe      	b.n	805861e <vTaskNotifyGiveFromISR+0x86>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8058620:	4b20      	ldr	r3, [pc, #128]	; (80586a4 <vTaskNotifyGiveFromISR+0x10c>)
 8058622:	681b      	ldr	r3, [r3, #0]
 8058624:	2b00      	cmp	r3, #0
 8058626:	d11c      	bne.n	8058662 <vTaskNotifyGiveFromISR+0xca>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8058628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805862a:	3304      	adds	r3, #4
 805862c:	4618      	mov	r0, r3
 805862e:	f7fd ff91 	bl	8056554 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8058632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8058634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8058636:	2201      	movs	r2, #1
 8058638:	409a      	lsls	r2, r3
 805863a:	4b1b      	ldr	r3, [pc, #108]	; (80586a8 <vTaskNotifyGiveFromISR+0x110>)
 805863c:	681b      	ldr	r3, [r3, #0]
 805863e:	4313      	orrs	r3, r2
 8058640:	4a19      	ldr	r2, [pc, #100]	; (80586a8 <vTaskNotifyGiveFromISR+0x110>)
 8058642:	6013      	str	r3, [r2, #0]
 8058644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8058646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8058648:	4613      	mov	r3, r2
 805864a:	009b      	lsls	r3, r3, #2
 805864c:	4413      	add	r3, r2
 805864e:	009b      	lsls	r3, r3, #2
 8058650:	4a16      	ldr	r2, [pc, #88]	; (80586ac <vTaskNotifyGiveFromISR+0x114>)
 8058652:	441a      	add	r2, r3
 8058654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8058656:	3304      	adds	r3, #4
 8058658:	4619      	mov	r1, r3
 805865a:	4610      	mov	r0, r2
 805865c:	f7fd ff1d 	bl	805649a <vListInsertEnd>
 8058660:	e005      	b.n	805866e <vTaskNotifyGiveFromISR+0xd6>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8058662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8058664:	3318      	adds	r3, #24
 8058666:	4619      	mov	r1, r3
 8058668:	4811      	ldr	r0, [pc, #68]	; (80586b0 <vTaskNotifyGiveFromISR+0x118>)
 805866a:	f7fd ff16 	bl	805649a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 805866e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8058670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8058672:	4b10      	ldr	r3, [pc, #64]	; (80586b4 <vTaskNotifyGiveFromISR+0x11c>)
 8058674:	681b      	ldr	r3, [r3, #0]
 8058676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8058678:	429a      	cmp	r2, r3
 805867a:	d908      	bls.n	805868e <vTaskNotifyGiveFromISR+0xf6>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 805867c:	683b      	ldr	r3, [r7, #0]
 805867e:	2b00      	cmp	r3, #0
 8058680:	d002      	beq.n	8058688 <vTaskNotifyGiveFromISR+0xf0>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8058682:	683b      	ldr	r3, [r7, #0]
 8058684:	2201      	movs	r2, #1
 8058686:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8058688:	4b0b      	ldr	r3, [pc, #44]	; (80586b8 <vTaskNotifyGiveFromISR+0x120>)
 805868a:	2201      	movs	r2, #1
 805868c:	601a      	str	r2, [r3, #0]
 805868e:	6a3b      	ldr	r3, [r7, #32]
 8058690:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8058692:	68bb      	ldr	r3, [r7, #8]
 8058694:	f383 8811 	msr	BASEPRI, r3
}
 8058698:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 805869a:	bf00      	nop
 805869c:	3728      	adds	r7, #40	; 0x28
 805869e:	46bd      	mov	sp, r7
 80586a0:	bd80      	pop	{r7, pc}
 80586a2:	bf00      	nop
 80586a4:	24002d9c 	.word	0x24002d9c
 80586a8:	24002d7c 	.word	0x24002d7c
 80586ac:	24002c78 	.word	0x24002c78
 80586b0:	24002d34 	.word	0x24002d34
 80586b4:	24002c74 	.word	0x24002c74
 80586b8:	24002d88 	.word	0x24002d88

080586bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80586bc:	b580      	push	{r7, lr}
 80586be:	b084      	sub	sp, #16
 80586c0:	af00      	add	r7, sp, #0
 80586c2:	6078      	str	r0, [r7, #4]
 80586c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80586c6:	4b29      	ldr	r3, [pc, #164]	; (805876c <prvAddCurrentTaskToDelayedList+0xb0>)
 80586c8:	681b      	ldr	r3, [r3, #0]
 80586ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80586cc:	4b28      	ldr	r3, [pc, #160]	; (8058770 <prvAddCurrentTaskToDelayedList+0xb4>)
 80586ce:	681b      	ldr	r3, [r3, #0]
 80586d0:	3304      	adds	r3, #4
 80586d2:	4618      	mov	r0, r3
 80586d4:	f7fd ff3e 	bl	8056554 <uxListRemove>
 80586d8:	4603      	mov	r3, r0
 80586da:	2b00      	cmp	r3, #0
 80586dc:	d10b      	bne.n	80586f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80586de:	4b24      	ldr	r3, [pc, #144]	; (8058770 <prvAddCurrentTaskToDelayedList+0xb4>)
 80586e0:	681b      	ldr	r3, [r3, #0]
 80586e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80586e4:	2201      	movs	r2, #1
 80586e6:	fa02 f303 	lsl.w	r3, r2, r3
 80586ea:	43da      	mvns	r2, r3
 80586ec:	4b21      	ldr	r3, [pc, #132]	; (8058774 <prvAddCurrentTaskToDelayedList+0xb8>)
 80586ee:	681b      	ldr	r3, [r3, #0]
 80586f0:	4013      	ands	r3, r2
 80586f2:	4a20      	ldr	r2, [pc, #128]	; (8058774 <prvAddCurrentTaskToDelayedList+0xb8>)
 80586f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80586f6:	687b      	ldr	r3, [r7, #4]
 80586f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80586fc:	d10a      	bne.n	8058714 <prvAddCurrentTaskToDelayedList+0x58>
 80586fe:	683b      	ldr	r3, [r7, #0]
 8058700:	2b00      	cmp	r3, #0
 8058702:	d007      	beq.n	8058714 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8058704:	4b1a      	ldr	r3, [pc, #104]	; (8058770 <prvAddCurrentTaskToDelayedList+0xb4>)
 8058706:	681b      	ldr	r3, [r3, #0]
 8058708:	3304      	adds	r3, #4
 805870a:	4619      	mov	r1, r3
 805870c:	481a      	ldr	r0, [pc, #104]	; (8058778 <prvAddCurrentTaskToDelayedList+0xbc>)
 805870e:	f7fd fec4 	bl	805649a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8058712:	e026      	b.n	8058762 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8058714:	68fa      	ldr	r2, [r7, #12]
 8058716:	687b      	ldr	r3, [r7, #4]
 8058718:	4413      	add	r3, r2
 805871a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 805871c:	4b14      	ldr	r3, [pc, #80]	; (8058770 <prvAddCurrentTaskToDelayedList+0xb4>)
 805871e:	681b      	ldr	r3, [r3, #0]
 8058720:	68ba      	ldr	r2, [r7, #8]
 8058722:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8058724:	68ba      	ldr	r2, [r7, #8]
 8058726:	68fb      	ldr	r3, [r7, #12]
 8058728:	429a      	cmp	r2, r3
 805872a:	d209      	bcs.n	8058740 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 805872c:	4b13      	ldr	r3, [pc, #76]	; (805877c <prvAddCurrentTaskToDelayedList+0xc0>)
 805872e:	681a      	ldr	r2, [r3, #0]
 8058730:	4b0f      	ldr	r3, [pc, #60]	; (8058770 <prvAddCurrentTaskToDelayedList+0xb4>)
 8058732:	681b      	ldr	r3, [r3, #0]
 8058734:	3304      	adds	r3, #4
 8058736:	4619      	mov	r1, r3
 8058738:	4610      	mov	r0, r2
 805873a:	f7fd fed2 	bl	80564e2 <vListInsert>
}
 805873e:	e010      	b.n	8058762 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8058740:	4b0f      	ldr	r3, [pc, #60]	; (8058780 <prvAddCurrentTaskToDelayedList+0xc4>)
 8058742:	681a      	ldr	r2, [r3, #0]
 8058744:	4b0a      	ldr	r3, [pc, #40]	; (8058770 <prvAddCurrentTaskToDelayedList+0xb4>)
 8058746:	681b      	ldr	r3, [r3, #0]
 8058748:	3304      	adds	r3, #4
 805874a:	4619      	mov	r1, r3
 805874c:	4610      	mov	r0, r2
 805874e:	f7fd fec8 	bl	80564e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8058752:	4b0c      	ldr	r3, [pc, #48]	; (8058784 <prvAddCurrentTaskToDelayedList+0xc8>)
 8058754:	681b      	ldr	r3, [r3, #0]
 8058756:	68ba      	ldr	r2, [r7, #8]
 8058758:	429a      	cmp	r2, r3
 805875a:	d202      	bcs.n	8058762 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 805875c:	4a09      	ldr	r2, [pc, #36]	; (8058784 <prvAddCurrentTaskToDelayedList+0xc8>)
 805875e:	68bb      	ldr	r3, [r7, #8]
 8058760:	6013      	str	r3, [r2, #0]
}
 8058762:	bf00      	nop
 8058764:	3710      	adds	r7, #16
 8058766:	46bd      	mov	sp, r7
 8058768:	bd80      	pop	{r7, pc}
 805876a:	bf00      	nop
 805876c:	24002d78 	.word	0x24002d78
 8058770:	24002c74 	.word	0x24002c74
 8058774:	24002d7c 	.word	0x24002d7c
 8058778:	24002d60 	.word	0x24002d60
 805877c:	24002d30 	.word	0x24002d30
 8058780:	24002d2c 	.word	0x24002d2c
 8058784:	24002d94 	.word	0x24002d94

08058788 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8058788:	b580      	push	{r7, lr}
 805878a:	b08a      	sub	sp, #40	; 0x28
 805878c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 805878e:	2300      	movs	r3, #0
 8058790:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8058792:	f000 fba1 	bl	8058ed8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8058796:	4b1c      	ldr	r3, [pc, #112]	; (8058808 <xTimerCreateTimerTask+0x80>)
 8058798:	681b      	ldr	r3, [r3, #0]
 805879a:	2b00      	cmp	r3, #0
 805879c:	d021      	beq.n	80587e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 805879e:	2300      	movs	r3, #0
 80587a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80587a2:	2300      	movs	r3, #0
 80587a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80587a6:	1d3a      	adds	r2, r7, #4
 80587a8:	f107 0108 	add.w	r1, r7, #8
 80587ac:	f107 030c 	add.w	r3, r7, #12
 80587b0:	4618      	mov	r0, r3
 80587b2:	f7e8 fa89 	bl	8040cc8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80587b6:	6879      	ldr	r1, [r7, #4]
 80587b8:	68bb      	ldr	r3, [r7, #8]
 80587ba:	68fa      	ldr	r2, [r7, #12]
 80587bc:	9202      	str	r2, [sp, #8]
 80587be:	9301      	str	r3, [sp, #4]
 80587c0:	2302      	movs	r3, #2
 80587c2:	9300      	str	r3, [sp, #0]
 80587c4:	2300      	movs	r3, #0
 80587c6:	460a      	mov	r2, r1
 80587c8:	4910      	ldr	r1, [pc, #64]	; (805880c <xTimerCreateTimerTask+0x84>)
 80587ca:	4811      	ldr	r0, [pc, #68]	; (8058810 <xTimerCreateTimerTask+0x88>)
 80587cc:	f7fe fed8 	bl	8057580 <xTaskCreateStatic>
 80587d0:	4603      	mov	r3, r0
 80587d2:	4a10      	ldr	r2, [pc, #64]	; (8058814 <xTimerCreateTimerTask+0x8c>)
 80587d4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80587d6:	4b0f      	ldr	r3, [pc, #60]	; (8058814 <xTimerCreateTimerTask+0x8c>)
 80587d8:	681b      	ldr	r3, [r3, #0]
 80587da:	2b00      	cmp	r3, #0
 80587dc:	d001      	beq.n	80587e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80587de:	2301      	movs	r3, #1
 80587e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80587e2:	697b      	ldr	r3, [r7, #20]
 80587e4:	2b00      	cmp	r3, #0
 80587e6:	d10a      	bne.n	80587fe <xTimerCreateTimerTask+0x76>
	__asm volatile
 80587e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80587ec:	f383 8811 	msr	BASEPRI, r3
 80587f0:	f3bf 8f6f 	isb	sy
 80587f4:	f3bf 8f4f 	dsb	sy
 80587f8:	613b      	str	r3, [r7, #16]
}
 80587fa:	bf00      	nop
 80587fc:	e7fe      	b.n	80587fc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80587fe:	697b      	ldr	r3, [r7, #20]
}
 8058800:	4618      	mov	r0, r3
 8058802:	3718      	adds	r7, #24
 8058804:	46bd      	mov	sp, r7
 8058806:	bd80      	pop	{r7, pc}
 8058808:	24002dd0 	.word	0x24002dd0
 805880c:	0805b8fc 	.word	0x0805b8fc
 8058810:	08058a81 	.word	0x08058a81
 8058814:	24002dd4 	.word	0x24002dd4

08058818 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8058818:	b580      	push	{r7, lr}
 805881a:	b088      	sub	sp, #32
 805881c:	af02      	add	r7, sp, #8
 805881e:	60f8      	str	r0, [r7, #12]
 8058820:	60b9      	str	r1, [r7, #8]
 8058822:	607a      	str	r2, [r7, #4]
 8058824:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8058826:	2028      	movs	r0, #40	; 0x28
 8058828:	f000 fde6 	bl	80593f8 <pvPortMalloc>
 805882c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 805882e:	697b      	ldr	r3, [r7, #20]
 8058830:	2b00      	cmp	r3, #0
 8058832:	d00d      	beq.n	8058850 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8058834:	697b      	ldr	r3, [r7, #20]
 8058836:	2200      	movs	r2, #0
 8058838:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 805883c:	697b      	ldr	r3, [r7, #20]
 805883e:	9301      	str	r3, [sp, #4]
 8058840:	6a3b      	ldr	r3, [r7, #32]
 8058842:	9300      	str	r3, [sp, #0]
 8058844:	683b      	ldr	r3, [r7, #0]
 8058846:	687a      	ldr	r2, [r7, #4]
 8058848:	68b9      	ldr	r1, [r7, #8]
 805884a:	68f8      	ldr	r0, [r7, #12]
 805884c:	f000 f843 	bl	80588d6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8058850:	697b      	ldr	r3, [r7, #20]
	}
 8058852:	4618      	mov	r0, r3
 8058854:	3718      	adds	r7, #24
 8058856:	46bd      	mov	sp, r7
 8058858:	bd80      	pop	{r7, pc}

0805885a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 805885a:	b580      	push	{r7, lr}
 805885c:	b08a      	sub	sp, #40	; 0x28
 805885e:	af02      	add	r7, sp, #8
 8058860:	60f8      	str	r0, [r7, #12]
 8058862:	60b9      	str	r1, [r7, #8]
 8058864:	607a      	str	r2, [r7, #4]
 8058866:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8058868:	2328      	movs	r3, #40	; 0x28
 805886a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 805886c:	693b      	ldr	r3, [r7, #16]
 805886e:	2b28      	cmp	r3, #40	; 0x28
 8058870:	d00a      	beq.n	8058888 <xTimerCreateStatic+0x2e>
	__asm volatile
 8058872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8058876:	f383 8811 	msr	BASEPRI, r3
 805887a:	f3bf 8f6f 	isb	sy
 805887e:	f3bf 8f4f 	dsb	sy
 8058882:	61bb      	str	r3, [r7, #24]
}
 8058884:	bf00      	nop
 8058886:	e7fe      	b.n	8058886 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8058888:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 805888a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 805888c:	2b00      	cmp	r3, #0
 805888e:	d10a      	bne.n	80588a6 <xTimerCreateStatic+0x4c>
	__asm volatile
 8058890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8058894:	f383 8811 	msr	BASEPRI, r3
 8058898:	f3bf 8f6f 	isb	sy
 805889c:	f3bf 8f4f 	dsb	sy
 80588a0:	617b      	str	r3, [r7, #20]
}
 80588a2:	bf00      	nop
 80588a4:	e7fe      	b.n	80588a4 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80588a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80588a8:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80588aa:	69fb      	ldr	r3, [r7, #28]
 80588ac:	2b00      	cmp	r3, #0
 80588ae:	d00d      	beq.n	80588cc <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80588b0:	69fb      	ldr	r3, [r7, #28]
 80588b2:	2202      	movs	r2, #2
 80588b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80588b8:	69fb      	ldr	r3, [r7, #28]
 80588ba:	9301      	str	r3, [sp, #4]
 80588bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80588be:	9300      	str	r3, [sp, #0]
 80588c0:	683b      	ldr	r3, [r7, #0]
 80588c2:	687a      	ldr	r2, [r7, #4]
 80588c4:	68b9      	ldr	r1, [r7, #8]
 80588c6:	68f8      	ldr	r0, [r7, #12]
 80588c8:	f000 f805 	bl	80588d6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80588cc:	69fb      	ldr	r3, [r7, #28]
	}
 80588ce:	4618      	mov	r0, r3
 80588d0:	3720      	adds	r7, #32
 80588d2:	46bd      	mov	sp, r7
 80588d4:	bd80      	pop	{r7, pc}

080588d6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80588d6:	b580      	push	{r7, lr}
 80588d8:	b086      	sub	sp, #24
 80588da:	af00      	add	r7, sp, #0
 80588dc:	60f8      	str	r0, [r7, #12]
 80588de:	60b9      	str	r1, [r7, #8]
 80588e0:	607a      	str	r2, [r7, #4]
 80588e2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80588e4:	68bb      	ldr	r3, [r7, #8]
 80588e6:	2b00      	cmp	r3, #0
 80588e8:	d10a      	bne.n	8058900 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80588ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80588ee:	f383 8811 	msr	BASEPRI, r3
 80588f2:	f3bf 8f6f 	isb	sy
 80588f6:	f3bf 8f4f 	dsb	sy
 80588fa:	617b      	str	r3, [r7, #20]
}
 80588fc:	bf00      	nop
 80588fe:	e7fe      	b.n	80588fe <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8058900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8058902:	2b00      	cmp	r3, #0
 8058904:	d01e      	beq.n	8058944 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8058906:	f000 fae7 	bl	8058ed8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 805890a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805890c:	68fa      	ldr	r2, [r7, #12]
 805890e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8058910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8058912:	68ba      	ldr	r2, [r7, #8]
 8058914:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8058916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8058918:	683a      	ldr	r2, [r7, #0]
 805891a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 805891c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805891e:	6a3a      	ldr	r2, [r7, #32]
 8058920:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8058922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8058924:	3304      	adds	r3, #4
 8058926:	4618      	mov	r0, r3
 8058928:	f7fd fdaa 	bl	8056480 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 805892c:	687b      	ldr	r3, [r7, #4]
 805892e:	2b00      	cmp	r3, #0
 8058930:	d008      	beq.n	8058944 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8058932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8058934:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8058938:	f043 0304 	orr.w	r3, r3, #4
 805893c:	b2da      	uxtb	r2, r3
 805893e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8058940:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8058944:	bf00      	nop
 8058946:	3718      	adds	r7, #24
 8058948:	46bd      	mov	sp, r7
 805894a:	bd80      	pop	{r7, pc}

0805894c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 805894c:	b580      	push	{r7, lr}
 805894e:	b08a      	sub	sp, #40	; 0x28
 8058950:	af00      	add	r7, sp, #0
 8058952:	60f8      	str	r0, [r7, #12]
 8058954:	60b9      	str	r1, [r7, #8]
 8058956:	607a      	str	r2, [r7, #4]
 8058958:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 805895a:	2300      	movs	r3, #0
 805895c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 805895e:	68fb      	ldr	r3, [r7, #12]
 8058960:	2b00      	cmp	r3, #0
 8058962:	d10a      	bne.n	805897a <xTimerGenericCommand+0x2e>
	__asm volatile
 8058964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8058968:	f383 8811 	msr	BASEPRI, r3
 805896c:	f3bf 8f6f 	isb	sy
 8058970:	f3bf 8f4f 	dsb	sy
 8058974:	623b      	str	r3, [r7, #32]
}
 8058976:	bf00      	nop
 8058978:	e7fe      	b.n	8058978 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 805897a:	4b1a      	ldr	r3, [pc, #104]	; (80589e4 <xTimerGenericCommand+0x98>)
 805897c:	681b      	ldr	r3, [r3, #0]
 805897e:	2b00      	cmp	r3, #0
 8058980:	d02a      	beq.n	80589d8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8058982:	68bb      	ldr	r3, [r7, #8]
 8058984:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8058986:	687b      	ldr	r3, [r7, #4]
 8058988:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 805898a:	68fb      	ldr	r3, [r7, #12]
 805898c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 805898e:	68bb      	ldr	r3, [r7, #8]
 8058990:	2b05      	cmp	r3, #5
 8058992:	dc18      	bgt.n	80589c6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8058994:	f7ff fbfc 	bl	8058190 <xTaskGetSchedulerState>
 8058998:	4603      	mov	r3, r0
 805899a:	2b02      	cmp	r3, #2
 805899c:	d109      	bne.n	80589b2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 805899e:	4b11      	ldr	r3, [pc, #68]	; (80589e4 <xTimerGenericCommand+0x98>)
 80589a0:	6818      	ldr	r0, [r3, #0]
 80589a2:	f107 0110 	add.w	r1, r7, #16
 80589a6:	2300      	movs	r3, #0
 80589a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80589aa:	f7fd ff83 	bl	80568b4 <xQueueGenericSend>
 80589ae:	6278      	str	r0, [r7, #36]	; 0x24
 80589b0:	e012      	b.n	80589d8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80589b2:	4b0c      	ldr	r3, [pc, #48]	; (80589e4 <xTimerGenericCommand+0x98>)
 80589b4:	6818      	ldr	r0, [r3, #0]
 80589b6:	f107 0110 	add.w	r1, r7, #16
 80589ba:	2300      	movs	r3, #0
 80589bc:	2200      	movs	r2, #0
 80589be:	f7fd ff79 	bl	80568b4 <xQueueGenericSend>
 80589c2:	6278      	str	r0, [r7, #36]	; 0x24
 80589c4:	e008      	b.n	80589d8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80589c6:	4b07      	ldr	r3, [pc, #28]	; (80589e4 <xTimerGenericCommand+0x98>)
 80589c8:	6818      	ldr	r0, [r3, #0]
 80589ca:	f107 0110 	add.w	r1, r7, #16
 80589ce:	2300      	movs	r3, #0
 80589d0:	683a      	ldr	r2, [r7, #0]
 80589d2:	f7fe f86d 	bl	8056ab0 <xQueueGenericSendFromISR>
 80589d6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80589d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80589da:	4618      	mov	r0, r3
 80589dc:	3728      	adds	r7, #40	; 0x28
 80589de:	46bd      	mov	sp, r7
 80589e0:	bd80      	pop	{r7, pc}
 80589e2:	bf00      	nop
 80589e4:	24002dd0 	.word	0x24002dd0

080589e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80589e8:	b580      	push	{r7, lr}
 80589ea:	b088      	sub	sp, #32
 80589ec:	af02      	add	r7, sp, #8
 80589ee:	6078      	str	r0, [r7, #4]
 80589f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80589f2:	4b22      	ldr	r3, [pc, #136]	; (8058a7c <prvProcessExpiredTimer+0x94>)
 80589f4:	681b      	ldr	r3, [r3, #0]
 80589f6:	68db      	ldr	r3, [r3, #12]
 80589f8:	68db      	ldr	r3, [r3, #12]
 80589fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80589fc:	697b      	ldr	r3, [r7, #20]
 80589fe:	3304      	adds	r3, #4
 8058a00:	4618      	mov	r0, r3
 8058a02:	f7fd fda7 	bl	8056554 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8058a06:	697b      	ldr	r3, [r7, #20]
 8058a08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8058a0c:	f003 0304 	and.w	r3, r3, #4
 8058a10:	2b00      	cmp	r3, #0
 8058a12:	d022      	beq.n	8058a5a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8058a14:	697b      	ldr	r3, [r7, #20]
 8058a16:	699a      	ldr	r2, [r3, #24]
 8058a18:	687b      	ldr	r3, [r7, #4]
 8058a1a:	18d1      	adds	r1, r2, r3
 8058a1c:	687b      	ldr	r3, [r7, #4]
 8058a1e:	683a      	ldr	r2, [r7, #0]
 8058a20:	6978      	ldr	r0, [r7, #20]
 8058a22:	f000 f8d1 	bl	8058bc8 <prvInsertTimerInActiveList>
 8058a26:	4603      	mov	r3, r0
 8058a28:	2b00      	cmp	r3, #0
 8058a2a:	d01f      	beq.n	8058a6c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8058a2c:	2300      	movs	r3, #0
 8058a2e:	9300      	str	r3, [sp, #0]
 8058a30:	2300      	movs	r3, #0
 8058a32:	687a      	ldr	r2, [r7, #4]
 8058a34:	2100      	movs	r1, #0
 8058a36:	6978      	ldr	r0, [r7, #20]
 8058a38:	f7ff ff88 	bl	805894c <xTimerGenericCommand>
 8058a3c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8058a3e:	693b      	ldr	r3, [r7, #16]
 8058a40:	2b00      	cmp	r3, #0
 8058a42:	d113      	bne.n	8058a6c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8058a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8058a48:	f383 8811 	msr	BASEPRI, r3
 8058a4c:	f3bf 8f6f 	isb	sy
 8058a50:	f3bf 8f4f 	dsb	sy
 8058a54:	60fb      	str	r3, [r7, #12]
}
 8058a56:	bf00      	nop
 8058a58:	e7fe      	b.n	8058a58 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8058a5a:	697b      	ldr	r3, [r7, #20]
 8058a5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8058a60:	f023 0301 	bic.w	r3, r3, #1
 8058a64:	b2da      	uxtb	r2, r3
 8058a66:	697b      	ldr	r3, [r7, #20]
 8058a68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8058a6c:	697b      	ldr	r3, [r7, #20]
 8058a6e:	6a1b      	ldr	r3, [r3, #32]
 8058a70:	6978      	ldr	r0, [r7, #20]
 8058a72:	4798      	blx	r3
}
 8058a74:	bf00      	nop
 8058a76:	3718      	adds	r7, #24
 8058a78:	46bd      	mov	sp, r7
 8058a7a:	bd80      	pop	{r7, pc}
 8058a7c:	24002dc8 	.word	0x24002dc8

08058a80 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8058a80:	b580      	push	{r7, lr}
 8058a82:	b084      	sub	sp, #16
 8058a84:	af00      	add	r7, sp, #0
 8058a86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8058a88:	f107 0308 	add.w	r3, r7, #8
 8058a8c:	4618      	mov	r0, r3
 8058a8e:	f000 f857 	bl	8058b40 <prvGetNextExpireTime>
 8058a92:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8058a94:	68bb      	ldr	r3, [r7, #8]
 8058a96:	4619      	mov	r1, r3
 8058a98:	68f8      	ldr	r0, [r7, #12]
 8058a9a:	f000 f803 	bl	8058aa4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8058a9e:	f000 f8d5 	bl	8058c4c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8058aa2:	e7f1      	b.n	8058a88 <prvTimerTask+0x8>

08058aa4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8058aa4:	b580      	push	{r7, lr}
 8058aa6:	b084      	sub	sp, #16
 8058aa8:	af00      	add	r7, sp, #0
 8058aaa:	6078      	str	r0, [r7, #4]
 8058aac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8058aae:	f7fe ff95 	bl	80579dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8058ab2:	f107 0308 	add.w	r3, r7, #8
 8058ab6:	4618      	mov	r0, r3
 8058ab8:	f000 f866 	bl	8058b88 <prvSampleTimeNow>
 8058abc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8058abe:	68bb      	ldr	r3, [r7, #8]
 8058ac0:	2b00      	cmp	r3, #0
 8058ac2:	d130      	bne.n	8058b26 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8058ac4:	683b      	ldr	r3, [r7, #0]
 8058ac6:	2b00      	cmp	r3, #0
 8058ac8:	d10a      	bne.n	8058ae0 <prvProcessTimerOrBlockTask+0x3c>
 8058aca:	687a      	ldr	r2, [r7, #4]
 8058acc:	68fb      	ldr	r3, [r7, #12]
 8058ace:	429a      	cmp	r2, r3
 8058ad0:	d806      	bhi.n	8058ae0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8058ad2:	f7fe ff91 	bl	80579f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8058ad6:	68f9      	ldr	r1, [r7, #12]
 8058ad8:	6878      	ldr	r0, [r7, #4]
 8058ada:	f7ff ff85 	bl	80589e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8058ade:	e024      	b.n	8058b2a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8058ae0:	683b      	ldr	r3, [r7, #0]
 8058ae2:	2b00      	cmp	r3, #0
 8058ae4:	d008      	beq.n	8058af8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8058ae6:	4b13      	ldr	r3, [pc, #76]	; (8058b34 <prvProcessTimerOrBlockTask+0x90>)
 8058ae8:	681b      	ldr	r3, [r3, #0]
 8058aea:	681b      	ldr	r3, [r3, #0]
 8058aec:	2b00      	cmp	r3, #0
 8058aee:	d101      	bne.n	8058af4 <prvProcessTimerOrBlockTask+0x50>
 8058af0:	2301      	movs	r3, #1
 8058af2:	e000      	b.n	8058af6 <prvProcessTimerOrBlockTask+0x52>
 8058af4:	2300      	movs	r3, #0
 8058af6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8058af8:	4b0f      	ldr	r3, [pc, #60]	; (8058b38 <prvProcessTimerOrBlockTask+0x94>)
 8058afa:	6818      	ldr	r0, [r3, #0]
 8058afc:	687a      	ldr	r2, [r7, #4]
 8058afe:	68fb      	ldr	r3, [r7, #12]
 8058b00:	1ad3      	subs	r3, r2, r3
 8058b02:	683a      	ldr	r2, [r7, #0]
 8058b04:	4619      	mov	r1, r3
 8058b06:	f7fe fd07 	bl	8057518 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8058b0a:	f7fe ff75 	bl	80579f8 <xTaskResumeAll>
 8058b0e:	4603      	mov	r3, r0
 8058b10:	2b00      	cmp	r3, #0
 8058b12:	d10a      	bne.n	8058b2a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8058b14:	4b09      	ldr	r3, [pc, #36]	; (8058b3c <prvProcessTimerOrBlockTask+0x98>)
 8058b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8058b1a:	601a      	str	r2, [r3, #0]
 8058b1c:	f3bf 8f4f 	dsb	sy
 8058b20:	f3bf 8f6f 	isb	sy
}
 8058b24:	e001      	b.n	8058b2a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8058b26:	f7fe ff67 	bl	80579f8 <xTaskResumeAll>
}
 8058b2a:	bf00      	nop
 8058b2c:	3710      	adds	r7, #16
 8058b2e:	46bd      	mov	sp, r7
 8058b30:	bd80      	pop	{r7, pc}
 8058b32:	bf00      	nop
 8058b34:	24002dcc 	.word	0x24002dcc
 8058b38:	24002dd0 	.word	0x24002dd0
 8058b3c:	e000ed04 	.word	0xe000ed04

08058b40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8058b40:	b480      	push	{r7}
 8058b42:	b085      	sub	sp, #20
 8058b44:	af00      	add	r7, sp, #0
 8058b46:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8058b48:	4b0e      	ldr	r3, [pc, #56]	; (8058b84 <prvGetNextExpireTime+0x44>)
 8058b4a:	681b      	ldr	r3, [r3, #0]
 8058b4c:	681b      	ldr	r3, [r3, #0]
 8058b4e:	2b00      	cmp	r3, #0
 8058b50:	d101      	bne.n	8058b56 <prvGetNextExpireTime+0x16>
 8058b52:	2201      	movs	r2, #1
 8058b54:	e000      	b.n	8058b58 <prvGetNextExpireTime+0x18>
 8058b56:	2200      	movs	r2, #0
 8058b58:	687b      	ldr	r3, [r7, #4]
 8058b5a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8058b5c:	687b      	ldr	r3, [r7, #4]
 8058b5e:	681b      	ldr	r3, [r3, #0]
 8058b60:	2b00      	cmp	r3, #0
 8058b62:	d105      	bne.n	8058b70 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8058b64:	4b07      	ldr	r3, [pc, #28]	; (8058b84 <prvGetNextExpireTime+0x44>)
 8058b66:	681b      	ldr	r3, [r3, #0]
 8058b68:	68db      	ldr	r3, [r3, #12]
 8058b6a:	681b      	ldr	r3, [r3, #0]
 8058b6c:	60fb      	str	r3, [r7, #12]
 8058b6e:	e001      	b.n	8058b74 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8058b70:	2300      	movs	r3, #0
 8058b72:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8058b74:	68fb      	ldr	r3, [r7, #12]
}
 8058b76:	4618      	mov	r0, r3
 8058b78:	3714      	adds	r7, #20
 8058b7a:	46bd      	mov	sp, r7
 8058b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8058b80:	4770      	bx	lr
 8058b82:	bf00      	nop
 8058b84:	24002dc8 	.word	0x24002dc8

08058b88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8058b88:	b580      	push	{r7, lr}
 8058b8a:	b084      	sub	sp, #16
 8058b8c:	af00      	add	r7, sp, #0
 8058b8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8058b90:	f7fe ffce 	bl	8057b30 <xTaskGetTickCount>
 8058b94:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8058b96:	4b0b      	ldr	r3, [pc, #44]	; (8058bc4 <prvSampleTimeNow+0x3c>)
 8058b98:	681b      	ldr	r3, [r3, #0]
 8058b9a:	68fa      	ldr	r2, [r7, #12]
 8058b9c:	429a      	cmp	r2, r3
 8058b9e:	d205      	bcs.n	8058bac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8058ba0:	f000 f936 	bl	8058e10 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8058ba4:	687b      	ldr	r3, [r7, #4]
 8058ba6:	2201      	movs	r2, #1
 8058ba8:	601a      	str	r2, [r3, #0]
 8058baa:	e002      	b.n	8058bb2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8058bac:	687b      	ldr	r3, [r7, #4]
 8058bae:	2200      	movs	r2, #0
 8058bb0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8058bb2:	4a04      	ldr	r2, [pc, #16]	; (8058bc4 <prvSampleTimeNow+0x3c>)
 8058bb4:	68fb      	ldr	r3, [r7, #12]
 8058bb6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8058bb8:	68fb      	ldr	r3, [r7, #12]
}
 8058bba:	4618      	mov	r0, r3
 8058bbc:	3710      	adds	r7, #16
 8058bbe:	46bd      	mov	sp, r7
 8058bc0:	bd80      	pop	{r7, pc}
 8058bc2:	bf00      	nop
 8058bc4:	24002dd8 	.word	0x24002dd8

08058bc8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8058bc8:	b580      	push	{r7, lr}
 8058bca:	b086      	sub	sp, #24
 8058bcc:	af00      	add	r7, sp, #0
 8058bce:	60f8      	str	r0, [r7, #12]
 8058bd0:	60b9      	str	r1, [r7, #8]
 8058bd2:	607a      	str	r2, [r7, #4]
 8058bd4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8058bd6:	2300      	movs	r3, #0
 8058bd8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8058bda:	68fb      	ldr	r3, [r7, #12]
 8058bdc:	68ba      	ldr	r2, [r7, #8]
 8058bde:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8058be0:	68fb      	ldr	r3, [r7, #12]
 8058be2:	68fa      	ldr	r2, [r7, #12]
 8058be4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8058be6:	68ba      	ldr	r2, [r7, #8]
 8058be8:	687b      	ldr	r3, [r7, #4]
 8058bea:	429a      	cmp	r2, r3
 8058bec:	d812      	bhi.n	8058c14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8058bee:	687a      	ldr	r2, [r7, #4]
 8058bf0:	683b      	ldr	r3, [r7, #0]
 8058bf2:	1ad2      	subs	r2, r2, r3
 8058bf4:	68fb      	ldr	r3, [r7, #12]
 8058bf6:	699b      	ldr	r3, [r3, #24]
 8058bf8:	429a      	cmp	r2, r3
 8058bfa:	d302      	bcc.n	8058c02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8058bfc:	2301      	movs	r3, #1
 8058bfe:	617b      	str	r3, [r7, #20]
 8058c00:	e01b      	b.n	8058c3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8058c02:	4b10      	ldr	r3, [pc, #64]	; (8058c44 <prvInsertTimerInActiveList+0x7c>)
 8058c04:	681a      	ldr	r2, [r3, #0]
 8058c06:	68fb      	ldr	r3, [r7, #12]
 8058c08:	3304      	adds	r3, #4
 8058c0a:	4619      	mov	r1, r3
 8058c0c:	4610      	mov	r0, r2
 8058c0e:	f7fd fc68 	bl	80564e2 <vListInsert>
 8058c12:	e012      	b.n	8058c3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8058c14:	687a      	ldr	r2, [r7, #4]
 8058c16:	683b      	ldr	r3, [r7, #0]
 8058c18:	429a      	cmp	r2, r3
 8058c1a:	d206      	bcs.n	8058c2a <prvInsertTimerInActiveList+0x62>
 8058c1c:	68ba      	ldr	r2, [r7, #8]
 8058c1e:	683b      	ldr	r3, [r7, #0]
 8058c20:	429a      	cmp	r2, r3
 8058c22:	d302      	bcc.n	8058c2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8058c24:	2301      	movs	r3, #1
 8058c26:	617b      	str	r3, [r7, #20]
 8058c28:	e007      	b.n	8058c3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8058c2a:	4b07      	ldr	r3, [pc, #28]	; (8058c48 <prvInsertTimerInActiveList+0x80>)
 8058c2c:	681a      	ldr	r2, [r3, #0]
 8058c2e:	68fb      	ldr	r3, [r7, #12]
 8058c30:	3304      	adds	r3, #4
 8058c32:	4619      	mov	r1, r3
 8058c34:	4610      	mov	r0, r2
 8058c36:	f7fd fc54 	bl	80564e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8058c3a:	697b      	ldr	r3, [r7, #20]
}
 8058c3c:	4618      	mov	r0, r3
 8058c3e:	3718      	adds	r7, #24
 8058c40:	46bd      	mov	sp, r7
 8058c42:	bd80      	pop	{r7, pc}
 8058c44:	24002dcc 	.word	0x24002dcc
 8058c48:	24002dc8 	.word	0x24002dc8

08058c4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8058c4c:	b580      	push	{r7, lr}
 8058c4e:	b08e      	sub	sp, #56	; 0x38
 8058c50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8058c52:	e0ca      	b.n	8058dea <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8058c54:	687b      	ldr	r3, [r7, #4]
 8058c56:	2b00      	cmp	r3, #0
 8058c58:	da18      	bge.n	8058c8c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8058c5a:	1d3b      	adds	r3, r7, #4
 8058c5c:	3304      	adds	r3, #4
 8058c5e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8058c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8058c62:	2b00      	cmp	r3, #0
 8058c64:	d10a      	bne.n	8058c7c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8058c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8058c6a:	f383 8811 	msr	BASEPRI, r3
 8058c6e:	f3bf 8f6f 	isb	sy
 8058c72:	f3bf 8f4f 	dsb	sy
 8058c76:	61fb      	str	r3, [r7, #28]
}
 8058c78:	bf00      	nop
 8058c7a:	e7fe      	b.n	8058c7a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8058c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8058c7e:	681b      	ldr	r3, [r3, #0]
 8058c80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8058c82:	6850      	ldr	r0, [r2, #4]
 8058c84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8058c86:	6892      	ldr	r2, [r2, #8]
 8058c88:	4611      	mov	r1, r2
 8058c8a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8058c8c:	687b      	ldr	r3, [r7, #4]
 8058c8e:	2b00      	cmp	r3, #0
 8058c90:	f2c0 80aa 	blt.w	8058de8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8058c94:	68fb      	ldr	r3, [r7, #12]
 8058c96:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8058c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8058c9a:	695b      	ldr	r3, [r3, #20]
 8058c9c:	2b00      	cmp	r3, #0
 8058c9e:	d004      	beq.n	8058caa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8058ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8058ca2:	3304      	adds	r3, #4
 8058ca4:	4618      	mov	r0, r3
 8058ca6:	f7fd fc55 	bl	8056554 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8058caa:	463b      	mov	r3, r7
 8058cac:	4618      	mov	r0, r3
 8058cae:	f7ff ff6b 	bl	8058b88 <prvSampleTimeNow>
 8058cb2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8058cb4:	687b      	ldr	r3, [r7, #4]
 8058cb6:	2b09      	cmp	r3, #9
 8058cb8:	f200 8097 	bhi.w	8058dea <prvProcessReceivedCommands+0x19e>
 8058cbc:	a201      	add	r2, pc, #4	; (adr r2, 8058cc4 <prvProcessReceivedCommands+0x78>)
 8058cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8058cc2:	bf00      	nop
 8058cc4:	08058ced 	.word	0x08058ced
 8058cc8:	08058ced 	.word	0x08058ced
 8058ccc:	08058ced 	.word	0x08058ced
 8058cd0:	08058d61 	.word	0x08058d61
 8058cd4:	08058d75 	.word	0x08058d75
 8058cd8:	08058dbf 	.word	0x08058dbf
 8058cdc:	08058ced 	.word	0x08058ced
 8058ce0:	08058ced 	.word	0x08058ced
 8058ce4:	08058d61 	.word	0x08058d61
 8058ce8:	08058d75 	.word	0x08058d75
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8058cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8058cee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8058cf2:	f043 0301 	orr.w	r3, r3, #1
 8058cf6:	b2da      	uxtb	r2, r3
 8058cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8058cfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8058cfe:	68ba      	ldr	r2, [r7, #8]
 8058d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8058d02:	699b      	ldr	r3, [r3, #24]
 8058d04:	18d1      	adds	r1, r2, r3
 8058d06:	68bb      	ldr	r3, [r7, #8]
 8058d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8058d0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8058d0c:	f7ff ff5c 	bl	8058bc8 <prvInsertTimerInActiveList>
 8058d10:	4603      	mov	r3, r0
 8058d12:	2b00      	cmp	r3, #0
 8058d14:	d069      	beq.n	8058dea <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8058d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8058d18:	6a1b      	ldr	r3, [r3, #32]
 8058d1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8058d1c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8058d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8058d20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8058d24:	f003 0304 	and.w	r3, r3, #4
 8058d28:	2b00      	cmp	r3, #0
 8058d2a:	d05e      	beq.n	8058dea <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8058d2c:	68ba      	ldr	r2, [r7, #8]
 8058d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8058d30:	699b      	ldr	r3, [r3, #24]
 8058d32:	441a      	add	r2, r3
 8058d34:	2300      	movs	r3, #0
 8058d36:	9300      	str	r3, [sp, #0]
 8058d38:	2300      	movs	r3, #0
 8058d3a:	2100      	movs	r1, #0
 8058d3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8058d3e:	f7ff fe05 	bl	805894c <xTimerGenericCommand>
 8058d42:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8058d44:	6a3b      	ldr	r3, [r7, #32]
 8058d46:	2b00      	cmp	r3, #0
 8058d48:	d14f      	bne.n	8058dea <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8058d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8058d4e:	f383 8811 	msr	BASEPRI, r3
 8058d52:	f3bf 8f6f 	isb	sy
 8058d56:	f3bf 8f4f 	dsb	sy
 8058d5a:	61bb      	str	r3, [r7, #24]
}
 8058d5c:	bf00      	nop
 8058d5e:	e7fe      	b.n	8058d5e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8058d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8058d62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8058d66:	f023 0301 	bic.w	r3, r3, #1
 8058d6a:	b2da      	uxtb	r2, r3
 8058d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8058d6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8058d72:	e03a      	b.n	8058dea <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8058d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8058d76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8058d7a:	f043 0301 	orr.w	r3, r3, #1
 8058d7e:	b2da      	uxtb	r2, r3
 8058d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8058d82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8058d86:	68ba      	ldr	r2, [r7, #8]
 8058d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8058d8a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8058d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8058d8e:	699b      	ldr	r3, [r3, #24]
 8058d90:	2b00      	cmp	r3, #0
 8058d92:	d10a      	bne.n	8058daa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8058d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8058d98:	f383 8811 	msr	BASEPRI, r3
 8058d9c:	f3bf 8f6f 	isb	sy
 8058da0:	f3bf 8f4f 	dsb	sy
 8058da4:	617b      	str	r3, [r7, #20]
}
 8058da6:	bf00      	nop
 8058da8:	e7fe      	b.n	8058da8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8058daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8058dac:	699a      	ldr	r2, [r3, #24]
 8058dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8058db0:	18d1      	adds	r1, r2, r3
 8058db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8058db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8058db6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8058db8:	f7ff ff06 	bl	8058bc8 <prvInsertTimerInActiveList>
					break;
 8058dbc:	e015      	b.n	8058dea <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8058dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8058dc0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8058dc4:	f003 0302 	and.w	r3, r3, #2
 8058dc8:	2b00      	cmp	r3, #0
 8058dca:	d103      	bne.n	8058dd4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8058dcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8058dce:	f000 fbdf 	bl	8059590 <vPortFree>
 8058dd2:	e00a      	b.n	8058dea <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8058dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8058dd6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8058dda:	f023 0301 	bic.w	r3, r3, #1
 8058dde:	b2da      	uxtb	r2, r3
 8058de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8058de2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8058de6:	e000      	b.n	8058dea <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8058de8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8058dea:	4b08      	ldr	r3, [pc, #32]	; (8058e0c <prvProcessReceivedCommands+0x1c0>)
 8058dec:	681b      	ldr	r3, [r3, #0]
 8058dee:	1d39      	adds	r1, r7, #4
 8058df0:	2200      	movs	r2, #0
 8058df2:	4618      	mov	r0, r3
 8058df4:	f7fd ff84 	bl	8056d00 <xQueueReceive>
 8058df8:	4603      	mov	r3, r0
 8058dfa:	2b00      	cmp	r3, #0
 8058dfc:	f47f af2a 	bne.w	8058c54 <prvProcessReceivedCommands+0x8>
	}
}
 8058e00:	bf00      	nop
 8058e02:	bf00      	nop
 8058e04:	3730      	adds	r7, #48	; 0x30
 8058e06:	46bd      	mov	sp, r7
 8058e08:	bd80      	pop	{r7, pc}
 8058e0a:	bf00      	nop
 8058e0c:	24002dd0 	.word	0x24002dd0

08058e10 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8058e10:	b580      	push	{r7, lr}
 8058e12:	b088      	sub	sp, #32
 8058e14:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8058e16:	e048      	b.n	8058eaa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8058e18:	4b2d      	ldr	r3, [pc, #180]	; (8058ed0 <prvSwitchTimerLists+0xc0>)
 8058e1a:	681b      	ldr	r3, [r3, #0]
 8058e1c:	68db      	ldr	r3, [r3, #12]
 8058e1e:	681b      	ldr	r3, [r3, #0]
 8058e20:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8058e22:	4b2b      	ldr	r3, [pc, #172]	; (8058ed0 <prvSwitchTimerLists+0xc0>)
 8058e24:	681b      	ldr	r3, [r3, #0]
 8058e26:	68db      	ldr	r3, [r3, #12]
 8058e28:	68db      	ldr	r3, [r3, #12]
 8058e2a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8058e2c:	68fb      	ldr	r3, [r7, #12]
 8058e2e:	3304      	adds	r3, #4
 8058e30:	4618      	mov	r0, r3
 8058e32:	f7fd fb8f 	bl	8056554 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8058e36:	68fb      	ldr	r3, [r7, #12]
 8058e38:	6a1b      	ldr	r3, [r3, #32]
 8058e3a:	68f8      	ldr	r0, [r7, #12]
 8058e3c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8058e3e:	68fb      	ldr	r3, [r7, #12]
 8058e40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8058e44:	f003 0304 	and.w	r3, r3, #4
 8058e48:	2b00      	cmp	r3, #0
 8058e4a:	d02e      	beq.n	8058eaa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8058e4c:	68fb      	ldr	r3, [r7, #12]
 8058e4e:	699b      	ldr	r3, [r3, #24]
 8058e50:	693a      	ldr	r2, [r7, #16]
 8058e52:	4413      	add	r3, r2
 8058e54:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8058e56:	68ba      	ldr	r2, [r7, #8]
 8058e58:	693b      	ldr	r3, [r7, #16]
 8058e5a:	429a      	cmp	r2, r3
 8058e5c:	d90e      	bls.n	8058e7c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8058e5e:	68fb      	ldr	r3, [r7, #12]
 8058e60:	68ba      	ldr	r2, [r7, #8]
 8058e62:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8058e64:	68fb      	ldr	r3, [r7, #12]
 8058e66:	68fa      	ldr	r2, [r7, #12]
 8058e68:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8058e6a:	4b19      	ldr	r3, [pc, #100]	; (8058ed0 <prvSwitchTimerLists+0xc0>)
 8058e6c:	681a      	ldr	r2, [r3, #0]
 8058e6e:	68fb      	ldr	r3, [r7, #12]
 8058e70:	3304      	adds	r3, #4
 8058e72:	4619      	mov	r1, r3
 8058e74:	4610      	mov	r0, r2
 8058e76:	f7fd fb34 	bl	80564e2 <vListInsert>
 8058e7a:	e016      	b.n	8058eaa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8058e7c:	2300      	movs	r3, #0
 8058e7e:	9300      	str	r3, [sp, #0]
 8058e80:	2300      	movs	r3, #0
 8058e82:	693a      	ldr	r2, [r7, #16]
 8058e84:	2100      	movs	r1, #0
 8058e86:	68f8      	ldr	r0, [r7, #12]
 8058e88:	f7ff fd60 	bl	805894c <xTimerGenericCommand>
 8058e8c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8058e8e:	687b      	ldr	r3, [r7, #4]
 8058e90:	2b00      	cmp	r3, #0
 8058e92:	d10a      	bne.n	8058eaa <prvSwitchTimerLists+0x9a>
	__asm volatile
 8058e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8058e98:	f383 8811 	msr	BASEPRI, r3
 8058e9c:	f3bf 8f6f 	isb	sy
 8058ea0:	f3bf 8f4f 	dsb	sy
 8058ea4:	603b      	str	r3, [r7, #0]
}
 8058ea6:	bf00      	nop
 8058ea8:	e7fe      	b.n	8058ea8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8058eaa:	4b09      	ldr	r3, [pc, #36]	; (8058ed0 <prvSwitchTimerLists+0xc0>)
 8058eac:	681b      	ldr	r3, [r3, #0]
 8058eae:	681b      	ldr	r3, [r3, #0]
 8058eb0:	2b00      	cmp	r3, #0
 8058eb2:	d1b1      	bne.n	8058e18 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8058eb4:	4b06      	ldr	r3, [pc, #24]	; (8058ed0 <prvSwitchTimerLists+0xc0>)
 8058eb6:	681b      	ldr	r3, [r3, #0]
 8058eb8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8058eba:	4b06      	ldr	r3, [pc, #24]	; (8058ed4 <prvSwitchTimerLists+0xc4>)
 8058ebc:	681b      	ldr	r3, [r3, #0]
 8058ebe:	4a04      	ldr	r2, [pc, #16]	; (8058ed0 <prvSwitchTimerLists+0xc0>)
 8058ec0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8058ec2:	4a04      	ldr	r2, [pc, #16]	; (8058ed4 <prvSwitchTimerLists+0xc4>)
 8058ec4:	697b      	ldr	r3, [r7, #20]
 8058ec6:	6013      	str	r3, [r2, #0]
}
 8058ec8:	bf00      	nop
 8058eca:	3718      	adds	r7, #24
 8058ecc:	46bd      	mov	sp, r7
 8058ece:	bd80      	pop	{r7, pc}
 8058ed0:	24002dc8 	.word	0x24002dc8
 8058ed4:	24002dcc 	.word	0x24002dcc

08058ed8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8058ed8:	b580      	push	{r7, lr}
 8058eda:	b082      	sub	sp, #8
 8058edc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8058ede:	f000 f969 	bl	80591b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8058ee2:	4b15      	ldr	r3, [pc, #84]	; (8058f38 <prvCheckForValidListAndQueue+0x60>)
 8058ee4:	681b      	ldr	r3, [r3, #0]
 8058ee6:	2b00      	cmp	r3, #0
 8058ee8:	d120      	bne.n	8058f2c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8058eea:	4814      	ldr	r0, [pc, #80]	; (8058f3c <prvCheckForValidListAndQueue+0x64>)
 8058eec:	f7fd faa8 	bl	8056440 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8058ef0:	4813      	ldr	r0, [pc, #76]	; (8058f40 <prvCheckForValidListAndQueue+0x68>)
 8058ef2:	f7fd faa5 	bl	8056440 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8058ef6:	4b13      	ldr	r3, [pc, #76]	; (8058f44 <prvCheckForValidListAndQueue+0x6c>)
 8058ef8:	4a10      	ldr	r2, [pc, #64]	; (8058f3c <prvCheckForValidListAndQueue+0x64>)
 8058efa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8058efc:	4b12      	ldr	r3, [pc, #72]	; (8058f48 <prvCheckForValidListAndQueue+0x70>)
 8058efe:	4a10      	ldr	r2, [pc, #64]	; (8058f40 <prvCheckForValidListAndQueue+0x68>)
 8058f00:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8058f02:	2300      	movs	r3, #0
 8058f04:	9300      	str	r3, [sp, #0]
 8058f06:	4b11      	ldr	r3, [pc, #68]	; (8058f4c <prvCheckForValidListAndQueue+0x74>)
 8058f08:	4a11      	ldr	r2, [pc, #68]	; (8058f50 <prvCheckForValidListAndQueue+0x78>)
 8058f0a:	2110      	movs	r1, #16
 8058f0c:	200a      	movs	r0, #10
 8058f0e:	f7fd fbb3 	bl	8056678 <xQueueGenericCreateStatic>
 8058f12:	4603      	mov	r3, r0
 8058f14:	4a08      	ldr	r2, [pc, #32]	; (8058f38 <prvCheckForValidListAndQueue+0x60>)
 8058f16:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8058f18:	4b07      	ldr	r3, [pc, #28]	; (8058f38 <prvCheckForValidListAndQueue+0x60>)
 8058f1a:	681b      	ldr	r3, [r3, #0]
 8058f1c:	2b00      	cmp	r3, #0
 8058f1e:	d005      	beq.n	8058f2c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8058f20:	4b05      	ldr	r3, [pc, #20]	; (8058f38 <prvCheckForValidListAndQueue+0x60>)
 8058f22:	681b      	ldr	r3, [r3, #0]
 8058f24:	490b      	ldr	r1, [pc, #44]	; (8058f54 <prvCheckForValidListAndQueue+0x7c>)
 8058f26:	4618      	mov	r0, r3
 8058f28:	f7fe faa2 	bl	8057470 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8058f2c:	f000 f972 	bl	8059214 <vPortExitCritical>
}
 8058f30:	bf00      	nop
 8058f32:	46bd      	mov	sp, r7
 8058f34:	bd80      	pop	{r7, pc}
 8058f36:	bf00      	nop
 8058f38:	24002dd0 	.word	0x24002dd0
 8058f3c:	24002da0 	.word	0x24002da0
 8058f40:	24002db4 	.word	0x24002db4
 8058f44:	24002dc8 	.word	0x24002dc8
 8058f48:	24002dcc 	.word	0x24002dcc
 8058f4c:	24002e7c 	.word	0x24002e7c
 8058f50:	24002ddc 	.word	0x24002ddc
 8058f54:	0805b904 	.word	0x0805b904

08058f58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8058f58:	b480      	push	{r7}
 8058f5a:	b085      	sub	sp, #20
 8058f5c:	af00      	add	r7, sp, #0
 8058f5e:	60f8      	str	r0, [r7, #12]
 8058f60:	60b9      	str	r1, [r7, #8]
 8058f62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8058f64:	68fb      	ldr	r3, [r7, #12]
 8058f66:	3b04      	subs	r3, #4
 8058f68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8058f6a:	68fb      	ldr	r3, [r7, #12]
 8058f6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8058f70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8058f72:	68fb      	ldr	r3, [r7, #12]
 8058f74:	3b04      	subs	r3, #4
 8058f76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8058f78:	68bb      	ldr	r3, [r7, #8]
 8058f7a:	f023 0201 	bic.w	r2, r3, #1
 8058f7e:	68fb      	ldr	r3, [r7, #12]
 8058f80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8058f82:	68fb      	ldr	r3, [r7, #12]
 8058f84:	3b04      	subs	r3, #4
 8058f86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8058f88:	4a0c      	ldr	r2, [pc, #48]	; (8058fbc <pxPortInitialiseStack+0x64>)
 8058f8a:	68fb      	ldr	r3, [r7, #12]
 8058f8c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8058f8e:	68fb      	ldr	r3, [r7, #12]
 8058f90:	3b14      	subs	r3, #20
 8058f92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8058f94:	687a      	ldr	r2, [r7, #4]
 8058f96:	68fb      	ldr	r3, [r7, #12]
 8058f98:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8058f9a:	68fb      	ldr	r3, [r7, #12]
 8058f9c:	3b04      	subs	r3, #4
 8058f9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8058fa0:	68fb      	ldr	r3, [r7, #12]
 8058fa2:	f06f 0202 	mvn.w	r2, #2
 8058fa6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8058fa8:	68fb      	ldr	r3, [r7, #12]
 8058faa:	3b20      	subs	r3, #32
 8058fac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8058fae:	68fb      	ldr	r3, [r7, #12]
}
 8058fb0:	4618      	mov	r0, r3
 8058fb2:	3714      	adds	r7, #20
 8058fb4:	46bd      	mov	sp, r7
 8058fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8058fba:	4770      	bx	lr
 8058fbc:	08058fc1 	.word	0x08058fc1

08058fc0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8058fc0:	b480      	push	{r7}
 8058fc2:	b085      	sub	sp, #20
 8058fc4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8058fc6:	2300      	movs	r3, #0
 8058fc8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8058fca:	4b12      	ldr	r3, [pc, #72]	; (8059014 <prvTaskExitError+0x54>)
 8058fcc:	681b      	ldr	r3, [r3, #0]
 8058fce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8058fd2:	d00a      	beq.n	8058fea <prvTaskExitError+0x2a>
	__asm volatile
 8058fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8058fd8:	f383 8811 	msr	BASEPRI, r3
 8058fdc:	f3bf 8f6f 	isb	sy
 8058fe0:	f3bf 8f4f 	dsb	sy
 8058fe4:	60fb      	str	r3, [r7, #12]
}
 8058fe6:	bf00      	nop
 8058fe8:	e7fe      	b.n	8058fe8 <prvTaskExitError+0x28>
	__asm volatile
 8058fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8058fee:	f383 8811 	msr	BASEPRI, r3
 8058ff2:	f3bf 8f6f 	isb	sy
 8058ff6:	f3bf 8f4f 	dsb	sy
 8058ffa:	60bb      	str	r3, [r7, #8]
}
 8058ffc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8058ffe:	bf00      	nop
 8059000:	687b      	ldr	r3, [r7, #4]
 8059002:	2b00      	cmp	r3, #0
 8059004:	d0fc      	beq.n	8059000 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8059006:	bf00      	nop
 8059008:	bf00      	nop
 805900a:	3714      	adds	r7, #20
 805900c:	46bd      	mov	sp, r7
 805900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8059012:	4770      	bx	lr
 8059014:	24000030 	.word	0x24000030
	...

08059020 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8059020:	4b07      	ldr	r3, [pc, #28]	; (8059040 <pxCurrentTCBConst2>)
 8059022:	6819      	ldr	r1, [r3, #0]
 8059024:	6808      	ldr	r0, [r1, #0]
 8059026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 805902a:	f380 8809 	msr	PSP, r0
 805902e:	f3bf 8f6f 	isb	sy
 8059032:	f04f 0000 	mov.w	r0, #0
 8059036:	f380 8811 	msr	BASEPRI, r0
 805903a:	4770      	bx	lr
 805903c:	f3af 8000 	nop.w

08059040 <pxCurrentTCBConst2>:
 8059040:	24002c74 	.word	0x24002c74
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8059044:	bf00      	nop
 8059046:	bf00      	nop

08059048 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8059048:	4808      	ldr	r0, [pc, #32]	; (805906c <prvPortStartFirstTask+0x24>)
 805904a:	6800      	ldr	r0, [r0, #0]
 805904c:	6800      	ldr	r0, [r0, #0]
 805904e:	f380 8808 	msr	MSP, r0
 8059052:	f04f 0000 	mov.w	r0, #0
 8059056:	f380 8814 	msr	CONTROL, r0
 805905a:	b662      	cpsie	i
 805905c:	b661      	cpsie	f
 805905e:	f3bf 8f4f 	dsb	sy
 8059062:	f3bf 8f6f 	isb	sy
 8059066:	df00      	svc	0
 8059068:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 805906a:	bf00      	nop
 805906c:	e000ed08 	.word	0xe000ed08

08059070 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8059070:	b580      	push	{r7, lr}
 8059072:	b086      	sub	sp, #24
 8059074:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8059076:	4b46      	ldr	r3, [pc, #280]	; (8059190 <xPortStartScheduler+0x120>)
 8059078:	681b      	ldr	r3, [r3, #0]
 805907a:	4a46      	ldr	r2, [pc, #280]	; (8059194 <xPortStartScheduler+0x124>)
 805907c:	4293      	cmp	r3, r2
 805907e:	d10a      	bne.n	8059096 <xPortStartScheduler+0x26>
	__asm volatile
 8059080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8059084:	f383 8811 	msr	BASEPRI, r3
 8059088:	f3bf 8f6f 	isb	sy
 805908c:	f3bf 8f4f 	dsb	sy
 8059090:	613b      	str	r3, [r7, #16]
}
 8059092:	bf00      	nop
 8059094:	e7fe      	b.n	8059094 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8059096:	4b3e      	ldr	r3, [pc, #248]	; (8059190 <xPortStartScheduler+0x120>)
 8059098:	681b      	ldr	r3, [r3, #0]
 805909a:	4a3f      	ldr	r2, [pc, #252]	; (8059198 <xPortStartScheduler+0x128>)
 805909c:	4293      	cmp	r3, r2
 805909e:	d10a      	bne.n	80590b6 <xPortStartScheduler+0x46>
	__asm volatile
 80590a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80590a4:	f383 8811 	msr	BASEPRI, r3
 80590a8:	f3bf 8f6f 	isb	sy
 80590ac:	f3bf 8f4f 	dsb	sy
 80590b0:	60fb      	str	r3, [r7, #12]
}
 80590b2:	bf00      	nop
 80590b4:	e7fe      	b.n	80590b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80590b6:	4b39      	ldr	r3, [pc, #228]	; (805919c <xPortStartScheduler+0x12c>)
 80590b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80590ba:	697b      	ldr	r3, [r7, #20]
 80590bc:	781b      	ldrb	r3, [r3, #0]
 80590be:	b2db      	uxtb	r3, r3
 80590c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80590c2:	697b      	ldr	r3, [r7, #20]
 80590c4:	22ff      	movs	r2, #255	; 0xff
 80590c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80590c8:	697b      	ldr	r3, [r7, #20]
 80590ca:	781b      	ldrb	r3, [r3, #0]
 80590cc:	b2db      	uxtb	r3, r3
 80590ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80590d0:	78fb      	ldrb	r3, [r7, #3]
 80590d2:	b2db      	uxtb	r3, r3
 80590d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80590d8:	b2da      	uxtb	r2, r3
 80590da:	4b31      	ldr	r3, [pc, #196]	; (80591a0 <xPortStartScheduler+0x130>)
 80590dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80590de:	4b31      	ldr	r3, [pc, #196]	; (80591a4 <xPortStartScheduler+0x134>)
 80590e0:	2207      	movs	r2, #7
 80590e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80590e4:	e009      	b.n	80590fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80590e6:	4b2f      	ldr	r3, [pc, #188]	; (80591a4 <xPortStartScheduler+0x134>)
 80590e8:	681b      	ldr	r3, [r3, #0]
 80590ea:	3b01      	subs	r3, #1
 80590ec:	4a2d      	ldr	r2, [pc, #180]	; (80591a4 <xPortStartScheduler+0x134>)
 80590ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80590f0:	78fb      	ldrb	r3, [r7, #3]
 80590f2:	b2db      	uxtb	r3, r3
 80590f4:	005b      	lsls	r3, r3, #1
 80590f6:	b2db      	uxtb	r3, r3
 80590f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80590fa:	78fb      	ldrb	r3, [r7, #3]
 80590fc:	b2db      	uxtb	r3, r3
 80590fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8059102:	2b80      	cmp	r3, #128	; 0x80
 8059104:	d0ef      	beq.n	80590e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8059106:	4b27      	ldr	r3, [pc, #156]	; (80591a4 <xPortStartScheduler+0x134>)
 8059108:	681b      	ldr	r3, [r3, #0]
 805910a:	f1c3 0307 	rsb	r3, r3, #7
 805910e:	2b04      	cmp	r3, #4
 8059110:	d00a      	beq.n	8059128 <xPortStartScheduler+0xb8>
	__asm volatile
 8059112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8059116:	f383 8811 	msr	BASEPRI, r3
 805911a:	f3bf 8f6f 	isb	sy
 805911e:	f3bf 8f4f 	dsb	sy
 8059122:	60bb      	str	r3, [r7, #8]
}
 8059124:	bf00      	nop
 8059126:	e7fe      	b.n	8059126 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8059128:	4b1e      	ldr	r3, [pc, #120]	; (80591a4 <xPortStartScheduler+0x134>)
 805912a:	681b      	ldr	r3, [r3, #0]
 805912c:	021b      	lsls	r3, r3, #8
 805912e:	4a1d      	ldr	r2, [pc, #116]	; (80591a4 <xPortStartScheduler+0x134>)
 8059130:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8059132:	4b1c      	ldr	r3, [pc, #112]	; (80591a4 <xPortStartScheduler+0x134>)
 8059134:	681b      	ldr	r3, [r3, #0]
 8059136:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 805913a:	4a1a      	ldr	r2, [pc, #104]	; (80591a4 <xPortStartScheduler+0x134>)
 805913c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 805913e:	687b      	ldr	r3, [r7, #4]
 8059140:	b2da      	uxtb	r2, r3
 8059142:	697b      	ldr	r3, [r7, #20]
 8059144:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8059146:	4b18      	ldr	r3, [pc, #96]	; (80591a8 <xPortStartScheduler+0x138>)
 8059148:	681b      	ldr	r3, [r3, #0]
 805914a:	4a17      	ldr	r2, [pc, #92]	; (80591a8 <xPortStartScheduler+0x138>)
 805914c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8059150:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8059152:	4b15      	ldr	r3, [pc, #84]	; (80591a8 <xPortStartScheduler+0x138>)
 8059154:	681b      	ldr	r3, [r3, #0]
 8059156:	4a14      	ldr	r2, [pc, #80]	; (80591a8 <xPortStartScheduler+0x138>)
 8059158:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 805915c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 805915e:	f000 f8dd 	bl	805931c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8059162:	4b12      	ldr	r3, [pc, #72]	; (80591ac <xPortStartScheduler+0x13c>)
 8059164:	2200      	movs	r2, #0
 8059166:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8059168:	f000 f8fc 	bl	8059364 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 805916c:	4b10      	ldr	r3, [pc, #64]	; (80591b0 <xPortStartScheduler+0x140>)
 805916e:	681b      	ldr	r3, [r3, #0]
 8059170:	4a0f      	ldr	r2, [pc, #60]	; (80591b0 <xPortStartScheduler+0x140>)
 8059172:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8059176:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8059178:	f7ff ff66 	bl	8059048 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 805917c:	f7fe fda0 	bl	8057cc0 <vTaskSwitchContext>
	prvTaskExitError();
 8059180:	f7ff ff1e 	bl	8058fc0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8059184:	2300      	movs	r3, #0
}
 8059186:	4618      	mov	r0, r3
 8059188:	3718      	adds	r7, #24
 805918a:	46bd      	mov	sp, r7
 805918c:	bd80      	pop	{r7, pc}
 805918e:	bf00      	nop
 8059190:	e000ed00 	.word	0xe000ed00
 8059194:	410fc271 	.word	0x410fc271
 8059198:	410fc270 	.word	0x410fc270
 805919c:	e000e400 	.word	0xe000e400
 80591a0:	24002ec4 	.word	0x24002ec4
 80591a4:	24002ec8 	.word	0x24002ec8
 80591a8:	e000ed20 	.word	0xe000ed20
 80591ac:	24000030 	.word	0x24000030
 80591b0:	e000ef34 	.word	0xe000ef34

080591b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80591b4:	b480      	push	{r7}
 80591b6:	b083      	sub	sp, #12
 80591b8:	af00      	add	r7, sp, #0
	__asm volatile
 80591ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80591be:	f383 8811 	msr	BASEPRI, r3
 80591c2:	f3bf 8f6f 	isb	sy
 80591c6:	f3bf 8f4f 	dsb	sy
 80591ca:	607b      	str	r3, [r7, #4]
}
 80591cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80591ce:	4b0f      	ldr	r3, [pc, #60]	; (805920c <vPortEnterCritical+0x58>)
 80591d0:	681b      	ldr	r3, [r3, #0]
 80591d2:	3301      	adds	r3, #1
 80591d4:	4a0d      	ldr	r2, [pc, #52]	; (805920c <vPortEnterCritical+0x58>)
 80591d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80591d8:	4b0c      	ldr	r3, [pc, #48]	; (805920c <vPortEnterCritical+0x58>)
 80591da:	681b      	ldr	r3, [r3, #0]
 80591dc:	2b01      	cmp	r3, #1
 80591de:	d10f      	bne.n	8059200 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80591e0:	4b0b      	ldr	r3, [pc, #44]	; (8059210 <vPortEnterCritical+0x5c>)
 80591e2:	681b      	ldr	r3, [r3, #0]
 80591e4:	b2db      	uxtb	r3, r3
 80591e6:	2b00      	cmp	r3, #0
 80591e8:	d00a      	beq.n	8059200 <vPortEnterCritical+0x4c>
	__asm volatile
 80591ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80591ee:	f383 8811 	msr	BASEPRI, r3
 80591f2:	f3bf 8f6f 	isb	sy
 80591f6:	f3bf 8f4f 	dsb	sy
 80591fa:	603b      	str	r3, [r7, #0]
}
 80591fc:	bf00      	nop
 80591fe:	e7fe      	b.n	80591fe <vPortEnterCritical+0x4a>
	}
}
 8059200:	bf00      	nop
 8059202:	370c      	adds	r7, #12
 8059204:	46bd      	mov	sp, r7
 8059206:	f85d 7b04 	ldr.w	r7, [sp], #4
 805920a:	4770      	bx	lr
 805920c:	24000030 	.word	0x24000030
 8059210:	e000ed04 	.word	0xe000ed04

08059214 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8059214:	b480      	push	{r7}
 8059216:	b083      	sub	sp, #12
 8059218:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 805921a:	4b12      	ldr	r3, [pc, #72]	; (8059264 <vPortExitCritical+0x50>)
 805921c:	681b      	ldr	r3, [r3, #0]
 805921e:	2b00      	cmp	r3, #0
 8059220:	d10a      	bne.n	8059238 <vPortExitCritical+0x24>
	__asm volatile
 8059222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8059226:	f383 8811 	msr	BASEPRI, r3
 805922a:	f3bf 8f6f 	isb	sy
 805922e:	f3bf 8f4f 	dsb	sy
 8059232:	607b      	str	r3, [r7, #4]
}
 8059234:	bf00      	nop
 8059236:	e7fe      	b.n	8059236 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8059238:	4b0a      	ldr	r3, [pc, #40]	; (8059264 <vPortExitCritical+0x50>)
 805923a:	681b      	ldr	r3, [r3, #0]
 805923c:	3b01      	subs	r3, #1
 805923e:	4a09      	ldr	r2, [pc, #36]	; (8059264 <vPortExitCritical+0x50>)
 8059240:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8059242:	4b08      	ldr	r3, [pc, #32]	; (8059264 <vPortExitCritical+0x50>)
 8059244:	681b      	ldr	r3, [r3, #0]
 8059246:	2b00      	cmp	r3, #0
 8059248:	d105      	bne.n	8059256 <vPortExitCritical+0x42>
 805924a:	2300      	movs	r3, #0
 805924c:	603b      	str	r3, [r7, #0]
	__asm volatile
 805924e:	683b      	ldr	r3, [r7, #0]
 8059250:	f383 8811 	msr	BASEPRI, r3
}
 8059254:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8059256:	bf00      	nop
 8059258:	370c      	adds	r7, #12
 805925a:	46bd      	mov	sp, r7
 805925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8059260:	4770      	bx	lr
 8059262:	bf00      	nop
 8059264:	24000030 	.word	0x24000030
	...

08059270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8059270:	f3ef 8009 	mrs	r0, PSP
 8059274:	f3bf 8f6f 	isb	sy
 8059278:	4b15      	ldr	r3, [pc, #84]	; (80592d0 <pxCurrentTCBConst>)
 805927a:	681a      	ldr	r2, [r3, #0]
 805927c:	f01e 0f10 	tst.w	lr, #16
 8059280:	bf08      	it	eq
 8059282:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8059286:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 805928a:	6010      	str	r0, [r2, #0]
 805928c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8059290:	f04f 0050 	mov.w	r0, #80	; 0x50
 8059294:	f380 8811 	msr	BASEPRI, r0
 8059298:	f3bf 8f4f 	dsb	sy
 805929c:	f3bf 8f6f 	isb	sy
 80592a0:	f7fe fd0e 	bl	8057cc0 <vTaskSwitchContext>
 80592a4:	f04f 0000 	mov.w	r0, #0
 80592a8:	f380 8811 	msr	BASEPRI, r0
 80592ac:	bc09      	pop	{r0, r3}
 80592ae:	6819      	ldr	r1, [r3, #0]
 80592b0:	6808      	ldr	r0, [r1, #0]
 80592b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80592b6:	f01e 0f10 	tst.w	lr, #16
 80592ba:	bf08      	it	eq
 80592bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80592c0:	f380 8809 	msr	PSP, r0
 80592c4:	f3bf 8f6f 	isb	sy
 80592c8:	4770      	bx	lr
 80592ca:	bf00      	nop
 80592cc:	f3af 8000 	nop.w

080592d0 <pxCurrentTCBConst>:
 80592d0:	24002c74 	.word	0x24002c74
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80592d4:	bf00      	nop
 80592d6:	bf00      	nop

080592d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80592d8:	b580      	push	{r7, lr}
 80592da:	b082      	sub	sp, #8
 80592dc:	af00      	add	r7, sp, #0
	__asm volatile
 80592de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80592e2:	f383 8811 	msr	BASEPRI, r3
 80592e6:	f3bf 8f6f 	isb	sy
 80592ea:	f3bf 8f4f 	dsb	sy
 80592ee:	607b      	str	r3, [r7, #4]
}
 80592f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80592f2:	f7fe fc2d 	bl	8057b50 <xTaskIncrementTick>
 80592f6:	4603      	mov	r3, r0
 80592f8:	2b00      	cmp	r3, #0
 80592fa:	d003      	beq.n	8059304 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80592fc:	4b06      	ldr	r3, [pc, #24]	; (8059318 <SysTick_Handler+0x40>)
 80592fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8059302:	601a      	str	r2, [r3, #0]
 8059304:	2300      	movs	r3, #0
 8059306:	603b      	str	r3, [r7, #0]
	__asm volatile
 8059308:	683b      	ldr	r3, [r7, #0]
 805930a:	f383 8811 	msr	BASEPRI, r3
}
 805930e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8059310:	bf00      	nop
 8059312:	3708      	adds	r7, #8
 8059314:	46bd      	mov	sp, r7
 8059316:	bd80      	pop	{r7, pc}
 8059318:	e000ed04 	.word	0xe000ed04

0805931c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 805931c:	b480      	push	{r7}
 805931e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8059320:	4b0b      	ldr	r3, [pc, #44]	; (8059350 <vPortSetupTimerInterrupt+0x34>)
 8059322:	2200      	movs	r2, #0
 8059324:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8059326:	4b0b      	ldr	r3, [pc, #44]	; (8059354 <vPortSetupTimerInterrupt+0x38>)
 8059328:	2200      	movs	r2, #0
 805932a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 805932c:	4b0a      	ldr	r3, [pc, #40]	; (8059358 <vPortSetupTimerInterrupt+0x3c>)
 805932e:	681b      	ldr	r3, [r3, #0]
 8059330:	4a0a      	ldr	r2, [pc, #40]	; (805935c <vPortSetupTimerInterrupt+0x40>)
 8059332:	fba2 2303 	umull	r2, r3, r2, r3
 8059336:	099b      	lsrs	r3, r3, #6
 8059338:	4a09      	ldr	r2, [pc, #36]	; (8059360 <vPortSetupTimerInterrupt+0x44>)
 805933a:	3b01      	subs	r3, #1
 805933c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 805933e:	4b04      	ldr	r3, [pc, #16]	; (8059350 <vPortSetupTimerInterrupt+0x34>)
 8059340:	2207      	movs	r2, #7
 8059342:	601a      	str	r2, [r3, #0]
}
 8059344:	bf00      	nop
 8059346:	46bd      	mov	sp, r7
 8059348:	f85d 7b04 	ldr.w	r7, [sp], #4
 805934c:	4770      	bx	lr
 805934e:	bf00      	nop
 8059350:	e000e010 	.word	0xe000e010
 8059354:	e000e018 	.word	0xe000e018
 8059358:	24000000 	.word	0x24000000
 805935c:	10624dd3 	.word	0x10624dd3
 8059360:	e000e014 	.word	0xe000e014

08059364 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8059364:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8059374 <vPortEnableVFP+0x10>
 8059368:	6801      	ldr	r1, [r0, #0]
 805936a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 805936e:	6001      	str	r1, [r0, #0]
 8059370:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8059372:	bf00      	nop
 8059374:	e000ed88 	.word	0xe000ed88

08059378 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8059378:	b480      	push	{r7}
 805937a:	b085      	sub	sp, #20
 805937c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 805937e:	f3ef 8305 	mrs	r3, IPSR
 8059382:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8059384:	68fb      	ldr	r3, [r7, #12]
 8059386:	2b0f      	cmp	r3, #15
 8059388:	d914      	bls.n	80593b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 805938a:	4a17      	ldr	r2, [pc, #92]	; (80593e8 <vPortValidateInterruptPriority+0x70>)
 805938c:	68fb      	ldr	r3, [r7, #12]
 805938e:	4413      	add	r3, r2
 8059390:	781b      	ldrb	r3, [r3, #0]
 8059392:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8059394:	4b15      	ldr	r3, [pc, #84]	; (80593ec <vPortValidateInterruptPriority+0x74>)
 8059396:	781b      	ldrb	r3, [r3, #0]
 8059398:	7afa      	ldrb	r2, [r7, #11]
 805939a:	429a      	cmp	r2, r3
 805939c:	d20a      	bcs.n	80593b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 805939e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80593a2:	f383 8811 	msr	BASEPRI, r3
 80593a6:	f3bf 8f6f 	isb	sy
 80593aa:	f3bf 8f4f 	dsb	sy
 80593ae:	607b      	str	r3, [r7, #4]
}
 80593b0:	bf00      	nop
 80593b2:	e7fe      	b.n	80593b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80593b4:	4b0e      	ldr	r3, [pc, #56]	; (80593f0 <vPortValidateInterruptPriority+0x78>)
 80593b6:	681b      	ldr	r3, [r3, #0]
 80593b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80593bc:	4b0d      	ldr	r3, [pc, #52]	; (80593f4 <vPortValidateInterruptPriority+0x7c>)
 80593be:	681b      	ldr	r3, [r3, #0]
 80593c0:	429a      	cmp	r2, r3
 80593c2:	d90a      	bls.n	80593da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80593c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80593c8:	f383 8811 	msr	BASEPRI, r3
 80593cc:	f3bf 8f6f 	isb	sy
 80593d0:	f3bf 8f4f 	dsb	sy
 80593d4:	603b      	str	r3, [r7, #0]
}
 80593d6:	bf00      	nop
 80593d8:	e7fe      	b.n	80593d8 <vPortValidateInterruptPriority+0x60>
	}
 80593da:	bf00      	nop
 80593dc:	3714      	adds	r7, #20
 80593de:	46bd      	mov	sp, r7
 80593e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80593e4:	4770      	bx	lr
 80593e6:	bf00      	nop
 80593e8:	e000e3f0 	.word	0xe000e3f0
 80593ec:	24002ec4 	.word	0x24002ec4
 80593f0:	e000ed0c 	.word	0xe000ed0c
 80593f4:	24002ec8 	.word	0x24002ec8

080593f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80593f8:	b580      	push	{r7, lr}
 80593fa:	b08a      	sub	sp, #40	; 0x28
 80593fc:	af00      	add	r7, sp, #0
 80593fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8059400:	2300      	movs	r3, #0
 8059402:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8059404:	f7fe faea 	bl	80579dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8059408:	4b5b      	ldr	r3, [pc, #364]	; (8059578 <pvPortMalloc+0x180>)
 805940a:	681b      	ldr	r3, [r3, #0]
 805940c:	2b00      	cmp	r3, #0
 805940e:	d101      	bne.n	8059414 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8059410:	f000 f920 	bl	8059654 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8059414:	4b59      	ldr	r3, [pc, #356]	; (805957c <pvPortMalloc+0x184>)
 8059416:	681a      	ldr	r2, [r3, #0]
 8059418:	687b      	ldr	r3, [r7, #4]
 805941a:	4013      	ands	r3, r2
 805941c:	2b00      	cmp	r3, #0
 805941e:	f040 8093 	bne.w	8059548 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8059422:	687b      	ldr	r3, [r7, #4]
 8059424:	2b00      	cmp	r3, #0
 8059426:	d01d      	beq.n	8059464 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8059428:	2208      	movs	r2, #8
 805942a:	687b      	ldr	r3, [r7, #4]
 805942c:	4413      	add	r3, r2
 805942e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8059430:	687b      	ldr	r3, [r7, #4]
 8059432:	f003 0307 	and.w	r3, r3, #7
 8059436:	2b00      	cmp	r3, #0
 8059438:	d014      	beq.n	8059464 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 805943a:	687b      	ldr	r3, [r7, #4]
 805943c:	f023 0307 	bic.w	r3, r3, #7
 8059440:	3308      	adds	r3, #8
 8059442:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8059444:	687b      	ldr	r3, [r7, #4]
 8059446:	f003 0307 	and.w	r3, r3, #7
 805944a:	2b00      	cmp	r3, #0
 805944c:	d00a      	beq.n	8059464 <pvPortMalloc+0x6c>
	__asm volatile
 805944e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8059452:	f383 8811 	msr	BASEPRI, r3
 8059456:	f3bf 8f6f 	isb	sy
 805945a:	f3bf 8f4f 	dsb	sy
 805945e:	617b      	str	r3, [r7, #20]
}
 8059460:	bf00      	nop
 8059462:	e7fe      	b.n	8059462 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8059464:	687b      	ldr	r3, [r7, #4]
 8059466:	2b00      	cmp	r3, #0
 8059468:	d06e      	beq.n	8059548 <pvPortMalloc+0x150>
 805946a:	4b45      	ldr	r3, [pc, #276]	; (8059580 <pvPortMalloc+0x188>)
 805946c:	681b      	ldr	r3, [r3, #0]
 805946e:	687a      	ldr	r2, [r7, #4]
 8059470:	429a      	cmp	r2, r3
 8059472:	d869      	bhi.n	8059548 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8059474:	4b43      	ldr	r3, [pc, #268]	; (8059584 <pvPortMalloc+0x18c>)
 8059476:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8059478:	4b42      	ldr	r3, [pc, #264]	; (8059584 <pvPortMalloc+0x18c>)
 805947a:	681b      	ldr	r3, [r3, #0]
 805947c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 805947e:	e004      	b.n	805948a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8059480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8059482:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8059484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8059486:	681b      	ldr	r3, [r3, #0]
 8059488:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 805948a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805948c:	685b      	ldr	r3, [r3, #4]
 805948e:	687a      	ldr	r2, [r7, #4]
 8059490:	429a      	cmp	r2, r3
 8059492:	d903      	bls.n	805949c <pvPortMalloc+0xa4>
 8059494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8059496:	681b      	ldr	r3, [r3, #0]
 8059498:	2b00      	cmp	r3, #0
 805949a:	d1f1      	bne.n	8059480 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 805949c:	4b36      	ldr	r3, [pc, #216]	; (8059578 <pvPortMalloc+0x180>)
 805949e:	681b      	ldr	r3, [r3, #0]
 80594a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80594a2:	429a      	cmp	r2, r3
 80594a4:	d050      	beq.n	8059548 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80594a6:	6a3b      	ldr	r3, [r7, #32]
 80594a8:	681b      	ldr	r3, [r3, #0]
 80594aa:	2208      	movs	r2, #8
 80594ac:	4413      	add	r3, r2
 80594ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80594b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80594b2:	681a      	ldr	r2, [r3, #0]
 80594b4:	6a3b      	ldr	r3, [r7, #32]
 80594b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80594b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80594ba:	685a      	ldr	r2, [r3, #4]
 80594bc:	687b      	ldr	r3, [r7, #4]
 80594be:	1ad2      	subs	r2, r2, r3
 80594c0:	2308      	movs	r3, #8
 80594c2:	005b      	lsls	r3, r3, #1
 80594c4:	429a      	cmp	r2, r3
 80594c6:	d91f      	bls.n	8059508 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80594c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80594ca:	687b      	ldr	r3, [r7, #4]
 80594cc:	4413      	add	r3, r2
 80594ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80594d0:	69bb      	ldr	r3, [r7, #24]
 80594d2:	f003 0307 	and.w	r3, r3, #7
 80594d6:	2b00      	cmp	r3, #0
 80594d8:	d00a      	beq.n	80594f0 <pvPortMalloc+0xf8>
	__asm volatile
 80594da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80594de:	f383 8811 	msr	BASEPRI, r3
 80594e2:	f3bf 8f6f 	isb	sy
 80594e6:	f3bf 8f4f 	dsb	sy
 80594ea:	613b      	str	r3, [r7, #16]
}
 80594ec:	bf00      	nop
 80594ee:	e7fe      	b.n	80594ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80594f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80594f2:	685a      	ldr	r2, [r3, #4]
 80594f4:	687b      	ldr	r3, [r7, #4]
 80594f6:	1ad2      	subs	r2, r2, r3
 80594f8:	69bb      	ldr	r3, [r7, #24]
 80594fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80594fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80594fe:	687a      	ldr	r2, [r7, #4]
 8059500:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8059502:	69b8      	ldr	r0, [r7, #24]
 8059504:	f000 f908 	bl	8059718 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8059508:	4b1d      	ldr	r3, [pc, #116]	; (8059580 <pvPortMalloc+0x188>)
 805950a:	681a      	ldr	r2, [r3, #0]
 805950c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805950e:	685b      	ldr	r3, [r3, #4]
 8059510:	1ad3      	subs	r3, r2, r3
 8059512:	4a1b      	ldr	r2, [pc, #108]	; (8059580 <pvPortMalloc+0x188>)
 8059514:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8059516:	4b1a      	ldr	r3, [pc, #104]	; (8059580 <pvPortMalloc+0x188>)
 8059518:	681a      	ldr	r2, [r3, #0]
 805951a:	4b1b      	ldr	r3, [pc, #108]	; (8059588 <pvPortMalloc+0x190>)
 805951c:	681b      	ldr	r3, [r3, #0]
 805951e:	429a      	cmp	r2, r3
 8059520:	d203      	bcs.n	805952a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8059522:	4b17      	ldr	r3, [pc, #92]	; (8059580 <pvPortMalloc+0x188>)
 8059524:	681b      	ldr	r3, [r3, #0]
 8059526:	4a18      	ldr	r2, [pc, #96]	; (8059588 <pvPortMalloc+0x190>)
 8059528:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 805952a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805952c:	685a      	ldr	r2, [r3, #4]
 805952e:	4b13      	ldr	r3, [pc, #76]	; (805957c <pvPortMalloc+0x184>)
 8059530:	681b      	ldr	r3, [r3, #0]
 8059532:	431a      	orrs	r2, r3
 8059534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8059536:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8059538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805953a:	2200      	movs	r2, #0
 805953c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 805953e:	4b13      	ldr	r3, [pc, #76]	; (805958c <pvPortMalloc+0x194>)
 8059540:	681b      	ldr	r3, [r3, #0]
 8059542:	3301      	adds	r3, #1
 8059544:	4a11      	ldr	r2, [pc, #68]	; (805958c <pvPortMalloc+0x194>)
 8059546:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8059548:	f7fe fa56 	bl	80579f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 805954c:	69fb      	ldr	r3, [r7, #28]
 805954e:	f003 0307 	and.w	r3, r3, #7
 8059552:	2b00      	cmp	r3, #0
 8059554:	d00a      	beq.n	805956c <pvPortMalloc+0x174>
	__asm volatile
 8059556:	f04f 0350 	mov.w	r3, #80	; 0x50
 805955a:	f383 8811 	msr	BASEPRI, r3
 805955e:	f3bf 8f6f 	isb	sy
 8059562:	f3bf 8f4f 	dsb	sy
 8059566:	60fb      	str	r3, [r7, #12]
}
 8059568:	bf00      	nop
 805956a:	e7fe      	b.n	805956a <pvPortMalloc+0x172>
	return pvReturn;
 805956c:	69fb      	ldr	r3, [r7, #28]
}
 805956e:	4618      	mov	r0, r3
 8059570:	3728      	adds	r7, #40	; 0x28
 8059572:	46bd      	mov	sp, r7
 8059574:	bd80      	pop	{r7, pc}
 8059576:	bf00      	nop
 8059578:	24006ad4 	.word	0x24006ad4
 805957c:	24006ae8 	.word	0x24006ae8
 8059580:	24006ad8 	.word	0x24006ad8
 8059584:	24006acc 	.word	0x24006acc
 8059588:	24006adc 	.word	0x24006adc
 805958c:	24006ae0 	.word	0x24006ae0

08059590 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8059590:	b580      	push	{r7, lr}
 8059592:	b086      	sub	sp, #24
 8059594:	af00      	add	r7, sp, #0
 8059596:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8059598:	687b      	ldr	r3, [r7, #4]
 805959a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 805959c:	687b      	ldr	r3, [r7, #4]
 805959e:	2b00      	cmp	r3, #0
 80595a0:	d04d      	beq.n	805963e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80595a2:	2308      	movs	r3, #8
 80595a4:	425b      	negs	r3, r3
 80595a6:	697a      	ldr	r2, [r7, #20]
 80595a8:	4413      	add	r3, r2
 80595aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80595ac:	697b      	ldr	r3, [r7, #20]
 80595ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80595b0:	693b      	ldr	r3, [r7, #16]
 80595b2:	685a      	ldr	r2, [r3, #4]
 80595b4:	4b24      	ldr	r3, [pc, #144]	; (8059648 <vPortFree+0xb8>)
 80595b6:	681b      	ldr	r3, [r3, #0]
 80595b8:	4013      	ands	r3, r2
 80595ba:	2b00      	cmp	r3, #0
 80595bc:	d10a      	bne.n	80595d4 <vPortFree+0x44>
	__asm volatile
 80595be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80595c2:	f383 8811 	msr	BASEPRI, r3
 80595c6:	f3bf 8f6f 	isb	sy
 80595ca:	f3bf 8f4f 	dsb	sy
 80595ce:	60fb      	str	r3, [r7, #12]
}
 80595d0:	bf00      	nop
 80595d2:	e7fe      	b.n	80595d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80595d4:	693b      	ldr	r3, [r7, #16]
 80595d6:	681b      	ldr	r3, [r3, #0]
 80595d8:	2b00      	cmp	r3, #0
 80595da:	d00a      	beq.n	80595f2 <vPortFree+0x62>
	__asm volatile
 80595dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80595e0:	f383 8811 	msr	BASEPRI, r3
 80595e4:	f3bf 8f6f 	isb	sy
 80595e8:	f3bf 8f4f 	dsb	sy
 80595ec:	60bb      	str	r3, [r7, #8]
}
 80595ee:	bf00      	nop
 80595f0:	e7fe      	b.n	80595f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80595f2:	693b      	ldr	r3, [r7, #16]
 80595f4:	685a      	ldr	r2, [r3, #4]
 80595f6:	4b14      	ldr	r3, [pc, #80]	; (8059648 <vPortFree+0xb8>)
 80595f8:	681b      	ldr	r3, [r3, #0]
 80595fa:	4013      	ands	r3, r2
 80595fc:	2b00      	cmp	r3, #0
 80595fe:	d01e      	beq.n	805963e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8059600:	693b      	ldr	r3, [r7, #16]
 8059602:	681b      	ldr	r3, [r3, #0]
 8059604:	2b00      	cmp	r3, #0
 8059606:	d11a      	bne.n	805963e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8059608:	693b      	ldr	r3, [r7, #16]
 805960a:	685a      	ldr	r2, [r3, #4]
 805960c:	4b0e      	ldr	r3, [pc, #56]	; (8059648 <vPortFree+0xb8>)
 805960e:	681b      	ldr	r3, [r3, #0]
 8059610:	43db      	mvns	r3, r3
 8059612:	401a      	ands	r2, r3
 8059614:	693b      	ldr	r3, [r7, #16]
 8059616:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8059618:	f7fe f9e0 	bl	80579dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 805961c:	693b      	ldr	r3, [r7, #16]
 805961e:	685a      	ldr	r2, [r3, #4]
 8059620:	4b0a      	ldr	r3, [pc, #40]	; (805964c <vPortFree+0xbc>)
 8059622:	681b      	ldr	r3, [r3, #0]
 8059624:	4413      	add	r3, r2
 8059626:	4a09      	ldr	r2, [pc, #36]	; (805964c <vPortFree+0xbc>)
 8059628:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 805962a:	6938      	ldr	r0, [r7, #16]
 805962c:	f000 f874 	bl	8059718 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8059630:	4b07      	ldr	r3, [pc, #28]	; (8059650 <vPortFree+0xc0>)
 8059632:	681b      	ldr	r3, [r3, #0]
 8059634:	3301      	adds	r3, #1
 8059636:	4a06      	ldr	r2, [pc, #24]	; (8059650 <vPortFree+0xc0>)
 8059638:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 805963a:	f7fe f9dd 	bl	80579f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 805963e:	bf00      	nop
 8059640:	3718      	adds	r7, #24
 8059642:	46bd      	mov	sp, r7
 8059644:	bd80      	pop	{r7, pc}
 8059646:	bf00      	nop
 8059648:	24006ae8 	.word	0x24006ae8
 805964c:	24006ad8 	.word	0x24006ad8
 8059650:	24006ae4 	.word	0x24006ae4

08059654 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8059654:	b480      	push	{r7}
 8059656:	b085      	sub	sp, #20
 8059658:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 805965a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 805965e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8059660:	4b27      	ldr	r3, [pc, #156]	; (8059700 <prvHeapInit+0xac>)
 8059662:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8059664:	68fb      	ldr	r3, [r7, #12]
 8059666:	f003 0307 	and.w	r3, r3, #7
 805966a:	2b00      	cmp	r3, #0
 805966c:	d00c      	beq.n	8059688 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 805966e:	68fb      	ldr	r3, [r7, #12]
 8059670:	3307      	adds	r3, #7
 8059672:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8059674:	68fb      	ldr	r3, [r7, #12]
 8059676:	f023 0307 	bic.w	r3, r3, #7
 805967a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 805967c:	68ba      	ldr	r2, [r7, #8]
 805967e:	68fb      	ldr	r3, [r7, #12]
 8059680:	1ad3      	subs	r3, r2, r3
 8059682:	4a1f      	ldr	r2, [pc, #124]	; (8059700 <prvHeapInit+0xac>)
 8059684:	4413      	add	r3, r2
 8059686:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8059688:	68fb      	ldr	r3, [r7, #12]
 805968a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 805968c:	4a1d      	ldr	r2, [pc, #116]	; (8059704 <prvHeapInit+0xb0>)
 805968e:	687b      	ldr	r3, [r7, #4]
 8059690:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8059692:	4b1c      	ldr	r3, [pc, #112]	; (8059704 <prvHeapInit+0xb0>)
 8059694:	2200      	movs	r2, #0
 8059696:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8059698:	687b      	ldr	r3, [r7, #4]
 805969a:	68ba      	ldr	r2, [r7, #8]
 805969c:	4413      	add	r3, r2
 805969e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80596a0:	2208      	movs	r2, #8
 80596a2:	68fb      	ldr	r3, [r7, #12]
 80596a4:	1a9b      	subs	r3, r3, r2
 80596a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80596a8:	68fb      	ldr	r3, [r7, #12]
 80596aa:	f023 0307 	bic.w	r3, r3, #7
 80596ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80596b0:	68fb      	ldr	r3, [r7, #12]
 80596b2:	4a15      	ldr	r2, [pc, #84]	; (8059708 <prvHeapInit+0xb4>)
 80596b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80596b6:	4b14      	ldr	r3, [pc, #80]	; (8059708 <prvHeapInit+0xb4>)
 80596b8:	681b      	ldr	r3, [r3, #0]
 80596ba:	2200      	movs	r2, #0
 80596bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80596be:	4b12      	ldr	r3, [pc, #72]	; (8059708 <prvHeapInit+0xb4>)
 80596c0:	681b      	ldr	r3, [r3, #0]
 80596c2:	2200      	movs	r2, #0
 80596c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80596c6:	687b      	ldr	r3, [r7, #4]
 80596c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80596ca:	683b      	ldr	r3, [r7, #0]
 80596cc:	68fa      	ldr	r2, [r7, #12]
 80596ce:	1ad2      	subs	r2, r2, r3
 80596d0:	683b      	ldr	r3, [r7, #0]
 80596d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80596d4:	4b0c      	ldr	r3, [pc, #48]	; (8059708 <prvHeapInit+0xb4>)
 80596d6:	681a      	ldr	r2, [r3, #0]
 80596d8:	683b      	ldr	r3, [r7, #0]
 80596da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80596dc:	683b      	ldr	r3, [r7, #0]
 80596de:	685b      	ldr	r3, [r3, #4]
 80596e0:	4a0a      	ldr	r2, [pc, #40]	; (805970c <prvHeapInit+0xb8>)
 80596e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80596e4:	683b      	ldr	r3, [r7, #0]
 80596e6:	685b      	ldr	r3, [r3, #4]
 80596e8:	4a09      	ldr	r2, [pc, #36]	; (8059710 <prvHeapInit+0xbc>)
 80596ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80596ec:	4b09      	ldr	r3, [pc, #36]	; (8059714 <prvHeapInit+0xc0>)
 80596ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80596f2:	601a      	str	r2, [r3, #0]
}
 80596f4:	bf00      	nop
 80596f6:	3714      	adds	r7, #20
 80596f8:	46bd      	mov	sp, r7
 80596fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80596fe:	4770      	bx	lr
 8059700:	24002ecc 	.word	0x24002ecc
 8059704:	24006acc 	.word	0x24006acc
 8059708:	24006ad4 	.word	0x24006ad4
 805970c:	24006adc 	.word	0x24006adc
 8059710:	24006ad8 	.word	0x24006ad8
 8059714:	24006ae8 	.word	0x24006ae8

08059718 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8059718:	b480      	push	{r7}
 805971a:	b085      	sub	sp, #20
 805971c:	af00      	add	r7, sp, #0
 805971e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8059720:	4b28      	ldr	r3, [pc, #160]	; (80597c4 <prvInsertBlockIntoFreeList+0xac>)
 8059722:	60fb      	str	r3, [r7, #12]
 8059724:	e002      	b.n	805972c <prvInsertBlockIntoFreeList+0x14>
 8059726:	68fb      	ldr	r3, [r7, #12]
 8059728:	681b      	ldr	r3, [r3, #0]
 805972a:	60fb      	str	r3, [r7, #12]
 805972c:	68fb      	ldr	r3, [r7, #12]
 805972e:	681b      	ldr	r3, [r3, #0]
 8059730:	687a      	ldr	r2, [r7, #4]
 8059732:	429a      	cmp	r2, r3
 8059734:	d8f7      	bhi.n	8059726 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8059736:	68fb      	ldr	r3, [r7, #12]
 8059738:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 805973a:	68fb      	ldr	r3, [r7, #12]
 805973c:	685b      	ldr	r3, [r3, #4]
 805973e:	68ba      	ldr	r2, [r7, #8]
 8059740:	4413      	add	r3, r2
 8059742:	687a      	ldr	r2, [r7, #4]
 8059744:	429a      	cmp	r2, r3
 8059746:	d108      	bne.n	805975a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8059748:	68fb      	ldr	r3, [r7, #12]
 805974a:	685a      	ldr	r2, [r3, #4]
 805974c:	687b      	ldr	r3, [r7, #4]
 805974e:	685b      	ldr	r3, [r3, #4]
 8059750:	441a      	add	r2, r3
 8059752:	68fb      	ldr	r3, [r7, #12]
 8059754:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8059756:	68fb      	ldr	r3, [r7, #12]
 8059758:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 805975a:	687b      	ldr	r3, [r7, #4]
 805975c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 805975e:	687b      	ldr	r3, [r7, #4]
 8059760:	685b      	ldr	r3, [r3, #4]
 8059762:	68ba      	ldr	r2, [r7, #8]
 8059764:	441a      	add	r2, r3
 8059766:	68fb      	ldr	r3, [r7, #12]
 8059768:	681b      	ldr	r3, [r3, #0]
 805976a:	429a      	cmp	r2, r3
 805976c:	d118      	bne.n	80597a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 805976e:	68fb      	ldr	r3, [r7, #12]
 8059770:	681a      	ldr	r2, [r3, #0]
 8059772:	4b15      	ldr	r3, [pc, #84]	; (80597c8 <prvInsertBlockIntoFreeList+0xb0>)
 8059774:	681b      	ldr	r3, [r3, #0]
 8059776:	429a      	cmp	r2, r3
 8059778:	d00d      	beq.n	8059796 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 805977a:	687b      	ldr	r3, [r7, #4]
 805977c:	685a      	ldr	r2, [r3, #4]
 805977e:	68fb      	ldr	r3, [r7, #12]
 8059780:	681b      	ldr	r3, [r3, #0]
 8059782:	685b      	ldr	r3, [r3, #4]
 8059784:	441a      	add	r2, r3
 8059786:	687b      	ldr	r3, [r7, #4]
 8059788:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 805978a:	68fb      	ldr	r3, [r7, #12]
 805978c:	681b      	ldr	r3, [r3, #0]
 805978e:	681a      	ldr	r2, [r3, #0]
 8059790:	687b      	ldr	r3, [r7, #4]
 8059792:	601a      	str	r2, [r3, #0]
 8059794:	e008      	b.n	80597a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8059796:	4b0c      	ldr	r3, [pc, #48]	; (80597c8 <prvInsertBlockIntoFreeList+0xb0>)
 8059798:	681a      	ldr	r2, [r3, #0]
 805979a:	687b      	ldr	r3, [r7, #4]
 805979c:	601a      	str	r2, [r3, #0]
 805979e:	e003      	b.n	80597a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80597a0:	68fb      	ldr	r3, [r7, #12]
 80597a2:	681a      	ldr	r2, [r3, #0]
 80597a4:	687b      	ldr	r3, [r7, #4]
 80597a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80597a8:	68fa      	ldr	r2, [r7, #12]
 80597aa:	687b      	ldr	r3, [r7, #4]
 80597ac:	429a      	cmp	r2, r3
 80597ae:	d002      	beq.n	80597b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80597b0:	68fb      	ldr	r3, [r7, #12]
 80597b2:	687a      	ldr	r2, [r7, #4]
 80597b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80597b6:	bf00      	nop
 80597b8:	3714      	adds	r7, #20
 80597ba:	46bd      	mov	sp, r7
 80597bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80597c0:	4770      	bx	lr
 80597c2:	bf00      	nop
 80597c4:	24006acc 	.word	0x24006acc
 80597c8:	24006ad4 	.word	0x24006ad4

080597cc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80597cc:	b580      	push	{r7, lr}
 80597ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 80597d0:	2200      	movs	r2, #0
 80597d2:	490e      	ldr	r1, [pc, #56]	; (805980c <MX_USB_HOST_Init+0x40>)
 80597d4:	480e      	ldr	r0, [pc, #56]	; (8059810 <MX_USB_HOST_Init+0x44>)
 80597d6:	f7f4 fe2b 	bl	804e430 <USBH_Init>
 80597da:	4603      	mov	r3, r0
 80597dc:	2b00      	cmp	r3, #0
 80597de:	d001      	beq.n	80597e4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80597e0:	f7e8 f95c 	bl	8041a9c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_MSC_CLASS) != USBH_OK)
 80597e4:	490b      	ldr	r1, [pc, #44]	; (8059814 <MX_USB_HOST_Init+0x48>)
 80597e6:	480a      	ldr	r0, [pc, #40]	; (8059810 <MX_USB_HOST_Init+0x44>)
 80597e8:	f7f4 fed8 	bl	804e59c <USBH_RegisterClass>
 80597ec:	4603      	mov	r3, r0
 80597ee:	2b00      	cmp	r3, #0
 80597f0:	d001      	beq.n	80597f6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80597f2:	f7e8 f953 	bl	8041a9c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 80597f6:	4806      	ldr	r0, [pc, #24]	; (8059810 <MX_USB_HOST_Init+0x44>)
 80597f8:	f7f4 ff5c 	bl	804e6b4 <USBH_Start>
 80597fc:	4603      	mov	r3, r0
 80597fe:	2b00      	cmp	r3, #0
 8059800:	d001      	beq.n	8059806 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8059802:	f7e8 f94b 	bl	8041a9c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8059806:	bf00      	nop
 8059808:	bd80      	pop	{r7, pc}
 805980a:	bf00      	nop
 805980c:	08059819 	.word	0x08059819
 8059810:	24006aec 	.word	0x24006aec
 8059814:	24000010 	.word	0x24000010

08059818 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8059818:	b580      	push	{r7, lr}
 805981a:	b082      	sub	sp, #8
 805981c:	af00      	add	r7, sp, #0
 805981e:	6078      	str	r0, [r7, #4]
 8059820:	460b      	mov	r3, r1
 8059822:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8059824:	78fb      	ldrb	r3, [r7, #3]
 8059826:	3b01      	subs	r3, #1
 8059828:	2b04      	cmp	r3, #4
 805982a:	d822      	bhi.n	8059872 <USBH_UserProcess+0x5a>
 805982c:	a201      	add	r2, pc, #4	; (adr r2, 8059834 <USBH_UserProcess+0x1c>)
 805982e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8059832:	bf00      	nop
 8059834:	08059873 	.word	0x08059873
 8059838:	08059857 	.word	0x08059857
 805983c:	08059873 	.word	0x08059873
 8059840:	08059865 	.word	0x08059865
 8059844:	08059849 	.word	0x08059849
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8059848:	4b0c      	ldr	r3, [pc, #48]	; (805987c <USBH_UserProcess+0x64>)
 805984a:	2203      	movs	r2, #3
 805984c:	701a      	strb	r2, [r3, #0]
  printf("USB is disconnected!\r\n");
 805984e:	480c      	ldr	r0, [pc, #48]	; (8059880 <USBH_UserProcess+0x68>)
 8059850:	f000 fcd6 	bl	805a200 <puts>
  break;
 8059854:	e00e      	b.n	8059874 <USBH_UserProcess+0x5c>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8059856:	4b09      	ldr	r3, [pc, #36]	; (805987c <USBH_UserProcess+0x64>)
 8059858:	2202      	movs	r2, #2
 805985a:	701a      	strb	r2, [r3, #0]
  printf("USB is ready to use!\r\n");
 805985c:	4809      	ldr	r0, [pc, #36]	; (8059884 <USBH_UserProcess+0x6c>)
 805985e:	f000 fccf 	bl	805a200 <puts>
  break;
 8059862:	e007      	b.n	8059874 <USBH_UserProcess+0x5c>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8059864:	4b05      	ldr	r3, [pc, #20]	; (805987c <USBH_UserProcess+0x64>)
 8059866:	2201      	movs	r2, #1
 8059868:	701a      	strb	r2, [r3, #0]
  printf("USB is connected!\r\n");
 805986a:	4807      	ldr	r0, [pc, #28]	; (8059888 <USBH_UserProcess+0x70>)
 805986c:	f000 fcc8 	bl	805a200 <puts>
  break;
 8059870:	e000      	b.n	8059874 <USBH_UserProcess+0x5c>

  default:
  break;
 8059872:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8059874:	bf00      	nop
 8059876:	3708      	adds	r7, #8
 8059878:	46bd      	mov	sp, r7
 805987a:	bd80      	pop	{r7, pc}
 805987c:	24006ed0 	.word	0x24006ed0
 8059880:	0805b90c 	.word	0x0805b90c
 8059884:	0805b924 	.word	0x0805b924
 8059888:	0805b93c 	.word	0x0805b93c

0805988c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 805988c:	b580      	push	{r7, lr}
 805988e:	b0b6      	sub	sp, #216	; 0xd8
 8059890:	af00      	add	r7, sp, #0
 8059892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8059894:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8059898:	2200      	movs	r2, #0
 805989a:	601a      	str	r2, [r3, #0]
 805989c:	605a      	str	r2, [r3, #4]
 805989e:	609a      	str	r2, [r3, #8]
 80598a0:	60da      	str	r2, [r3, #12]
 80598a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80598a4:	f107 0310 	add.w	r3, r7, #16
 80598a8:	22b4      	movs	r2, #180	; 0xb4
 80598aa:	2100      	movs	r1, #0
 80598ac:	4618      	mov	r0, r3
 80598ae:	f000 fb39 	bl	8059f24 <memset>
  if(hcdHandle->Instance==USB_OTG_HS)
 80598b2:	687b      	ldr	r3, [r7, #4]
 80598b4:	681b      	ldr	r3, [r3, #0]
 80598b6:	4a33      	ldr	r2, [pc, #204]	; (8059984 <HAL_HCD_MspInit+0xf8>)
 80598b8:	4293      	cmp	r3, r2
 80598ba:	d15e      	bne.n	805997a <HAL_HCD_MspInit+0xee>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80598bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80598c0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80598c2:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80598c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80598ca:	f107 0310 	add.w	r3, r7, #16
 80598ce:	4618      	mov	r0, r3
 80598d0:	f7ee f8fa 	bl	8047ac8 <HAL_RCCEx_PeriphCLKConfig>
 80598d4:	4603      	mov	r3, r0
 80598d6:	2b00      	cmp	r3, #0
 80598d8:	d001      	beq.n	80598de <HAL_HCD_MspInit+0x52>
    {
      Error_Handler();
 80598da:	f7e8 f8df 	bl	8041a9c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80598de:	f7ed f967 	bl	8046bb0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80598e2:	4b29      	ldr	r3, [pc, #164]	; (8059988 <HAL_HCD_MspInit+0xfc>)
 80598e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80598e8:	4a27      	ldr	r2, [pc, #156]	; (8059988 <HAL_HCD_MspInit+0xfc>)
 80598ea:	f043 0301 	orr.w	r3, r3, #1
 80598ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80598f2:	4b25      	ldr	r3, [pc, #148]	; (8059988 <HAL_HCD_MspInit+0xfc>)
 80598f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80598f8:	f003 0301 	and.w	r3, r3, #1
 80598fc:	60fb      	str	r3, [r7, #12]
 80598fe:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA9     ------> USB_OTG_HS_VBUS
    PA10     ------> USB_OTG_HS_ID
    */
    GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8059900:	f44f 7300 	mov.w	r3, #512	; 0x200
 8059904:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8059908:	2300      	movs	r3, #0
 805990a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 805990e:	2300      	movs	r3, #0
 8059910:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8059914:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8059918:	4619      	mov	r1, r3
 805991a:	481c      	ldr	r0, [pc, #112]	; (805998c <HAL_HCD_MspInit+0x100>)
 805991c:	f7eb fb28 	bl	8044f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8059920:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8059924:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8059928:	2302      	movs	r3, #2
 805992a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 805992e:	2300      	movs	r3, #0
 8059930:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8059934:	2300      	movs	r3, #0
 8059936:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 805993a:	230a      	movs	r3, #10
 805993c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8059940:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8059944:	4619      	mov	r1, r3
 8059946:	4811      	ldr	r0, [pc, #68]	; (805998c <HAL_HCD_MspInit+0x100>)
 8059948:	f7eb fb12 	bl	8044f70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 805994c:	4b0e      	ldr	r3, [pc, #56]	; (8059988 <HAL_HCD_MspInit+0xfc>)
 805994e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8059952:	4a0d      	ldr	r2, [pc, #52]	; (8059988 <HAL_HCD_MspInit+0xfc>)
 8059954:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8059958:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 805995c:	4b0a      	ldr	r3, [pc, #40]	; (8059988 <HAL_HCD_MspInit+0xfc>)
 805995e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8059962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8059966:	60bb      	str	r3, [r7, #8]
 8059968:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 805996a:	2200      	movs	r2, #0
 805996c:	2105      	movs	r1, #5
 805996e:	204d      	movs	r0, #77	; 0x4d
 8059970:	f7e8 fc9c 	bl	80422ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8059974:	204d      	movs	r0, #77	; 0x4d
 8059976:	f7e8 fcb3 	bl	80422e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 805997a:	bf00      	nop
 805997c:	37d8      	adds	r7, #216	; 0xd8
 805997e:	46bd      	mov	sp, r7
 8059980:	bd80      	pop	{r7, pc}
 8059982:	bf00      	nop
 8059984:	40040000 	.word	0x40040000
 8059988:	58024400 	.word	0x58024400
 805998c:	58020000 	.word	0x58020000

08059990 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8059990:	b580      	push	{r7, lr}
 8059992:	b082      	sub	sp, #8
 8059994:	af00      	add	r7, sp, #0
 8059996:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8059998:	687b      	ldr	r3, [r7, #4]
 805999a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 805999e:	4618      	mov	r0, r3
 80599a0:	f7f5 fb3f 	bl	804f022 <USBH_LL_IncTimer>
}
 80599a4:	bf00      	nop
 80599a6:	3708      	adds	r7, #8
 80599a8:	46bd      	mov	sp, r7
 80599aa:	bd80      	pop	{r7, pc}

080599ac <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80599ac:	b580      	push	{r7, lr}
 80599ae:	b082      	sub	sp, #8
 80599b0:	af00      	add	r7, sp, #0
 80599b2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80599b4:	687b      	ldr	r3, [r7, #4]
 80599b6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80599ba:	4618      	mov	r0, r3
 80599bc:	f7f5 fb83 	bl	804f0c6 <USBH_LL_Connect>
}
 80599c0:	bf00      	nop
 80599c2:	3708      	adds	r7, #8
 80599c4:	46bd      	mov	sp, r7
 80599c6:	bd80      	pop	{r7, pc}

080599c8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80599c8:	b580      	push	{r7, lr}
 80599ca:	b082      	sub	sp, #8
 80599cc:	af00      	add	r7, sp, #0
 80599ce:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80599d0:	687b      	ldr	r3, [r7, #4]
 80599d2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80599d6:	4618      	mov	r0, r3
 80599d8:	f7f5 fb98 	bl	804f10c <USBH_LL_Disconnect>
}
 80599dc:	bf00      	nop
 80599de:	3708      	adds	r7, #8
 80599e0:	46bd      	mov	sp, r7
 80599e2:	bd80      	pop	{r7, pc}

080599e4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80599e4:	b580      	push	{r7, lr}
 80599e6:	b082      	sub	sp, #8
 80599e8:	af00      	add	r7, sp, #0
 80599ea:	6078      	str	r0, [r7, #4]
 80599ec:	460b      	mov	r3, r1
 80599ee:	70fb      	strb	r3, [r7, #3]
 80599f0:	4613      	mov	r3, r2
 80599f2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80599f4:	687b      	ldr	r3, [r7, #4]
 80599f6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80599fa:	4618      	mov	r0, r3
 80599fc:	f7f5 fbcd 	bl	804f19a <USBH_LL_NotifyURBChange>
#endif
}
 8059a00:	bf00      	nop
 8059a02:	3708      	adds	r7, #8
 8059a04:	46bd      	mov	sp, r7
 8059a06:	bd80      	pop	{r7, pc}

08059a08 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8059a08:	b580      	push	{r7, lr}
 8059a0a:	b082      	sub	sp, #8
 8059a0c:	af00      	add	r7, sp, #0
 8059a0e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8059a10:	687b      	ldr	r3, [r7, #4]
 8059a12:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8059a16:	4618      	mov	r0, r3
 8059a18:	f7f5 fb2d 	bl	804f076 <USBH_LL_PortEnabled>
}
 8059a1c:	bf00      	nop
 8059a1e:	3708      	adds	r7, #8
 8059a20:	46bd      	mov	sp, r7
 8059a22:	bd80      	pop	{r7, pc}

08059a24 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8059a24:	b580      	push	{r7, lr}
 8059a26:	b082      	sub	sp, #8
 8059a28:	af00      	add	r7, sp, #0
 8059a2a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8059a2c:	687b      	ldr	r3, [r7, #4]
 8059a2e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8059a32:	4618      	mov	r0, r3
 8059a34:	f7f5 fb39 	bl	804f0aa <USBH_LL_PortDisabled>
}
 8059a38:	bf00      	nop
 8059a3a:	3708      	adds	r7, #8
 8059a3c:	46bd      	mov	sp, r7
 8059a3e:	bd80      	pop	{r7, pc}

08059a40 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8059a40:	b580      	push	{r7, lr}
 8059a42:	b082      	sub	sp, #8
 8059a44:	af00      	add	r7, sp, #0
 8059a46:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 8059a48:	687b      	ldr	r3, [r7, #4]
 8059a4a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8059a4e:	2b00      	cmp	r3, #0
 8059a50:	d12f      	bne.n	8059ab2 <USBH_LL_Init+0x72>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 8059a52:	4a1a      	ldr	r2, [pc, #104]	; (8059abc <USBH_LL_Init+0x7c>)
 8059a54:	687b      	ldr	r3, [r7, #4]
 8059a56:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 8059a5a:	687b      	ldr	r3, [r7, #4]
 8059a5c:	4a17      	ldr	r2, [pc, #92]	; (8059abc <USBH_LL_Init+0x7c>)
 8059a5e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8059a62:	4b16      	ldr	r3, [pc, #88]	; (8059abc <USBH_LL_Init+0x7c>)
 8059a64:	4a16      	ldr	r2, [pc, #88]	; (8059ac0 <USBH_LL_Init+0x80>)
 8059a66:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 16;
 8059a68:	4b14      	ldr	r3, [pc, #80]	; (8059abc <USBH_LL_Init+0x7c>)
 8059a6a:	2210      	movs	r2, #16
 8059a6c:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8059a6e:	4b13      	ldr	r3, [pc, #76]	; (8059abc <USBH_LL_Init+0x7c>)
 8059a70:	2201      	movs	r2, #1
 8059a72:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8059a74:	4b11      	ldr	r3, [pc, #68]	; (8059abc <USBH_LL_Init+0x7c>)
 8059a76:	2200      	movs	r2, #0
 8059a78:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8059a7a:	4b10      	ldr	r3, [pc, #64]	; (8059abc <USBH_LL_Init+0x7c>)
 8059a7c:	2202      	movs	r2, #2
 8059a7e:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8059a80:	4b0e      	ldr	r3, [pc, #56]	; (8059abc <USBH_LL_Init+0x7c>)
 8059a82:	2200      	movs	r2, #0
 8059a84:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8059a86:	4b0d      	ldr	r3, [pc, #52]	; (8059abc <USBH_LL_Init+0x7c>)
 8059a88:	2200      	movs	r2, #0
 8059a8a:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8059a8c:	4b0b      	ldr	r3, [pc, #44]	; (8059abc <USBH_LL_Init+0x7c>)
 8059a8e:	2200      	movs	r2, #0
 8059a90:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8059a92:	480a      	ldr	r0, [pc, #40]	; (8059abc <USBH_LL_Init+0x7c>)
 8059a94:	f7eb fc47 	bl	8045326 <HAL_HCD_Init>
 8059a98:	4603      	mov	r3, r0
 8059a9a:	2b00      	cmp	r3, #0
 8059a9c:	d001      	beq.n	8059aa2 <USBH_LL_Init+0x62>
  {
    Error_Handler( );
 8059a9e:	f7e7 fffd 	bl	8041a9c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 8059aa2:	4806      	ldr	r0, [pc, #24]	; (8059abc <USBH_LL_Init+0x7c>)
 8059aa4:	f7ec f82b 	bl	8045afe <HAL_HCD_GetCurrentFrame>
 8059aa8:	4603      	mov	r3, r0
 8059aaa:	4619      	mov	r1, r3
 8059aac:	6878      	ldr	r0, [r7, #4]
 8059aae:	f7f5 faa9 	bl	804f004 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8059ab2:	2300      	movs	r3, #0
}
 8059ab4:	4618      	mov	r0, r3
 8059ab6:	3708      	adds	r7, #8
 8059ab8:	46bd      	mov	sp, r7
 8059aba:	bd80      	pop	{r7, pc}
 8059abc:	24006ed4 	.word	0x24006ed4
 8059ac0:	40040000 	.word	0x40040000

08059ac4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8059ac4:	b580      	push	{r7, lr}
 8059ac6:	b084      	sub	sp, #16
 8059ac8:	af00      	add	r7, sp, #0
 8059aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8059acc:	2300      	movs	r3, #0
 8059ace:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8059ad0:	2300      	movs	r3, #0
 8059ad2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8059ad4:	687b      	ldr	r3, [r7, #4]
 8059ad6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8059ada:	4618      	mov	r0, r3
 8059adc:	f7eb ff99 	bl	8045a12 <HAL_HCD_Start>
 8059ae0:	4603      	mov	r3, r0
 8059ae2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8059ae4:	7bfb      	ldrb	r3, [r7, #15]
 8059ae6:	4618      	mov	r0, r3
 8059ae8:	f000 f98c 	bl	8059e04 <USBH_Get_USB_Status>
 8059aec:	4603      	mov	r3, r0
 8059aee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8059af0:	7bbb      	ldrb	r3, [r7, #14]
}
 8059af2:	4618      	mov	r0, r3
 8059af4:	3710      	adds	r7, #16
 8059af6:	46bd      	mov	sp, r7
 8059af8:	bd80      	pop	{r7, pc}

08059afa <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8059afa:	b580      	push	{r7, lr}
 8059afc:	b084      	sub	sp, #16
 8059afe:	af00      	add	r7, sp, #0
 8059b00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8059b02:	2300      	movs	r3, #0
 8059b04:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8059b06:	2300      	movs	r3, #0
 8059b08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8059b0a:	687b      	ldr	r3, [r7, #4]
 8059b0c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8059b10:	4618      	mov	r0, r3
 8059b12:	f7eb ffa1 	bl	8045a58 <HAL_HCD_Stop>
 8059b16:	4603      	mov	r3, r0
 8059b18:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8059b1a:	7bfb      	ldrb	r3, [r7, #15]
 8059b1c:	4618      	mov	r0, r3
 8059b1e:	f000 f971 	bl	8059e04 <USBH_Get_USB_Status>
 8059b22:	4603      	mov	r3, r0
 8059b24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8059b26:	7bbb      	ldrb	r3, [r7, #14]
}
 8059b28:	4618      	mov	r0, r3
 8059b2a:	3710      	adds	r7, #16
 8059b2c:	46bd      	mov	sp, r7
 8059b2e:	bd80      	pop	{r7, pc}

08059b30 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8059b30:	b580      	push	{r7, lr}
 8059b32:	b084      	sub	sp, #16
 8059b34:	af00      	add	r7, sp, #0
 8059b36:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8059b38:	2301      	movs	r3, #1
 8059b3a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8059b3c:	687b      	ldr	r3, [r7, #4]
 8059b3e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8059b42:	4618      	mov	r0, r3
 8059b44:	f7eb ffe9 	bl	8045b1a <HAL_HCD_GetCurrentSpeed>
 8059b48:	4603      	mov	r3, r0
 8059b4a:	2b02      	cmp	r3, #2
 8059b4c:	d00c      	beq.n	8059b68 <USBH_LL_GetSpeed+0x38>
 8059b4e:	2b02      	cmp	r3, #2
 8059b50:	d80d      	bhi.n	8059b6e <USBH_LL_GetSpeed+0x3e>
 8059b52:	2b00      	cmp	r3, #0
 8059b54:	d002      	beq.n	8059b5c <USBH_LL_GetSpeed+0x2c>
 8059b56:	2b01      	cmp	r3, #1
 8059b58:	d003      	beq.n	8059b62 <USBH_LL_GetSpeed+0x32>
 8059b5a:	e008      	b.n	8059b6e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8059b5c:	2300      	movs	r3, #0
 8059b5e:	73fb      	strb	r3, [r7, #15]
    break;
 8059b60:	e008      	b.n	8059b74 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8059b62:	2301      	movs	r3, #1
 8059b64:	73fb      	strb	r3, [r7, #15]
    break;
 8059b66:	e005      	b.n	8059b74 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8059b68:	2302      	movs	r3, #2
 8059b6a:	73fb      	strb	r3, [r7, #15]
    break;
 8059b6c:	e002      	b.n	8059b74 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8059b6e:	2301      	movs	r3, #1
 8059b70:	73fb      	strb	r3, [r7, #15]
    break;
 8059b72:	bf00      	nop
  }
  return  speed;
 8059b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8059b76:	4618      	mov	r0, r3
 8059b78:	3710      	adds	r7, #16
 8059b7a:	46bd      	mov	sp, r7
 8059b7c:	bd80      	pop	{r7, pc}

08059b7e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8059b7e:	b580      	push	{r7, lr}
 8059b80:	b084      	sub	sp, #16
 8059b82:	af00      	add	r7, sp, #0
 8059b84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8059b86:	2300      	movs	r3, #0
 8059b88:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8059b8a:	2300      	movs	r3, #0
 8059b8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8059b8e:	687b      	ldr	r3, [r7, #4]
 8059b90:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8059b94:	4618      	mov	r0, r3
 8059b96:	f7eb ff7c 	bl	8045a92 <HAL_HCD_ResetPort>
 8059b9a:	4603      	mov	r3, r0
 8059b9c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8059b9e:	7bfb      	ldrb	r3, [r7, #15]
 8059ba0:	4618      	mov	r0, r3
 8059ba2:	f000 f92f 	bl	8059e04 <USBH_Get_USB_Status>
 8059ba6:	4603      	mov	r3, r0
 8059ba8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8059baa:	7bbb      	ldrb	r3, [r7, #14]
}
 8059bac:	4618      	mov	r0, r3
 8059bae:	3710      	adds	r7, #16
 8059bb0:	46bd      	mov	sp, r7
 8059bb2:	bd80      	pop	{r7, pc}

08059bb4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8059bb4:	b580      	push	{r7, lr}
 8059bb6:	b082      	sub	sp, #8
 8059bb8:	af00      	add	r7, sp, #0
 8059bba:	6078      	str	r0, [r7, #4]
 8059bbc:	460b      	mov	r3, r1
 8059bbe:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8059bc0:	687b      	ldr	r3, [r7, #4]
 8059bc2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8059bc6:	78fa      	ldrb	r2, [r7, #3]
 8059bc8:	4611      	mov	r1, r2
 8059bca:	4618      	mov	r0, r3
 8059bcc:	f7eb ff83 	bl	8045ad6 <HAL_HCD_HC_GetXferCount>
 8059bd0:	4603      	mov	r3, r0
}
 8059bd2:	4618      	mov	r0, r3
 8059bd4:	3708      	adds	r7, #8
 8059bd6:	46bd      	mov	sp, r7
 8059bd8:	bd80      	pop	{r7, pc}

08059bda <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8059bda:	b590      	push	{r4, r7, lr}
 8059bdc:	b089      	sub	sp, #36	; 0x24
 8059bde:	af04      	add	r7, sp, #16
 8059be0:	6078      	str	r0, [r7, #4]
 8059be2:	4608      	mov	r0, r1
 8059be4:	4611      	mov	r1, r2
 8059be6:	461a      	mov	r2, r3
 8059be8:	4603      	mov	r3, r0
 8059bea:	70fb      	strb	r3, [r7, #3]
 8059bec:	460b      	mov	r3, r1
 8059bee:	70bb      	strb	r3, [r7, #2]
 8059bf0:	4613      	mov	r3, r2
 8059bf2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8059bf4:	2300      	movs	r3, #0
 8059bf6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8059bf8:	2300      	movs	r3, #0
 8059bfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8059bfc:	687b      	ldr	r3, [r7, #4]
 8059bfe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8059c02:	787c      	ldrb	r4, [r7, #1]
 8059c04:	78ba      	ldrb	r2, [r7, #2]
 8059c06:	78f9      	ldrb	r1, [r7, #3]
 8059c08:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8059c0a:	9302      	str	r3, [sp, #8]
 8059c0c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8059c10:	9301      	str	r3, [sp, #4]
 8059c12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8059c16:	9300      	str	r3, [sp, #0]
 8059c18:	4623      	mov	r3, r4
 8059c1a:	f7eb fbe6 	bl	80453ea <HAL_HCD_HC_Init>
 8059c1e:	4603      	mov	r3, r0
 8059c20:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8059c22:	7bfb      	ldrb	r3, [r7, #15]
 8059c24:	4618      	mov	r0, r3
 8059c26:	f000 f8ed 	bl	8059e04 <USBH_Get_USB_Status>
 8059c2a:	4603      	mov	r3, r0
 8059c2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8059c2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8059c30:	4618      	mov	r0, r3
 8059c32:	3714      	adds	r7, #20
 8059c34:	46bd      	mov	sp, r7
 8059c36:	bd90      	pop	{r4, r7, pc}

08059c38 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8059c38:	b580      	push	{r7, lr}
 8059c3a:	b084      	sub	sp, #16
 8059c3c:	af00      	add	r7, sp, #0
 8059c3e:	6078      	str	r0, [r7, #4]
 8059c40:	460b      	mov	r3, r1
 8059c42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8059c44:	2300      	movs	r3, #0
 8059c46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8059c48:	2300      	movs	r3, #0
 8059c4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8059c4c:	687b      	ldr	r3, [r7, #4]
 8059c4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8059c52:	78fa      	ldrb	r2, [r7, #3]
 8059c54:	4611      	mov	r1, r2
 8059c56:	4618      	mov	r0, r3
 8059c58:	f7eb fc56 	bl	8045508 <HAL_HCD_HC_Halt>
 8059c5c:	4603      	mov	r3, r0
 8059c5e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8059c60:	7bfb      	ldrb	r3, [r7, #15]
 8059c62:	4618      	mov	r0, r3
 8059c64:	f000 f8ce 	bl	8059e04 <USBH_Get_USB_Status>
 8059c68:	4603      	mov	r3, r0
 8059c6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8059c6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8059c6e:	4618      	mov	r0, r3
 8059c70:	3710      	adds	r7, #16
 8059c72:	46bd      	mov	sp, r7
 8059c74:	bd80      	pop	{r7, pc}

08059c76 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8059c76:	b590      	push	{r4, r7, lr}
 8059c78:	b089      	sub	sp, #36	; 0x24
 8059c7a:	af04      	add	r7, sp, #16
 8059c7c:	6078      	str	r0, [r7, #4]
 8059c7e:	4608      	mov	r0, r1
 8059c80:	4611      	mov	r1, r2
 8059c82:	461a      	mov	r2, r3
 8059c84:	4603      	mov	r3, r0
 8059c86:	70fb      	strb	r3, [r7, #3]
 8059c88:	460b      	mov	r3, r1
 8059c8a:	70bb      	strb	r3, [r7, #2]
 8059c8c:	4613      	mov	r3, r2
 8059c8e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8059c90:	2300      	movs	r3, #0
 8059c92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8059c94:	2300      	movs	r3, #0
 8059c96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8059c98:	687b      	ldr	r3, [r7, #4]
 8059c9a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8059c9e:	787c      	ldrb	r4, [r7, #1]
 8059ca0:	78ba      	ldrb	r2, [r7, #2]
 8059ca2:	78f9      	ldrb	r1, [r7, #3]
 8059ca4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8059ca8:	9303      	str	r3, [sp, #12]
 8059caa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8059cac:	9302      	str	r3, [sp, #8]
 8059cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8059cb0:	9301      	str	r3, [sp, #4]
 8059cb2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8059cb6:	9300      	str	r3, [sp, #0]
 8059cb8:	4623      	mov	r3, r4
 8059cba:	f7eb fc49 	bl	8045550 <HAL_HCD_HC_SubmitRequest>
 8059cbe:	4603      	mov	r3, r0
 8059cc0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8059cc2:	7bfb      	ldrb	r3, [r7, #15]
 8059cc4:	4618      	mov	r0, r3
 8059cc6:	f000 f89d 	bl	8059e04 <USBH_Get_USB_Status>
 8059cca:	4603      	mov	r3, r0
 8059ccc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8059cce:	7bbb      	ldrb	r3, [r7, #14]
}
 8059cd0:	4618      	mov	r0, r3
 8059cd2:	3714      	adds	r7, #20
 8059cd4:	46bd      	mov	sp, r7
 8059cd6:	bd90      	pop	{r4, r7, pc}

08059cd8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8059cd8:	b580      	push	{r7, lr}
 8059cda:	b082      	sub	sp, #8
 8059cdc:	af00      	add	r7, sp, #0
 8059cde:	6078      	str	r0, [r7, #4]
 8059ce0:	460b      	mov	r3, r1
 8059ce2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8059ce4:	687b      	ldr	r3, [r7, #4]
 8059ce6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8059cea:	78fa      	ldrb	r2, [r7, #3]
 8059cec:	4611      	mov	r1, r2
 8059cee:	4618      	mov	r0, r3
 8059cf0:	f7eb fedd 	bl	8045aae <HAL_HCD_HC_GetURBState>
 8059cf4:	4603      	mov	r3, r0
}
 8059cf6:	4618      	mov	r0, r3
 8059cf8:	3708      	adds	r7, #8
 8059cfa:	46bd      	mov	sp, r7
 8059cfc:	bd80      	pop	{r7, pc}

08059cfe <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8059cfe:	b580      	push	{r7, lr}
 8059d00:	b082      	sub	sp, #8
 8059d02:	af00      	add	r7, sp, #0
 8059d04:	6078      	str	r0, [r7, #4]
 8059d06:	460b      	mov	r3, r1
 8059d08:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 8059d0a:	687b      	ldr	r3, [r7, #4]
 8059d0c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8059d10:	2b00      	cmp	r3, #0
 8059d12:	d103      	bne.n	8059d1c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 8059d14:	78fb      	ldrb	r3, [r7, #3]
 8059d16:	4618      	mov	r0, r3
 8059d18:	f000 f8a0 	bl	8059e5c <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8059d1c:	20c8      	movs	r0, #200	; 0xc8
 8059d1e:	f7e8 f9e9 	bl	80420f4 <HAL_Delay>
  return USBH_OK;
 8059d22:	2300      	movs	r3, #0
}
 8059d24:	4618      	mov	r0, r3
 8059d26:	3708      	adds	r7, #8
 8059d28:	46bd      	mov	sp, r7
 8059d2a:	bd80      	pop	{r7, pc}

08059d2c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8059d2c:	b480      	push	{r7}
 8059d2e:	b085      	sub	sp, #20
 8059d30:	af00      	add	r7, sp, #0
 8059d32:	6078      	str	r0, [r7, #4]
 8059d34:	460b      	mov	r3, r1
 8059d36:	70fb      	strb	r3, [r7, #3]
 8059d38:	4613      	mov	r3, r2
 8059d3a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8059d3c:	687b      	ldr	r3, [r7, #4]
 8059d3e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8059d42:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8059d44:	78fb      	ldrb	r3, [r7, #3]
 8059d46:	68fa      	ldr	r2, [r7, #12]
 8059d48:	212c      	movs	r1, #44	; 0x2c
 8059d4a:	fb01 f303 	mul.w	r3, r1, r3
 8059d4e:	4413      	add	r3, r2
 8059d50:	333b      	adds	r3, #59	; 0x3b
 8059d52:	781b      	ldrb	r3, [r3, #0]
 8059d54:	2b00      	cmp	r3, #0
 8059d56:	d009      	beq.n	8059d6c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8059d58:	78fb      	ldrb	r3, [r7, #3]
 8059d5a:	68fa      	ldr	r2, [r7, #12]
 8059d5c:	212c      	movs	r1, #44	; 0x2c
 8059d5e:	fb01 f303 	mul.w	r3, r1, r3
 8059d62:	4413      	add	r3, r2
 8059d64:	3354      	adds	r3, #84	; 0x54
 8059d66:	78ba      	ldrb	r2, [r7, #2]
 8059d68:	701a      	strb	r2, [r3, #0]
 8059d6a:	e008      	b.n	8059d7e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8059d6c:	78fb      	ldrb	r3, [r7, #3]
 8059d6e:	68fa      	ldr	r2, [r7, #12]
 8059d70:	212c      	movs	r1, #44	; 0x2c
 8059d72:	fb01 f303 	mul.w	r3, r1, r3
 8059d76:	4413      	add	r3, r2
 8059d78:	3355      	adds	r3, #85	; 0x55
 8059d7a:	78ba      	ldrb	r2, [r7, #2]
 8059d7c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8059d7e:	2300      	movs	r3, #0
}
 8059d80:	4618      	mov	r0, r3
 8059d82:	3714      	adds	r7, #20
 8059d84:	46bd      	mov	sp, r7
 8059d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8059d8a:	4770      	bx	lr

08059d8c <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8059d8c:	b480      	push	{r7}
 8059d8e:	b085      	sub	sp, #20
 8059d90:	af00      	add	r7, sp, #0
 8059d92:	6078      	str	r0, [r7, #4]
 8059d94:	460b      	mov	r3, r1
 8059d96:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8059d98:	2300      	movs	r3, #0
 8059d9a:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8059d9c:	687b      	ldr	r3, [r7, #4]
 8059d9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8059da2:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8059da4:	78fb      	ldrb	r3, [r7, #3]
 8059da6:	68ba      	ldr	r2, [r7, #8]
 8059da8:	212c      	movs	r1, #44	; 0x2c
 8059daa:	fb01 f303 	mul.w	r3, r1, r3
 8059dae:	4413      	add	r3, r2
 8059db0:	333b      	adds	r3, #59	; 0x3b
 8059db2:	781b      	ldrb	r3, [r3, #0]
 8059db4:	2b00      	cmp	r3, #0
 8059db6:	d009      	beq.n	8059dcc <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8059db8:	78fb      	ldrb	r3, [r7, #3]
 8059dba:	68ba      	ldr	r2, [r7, #8]
 8059dbc:	212c      	movs	r1, #44	; 0x2c
 8059dbe:	fb01 f303 	mul.w	r3, r1, r3
 8059dc2:	4413      	add	r3, r2
 8059dc4:	3354      	adds	r3, #84	; 0x54
 8059dc6:	781b      	ldrb	r3, [r3, #0]
 8059dc8:	73fb      	strb	r3, [r7, #15]
 8059dca:	e008      	b.n	8059dde <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8059dcc:	78fb      	ldrb	r3, [r7, #3]
 8059dce:	68ba      	ldr	r2, [r7, #8]
 8059dd0:	212c      	movs	r1, #44	; 0x2c
 8059dd2:	fb01 f303 	mul.w	r3, r1, r3
 8059dd6:	4413      	add	r3, r2
 8059dd8:	3355      	adds	r3, #85	; 0x55
 8059dda:	781b      	ldrb	r3, [r3, #0]
 8059ddc:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8059dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8059de0:	4618      	mov	r0, r3
 8059de2:	3714      	adds	r7, #20
 8059de4:	46bd      	mov	sp, r7
 8059de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8059dea:	4770      	bx	lr

08059dec <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8059dec:	b580      	push	{r7, lr}
 8059dee:	b082      	sub	sp, #8
 8059df0:	af00      	add	r7, sp, #0
 8059df2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8059df4:	6878      	ldr	r0, [r7, #4]
 8059df6:	f7e8 f97d 	bl	80420f4 <HAL_Delay>
}
 8059dfa:	bf00      	nop
 8059dfc:	3708      	adds	r7, #8
 8059dfe:	46bd      	mov	sp, r7
 8059e00:	bd80      	pop	{r7, pc}
	...

08059e04 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8059e04:	b480      	push	{r7}
 8059e06:	b085      	sub	sp, #20
 8059e08:	af00      	add	r7, sp, #0
 8059e0a:	4603      	mov	r3, r0
 8059e0c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8059e0e:	2300      	movs	r3, #0
 8059e10:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8059e12:	79fb      	ldrb	r3, [r7, #7]
 8059e14:	2b03      	cmp	r3, #3
 8059e16:	d817      	bhi.n	8059e48 <USBH_Get_USB_Status+0x44>
 8059e18:	a201      	add	r2, pc, #4	; (adr r2, 8059e20 <USBH_Get_USB_Status+0x1c>)
 8059e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8059e1e:	bf00      	nop
 8059e20:	08059e31 	.word	0x08059e31
 8059e24:	08059e37 	.word	0x08059e37
 8059e28:	08059e3d 	.word	0x08059e3d
 8059e2c:	08059e43 	.word	0x08059e43
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8059e30:	2300      	movs	r3, #0
 8059e32:	73fb      	strb	r3, [r7, #15]
    break;
 8059e34:	e00b      	b.n	8059e4e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8059e36:	2302      	movs	r3, #2
 8059e38:	73fb      	strb	r3, [r7, #15]
    break;
 8059e3a:	e008      	b.n	8059e4e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8059e3c:	2301      	movs	r3, #1
 8059e3e:	73fb      	strb	r3, [r7, #15]
    break;
 8059e40:	e005      	b.n	8059e4e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8059e42:	2302      	movs	r3, #2
 8059e44:	73fb      	strb	r3, [r7, #15]
    break;
 8059e46:	e002      	b.n	8059e4e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8059e48:	2302      	movs	r3, #2
 8059e4a:	73fb      	strb	r3, [r7, #15]
    break;
 8059e4c:	bf00      	nop
  }
  return usb_status;
 8059e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8059e50:	4618      	mov	r0, r3
 8059e52:	3714      	adds	r7, #20
 8059e54:	46bd      	mov	sp, r7
 8059e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8059e5a:	4770      	bx	lr

08059e5c <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 8059e5c:	b580      	push	{r7, lr}
 8059e5e:	b084      	sub	sp, #16
 8059e60:	af00      	add	r7, sp, #0
 8059e62:	4603      	mov	r3, r0
 8059e64:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8059e66:	79fb      	ldrb	r3, [r7, #7]
 8059e68:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 8059e6a:	79fb      	ldrb	r3, [r7, #7]
 8059e6c:	2b00      	cmp	r3, #0
 8059e6e:	d102      	bne.n	8059e76 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8059e70:	2301      	movs	r3, #1
 8059e72:	73fb      	strb	r3, [r7, #15]
 8059e74:	e001      	b.n	8059e7a <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8059e76:	2300      	movs	r3, #0
 8059e78:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_0,(GPIO_PinState)data);
 8059e7a:	7bfb      	ldrb	r3, [r7, #15]
 8059e7c:	461a      	mov	r2, r3
 8059e7e:	2101      	movs	r1, #1
 8059e80:	4803      	ldr	r0, [pc, #12]	; (8059e90 <MX_DriverVbusHS+0x34>)
 8059e82:	f7eb fa1d 	bl	80452c0 <HAL_GPIO_WritePin>
}
 8059e86:	bf00      	nop
 8059e88:	3710      	adds	r7, #16
 8059e8a:	46bd      	mov	sp, r7
 8059e8c:	bd80      	pop	{r7, pc}
 8059e8e:	bf00      	nop
 8059e90:	58021000 	.word	0x58021000

08059e94 <__errno>:
 8059e94:	4b01      	ldr	r3, [pc, #4]	; (8059e9c <__errno+0x8>)
 8059e96:	6818      	ldr	r0, [r3, #0]
 8059e98:	4770      	bx	lr
 8059e9a:	bf00      	nop
 8059e9c:	24000034 	.word	0x24000034

08059ea0 <__libc_init_array>:
 8059ea0:	b570      	push	{r4, r5, r6, lr}
 8059ea2:	4d0d      	ldr	r5, [pc, #52]	; (8059ed8 <__libc_init_array+0x38>)
 8059ea4:	4c0d      	ldr	r4, [pc, #52]	; (8059edc <__libc_init_array+0x3c>)
 8059ea6:	1b64      	subs	r4, r4, r5
 8059ea8:	10a4      	asrs	r4, r4, #2
 8059eaa:	2600      	movs	r6, #0
 8059eac:	42a6      	cmp	r6, r4
 8059eae:	d109      	bne.n	8059ec4 <__libc_init_array+0x24>
 8059eb0:	4d0b      	ldr	r5, [pc, #44]	; (8059ee0 <__libc_init_array+0x40>)
 8059eb2:	4c0c      	ldr	r4, [pc, #48]	; (8059ee4 <__libc_init_array+0x44>)
 8059eb4:	f001 fa48 	bl	805b348 <_init>
 8059eb8:	1b64      	subs	r4, r4, r5
 8059eba:	10a4      	asrs	r4, r4, #2
 8059ebc:	2600      	movs	r6, #0
 8059ebe:	42a6      	cmp	r6, r4
 8059ec0:	d105      	bne.n	8059ece <__libc_init_array+0x2e>
 8059ec2:	bd70      	pop	{r4, r5, r6, pc}
 8059ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8059ec8:	4798      	blx	r3
 8059eca:	3601      	adds	r6, #1
 8059ecc:	e7ee      	b.n	8059eac <__libc_init_array+0xc>
 8059ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8059ed2:	4798      	blx	r3
 8059ed4:	3601      	adds	r6, #1
 8059ed6:	e7f2      	b.n	8059ebe <__libc_init_array+0x1e>
 8059ed8:	0805be84 	.word	0x0805be84
 8059edc:	0805be84 	.word	0x0805be84
 8059ee0:	0805be84 	.word	0x0805be84
 8059ee4:	0805be88 	.word	0x0805be88

08059ee8 <malloc>:
 8059ee8:	4b02      	ldr	r3, [pc, #8]	; (8059ef4 <malloc+0xc>)
 8059eea:	4601      	mov	r1, r0
 8059eec:	6818      	ldr	r0, [r3, #0]
 8059eee:	f000 b88d 	b.w	805a00c <_malloc_r>
 8059ef2:	bf00      	nop
 8059ef4:	24000034 	.word	0x24000034

08059ef8 <free>:
 8059ef8:	4b02      	ldr	r3, [pc, #8]	; (8059f04 <free+0xc>)
 8059efa:	4601      	mov	r1, r0
 8059efc:	6818      	ldr	r0, [r3, #0]
 8059efe:	f000 b819 	b.w	8059f34 <_free_r>
 8059f02:	bf00      	nop
 8059f04:	24000034 	.word	0x24000034

08059f08 <memcpy>:
 8059f08:	440a      	add	r2, r1
 8059f0a:	4291      	cmp	r1, r2
 8059f0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8059f10:	d100      	bne.n	8059f14 <memcpy+0xc>
 8059f12:	4770      	bx	lr
 8059f14:	b510      	push	{r4, lr}
 8059f16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8059f1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8059f1e:	4291      	cmp	r1, r2
 8059f20:	d1f9      	bne.n	8059f16 <memcpy+0xe>
 8059f22:	bd10      	pop	{r4, pc}

08059f24 <memset>:
 8059f24:	4402      	add	r2, r0
 8059f26:	4603      	mov	r3, r0
 8059f28:	4293      	cmp	r3, r2
 8059f2a:	d100      	bne.n	8059f2e <memset+0xa>
 8059f2c:	4770      	bx	lr
 8059f2e:	f803 1b01 	strb.w	r1, [r3], #1
 8059f32:	e7f9      	b.n	8059f28 <memset+0x4>

08059f34 <_free_r>:
 8059f34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8059f36:	2900      	cmp	r1, #0
 8059f38:	d044      	beq.n	8059fc4 <_free_r+0x90>
 8059f3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8059f3e:	9001      	str	r0, [sp, #4]
 8059f40:	2b00      	cmp	r3, #0
 8059f42:	f1a1 0404 	sub.w	r4, r1, #4
 8059f46:	bfb8      	it	lt
 8059f48:	18e4      	addlt	r4, r4, r3
 8059f4a:	f000 fca9 	bl	805a8a0 <__malloc_lock>
 8059f4e:	4a1e      	ldr	r2, [pc, #120]	; (8059fc8 <_free_r+0x94>)
 8059f50:	9801      	ldr	r0, [sp, #4]
 8059f52:	6813      	ldr	r3, [r2, #0]
 8059f54:	b933      	cbnz	r3, 8059f64 <_free_r+0x30>
 8059f56:	6063      	str	r3, [r4, #4]
 8059f58:	6014      	str	r4, [r2, #0]
 8059f5a:	b003      	add	sp, #12
 8059f5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8059f60:	f000 bca4 	b.w	805a8ac <__malloc_unlock>
 8059f64:	42a3      	cmp	r3, r4
 8059f66:	d908      	bls.n	8059f7a <_free_r+0x46>
 8059f68:	6825      	ldr	r5, [r4, #0]
 8059f6a:	1961      	adds	r1, r4, r5
 8059f6c:	428b      	cmp	r3, r1
 8059f6e:	bf01      	itttt	eq
 8059f70:	6819      	ldreq	r1, [r3, #0]
 8059f72:	685b      	ldreq	r3, [r3, #4]
 8059f74:	1949      	addeq	r1, r1, r5
 8059f76:	6021      	streq	r1, [r4, #0]
 8059f78:	e7ed      	b.n	8059f56 <_free_r+0x22>
 8059f7a:	461a      	mov	r2, r3
 8059f7c:	685b      	ldr	r3, [r3, #4]
 8059f7e:	b10b      	cbz	r3, 8059f84 <_free_r+0x50>
 8059f80:	42a3      	cmp	r3, r4
 8059f82:	d9fa      	bls.n	8059f7a <_free_r+0x46>
 8059f84:	6811      	ldr	r1, [r2, #0]
 8059f86:	1855      	adds	r5, r2, r1
 8059f88:	42a5      	cmp	r5, r4
 8059f8a:	d10b      	bne.n	8059fa4 <_free_r+0x70>
 8059f8c:	6824      	ldr	r4, [r4, #0]
 8059f8e:	4421      	add	r1, r4
 8059f90:	1854      	adds	r4, r2, r1
 8059f92:	42a3      	cmp	r3, r4
 8059f94:	6011      	str	r1, [r2, #0]
 8059f96:	d1e0      	bne.n	8059f5a <_free_r+0x26>
 8059f98:	681c      	ldr	r4, [r3, #0]
 8059f9a:	685b      	ldr	r3, [r3, #4]
 8059f9c:	6053      	str	r3, [r2, #4]
 8059f9e:	4421      	add	r1, r4
 8059fa0:	6011      	str	r1, [r2, #0]
 8059fa2:	e7da      	b.n	8059f5a <_free_r+0x26>
 8059fa4:	d902      	bls.n	8059fac <_free_r+0x78>
 8059fa6:	230c      	movs	r3, #12
 8059fa8:	6003      	str	r3, [r0, #0]
 8059faa:	e7d6      	b.n	8059f5a <_free_r+0x26>
 8059fac:	6825      	ldr	r5, [r4, #0]
 8059fae:	1961      	adds	r1, r4, r5
 8059fb0:	428b      	cmp	r3, r1
 8059fb2:	bf04      	itt	eq
 8059fb4:	6819      	ldreq	r1, [r3, #0]
 8059fb6:	685b      	ldreq	r3, [r3, #4]
 8059fb8:	6063      	str	r3, [r4, #4]
 8059fba:	bf04      	itt	eq
 8059fbc:	1949      	addeq	r1, r1, r5
 8059fbe:	6021      	streq	r1, [r4, #0]
 8059fc0:	6054      	str	r4, [r2, #4]
 8059fc2:	e7ca      	b.n	8059f5a <_free_r+0x26>
 8059fc4:	b003      	add	sp, #12
 8059fc6:	bd30      	pop	{r4, r5, pc}
 8059fc8:	240071d8 	.word	0x240071d8

08059fcc <sbrk_aligned>:
 8059fcc:	b570      	push	{r4, r5, r6, lr}
 8059fce:	4e0e      	ldr	r6, [pc, #56]	; (805a008 <sbrk_aligned+0x3c>)
 8059fd0:	460c      	mov	r4, r1
 8059fd2:	6831      	ldr	r1, [r6, #0]
 8059fd4:	4605      	mov	r5, r0
 8059fd6:	b911      	cbnz	r1, 8059fde <sbrk_aligned+0x12>
 8059fd8:	f000 f91a 	bl	805a210 <_sbrk_r>
 8059fdc:	6030      	str	r0, [r6, #0]
 8059fde:	4621      	mov	r1, r4
 8059fe0:	4628      	mov	r0, r5
 8059fe2:	f000 f915 	bl	805a210 <_sbrk_r>
 8059fe6:	1c43      	adds	r3, r0, #1
 8059fe8:	d00a      	beq.n	805a000 <sbrk_aligned+0x34>
 8059fea:	1cc4      	adds	r4, r0, #3
 8059fec:	f024 0403 	bic.w	r4, r4, #3
 8059ff0:	42a0      	cmp	r0, r4
 8059ff2:	d007      	beq.n	805a004 <sbrk_aligned+0x38>
 8059ff4:	1a21      	subs	r1, r4, r0
 8059ff6:	4628      	mov	r0, r5
 8059ff8:	f000 f90a 	bl	805a210 <_sbrk_r>
 8059ffc:	3001      	adds	r0, #1
 8059ffe:	d101      	bne.n	805a004 <sbrk_aligned+0x38>
 805a000:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 805a004:	4620      	mov	r0, r4
 805a006:	bd70      	pop	{r4, r5, r6, pc}
 805a008:	240071dc 	.word	0x240071dc

0805a00c <_malloc_r>:
 805a00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 805a010:	1ccd      	adds	r5, r1, #3
 805a012:	f025 0503 	bic.w	r5, r5, #3
 805a016:	3508      	adds	r5, #8
 805a018:	2d0c      	cmp	r5, #12
 805a01a:	bf38      	it	cc
 805a01c:	250c      	movcc	r5, #12
 805a01e:	2d00      	cmp	r5, #0
 805a020:	4607      	mov	r7, r0
 805a022:	db01      	blt.n	805a028 <_malloc_r+0x1c>
 805a024:	42a9      	cmp	r1, r5
 805a026:	d905      	bls.n	805a034 <_malloc_r+0x28>
 805a028:	230c      	movs	r3, #12
 805a02a:	603b      	str	r3, [r7, #0]
 805a02c:	2600      	movs	r6, #0
 805a02e:	4630      	mov	r0, r6
 805a030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 805a034:	4e2e      	ldr	r6, [pc, #184]	; (805a0f0 <_malloc_r+0xe4>)
 805a036:	f000 fc33 	bl	805a8a0 <__malloc_lock>
 805a03a:	6833      	ldr	r3, [r6, #0]
 805a03c:	461c      	mov	r4, r3
 805a03e:	bb34      	cbnz	r4, 805a08e <_malloc_r+0x82>
 805a040:	4629      	mov	r1, r5
 805a042:	4638      	mov	r0, r7
 805a044:	f7ff ffc2 	bl	8059fcc <sbrk_aligned>
 805a048:	1c43      	adds	r3, r0, #1
 805a04a:	4604      	mov	r4, r0
 805a04c:	d14d      	bne.n	805a0ea <_malloc_r+0xde>
 805a04e:	6834      	ldr	r4, [r6, #0]
 805a050:	4626      	mov	r6, r4
 805a052:	2e00      	cmp	r6, #0
 805a054:	d140      	bne.n	805a0d8 <_malloc_r+0xcc>
 805a056:	6823      	ldr	r3, [r4, #0]
 805a058:	4631      	mov	r1, r6
 805a05a:	4638      	mov	r0, r7
 805a05c:	eb04 0803 	add.w	r8, r4, r3
 805a060:	f000 f8d6 	bl	805a210 <_sbrk_r>
 805a064:	4580      	cmp	r8, r0
 805a066:	d13a      	bne.n	805a0de <_malloc_r+0xd2>
 805a068:	6821      	ldr	r1, [r4, #0]
 805a06a:	3503      	adds	r5, #3
 805a06c:	1a6d      	subs	r5, r5, r1
 805a06e:	f025 0503 	bic.w	r5, r5, #3
 805a072:	3508      	adds	r5, #8
 805a074:	2d0c      	cmp	r5, #12
 805a076:	bf38      	it	cc
 805a078:	250c      	movcc	r5, #12
 805a07a:	4629      	mov	r1, r5
 805a07c:	4638      	mov	r0, r7
 805a07e:	f7ff ffa5 	bl	8059fcc <sbrk_aligned>
 805a082:	3001      	adds	r0, #1
 805a084:	d02b      	beq.n	805a0de <_malloc_r+0xd2>
 805a086:	6823      	ldr	r3, [r4, #0]
 805a088:	442b      	add	r3, r5
 805a08a:	6023      	str	r3, [r4, #0]
 805a08c:	e00e      	b.n	805a0ac <_malloc_r+0xa0>
 805a08e:	6822      	ldr	r2, [r4, #0]
 805a090:	1b52      	subs	r2, r2, r5
 805a092:	d41e      	bmi.n	805a0d2 <_malloc_r+0xc6>
 805a094:	2a0b      	cmp	r2, #11
 805a096:	d916      	bls.n	805a0c6 <_malloc_r+0xba>
 805a098:	1961      	adds	r1, r4, r5
 805a09a:	42a3      	cmp	r3, r4
 805a09c:	6025      	str	r5, [r4, #0]
 805a09e:	bf18      	it	ne
 805a0a0:	6059      	strne	r1, [r3, #4]
 805a0a2:	6863      	ldr	r3, [r4, #4]
 805a0a4:	bf08      	it	eq
 805a0a6:	6031      	streq	r1, [r6, #0]
 805a0a8:	5162      	str	r2, [r4, r5]
 805a0aa:	604b      	str	r3, [r1, #4]
 805a0ac:	4638      	mov	r0, r7
 805a0ae:	f104 060b 	add.w	r6, r4, #11
 805a0b2:	f000 fbfb 	bl	805a8ac <__malloc_unlock>
 805a0b6:	f026 0607 	bic.w	r6, r6, #7
 805a0ba:	1d23      	adds	r3, r4, #4
 805a0bc:	1af2      	subs	r2, r6, r3
 805a0be:	d0b6      	beq.n	805a02e <_malloc_r+0x22>
 805a0c0:	1b9b      	subs	r3, r3, r6
 805a0c2:	50a3      	str	r3, [r4, r2]
 805a0c4:	e7b3      	b.n	805a02e <_malloc_r+0x22>
 805a0c6:	6862      	ldr	r2, [r4, #4]
 805a0c8:	42a3      	cmp	r3, r4
 805a0ca:	bf0c      	ite	eq
 805a0cc:	6032      	streq	r2, [r6, #0]
 805a0ce:	605a      	strne	r2, [r3, #4]
 805a0d0:	e7ec      	b.n	805a0ac <_malloc_r+0xa0>
 805a0d2:	4623      	mov	r3, r4
 805a0d4:	6864      	ldr	r4, [r4, #4]
 805a0d6:	e7b2      	b.n	805a03e <_malloc_r+0x32>
 805a0d8:	4634      	mov	r4, r6
 805a0da:	6876      	ldr	r6, [r6, #4]
 805a0dc:	e7b9      	b.n	805a052 <_malloc_r+0x46>
 805a0de:	230c      	movs	r3, #12
 805a0e0:	603b      	str	r3, [r7, #0]
 805a0e2:	4638      	mov	r0, r7
 805a0e4:	f000 fbe2 	bl	805a8ac <__malloc_unlock>
 805a0e8:	e7a1      	b.n	805a02e <_malloc_r+0x22>
 805a0ea:	6025      	str	r5, [r4, #0]
 805a0ec:	e7de      	b.n	805a0ac <_malloc_r+0xa0>
 805a0ee:	bf00      	nop
 805a0f0:	240071d8 	.word	0x240071d8

0805a0f4 <iprintf>:
 805a0f4:	b40f      	push	{r0, r1, r2, r3}
 805a0f6:	4b0a      	ldr	r3, [pc, #40]	; (805a120 <iprintf+0x2c>)
 805a0f8:	b513      	push	{r0, r1, r4, lr}
 805a0fa:	681c      	ldr	r4, [r3, #0]
 805a0fc:	b124      	cbz	r4, 805a108 <iprintf+0x14>
 805a0fe:	69a3      	ldr	r3, [r4, #24]
 805a100:	b913      	cbnz	r3, 805a108 <iprintf+0x14>
 805a102:	4620      	mov	r0, r4
 805a104:	f000 fac6 	bl	805a694 <__sinit>
 805a108:	ab05      	add	r3, sp, #20
 805a10a:	9a04      	ldr	r2, [sp, #16]
 805a10c:	68a1      	ldr	r1, [r4, #8]
 805a10e:	9301      	str	r3, [sp, #4]
 805a110:	4620      	mov	r0, r4
 805a112:	f000 fd57 	bl	805abc4 <_vfiprintf_r>
 805a116:	b002      	add	sp, #8
 805a118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 805a11c:	b004      	add	sp, #16
 805a11e:	4770      	bx	lr
 805a120:	24000034 	.word	0x24000034

0805a124 <_puts_r>:
 805a124:	b570      	push	{r4, r5, r6, lr}
 805a126:	460e      	mov	r6, r1
 805a128:	4605      	mov	r5, r0
 805a12a:	b118      	cbz	r0, 805a134 <_puts_r+0x10>
 805a12c:	6983      	ldr	r3, [r0, #24]
 805a12e:	b90b      	cbnz	r3, 805a134 <_puts_r+0x10>
 805a130:	f000 fab0 	bl	805a694 <__sinit>
 805a134:	69ab      	ldr	r3, [r5, #24]
 805a136:	68ac      	ldr	r4, [r5, #8]
 805a138:	b913      	cbnz	r3, 805a140 <_puts_r+0x1c>
 805a13a:	4628      	mov	r0, r5
 805a13c:	f000 faaa 	bl	805a694 <__sinit>
 805a140:	4b2c      	ldr	r3, [pc, #176]	; (805a1f4 <_puts_r+0xd0>)
 805a142:	429c      	cmp	r4, r3
 805a144:	d120      	bne.n	805a188 <_puts_r+0x64>
 805a146:	686c      	ldr	r4, [r5, #4]
 805a148:	6e63      	ldr	r3, [r4, #100]	; 0x64
 805a14a:	07db      	lsls	r3, r3, #31
 805a14c:	d405      	bmi.n	805a15a <_puts_r+0x36>
 805a14e:	89a3      	ldrh	r3, [r4, #12]
 805a150:	0598      	lsls	r0, r3, #22
 805a152:	d402      	bmi.n	805a15a <_puts_r+0x36>
 805a154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 805a156:	f000 fb3b 	bl	805a7d0 <__retarget_lock_acquire_recursive>
 805a15a:	89a3      	ldrh	r3, [r4, #12]
 805a15c:	0719      	lsls	r1, r3, #28
 805a15e:	d51d      	bpl.n	805a19c <_puts_r+0x78>
 805a160:	6923      	ldr	r3, [r4, #16]
 805a162:	b1db      	cbz	r3, 805a19c <_puts_r+0x78>
 805a164:	3e01      	subs	r6, #1
 805a166:	68a3      	ldr	r3, [r4, #8]
 805a168:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 805a16c:	3b01      	subs	r3, #1
 805a16e:	60a3      	str	r3, [r4, #8]
 805a170:	bb39      	cbnz	r1, 805a1c2 <_puts_r+0x9e>
 805a172:	2b00      	cmp	r3, #0
 805a174:	da38      	bge.n	805a1e8 <_puts_r+0xc4>
 805a176:	4622      	mov	r2, r4
 805a178:	210a      	movs	r1, #10
 805a17a:	4628      	mov	r0, r5
 805a17c:	f000 f8b0 	bl	805a2e0 <__swbuf_r>
 805a180:	3001      	adds	r0, #1
 805a182:	d011      	beq.n	805a1a8 <_puts_r+0x84>
 805a184:	250a      	movs	r5, #10
 805a186:	e011      	b.n	805a1ac <_puts_r+0x88>
 805a188:	4b1b      	ldr	r3, [pc, #108]	; (805a1f8 <_puts_r+0xd4>)
 805a18a:	429c      	cmp	r4, r3
 805a18c:	d101      	bne.n	805a192 <_puts_r+0x6e>
 805a18e:	68ac      	ldr	r4, [r5, #8]
 805a190:	e7da      	b.n	805a148 <_puts_r+0x24>
 805a192:	4b1a      	ldr	r3, [pc, #104]	; (805a1fc <_puts_r+0xd8>)
 805a194:	429c      	cmp	r4, r3
 805a196:	bf08      	it	eq
 805a198:	68ec      	ldreq	r4, [r5, #12]
 805a19a:	e7d5      	b.n	805a148 <_puts_r+0x24>
 805a19c:	4621      	mov	r1, r4
 805a19e:	4628      	mov	r0, r5
 805a1a0:	f000 f8f0 	bl	805a384 <__swsetup_r>
 805a1a4:	2800      	cmp	r0, #0
 805a1a6:	d0dd      	beq.n	805a164 <_puts_r+0x40>
 805a1a8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 805a1ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 805a1ae:	07da      	lsls	r2, r3, #31
 805a1b0:	d405      	bmi.n	805a1be <_puts_r+0x9a>
 805a1b2:	89a3      	ldrh	r3, [r4, #12]
 805a1b4:	059b      	lsls	r3, r3, #22
 805a1b6:	d402      	bmi.n	805a1be <_puts_r+0x9a>
 805a1b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 805a1ba:	f000 fb0a 	bl	805a7d2 <__retarget_lock_release_recursive>
 805a1be:	4628      	mov	r0, r5
 805a1c0:	bd70      	pop	{r4, r5, r6, pc}
 805a1c2:	2b00      	cmp	r3, #0
 805a1c4:	da04      	bge.n	805a1d0 <_puts_r+0xac>
 805a1c6:	69a2      	ldr	r2, [r4, #24]
 805a1c8:	429a      	cmp	r2, r3
 805a1ca:	dc06      	bgt.n	805a1da <_puts_r+0xb6>
 805a1cc:	290a      	cmp	r1, #10
 805a1ce:	d004      	beq.n	805a1da <_puts_r+0xb6>
 805a1d0:	6823      	ldr	r3, [r4, #0]
 805a1d2:	1c5a      	adds	r2, r3, #1
 805a1d4:	6022      	str	r2, [r4, #0]
 805a1d6:	7019      	strb	r1, [r3, #0]
 805a1d8:	e7c5      	b.n	805a166 <_puts_r+0x42>
 805a1da:	4622      	mov	r2, r4
 805a1dc:	4628      	mov	r0, r5
 805a1de:	f000 f87f 	bl	805a2e0 <__swbuf_r>
 805a1e2:	3001      	adds	r0, #1
 805a1e4:	d1bf      	bne.n	805a166 <_puts_r+0x42>
 805a1e6:	e7df      	b.n	805a1a8 <_puts_r+0x84>
 805a1e8:	6823      	ldr	r3, [r4, #0]
 805a1ea:	250a      	movs	r5, #10
 805a1ec:	1c5a      	adds	r2, r3, #1
 805a1ee:	6022      	str	r2, [r4, #0]
 805a1f0:	701d      	strb	r5, [r3, #0]
 805a1f2:	e7db      	b.n	805a1ac <_puts_r+0x88>
 805a1f4:	0805be08 	.word	0x0805be08
 805a1f8:	0805be28 	.word	0x0805be28
 805a1fc:	0805bde8 	.word	0x0805bde8

0805a200 <puts>:
 805a200:	4b02      	ldr	r3, [pc, #8]	; (805a20c <puts+0xc>)
 805a202:	4601      	mov	r1, r0
 805a204:	6818      	ldr	r0, [r3, #0]
 805a206:	f7ff bf8d 	b.w	805a124 <_puts_r>
 805a20a:	bf00      	nop
 805a20c:	24000034 	.word	0x24000034

0805a210 <_sbrk_r>:
 805a210:	b538      	push	{r3, r4, r5, lr}
 805a212:	4d06      	ldr	r5, [pc, #24]	; (805a22c <_sbrk_r+0x1c>)
 805a214:	2300      	movs	r3, #0
 805a216:	4604      	mov	r4, r0
 805a218:	4608      	mov	r0, r1
 805a21a:	602b      	str	r3, [r5, #0]
 805a21c:	f7e7 fe30 	bl	8041e80 <_sbrk>
 805a220:	1c43      	adds	r3, r0, #1
 805a222:	d102      	bne.n	805a22a <_sbrk_r+0x1a>
 805a224:	682b      	ldr	r3, [r5, #0]
 805a226:	b103      	cbz	r3, 805a22a <_sbrk_r+0x1a>
 805a228:	6023      	str	r3, [r4, #0]
 805a22a:	bd38      	pop	{r3, r4, r5, pc}
 805a22c:	240071e4 	.word	0x240071e4

0805a230 <siprintf>:
 805a230:	b40e      	push	{r1, r2, r3}
 805a232:	b500      	push	{lr}
 805a234:	b09c      	sub	sp, #112	; 0x70
 805a236:	ab1d      	add	r3, sp, #116	; 0x74
 805a238:	9002      	str	r0, [sp, #8]
 805a23a:	9006      	str	r0, [sp, #24]
 805a23c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 805a240:	4809      	ldr	r0, [pc, #36]	; (805a268 <siprintf+0x38>)
 805a242:	9107      	str	r1, [sp, #28]
 805a244:	9104      	str	r1, [sp, #16]
 805a246:	4909      	ldr	r1, [pc, #36]	; (805a26c <siprintf+0x3c>)
 805a248:	f853 2b04 	ldr.w	r2, [r3], #4
 805a24c:	9105      	str	r1, [sp, #20]
 805a24e:	6800      	ldr	r0, [r0, #0]
 805a250:	9301      	str	r3, [sp, #4]
 805a252:	a902      	add	r1, sp, #8
 805a254:	f000 fb8c 	bl	805a970 <_svfiprintf_r>
 805a258:	9b02      	ldr	r3, [sp, #8]
 805a25a:	2200      	movs	r2, #0
 805a25c:	701a      	strb	r2, [r3, #0]
 805a25e:	b01c      	add	sp, #112	; 0x70
 805a260:	f85d eb04 	ldr.w	lr, [sp], #4
 805a264:	b003      	add	sp, #12
 805a266:	4770      	bx	lr
 805a268:	24000034 	.word	0x24000034
 805a26c:	ffff0208 	.word	0xffff0208

0805a270 <strchr>:
 805a270:	b2c9      	uxtb	r1, r1
 805a272:	4603      	mov	r3, r0
 805a274:	f810 2b01 	ldrb.w	r2, [r0], #1
 805a278:	b11a      	cbz	r2, 805a282 <strchr+0x12>
 805a27a:	428a      	cmp	r2, r1
 805a27c:	d1f9      	bne.n	805a272 <strchr+0x2>
 805a27e:	4618      	mov	r0, r3
 805a280:	4770      	bx	lr
 805a282:	2900      	cmp	r1, #0
 805a284:	bf18      	it	ne
 805a286:	2300      	movne	r3, #0
 805a288:	e7f9      	b.n	805a27e <strchr+0xe>

0805a28a <strncmp>:
 805a28a:	b510      	push	{r4, lr}
 805a28c:	b17a      	cbz	r2, 805a2ae <strncmp+0x24>
 805a28e:	4603      	mov	r3, r0
 805a290:	3901      	subs	r1, #1
 805a292:	1884      	adds	r4, r0, r2
 805a294:	f813 0b01 	ldrb.w	r0, [r3], #1
 805a298:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 805a29c:	4290      	cmp	r0, r2
 805a29e:	d101      	bne.n	805a2a4 <strncmp+0x1a>
 805a2a0:	42a3      	cmp	r3, r4
 805a2a2:	d101      	bne.n	805a2a8 <strncmp+0x1e>
 805a2a4:	1a80      	subs	r0, r0, r2
 805a2a6:	bd10      	pop	{r4, pc}
 805a2a8:	2800      	cmp	r0, #0
 805a2aa:	d1f3      	bne.n	805a294 <strncmp+0xa>
 805a2ac:	e7fa      	b.n	805a2a4 <strncmp+0x1a>
 805a2ae:	4610      	mov	r0, r2
 805a2b0:	e7f9      	b.n	805a2a6 <strncmp+0x1c>

0805a2b2 <strstr>:
 805a2b2:	780a      	ldrb	r2, [r1, #0]
 805a2b4:	b570      	push	{r4, r5, r6, lr}
 805a2b6:	b96a      	cbnz	r2, 805a2d4 <strstr+0x22>
 805a2b8:	bd70      	pop	{r4, r5, r6, pc}
 805a2ba:	429a      	cmp	r2, r3
 805a2bc:	d109      	bne.n	805a2d2 <strstr+0x20>
 805a2be:	460c      	mov	r4, r1
 805a2c0:	4605      	mov	r5, r0
 805a2c2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 805a2c6:	2b00      	cmp	r3, #0
 805a2c8:	d0f6      	beq.n	805a2b8 <strstr+0x6>
 805a2ca:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 805a2ce:	429e      	cmp	r6, r3
 805a2d0:	d0f7      	beq.n	805a2c2 <strstr+0x10>
 805a2d2:	3001      	adds	r0, #1
 805a2d4:	7803      	ldrb	r3, [r0, #0]
 805a2d6:	2b00      	cmp	r3, #0
 805a2d8:	d1ef      	bne.n	805a2ba <strstr+0x8>
 805a2da:	4618      	mov	r0, r3
 805a2dc:	e7ec      	b.n	805a2b8 <strstr+0x6>
	...

0805a2e0 <__swbuf_r>:
 805a2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 805a2e2:	460e      	mov	r6, r1
 805a2e4:	4614      	mov	r4, r2
 805a2e6:	4605      	mov	r5, r0
 805a2e8:	b118      	cbz	r0, 805a2f2 <__swbuf_r+0x12>
 805a2ea:	6983      	ldr	r3, [r0, #24]
 805a2ec:	b90b      	cbnz	r3, 805a2f2 <__swbuf_r+0x12>
 805a2ee:	f000 f9d1 	bl	805a694 <__sinit>
 805a2f2:	4b21      	ldr	r3, [pc, #132]	; (805a378 <__swbuf_r+0x98>)
 805a2f4:	429c      	cmp	r4, r3
 805a2f6:	d12b      	bne.n	805a350 <__swbuf_r+0x70>
 805a2f8:	686c      	ldr	r4, [r5, #4]
 805a2fa:	69a3      	ldr	r3, [r4, #24]
 805a2fc:	60a3      	str	r3, [r4, #8]
 805a2fe:	89a3      	ldrh	r3, [r4, #12]
 805a300:	071a      	lsls	r2, r3, #28
 805a302:	d52f      	bpl.n	805a364 <__swbuf_r+0x84>
 805a304:	6923      	ldr	r3, [r4, #16]
 805a306:	b36b      	cbz	r3, 805a364 <__swbuf_r+0x84>
 805a308:	6923      	ldr	r3, [r4, #16]
 805a30a:	6820      	ldr	r0, [r4, #0]
 805a30c:	1ac0      	subs	r0, r0, r3
 805a30e:	6963      	ldr	r3, [r4, #20]
 805a310:	b2f6      	uxtb	r6, r6
 805a312:	4283      	cmp	r3, r0
 805a314:	4637      	mov	r7, r6
 805a316:	dc04      	bgt.n	805a322 <__swbuf_r+0x42>
 805a318:	4621      	mov	r1, r4
 805a31a:	4628      	mov	r0, r5
 805a31c:	f000 f926 	bl	805a56c <_fflush_r>
 805a320:	bb30      	cbnz	r0, 805a370 <__swbuf_r+0x90>
 805a322:	68a3      	ldr	r3, [r4, #8]
 805a324:	3b01      	subs	r3, #1
 805a326:	60a3      	str	r3, [r4, #8]
 805a328:	6823      	ldr	r3, [r4, #0]
 805a32a:	1c5a      	adds	r2, r3, #1
 805a32c:	6022      	str	r2, [r4, #0]
 805a32e:	701e      	strb	r6, [r3, #0]
 805a330:	6963      	ldr	r3, [r4, #20]
 805a332:	3001      	adds	r0, #1
 805a334:	4283      	cmp	r3, r0
 805a336:	d004      	beq.n	805a342 <__swbuf_r+0x62>
 805a338:	89a3      	ldrh	r3, [r4, #12]
 805a33a:	07db      	lsls	r3, r3, #31
 805a33c:	d506      	bpl.n	805a34c <__swbuf_r+0x6c>
 805a33e:	2e0a      	cmp	r6, #10
 805a340:	d104      	bne.n	805a34c <__swbuf_r+0x6c>
 805a342:	4621      	mov	r1, r4
 805a344:	4628      	mov	r0, r5
 805a346:	f000 f911 	bl	805a56c <_fflush_r>
 805a34a:	b988      	cbnz	r0, 805a370 <__swbuf_r+0x90>
 805a34c:	4638      	mov	r0, r7
 805a34e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 805a350:	4b0a      	ldr	r3, [pc, #40]	; (805a37c <__swbuf_r+0x9c>)
 805a352:	429c      	cmp	r4, r3
 805a354:	d101      	bne.n	805a35a <__swbuf_r+0x7a>
 805a356:	68ac      	ldr	r4, [r5, #8]
 805a358:	e7cf      	b.n	805a2fa <__swbuf_r+0x1a>
 805a35a:	4b09      	ldr	r3, [pc, #36]	; (805a380 <__swbuf_r+0xa0>)
 805a35c:	429c      	cmp	r4, r3
 805a35e:	bf08      	it	eq
 805a360:	68ec      	ldreq	r4, [r5, #12]
 805a362:	e7ca      	b.n	805a2fa <__swbuf_r+0x1a>
 805a364:	4621      	mov	r1, r4
 805a366:	4628      	mov	r0, r5
 805a368:	f000 f80c 	bl	805a384 <__swsetup_r>
 805a36c:	2800      	cmp	r0, #0
 805a36e:	d0cb      	beq.n	805a308 <__swbuf_r+0x28>
 805a370:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 805a374:	e7ea      	b.n	805a34c <__swbuf_r+0x6c>
 805a376:	bf00      	nop
 805a378:	0805be08 	.word	0x0805be08
 805a37c:	0805be28 	.word	0x0805be28
 805a380:	0805bde8 	.word	0x0805bde8

0805a384 <__swsetup_r>:
 805a384:	4b32      	ldr	r3, [pc, #200]	; (805a450 <__swsetup_r+0xcc>)
 805a386:	b570      	push	{r4, r5, r6, lr}
 805a388:	681d      	ldr	r5, [r3, #0]
 805a38a:	4606      	mov	r6, r0
 805a38c:	460c      	mov	r4, r1
 805a38e:	b125      	cbz	r5, 805a39a <__swsetup_r+0x16>
 805a390:	69ab      	ldr	r3, [r5, #24]
 805a392:	b913      	cbnz	r3, 805a39a <__swsetup_r+0x16>
 805a394:	4628      	mov	r0, r5
 805a396:	f000 f97d 	bl	805a694 <__sinit>
 805a39a:	4b2e      	ldr	r3, [pc, #184]	; (805a454 <__swsetup_r+0xd0>)
 805a39c:	429c      	cmp	r4, r3
 805a39e:	d10f      	bne.n	805a3c0 <__swsetup_r+0x3c>
 805a3a0:	686c      	ldr	r4, [r5, #4]
 805a3a2:	89a3      	ldrh	r3, [r4, #12]
 805a3a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 805a3a8:	0719      	lsls	r1, r3, #28
 805a3aa:	d42c      	bmi.n	805a406 <__swsetup_r+0x82>
 805a3ac:	06dd      	lsls	r5, r3, #27
 805a3ae:	d411      	bmi.n	805a3d4 <__swsetup_r+0x50>
 805a3b0:	2309      	movs	r3, #9
 805a3b2:	6033      	str	r3, [r6, #0]
 805a3b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 805a3b8:	81a3      	strh	r3, [r4, #12]
 805a3ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 805a3be:	e03e      	b.n	805a43e <__swsetup_r+0xba>
 805a3c0:	4b25      	ldr	r3, [pc, #148]	; (805a458 <__swsetup_r+0xd4>)
 805a3c2:	429c      	cmp	r4, r3
 805a3c4:	d101      	bne.n	805a3ca <__swsetup_r+0x46>
 805a3c6:	68ac      	ldr	r4, [r5, #8]
 805a3c8:	e7eb      	b.n	805a3a2 <__swsetup_r+0x1e>
 805a3ca:	4b24      	ldr	r3, [pc, #144]	; (805a45c <__swsetup_r+0xd8>)
 805a3cc:	429c      	cmp	r4, r3
 805a3ce:	bf08      	it	eq
 805a3d0:	68ec      	ldreq	r4, [r5, #12]
 805a3d2:	e7e6      	b.n	805a3a2 <__swsetup_r+0x1e>
 805a3d4:	0758      	lsls	r0, r3, #29
 805a3d6:	d512      	bpl.n	805a3fe <__swsetup_r+0x7a>
 805a3d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 805a3da:	b141      	cbz	r1, 805a3ee <__swsetup_r+0x6a>
 805a3dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 805a3e0:	4299      	cmp	r1, r3
 805a3e2:	d002      	beq.n	805a3ea <__swsetup_r+0x66>
 805a3e4:	4630      	mov	r0, r6
 805a3e6:	f7ff fda5 	bl	8059f34 <_free_r>
 805a3ea:	2300      	movs	r3, #0
 805a3ec:	6363      	str	r3, [r4, #52]	; 0x34
 805a3ee:	89a3      	ldrh	r3, [r4, #12]
 805a3f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 805a3f4:	81a3      	strh	r3, [r4, #12]
 805a3f6:	2300      	movs	r3, #0
 805a3f8:	6063      	str	r3, [r4, #4]
 805a3fa:	6923      	ldr	r3, [r4, #16]
 805a3fc:	6023      	str	r3, [r4, #0]
 805a3fe:	89a3      	ldrh	r3, [r4, #12]
 805a400:	f043 0308 	orr.w	r3, r3, #8
 805a404:	81a3      	strh	r3, [r4, #12]
 805a406:	6923      	ldr	r3, [r4, #16]
 805a408:	b94b      	cbnz	r3, 805a41e <__swsetup_r+0x9a>
 805a40a:	89a3      	ldrh	r3, [r4, #12]
 805a40c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 805a410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 805a414:	d003      	beq.n	805a41e <__swsetup_r+0x9a>
 805a416:	4621      	mov	r1, r4
 805a418:	4630      	mov	r0, r6
 805a41a:	f000 fa01 	bl	805a820 <__smakebuf_r>
 805a41e:	89a0      	ldrh	r0, [r4, #12]
 805a420:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 805a424:	f010 0301 	ands.w	r3, r0, #1
 805a428:	d00a      	beq.n	805a440 <__swsetup_r+0xbc>
 805a42a:	2300      	movs	r3, #0
 805a42c:	60a3      	str	r3, [r4, #8]
 805a42e:	6963      	ldr	r3, [r4, #20]
 805a430:	425b      	negs	r3, r3
 805a432:	61a3      	str	r3, [r4, #24]
 805a434:	6923      	ldr	r3, [r4, #16]
 805a436:	b943      	cbnz	r3, 805a44a <__swsetup_r+0xc6>
 805a438:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 805a43c:	d1ba      	bne.n	805a3b4 <__swsetup_r+0x30>
 805a43e:	bd70      	pop	{r4, r5, r6, pc}
 805a440:	0781      	lsls	r1, r0, #30
 805a442:	bf58      	it	pl
 805a444:	6963      	ldrpl	r3, [r4, #20]
 805a446:	60a3      	str	r3, [r4, #8]
 805a448:	e7f4      	b.n	805a434 <__swsetup_r+0xb0>
 805a44a:	2000      	movs	r0, #0
 805a44c:	e7f7      	b.n	805a43e <__swsetup_r+0xba>
 805a44e:	bf00      	nop
 805a450:	24000034 	.word	0x24000034
 805a454:	0805be08 	.word	0x0805be08
 805a458:	0805be28 	.word	0x0805be28
 805a45c:	0805bde8 	.word	0x0805bde8

0805a460 <__sflush_r>:
 805a460:	898a      	ldrh	r2, [r1, #12]
 805a462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 805a466:	4605      	mov	r5, r0
 805a468:	0710      	lsls	r0, r2, #28
 805a46a:	460c      	mov	r4, r1
 805a46c:	d458      	bmi.n	805a520 <__sflush_r+0xc0>
 805a46e:	684b      	ldr	r3, [r1, #4]
 805a470:	2b00      	cmp	r3, #0
 805a472:	dc05      	bgt.n	805a480 <__sflush_r+0x20>
 805a474:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 805a476:	2b00      	cmp	r3, #0
 805a478:	dc02      	bgt.n	805a480 <__sflush_r+0x20>
 805a47a:	2000      	movs	r0, #0
 805a47c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 805a480:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 805a482:	2e00      	cmp	r6, #0
 805a484:	d0f9      	beq.n	805a47a <__sflush_r+0x1a>
 805a486:	2300      	movs	r3, #0
 805a488:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 805a48c:	682f      	ldr	r7, [r5, #0]
 805a48e:	602b      	str	r3, [r5, #0]
 805a490:	d032      	beq.n	805a4f8 <__sflush_r+0x98>
 805a492:	6d60      	ldr	r0, [r4, #84]	; 0x54
 805a494:	89a3      	ldrh	r3, [r4, #12]
 805a496:	075a      	lsls	r2, r3, #29
 805a498:	d505      	bpl.n	805a4a6 <__sflush_r+0x46>
 805a49a:	6863      	ldr	r3, [r4, #4]
 805a49c:	1ac0      	subs	r0, r0, r3
 805a49e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 805a4a0:	b10b      	cbz	r3, 805a4a6 <__sflush_r+0x46>
 805a4a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 805a4a4:	1ac0      	subs	r0, r0, r3
 805a4a6:	2300      	movs	r3, #0
 805a4a8:	4602      	mov	r2, r0
 805a4aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 805a4ac:	6a21      	ldr	r1, [r4, #32]
 805a4ae:	4628      	mov	r0, r5
 805a4b0:	47b0      	blx	r6
 805a4b2:	1c43      	adds	r3, r0, #1
 805a4b4:	89a3      	ldrh	r3, [r4, #12]
 805a4b6:	d106      	bne.n	805a4c6 <__sflush_r+0x66>
 805a4b8:	6829      	ldr	r1, [r5, #0]
 805a4ba:	291d      	cmp	r1, #29
 805a4bc:	d82c      	bhi.n	805a518 <__sflush_r+0xb8>
 805a4be:	4a2a      	ldr	r2, [pc, #168]	; (805a568 <__sflush_r+0x108>)
 805a4c0:	40ca      	lsrs	r2, r1
 805a4c2:	07d6      	lsls	r6, r2, #31
 805a4c4:	d528      	bpl.n	805a518 <__sflush_r+0xb8>
 805a4c6:	2200      	movs	r2, #0
 805a4c8:	6062      	str	r2, [r4, #4]
 805a4ca:	04d9      	lsls	r1, r3, #19
 805a4cc:	6922      	ldr	r2, [r4, #16]
 805a4ce:	6022      	str	r2, [r4, #0]
 805a4d0:	d504      	bpl.n	805a4dc <__sflush_r+0x7c>
 805a4d2:	1c42      	adds	r2, r0, #1
 805a4d4:	d101      	bne.n	805a4da <__sflush_r+0x7a>
 805a4d6:	682b      	ldr	r3, [r5, #0]
 805a4d8:	b903      	cbnz	r3, 805a4dc <__sflush_r+0x7c>
 805a4da:	6560      	str	r0, [r4, #84]	; 0x54
 805a4dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 805a4de:	602f      	str	r7, [r5, #0]
 805a4e0:	2900      	cmp	r1, #0
 805a4e2:	d0ca      	beq.n	805a47a <__sflush_r+0x1a>
 805a4e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 805a4e8:	4299      	cmp	r1, r3
 805a4ea:	d002      	beq.n	805a4f2 <__sflush_r+0x92>
 805a4ec:	4628      	mov	r0, r5
 805a4ee:	f7ff fd21 	bl	8059f34 <_free_r>
 805a4f2:	2000      	movs	r0, #0
 805a4f4:	6360      	str	r0, [r4, #52]	; 0x34
 805a4f6:	e7c1      	b.n	805a47c <__sflush_r+0x1c>
 805a4f8:	6a21      	ldr	r1, [r4, #32]
 805a4fa:	2301      	movs	r3, #1
 805a4fc:	4628      	mov	r0, r5
 805a4fe:	47b0      	blx	r6
 805a500:	1c41      	adds	r1, r0, #1
 805a502:	d1c7      	bne.n	805a494 <__sflush_r+0x34>
 805a504:	682b      	ldr	r3, [r5, #0]
 805a506:	2b00      	cmp	r3, #0
 805a508:	d0c4      	beq.n	805a494 <__sflush_r+0x34>
 805a50a:	2b1d      	cmp	r3, #29
 805a50c:	d001      	beq.n	805a512 <__sflush_r+0xb2>
 805a50e:	2b16      	cmp	r3, #22
 805a510:	d101      	bne.n	805a516 <__sflush_r+0xb6>
 805a512:	602f      	str	r7, [r5, #0]
 805a514:	e7b1      	b.n	805a47a <__sflush_r+0x1a>
 805a516:	89a3      	ldrh	r3, [r4, #12]
 805a518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 805a51c:	81a3      	strh	r3, [r4, #12]
 805a51e:	e7ad      	b.n	805a47c <__sflush_r+0x1c>
 805a520:	690f      	ldr	r7, [r1, #16]
 805a522:	2f00      	cmp	r7, #0
 805a524:	d0a9      	beq.n	805a47a <__sflush_r+0x1a>
 805a526:	0793      	lsls	r3, r2, #30
 805a528:	680e      	ldr	r6, [r1, #0]
 805a52a:	bf08      	it	eq
 805a52c:	694b      	ldreq	r3, [r1, #20]
 805a52e:	600f      	str	r7, [r1, #0]
 805a530:	bf18      	it	ne
 805a532:	2300      	movne	r3, #0
 805a534:	eba6 0807 	sub.w	r8, r6, r7
 805a538:	608b      	str	r3, [r1, #8]
 805a53a:	f1b8 0f00 	cmp.w	r8, #0
 805a53e:	dd9c      	ble.n	805a47a <__sflush_r+0x1a>
 805a540:	6a21      	ldr	r1, [r4, #32]
 805a542:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 805a544:	4643      	mov	r3, r8
 805a546:	463a      	mov	r2, r7
 805a548:	4628      	mov	r0, r5
 805a54a:	47b0      	blx	r6
 805a54c:	2800      	cmp	r0, #0
 805a54e:	dc06      	bgt.n	805a55e <__sflush_r+0xfe>
 805a550:	89a3      	ldrh	r3, [r4, #12]
 805a552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 805a556:	81a3      	strh	r3, [r4, #12]
 805a558:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 805a55c:	e78e      	b.n	805a47c <__sflush_r+0x1c>
 805a55e:	4407      	add	r7, r0
 805a560:	eba8 0800 	sub.w	r8, r8, r0
 805a564:	e7e9      	b.n	805a53a <__sflush_r+0xda>
 805a566:	bf00      	nop
 805a568:	20400001 	.word	0x20400001

0805a56c <_fflush_r>:
 805a56c:	b538      	push	{r3, r4, r5, lr}
 805a56e:	690b      	ldr	r3, [r1, #16]
 805a570:	4605      	mov	r5, r0
 805a572:	460c      	mov	r4, r1
 805a574:	b913      	cbnz	r3, 805a57c <_fflush_r+0x10>
 805a576:	2500      	movs	r5, #0
 805a578:	4628      	mov	r0, r5
 805a57a:	bd38      	pop	{r3, r4, r5, pc}
 805a57c:	b118      	cbz	r0, 805a586 <_fflush_r+0x1a>
 805a57e:	6983      	ldr	r3, [r0, #24]
 805a580:	b90b      	cbnz	r3, 805a586 <_fflush_r+0x1a>
 805a582:	f000 f887 	bl	805a694 <__sinit>
 805a586:	4b14      	ldr	r3, [pc, #80]	; (805a5d8 <_fflush_r+0x6c>)
 805a588:	429c      	cmp	r4, r3
 805a58a:	d11b      	bne.n	805a5c4 <_fflush_r+0x58>
 805a58c:	686c      	ldr	r4, [r5, #4]
 805a58e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 805a592:	2b00      	cmp	r3, #0
 805a594:	d0ef      	beq.n	805a576 <_fflush_r+0xa>
 805a596:	6e62      	ldr	r2, [r4, #100]	; 0x64
 805a598:	07d0      	lsls	r0, r2, #31
 805a59a:	d404      	bmi.n	805a5a6 <_fflush_r+0x3a>
 805a59c:	0599      	lsls	r1, r3, #22
 805a59e:	d402      	bmi.n	805a5a6 <_fflush_r+0x3a>
 805a5a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 805a5a2:	f000 f915 	bl	805a7d0 <__retarget_lock_acquire_recursive>
 805a5a6:	4628      	mov	r0, r5
 805a5a8:	4621      	mov	r1, r4
 805a5aa:	f7ff ff59 	bl	805a460 <__sflush_r>
 805a5ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 805a5b0:	07da      	lsls	r2, r3, #31
 805a5b2:	4605      	mov	r5, r0
 805a5b4:	d4e0      	bmi.n	805a578 <_fflush_r+0xc>
 805a5b6:	89a3      	ldrh	r3, [r4, #12]
 805a5b8:	059b      	lsls	r3, r3, #22
 805a5ba:	d4dd      	bmi.n	805a578 <_fflush_r+0xc>
 805a5bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 805a5be:	f000 f908 	bl	805a7d2 <__retarget_lock_release_recursive>
 805a5c2:	e7d9      	b.n	805a578 <_fflush_r+0xc>
 805a5c4:	4b05      	ldr	r3, [pc, #20]	; (805a5dc <_fflush_r+0x70>)
 805a5c6:	429c      	cmp	r4, r3
 805a5c8:	d101      	bne.n	805a5ce <_fflush_r+0x62>
 805a5ca:	68ac      	ldr	r4, [r5, #8]
 805a5cc:	e7df      	b.n	805a58e <_fflush_r+0x22>
 805a5ce:	4b04      	ldr	r3, [pc, #16]	; (805a5e0 <_fflush_r+0x74>)
 805a5d0:	429c      	cmp	r4, r3
 805a5d2:	bf08      	it	eq
 805a5d4:	68ec      	ldreq	r4, [r5, #12]
 805a5d6:	e7da      	b.n	805a58e <_fflush_r+0x22>
 805a5d8:	0805be08 	.word	0x0805be08
 805a5dc:	0805be28 	.word	0x0805be28
 805a5e0:	0805bde8 	.word	0x0805bde8

0805a5e4 <std>:
 805a5e4:	2300      	movs	r3, #0
 805a5e6:	b510      	push	{r4, lr}
 805a5e8:	4604      	mov	r4, r0
 805a5ea:	e9c0 3300 	strd	r3, r3, [r0]
 805a5ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 805a5f2:	6083      	str	r3, [r0, #8]
 805a5f4:	8181      	strh	r1, [r0, #12]
 805a5f6:	6643      	str	r3, [r0, #100]	; 0x64
 805a5f8:	81c2      	strh	r2, [r0, #14]
 805a5fa:	6183      	str	r3, [r0, #24]
 805a5fc:	4619      	mov	r1, r3
 805a5fe:	2208      	movs	r2, #8
 805a600:	305c      	adds	r0, #92	; 0x5c
 805a602:	f7ff fc8f 	bl	8059f24 <memset>
 805a606:	4b05      	ldr	r3, [pc, #20]	; (805a61c <std+0x38>)
 805a608:	6263      	str	r3, [r4, #36]	; 0x24
 805a60a:	4b05      	ldr	r3, [pc, #20]	; (805a620 <std+0x3c>)
 805a60c:	62a3      	str	r3, [r4, #40]	; 0x28
 805a60e:	4b05      	ldr	r3, [pc, #20]	; (805a624 <std+0x40>)
 805a610:	62e3      	str	r3, [r4, #44]	; 0x2c
 805a612:	4b05      	ldr	r3, [pc, #20]	; (805a628 <std+0x44>)
 805a614:	6224      	str	r4, [r4, #32]
 805a616:	6323      	str	r3, [r4, #48]	; 0x30
 805a618:	bd10      	pop	{r4, pc}
 805a61a:	bf00      	nop
 805a61c:	0805b14d 	.word	0x0805b14d
 805a620:	0805b16f 	.word	0x0805b16f
 805a624:	0805b1a7 	.word	0x0805b1a7
 805a628:	0805b1cb 	.word	0x0805b1cb

0805a62c <_cleanup_r>:
 805a62c:	4901      	ldr	r1, [pc, #4]	; (805a634 <_cleanup_r+0x8>)
 805a62e:	f000 b8af 	b.w	805a790 <_fwalk_reent>
 805a632:	bf00      	nop
 805a634:	0805a56d 	.word	0x0805a56d

0805a638 <__sfmoreglue>:
 805a638:	b570      	push	{r4, r5, r6, lr}
 805a63a:	2268      	movs	r2, #104	; 0x68
 805a63c:	1e4d      	subs	r5, r1, #1
 805a63e:	4355      	muls	r5, r2
 805a640:	460e      	mov	r6, r1
 805a642:	f105 0174 	add.w	r1, r5, #116	; 0x74
 805a646:	f7ff fce1 	bl	805a00c <_malloc_r>
 805a64a:	4604      	mov	r4, r0
 805a64c:	b140      	cbz	r0, 805a660 <__sfmoreglue+0x28>
 805a64e:	2100      	movs	r1, #0
 805a650:	e9c0 1600 	strd	r1, r6, [r0]
 805a654:	300c      	adds	r0, #12
 805a656:	60a0      	str	r0, [r4, #8]
 805a658:	f105 0268 	add.w	r2, r5, #104	; 0x68
 805a65c:	f7ff fc62 	bl	8059f24 <memset>
 805a660:	4620      	mov	r0, r4
 805a662:	bd70      	pop	{r4, r5, r6, pc}

0805a664 <__sfp_lock_acquire>:
 805a664:	4801      	ldr	r0, [pc, #4]	; (805a66c <__sfp_lock_acquire+0x8>)
 805a666:	f000 b8b3 	b.w	805a7d0 <__retarget_lock_acquire_recursive>
 805a66a:	bf00      	nop
 805a66c:	240071e1 	.word	0x240071e1

0805a670 <__sfp_lock_release>:
 805a670:	4801      	ldr	r0, [pc, #4]	; (805a678 <__sfp_lock_release+0x8>)
 805a672:	f000 b8ae 	b.w	805a7d2 <__retarget_lock_release_recursive>
 805a676:	bf00      	nop
 805a678:	240071e1 	.word	0x240071e1

0805a67c <__sinit_lock_acquire>:
 805a67c:	4801      	ldr	r0, [pc, #4]	; (805a684 <__sinit_lock_acquire+0x8>)
 805a67e:	f000 b8a7 	b.w	805a7d0 <__retarget_lock_acquire_recursive>
 805a682:	bf00      	nop
 805a684:	240071e2 	.word	0x240071e2

0805a688 <__sinit_lock_release>:
 805a688:	4801      	ldr	r0, [pc, #4]	; (805a690 <__sinit_lock_release+0x8>)
 805a68a:	f000 b8a2 	b.w	805a7d2 <__retarget_lock_release_recursive>
 805a68e:	bf00      	nop
 805a690:	240071e2 	.word	0x240071e2

0805a694 <__sinit>:
 805a694:	b510      	push	{r4, lr}
 805a696:	4604      	mov	r4, r0
 805a698:	f7ff fff0 	bl	805a67c <__sinit_lock_acquire>
 805a69c:	69a3      	ldr	r3, [r4, #24]
 805a69e:	b11b      	cbz	r3, 805a6a8 <__sinit+0x14>
 805a6a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 805a6a4:	f7ff bff0 	b.w	805a688 <__sinit_lock_release>
 805a6a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 805a6ac:	6523      	str	r3, [r4, #80]	; 0x50
 805a6ae:	4b13      	ldr	r3, [pc, #76]	; (805a6fc <__sinit+0x68>)
 805a6b0:	4a13      	ldr	r2, [pc, #76]	; (805a700 <__sinit+0x6c>)
 805a6b2:	681b      	ldr	r3, [r3, #0]
 805a6b4:	62a2      	str	r2, [r4, #40]	; 0x28
 805a6b6:	42a3      	cmp	r3, r4
 805a6b8:	bf04      	itt	eq
 805a6ba:	2301      	moveq	r3, #1
 805a6bc:	61a3      	streq	r3, [r4, #24]
 805a6be:	4620      	mov	r0, r4
 805a6c0:	f000 f820 	bl	805a704 <__sfp>
 805a6c4:	6060      	str	r0, [r4, #4]
 805a6c6:	4620      	mov	r0, r4
 805a6c8:	f000 f81c 	bl	805a704 <__sfp>
 805a6cc:	60a0      	str	r0, [r4, #8]
 805a6ce:	4620      	mov	r0, r4
 805a6d0:	f000 f818 	bl	805a704 <__sfp>
 805a6d4:	2200      	movs	r2, #0
 805a6d6:	60e0      	str	r0, [r4, #12]
 805a6d8:	2104      	movs	r1, #4
 805a6da:	6860      	ldr	r0, [r4, #4]
 805a6dc:	f7ff ff82 	bl	805a5e4 <std>
 805a6e0:	68a0      	ldr	r0, [r4, #8]
 805a6e2:	2201      	movs	r2, #1
 805a6e4:	2109      	movs	r1, #9
 805a6e6:	f7ff ff7d 	bl	805a5e4 <std>
 805a6ea:	68e0      	ldr	r0, [r4, #12]
 805a6ec:	2202      	movs	r2, #2
 805a6ee:	2112      	movs	r1, #18
 805a6f0:	f7ff ff78 	bl	805a5e4 <std>
 805a6f4:	2301      	movs	r3, #1
 805a6f6:	61a3      	str	r3, [r4, #24]
 805a6f8:	e7d2      	b.n	805a6a0 <__sinit+0xc>
 805a6fa:	bf00      	nop
 805a6fc:	0805bde4 	.word	0x0805bde4
 805a700:	0805a62d 	.word	0x0805a62d

0805a704 <__sfp>:
 805a704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 805a706:	4607      	mov	r7, r0
 805a708:	f7ff ffac 	bl	805a664 <__sfp_lock_acquire>
 805a70c:	4b1e      	ldr	r3, [pc, #120]	; (805a788 <__sfp+0x84>)
 805a70e:	681e      	ldr	r6, [r3, #0]
 805a710:	69b3      	ldr	r3, [r6, #24]
 805a712:	b913      	cbnz	r3, 805a71a <__sfp+0x16>
 805a714:	4630      	mov	r0, r6
 805a716:	f7ff ffbd 	bl	805a694 <__sinit>
 805a71a:	3648      	adds	r6, #72	; 0x48
 805a71c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 805a720:	3b01      	subs	r3, #1
 805a722:	d503      	bpl.n	805a72c <__sfp+0x28>
 805a724:	6833      	ldr	r3, [r6, #0]
 805a726:	b30b      	cbz	r3, 805a76c <__sfp+0x68>
 805a728:	6836      	ldr	r6, [r6, #0]
 805a72a:	e7f7      	b.n	805a71c <__sfp+0x18>
 805a72c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 805a730:	b9d5      	cbnz	r5, 805a768 <__sfp+0x64>
 805a732:	4b16      	ldr	r3, [pc, #88]	; (805a78c <__sfp+0x88>)
 805a734:	60e3      	str	r3, [r4, #12]
 805a736:	f104 0058 	add.w	r0, r4, #88	; 0x58
 805a73a:	6665      	str	r5, [r4, #100]	; 0x64
 805a73c:	f000 f847 	bl	805a7ce <__retarget_lock_init_recursive>
 805a740:	f7ff ff96 	bl	805a670 <__sfp_lock_release>
 805a744:	e9c4 5501 	strd	r5, r5, [r4, #4]
 805a748:	e9c4 5504 	strd	r5, r5, [r4, #16]
 805a74c:	6025      	str	r5, [r4, #0]
 805a74e:	61a5      	str	r5, [r4, #24]
 805a750:	2208      	movs	r2, #8
 805a752:	4629      	mov	r1, r5
 805a754:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 805a758:	f7ff fbe4 	bl	8059f24 <memset>
 805a75c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 805a760:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 805a764:	4620      	mov	r0, r4
 805a766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 805a768:	3468      	adds	r4, #104	; 0x68
 805a76a:	e7d9      	b.n	805a720 <__sfp+0x1c>
 805a76c:	2104      	movs	r1, #4
 805a76e:	4638      	mov	r0, r7
 805a770:	f7ff ff62 	bl	805a638 <__sfmoreglue>
 805a774:	4604      	mov	r4, r0
 805a776:	6030      	str	r0, [r6, #0]
 805a778:	2800      	cmp	r0, #0
 805a77a:	d1d5      	bne.n	805a728 <__sfp+0x24>
 805a77c:	f7ff ff78 	bl	805a670 <__sfp_lock_release>
 805a780:	230c      	movs	r3, #12
 805a782:	603b      	str	r3, [r7, #0]
 805a784:	e7ee      	b.n	805a764 <__sfp+0x60>
 805a786:	bf00      	nop
 805a788:	0805bde4 	.word	0x0805bde4
 805a78c:	ffff0001 	.word	0xffff0001

0805a790 <_fwalk_reent>:
 805a790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 805a794:	4606      	mov	r6, r0
 805a796:	4688      	mov	r8, r1
 805a798:	f100 0448 	add.w	r4, r0, #72	; 0x48
 805a79c:	2700      	movs	r7, #0
 805a79e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 805a7a2:	f1b9 0901 	subs.w	r9, r9, #1
 805a7a6:	d505      	bpl.n	805a7b4 <_fwalk_reent+0x24>
 805a7a8:	6824      	ldr	r4, [r4, #0]
 805a7aa:	2c00      	cmp	r4, #0
 805a7ac:	d1f7      	bne.n	805a79e <_fwalk_reent+0xe>
 805a7ae:	4638      	mov	r0, r7
 805a7b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 805a7b4:	89ab      	ldrh	r3, [r5, #12]
 805a7b6:	2b01      	cmp	r3, #1
 805a7b8:	d907      	bls.n	805a7ca <_fwalk_reent+0x3a>
 805a7ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 805a7be:	3301      	adds	r3, #1
 805a7c0:	d003      	beq.n	805a7ca <_fwalk_reent+0x3a>
 805a7c2:	4629      	mov	r1, r5
 805a7c4:	4630      	mov	r0, r6
 805a7c6:	47c0      	blx	r8
 805a7c8:	4307      	orrs	r7, r0
 805a7ca:	3568      	adds	r5, #104	; 0x68
 805a7cc:	e7e9      	b.n	805a7a2 <_fwalk_reent+0x12>

0805a7ce <__retarget_lock_init_recursive>:
 805a7ce:	4770      	bx	lr

0805a7d0 <__retarget_lock_acquire_recursive>:
 805a7d0:	4770      	bx	lr

0805a7d2 <__retarget_lock_release_recursive>:
 805a7d2:	4770      	bx	lr

0805a7d4 <__swhatbuf_r>:
 805a7d4:	b570      	push	{r4, r5, r6, lr}
 805a7d6:	460e      	mov	r6, r1
 805a7d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 805a7dc:	2900      	cmp	r1, #0
 805a7de:	b096      	sub	sp, #88	; 0x58
 805a7e0:	4614      	mov	r4, r2
 805a7e2:	461d      	mov	r5, r3
 805a7e4:	da08      	bge.n	805a7f8 <__swhatbuf_r+0x24>
 805a7e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 805a7ea:	2200      	movs	r2, #0
 805a7ec:	602a      	str	r2, [r5, #0]
 805a7ee:	061a      	lsls	r2, r3, #24
 805a7f0:	d410      	bmi.n	805a814 <__swhatbuf_r+0x40>
 805a7f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 805a7f6:	e00e      	b.n	805a816 <__swhatbuf_r+0x42>
 805a7f8:	466a      	mov	r2, sp
 805a7fa:	f000 fd0d 	bl	805b218 <_fstat_r>
 805a7fe:	2800      	cmp	r0, #0
 805a800:	dbf1      	blt.n	805a7e6 <__swhatbuf_r+0x12>
 805a802:	9a01      	ldr	r2, [sp, #4]
 805a804:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 805a808:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 805a80c:	425a      	negs	r2, r3
 805a80e:	415a      	adcs	r2, r3
 805a810:	602a      	str	r2, [r5, #0]
 805a812:	e7ee      	b.n	805a7f2 <__swhatbuf_r+0x1e>
 805a814:	2340      	movs	r3, #64	; 0x40
 805a816:	2000      	movs	r0, #0
 805a818:	6023      	str	r3, [r4, #0]
 805a81a:	b016      	add	sp, #88	; 0x58
 805a81c:	bd70      	pop	{r4, r5, r6, pc}
	...

0805a820 <__smakebuf_r>:
 805a820:	898b      	ldrh	r3, [r1, #12]
 805a822:	b573      	push	{r0, r1, r4, r5, r6, lr}
 805a824:	079d      	lsls	r5, r3, #30
 805a826:	4606      	mov	r6, r0
 805a828:	460c      	mov	r4, r1
 805a82a:	d507      	bpl.n	805a83c <__smakebuf_r+0x1c>
 805a82c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 805a830:	6023      	str	r3, [r4, #0]
 805a832:	6123      	str	r3, [r4, #16]
 805a834:	2301      	movs	r3, #1
 805a836:	6163      	str	r3, [r4, #20]
 805a838:	b002      	add	sp, #8
 805a83a:	bd70      	pop	{r4, r5, r6, pc}
 805a83c:	ab01      	add	r3, sp, #4
 805a83e:	466a      	mov	r2, sp
 805a840:	f7ff ffc8 	bl	805a7d4 <__swhatbuf_r>
 805a844:	9900      	ldr	r1, [sp, #0]
 805a846:	4605      	mov	r5, r0
 805a848:	4630      	mov	r0, r6
 805a84a:	f7ff fbdf 	bl	805a00c <_malloc_r>
 805a84e:	b948      	cbnz	r0, 805a864 <__smakebuf_r+0x44>
 805a850:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 805a854:	059a      	lsls	r2, r3, #22
 805a856:	d4ef      	bmi.n	805a838 <__smakebuf_r+0x18>
 805a858:	f023 0303 	bic.w	r3, r3, #3
 805a85c:	f043 0302 	orr.w	r3, r3, #2
 805a860:	81a3      	strh	r3, [r4, #12]
 805a862:	e7e3      	b.n	805a82c <__smakebuf_r+0xc>
 805a864:	4b0d      	ldr	r3, [pc, #52]	; (805a89c <__smakebuf_r+0x7c>)
 805a866:	62b3      	str	r3, [r6, #40]	; 0x28
 805a868:	89a3      	ldrh	r3, [r4, #12]
 805a86a:	6020      	str	r0, [r4, #0]
 805a86c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 805a870:	81a3      	strh	r3, [r4, #12]
 805a872:	9b00      	ldr	r3, [sp, #0]
 805a874:	6163      	str	r3, [r4, #20]
 805a876:	9b01      	ldr	r3, [sp, #4]
 805a878:	6120      	str	r0, [r4, #16]
 805a87a:	b15b      	cbz	r3, 805a894 <__smakebuf_r+0x74>
 805a87c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 805a880:	4630      	mov	r0, r6
 805a882:	f000 fcdb 	bl	805b23c <_isatty_r>
 805a886:	b128      	cbz	r0, 805a894 <__smakebuf_r+0x74>
 805a888:	89a3      	ldrh	r3, [r4, #12]
 805a88a:	f023 0303 	bic.w	r3, r3, #3
 805a88e:	f043 0301 	orr.w	r3, r3, #1
 805a892:	81a3      	strh	r3, [r4, #12]
 805a894:	89a0      	ldrh	r0, [r4, #12]
 805a896:	4305      	orrs	r5, r0
 805a898:	81a5      	strh	r5, [r4, #12]
 805a89a:	e7cd      	b.n	805a838 <__smakebuf_r+0x18>
 805a89c:	0805a62d 	.word	0x0805a62d

0805a8a0 <__malloc_lock>:
 805a8a0:	4801      	ldr	r0, [pc, #4]	; (805a8a8 <__malloc_lock+0x8>)
 805a8a2:	f7ff bf95 	b.w	805a7d0 <__retarget_lock_acquire_recursive>
 805a8a6:	bf00      	nop
 805a8a8:	240071e0 	.word	0x240071e0

0805a8ac <__malloc_unlock>:
 805a8ac:	4801      	ldr	r0, [pc, #4]	; (805a8b4 <__malloc_unlock+0x8>)
 805a8ae:	f7ff bf90 	b.w	805a7d2 <__retarget_lock_release_recursive>
 805a8b2:	bf00      	nop
 805a8b4:	240071e0 	.word	0x240071e0

0805a8b8 <__ssputs_r>:
 805a8b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 805a8bc:	688e      	ldr	r6, [r1, #8]
 805a8be:	429e      	cmp	r6, r3
 805a8c0:	4682      	mov	sl, r0
 805a8c2:	460c      	mov	r4, r1
 805a8c4:	4690      	mov	r8, r2
 805a8c6:	461f      	mov	r7, r3
 805a8c8:	d838      	bhi.n	805a93c <__ssputs_r+0x84>
 805a8ca:	898a      	ldrh	r2, [r1, #12]
 805a8cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 805a8d0:	d032      	beq.n	805a938 <__ssputs_r+0x80>
 805a8d2:	6825      	ldr	r5, [r4, #0]
 805a8d4:	6909      	ldr	r1, [r1, #16]
 805a8d6:	eba5 0901 	sub.w	r9, r5, r1
 805a8da:	6965      	ldr	r5, [r4, #20]
 805a8dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 805a8e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 805a8e4:	3301      	adds	r3, #1
 805a8e6:	444b      	add	r3, r9
 805a8e8:	106d      	asrs	r5, r5, #1
 805a8ea:	429d      	cmp	r5, r3
 805a8ec:	bf38      	it	cc
 805a8ee:	461d      	movcc	r5, r3
 805a8f0:	0553      	lsls	r3, r2, #21
 805a8f2:	d531      	bpl.n	805a958 <__ssputs_r+0xa0>
 805a8f4:	4629      	mov	r1, r5
 805a8f6:	f7ff fb89 	bl	805a00c <_malloc_r>
 805a8fa:	4606      	mov	r6, r0
 805a8fc:	b950      	cbnz	r0, 805a914 <__ssputs_r+0x5c>
 805a8fe:	230c      	movs	r3, #12
 805a900:	f8ca 3000 	str.w	r3, [sl]
 805a904:	89a3      	ldrh	r3, [r4, #12]
 805a906:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 805a90a:	81a3      	strh	r3, [r4, #12]
 805a90c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 805a910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 805a914:	6921      	ldr	r1, [r4, #16]
 805a916:	464a      	mov	r2, r9
 805a918:	f7ff faf6 	bl	8059f08 <memcpy>
 805a91c:	89a3      	ldrh	r3, [r4, #12]
 805a91e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 805a922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 805a926:	81a3      	strh	r3, [r4, #12]
 805a928:	6126      	str	r6, [r4, #16]
 805a92a:	6165      	str	r5, [r4, #20]
 805a92c:	444e      	add	r6, r9
 805a92e:	eba5 0509 	sub.w	r5, r5, r9
 805a932:	6026      	str	r6, [r4, #0]
 805a934:	60a5      	str	r5, [r4, #8]
 805a936:	463e      	mov	r6, r7
 805a938:	42be      	cmp	r6, r7
 805a93a:	d900      	bls.n	805a93e <__ssputs_r+0x86>
 805a93c:	463e      	mov	r6, r7
 805a93e:	6820      	ldr	r0, [r4, #0]
 805a940:	4632      	mov	r2, r6
 805a942:	4641      	mov	r1, r8
 805a944:	f000 fc9c 	bl	805b280 <memmove>
 805a948:	68a3      	ldr	r3, [r4, #8]
 805a94a:	1b9b      	subs	r3, r3, r6
 805a94c:	60a3      	str	r3, [r4, #8]
 805a94e:	6823      	ldr	r3, [r4, #0]
 805a950:	4433      	add	r3, r6
 805a952:	6023      	str	r3, [r4, #0]
 805a954:	2000      	movs	r0, #0
 805a956:	e7db      	b.n	805a910 <__ssputs_r+0x58>
 805a958:	462a      	mov	r2, r5
 805a95a:	f000 fcab 	bl	805b2b4 <_realloc_r>
 805a95e:	4606      	mov	r6, r0
 805a960:	2800      	cmp	r0, #0
 805a962:	d1e1      	bne.n	805a928 <__ssputs_r+0x70>
 805a964:	6921      	ldr	r1, [r4, #16]
 805a966:	4650      	mov	r0, sl
 805a968:	f7ff fae4 	bl	8059f34 <_free_r>
 805a96c:	e7c7      	b.n	805a8fe <__ssputs_r+0x46>
	...

0805a970 <_svfiprintf_r>:
 805a970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 805a974:	4698      	mov	r8, r3
 805a976:	898b      	ldrh	r3, [r1, #12]
 805a978:	061b      	lsls	r3, r3, #24
 805a97a:	b09d      	sub	sp, #116	; 0x74
 805a97c:	4607      	mov	r7, r0
 805a97e:	460d      	mov	r5, r1
 805a980:	4614      	mov	r4, r2
 805a982:	d50e      	bpl.n	805a9a2 <_svfiprintf_r+0x32>
 805a984:	690b      	ldr	r3, [r1, #16]
 805a986:	b963      	cbnz	r3, 805a9a2 <_svfiprintf_r+0x32>
 805a988:	2140      	movs	r1, #64	; 0x40
 805a98a:	f7ff fb3f 	bl	805a00c <_malloc_r>
 805a98e:	6028      	str	r0, [r5, #0]
 805a990:	6128      	str	r0, [r5, #16]
 805a992:	b920      	cbnz	r0, 805a99e <_svfiprintf_r+0x2e>
 805a994:	230c      	movs	r3, #12
 805a996:	603b      	str	r3, [r7, #0]
 805a998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 805a99c:	e0d1      	b.n	805ab42 <_svfiprintf_r+0x1d2>
 805a99e:	2340      	movs	r3, #64	; 0x40
 805a9a0:	616b      	str	r3, [r5, #20]
 805a9a2:	2300      	movs	r3, #0
 805a9a4:	9309      	str	r3, [sp, #36]	; 0x24
 805a9a6:	2320      	movs	r3, #32
 805a9a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 805a9ac:	f8cd 800c 	str.w	r8, [sp, #12]
 805a9b0:	2330      	movs	r3, #48	; 0x30
 805a9b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 805ab5c <_svfiprintf_r+0x1ec>
 805a9b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 805a9ba:	f04f 0901 	mov.w	r9, #1
 805a9be:	4623      	mov	r3, r4
 805a9c0:	469a      	mov	sl, r3
 805a9c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 805a9c6:	b10a      	cbz	r2, 805a9cc <_svfiprintf_r+0x5c>
 805a9c8:	2a25      	cmp	r2, #37	; 0x25
 805a9ca:	d1f9      	bne.n	805a9c0 <_svfiprintf_r+0x50>
 805a9cc:	ebba 0b04 	subs.w	fp, sl, r4
 805a9d0:	d00b      	beq.n	805a9ea <_svfiprintf_r+0x7a>
 805a9d2:	465b      	mov	r3, fp
 805a9d4:	4622      	mov	r2, r4
 805a9d6:	4629      	mov	r1, r5
 805a9d8:	4638      	mov	r0, r7
 805a9da:	f7ff ff6d 	bl	805a8b8 <__ssputs_r>
 805a9de:	3001      	adds	r0, #1
 805a9e0:	f000 80aa 	beq.w	805ab38 <_svfiprintf_r+0x1c8>
 805a9e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 805a9e6:	445a      	add	r2, fp
 805a9e8:	9209      	str	r2, [sp, #36]	; 0x24
 805a9ea:	f89a 3000 	ldrb.w	r3, [sl]
 805a9ee:	2b00      	cmp	r3, #0
 805a9f0:	f000 80a2 	beq.w	805ab38 <_svfiprintf_r+0x1c8>
 805a9f4:	2300      	movs	r3, #0
 805a9f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 805a9fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 805a9fe:	f10a 0a01 	add.w	sl, sl, #1
 805aa02:	9304      	str	r3, [sp, #16]
 805aa04:	9307      	str	r3, [sp, #28]
 805aa06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 805aa0a:	931a      	str	r3, [sp, #104]	; 0x68
 805aa0c:	4654      	mov	r4, sl
 805aa0e:	2205      	movs	r2, #5
 805aa10:	f814 1b01 	ldrb.w	r1, [r4], #1
 805aa14:	4851      	ldr	r0, [pc, #324]	; (805ab5c <_svfiprintf_r+0x1ec>)
 805aa16:	f7e5 fc93 	bl	8040340 <memchr>
 805aa1a:	9a04      	ldr	r2, [sp, #16]
 805aa1c:	b9d8      	cbnz	r0, 805aa56 <_svfiprintf_r+0xe6>
 805aa1e:	06d0      	lsls	r0, r2, #27
 805aa20:	bf44      	itt	mi
 805aa22:	2320      	movmi	r3, #32
 805aa24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 805aa28:	0711      	lsls	r1, r2, #28
 805aa2a:	bf44      	itt	mi
 805aa2c:	232b      	movmi	r3, #43	; 0x2b
 805aa2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 805aa32:	f89a 3000 	ldrb.w	r3, [sl]
 805aa36:	2b2a      	cmp	r3, #42	; 0x2a
 805aa38:	d015      	beq.n	805aa66 <_svfiprintf_r+0xf6>
 805aa3a:	9a07      	ldr	r2, [sp, #28]
 805aa3c:	4654      	mov	r4, sl
 805aa3e:	2000      	movs	r0, #0
 805aa40:	f04f 0c0a 	mov.w	ip, #10
 805aa44:	4621      	mov	r1, r4
 805aa46:	f811 3b01 	ldrb.w	r3, [r1], #1
 805aa4a:	3b30      	subs	r3, #48	; 0x30
 805aa4c:	2b09      	cmp	r3, #9
 805aa4e:	d94e      	bls.n	805aaee <_svfiprintf_r+0x17e>
 805aa50:	b1b0      	cbz	r0, 805aa80 <_svfiprintf_r+0x110>
 805aa52:	9207      	str	r2, [sp, #28]
 805aa54:	e014      	b.n	805aa80 <_svfiprintf_r+0x110>
 805aa56:	eba0 0308 	sub.w	r3, r0, r8
 805aa5a:	fa09 f303 	lsl.w	r3, r9, r3
 805aa5e:	4313      	orrs	r3, r2
 805aa60:	9304      	str	r3, [sp, #16]
 805aa62:	46a2      	mov	sl, r4
 805aa64:	e7d2      	b.n	805aa0c <_svfiprintf_r+0x9c>
 805aa66:	9b03      	ldr	r3, [sp, #12]
 805aa68:	1d19      	adds	r1, r3, #4
 805aa6a:	681b      	ldr	r3, [r3, #0]
 805aa6c:	9103      	str	r1, [sp, #12]
 805aa6e:	2b00      	cmp	r3, #0
 805aa70:	bfbb      	ittet	lt
 805aa72:	425b      	neglt	r3, r3
 805aa74:	f042 0202 	orrlt.w	r2, r2, #2
 805aa78:	9307      	strge	r3, [sp, #28]
 805aa7a:	9307      	strlt	r3, [sp, #28]
 805aa7c:	bfb8      	it	lt
 805aa7e:	9204      	strlt	r2, [sp, #16]
 805aa80:	7823      	ldrb	r3, [r4, #0]
 805aa82:	2b2e      	cmp	r3, #46	; 0x2e
 805aa84:	d10c      	bne.n	805aaa0 <_svfiprintf_r+0x130>
 805aa86:	7863      	ldrb	r3, [r4, #1]
 805aa88:	2b2a      	cmp	r3, #42	; 0x2a
 805aa8a:	d135      	bne.n	805aaf8 <_svfiprintf_r+0x188>
 805aa8c:	9b03      	ldr	r3, [sp, #12]
 805aa8e:	1d1a      	adds	r2, r3, #4
 805aa90:	681b      	ldr	r3, [r3, #0]
 805aa92:	9203      	str	r2, [sp, #12]
 805aa94:	2b00      	cmp	r3, #0
 805aa96:	bfb8      	it	lt
 805aa98:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 805aa9c:	3402      	adds	r4, #2
 805aa9e:	9305      	str	r3, [sp, #20]
 805aaa0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 805ab6c <_svfiprintf_r+0x1fc>
 805aaa4:	7821      	ldrb	r1, [r4, #0]
 805aaa6:	2203      	movs	r2, #3
 805aaa8:	4650      	mov	r0, sl
 805aaaa:	f7e5 fc49 	bl	8040340 <memchr>
 805aaae:	b140      	cbz	r0, 805aac2 <_svfiprintf_r+0x152>
 805aab0:	2340      	movs	r3, #64	; 0x40
 805aab2:	eba0 000a 	sub.w	r0, r0, sl
 805aab6:	fa03 f000 	lsl.w	r0, r3, r0
 805aaba:	9b04      	ldr	r3, [sp, #16]
 805aabc:	4303      	orrs	r3, r0
 805aabe:	3401      	adds	r4, #1
 805aac0:	9304      	str	r3, [sp, #16]
 805aac2:	f814 1b01 	ldrb.w	r1, [r4], #1
 805aac6:	4826      	ldr	r0, [pc, #152]	; (805ab60 <_svfiprintf_r+0x1f0>)
 805aac8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 805aacc:	2206      	movs	r2, #6
 805aace:	f7e5 fc37 	bl	8040340 <memchr>
 805aad2:	2800      	cmp	r0, #0
 805aad4:	d038      	beq.n	805ab48 <_svfiprintf_r+0x1d8>
 805aad6:	4b23      	ldr	r3, [pc, #140]	; (805ab64 <_svfiprintf_r+0x1f4>)
 805aad8:	bb1b      	cbnz	r3, 805ab22 <_svfiprintf_r+0x1b2>
 805aada:	9b03      	ldr	r3, [sp, #12]
 805aadc:	3307      	adds	r3, #7
 805aade:	f023 0307 	bic.w	r3, r3, #7
 805aae2:	3308      	adds	r3, #8
 805aae4:	9303      	str	r3, [sp, #12]
 805aae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 805aae8:	4433      	add	r3, r6
 805aaea:	9309      	str	r3, [sp, #36]	; 0x24
 805aaec:	e767      	b.n	805a9be <_svfiprintf_r+0x4e>
 805aaee:	fb0c 3202 	mla	r2, ip, r2, r3
 805aaf2:	460c      	mov	r4, r1
 805aaf4:	2001      	movs	r0, #1
 805aaf6:	e7a5      	b.n	805aa44 <_svfiprintf_r+0xd4>
 805aaf8:	2300      	movs	r3, #0
 805aafa:	3401      	adds	r4, #1
 805aafc:	9305      	str	r3, [sp, #20]
 805aafe:	4619      	mov	r1, r3
 805ab00:	f04f 0c0a 	mov.w	ip, #10
 805ab04:	4620      	mov	r0, r4
 805ab06:	f810 2b01 	ldrb.w	r2, [r0], #1
 805ab0a:	3a30      	subs	r2, #48	; 0x30
 805ab0c:	2a09      	cmp	r2, #9
 805ab0e:	d903      	bls.n	805ab18 <_svfiprintf_r+0x1a8>
 805ab10:	2b00      	cmp	r3, #0
 805ab12:	d0c5      	beq.n	805aaa0 <_svfiprintf_r+0x130>
 805ab14:	9105      	str	r1, [sp, #20]
 805ab16:	e7c3      	b.n	805aaa0 <_svfiprintf_r+0x130>
 805ab18:	fb0c 2101 	mla	r1, ip, r1, r2
 805ab1c:	4604      	mov	r4, r0
 805ab1e:	2301      	movs	r3, #1
 805ab20:	e7f0      	b.n	805ab04 <_svfiprintf_r+0x194>
 805ab22:	ab03      	add	r3, sp, #12
 805ab24:	9300      	str	r3, [sp, #0]
 805ab26:	462a      	mov	r2, r5
 805ab28:	4b0f      	ldr	r3, [pc, #60]	; (805ab68 <_svfiprintf_r+0x1f8>)
 805ab2a:	a904      	add	r1, sp, #16
 805ab2c:	4638      	mov	r0, r7
 805ab2e:	f3af 8000 	nop.w
 805ab32:	1c42      	adds	r2, r0, #1
 805ab34:	4606      	mov	r6, r0
 805ab36:	d1d6      	bne.n	805aae6 <_svfiprintf_r+0x176>
 805ab38:	89ab      	ldrh	r3, [r5, #12]
 805ab3a:	065b      	lsls	r3, r3, #25
 805ab3c:	f53f af2c 	bmi.w	805a998 <_svfiprintf_r+0x28>
 805ab40:	9809      	ldr	r0, [sp, #36]	; 0x24
 805ab42:	b01d      	add	sp, #116	; 0x74
 805ab44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 805ab48:	ab03      	add	r3, sp, #12
 805ab4a:	9300      	str	r3, [sp, #0]
 805ab4c:	462a      	mov	r2, r5
 805ab4e:	4b06      	ldr	r3, [pc, #24]	; (805ab68 <_svfiprintf_r+0x1f8>)
 805ab50:	a904      	add	r1, sp, #16
 805ab52:	4638      	mov	r0, r7
 805ab54:	f000 f9d4 	bl	805af00 <_printf_i>
 805ab58:	e7eb      	b.n	805ab32 <_svfiprintf_r+0x1c2>
 805ab5a:	bf00      	nop
 805ab5c:	0805be48 	.word	0x0805be48
 805ab60:	0805be52 	.word	0x0805be52
 805ab64:	00000000 	.word	0x00000000
 805ab68:	0805a8b9 	.word	0x0805a8b9
 805ab6c:	0805be4e 	.word	0x0805be4e

0805ab70 <__sfputc_r>:
 805ab70:	6893      	ldr	r3, [r2, #8]
 805ab72:	3b01      	subs	r3, #1
 805ab74:	2b00      	cmp	r3, #0
 805ab76:	b410      	push	{r4}
 805ab78:	6093      	str	r3, [r2, #8]
 805ab7a:	da08      	bge.n	805ab8e <__sfputc_r+0x1e>
 805ab7c:	6994      	ldr	r4, [r2, #24]
 805ab7e:	42a3      	cmp	r3, r4
 805ab80:	db01      	blt.n	805ab86 <__sfputc_r+0x16>
 805ab82:	290a      	cmp	r1, #10
 805ab84:	d103      	bne.n	805ab8e <__sfputc_r+0x1e>
 805ab86:	f85d 4b04 	ldr.w	r4, [sp], #4
 805ab8a:	f7ff bba9 	b.w	805a2e0 <__swbuf_r>
 805ab8e:	6813      	ldr	r3, [r2, #0]
 805ab90:	1c58      	adds	r0, r3, #1
 805ab92:	6010      	str	r0, [r2, #0]
 805ab94:	7019      	strb	r1, [r3, #0]
 805ab96:	4608      	mov	r0, r1
 805ab98:	f85d 4b04 	ldr.w	r4, [sp], #4
 805ab9c:	4770      	bx	lr

0805ab9e <__sfputs_r>:
 805ab9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 805aba0:	4606      	mov	r6, r0
 805aba2:	460f      	mov	r7, r1
 805aba4:	4614      	mov	r4, r2
 805aba6:	18d5      	adds	r5, r2, r3
 805aba8:	42ac      	cmp	r4, r5
 805abaa:	d101      	bne.n	805abb0 <__sfputs_r+0x12>
 805abac:	2000      	movs	r0, #0
 805abae:	e007      	b.n	805abc0 <__sfputs_r+0x22>
 805abb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 805abb4:	463a      	mov	r2, r7
 805abb6:	4630      	mov	r0, r6
 805abb8:	f7ff ffda 	bl	805ab70 <__sfputc_r>
 805abbc:	1c43      	adds	r3, r0, #1
 805abbe:	d1f3      	bne.n	805aba8 <__sfputs_r+0xa>
 805abc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0805abc4 <_vfiprintf_r>:
 805abc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 805abc8:	460d      	mov	r5, r1
 805abca:	b09d      	sub	sp, #116	; 0x74
 805abcc:	4614      	mov	r4, r2
 805abce:	4698      	mov	r8, r3
 805abd0:	4606      	mov	r6, r0
 805abd2:	b118      	cbz	r0, 805abdc <_vfiprintf_r+0x18>
 805abd4:	6983      	ldr	r3, [r0, #24]
 805abd6:	b90b      	cbnz	r3, 805abdc <_vfiprintf_r+0x18>
 805abd8:	f7ff fd5c 	bl	805a694 <__sinit>
 805abdc:	4b89      	ldr	r3, [pc, #548]	; (805ae04 <_vfiprintf_r+0x240>)
 805abde:	429d      	cmp	r5, r3
 805abe0:	d11b      	bne.n	805ac1a <_vfiprintf_r+0x56>
 805abe2:	6875      	ldr	r5, [r6, #4]
 805abe4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 805abe6:	07d9      	lsls	r1, r3, #31
 805abe8:	d405      	bmi.n	805abf6 <_vfiprintf_r+0x32>
 805abea:	89ab      	ldrh	r3, [r5, #12]
 805abec:	059a      	lsls	r2, r3, #22
 805abee:	d402      	bmi.n	805abf6 <_vfiprintf_r+0x32>
 805abf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 805abf2:	f7ff fded 	bl	805a7d0 <__retarget_lock_acquire_recursive>
 805abf6:	89ab      	ldrh	r3, [r5, #12]
 805abf8:	071b      	lsls	r3, r3, #28
 805abfa:	d501      	bpl.n	805ac00 <_vfiprintf_r+0x3c>
 805abfc:	692b      	ldr	r3, [r5, #16]
 805abfe:	b9eb      	cbnz	r3, 805ac3c <_vfiprintf_r+0x78>
 805ac00:	4629      	mov	r1, r5
 805ac02:	4630      	mov	r0, r6
 805ac04:	f7ff fbbe 	bl	805a384 <__swsetup_r>
 805ac08:	b1c0      	cbz	r0, 805ac3c <_vfiprintf_r+0x78>
 805ac0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 805ac0c:	07dc      	lsls	r4, r3, #31
 805ac0e:	d50e      	bpl.n	805ac2e <_vfiprintf_r+0x6a>
 805ac10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 805ac14:	b01d      	add	sp, #116	; 0x74
 805ac16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 805ac1a:	4b7b      	ldr	r3, [pc, #492]	; (805ae08 <_vfiprintf_r+0x244>)
 805ac1c:	429d      	cmp	r5, r3
 805ac1e:	d101      	bne.n	805ac24 <_vfiprintf_r+0x60>
 805ac20:	68b5      	ldr	r5, [r6, #8]
 805ac22:	e7df      	b.n	805abe4 <_vfiprintf_r+0x20>
 805ac24:	4b79      	ldr	r3, [pc, #484]	; (805ae0c <_vfiprintf_r+0x248>)
 805ac26:	429d      	cmp	r5, r3
 805ac28:	bf08      	it	eq
 805ac2a:	68f5      	ldreq	r5, [r6, #12]
 805ac2c:	e7da      	b.n	805abe4 <_vfiprintf_r+0x20>
 805ac2e:	89ab      	ldrh	r3, [r5, #12]
 805ac30:	0598      	lsls	r0, r3, #22
 805ac32:	d4ed      	bmi.n	805ac10 <_vfiprintf_r+0x4c>
 805ac34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 805ac36:	f7ff fdcc 	bl	805a7d2 <__retarget_lock_release_recursive>
 805ac3a:	e7e9      	b.n	805ac10 <_vfiprintf_r+0x4c>
 805ac3c:	2300      	movs	r3, #0
 805ac3e:	9309      	str	r3, [sp, #36]	; 0x24
 805ac40:	2320      	movs	r3, #32
 805ac42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 805ac46:	f8cd 800c 	str.w	r8, [sp, #12]
 805ac4a:	2330      	movs	r3, #48	; 0x30
 805ac4c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 805ae10 <_vfiprintf_r+0x24c>
 805ac50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 805ac54:	f04f 0901 	mov.w	r9, #1
 805ac58:	4623      	mov	r3, r4
 805ac5a:	469a      	mov	sl, r3
 805ac5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 805ac60:	b10a      	cbz	r2, 805ac66 <_vfiprintf_r+0xa2>
 805ac62:	2a25      	cmp	r2, #37	; 0x25
 805ac64:	d1f9      	bne.n	805ac5a <_vfiprintf_r+0x96>
 805ac66:	ebba 0b04 	subs.w	fp, sl, r4
 805ac6a:	d00b      	beq.n	805ac84 <_vfiprintf_r+0xc0>
 805ac6c:	465b      	mov	r3, fp
 805ac6e:	4622      	mov	r2, r4
 805ac70:	4629      	mov	r1, r5
 805ac72:	4630      	mov	r0, r6
 805ac74:	f7ff ff93 	bl	805ab9e <__sfputs_r>
 805ac78:	3001      	adds	r0, #1
 805ac7a:	f000 80aa 	beq.w	805add2 <_vfiprintf_r+0x20e>
 805ac7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 805ac80:	445a      	add	r2, fp
 805ac82:	9209      	str	r2, [sp, #36]	; 0x24
 805ac84:	f89a 3000 	ldrb.w	r3, [sl]
 805ac88:	2b00      	cmp	r3, #0
 805ac8a:	f000 80a2 	beq.w	805add2 <_vfiprintf_r+0x20e>
 805ac8e:	2300      	movs	r3, #0
 805ac90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 805ac94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 805ac98:	f10a 0a01 	add.w	sl, sl, #1
 805ac9c:	9304      	str	r3, [sp, #16]
 805ac9e:	9307      	str	r3, [sp, #28]
 805aca0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 805aca4:	931a      	str	r3, [sp, #104]	; 0x68
 805aca6:	4654      	mov	r4, sl
 805aca8:	2205      	movs	r2, #5
 805acaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 805acae:	4858      	ldr	r0, [pc, #352]	; (805ae10 <_vfiprintf_r+0x24c>)
 805acb0:	f7e5 fb46 	bl	8040340 <memchr>
 805acb4:	9a04      	ldr	r2, [sp, #16]
 805acb6:	b9d8      	cbnz	r0, 805acf0 <_vfiprintf_r+0x12c>
 805acb8:	06d1      	lsls	r1, r2, #27
 805acba:	bf44      	itt	mi
 805acbc:	2320      	movmi	r3, #32
 805acbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 805acc2:	0713      	lsls	r3, r2, #28
 805acc4:	bf44      	itt	mi
 805acc6:	232b      	movmi	r3, #43	; 0x2b
 805acc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 805accc:	f89a 3000 	ldrb.w	r3, [sl]
 805acd0:	2b2a      	cmp	r3, #42	; 0x2a
 805acd2:	d015      	beq.n	805ad00 <_vfiprintf_r+0x13c>
 805acd4:	9a07      	ldr	r2, [sp, #28]
 805acd6:	4654      	mov	r4, sl
 805acd8:	2000      	movs	r0, #0
 805acda:	f04f 0c0a 	mov.w	ip, #10
 805acde:	4621      	mov	r1, r4
 805ace0:	f811 3b01 	ldrb.w	r3, [r1], #1
 805ace4:	3b30      	subs	r3, #48	; 0x30
 805ace6:	2b09      	cmp	r3, #9
 805ace8:	d94e      	bls.n	805ad88 <_vfiprintf_r+0x1c4>
 805acea:	b1b0      	cbz	r0, 805ad1a <_vfiprintf_r+0x156>
 805acec:	9207      	str	r2, [sp, #28]
 805acee:	e014      	b.n	805ad1a <_vfiprintf_r+0x156>
 805acf0:	eba0 0308 	sub.w	r3, r0, r8
 805acf4:	fa09 f303 	lsl.w	r3, r9, r3
 805acf8:	4313      	orrs	r3, r2
 805acfa:	9304      	str	r3, [sp, #16]
 805acfc:	46a2      	mov	sl, r4
 805acfe:	e7d2      	b.n	805aca6 <_vfiprintf_r+0xe2>
 805ad00:	9b03      	ldr	r3, [sp, #12]
 805ad02:	1d19      	adds	r1, r3, #4
 805ad04:	681b      	ldr	r3, [r3, #0]
 805ad06:	9103      	str	r1, [sp, #12]
 805ad08:	2b00      	cmp	r3, #0
 805ad0a:	bfbb      	ittet	lt
 805ad0c:	425b      	neglt	r3, r3
 805ad0e:	f042 0202 	orrlt.w	r2, r2, #2
 805ad12:	9307      	strge	r3, [sp, #28]
 805ad14:	9307      	strlt	r3, [sp, #28]
 805ad16:	bfb8      	it	lt
 805ad18:	9204      	strlt	r2, [sp, #16]
 805ad1a:	7823      	ldrb	r3, [r4, #0]
 805ad1c:	2b2e      	cmp	r3, #46	; 0x2e
 805ad1e:	d10c      	bne.n	805ad3a <_vfiprintf_r+0x176>
 805ad20:	7863      	ldrb	r3, [r4, #1]
 805ad22:	2b2a      	cmp	r3, #42	; 0x2a
 805ad24:	d135      	bne.n	805ad92 <_vfiprintf_r+0x1ce>
 805ad26:	9b03      	ldr	r3, [sp, #12]
 805ad28:	1d1a      	adds	r2, r3, #4
 805ad2a:	681b      	ldr	r3, [r3, #0]
 805ad2c:	9203      	str	r2, [sp, #12]
 805ad2e:	2b00      	cmp	r3, #0
 805ad30:	bfb8      	it	lt
 805ad32:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 805ad36:	3402      	adds	r4, #2
 805ad38:	9305      	str	r3, [sp, #20]
 805ad3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 805ae20 <_vfiprintf_r+0x25c>
 805ad3e:	7821      	ldrb	r1, [r4, #0]
 805ad40:	2203      	movs	r2, #3
 805ad42:	4650      	mov	r0, sl
 805ad44:	f7e5 fafc 	bl	8040340 <memchr>
 805ad48:	b140      	cbz	r0, 805ad5c <_vfiprintf_r+0x198>
 805ad4a:	2340      	movs	r3, #64	; 0x40
 805ad4c:	eba0 000a 	sub.w	r0, r0, sl
 805ad50:	fa03 f000 	lsl.w	r0, r3, r0
 805ad54:	9b04      	ldr	r3, [sp, #16]
 805ad56:	4303      	orrs	r3, r0
 805ad58:	3401      	adds	r4, #1
 805ad5a:	9304      	str	r3, [sp, #16]
 805ad5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 805ad60:	482c      	ldr	r0, [pc, #176]	; (805ae14 <_vfiprintf_r+0x250>)
 805ad62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 805ad66:	2206      	movs	r2, #6
 805ad68:	f7e5 faea 	bl	8040340 <memchr>
 805ad6c:	2800      	cmp	r0, #0
 805ad6e:	d03f      	beq.n	805adf0 <_vfiprintf_r+0x22c>
 805ad70:	4b29      	ldr	r3, [pc, #164]	; (805ae18 <_vfiprintf_r+0x254>)
 805ad72:	bb1b      	cbnz	r3, 805adbc <_vfiprintf_r+0x1f8>
 805ad74:	9b03      	ldr	r3, [sp, #12]
 805ad76:	3307      	adds	r3, #7
 805ad78:	f023 0307 	bic.w	r3, r3, #7
 805ad7c:	3308      	adds	r3, #8
 805ad7e:	9303      	str	r3, [sp, #12]
 805ad80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 805ad82:	443b      	add	r3, r7
 805ad84:	9309      	str	r3, [sp, #36]	; 0x24
 805ad86:	e767      	b.n	805ac58 <_vfiprintf_r+0x94>
 805ad88:	fb0c 3202 	mla	r2, ip, r2, r3
 805ad8c:	460c      	mov	r4, r1
 805ad8e:	2001      	movs	r0, #1
 805ad90:	e7a5      	b.n	805acde <_vfiprintf_r+0x11a>
 805ad92:	2300      	movs	r3, #0
 805ad94:	3401      	adds	r4, #1
 805ad96:	9305      	str	r3, [sp, #20]
 805ad98:	4619      	mov	r1, r3
 805ad9a:	f04f 0c0a 	mov.w	ip, #10
 805ad9e:	4620      	mov	r0, r4
 805ada0:	f810 2b01 	ldrb.w	r2, [r0], #1
 805ada4:	3a30      	subs	r2, #48	; 0x30
 805ada6:	2a09      	cmp	r2, #9
 805ada8:	d903      	bls.n	805adb2 <_vfiprintf_r+0x1ee>
 805adaa:	2b00      	cmp	r3, #0
 805adac:	d0c5      	beq.n	805ad3a <_vfiprintf_r+0x176>
 805adae:	9105      	str	r1, [sp, #20]
 805adb0:	e7c3      	b.n	805ad3a <_vfiprintf_r+0x176>
 805adb2:	fb0c 2101 	mla	r1, ip, r1, r2
 805adb6:	4604      	mov	r4, r0
 805adb8:	2301      	movs	r3, #1
 805adba:	e7f0      	b.n	805ad9e <_vfiprintf_r+0x1da>
 805adbc:	ab03      	add	r3, sp, #12
 805adbe:	9300      	str	r3, [sp, #0]
 805adc0:	462a      	mov	r2, r5
 805adc2:	4b16      	ldr	r3, [pc, #88]	; (805ae1c <_vfiprintf_r+0x258>)
 805adc4:	a904      	add	r1, sp, #16
 805adc6:	4630      	mov	r0, r6
 805adc8:	f3af 8000 	nop.w
 805adcc:	4607      	mov	r7, r0
 805adce:	1c78      	adds	r0, r7, #1
 805add0:	d1d6      	bne.n	805ad80 <_vfiprintf_r+0x1bc>
 805add2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 805add4:	07d9      	lsls	r1, r3, #31
 805add6:	d405      	bmi.n	805ade4 <_vfiprintf_r+0x220>
 805add8:	89ab      	ldrh	r3, [r5, #12]
 805adda:	059a      	lsls	r2, r3, #22
 805addc:	d402      	bmi.n	805ade4 <_vfiprintf_r+0x220>
 805adde:	6da8      	ldr	r0, [r5, #88]	; 0x58
 805ade0:	f7ff fcf7 	bl	805a7d2 <__retarget_lock_release_recursive>
 805ade4:	89ab      	ldrh	r3, [r5, #12]
 805ade6:	065b      	lsls	r3, r3, #25
 805ade8:	f53f af12 	bmi.w	805ac10 <_vfiprintf_r+0x4c>
 805adec:	9809      	ldr	r0, [sp, #36]	; 0x24
 805adee:	e711      	b.n	805ac14 <_vfiprintf_r+0x50>
 805adf0:	ab03      	add	r3, sp, #12
 805adf2:	9300      	str	r3, [sp, #0]
 805adf4:	462a      	mov	r2, r5
 805adf6:	4b09      	ldr	r3, [pc, #36]	; (805ae1c <_vfiprintf_r+0x258>)
 805adf8:	a904      	add	r1, sp, #16
 805adfa:	4630      	mov	r0, r6
 805adfc:	f000 f880 	bl	805af00 <_printf_i>
 805ae00:	e7e4      	b.n	805adcc <_vfiprintf_r+0x208>
 805ae02:	bf00      	nop
 805ae04:	0805be08 	.word	0x0805be08
 805ae08:	0805be28 	.word	0x0805be28
 805ae0c:	0805bde8 	.word	0x0805bde8
 805ae10:	0805be48 	.word	0x0805be48
 805ae14:	0805be52 	.word	0x0805be52
 805ae18:	00000000 	.word	0x00000000
 805ae1c:	0805ab9f 	.word	0x0805ab9f
 805ae20:	0805be4e 	.word	0x0805be4e

0805ae24 <_printf_common>:
 805ae24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 805ae28:	4616      	mov	r6, r2
 805ae2a:	4699      	mov	r9, r3
 805ae2c:	688a      	ldr	r2, [r1, #8]
 805ae2e:	690b      	ldr	r3, [r1, #16]
 805ae30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 805ae34:	4293      	cmp	r3, r2
 805ae36:	bfb8      	it	lt
 805ae38:	4613      	movlt	r3, r2
 805ae3a:	6033      	str	r3, [r6, #0]
 805ae3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 805ae40:	4607      	mov	r7, r0
 805ae42:	460c      	mov	r4, r1
 805ae44:	b10a      	cbz	r2, 805ae4a <_printf_common+0x26>
 805ae46:	3301      	adds	r3, #1
 805ae48:	6033      	str	r3, [r6, #0]
 805ae4a:	6823      	ldr	r3, [r4, #0]
 805ae4c:	0699      	lsls	r1, r3, #26
 805ae4e:	bf42      	ittt	mi
 805ae50:	6833      	ldrmi	r3, [r6, #0]
 805ae52:	3302      	addmi	r3, #2
 805ae54:	6033      	strmi	r3, [r6, #0]
 805ae56:	6825      	ldr	r5, [r4, #0]
 805ae58:	f015 0506 	ands.w	r5, r5, #6
 805ae5c:	d106      	bne.n	805ae6c <_printf_common+0x48>
 805ae5e:	f104 0a19 	add.w	sl, r4, #25
 805ae62:	68e3      	ldr	r3, [r4, #12]
 805ae64:	6832      	ldr	r2, [r6, #0]
 805ae66:	1a9b      	subs	r3, r3, r2
 805ae68:	42ab      	cmp	r3, r5
 805ae6a:	dc26      	bgt.n	805aeba <_printf_common+0x96>
 805ae6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 805ae70:	1e13      	subs	r3, r2, #0
 805ae72:	6822      	ldr	r2, [r4, #0]
 805ae74:	bf18      	it	ne
 805ae76:	2301      	movne	r3, #1
 805ae78:	0692      	lsls	r2, r2, #26
 805ae7a:	d42b      	bmi.n	805aed4 <_printf_common+0xb0>
 805ae7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 805ae80:	4649      	mov	r1, r9
 805ae82:	4638      	mov	r0, r7
 805ae84:	47c0      	blx	r8
 805ae86:	3001      	adds	r0, #1
 805ae88:	d01e      	beq.n	805aec8 <_printf_common+0xa4>
 805ae8a:	6823      	ldr	r3, [r4, #0]
 805ae8c:	68e5      	ldr	r5, [r4, #12]
 805ae8e:	6832      	ldr	r2, [r6, #0]
 805ae90:	f003 0306 	and.w	r3, r3, #6
 805ae94:	2b04      	cmp	r3, #4
 805ae96:	bf08      	it	eq
 805ae98:	1aad      	subeq	r5, r5, r2
 805ae9a:	68a3      	ldr	r3, [r4, #8]
 805ae9c:	6922      	ldr	r2, [r4, #16]
 805ae9e:	bf0c      	ite	eq
 805aea0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 805aea4:	2500      	movne	r5, #0
 805aea6:	4293      	cmp	r3, r2
 805aea8:	bfc4      	itt	gt
 805aeaa:	1a9b      	subgt	r3, r3, r2
 805aeac:	18ed      	addgt	r5, r5, r3
 805aeae:	2600      	movs	r6, #0
 805aeb0:	341a      	adds	r4, #26
 805aeb2:	42b5      	cmp	r5, r6
 805aeb4:	d11a      	bne.n	805aeec <_printf_common+0xc8>
 805aeb6:	2000      	movs	r0, #0
 805aeb8:	e008      	b.n	805aecc <_printf_common+0xa8>
 805aeba:	2301      	movs	r3, #1
 805aebc:	4652      	mov	r2, sl
 805aebe:	4649      	mov	r1, r9
 805aec0:	4638      	mov	r0, r7
 805aec2:	47c0      	blx	r8
 805aec4:	3001      	adds	r0, #1
 805aec6:	d103      	bne.n	805aed0 <_printf_common+0xac>
 805aec8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 805aecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 805aed0:	3501      	adds	r5, #1
 805aed2:	e7c6      	b.n	805ae62 <_printf_common+0x3e>
 805aed4:	18e1      	adds	r1, r4, r3
 805aed6:	1c5a      	adds	r2, r3, #1
 805aed8:	2030      	movs	r0, #48	; 0x30
 805aeda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 805aede:	4422      	add	r2, r4
 805aee0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 805aee4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 805aee8:	3302      	adds	r3, #2
 805aeea:	e7c7      	b.n	805ae7c <_printf_common+0x58>
 805aeec:	2301      	movs	r3, #1
 805aeee:	4622      	mov	r2, r4
 805aef0:	4649      	mov	r1, r9
 805aef2:	4638      	mov	r0, r7
 805aef4:	47c0      	blx	r8
 805aef6:	3001      	adds	r0, #1
 805aef8:	d0e6      	beq.n	805aec8 <_printf_common+0xa4>
 805aefa:	3601      	adds	r6, #1
 805aefc:	e7d9      	b.n	805aeb2 <_printf_common+0x8e>
	...

0805af00 <_printf_i>:
 805af00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 805af04:	7e0f      	ldrb	r7, [r1, #24]
 805af06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 805af08:	2f78      	cmp	r7, #120	; 0x78
 805af0a:	4691      	mov	r9, r2
 805af0c:	4680      	mov	r8, r0
 805af0e:	460c      	mov	r4, r1
 805af10:	469a      	mov	sl, r3
 805af12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 805af16:	d807      	bhi.n	805af28 <_printf_i+0x28>
 805af18:	2f62      	cmp	r7, #98	; 0x62
 805af1a:	d80a      	bhi.n	805af32 <_printf_i+0x32>
 805af1c:	2f00      	cmp	r7, #0
 805af1e:	f000 80d8 	beq.w	805b0d2 <_printf_i+0x1d2>
 805af22:	2f58      	cmp	r7, #88	; 0x58
 805af24:	f000 80a3 	beq.w	805b06e <_printf_i+0x16e>
 805af28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 805af2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 805af30:	e03a      	b.n	805afa8 <_printf_i+0xa8>
 805af32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 805af36:	2b15      	cmp	r3, #21
 805af38:	d8f6      	bhi.n	805af28 <_printf_i+0x28>
 805af3a:	a101      	add	r1, pc, #4	; (adr r1, 805af40 <_printf_i+0x40>)
 805af3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 805af40:	0805af99 	.word	0x0805af99
 805af44:	0805afad 	.word	0x0805afad
 805af48:	0805af29 	.word	0x0805af29
 805af4c:	0805af29 	.word	0x0805af29
 805af50:	0805af29 	.word	0x0805af29
 805af54:	0805af29 	.word	0x0805af29
 805af58:	0805afad 	.word	0x0805afad
 805af5c:	0805af29 	.word	0x0805af29
 805af60:	0805af29 	.word	0x0805af29
 805af64:	0805af29 	.word	0x0805af29
 805af68:	0805af29 	.word	0x0805af29
 805af6c:	0805b0b9 	.word	0x0805b0b9
 805af70:	0805afdd 	.word	0x0805afdd
 805af74:	0805b09b 	.word	0x0805b09b
 805af78:	0805af29 	.word	0x0805af29
 805af7c:	0805af29 	.word	0x0805af29
 805af80:	0805b0db 	.word	0x0805b0db
 805af84:	0805af29 	.word	0x0805af29
 805af88:	0805afdd 	.word	0x0805afdd
 805af8c:	0805af29 	.word	0x0805af29
 805af90:	0805af29 	.word	0x0805af29
 805af94:	0805b0a3 	.word	0x0805b0a3
 805af98:	682b      	ldr	r3, [r5, #0]
 805af9a:	1d1a      	adds	r2, r3, #4
 805af9c:	681b      	ldr	r3, [r3, #0]
 805af9e:	602a      	str	r2, [r5, #0]
 805afa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 805afa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 805afa8:	2301      	movs	r3, #1
 805afaa:	e0a3      	b.n	805b0f4 <_printf_i+0x1f4>
 805afac:	6820      	ldr	r0, [r4, #0]
 805afae:	6829      	ldr	r1, [r5, #0]
 805afb0:	0606      	lsls	r6, r0, #24
 805afb2:	f101 0304 	add.w	r3, r1, #4
 805afb6:	d50a      	bpl.n	805afce <_printf_i+0xce>
 805afb8:	680e      	ldr	r6, [r1, #0]
 805afba:	602b      	str	r3, [r5, #0]
 805afbc:	2e00      	cmp	r6, #0
 805afbe:	da03      	bge.n	805afc8 <_printf_i+0xc8>
 805afc0:	232d      	movs	r3, #45	; 0x2d
 805afc2:	4276      	negs	r6, r6
 805afc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 805afc8:	485e      	ldr	r0, [pc, #376]	; (805b144 <_printf_i+0x244>)
 805afca:	230a      	movs	r3, #10
 805afcc:	e019      	b.n	805b002 <_printf_i+0x102>
 805afce:	680e      	ldr	r6, [r1, #0]
 805afd0:	602b      	str	r3, [r5, #0]
 805afd2:	f010 0f40 	tst.w	r0, #64	; 0x40
 805afd6:	bf18      	it	ne
 805afd8:	b236      	sxthne	r6, r6
 805afda:	e7ef      	b.n	805afbc <_printf_i+0xbc>
 805afdc:	682b      	ldr	r3, [r5, #0]
 805afde:	6820      	ldr	r0, [r4, #0]
 805afe0:	1d19      	adds	r1, r3, #4
 805afe2:	6029      	str	r1, [r5, #0]
 805afe4:	0601      	lsls	r1, r0, #24
 805afe6:	d501      	bpl.n	805afec <_printf_i+0xec>
 805afe8:	681e      	ldr	r6, [r3, #0]
 805afea:	e002      	b.n	805aff2 <_printf_i+0xf2>
 805afec:	0646      	lsls	r6, r0, #25
 805afee:	d5fb      	bpl.n	805afe8 <_printf_i+0xe8>
 805aff0:	881e      	ldrh	r6, [r3, #0]
 805aff2:	4854      	ldr	r0, [pc, #336]	; (805b144 <_printf_i+0x244>)
 805aff4:	2f6f      	cmp	r7, #111	; 0x6f
 805aff6:	bf0c      	ite	eq
 805aff8:	2308      	moveq	r3, #8
 805affa:	230a      	movne	r3, #10
 805affc:	2100      	movs	r1, #0
 805affe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 805b002:	6865      	ldr	r5, [r4, #4]
 805b004:	60a5      	str	r5, [r4, #8]
 805b006:	2d00      	cmp	r5, #0
 805b008:	bfa2      	ittt	ge
 805b00a:	6821      	ldrge	r1, [r4, #0]
 805b00c:	f021 0104 	bicge.w	r1, r1, #4
 805b010:	6021      	strge	r1, [r4, #0]
 805b012:	b90e      	cbnz	r6, 805b018 <_printf_i+0x118>
 805b014:	2d00      	cmp	r5, #0
 805b016:	d04d      	beq.n	805b0b4 <_printf_i+0x1b4>
 805b018:	4615      	mov	r5, r2
 805b01a:	fbb6 f1f3 	udiv	r1, r6, r3
 805b01e:	fb03 6711 	mls	r7, r3, r1, r6
 805b022:	5dc7      	ldrb	r7, [r0, r7]
 805b024:	f805 7d01 	strb.w	r7, [r5, #-1]!
 805b028:	4637      	mov	r7, r6
 805b02a:	42bb      	cmp	r3, r7
 805b02c:	460e      	mov	r6, r1
 805b02e:	d9f4      	bls.n	805b01a <_printf_i+0x11a>
 805b030:	2b08      	cmp	r3, #8
 805b032:	d10b      	bne.n	805b04c <_printf_i+0x14c>
 805b034:	6823      	ldr	r3, [r4, #0]
 805b036:	07de      	lsls	r6, r3, #31
 805b038:	d508      	bpl.n	805b04c <_printf_i+0x14c>
 805b03a:	6923      	ldr	r3, [r4, #16]
 805b03c:	6861      	ldr	r1, [r4, #4]
 805b03e:	4299      	cmp	r1, r3
 805b040:	bfde      	ittt	le
 805b042:	2330      	movle	r3, #48	; 0x30
 805b044:	f805 3c01 	strble.w	r3, [r5, #-1]
 805b048:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 805b04c:	1b52      	subs	r2, r2, r5
 805b04e:	6122      	str	r2, [r4, #16]
 805b050:	f8cd a000 	str.w	sl, [sp]
 805b054:	464b      	mov	r3, r9
 805b056:	aa03      	add	r2, sp, #12
 805b058:	4621      	mov	r1, r4
 805b05a:	4640      	mov	r0, r8
 805b05c:	f7ff fee2 	bl	805ae24 <_printf_common>
 805b060:	3001      	adds	r0, #1
 805b062:	d14c      	bne.n	805b0fe <_printf_i+0x1fe>
 805b064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 805b068:	b004      	add	sp, #16
 805b06a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 805b06e:	4835      	ldr	r0, [pc, #212]	; (805b144 <_printf_i+0x244>)
 805b070:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 805b074:	6829      	ldr	r1, [r5, #0]
 805b076:	6823      	ldr	r3, [r4, #0]
 805b078:	f851 6b04 	ldr.w	r6, [r1], #4
 805b07c:	6029      	str	r1, [r5, #0]
 805b07e:	061d      	lsls	r5, r3, #24
 805b080:	d514      	bpl.n	805b0ac <_printf_i+0x1ac>
 805b082:	07df      	lsls	r7, r3, #31
 805b084:	bf44      	itt	mi
 805b086:	f043 0320 	orrmi.w	r3, r3, #32
 805b08a:	6023      	strmi	r3, [r4, #0]
 805b08c:	b91e      	cbnz	r6, 805b096 <_printf_i+0x196>
 805b08e:	6823      	ldr	r3, [r4, #0]
 805b090:	f023 0320 	bic.w	r3, r3, #32
 805b094:	6023      	str	r3, [r4, #0]
 805b096:	2310      	movs	r3, #16
 805b098:	e7b0      	b.n	805affc <_printf_i+0xfc>
 805b09a:	6823      	ldr	r3, [r4, #0]
 805b09c:	f043 0320 	orr.w	r3, r3, #32
 805b0a0:	6023      	str	r3, [r4, #0]
 805b0a2:	2378      	movs	r3, #120	; 0x78
 805b0a4:	4828      	ldr	r0, [pc, #160]	; (805b148 <_printf_i+0x248>)
 805b0a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 805b0aa:	e7e3      	b.n	805b074 <_printf_i+0x174>
 805b0ac:	0659      	lsls	r1, r3, #25
 805b0ae:	bf48      	it	mi
 805b0b0:	b2b6      	uxthmi	r6, r6
 805b0b2:	e7e6      	b.n	805b082 <_printf_i+0x182>
 805b0b4:	4615      	mov	r5, r2
 805b0b6:	e7bb      	b.n	805b030 <_printf_i+0x130>
 805b0b8:	682b      	ldr	r3, [r5, #0]
 805b0ba:	6826      	ldr	r6, [r4, #0]
 805b0bc:	6961      	ldr	r1, [r4, #20]
 805b0be:	1d18      	adds	r0, r3, #4
 805b0c0:	6028      	str	r0, [r5, #0]
 805b0c2:	0635      	lsls	r5, r6, #24
 805b0c4:	681b      	ldr	r3, [r3, #0]
 805b0c6:	d501      	bpl.n	805b0cc <_printf_i+0x1cc>
 805b0c8:	6019      	str	r1, [r3, #0]
 805b0ca:	e002      	b.n	805b0d2 <_printf_i+0x1d2>
 805b0cc:	0670      	lsls	r0, r6, #25
 805b0ce:	d5fb      	bpl.n	805b0c8 <_printf_i+0x1c8>
 805b0d0:	8019      	strh	r1, [r3, #0]
 805b0d2:	2300      	movs	r3, #0
 805b0d4:	6123      	str	r3, [r4, #16]
 805b0d6:	4615      	mov	r5, r2
 805b0d8:	e7ba      	b.n	805b050 <_printf_i+0x150>
 805b0da:	682b      	ldr	r3, [r5, #0]
 805b0dc:	1d1a      	adds	r2, r3, #4
 805b0de:	602a      	str	r2, [r5, #0]
 805b0e0:	681d      	ldr	r5, [r3, #0]
 805b0e2:	6862      	ldr	r2, [r4, #4]
 805b0e4:	2100      	movs	r1, #0
 805b0e6:	4628      	mov	r0, r5
 805b0e8:	f7e5 f92a 	bl	8040340 <memchr>
 805b0ec:	b108      	cbz	r0, 805b0f2 <_printf_i+0x1f2>
 805b0ee:	1b40      	subs	r0, r0, r5
 805b0f0:	6060      	str	r0, [r4, #4]
 805b0f2:	6863      	ldr	r3, [r4, #4]
 805b0f4:	6123      	str	r3, [r4, #16]
 805b0f6:	2300      	movs	r3, #0
 805b0f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 805b0fc:	e7a8      	b.n	805b050 <_printf_i+0x150>
 805b0fe:	6923      	ldr	r3, [r4, #16]
 805b100:	462a      	mov	r2, r5
 805b102:	4649      	mov	r1, r9
 805b104:	4640      	mov	r0, r8
 805b106:	47d0      	blx	sl
 805b108:	3001      	adds	r0, #1
 805b10a:	d0ab      	beq.n	805b064 <_printf_i+0x164>
 805b10c:	6823      	ldr	r3, [r4, #0]
 805b10e:	079b      	lsls	r3, r3, #30
 805b110:	d413      	bmi.n	805b13a <_printf_i+0x23a>
 805b112:	68e0      	ldr	r0, [r4, #12]
 805b114:	9b03      	ldr	r3, [sp, #12]
 805b116:	4298      	cmp	r0, r3
 805b118:	bfb8      	it	lt
 805b11a:	4618      	movlt	r0, r3
 805b11c:	e7a4      	b.n	805b068 <_printf_i+0x168>
 805b11e:	2301      	movs	r3, #1
 805b120:	4632      	mov	r2, r6
 805b122:	4649      	mov	r1, r9
 805b124:	4640      	mov	r0, r8
 805b126:	47d0      	blx	sl
 805b128:	3001      	adds	r0, #1
 805b12a:	d09b      	beq.n	805b064 <_printf_i+0x164>
 805b12c:	3501      	adds	r5, #1
 805b12e:	68e3      	ldr	r3, [r4, #12]
 805b130:	9903      	ldr	r1, [sp, #12]
 805b132:	1a5b      	subs	r3, r3, r1
 805b134:	42ab      	cmp	r3, r5
 805b136:	dcf2      	bgt.n	805b11e <_printf_i+0x21e>
 805b138:	e7eb      	b.n	805b112 <_printf_i+0x212>
 805b13a:	2500      	movs	r5, #0
 805b13c:	f104 0619 	add.w	r6, r4, #25
 805b140:	e7f5      	b.n	805b12e <_printf_i+0x22e>
 805b142:	bf00      	nop
 805b144:	0805be59 	.word	0x0805be59
 805b148:	0805be6a 	.word	0x0805be6a

0805b14c <__sread>:
 805b14c:	b510      	push	{r4, lr}
 805b14e:	460c      	mov	r4, r1
 805b150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 805b154:	f000 f8de 	bl	805b314 <_read_r>
 805b158:	2800      	cmp	r0, #0
 805b15a:	bfab      	itete	ge
 805b15c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 805b15e:	89a3      	ldrhlt	r3, [r4, #12]
 805b160:	181b      	addge	r3, r3, r0
 805b162:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 805b166:	bfac      	ite	ge
 805b168:	6563      	strge	r3, [r4, #84]	; 0x54
 805b16a:	81a3      	strhlt	r3, [r4, #12]
 805b16c:	bd10      	pop	{r4, pc}

0805b16e <__swrite>:
 805b16e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 805b172:	461f      	mov	r7, r3
 805b174:	898b      	ldrh	r3, [r1, #12]
 805b176:	05db      	lsls	r3, r3, #23
 805b178:	4605      	mov	r5, r0
 805b17a:	460c      	mov	r4, r1
 805b17c:	4616      	mov	r6, r2
 805b17e:	d505      	bpl.n	805b18c <__swrite+0x1e>
 805b180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 805b184:	2302      	movs	r3, #2
 805b186:	2200      	movs	r2, #0
 805b188:	f000 f868 	bl	805b25c <_lseek_r>
 805b18c:	89a3      	ldrh	r3, [r4, #12]
 805b18e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 805b192:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 805b196:	81a3      	strh	r3, [r4, #12]
 805b198:	4632      	mov	r2, r6
 805b19a:	463b      	mov	r3, r7
 805b19c:	4628      	mov	r0, r5
 805b19e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 805b1a2:	f000 b817 	b.w	805b1d4 <_write_r>

0805b1a6 <__sseek>:
 805b1a6:	b510      	push	{r4, lr}
 805b1a8:	460c      	mov	r4, r1
 805b1aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 805b1ae:	f000 f855 	bl	805b25c <_lseek_r>
 805b1b2:	1c43      	adds	r3, r0, #1
 805b1b4:	89a3      	ldrh	r3, [r4, #12]
 805b1b6:	bf15      	itete	ne
 805b1b8:	6560      	strne	r0, [r4, #84]	; 0x54
 805b1ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 805b1be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 805b1c2:	81a3      	strheq	r3, [r4, #12]
 805b1c4:	bf18      	it	ne
 805b1c6:	81a3      	strhne	r3, [r4, #12]
 805b1c8:	bd10      	pop	{r4, pc}

0805b1ca <__sclose>:
 805b1ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 805b1ce:	f000 b813 	b.w	805b1f8 <_close_r>
	...

0805b1d4 <_write_r>:
 805b1d4:	b538      	push	{r3, r4, r5, lr}
 805b1d6:	4d07      	ldr	r5, [pc, #28]	; (805b1f4 <_write_r+0x20>)
 805b1d8:	4604      	mov	r4, r0
 805b1da:	4608      	mov	r0, r1
 805b1dc:	4611      	mov	r1, r2
 805b1de:	2200      	movs	r2, #0
 805b1e0:	602a      	str	r2, [r5, #0]
 805b1e2:	461a      	mov	r2, r3
 805b1e4:	f7e5 fd8a 	bl	8040cfc <_write>
 805b1e8:	1c43      	adds	r3, r0, #1
 805b1ea:	d102      	bne.n	805b1f2 <_write_r+0x1e>
 805b1ec:	682b      	ldr	r3, [r5, #0]
 805b1ee:	b103      	cbz	r3, 805b1f2 <_write_r+0x1e>
 805b1f0:	6023      	str	r3, [r4, #0]
 805b1f2:	bd38      	pop	{r3, r4, r5, pc}
 805b1f4:	240071e4 	.word	0x240071e4

0805b1f8 <_close_r>:
 805b1f8:	b538      	push	{r3, r4, r5, lr}
 805b1fa:	4d06      	ldr	r5, [pc, #24]	; (805b214 <_close_r+0x1c>)
 805b1fc:	2300      	movs	r3, #0
 805b1fe:	4604      	mov	r4, r0
 805b200:	4608      	mov	r0, r1
 805b202:	602b      	str	r3, [r5, #0]
 805b204:	f7e6 fe07 	bl	8041e16 <_close>
 805b208:	1c43      	adds	r3, r0, #1
 805b20a:	d102      	bne.n	805b212 <_close_r+0x1a>
 805b20c:	682b      	ldr	r3, [r5, #0]
 805b20e:	b103      	cbz	r3, 805b212 <_close_r+0x1a>
 805b210:	6023      	str	r3, [r4, #0]
 805b212:	bd38      	pop	{r3, r4, r5, pc}
 805b214:	240071e4 	.word	0x240071e4

0805b218 <_fstat_r>:
 805b218:	b538      	push	{r3, r4, r5, lr}
 805b21a:	4d07      	ldr	r5, [pc, #28]	; (805b238 <_fstat_r+0x20>)
 805b21c:	2300      	movs	r3, #0
 805b21e:	4604      	mov	r4, r0
 805b220:	4608      	mov	r0, r1
 805b222:	4611      	mov	r1, r2
 805b224:	602b      	str	r3, [r5, #0]
 805b226:	f7e6 fe02 	bl	8041e2e <_fstat>
 805b22a:	1c43      	adds	r3, r0, #1
 805b22c:	d102      	bne.n	805b234 <_fstat_r+0x1c>
 805b22e:	682b      	ldr	r3, [r5, #0]
 805b230:	b103      	cbz	r3, 805b234 <_fstat_r+0x1c>
 805b232:	6023      	str	r3, [r4, #0]
 805b234:	bd38      	pop	{r3, r4, r5, pc}
 805b236:	bf00      	nop
 805b238:	240071e4 	.word	0x240071e4

0805b23c <_isatty_r>:
 805b23c:	b538      	push	{r3, r4, r5, lr}
 805b23e:	4d06      	ldr	r5, [pc, #24]	; (805b258 <_isatty_r+0x1c>)
 805b240:	2300      	movs	r3, #0
 805b242:	4604      	mov	r4, r0
 805b244:	4608      	mov	r0, r1
 805b246:	602b      	str	r3, [r5, #0]
 805b248:	f7e6 fe01 	bl	8041e4e <_isatty>
 805b24c:	1c43      	adds	r3, r0, #1
 805b24e:	d102      	bne.n	805b256 <_isatty_r+0x1a>
 805b250:	682b      	ldr	r3, [r5, #0]
 805b252:	b103      	cbz	r3, 805b256 <_isatty_r+0x1a>
 805b254:	6023      	str	r3, [r4, #0]
 805b256:	bd38      	pop	{r3, r4, r5, pc}
 805b258:	240071e4 	.word	0x240071e4

0805b25c <_lseek_r>:
 805b25c:	b538      	push	{r3, r4, r5, lr}
 805b25e:	4d07      	ldr	r5, [pc, #28]	; (805b27c <_lseek_r+0x20>)
 805b260:	4604      	mov	r4, r0
 805b262:	4608      	mov	r0, r1
 805b264:	4611      	mov	r1, r2
 805b266:	2200      	movs	r2, #0
 805b268:	602a      	str	r2, [r5, #0]
 805b26a:	461a      	mov	r2, r3
 805b26c:	f7e6 fdfa 	bl	8041e64 <_lseek>
 805b270:	1c43      	adds	r3, r0, #1
 805b272:	d102      	bne.n	805b27a <_lseek_r+0x1e>
 805b274:	682b      	ldr	r3, [r5, #0]
 805b276:	b103      	cbz	r3, 805b27a <_lseek_r+0x1e>
 805b278:	6023      	str	r3, [r4, #0]
 805b27a:	bd38      	pop	{r3, r4, r5, pc}
 805b27c:	240071e4 	.word	0x240071e4

0805b280 <memmove>:
 805b280:	4288      	cmp	r0, r1
 805b282:	b510      	push	{r4, lr}
 805b284:	eb01 0402 	add.w	r4, r1, r2
 805b288:	d902      	bls.n	805b290 <memmove+0x10>
 805b28a:	4284      	cmp	r4, r0
 805b28c:	4623      	mov	r3, r4
 805b28e:	d807      	bhi.n	805b2a0 <memmove+0x20>
 805b290:	1e43      	subs	r3, r0, #1
 805b292:	42a1      	cmp	r1, r4
 805b294:	d008      	beq.n	805b2a8 <memmove+0x28>
 805b296:	f811 2b01 	ldrb.w	r2, [r1], #1
 805b29a:	f803 2f01 	strb.w	r2, [r3, #1]!
 805b29e:	e7f8      	b.n	805b292 <memmove+0x12>
 805b2a0:	4402      	add	r2, r0
 805b2a2:	4601      	mov	r1, r0
 805b2a4:	428a      	cmp	r2, r1
 805b2a6:	d100      	bne.n	805b2aa <memmove+0x2a>
 805b2a8:	bd10      	pop	{r4, pc}
 805b2aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 805b2ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 805b2b2:	e7f7      	b.n	805b2a4 <memmove+0x24>

0805b2b4 <_realloc_r>:
 805b2b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 805b2b8:	4680      	mov	r8, r0
 805b2ba:	4614      	mov	r4, r2
 805b2bc:	460e      	mov	r6, r1
 805b2be:	b921      	cbnz	r1, 805b2ca <_realloc_r+0x16>
 805b2c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 805b2c4:	4611      	mov	r1, r2
 805b2c6:	f7fe bea1 	b.w	805a00c <_malloc_r>
 805b2ca:	b92a      	cbnz	r2, 805b2d8 <_realloc_r+0x24>
 805b2cc:	f7fe fe32 	bl	8059f34 <_free_r>
 805b2d0:	4625      	mov	r5, r4
 805b2d2:	4628      	mov	r0, r5
 805b2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 805b2d8:	f000 f82e 	bl	805b338 <_malloc_usable_size_r>
 805b2dc:	4284      	cmp	r4, r0
 805b2de:	4607      	mov	r7, r0
 805b2e0:	d802      	bhi.n	805b2e8 <_realloc_r+0x34>
 805b2e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 805b2e6:	d812      	bhi.n	805b30e <_realloc_r+0x5a>
 805b2e8:	4621      	mov	r1, r4
 805b2ea:	4640      	mov	r0, r8
 805b2ec:	f7fe fe8e 	bl	805a00c <_malloc_r>
 805b2f0:	4605      	mov	r5, r0
 805b2f2:	2800      	cmp	r0, #0
 805b2f4:	d0ed      	beq.n	805b2d2 <_realloc_r+0x1e>
 805b2f6:	42bc      	cmp	r4, r7
 805b2f8:	4622      	mov	r2, r4
 805b2fa:	4631      	mov	r1, r6
 805b2fc:	bf28      	it	cs
 805b2fe:	463a      	movcs	r2, r7
 805b300:	f7fe fe02 	bl	8059f08 <memcpy>
 805b304:	4631      	mov	r1, r6
 805b306:	4640      	mov	r0, r8
 805b308:	f7fe fe14 	bl	8059f34 <_free_r>
 805b30c:	e7e1      	b.n	805b2d2 <_realloc_r+0x1e>
 805b30e:	4635      	mov	r5, r6
 805b310:	e7df      	b.n	805b2d2 <_realloc_r+0x1e>
	...

0805b314 <_read_r>:
 805b314:	b538      	push	{r3, r4, r5, lr}
 805b316:	4d07      	ldr	r5, [pc, #28]	; (805b334 <_read_r+0x20>)
 805b318:	4604      	mov	r4, r0
 805b31a:	4608      	mov	r0, r1
 805b31c:	4611      	mov	r1, r2
 805b31e:	2200      	movs	r2, #0
 805b320:	602a      	str	r2, [r5, #0]
 805b322:	461a      	mov	r2, r3
 805b324:	f7e6 fd5a 	bl	8041ddc <_read>
 805b328:	1c43      	adds	r3, r0, #1
 805b32a:	d102      	bne.n	805b332 <_read_r+0x1e>
 805b32c:	682b      	ldr	r3, [r5, #0]
 805b32e:	b103      	cbz	r3, 805b332 <_read_r+0x1e>
 805b330:	6023      	str	r3, [r4, #0]
 805b332:	bd38      	pop	{r3, r4, r5, pc}
 805b334:	240071e4 	.word	0x240071e4

0805b338 <_malloc_usable_size_r>:
 805b338:	f851 3c04 	ldr.w	r3, [r1, #-4]
 805b33c:	1f18      	subs	r0, r3, #4
 805b33e:	2b00      	cmp	r3, #0
 805b340:	bfbc      	itt	lt
 805b342:	580b      	ldrlt	r3, [r1, r0]
 805b344:	18c0      	addlt	r0, r0, r3
 805b346:	4770      	bx	lr

0805b348 <_init>:
 805b348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 805b34a:	bf00      	nop
 805b34c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 805b34e:	bc08      	pop	{r3}
 805b350:	469e      	mov	lr, r3
 805b352:	4770      	bx	lr

0805b354 <_fini>:
 805b354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 805b356:	bf00      	nop
 805b358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 805b35a:	bc08      	pop	{r3}
 805b35c:	469e      	mov	lr, r3
 805b35e:	4770      	bx	lr
