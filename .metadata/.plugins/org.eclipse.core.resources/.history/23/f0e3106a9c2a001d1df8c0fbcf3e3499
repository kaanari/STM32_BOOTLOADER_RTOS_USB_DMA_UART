/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"
#include "fatfs.h"
#include "usb_host.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "file_operations.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define UART_TX_BUFFER_LENGTH 66
#define UART_RX_BUFFER_LENGTH 66


#define APP_NUM 1


extern ApplicationTypeDef Appli_state;

extern uint8_t disk_mounted;


//const uint32_t __attribute__((__section__(".crc_checksum"))) CRC_val = 0x888A5BDE;


/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

UART_HandleTypeDef huart3;
DMA_HandleTypeDef hdma_usart3_tx;
DMA_HandleTypeDef hdma_usart3_rx;

osThreadId defaultTaskHandle;
osThreadId USBFileSystemTaHandle;
osThreadId ConsoleTaskHandle;
osTimerId Timer1Handle;
osSemaphoreId UART_TX_SemaphoreHandle;
/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_DMA_Init(void);
void StartDefaultTask(void const * argument);
void USBFileSystemTask_Start(void const * argument);
void ConsoleTask_Start(void const * argument);
void Timer1_Callback(void const * argument);

/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t UART_TX_BUFFER[UART_TX_BUFFER_LENGTH];
uint8_t UART_RX_BUFFER[UART_RX_BUFFER_LENGTH];

int _write(int file, uint8_t *data, int len)
{

   /* Lock Semaphore to ensure print buffer is used just by one thread. */
   osSemaphoreWait(UART_TX_SemaphoreHandle, osWaitForever);

   memcpy(UART_TX_BUFFER, data, len);

   HAL_StatusTypeDef status =
      HAL_UART_Transmit_DMA(&huart3, (uint8_t*)UART_TX_BUFFER, len);

   // return # of bytes written - as best we can tell
   return (status == HAL_OK ? len : 0);
}


/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_FATFS_Init();
  MX_DMA_Init();
  MX_USART3_UART_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of UART_TX_Semaphore */
  osSemaphoreDef(UART_TX_Semaphore);
  UART_TX_SemaphoreHandle = osSemaphoreCreate(osSemaphore(UART_TX_Semaphore), 1);

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of Timer1 */
  osTimerDef(Timer1, Timer1_Callback);
  Timer1Handle = osTimerCreate(osTimer(Timer1), osTimerPeriodic, NULL);

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* definition and creation of USBFileSystemTa */
  osThreadDef(USBFileSystemTa, USBFileSystemTask_Start, osPriorityNormal, 0, 128);
  USBFileSystemTaHandle = osThreadCreate(osThread(USBFileSystemTa), NULL);

  /* definition and creation of ConsoleTask */
  osThreadDef(ConsoleTask, ConsoleTask_Start, osPriorityNormal, 0, 1024);
  ConsoleTaskHandle = osThreadCreate(osThread(ConsoleTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 275;
  RCC_OscInitStruct.PLL.PLLP = 1;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, USB_VBUS_Pin|LED_YELLOW_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

  /*Configure GPIO pins : USB_VBUS_Pin LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin|LED_YELLOW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

static size_t old_RX_buffer_position = 0;
static size_t current_RX_buffer_position = 0;

char received_command[UART_RX_BUFFER_LENGTH];

/* This function release the semaphore if the TX event is finished. */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{

	/* Release Semaphore to execute next print operation */
	osSemaphoreRelease(UART_TX_SemaphoreHandle);
	HAL_GPIO_TogglePin(GPIOB,LED_GREEN_Pin);
}

/* UART RX DMA CALLBACK FUNCTION */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){

	HAL_GPIO_TogglePin(GPIOB,LED_GREEN_Pin);


	current_RX_buffer_position = Size; // Size parameter is not working as expected at first sight.

	/* Receive Command from RX BUFFER */

	if(current_RX_buffer_position > old_RX_buffer_position){

	   /*
		* [   0   ]
		* [   1   ] <- old_pos |------------------------------------|
		* [   2   ]            |                                    |
		* [   3   ]            | Single block (len = pos - old_pos) |
		* [   4   ]            |                                    |
		* [   5   ]            |------------------------------------|
		* [   6   ] <- pos
		* [   7   ]
		* [ N - 1 ]
		*/
	  memcpy(received_command, UART_RX_BUFFER+old_RX_buffer_position, current_RX_buffer_position - old_RX_buffer_position -1);

	  received_command[current_RX_buffer_position - old_RX_buffer_position -1] = '\0';
	}else{
        /*
        * [   0   ]            |---------------------------------|
        * [   1   ]            | Second block (len = pos)        |
        * [   2   ]            |---------------------------------|
        * [   3   ] <- pos
        * [   4   ] <- old_pos |---------------------------------|
        * [   5   ]            |                                 |
        * [   6   ]            | First block (len = N - old_pos) |
        * [   7   ]            |                                 |
        * [ N - 1 ]            |---------------------------------|
        */


	  memcpy(received_command, UART_RX_BUFFER+old_RX_buffer_position, UART_RX_BUFFER_LENGTH-old_RX_buffer_position);

	  memcpy(received_command+UART_RX_BUFFER_LENGTH-old_RX_buffer_position, UART_RX_BUFFER, Size-1);

	  received_command[UART_RX_BUFFER_LENGTH-old_RX_buffer_position + Size - 1] = '\0';
	}

	old_RX_buffer_position = current_RX_buffer_position;


	/* Start DMA Reception again */

	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, UART_RX_BUFFER, UART_RX_BUFFER_LENGTH);
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_TC);

	/* Sending ConsoleTask Notification to resume operation */

	BaseType_t xHigherPriorityTaskWoken;

	/* xHigherPriorityTaskWoken must be initialised to pdFALSE.  If calling
	vTaskNotifyGiveFromISR() unblocks the handling task, and the priority of
	the handling task is higher than the priority of the currently running task,
	then xHigherPriorityTaskWoken will automatically get set to pdTRUE. */
	xHigherPriorityTaskWoken = pdFALSE;

	/* Unblock the handling task so the task can perform any processing necessitated
	by the interrupt.  xHandlingTask is the task's handle, which was obtained
	when the task was created. */
	vTaskNotifyGiveFromISR(ConsoleTaskHandle, &xHigherPriorityTaskWoken );

	/* Force a context switch if xHigherPriorityTaskWoken is now set to pdTRUE.
	The macro used to do this is dependent on the port and may be called
	portEND_SWITCHING_ISR. */
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );

}


/* USER CODE END 4 */

/* USER CODE BEGIN Header_StartDefaultTask */
/**
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
  /* USER CODE BEGIN 5 */

  /* USRT RX INITIATE */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, UART_RX_BUFFER, UART_RX_BUFFER_LENGTH);
  __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
  __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_TC);

  int count = 0;
  /* Infinite loop */
  for(;;)
  {
    //printf("Hello World! %d\r\n", count++);
    osDelay(2000);
  }
  /* USER CODE END 5 */
}

/* USER CODE BEGIN Header_USBFileSystemTask_Start */
/**
* @brief Function implementing the USBFileSystemTa thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_USBFileSystemTask_Start */
void USBFileSystemTask_Start(void const * argument)
{
  /* USER CODE BEGIN USBFileSystemTask_Start */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END USBFileSystemTask_Start */
}

/* USER CODE BEGIN Header_ConsoleTask_Start */
/**
* @brief Function implementing the ConsoleTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ConsoleTask_Start */
void ConsoleTask_Start(void const * argument)
{
    /* USER CODE BEGIN ConsoleTask_Start */
	// ToDo Add buffer full mechanism to UART TX.
	printf("======================\r\n");
	printf(" Terminal is ready...\r\n");
	printf(" Waiting commands... \r\n");
	printf("======================\r\n");

	uint8_t str_trim_start = 0;
	uint8_t str_trim_end = 0;

	FRESULT fr;
	UINT SZ_STR = 100;
	TCHAR str[SZ_STR];

	char* trimmed_command = NULL;


  /* Infinite loop */
  for(;;)
  {
	 /* Wait incoming command from UART */

	ulTaskNotifyTake(pdTRUE,          /* Clear the notification value before exiting. */
	                 portMAX_DELAY ); /* Block indefinitely. */


	for(str_trim_start = 0; str_trim_start <= strlen(received_command); str_trim_start ++)
	{
		if(received_command[str_trim_start] != ' ')
		{
			trimmed_command = received_command + str_trim_start;
			break;
		}
	}

	for(str_trim_end = strlen(trimmed_command)-1; str_trim_end >= 0; str_trim_end--)
	{
		if(trimmed_command[str_trim_end] != ' ')
		{
			trimmed_command[str_trim_end+1] = '\0';
			break;
		}
	}

	/* Handling Incoming Command */

	printf("CMD$: %s \r\n", trimmed_command);

	if(Appli_state != APPLICATION_READY){
		printf("USB is not connected!\r\n");
		continue;
	}



	if(strlen(trimmed_command) > 0)
	{

		if(!strncmp(trimmed_command , "mount" , 5))
		{
			if(disk_mounted){
				printf("USB is mounted already.\r\n");
				continue;
			}

			printf("Mounting the USB...\r\n");

			if(f_mount(&USBHFatFS, (TCHAR const*)USBHPath, 0) != FR_OK)
			{
				printf("Mounting error!\r\n");
				Error_Handler();
			}

			disk_mounted = 1;
			printf("Mounting the USB is done.\r\n");
		}
		else if(!strncmp(trimmed_command , "unmount" , 7))
		{
			if(!disk_mounted){
				printf("USB is not mounted yet. Mount it first!\r\n");
				continue;
			}

			printf("Unmounting the USB...\r\n");

			if(f_mount(NULL, (TCHAR const*)USBHPath, 0) != FR_OK)
			{
				printf("Unmounting error!\r\n");
				Error_Handler();
			}

			disk_mounted = 0;
			printf("Unmounting the USB is done.\r\n");

		}

		/* Check Mount Stat */
		if(!disk_mounted){
			printf("USB is not mounted yet. Mount it first!\r\n");
			continue;
		}

		/* Branch into Applications */

		if(!strncmp(trimmed_command , "pwd" , 3))
		{
			fr = f_getcwd(str, SZ_STR);  /* Get current directory path */
			printf("%s\r\n", str);
		}
		else if(!strncmp(trimmed_command , "ls" , 2)){
			char *buf = malloc(30*sizeof(char));
			strcpy(buf, "/");
			fr = scan_all_files(buf);
			free(buf);
		}
		else if(!strncmp(trimmed_command , "touch" , 5))
		{
			create_file(trimmed_command + 5);
		}
		else if(!strncmp(trimmed_command , "rm" , 2))
		{
			remove_file(trimmed_command+2);
		}
		else if(!strncmp(trimmed_command , "mkdir" , 5))
		{
			create_dir(trimmed_command+5);
		}else if(!strncmp(trimmed_command , "echo" , 4))
		{
			echo(trimmed_command+4);
		}else if(!strncmp(trimmed_command , "cat" , 3))
		{
			read_file(trimmed_command+3);
		}else{
			printf("Unknown Command!\r\n");
		}

	}

    osDelay(1);
  }
  /* USER CODE END ConsoleTask_Start */
}

/* Timer1_Callback function */
void Timer1_Callback(void const * argument)
{
  /* USER CODE BEGIN Timer1_Callback */

  /* USER CODE END Timer1_Callback */
}

/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM1 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
