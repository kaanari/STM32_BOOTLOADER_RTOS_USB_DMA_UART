
RTOS_USBFS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013be4  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  08013eb4  08013eb4  00023eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080140d0  080140d0  000240d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080140d8  080140d8  000240d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080140dc  080140dc  000240dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000098  24000000  080140e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004f3c  24000098  08014178  00030098  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24004fd4  08014178  00034fd4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002f6a6  00000000  00000000  000300c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000063d8  00000000  00000000  0005f76c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001fb8  00000000  00000000  00065b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001d50  00000000  00000000  00067b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b28f  00000000  00000000  00069850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002e13d  00000000  00000000  000a4adf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015cc09  00000000  00000000  000d2c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0022f825  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008be0  00000000  00000000  0022f878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000098 	.word	0x24000098
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08013e9c 	.word	0x08013e9c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400009c 	.word	0x2400009c
 800030c:	08013e9c 	.word	0x08013e9c

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003c4:	f000 b974 	b.w	80006b0 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468e      	mov	lr, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d14d      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ee:	428a      	cmp	r2, r1
 80003f0:	4694      	mov	ip, r2
 80003f2:	d969      	bls.n	80004c8 <__udivmoddi4+0xe8>
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	b152      	cbz	r2, 8000410 <__udivmoddi4+0x30>
 80003fa:	fa01 f302 	lsl.w	r3, r1, r2
 80003fe:	f1c2 0120 	rsb	r1, r2, #32
 8000402:	fa20 f101 	lsr.w	r1, r0, r1
 8000406:	fa0c fc02 	lsl.w	ip, ip, r2
 800040a:	ea41 0e03 	orr.w	lr, r1, r3
 800040e:	4094      	lsls	r4, r2
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	0c21      	lsrs	r1, r4, #16
 8000416:	fbbe f6f8 	udiv	r6, lr, r8
 800041a:	fa1f f78c 	uxth.w	r7, ip
 800041e:	fb08 e316 	mls	r3, r8, r6, lr
 8000422:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000426:	fb06 f107 	mul.w	r1, r6, r7
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000436:	f080 811f 	bcs.w	8000678 <__udivmoddi4+0x298>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 811c 	bls.w	8000678 <__udivmoddi4+0x298>
 8000440:	3e02      	subs	r6, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f0f8 	udiv	r0, r3, r8
 800044c:	fb08 3310 	mls	r3, r8, r0, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb00 f707 	mul.w	r7, r0, r7
 8000458:	42a7      	cmp	r7, r4
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x92>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000464:	f080 810a 	bcs.w	800067c <__udivmoddi4+0x29c>
 8000468:	42a7      	cmp	r7, r4
 800046a:	f240 8107 	bls.w	800067c <__udivmoddi4+0x29c>
 800046e:	4464      	add	r4, ip
 8000470:	3802      	subs	r0, #2
 8000472:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000476:	1be4      	subs	r4, r4, r7
 8000478:	2600      	movs	r6, #0
 800047a:	b11d      	cbz	r5, 8000484 <__udivmoddi4+0xa4>
 800047c:	40d4      	lsrs	r4, r2
 800047e:	2300      	movs	r3, #0
 8000480:	e9c5 4300 	strd	r4, r3, [r5]
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d909      	bls.n	80004a2 <__udivmoddi4+0xc2>
 800048e:	2d00      	cmp	r5, #0
 8000490:	f000 80ef 	beq.w	8000672 <__udivmoddi4+0x292>
 8000494:	2600      	movs	r6, #0
 8000496:	e9c5 0100 	strd	r0, r1, [r5]
 800049a:	4630      	mov	r0, r6
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	fab3 f683 	clz	r6, r3
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	d14a      	bne.n	8000540 <__udivmoddi4+0x160>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d302      	bcc.n	80004b4 <__udivmoddi4+0xd4>
 80004ae:	4282      	cmp	r2, r0
 80004b0:	f200 80f9 	bhi.w	80006a6 <__udivmoddi4+0x2c6>
 80004b4:	1a84      	subs	r4, r0, r2
 80004b6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ba:	2001      	movs	r0, #1
 80004bc:	469e      	mov	lr, r3
 80004be:	2d00      	cmp	r5, #0
 80004c0:	d0e0      	beq.n	8000484 <__udivmoddi4+0xa4>
 80004c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004c6:	e7dd      	b.n	8000484 <__udivmoddi4+0xa4>
 80004c8:	b902      	cbnz	r2, 80004cc <__udivmoddi4+0xec>
 80004ca:	deff      	udf	#255	; 0xff
 80004cc:	fab2 f282 	clz	r2, r2
 80004d0:	2a00      	cmp	r2, #0
 80004d2:	f040 8092 	bne.w	80005fa <__udivmoddi4+0x21a>
 80004d6:	eba1 010c 	sub.w	r1, r1, ip
 80004da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004de:	fa1f fe8c 	uxth.w	lr, ip
 80004e2:	2601      	movs	r6, #1
 80004e4:	0c20      	lsrs	r0, r4, #16
 80004e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ea:	fb07 1113 	mls	r1, r7, r3, r1
 80004ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f2:	fb0e f003 	mul.w	r0, lr, r3
 80004f6:	4288      	cmp	r0, r1
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x12c>
 80004fa:	eb1c 0101 	adds.w	r1, ip, r1
 80004fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x12a>
 8000504:	4288      	cmp	r0, r1
 8000506:	f200 80cb 	bhi.w	80006a0 <__udivmoddi4+0x2c0>
 800050a:	4643      	mov	r3, r8
 800050c:	1a09      	subs	r1, r1, r0
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb1 f0f7 	udiv	r0, r1, r7
 8000514:	fb07 1110 	mls	r1, r7, r0, r1
 8000518:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800051c:	fb0e fe00 	mul.w	lr, lr, r0
 8000520:	45a6      	cmp	lr, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x156>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800052c:	d202      	bcs.n	8000534 <__udivmoddi4+0x154>
 800052e:	45a6      	cmp	lr, r4
 8000530:	f200 80bb 	bhi.w	80006aa <__udivmoddi4+0x2ca>
 8000534:	4608      	mov	r0, r1
 8000536:	eba4 040e 	sub.w	r4, r4, lr
 800053a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800053e:	e79c      	b.n	800047a <__udivmoddi4+0x9a>
 8000540:	f1c6 0720 	rsb	r7, r6, #32
 8000544:	40b3      	lsls	r3, r6
 8000546:	fa22 fc07 	lsr.w	ip, r2, r7
 800054a:	ea4c 0c03 	orr.w	ip, ip, r3
 800054e:	fa20 f407 	lsr.w	r4, r0, r7
 8000552:	fa01 f306 	lsl.w	r3, r1, r6
 8000556:	431c      	orrs	r4, r3
 8000558:	40f9      	lsrs	r1, r7
 800055a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800055e:	fa00 f306 	lsl.w	r3, r0, r6
 8000562:	fbb1 f8f9 	udiv	r8, r1, r9
 8000566:	0c20      	lsrs	r0, r4, #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fb09 1118 	mls	r1, r9, r8, r1
 8000570:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000574:	fb08 f00e 	mul.w	r0, r8, lr
 8000578:	4288      	cmp	r0, r1
 800057a:	fa02 f206 	lsl.w	r2, r2, r6
 800057e:	d90b      	bls.n	8000598 <__udivmoddi4+0x1b8>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000588:	f080 8088 	bcs.w	800069c <__udivmoddi4+0x2bc>
 800058c:	4288      	cmp	r0, r1
 800058e:	f240 8085 	bls.w	800069c <__udivmoddi4+0x2bc>
 8000592:	f1a8 0802 	sub.w	r8, r8, #2
 8000596:	4461      	add	r1, ip
 8000598:	1a09      	subs	r1, r1, r0
 800059a:	b2a4      	uxth	r4, r4
 800059c:	fbb1 f0f9 	udiv	r0, r1, r9
 80005a0:	fb09 1110 	mls	r1, r9, r0, r1
 80005a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005ac:	458e      	cmp	lr, r1
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x1e2>
 80005b0:	eb1c 0101 	adds.w	r1, ip, r1
 80005b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80005b8:	d26c      	bcs.n	8000694 <__udivmoddi4+0x2b4>
 80005ba:	458e      	cmp	lr, r1
 80005bc:	d96a      	bls.n	8000694 <__udivmoddi4+0x2b4>
 80005be:	3802      	subs	r0, #2
 80005c0:	4461      	add	r1, ip
 80005c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005c6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ca:	eba1 010e 	sub.w	r1, r1, lr
 80005ce:	42a1      	cmp	r1, r4
 80005d0:	46c8      	mov	r8, r9
 80005d2:	46a6      	mov	lr, r4
 80005d4:	d356      	bcc.n	8000684 <__udivmoddi4+0x2a4>
 80005d6:	d053      	beq.n	8000680 <__udivmoddi4+0x2a0>
 80005d8:	b15d      	cbz	r5, 80005f2 <__udivmoddi4+0x212>
 80005da:	ebb3 0208 	subs.w	r2, r3, r8
 80005de:	eb61 010e 	sbc.w	r1, r1, lr
 80005e2:	fa01 f707 	lsl.w	r7, r1, r7
 80005e6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ea:	40f1      	lsrs	r1, r6
 80005ec:	431f      	orrs	r7, r3
 80005ee:	e9c5 7100 	strd	r7, r1, [r5]
 80005f2:	2600      	movs	r6, #0
 80005f4:	4631      	mov	r1, r6
 80005f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	40d8      	lsrs	r0, r3
 8000600:	fa0c fc02 	lsl.w	ip, ip, r2
 8000604:	fa21 f303 	lsr.w	r3, r1, r3
 8000608:	4091      	lsls	r1, r2
 800060a:	4301      	orrs	r1, r0
 800060c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000610:	fa1f fe8c 	uxth.w	lr, ip
 8000614:	fbb3 f0f7 	udiv	r0, r3, r7
 8000618:	fb07 3610 	mls	r6, r7, r0, r3
 800061c:	0c0b      	lsrs	r3, r1, #16
 800061e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000622:	fb00 f60e 	mul.w	r6, r0, lr
 8000626:	429e      	cmp	r6, r3
 8000628:	fa04 f402 	lsl.w	r4, r4, r2
 800062c:	d908      	bls.n	8000640 <__udivmoddi4+0x260>
 800062e:	eb1c 0303 	adds.w	r3, ip, r3
 8000632:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000636:	d22f      	bcs.n	8000698 <__udivmoddi4+0x2b8>
 8000638:	429e      	cmp	r6, r3
 800063a:	d92d      	bls.n	8000698 <__udivmoddi4+0x2b8>
 800063c:	3802      	subs	r0, #2
 800063e:	4463      	add	r3, ip
 8000640:	1b9b      	subs	r3, r3, r6
 8000642:	b289      	uxth	r1, r1
 8000644:	fbb3 f6f7 	udiv	r6, r3, r7
 8000648:	fb07 3316 	mls	r3, r7, r6, r3
 800064c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000650:	fb06 f30e 	mul.w	r3, r6, lr
 8000654:	428b      	cmp	r3, r1
 8000656:	d908      	bls.n	800066a <__udivmoddi4+0x28a>
 8000658:	eb1c 0101 	adds.w	r1, ip, r1
 800065c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000660:	d216      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000662:	428b      	cmp	r3, r1
 8000664:	d914      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000666:	3e02      	subs	r6, #2
 8000668:	4461      	add	r1, ip
 800066a:	1ac9      	subs	r1, r1, r3
 800066c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000670:	e738      	b.n	80004e4 <__udivmoddi4+0x104>
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e705      	b.n	8000484 <__udivmoddi4+0xa4>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e3      	b.n	8000444 <__udivmoddi4+0x64>
 800067c:	4618      	mov	r0, r3
 800067e:	e6f8      	b.n	8000472 <__udivmoddi4+0x92>
 8000680:	454b      	cmp	r3, r9
 8000682:	d2a9      	bcs.n	80005d8 <__udivmoddi4+0x1f8>
 8000684:	ebb9 0802 	subs.w	r8, r9, r2
 8000688:	eb64 0e0c 	sbc.w	lr, r4, ip
 800068c:	3801      	subs	r0, #1
 800068e:	e7a3      	b.n	80005d8 <__udivmoddi4+0x1f8>
 8000690:	4646      	mov	r6, r8
 8000692:	e7ea      	b.n	800066a <__udivmoddi4+0x28a>
 8000694:	4620      	mov	r0, r4
 8000696:	e794      	b.n	80005c2 <__udivmoddi4+0x1e2>
 8000698:	4640      	mov	r0, r8
 800069a:	e7d1      	b.n	8000640 <__udivmoddi4+0x260>
 800069c:	46d0      	mov	r8, sl
 800069e:	e77b      	b.n	8000598 <__udivmoddi4+0x1b8>
 80006a0:	3b02      	subs	r3, #2
 80006a2:	4461      	add	r1, ip
 80006a4:	e732      	b.n	800050c <__udivmoddi4+0x12c>
 80006a6:	4630      	mov	r0, r6
 80006a8:	e709      	b.n	80004be <__udivmoddi4+0xde>
 80006aa:	4464      	add	r4, ip
 80006ac:	3802      	subs	r0, #2
 80006ae:	e742      	b.n	8000536 <__udivmoddi4+0x156>

080006b0 <__aeabi_idiv0>:
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	60f8      	str	r0, [r7, #12]
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	4a07      	ldr	r2, [pc, #28]	; (80006e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80006c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	4a06      	ldr	r2, [pc, #24]	; (80006e4 <vApplicationGetIdleTaskMemory+0x30>)
 80006ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2280      	movs	r2, #128	; 0x80
 80006d0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80006d2:	bf00      	nop
 80006d4:	3714      	adds	r7, #20
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	240000b4 	.word	0x240000b4
 80006e4:	24000108 	.word	0x24000108

080006e8 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	4a07      	ldr	r2, [pc, #28]	; (8000714 <vApplicationGetTimerTaskMemory+0x2c>)
 80006f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	4a06      	ldr	r2, [pc, #24]	; (8000718 <vApplicationGetTimerTaskMemory+0x30>)
 80006fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000706:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000708:	bf00      	nop
 800070a:	3714      	adds	r7, #20
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	24000308 	.word	0x24000308
 8000718:	2400035c 	.word	0x2400035c

0800071c <_write>:

uint8_t UART_TX_BUFFER[UART_TX_BUFFER_LENGTH];
uint8_t UART_RX_BUFFER[UART_RX_BUFFER_LENGTH];

int _write(int file, uint8_t *data, int len)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]

   memcpy(UART_TX_BUFFER, data, len);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	461a      	mov	r2, r3
 800072c:	68b9      	ldr	r1, [r7, #8]
 800072e:	480b      	ldr	r0, [pc, #44]	; (800075c <_write+0x40>)
 8000730:	f012 fb9a 	bl	8012e68 <memcpy>

   HAL_StatusTypeDef status =
      HAL_UART_Transmit_DMA(&huart3, (uint8_t*)UART_TX_BUFFER, len);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	b29b      	uxth	r3, r3
 8000738:	461a      	mov	r2, r3
 800073a:	4908      	ldr	r1, [pc, #32]	; (800075c <_write+0x40>)
 800073c:	4808      	ldr	r0, [pc, #32]	; (8000760 <_write+0x44>)
 800073e:	f008 fb6f 	bl	8008e20 <HAL_UART_Transmit_DMA>
 8000742:	4603      	mov	r3, r0
 8000744:	75fb      	strb	r3, [r7, #23]

   // return # of bytes written - as best we can tell
   return (status == HAL_OK ? len : 0);
 8000746:	7dfb      	ldrb	r3, [r7, #23]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d101      	bne.n	8000750 <_write+0x34>
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	e000      	b.n	8000752 <_write+0x36>
 8000750:	2300      	movs	r3, #0
}
 8000752:	4618      	mov	r0, r3
 8000754:	3718      	adds	r7, #24
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	240008f0 	.word	0x240008f0
 8000760:	2400075c 	.word	0x2400075c

08000764 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000764:	b5b0      	push	{r4, r5, r7, lr}
 8000766:	b09a      	sub	sp, #104	; 0x68
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076a:	f000 ffb3 	bl	80016d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076e:	f000 f86f 	bl	8000850 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000772:	f000 f951 	bl	8000a18 <MX_GPIO_Init>
  MX_FATFS_Init();
 8000776:	f00b fc0d 	bl	800bf94 <MX_FATFS_Init>
  MX_DMA_Init();
 800077a:	f000 f925 	bl	80009c8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800077e:	f000 f8d7 	bl	8000930 <MX_USART3_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of BinarySem01 */
  osSemaphoreDef(BinarySem01);
 8000782:	2300      	movs	r3, #0
 8000784:	663b      	str	r3, [r7, #96]	; 0x60
 8000786:	2300      	movs	r3, #0
 8000788:	667b      	str	r3, [r7, #100]	; 0x64
  BinarySem01Handle = osSemaphoreCreate(osSemaphore(BinarySem01), 1);
 800078a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800078e:	2101      	movs	r1, #1
 8000790:	4618      	mov	r0, r3
 8000792:	f00f f937 	bl	800fa04 <osSemaphoreCreate>
 8000796:	4603      	mov	r3, r0
 8000798:	4a24      	ldr	r2, [pc, #144]	; (800082c <main+0xc8>)
 800079a:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of Timer1 */
  osTimerDef(Timer1, Timer1_Callback);
 800079c:	4b24      	ldr	r3, [pc, #144]	; (8000830 <main+0xcc>)
 800079e:	65bb      	str	r3, [r7, #88]	; 0x58
 80007a0:	2300      	movs	r3, #0
 80007a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  Timer1Handle = osTimerCreate(osTimer(Timer1), osTimerPeriodic, NULL);
 80007a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80007a8:	2200      	movs	r2, #0
 80007aa:	2101      	movs	r1, #1
 80007ac:	4618      	mov	r0, r3
 80007ae:	f00f f8f5 	bl	800f99c <osTimerCreate>
 80007b2:	4603      	mov	r3, r0
 80007b4:	4a1f      	ldr	r2, [pc, #124]	; (8000834 <main+0xd0>)
 80007b6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80007b8:	4b1f      	ldr	r3, [pc, #124]	; (8000838 <main+0xd4>)
 80007ba:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80007be:	461d      	mov	r5, r3
 80007c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80007cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f00f f882 	bl	800f8dc <osThreadCreate>
 80007d8:	4603      	mov	r3, r0
 80007da:	4a18      	ldr	r2, [pc, #96]	; (800083c <main+0xd8>)
 80007dc:	6013      	str	r3, [r2, #0]

  /* definition and creation of USBFileSystem */
  osThreadDef(USBFileSystem, USBFileSystem_Init, osPriorityNormal, 0, 128);
 80007de:	4b18      	ldr	r3, [pc, #96]	; (8000840 <main+0xdc>)
 80007e0:	f107 0420 	add.w	r4, r7, #32
 80007e4:	461d      	mov	r5, r3
 80007e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USBFileSystemHandle = osThreadCreate(osThread(USBFileSystem), NULL);
 80007f2:	f107 0320 	add.w	r3, r7, #32
 80007f6:	2100      	movs	r1, #0
 80007f8:	4618      	mov	r0, r3
 80007fa:	f00f f86f 	bl	800f8dc <osThreadCreate>
 80007fe:	4603      	mov	r3, r0
 8000800:	4a10      	ldr	r2, [pc, #64]	; (8000844 <main+0xe0>)
 8000802:	6013      	str	r3, [r2, #0]

  /* definition and creation of CommInterface */
  osThreadDef(CommInterface, CommInterface_Init, osPriorityNormal, 0, 128);
 8000804:	4b10      	ldr	r3, [pc, #64]	; (8000848 <main+0xe4>)
 8000806:	1d3c      	adds	r4, r7, #4
 8000808:	461d      	mov	r5, r3
 800080a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800080c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800080e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000812:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CommInterfaceHandle = osThreadCreate(osThread(CommInterface), NULL);
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f00f f85e 	bl	800f8dc <osThreadCreate>
 8000820:	4603      	mov	r3, r0
 8000822:	4a0a      	ldr	r2, [pc, #40]	; (800084c <main+0xe8>)
 8000824:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000826:	f00f f852 	bl	800f8ce <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800082a:	e7fe      	b.n	800082a <main+0xc6>
 800082c:	240008ec 	.word	0x240008ec
 8000830:	08001109 	.word	0x08001109
 8000834:	240008e8 	.word	0x240008e8
 8000838:	08013ee0 	.word	0x08013ee0
 800083c:	240008dc 	.word	0x240008dc
 8000840:	08013efc 	.word	0x08013efc
 8000844:	240008e0 	.word	0x240008e0
 8000848:	08013f18 	.word	0x08013f18
 800084c:	240008e4 	.word	0x240008e4

08000850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b09c      	sub	sp, #112	; 0x70
 8000854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000856:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800085a:	224c      	movs	r2, #76	; 0x4c
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f012 fb10 	bl	8012e84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	2220      	movs	r2, #32
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f012 fb0a 	bl	8012e84 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000870:	2002      	movs	r0, #2
 8000872:	f005 fcaf 	bl	80061d4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000876:	2300      	movs	r3, #0
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	4b2c      	ldr	r3, [pc, #176]	; (800092c <SystemClock_Config+0xdc>)
 800087c:	699b      	ldr	r3, [r3, #24]
 800087e:	4a2b      	ldr	r2, [pc, #172]	; (800092c <SystemClock_Config+0xdc>)
 8000880:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000884:	6193      	str	r3, [r2, #24]
 8000886:	4b29      	ldr	r3, [pc, #164]	; (800092c <SystemClock_Config+0xdc>)
 8000888:	699b      	ldr	r3, [r3, #24]
 800088a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000892:	bf00      	nop
 8000894:	4b25      	ldr	r3, [pc, #148]	; (800092c <SystemClock_Config+0xdc>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800089c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008a0:	d1f8      	bne.n	8000894 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80008a2:	2321      	movs	r3, #33	; 0x21
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80008ac:	2301      	movs	r3, #1
 80008ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b0:	2302      	movs	r3, #2
 80008b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008b4:	2302      	movs	r3, #2
 80008b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008b8:	2304      	movs	r3, #4
 80008ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 80008bc:	f240 1313 	movw	r3, #275	; 0x113
 80008c0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80008c2:	2301      	movs	r3, #1
 80008c4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008c6:	2304      	movs	r3, #4
 80008c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008ca:	2302      	movs	r3, #2
 80008cc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80008ce:	2304      	movs	r3, #4
 80008d0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008de:	4618      	mov	r0, r3
 80008e0:	f005 fcc2 	bl	8006268 <HAL_RCC_OscConfig>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008ea:	f000 fc29 	bl	8001140 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ee:	233f      	movs	r3, #63	; 0x3f
 80008f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f2:	2303      	movs	r3, #3
 80008f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008fa:	2308      	movs	r3, #8
 80008fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008fe:	2340      	movs	r3, #64	; 0x40
 8000900:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000902:	2340      	movs	r3, #64	; 0x40
 8000904:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000906:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800090a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800090c:	2340      	movs	r3, #64	; 0x40
 800090e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	2103      	movs	r1, #3
 8000914:	4618      	mov	r0, r3
 8000916:	f006 f855 	bl	80069c4 <HAL_RCC_ClockConfig>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000920:	f000 fc0e 	bl	8001140 <Error_Handler>
  }
}
 8000924:	bf00      	nop
 8000926:	3770      	adds	r7, #112	; 0x70
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	58024800 	.word	0x58024800

08000930 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000934:	4b22      	ldr	r3, [pc, #136]	; (80009c0 <MX_USART3_UART_Init+0x90>)
 8000936:	4a23      	ldr	r2, [pc, #140]	; (80009c4 <MX_USART3_UART_Init+0x94>)
 8000938:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800093a:	4b21      	ldr	r3, [pc, #132]	; (80009c0 <MX_USART3_UART_Init+0x90>)
 800093c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000940:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000942:	4b1f      	ldr	r3, [pc, #124]	; (80009c0 <MX_USART3_UART_Init+0x90>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000948:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <MX_USART3_UART_Init+0x90>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800094e:	4b1c      	ldr	r3, [pc, #112]	; (80009c0 <MX_USART3_UART_Init+0x90>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000954:	4b1a      	ldr	r3, [pc, #104]	; (80009c0 <MX_USART3_UART_Init+0x90>)
 8000956:	220c      	movs	r2, #12
 8000958:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095a:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <MX_USART3_UART_Init+0x90>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000960:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <MX_USART3_UART_Init+0x90>)
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000966:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <MX_USART3_UART_Init+0x90>)
 8000968:	2200      	movs	r2, #0
 800096a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800096c:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <MX_USART3_UART_Init+0x90>)
 800096e:	2200      	movs	r2, #0
 8000970:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000972:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <MX_USART3_UART_Init+0x90>)
 8000974:	2200      	movs	r2, #0
 8000976:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000978:	4811      	ldr	r0, [pc, #68]	; (80009c0 <MX_USART3_UART_Init+0x90>)
 800097a:	f008 fa01 	bl	8008d80 <HAL_UART_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000984:	f000 fbdc 	bl	8001140 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000988:	2100      	movs	r1, #0
 800098a:	480d      	ldr	r0, [pc, #52]	; (80009c0 <MX_USART3_UART_Init+0x90>)
 800098c:	f00a f9f0 	bl	800ad70 <HAL_UARTEx_SetTxFifoThreshold>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000996:	f000 fbd3 	bl	8001140 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800099a:	2100      	movs	r1, #0
 800099c:	4808      	ldr	r0, [pc, #32]	; (80009c0 <MX_USART3_UART_Init+0x90>)
 800099e:	f00a fa25 	bl	800adec <HAL_UARTEx_SetRxFifoThreshold>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009a8:	f000 fbca 	bl	8001140 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009ac:	4804      	ldr	r0, [pc, #16]	; (80009c0 <MX_USART3_UART_Init+0x90>)
 80009ae:	f00a f9a6 	bl	800acfe <HAL_UARTEx_DisableFifoMode>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009b8:	f000 fbc2 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	2400075c 	.word	0x2400075c
 80009c4:	40004800 	.word	0x40004800

080009c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009ce:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <MX_DMA_Init+0x4c>)
 80009d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80009d4:	4a0f      	ldr	r2, [pc, #60]	; (8000a14 <MX_DMA_Init+0x4c>)
 80009d6:	f043 0301 	orr.w	r3, r3, #1
 80009da:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80009de:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <MX_DMA_Init+0x4c>)
 80009e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80009e4:	f003 0301 	and.w	r3, r3, #1
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80009ec:	2200      	movs	r2, #0
 80009ee:	2105      	movs	r1, #5
 80009f0:	200b      	movs	r0, #11
 80009f2:	f000 ffa7 	bl	8001944 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80009f6:	200b      	movs	r0, #11
 80009f8:	f000 ffbe 	bl	8001978 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2105      	movs	r1, #5
 8000a00:	200c      	movs	r0, #12
 8000a02:	f000 ff9f 	bl	8001944 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000a06:	200c      	movs	r0, #12
 8000a08:	f000 ffb6 	bl	8001978 <HAL_NVIC_EnableIRQ>

}
 8000a0c:	bf00      	nop
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	58024400 	.word	0x58024400

08000a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08c      	sub	sp, #48	; 0x30
 8000a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
 8000a2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2e:	4b83      	ldr	r3, [pc, #524]	; (8000c3c <MX_GPIO_Init+0x224>)
 8000a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a34:	4a81      	ldr	r2, [pc, #516]	; (8000c3c <MX_GPIO_Init+0x224>)
 8000a36:	f043 0304 	orr.w	r3, r3, #4
 8000a3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a3e:	4b7f      	ldr	r3, [pc, #508]	; (8000c3c <MX_GPIO_Init+0x224>)
 8000a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a44:	f003 0304 	and.w	r3, r3, #4
 8000a48:	61bb      	str	r3, [r7, #24]
 8000a4a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a4c:	4b7b      	ldr	r3, [pc, #492]	; (8000c3c <MX_GPIO_Init+0x224>)
 8000a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a52:	4a7a      	ldr	r2, [pc, #488]	; (8000c3c <MX_GPIO_Init+0x224>)
 8000a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a5c:	4b77      	ldr	r3, [pc, #476]	; (8000c3c <MX_GPIO_Init+0x224>)
 8000a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a66:	617b      	str	r3, [r7, #20]
 8000a68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	4b74      	ldr	r3, [pc, #464]	; (8000c3c <MX_GPIO_Init+0x224>)
 8000a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a70:	4a72      	ldr	r2, [pc, #456]	; (8000c3c <MX_GPIO_Init+0x224>)
 8000a72:	f043 0301 	orr.w	r3, r3, #1
 8000a76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a7a:	4b70      	ldr	r3, [pc, #448]	; (8000c3c <MX_GPIO_Init+0x224>)
 8000a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a80:	f003 0301 	and.w	r3, r3, #1
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a88:	4b6c      	ldr	r3, [pc, #432]	; (8000c3c <MX_GPIO_Init+0x224>)
 8000a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8e:	4a6b      	ldr	r2, [pc, #428]	; (8000c3c <MX_GPIO_Init+0x224>)
 8000a90:	f043 0302 	orr.w	r3, r3, #2
 8000a94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a98:	4b68      	ldr	r3, [pc, #416]	; (8000c3c <MX_GPIO_Init+0x224>)
 8000a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9e:	f003 0302 	and.w	r3, r3, #2
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aa6:	4b65      	ldr	r3, [pc, #404]	; (8000c3c <MX_GPIO_Init+0x224>)
 8000aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aac:	4a63      	ldr	r2, [pc, #396]	; (8000c3c <MX_GPIO_Init+0x224>)
 8000aae:	f043 0308 	orr.w	r3, r3, #8
 8000ab2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ab6:	4b61      	ldr	r3, [pc, #388]	; (8000c3c <MX_GPIO_Init+0x224>)
 8000ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000abc:	f003 0308 	and.w	r3, r3, #8
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ac4:	4b5d      	ldr	r3, [pc, #372]	; (8000c3c <MX_GPIO_Init+0x224>)
 8000ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aca:	4a5c      	ldr	r2, [pc, #368]	; (8000c3c <MX_GPIO_Init+0x224>)
 8000acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ad0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ad4:	4b59      	ldr	r3, [pc, #356]	; (8000c3c <MX_GPIO_Init+0x224>)
 8000ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ae2:	4b56      	ldr	r3, [pc, #344]	; (8000c3c <MX_GPIO_Init+0x224>)
 8000ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae8:	4a54      	ldr	r2, [pc, #336]	; (8000c3c <MX_GPIO_Init+0x224>)
 8000aea:	f043 0310 	orr.w	r3, r3, #16
 8000aee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af2:	4b52      	ldr	r3, [pc, #328]	; (8000c3c <MX_GPIO_Init+0x224>)
 8000af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af8:	f003 0310 	and.w	r3, r3, #16
 8000afc:	603b      	str	r3, [r7, #0]
 8000afe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000b00:	2200      	movs	r2, #0
 8000b02:	f244 0101 	movw	r1, #16385	; 0x4001
 8000b06:	484e      	ldr	r0, [pc, #312]	; (8000c40 <MX_GPIO_Init+0x228>)
 8000b08:	f003 ff26 	bl	8004958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b12:	484c      	ldr	r0, [pc, #304]	; (8000c44 <MX_GPIO_Init+0x22c>)
 8000b14:	f003 ff20 	bl	8004958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, USB_VBUS_Pin|LED_YELLOW_Pin, GPIO_PIN_SET);
 8000b18:	2201      	movs	r2, #1
 8000b1a:	2103      	movs	r1, #3
 8000b1c:	484a      	ldr	r0, [pc, #296]	; (8000c48 <MX_GPIO_Init+0x230>)
 8000b1e:	f003 ff1b 	bl	8004958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b30:	f107 031c 	add.w	r3, r7, #28
 8000b34:	4619      	mov	r1, r3
 8000b36:	4845      	ldr	r0, [pc, #276]	; (8000c4c <MX_GPIO_Init+0x234>)
 8000b38:	f003 fd66 	bl	8004608 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b3c:	2332      	movs	r3, #50	; 0x32
 8000b3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b40:	2302      	movs	r3, #2
 8000b42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b4c:	230b      	movs	r3, #11
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b50:	f107 031c 	add.w	r3, r7, #28
 8000b54:	4619      	mov	r1, r3
 8000b56:	483d      	ldr	r0, [pc, #244]	; (8000c4c <MX_GPIO_Init+0x234>)
 8000b58:	f003 fd56 	bl	8004608 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b5c:	2386      	movs	r3, #134	; 0x86
 8000b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b6c:	230b      	movs	r3, #11
 8000b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b70:	f107 031c 	add.w	r3, r7, #28
 8000b74:	4619      	mov	r1, r3
 8000b76:	4836      	ldr	r0, [pc, #216]	; (8000c50 <MX_GPIO_Init+0x238>)
 8000b78:	f003 fd46 	bl	8004608 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000b7c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8e:	f107 031c 	add.w	r3, r7, #28
 8000b92:	4619      	mov	r1, r3
 8000b94:	482a      	ldr	r0, [pc, #168]	; (8000c40 <MX_GPIO_Init+0x228>)
 8000b96:	f003 fd37 	bl	8004608 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bac:	230b      	movs	r3, #11
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000bb0:	f107 031c 	add.w	r3, r7, #28
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4822      	ldr	r0, [pc, #136]	; (8000c40 <MX_GPIO_Init+0x228>)
 8000bb8:	f003 fd26 	bl	8004608 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000bbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000bce:	f107 031c 	add.w	r3, r7, #28
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	481b      	ldr	r0, [pc, #108]	; (8000c44 <MX_GPIO_Init+0x22c>)
 8000bd6:	f003 fd17 	bl	8004608 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000bda:	2380      	movs	r3, #128	; 0x80
 8000bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bde:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000be2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 031c 	add.w	r3, r7, #28
 8000bec:	4619      	mov	r1, r3
 8000bee:	4819      	ldr	r0, [pc, #100]	; (8000c54 <MX_GPIO_Init+0x23c>)
 8000bf0:	f003 fd0a 	bl	8004608 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000bf4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000bf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c06:	230b      	movs	r3, #11
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c0a:	f107 031c 	add.w	r3, r7, #28
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4810      	ldr	r0, [pc, #64]	; (8000c54 <MX_GPIO_Init+0x23c>)
 8000c12:	f003 fcf9 	bl	8004608 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_VBUS_Pin LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin|LED_YELLOW_Pin;
 8000c16:	2303      	movs	r3, #3
 8000c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c26:	f107 031c 	add.w	r3, r7, #28
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4806      	ldr	r0, [pc, #24]	; (8000c48 <MX_GPIO_Init+0x230>)
 8000c2e:	f003 fceb 	bl	8004608 <HAL_GPIO_Init>

}
 8000c32:	bf00      	nop
 8000c34:	3730      	adds	r7, #48	; 0x30
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	58024400 	.word	0x58024400
 8000c40:	58020400 	.word	0x58020400
 8000c44:	58020c00 	.word	0x58020c00
 8000c48:	58021000 	.word	0x58021000
 8000c4c:	58020800 	.word	0x58020800
 8000c50:	58020000 	.word	0x58020000
 8000c54:	58021800 	.word	0x58021800

08000c58 <HAL_UART_TxCpltCallback>:
static size_t current_RX_buffer_position = 0;

char received_command[UART_RX_BUFFER_LENGTH];

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB,LED_GREEN_Pin);
 8000c60:	2101      	movs	r1, #1
 8000c62:	4803      	ldr	r0, [pc, #12]	; (8000c70 <HAL_UART_TxCpltCallback+0x18>)
 8000c64:	f003 fe91 	bl	800498a <HAL_GPIO_TogglePin>
}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	58020400 	.word	0x58020400

08000c74 <HAL_UARTEx_RxEventCallback>:




//ToDo: Fix This function to implement circular buffer.
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_TogglePin(GPIOB,LED_GREEN_Pin);
 8000c80:	2101      	movs	r1, #1
 8000c82:	4884      	ldr	r0, [pc, #528]	; (8000e94 <HAL_UARTEx_RxEventCallback+0x220>)
 8000c84:	f003 fe81 	bl	800498a <HAL_GPIO_TogglePin>


	current_RX_buffer_position = (Size)%UART_RX_BUFFER_LENGTH;
 8000c88:	887b      	ldrh	r3, [r7, #2]
 8000c8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000c8e:	4a82      	ldr	r2, [pc, #520]	; (8000e98 <HAL_UARTEx_RxEventCallback+0x224>)
 8000c90:	6013      	str	r3, [r2, #0]


	if(current_RX_buffer_position > old_RX_buffer_position){
 8000c92:	4b81      	ldr	r3, [pc, #516]	; (8000e98 <HAL_UARTEx_RxEventCallback+0x224>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	4b81      	ldr	r3, [pc, #516]	; (8000e9c <HAL_UARTEx_RxEventCallback+0x228>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	d90e      	bls.n	8000cbc <HAL_UARTEx_RxEventCallback+0x48>
	  memcpy(received_command, UART_RX_BUFFER+old_RX_buffer_position, current_RX_buffer_position - old_RX_buffer_position -1);
 8000c9e:	4b7f      	ldr	r3, [pc, #508]	; (8000e9c <HAL_UARTEx_RxEventCallback+0x228>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a7f      	ldr	r2, [pc, #508]	; (8000ea0 <HAL_UARTEx_RxEventCallback+0x22c>)
 8000ca4:	1899      	adds	r1, r3, r2
 8000ca6:	4b7c      	ldr	r3, [pc, #496]	; (8000e98 <HAL_UARTEx_RxEventCallback+0x224>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	4b7c      	ldr	r3, [pc, #496]	; (8000e9c <HAL_UARTEx_RxEventCallback+0x228>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	1ad3      	subs	r3, r2, r3
 8000cb0:	3b01      	subs	r3, #1
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	487b      	ldr	r0, [pc, #492]	; (8000ea4 <HAL_UARTEx_RxEventCallback+0x230>)
 8000cb6:	f012 f8d7 	bl	8012e68 <memcpy>
 8000cba:	e017      	b.n	8000cec <HAL_UARTEx_RxEventCallback+0x78>
	}else{
	  memcpy(received_command, UART_RX_BUFFER+old_RX_buffer_position, UART_RX_BUFFER_LENGTH-old_RX_buffer_position);
 8000cbc:	4b77      	ldr	r3, [pc, #476]	; (8000e9c <HAL_UARTEx_RxEventCallback+0x228>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a77      	ldr	r2, [pc, #476]	; (8000ea0 <HAL_UARTEx_RxEventCallback+0x22c>)
 8000cc2:	1899      	adds	r1, r3, r2
 8000cc4:	4b75      	ldr	r3, [pc, #468]	; (8000e9c <HAL_UARTEx_RxEventCallback+0x228>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4875      	ldr	r0, [pc, #468]	; (8000ea4 <HAL_UARTEx_RxEventCallback+0x230>)
 8000cd0:	f012 f8ca 	bl	8012e68 <memcpy>

	  memcpy(received_command+UART_RX_BUFFER_LENGTH-old_RX_buffer_position, UART_RX_BUFFER, Size-1);
 8000cd4:	4b71      	ldr	r3, [pc, #452]	; (8000e9c <HAL_UARTEx_RxEventCallback+0x228>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000cdc:	4a71      	ldr	r2, [pc, #452]	; (8000ea4 <HAL_UARTEx_RxEventCallback+0x230>)
 8000cde:	1898      	adds	r0, r3, r2
 8000ce0:	887b      	ldrh	r3, [r7, #2]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	496e      	ldr	r1, [pc, #440]	; (8000ea0 <HAL_UARTEx_RxEventCallback+0x22c>)
 8000ce8:	f012 f8be 	bl	8012e68 <memcpy>
               * [   6   ]            | First block (len = N - old_pos) |
               * [   7   ]            |                                 |
               * [ N - 1 ]            |---------------------------------|
               */

	printf("received cmd: %s \r\n", received_command);
 8000cec:	496d      	ldr	r1, [pc, #436]	; (8000ea4 <HAL_UARTEx_RxEventCallback+0x230>)
 8000cee:	486e      	ldr	r0, [pc, #440]	; (8000ea8 <HAL_UARTEx_RxEventCallback+0x234>)
 8000cf0:	f012 f9b0 	bl	8013054 <iprintf>

	old_RX_buffer_position = current_RX_buffer_position;
 8000cf4:	4b68      	ldr	r3, [pc, #416]	; (8000e98 <HAL_UARTEx_RxEventCallback+0x224>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a68      	ldr	r2, [pc, #416]	; (8000e9c <HAL_UARTEx_RxEventCallback+0x228>)
 8000cfa:	6013      	str	r3, [r2, #0]



	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, UART_RX_BUFFER, UART_RX_BUFFER_LENGTH);
 8000cfc:	2240      	movs	r2, #64	; 0x40
 8000cfe:	4968      	ldr	r1, [pc, #416]	; (8000ea0 <HAL_UARTEx_RxEventCallback+0x22c>)
 8000d00:	486a      	ldr	r0, [pc, #424]	; (8000eac <HAL_UARTEx_RxEventCallback+0x238>)
 8000d02:	f00a f8b1 	bl	800ae68 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8000d06:	4b6a      	ldr	r3, [pc, #424]	; (8000eb0 <HAL_UARTEx_RxEventCallback+0x23c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a6a      	ldr	r2, [pc, #424]	; (8000eb4 <HAL_UARTEx_RxEventCallback+0x240>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d04a      	beq.n	8000da6 <HAL_UARTEx_RxEventCallback+0x132>
 8000d10:	4b67      	ldr	r3, [pc, #412]	; (8000eb0 <HAL_UARTEx_RxEventCallback+0x23c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a68      	ldr	r2, [pc, #416]	; (8000eb8 <HAL_UARTEx_RxEventCallback+0x244>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d045      	beq.n	8000da6 <HAL_UARTEx_RxEventCallback+0x132>
 8000d1a:	4b65      	ldr	r3, [pc, #404]	; (8000eb0 <HAL_UARTEx_RxEventCallback+0x23c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a67      	ldr	r2, [pc, #412]	; (8000ebc <HAL_UARTEx_RxEventCallback+0x248>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d040      	beq.n	8000da6 <HAL_UARTEx_RxEventCallback+0x132>
 8000d24:	4b62      	ldr	r3, [pc, #392]	; (8000eb0 <HAL_UARTEx_RxEventCallback+0x23c>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a65      	ldr	r2, [pc, #404]	; (8000ec0 <HAL_UARTEx_RxEventCallback+0x24c>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d03b      	beq.n	8000da6 <HAL_UARTEx_RxEventCallback+0x132>
 8000d2e:	4b60      	ldr	r3, [pc, #384]	; (8000eb0 <HAL_UARTEx_RxEventCallback+0x23c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a64      	ldr	r2, [pc, #400]	; (8000ec4 <HAL_UARTEx_RxEventCallback+0x250>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d036      	beq.n	8000da6 <HAL_UARTEx_RxEventCallback+0x132>
 8000d38:	4b5d      	ldr	r3, [pc, #372]	; (8000eb0 <HAL_UARTEx_RxEventCallback+0x23c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a62      	ldr	r2, [pc, #392]	; (8000ec8 <HAL_UARTEx_RxEventCallback+0x254>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d031      	beq.n	8000da6 <HAL_UARTEx_RxEventCallback+0x132>
 8000d42:	4b5b      	ldr	r3, [pc, #364]	; (8000eb0 <HAL_UARTEx_RxEventCallback+0x23c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a61      	ldr	r2, [pc, #388]	; (8000ecc <HAL_UARTEx_RxEventCallback+0x258>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d02c      	beq.n	8000da6 <HAL_UARTEx_RxEventCallback+0x132>
 8000d4c:	4b58      	ldr	r3, [pc, #352]	; (8000eb0 <HAL_UARTEx_RxEventCallback+0x23c>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a5f      	ldr	r2, [pc, #380]	; (8000ed0 <HAL_UARTEx_RxEventCallback+0x25c>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d027      	beq.n	8000da6 <HAL_UARTEx_RxEventCallback+0x132>
 8000d56:	4b56      	ldr	r3, [pc, #344]	; (8000eb0 <HAL_UARTEx_RxEventCallback+0x23c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a5e      	ldr	r2, [pc, #376]	; (8000ed4 <HAL_UARTEx_RxEventCallback+0x260>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d022      	beq.n	8000da6 <HAL_UARTEx_RxEventCallback+0x132>
 8000d60:	4b53      	ldr	r3, [pc, #332]	; (8000eb0 <HAL_UARTEx_RxEventCallback+0x23c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a5c      	ldr	r2, [pc, #368]	; (8000ed8 <HAL_UARTEx_RxEventCallback+0x264>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d01d      	beq.n	8000da6 <HAL_UARTEx_RxEventCallback+0x132>
 8000d6a:	4b51      	ldr	r3, [pc, #324]	; (8000eb0 <HAL_UARTEx_RxEventCallback+0x23c>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a5b      	ldr	r2, [pc, #364]	; (8000edc <HAL_UARTEx_RxEventCallback+0x268>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d018      	beq.n	8000da6 <HAL_UARTEx_RxEventCallback+0x132>
 8000d74:	4b4e      	ldr	r3, [pc, #312]	; (8000eb0 <HAL_UARTEx_RxEventCallback+0x23c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a59      	ldr	r2, [pc, #356]	; (8000ee0 <HAL_UARTEx_RxEventCallback+0x26c>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d013      	beq.n	8000da6 <HAL_UARTEx_RxEventCallback+0x132>
 8000d7e:	4b4c      	ldr	r3, [pc, #304]	; (8000eb0 <HAL_UARTEx_RxEventCallback+0x23c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a58      	ldr	r2, [pc, #352]	; (8000ee4 <HAL_UARTEx_RxEventCallback+0x270>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d00e      	beq.n	8000da6 <HAL_UARTEx_RxEventCallback+0x132>
 8000d88:	4b49      	ldr	r3, [pc, #292]	; (8000eb0 <HAL_UARTEx_RxEventCallback+0x23c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a56      	ldr	r2, [pc, #344]	; (8000ee8 <HAL_UARTEx_RxEventCallback+0x274>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d009      	beq.n	8000da6 <HAL_UARTEx_RxEventCallback+0x132>
 8000d92:	4b47      	ldr	r3, [pc, #284]	; (8000eb0 <HAL_UARTEx_RxEventCallback+0x23c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a55      	ldr	r2, [pc, #340]	; (8000eec <HAL_UARTEx_RxEventCallback+0x278>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d004      	beq.n	8000da6 <HAL_UARTEx_RxEventCallback+0x132>
 8000d9c:	4b44      	ldr	r3, [pc, #272]	; (8000eb0 <HAL_UARTEx_RxEventCallback+0x23c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a53      	ldr	r2, [pc, #332]	; (8000ef0 <HAL_UARTEx_RxEventCallback+0x27c>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d108      	bne.n	8000db8 <HAL_UARTEx_RxEventCallback+0x144>
 8000da6:	4b42      	ldr	r3, [pc, #264]	; (8000eb0 <HAL_UARTEx_RxEventCallback+0x23c>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4b40      	ldr	r3, [pc, #256]	; (8000eb0 <HAL_UARTEx_RxEventCallback+0x23c>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f022 0208 	bic.w	r2, r2, #8
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	e007      	b.n	8000dc8 <HAL_UARTEx_RxEventCallback+0x154>
 8000db8:	4b3d      	ldr	r3, [pc, #244]	; (8000eb0 <HAL_UARTEx_RxEventCallback+0x23c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	4b3c      	ldr	r3, [pc, #240]	; (8000eb0 <HAL_UARTEx_RxEventCallback+0x23c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f022 0204 	bic.w	r2, r2, #4
 8000dc6:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_TC);
 8000dc8:	4b39      	ldr	r3, [pc, #228]	; (8000eb0 <HAL_UARTEx_RxEventCallback+0x23c>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a39      	ldr	r2, [pc, #228]	; (8000eb4 <HAL_UARTEx_RxEventCallback+0x240>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d04a      	beq.n	8000e68 <HAL_UARTEx_RxEventCallback+0x1f4>
 8000dd2:	4b37      	ldr	r3, [pc, #220]	; (8000eb0 <HAL_UARTEx_RxEventCallback+0x23c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a38      	ldr	r2, [pc, #224]	; (8000eb8 <HAL_UARTEx_RxEventCallback+0x244>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d045      	beq.n	8000e68 <HAL_UARTEx_RxEventCallback+0x1f4>
 8000ddc:	4b34      	ldr	r3, [pc, #208]	; (8000eb0 <HAL_UARTEx_RxEventCallback+0x23c>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a36      	ldr	r2, [pc, #216]	; (8000ebc <HAL_UARTEx_RxEventCallback+0x248>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d040      	beq.n	8000e68 <HAL_UARTEx_RxEventCallback+0x1f4>
 8000de6:	4b32      	ldr	r3, [pc, #200]	; (8000eb0 <HAL_UARTEx_RxEventCallback+0x23c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a35      	ldr	r2, [pc, #212]	; (8000ec0 <HAL_UARTEx_RxEventCallback+0x24c>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d03b      	beq.n	8000e68 <HAL_UARTEx_RxEventCallback+0x1f4>
 8000df0:	4b2f      	ldr	r3, [pc, #188]	; (8000eb0 <HAL_UARTEx_RxEventCallback+0x23c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a33      	ldr	r2, [pc, #204]	; (8000ec4 <HAL_UARTEx_RxEventCallback+0x250>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d036      	beq.n	8000e68 <HAL_UARTEx_RxEventCallback+0x1f4>
 8000dfa:	4b2d      	ldr	r3, [pc, #180]	; (8000eb0 <HAL_UARTEx_RxEventCallback+0x23c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a32      	ldr	r2, [pc, #200]	; (8000ec8 <HAL_UARTEx_RxEventCallback+0x254>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d031      	beq.n	8000e68 <HAL_UARTEx_RxEventCallback+0x1f4>
 8000e04:	4b2a      	ldr	r3, [pc, #168]	; (8000eb0 <HAL_UARTEx_RxEventCallback+0x23c>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a30      	ldr	r2, [pc, #192]	; (8000ecc <HAL_UARTEx_RxEventCallback+0x258>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d02c      	beq.n	8000e68 <HAL_UARTEx_RxEventCallback+0x1f4>
 8000e0e:	4b28      	ldr	r3, [pc, #160]	; (8000eb0 <HAL_UARTEx_RxEventCallback+0x23c>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a2f      	ldr	r2, [pc, #188]	; (8000ed0 <HAL_UARTEx_RxEventCallback+0x25c>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d027      	beq.n	8000e68 <HAL_UARTEx_RxEventCallback+0x1f4>
 8000e18:	4b25      	ldr	r3, [pc, #148]	; (8000eb0 <HAL_UARTEx_RxEventCallback+0x23c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a2d      	ldr	r2, [pc, #180]	; (8000ed4 <HAL_UARTEx_RxEventCallback+0x260>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d022      	beq.n	8000e68 <HAL_UARTEx_RxEventCallback+0x1f4>
 8000e22:	4b23      	ldr	r3, [pc, #140]	; (8000eb0 <HAL_UARTEx_RxEventCallback+0x23c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a2c      	ldr	r2, [pc, #176]	; (8000ed8 <HAL_UARTEx_RxEventCallback+0x264>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d01d      	beq.n	8000e68 <HAL_UARTEx_RxEventCallback+0x1f4>
 8000e2c:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <HAL_UARTEx_RxEventCallback+0x23c>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a2a      	ldr	r2, [pc, #168]	; (8000edc <HAL_UARTEx_RxEventCallback+0x268>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d018      	beq.n	8000e68 <HAL_UARTEx_RxEventCallback+0x1f4>
 8000e36:	4b1e      	ldr	r3, [pc, #120]	; (8000eb0 <HAL_UARTEx_RxEventCallback+0x23c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a29      	ldr	r2, [pc, #164]	; (8000ee0 <HAL_UARTEx_RxEventCallback+0x26c>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d013      	beq.n	8000e68 <HAL_UARTEx_RxEventCallback+0x1f4>
 8000e40:	4b1b      	ldr	r3, [pc, #108]	; (8000eb0 <HAL_UARTEx_RxEventCallback+0x23c>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a27      	ldr	r2, [pc, #156]	; (8000ee4 <HAL_UARTEx_RxEventCallback+0x270>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d00e      	beq.n	8000e68 <HAL_UARTEx_RxEventCallback+0x1f4>
 8000e4a:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <HAL_UARTEx_RxEventCallback+0x23c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a26      	ldr	r2, [pc, #152]	; (8000ee8 <HAL_UARTEx_RxEventCallback+0x274>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d009      	beq.n	8000e68 <HAL_UARTEx_RxEventCallback+0x1f4>
 8000e54:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <HAL_UARTEx_RxEventCallback+0x23c>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a24      	ldr	r2, [pc, #144]	; (8000eec <HAL_UARTEx_RxEventCallback+0x278>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d004      	beq.n	8000e68 <HAL_UARTEx_RxEventCallback+0x1f4>
 8000e5e:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <HAL_UARTEx_RxEventCallback+0x23c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a23      	ldr	r2, [pc, #140]	; (8000ef0 <HAL_UARTEx_RxEventCallback+0x27c>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d108      	bne.n	8000e7a <HAL_UARTEx_RxEventCallback+0x206>
 8000e68:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <HAL_UARTEx_RxEventCallback+0x23c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	4b10      	ldr	r3, [pc, #64]	; (8000eb0 <HAL_UARTEx_RxEventCallback+0x23c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f022 0210 	bic.w	r2, r2, #16
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	e008      	b.n	8000e8c <HAL_UARTEx_RxEventCallback+0x218>
 8000e7a:	4b0d      	ldr	r3, [pc, #52]	; (8000eb0 <HAL_UARTEx_RxEventCallback+0x23c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <HAL_UARTEx_RxEventCallback+0x23c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f022 0202 	bic.w	r2, r2, #2
 8000e88:	601a      	str	r2, [r3, #0]



}
 8000e8a:	bf00      	nop
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	58020400 	.word	0x58020400
 8000e98:	24000974 	.word	0x24000974
 8000e9c:	24000970 	.word	0x24000970
 8000ea0:	24000930 	.word	0x24000930
 8000ea4:	24000978 	.word	0x24000978
 8000ea8:	08013f34 	.word	0x08013f34
 8000eac:	2400075c 	.word	0x2400075c
 8000eb0:	24000864 	.word	0x24000864
 8000eb4:	40020010 	.word	0x40020010
 8000eb8:	40020028 	.word	0x40020028
 8000ebc:	40020040 	.word	0x40020040
 8000ec0:	40020058 	.word	0x40020058
 8000ec4:	40020070 	.word	0x40020070
 8000ec8:	40020088 	.word	0x40020088
 8000ecc:	400200a0 	.word	0x400200a0
 8000ed0:	400200b8 	.word	0x400200b8
 8000ed4:	40020410 	.word	0x40020410
 8000ed8:	40020428 	.word	0x40020428
 8000edc:	40020440 	.word	0x40020440
 8000ee0:	40020458 	.word	0x40020458
 8000ee4:	40020470 	.word	0x40020470
 8000ee8:	40020488 	.word	0x40020488
 8000eec:	400204a0 	.word	0x400204a0
 8000ef0:	400204b8 	.word	0x400204b8

08000ef4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000efc:	f011 fc16 	bl	801272c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, UART_RX_BUFFER, UART_RX_BUFFER_LENGTH);
 8000f00:	2240      	movs	r2, #64	; 0x40
 8000f02:	4966      	ldr	r1, [pc, #408]	; (800109c <StartDefaultTask+0x1a8>)
 8000f04:	4866      	ldr	r0, [pc, #408]	; (80010a0 <StartDefaultTask+0x1ac>)
 8000f06:	f009 ffaf 	bl	800ae68 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8000f0a:	4b66      	ldr	r3, [pc, #408]	; (80010a4 <StartDefaultTask+0x1b0>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a66      	ldr	r2, [pc, #408]	; (80010a8 <StartDefaultTask+0x1b4>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d04a      	beq.n	8000faa <StartDefaultTask+0xb6>
 8000f14:	4b63      	ldr	r3, [pc, #396]	; (80010a4 <StartDefaultTask+0x1b0>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a64      	ldr	r2, [pc, #400]	; (80010ac <StartDefaultTask+0x1b8>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d045      	beq.n	8000faa <StartDefaultTask+0xb6>
 8000f1e:	4b61      	ldr	r3, [pc, #388]	; (80010a4 <StartDefaultTask+0x1b0>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a63      	ldr	r2, [pc, #396]	; (80010b0 <StartDefaultTask+0x1bc>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d040      	beq.n	8000faa <StartDefaultTask+0xb6>
 8000f28:	4b5e      	ldr	r3, [pc, #376]	; (80010a4 <StartDefaultTask+0x1b0>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a61      	ldr	r2, [pc, #388]	; (80010b4 <StartDefaultTask+0x1c0>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d03b      	beq.n	8000faa <StartDefaultTask+0xb6>
 8000f32:	4b5c      	ldr	r3, [pc, #368]	; (80010a4 <StartDefaultTask+0x1b0>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a60      	ldr	r2, [pc, #384]	; (80010b8 <StartDefaultTask+0x1c4>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d036      	beq.n	8000faa <StartDefaultTask+0xb6>
 8000f3c:	4b59      	ldr	r3, [pc, #356]	; (80010a4 <StartDefaultTask+0x1b0>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a5e      	ldr	r2, [pc, #376]	; (80010bc <StartDefaultTask+0x1c8>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d031      	beq.n	8000faa <StartDefaultTask+0xb6>
 8000f46:	4b57      	ldr	r3, [pc, #348]	; (80010a4 <StartDefaultTask+0x1b0>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a5d      	ldr	r2, [pc, #372]	; (80010c0 <StartDefaultTask+0x1cc>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d02c      	beq.n	8000faa <StartDefaultTask+0xb6>
 8000f50:	4b54      	ldr	r3, [pc, #336]	; (80010a4 <StartDefaultTask+0x1b0>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a5b      	ldr	r2, [pc, #364]	; (80010c4 <StartDefaultTask+0x1d0>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d027      	beq.n	8000faa <StartDefaultTask+0xb6>
 8000f5a:	4b52      	ldr	r3, [pc, #328]	; (80010a4 <StartDefaultTask+0x1b0>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a5a      	ldr	r2, [pc, #360]	; (80010c8 <StartDefaultTask+0x1d4>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d022      	beq.n	8000faa <StartDefaultTask+0xb6>
 8000f64:	4b4f      	ldr	r3, [pc, #316]	; (80010a4 <StartDefaultTask+0x1b0>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a58      	ldr	r2, [pc, #352]	; (80010cc <StartDefaultTask+0x1d8>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d01d      	beq.n	8000faa <StartDefaultTask+0xb6>
 8000f6e:	4b4d      	ldr	r3, [pc, #308]	; (80010a4 <StartDefaultTask+0x1b0>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a57      	ldr	r2, [pc, #348]	; (80010d0 <StartDefaultTask+0x1dc>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d018      	beq.n	8000faa <StartDefaultTask+0xb6>
 8000f78:	4b4a      	ldr	r3, [pc, #296]	; (80010a4 <StartDefaultTask+0x1b0>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a55      	ldr	r2, [pc, #340]	; (80010d4 <StartDefaultTask+0x1e0>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d013      	beq.n	8000faa <StartDefaultTask+0xb6>
 8000f82:	4b48      	ldr	r3, [pc, #288]	; (80010a4 <StartDefaultTask+0x1b0>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a54      	ldr	r2, [pc, #336]	; (80010d8 <StartDefaultTask+0x1e4>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d00e      	beq.n	8000faa <StartDefaultTask+0xb6>
 8000f8c:	4b45      	ldr	r3, [pc, #276]	; (80010a4 <StartDefaultTask+0x1b0>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a52      	ldr	r2, [pc, #328]	; (80010dc <StartDefaultTask+0x1e8>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d009      	beq.n	8000faa <StartDefaultTask+0xb6>
 8000f96:	4b43      	ldr	r3, [pc, #268]	; (80010a4 <StartDefaultTask+0x1b0>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a51      	ldr	r2, [pc, #324]	; (80010e0 <StartDefaultTask+0x1ec>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d004      	beq.n	8000faa <StartDefaultTask+0xb6>
 8000fa0:	4b40      	ldr	r3, [pc, #256]	; (80010a4 <StartDefaultTask+0x1b0>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a4f      	ldr	r2, [pc, #316]	; (80010e4 <StartDefaultTask+0x1f0>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d108      	bne.n	8000fbc <StartDefaultTask+0xc8>
 8000faa:	4b3e      	ldr	r3, [pc, #248]	; (80010a4 <StartDefaultTask+0x1b0>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4b3c      	ldr	r3, [pc, #240]	; (80010a4 <StartDefaultTask+0x1b0>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f022 0208 	bic.w	r2, r2, #8
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	e007      	b.n	8000fcc <StartDefaultTask+0xd8>
 8000fbc:	4b39      	ldr	r3, [pc, #228]	; (80010a4 <StartDefaultTask+0x1b0>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	4b38      	ldr	r3, [pc, #224]	; (80010a4 <StartDefaultTask+0x1b0>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f022 0204 	bic.w	r2, r2, #4
 8000fca:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_TC);
 8000fcc:	4b35      	ldr	r3, [pc, #212]	; (80010a4 <StartDefaultTask+0x1b0>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a35      	ldr	r2, [pc, #212]	; (80010a8 <StartDefaultTask+0x1b4>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d04a      	beq.n	800106c <StartDefaultTask+0x178>
 8000fd6:	4b33      	ldr	r3, [pc, #204]	; (80010a4 <StartDefaultTask+0x1b0>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a34      	ldr	r2, [pc, #208]	; (80010ac <StartDefaultTask+0x1b8>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d045      	beq.n	800106c <StartDefaultTask+0x178>
 8000fe0:	4b30      	ldr	r3, [pc, #192]	; (80010a4 <StartDefaultTask+0x1b0>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a32      	ldr	r2, [pc, #200]	; (80010b0 <StartDefaultTask+0x1bc>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d040      	beq.n	800106c <StartDefaultTask+0x178>
 8000fea:	4b2e      	ldr	r3, [pc, #184]	; (80010a4 <StartDefaultTask+0x1b0>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a31      	ldr	r2, [pc, #196]	; (80010b4 <StartDefaultTask+0x1c0>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d03b      	beq.n	800106c <StartDefaultTask+0x178>
 8000ff4:	4b2b      	ldr	r3, [pc, #172]	; (80010a4 <StartDefaultTask+0x1b0>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a2f      	ldr	r2, [pc, #188]	; (80010b8 <StartDefaultTask+0x1c4>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d036      	beq.n	800106c <StartDefaultTask+0x178>
 8000ffe:	4b29      	ldr	r3, [pc, #164]	; (80010a4 <StartDefaultTask+0x1b0>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a2e      	ldr	r2, [pc, #184]	; (80010bc <StartDefaultTask+0x1c8>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d031      	beq.n	800106c <StartDefaultTask+0x178>
 8001008:	4b26      	ldr	r3, [pc, #152]	; (80010a4 <StartDefaultTask+0x1b0>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a2c      	ldr	r2, [pc, #176]	; (80010c0 <StartDefaultTask+0x1cc>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d02c      	beq.n	800106c <StartDefaultTask+0x178>
 8001012:	4b24      	ldr	r3, [pc, #144]	; (80010a4 <StartDefaultTask+0x1b0>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a2b      	ldr	r2, [pc, #172]	; (80010c4 <StartDefaultTask+0x1d0>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d027      	beq.n	800106c <StartDefaultTask+0x178>
 800101c:	4b21      	ldr	r3, [pc, #132]	; (80010a4 <StartDefaultTask+0x1b0>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a29      	ldr	r2, [pc, #164]	; (80010c8 <StartDefaultTask+0x1d4>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d022      	beq.n	800106c <StartDefaultTask+0x178>
 8001026:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <StartDefaultTask+0x1b0>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a28      	ldr	r2, [pc, #160]	; (80010cc <StartDefaultTask+0x1d8>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d01d      	beq.n	800106c <StartDefaultTask+0x178>
 8001030:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <StartDefaultTask+0x1b0>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a26      	ldr	r2, [pc, #152]	; (80010d0 <StartDefaultTask+0x1dc>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d018      	beq.n	800106c <StartDefaultTask+0x178>
 800103a:	4b1a      	ldr	r3, [pc, #104]	; (80010a4 <StartDefaultTask+0x1b0>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a25      	ldr	r2, [pc, #148]	; (80010d4 <StartDefaultTask+0x1e0>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d013      	beq.n	800106c <StartDefaultTask+0x178>
 8001044:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <StartDefaultTask+0x1b0>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a23      	ldr	r2, [pc, #140]	; (80010d8 <StartDefaultTask+0x1e4>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d00e      	beq.n	800106c <StartDefaultTask+0x178>
 800104e:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <StartDefaultTask+0x1b0>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a22      	ldr	r2, [pc, #136]	; (80010dc <StartDefaultTask+0x1e8>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d009      	beq.n	800106c <StartDefaultTask+0x178>
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <StartDefaultTask+0x1b0>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a20      	ldr	r2, [pc, #128]	; (80010e0 <StartDefaultTask+0x1ec>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d004      	beq.n	800106c <StartDefaultTask+0x178>
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <StartDefaultTask+0x1b0>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a1f      	ldr	r2, [pc, #124]	; (80010e4 <StartDefaultTask+0x1f0>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d108      	bne.n	800107e <StartDefaultTask+0x18a>
 800106c:	4b0d      	ldr	r3, [pc, #52]	; (80010a4 <StartDefaultTask+0x1b0>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <StartDefaultTask+0x1b0>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f022 0210 	bic.w	r2, r2, #16
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	e007      	b.n	800108e <StartDefaultTask+0x19a>
 800107e:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <StartDefaultTask+0x1b0>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <StartDefaultTask+0x1b0>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f022 0202 	bic.w	r2, r2, #2
 800108c:	601a      	str	r2, [r3, #0]

  int count = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
    //printf("A\r\n");

    //printf("Hello World! %d\r\n", count++);
    osDelay(2000);
 8001092:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001096:	f00e fc6d 	bl	800f974 <osDelay>
 800109a:	e7fa      	b.n	8001092 <StartDefaultTask+0x19e>
 800109c:	24000930 	.word	0x24000930
 80010a0:	2400075c 	.word	0x2400075c
 80010a4:	24000864 	.word	0x24000864
 80010a8:	40020010 	.word	0x40020010
 80010ac:	40020028 	.word	0x40020028
 80010b0:	40020040 	.word	0x40020040
 80010b4:	40020058 	.word	0x40020058
 80010b8:	40020070 	.word	0x40020070
 80010bc:	40020088 	.word	0x40020088
 80010c0:	400200a0 	.word	0x400200a0
 80010c4:	400200b8 	.word	0x400200b8
 80010c8:	40020410 	.word	0x40020410
 80010cc:	40020428 	.word	0x40020428
 80010d0:	40020440 	.word	0x40020440
 80010d4:	40020458 	.word	0x40020458
 80010d8:	40020470 	.word	0x40020470
 80010dc:	40020488 	.word	0x40020488
 80010e0:	400204a0 	.word	0x400204a0
 80010e4:	400204b8 	.word	0x400204b8

080010e8 <USBFileSystem_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_USBFileSystem_Init */
void USBFileSystem_Init(void const * argument)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBFileSystem_Init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80010f0:	2001      	movs	r0, #1
 80010f2:	f00e fc3f 	bl	800f974 <osDelay>
 80010f6:	e7fb      	b.n	80010f0 <USBFileSystem_Init+0x8>

080010f8 <CommInterface_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CommInterface_Init */
void CommInterface_Init(void const * argument)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CommInterface_Init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001100:	2001      	movs	r0, #1
 8001102:	f00e fc37 	bl	800f974 <osDelay>
 8001106:	e7fb      	b.n	8001100 <CommInterface_Init+0x8>

08001108 <Timer1_Callback>:
  /* USER CODE END CommInterface_Init */
}

/* Timer1_Callback function */
void Timer1_Callback(void const * argument)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Timer1_Callback */

  /* USER CODE END Timer1_Callback */
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a04      	ldr	r2, [pc, #16]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d101      	bne.n	8001132 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800112e:	f000 fb0d 	bl	800174c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40010000 	.word	0x40010000

08001140 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001144:	b672      	cpsid	i
}
 8001146:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001148:	e7fe      	b.n	8001148 <Error_Handler+0x8>
	...

0800114c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001152:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <HAL_MspInit+0x38>)
 8001154:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001158:	4a0a      	ldr	r2, [pc, #40]	; (8001184 <HAL_MspInit+0x38>)
 800115a:	f043 0302 	orr.w	r3, r3, #2
 800115e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001162:	4b08      	ldr	r3, [pc, #32]	; (8001184 <HAL_MspInit+0x38>)
 8001164:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001168:	f003 0302 	and.w	r3, r3, #2
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001170:	2200      	movs	r2, #0
 8001172:	210f      	movs	r1, #15
 8001174:	f06f 0001 	mvn.w	r0, #1
 8001178:	f000 fbe4 	bl	8001944 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117c:	bf00      	nop
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	58024400 	.word	0x58024400

08001188 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b0b6      	sub	sp, #216	; 0xd8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011a0:	f107 0310 	add.w	r3, r7, #16
 80011a4:	22b4      	movs	r2, #180	; 0xb4
 80011a6:	2100      	movs	r1, #0
 80011a8:	4618      	mov	r0, r3
 80011aa:	f011 fe6b 	bl	8012e84 <memset>
  if(huart->Instance==USART3)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a57      	ldr	r2, [pc, #348]	; (8001310 <HAL_UART_MspInit+0x188>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	f040 80a6 	bne.w	8001306 <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011ba:	2302      	movs	r3, #2
 80011bc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80011be:	2300      	movs	r3, #0
 80011c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011c4:	f107 0310 	add.w	r3, r7, #16
 80011c8:	4618      	mov	r0, r3
 80011ca:	f005 ffc9 	bl	8007160 <HAL_RCCEx_PeriphCLKConfig>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80011d4:	f7ff ffb4 	bl	8001140 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011d8:	4b4e      	ldr	r3, [pc, #312]	; (8001314 <HAL_UART_MspInit+0x18c>)
 80011da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011de:	4a4d      	ldr	r2, [pc, #308]	; (8001314 <HAL_UART_MspInit+0x18c>)
 80011e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011e4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011e8:	4b4a      	ldr	r3, [pc, #296]	; (8001314 <HAL_UART_MspInit+0x18c>)
 80011ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011f6:	4b47      	ldr	r3, [pc, #284]	; (8001314 <HAL_UART_MspInit+0x18c>)
 80011f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011fc:	4a45      	ldr	r2, [pc, #276]	; (8001314 <HAL_UART_MspInit+0x18c>)
 80011fe:	f043 0308 	orr.w	r3, r3, #8
 8001202:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001206:	4b43      	ldr	r3, [pc, #268]	; (8001314 <HAL_UART_MspInit+0x18c>)
 8001208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800120c:	f003 0308 	and.w	r3, r3, #8
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001214:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001218:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121c:	2302      	movs	r3, #2
 800121e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2300      	movs	r3, #0
 800122a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800122e:	2307      	movs	r3, #7
 8001230:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001234:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001238:	4619      	mov	r1, r3
 800123a:	4837      	ldr	r0, [pc, #220]	; (8001318 <HAL_UART_MspInit+0x190>)
 800123c:	f003 f9e4 	bl	8004608 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream0;
 8001240:	4b36      	ldr	r3, [pc, #216]	; (800131c <HAL_UART_MspInit+0x194>)
 8001242:	4a37      	ldr	r2, [pc, #220]	; (8001320 <HAL_UART_MspInit+0x198>)
 8001244:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001246:	4b35      	ldr	r3, [pc, #212]	; (800131c <HAL_UART_MspInit+0x194>)
 8001248:	222e      	movs	r2, #46	; 0x2e
 800124a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800124c:	4b33      	ldr	r3, [pc, #204]	; (800131c <HAL_UART_MspInit+0x194>)
 800124e:	2240      	movs	r2, #64	; 0x40
 8001250:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001252:	4b32      	ldr	r3, [pc, #200]	; (800131c <HAL_UART_MspInit+0x194>)
 8001254:	2200      	movs	r2, #0
 8001256:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001258:	4b30      	ldr	r3, [pc, #192]	; (800131c <HAL_UART_MspInit+0x194>)
 800125a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800125e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001260:	4b2e      	ldr	r3, [pc, #184]	; (800131c <HAL_UART_MspInit+0x194>)
 8001262:	2200      	movs	r2, #0
 8001264:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001266:	4b2d      	ldr	r3, [pc, #180]	; (800131c <HAL_UART_MspInit+0x194>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800126c:	4b2b      	ldr	r3, [pc, #172]	; (800131c <HAL_UART_MspInit+0x194>)
 800126e:	2200      	movs	r2, #0
 8001270:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001272:	4b2a      	ldr	r3, [pc, #168]	; (800131c <HAL_UART_MspInit+0x194>)
 8001274:	2200      	movs	r2, #0
 8001276:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001278:	4b28      	ldr	r3, [pc, #160]	; (800131c <HAL_UART_MspInit+0x194>)
 800127a:	2200      	movs	r2, #0
 800127c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800127e:	4827      	ldr	r0, [pc, #156]	; (800131c <HAL_UART_MspInit+0x194>)
 8001280:	f000 fb88 	bl	8001994 <HAL_DMA_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 800128a:	f7ff ff59 	bl	8001140 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a22      	ldr	r2, [pc, #136]	; (800131c <HAL_UART_MspInit+0x194>)
 8001292:	679a      	str	r2, [r3, #120]	; 0x78
 8001294:	4a21      	ldr	r2, [pc, #132]	; (800131c <HAL_UART_MspInit+0x194>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800129a:	4b22      	ldr	r3, [pc, #136]	; (8001324 <HAL_UART_MspInit+0x19c>)
 800129c:	4a22      	ldr	r2, [pc, #136]	; (8001328 <HAL_UART_MspInit+0x1a0>)
 800129e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80012a0:	4b20      	ldr	r3, [pc, #128]	; (8001324 <HAL_UART_MspInit+0x19c>)
 80012a2:	222d      	movs	r2, #45	; 0x2d
 80012a4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012a6:	4b1f      	ldr	r3, [pc, #124]	; (8001324 <HAL_UART_MspInit+0x19c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ac:	4b1d      	ldr	r3, [pc, #116]	; (8001324 <HAL_UART_MspInit+0x19c>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012b2:	4b1c      	ldr	r3, [pc, #112]	; (8001324 <HAL_UART_MspInit+0x19c>)
 80012b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012b8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012ba:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <HAL_UART_MspInit+0x19c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012c0:	4b18      	ldr	r3, [pc, #96]	; (8001324 <HAL_UART_MspInit+0x19c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80012c6:	4b17      	ldr	r3, [pc, #92]	; (8001324 <HAL_UART_MspInit+0x19c>)
 80012c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012cc:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012ce:	4b15      	ldr	r3, [pc, #84]	; (8001324 <HAL_UART_MspInit+0x19c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012d4:	4b13      	ldr	r3, [pc, #76]	; (8001324 <HAL_UART_MspInit+0x19c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80012da:	4812      	ldr	r0, [pc, #72]	; (8001324 <HAL_UART_MspInit+0x19c>)
 80012dc:	f000 fb5a 	bl	8001994 <HAL_DMA_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 80012e6:	f7ff ff2b 	bl	8001140 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a0d      	ldr	r2, [pc, #52]	; (8001324 <HAL_UART_MspInit+0x19c>)
 80012ee:	67da      	str	r2, [r3, #124]	; 0x7c
 80012f0:	4a0c      	ldr	r2, [pc, #48]	; (8001324 <HAL_UART_MspInit+0x19c>)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2100      	movs	r1, #0
 80012fa:	2027      	movs	r0, #39	; 0x27
 80012fc:	f000 fb22 	bl	8001944 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001300:	2027      	movs	r0, #39	; 0x27
 8001302:	f000 fb39 	bl	8001978 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001306:	bf00      	nop
 8001308:	37d8      	adds	r7, #216	; 0xd8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40004800 	.word	0x40004800
 8001314:	58024400 	.word	0x58024400
 8001318:	58020c00 	.word	0x58020c00
 800131c:	240007ec 	.word	0x240007ec
 8001320:	40020010 	.word	0x40020010
 8001324:	24000864 	.word	0x24000864
 8001328:	40020028 	.word	0x40020028

0800132c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08e      	sub	sp, #56	; 0x38
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b0f      	cmp	r3, #15
 8001338:	d844      	bhi.n	80013c4 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 800133a:	2200      	movs	r2, #0
 800133c:	6879      	ldr	r1, [r7, #4]
 800133e:	2019      	movs	r0, #25
 8001340:	f000 fb00 	bl	8001944 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001344:	2019      	movs	r0, #25
 8001346:	f000 fb17 	bl	8001978 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800134a:	4a24      	ldr	r2, [pc, #144]	; (80013dc <HAL_InitTick+0xb0>)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001350:	4b23      	ldr	r3, [pc, #140]	; (80013e0 <HAL_InitTick+0xb4>)
 8001352:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001356:	4a22      	ldr	r2, [pc, #136]	; (80013e0 <HAL_InitTick+0xb4>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001360:	4b1f      	ldr	r3, [pc, #124]	; (80013e0 <HAL_InitTick+0xb4>)
 8001362:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800136e:	f107 020c 	add.w	r2, r7, #12
 8001372:	f107 0310 	add.w	r3, r7, #16
 8001376:	4611      	mov	r1, r2
 8001378:	4618      	mov	r0, r3
 800137a:	f005 feaf 	bl	80070dc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800137e:	f005 fe97 	bl	80070b0 <HAL_RCC_GetPCLK2Freq>
 8001382:	4603      	mov	r3, r0
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800138a:	4a16      	ldr	r2, [pc, #88]	; (80013e4 <HAL_InitTick+0xb8>)
 800138c:	fba2 2303 	umull	r2, r3, r2, r3
 8001390:	0c9b      	lsrs	r3, r3, #18
 8001392:	3b01      	subs	r3, #1
 8001394:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001396:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <HAL_InitTick+0xbc>)
 8001398:	4a14      	ldr	r2, [pc, #80]	; (80013ec <HAL_InitTick+0xc0>)
 800139a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <HAL_InitTick+0xbc>)
 800139e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013a2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80013a4:	4a10      	ldr	r2, [pc, #64]	; (80013e8 <HAL_InitTick+0xbc>)
 80013a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013a8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80013aa:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <HAL_InitTick+0xbc>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b0:	4b0d      	ldr	r3, [pc, #52]	; (80013e8 <HAL_InitTick+0xbc>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80013b6:	480c      	ldr	r0, [pc, #48]	; (80013e8 <HAL_InitTick+0xbc>)
 80013b8:	f007 f9ee 	bl	8008798 <HAL_TIM_Base_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d107      	bne.n	80013d2 <HAL_InitTick+0xa6>
 80013c2:	e001      	b.n	80013c8 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e005      	b.n	80013d4 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80013c8:	4807      	ldr	r0, [pc, #28]	; (80013e8 <HAL_InitTick+0xbc>)
 80013ca:	f007 fa47 	bl	800885c <HAL_TIM_Base_Start_IT>
 80013ce:	4603      	mov	r3, r0
 80013d0:	e000      	b.n	80013d4 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3738      	adds	r7, #56	; 0x38
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	24000008 	.word	0x24000008
 80013e0:	58024400 	.word	0x58024400
 80013e4:	431bde83 	.word	0x431bde83
 80013e8:	240009b8 	.word	0x240009b8
 80013ec:	40010000 	.word	0x40010000

080013f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <NMI_Handler+0x4>

080013f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fa:	e7fe      	b.n	80013fa <HardFault_Handler+0x4>

080013fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <MemManage_Handler+0x4>

08001402 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001406:	e7fe      	b.n	8001406 <BusFault_Handler+0x4>

08001408 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800140c:	e7fe      	b.n	800140c <UsageFault_Handler+0x4>

0800140e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001420:	4802      	ldr	r0, [pc, #8]	; (800142c <DMA1_Stream0_IRQHandler+0x10>)
 8001422:	f001 fddf 	bl	8002fe4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	240007ec 	.word	0x240007ec

08001430 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001434:	4802      	ldr	r0, [pc, #8]	; (8001440 <DMA1_Stream1_IRQHandler+0x10>)
 8001436:	f001 fdd5 	bl	8002fe4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	24000864 	.word	0x24000864

08001444 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001448:	4802      	ldr	r0, [pc, #8]	; (8001454 <TIM1_UP_IRQHandler+0x10>)
 800144a:	f007 fa8d 	bl	8008968 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	240009b8 	.word	0x240009b8

08001458 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800145c:	4802      	ldr	r0, [pc, #8]	; (8001468 <USART3_IRQHandler+0x10>)
 800145e:	f007 fd71 	bl	8008f44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	2400075c 	.word	0x2400075c

0800146c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001470:	4802      	ldr	r0, [pc, #8]	; (800147c <OTG_HS_IRQHandler+0x10>)
 8001472:	f003 fd0f 	bl	8004e94 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	24004cc0 	.word	0x24004cc0

08001480 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]
 8001490:	e00a      	b.n	80014a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001492:	f3af 8000 	nop.w
 8001496:	4601      	mov	r1, r0
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	1c5a      	adds	r2, r3, #1
 800149c:	60ba      	str	r2, [r7, #8]
 800149e:	b2ca      	uxtb	r2, r1
 80014a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	3301      	adds	r3, #1
 80014a6:	617b      	str	r3, [r7, #20]
 80014a8:	697a      	ldr	r2, [r7, #20]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	dbf0      	blt.n	8001492 <_read+0x12>
	}

return len;
 80014b0:	687b      	ldr	r3, [r7, #4]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <_close>:
	}
	return len;
}

int _close(int file)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b083      	sub	sp, #12
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
	return -1;
 80014c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
 80014da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014e2:	605a      	str	r2, [r3, #4]
	return 0;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <_isatty>:

int _isatty(int file)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
	return 1;
 80014fa:	2301      	movs	r3, #1
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
	return 0;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
	...

08001524 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800152c:	4a14      	ldr	r2, [pc, #80]	; (8001580 <_sbrk+0x5c>)
 800152e:	4b15      	ldr	r3, [pc, #84]	; (8001584 <_sbrk+0x60>)
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001538:	4b13      	ldr	r3, [pc, #76]	; (8001588 <_sbrk+0x64>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d102      	bne.n	8001546 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001540:	4b11      	ldr	r3, [pc, #68]	; (8001588 <_sbrk+0x64>)
 8001542:	4a12      	ldr	r2, [pc, #72]	; (800158c <_sbrk+0x68>)
 8001544:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001546:	4b10      	ldr	r3, [pc, #64]	; (8001588 <_sbrk+0x64>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4413      	add	r3, r2
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	429a      	cmp	r2, r3
 8001552:	d207      	bcs.n	8001564 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001554:	f011 fc4e 	bl	8012df4 <__errno>
 8001558:	4603      	mov	r3, r0
 800155a:	220c      	movs	r2, #12
 800155c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800155e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001562:	e009      	b.n	8001578 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001564:	4b08      	ldr	r3, [pc, #32]	; (8001588 <_sbrk+0x64>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800156a:	4b07      	ldr	r3, [pc, #28]	; (8001588 <_sbrk+0x64>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4413      	add	r3, r2
 8001572:	4a05      	ldr	r2, [pc, #20]	; (8001588 <_sbrk+0x64>)
 8001574:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001576:	68fb      	ldr	r3, [r7, #12]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3718      	adds	r7, #24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	24050000 	.word	0x24050000
 8001584:	00000400 	.word	0x00000400
 8001588:	24000a04 	.word	0x24000a04
 800158c:	24004fd8 	.word	0x24004fd8

08001590 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001594:	4b32      	ldr	r3, [pc, #200]	; (8001660 <SystemInit+0xd0>)
 8001596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800159a:	4a31      	ldr	r2, [pc, #196]	; (8001660 <SystemInit+0xd0>)
 800159c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015a4:	4b2f      	ldr	r3, [pc, #188]	; (8001664 <SystemInit+0xd4>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 030f 	and.w	r3, r3, #15
 80015ac:	2b06      	cmp	r3, #6
 80015ae:	d807      	bhi.n	80015c0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015b0:	4b2c      	ldr	r3, [pc, #176]	; (8001664 <SystemInit+0xd4>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f023 030f 	bic.w	r3, r3, #15
 80015b8:	4a2a      	ldr	r2, [pc, #168]	; (8001664 <SystemInit+0xd4>)
 80015ba:	f043 0307 	orr.w	r3, r3, #7
 80015be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80015c0:	4b29      	ldr	r3, [pc, #164]	; (8001668 <SystemInit+0xd8>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a28      	ldr	r2, [pc, #160]	; (8001668 <SystemInit+0xd8>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80015cc:	4b26      	ldr	r3, [pc, #152]	; (8001668 <SystemInit+0xd8>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80015d2:	4b25      	ldr	r3, [pc, #148]	; (8001668 <SystemInit+0xd8>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	4924      	ldr	r1, [pc, #144]	; (8001668 <SystemInit+0xd8>)
 80015d8:	4b24      	ldr	r3, [pc, #144]	; (800166c <SystemInit+0xdc>)
 80015da:	4013      	ands	r3, r2
 80015dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015de:	4b21      	ldr	r3, [pc, #132]	; (8001664 <SystemInit+0xd4>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0308 	and.w	r3, r3, #8
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d007      	beq.n	80015fa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015ea:	4b1e      	ldr	r3, [pc, #120]	; (8001664 <SystemInit+0xd4>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f023 030f 	bic.w	r3, r3, #15
 80015f2:	4a1c      	ldr	r2, [pc, #112]	; (8001664 <SystemInit+0xd4>)
 80015f4:	f043 0307 	orr.w	r3, r3, #7
 80015f8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80015fa:	4b1b      	ldr	r3, [pc, #108]	; (8001668 <SystemInit+0xd8>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001600:	4b19      	ldr	r3, [pc, #100]	; (8001668 <SystemInit+0xd8>)
 8001602:	2200      	movs	r2, #0
 8001604:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001606:	4b18      	ldr	r3, [pc, #96]	; (8001668 <SystemInit+0xd8>)
 8001608:	2200      	movs	r2, #0
 800160a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800160c:	4b16      	ldr	r3, [pc, #88]	; (8001668 <SystemInit+0xd8>)
 800160e:	4a18      	ldr	r2, [pc, #96]	; (8001670 <SystemInit+0xe0>)
 8001610:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001612:	4b15      	ldr	r3, [pc, #84]	; (8001668 <SystemInit+0xd8>)
 8001614:	4a17      	ldr	r2, [pc, #92]	; (8001674 <SystemInit+0xe4>)
 8001616:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001618:	4b13      	ldr	r3, [pc, #76]	; (8001668 <SystemInit+0xd8>)
 800161a:	4a17      	ldr	r2, [pc, #92]	; (8001678 <SystemInit+0xe8>)
 800161c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800161e:	4b12      	ldr	r3, [pc, #72]	; (8001668 <SystemInit+0xd8>)
 8001620:	2200      	movs	r2, #0
 8001622:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001624:	4b10      	ldr	r3, [pc, #64]	; (8001668 <SystemInit+0xd8>)
 8001626:	4a14      	ldr	r2, [pc, #80]	; (8001678 <SystemInit+0xe8>)
 8001628:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800162a:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <SystemInit+0xd8>)
 800162c:	2200      	movs	r2, #0
 800162e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001630:	4b0d      	ldr	r3, [pc, #52]	; (8001668 <SystemInit+0xd8>)
 8001632:	4a11      	ldr	r2, [pc, #68]	; (8001678 <SystemInit+0xe8>)
 8001634:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001636:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <SystemInit+0xd8>)
 8001638:	2200      	movs	r2, #0
 800163a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800163c:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <SystemInit+0xd8>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a09      	ldr	r2, [pc, #36]	; (8001668 <SystemInit+0xd8>)
 8001642:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001646:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001648:	4b07      	ldr	r3, [pc, #28]	; (8001668 <SystemInit+0xd8>)
 800164a:	2200      	movs	r2, #0
 800164c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800164e:	4b0b      	ldr	r3, [pc, #44]	; (800167c <SystemInit+0xec>)
 8001650:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001654:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001656:	bf00      	nop
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	e000ed00 	.word	0xe000ed00
 8001664:	52002000 	.word	0x52002000
 8001668:	58024400 	.word	0x58024400
 800166c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001670:	02020200 	.word	0x02020200
 8001674:	01ff0000 	.word	0x01ff0000
 8001678:	01010280 	.word	0x01010280
 800167c:	52004000 	.word	0x52004000

08001680 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001680:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001684:	f7ff ff84 	bl	8001590 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001688:	480c      	ldr	r0, [pc, #48]	; (80016bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800168a:	490d      	ldr	r1, [pc, #52]	; (80016c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800168c:	4a0d      	ldr	r2, [pc, #52]	; (80016c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800168e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001690:	e002      	b.n	8001698 <LoopCopyDataInit>

08001692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001696:	3304      	adds	r3, #4

08001698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800169a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800169c:	d3f9      	bcc.n	8001692 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800169e:	4a0a      	ldr	r2, [pc, #40]	; (80016c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016a0:	4c0a      	ldr	r4, [pc, #40]	; (80016cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80016a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a4:	e001      	b.n	80016aa <LoopFillZerobss>

080016a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016a8:	3204      	adds	r2, #4

080016aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016ac:	d3fb      	bcc.n	80016a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ae:	f011 fba7 	bl	8012e00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016b2:	f7ff f857 	bl	8000764 <main>
  bx  lr
 80016b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016b8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80016bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016c0:	24000098 	.word	0x24000098
  ldr r2, =_sidata
 80016c4:	080140e0 	.word	0x080140e0
  ldr r2, =_sbss
 80016c8:	24000098 	.word	0x24000098
  ldr r4, =_ebss
 80016cc:	24004fd4 	.word	0x24004fd4

080016d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016d0:	e7fe      	b.n	80016d0 <ADC3_IRQHandler>
	...

080016d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016da:	2003      	movs	r0, #3
 80016dc:	f000 f927 	bl	800192e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016e0:	f005 fb26 	bl	8006d30 <HAL_RCC_GetSysClockFreq>
 80016e4:	4602      	mov	r2, r0
 80016e6:	4b15      	ldr	r3, [pc, #84]	; (800173c <HAL_Init+0x68>)
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	0a1b      	lsrs	r3, r3, #8
 80016ec:	f003 030f 	and.w	r3, r3, #15
 80016f0:	4913      	ldr	r1, [pc, #76]	; (8001740 <HAL_Init+0x6c>)
 80016f2:	5ccb      	ldrb	r3, [r1, r3]
 80016f4:	f003 031f 	and.w	r3, r3, #31
 80016f8:	fa22 f303 	lsr.w	r3, r2, r3
 80016fc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016fe:	4b0f      	ldr	r3, [pc, #60]	; (800173c <HAL_Init+0x68>)
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	f003 030f 	and.w	r3, r3, #15
 8001706:	4a0e      	ldr	r2, [pc, #56]	; (8001740 <HAL_Init+0x6c>)
 8001708:	5cd3      	ldrb	r3, [r2, r3]
 800170a:	f003 031f 	and.w	r3, r3, #31
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	fa22 f303 	lsr.w	r3, r2, r3
 8001714:	4a0b      	ldr	r2, [pc, #44]	; (8001744 <HAL_Init+0x70>)
 8001716:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001718:	4a0b      	ldr	r2, [pc, #44]	; (8001748 <HAL_Init+0x74>)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800171e:	200f      	movs	r0, #15
 8001720:	f7ff fe04 	bl	800132c <HAL_InitTick>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e002      	b.n	8001734 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800172e:	f7ff fd0d 	bl	800114c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001732:	2300      	movs	r3, #0
}
 8001734:	4618      	mov	r0, r3
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	58024400 	.word	0x58024400
 8001740:	08013fe4 	.word	0x08013fe4
 8001744:	24000004 	.word	0x24000004
 8001748:	24000000 	.word	0x24000000

0800174c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_IncTick+0x20>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	461a      	mov	r2, r3
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_IncTick+0x24>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4413      	add	r3, r2
 800175c:	4a04      	ldr	r2, [pc, #16]	; (8001770 <HAL_IncTick+0x24>)
 800175e:	6013      	str	r3, [r2, #0]
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	2400000c 	.word	0x2400000c
 8001770:	24000a08 	.word	0x24000a08

08001774 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return uwTick;
 8001778:	4b03      	ldr	r3, [pc, #12]	; (8001788 <HAL_GetTick+0x14>)
 800177a:	681b      	ldr	r3, [r3, #0]
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	24000a08 	.word	0x24000a08

0800178c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001794:	f7ff ffee 	bl	8001774 <HAL_GetTick>
 8001798:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017a4:	d005      	beq.n	80017b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017a6:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <HAL_Delay+0x44>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	461a      	mov	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4413      	add	r3, r2
 80017b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017b2:	bf00      	nop
 80017b4:	f7ff ffde 	bl	8001774 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d8f7      	bhi.n	80017b4 <HAL_Delay+0x28>
  {
  }
}
 80017c4:	bf00      	nop
 80017c6:	bf00      	nop
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	2400000c 	.word	0x2400000c

080017d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e4:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <__NVIC_SetPriorityGrouping+0x40>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f0:	4013      	ands	r3, r2
 80017f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001802:	4a04      	ldr	r2, [pc, #16]	; (8001814 <__NVIC_SetPriorityGrouping+0x40>)
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	60d3      	str	r3, [r2, #12]
}
 8001808:	bf00      	nop
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	e000ed00 	.word	0xe000ed00
 8001818:	05fa0000 	.word	0x05fa0000

0800181c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <__NVIC_GetPriorityGrouping+0x18>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	0a1b      	lsrs	r3, r3, #8
 8001826:	f003 0307 	and.w	r3, r3, #7
}
 800182a:	4618      	mov	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001842:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001846:	2b00      	cmp	r3, #0
 8001848:	db0b      	blt.n	8001862 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800184a:	88fb      	ldrh	r3, [r7, #6]
 800184c:	f003 021f 	and.w	r2, r3, #31
 8001850:	4907      	ldr	r1, [pc, #28]	; (8001870 <__NVIC_EnableIRQ+0x38>)
 8001852:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001856:	095b      	lsrs	r3, r3, #5
 8001858:	2001      	movs	r0, #1
 800185a:	fa00 f202 	lsl.w	r2, r0, r2
 800185e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000e100 	.word	0xe000e100

08001874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	6039      	str	r1, [r7, #0]
 800187e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001880:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001884:	2b00      	cmp	r3, #0
 8001886:	db0a      	blt.n	800189e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	b2da      	uxtb	r2, r3
 800188c:	490c      	ldr	r1, [pc, #48]	; (80018c0 <__NVIC_SetPriority+0x4c>)
 800188e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001892:	0112      	lsls	r2, r2, #4
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	440b      	add	r3, r1
 8001898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800189c:	e00a      	b.n	80018b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4908      	ldr	r1, [pc, #32]	; (80018c4 <__NVIC_SetPriority+0x50>)
 80018a4:	88fb      	ldrh	r3, [r7, #6]
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	3b04      	subs	r3, #4
 80018ac:	0112      	lsls	r2, r2, #4
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	440b      	add	r3, r1
 80018b2:	761a      	strb	r2, [r3, #24]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000e100 	.word	0xe000e100
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b089      	sub	sp, #36	; 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f1c3 0307 	rsb	r3, r3, #7
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	bf28      	it	cs
 80018e6:	2304      	movcs	r3, #4
 80018e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3304      	adds	r3, #4
 80018ee:	2b06      	cmp	r3, #6
 80018f0:	d902      	bls.n	80018f8 <NVIC_EncodePriority+0x30>
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3b03      	subs	r3, #3
 80018f6:	e000      	b.n	80018fa <NVIC_EncodePriority+0x32>
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43da      	mvns	r2, r3
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	401a      	ands	r2, r3
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001910:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	fa01 f303 	lsl.w	r3, r1, r3
 800191a:	43d9      	mvns	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	4313      	orrs	r3, r2
         );
}
 8001922:	4618      	mov	r0, r3
 8001924:	3724      	adds	r7, #36	; 0x24
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b082      	sub	sp, #8
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff ff4c 	bl	80017d4 <__NVIC_SetPriorityGrouping>
}
 800193c:	bf00      	nop
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
 8001950:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001952:	f7ff ff63 	bl	800181c <__NVIC_GetPriorityGrouping>
 8001956:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	68b9      	ldr	r1, [r7, #8]
 800195c:	6978      	ldr	r0, [r7, #20]
 800195e:	f7ff ffb3 	bl	80018c8 <NVIC_EncodePriority>
 8001962:	4602      	mov	r2, r0
 8001964:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001968:	4611      	mov	r1, r2
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff ff82 	bl	8001874 <__NVIC_SetPriority>
}
 8001970:	bf00      	nop
 8001972:	3718      	adds	r7, #24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001982:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff ff56 	bl	8001838 <__NVIC_EnableIRQ>
}
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800199c:	f7ff feea 	bl	8001774 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d101      	bne.n	80019ac <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e314      	b.n	8001fd6 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a66      	ldr	r2, [pc, #408]	; (8001b4c <HAL_DMA_Init+0x1b8>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d04a      	beq.n	8001a4c <HAL_DMA_Init+0xb8>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a65      	ldr	r2, [pc, #404]	; (8001b50 <HAL_DMA_Init+0x1bc>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d045      	beq.n	8001a4c <HAL_DMA_Init+0xb8>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a63      	ldr	r2, [pc, #396]	; (8001b54 <HAL_DMA_Init+0x1c0>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d040      	beq.n	8001a4c <HAL_DMA_Init+0xb8>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a62      	ldr	r2, [pc, #392]	; (8001b58 <HAL_DMA_Init+0x1c4>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d03b      	beq.n	8001a4c <HAL_DMA_Init+0xb8>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a60      	ldr	r2, [pc, #384]	; (8001b5c <HAL_DMA_Init+0x1c8>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d036      	beq.n	8001a4c <HAL_DMA_Init+0xb8>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a5f      	ldr	r2, [pc, #380]	; (8001b60 <HAL_DMA_Init+0x1cc>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d031      	beq.n	8001a4c <HAL_DMA_Init+0xb8>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a5d      	ldr	r2, [pc, #372]	; (8001b64 <HAL_DMA_Init+0x1d0>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d02c      	beq.n	8001a4c <HAL_DMA_Init+0xb8>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a5c      	ldr	r2, [pc, #368]	; (8001b68 <HAL_DMA_Init+0x1d4>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d027      	beq.n	8001a4c <HAL_DMA_Init+0xb8>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a5a      	ldr	r2, [pc, #360]	; (8001b6c <HAL_DMA_Init+0x1d8>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d022      	beq.n	8001a4c <HAL_DMA_Init+0xb8>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a59      	ldr	r2, [pc, #356]	; (8001b70 <HAL_DMA_Init+0x1dc>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d01d      	beq.n	8001a4c <HAL_DMA_Init+0xb8>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a57      	ldr	r2, [pc, #348]	; (8001b74 <HAL_DMA_Init+0x1e0>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d018      	beq.n	8001a4c <HAL_DMA_Init+0xb8>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a56      	ldr	r2, [pc, #344]	; (8001b78 <HAL_DMA_Init+0x1e4>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d013      	beq.n	8001a4c <HAL_DMA_Init+0xb8>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a54      	ldr	r2, [pc, #336]	; (8001b7c <HAL_DMA_Init+0x1e8>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d00e      	beq.n	8001a4c <HAL_DMA_Init+0xb8>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a53      	ldr	r2, [pc, #332]	; (8001b80 <HAL_DMA_Init+0x1ec>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d009      	beq.n	8001a4c <HAL_DMA_Init+0xb8>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a51      	ldr	r2, [pc, #324]	; (8001b84 <HAL_DMA_Init+0x1f0>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d004      	beq.n	8001a4c <HAL_DMA_Init+0xb8>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a50      	ldr	r2, [pc, #320]	; (8001b88 <HAL_DMA_Init+0x1f4>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d101      	bne.n	8001a50 <HAL_DMA_Init+0xbc>
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e000      	b.n	8001a52 <HAL_DMA_Init+0xbe>
 8001a50:	2300      	movs	r3, #0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f000 813c 	beq.w	8001cd0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a37      	ldr	r2, [pc, #220]	; (8001b4c <HAL_DMA_Init+0x1b8>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d04a      	beq.n	8001b08 <HAL_DMA_Init+0x174>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a36      	ldr	r2, [pc, #216]	; (8001b50 <HAL_DMA_Init+0x1bc>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d045      	beq.n	8001b08 <HAL_DMA_Init+0x174>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a34      	ldr	r2, [pc, #208]	; (8001b54 <HAL_DMA_Init+0x1c0>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d040      	beq.n	8001b08 <HAL_DMA_Init+0x174>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a33      	ldr	r2, [pc, #204]	; (8001b58 <HAL_DMA_Init+0x1c4>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d03b      	beq.n	8001b08 <HAL_DMA_Init+0x174>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a31      	ldr	r2, [pc, #196]	; (8001b5c <HAL_DMA_Init+0x1c8>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d036      	beq.n	8001b08 <HAL_DMA_Init+0x174>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a30      	ldr	r2, [pc, #192]	; (8001b60 <HAL_DMA_Init+0x1cc>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d031      	beq.n	8001b08 <HAL_DMA_Init+0x174>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a2e      	ldr	r2, [pc, #184]	; (8001b64 <HAL_DMA_Init+0x1d0>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d02c      	beq.n	8001b08 <HAL_DMA_Init+0x174>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a2d      	ldr	r2, [pc, #180]	; (8001b68 <HAL_DMA_Init+0x1d4>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d027      	beq.n	8001b08 <HAL_DMA_Init+0x174>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a2b      	ldr	r2, [pc, #172]	; (8001b6c <HAL_DMA_Init+0x1d8>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d022      	beq.n	8001b08 <HAL_DMA_Init+0x174>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a2a      	ldr	r2, [pc, #168]	; (8001b70 <HAL_DMA_Init+0x1dc>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d01d      	beq.n	8001b08 <HAL_DMA_Init+0x174>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a28      	ldr	r2, [pc, #160]	; (8001b74 <HAL_DMA_Init+0x1e0>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d018      	beq.n	8001b08 <HAL_DMA_Init+0x174>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a27      	ldr	r2, [pc, #156]	; (8001b78 <HAL_DMA_Init+0x1e4>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d013      	beq.n	8001b08 <HAL_DMA_Init+0x174>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a25      	ldr	r2, [pc, #148]	; (8001b7c <HAL_DMA_Init+0x1e8>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d00e      	beq.n	8001b08 <HAL_DMA_Init+0x174>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a24      	ldr	r2, [pc, #144]	; (8001b80 <HAL_DMA_Init+0x1ec>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d009      	beq.n	8001b08 <HAL_DMA_Init+0x174>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a22      	ldr	r2, [pc, #136]	; (8001b84 <HAL_DMA_Init+0x1f0>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d004      	beq.n	8001b08 <HAL_DMA_Init+0x174>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a21      	ldr	r2, [pc, #132]	; (8001b88 <HAL_DMA_Init+0x1f4>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d108      	bne.n	8001b1a <HAL_DMA_Init+0x186>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f022 0201 	bic.w	r2, r2, #1
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	e007      	b.n	8001b2a <HAL_DMA_Init+0x196>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f022 0201 	bic.w	r2, r2, #1
 8001b28:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001b2a:	e02f      	b.n	8001b8c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b2c:	f7ff fe22 	bl	8001774 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b05      	cmp	r3, #5
 8001b38:	d928      	bls.n	8001b8c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2220      	movs	r2, #32
 8001b3e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2203      	movs	r2, #3
 8001b44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e244      	b.n	8001fd6 <HAL_DMA_Init+0x642>
 8001b4c:	40020010 	.word	0x40020010
 8001b50:	40020028 	.word	0x40020028
 8001b54:	40020040 	.word	0x40020040
 8001b58:	40020058 	.word	0x40020058
 8001b5c:	40020070 	.word	0x40020070
 8001b60:	40020088 	.word	0x40020088
 8001b64:	400200a0 	.word	0x400200a0
 8001b68:	400200b8 	.word	0x400200b8
 8001b6c:	40020410 	.word	0x40020410
 8001b70:	40020428 	.word	0x40020428
 8001b74:	40020440 	.word	0x40020440
 8001b78:	40020458 	.word	0x40020458
 8001b7c:	40020470 	.word	0x40020470
 8001b80:	40020488 	.word	0x40020488
 8001b84:	400204a0 	.word	0x400204a0
 8001b88:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1c8      	bne.n	8001b2c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	4b84      	ldr	r3, [pc, #528]	; (8001db8 <HAL_DMA_Init+0x424>)
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001bb2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bbe:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bca:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bdc:	2b04      	cmp	r3, #4
 8001bde:	d107      	bne.n	8001bf0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be8:	4313      	orrs	r3, r2
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b28      	cmp	r3, #40	; 0x28
 8001bf6:	d903      	bls.n	8001c00 <HAL_DMA_Init+0x26c>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	2b2e      	cmp	r3, #46	; 0x2e
 8001bfe:	d91f      	bls.n	8001c40 <HAL_DMA_Init+0x2ac>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b3e      	cmp	r3, #62	; 0x3e
 8001c06:	d903      	bls.n	8001c10 <HAL_DMA_Init+0x27c>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	2b42      	cmp	r3, #66	; 0x42
 8001c0e:	d917      	bls.n	8001c40 <HAL_DMA_Init+0x2ac>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2b46      	cmp	r3, #70	; 0x46
 8001c16:	d903      	bls.n	8001c20 <HAL_DMA_Init+0x28c>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	2b48      	cmp	r3, #72	; 0x48
 8001c1e:	d90f      	bls.n	8001c40 <HAL_DMA_Init+0x2ac>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b4e      	cmp	r3, #78	; 0x4e
 8001c26:	d903      	bls.n	8001c30 <HAL_DMA_Init+0x29c>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	2b52      	cmp	r3, #82	; 0x52
 8001c2e:	d907      	bls.n	8001c40 <HAL_DMA_Init+0x2ac>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b73      	cmp	r3, #115	; 0x73
 8001c36:	d905      	bls.n	8001c44 <HAL_DMA_Init+0x2b0>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2b77      	cmp	r3, #119	; 0x77
 8001c3e:	d801      	bhi.n	8001c44 <HAL_DMA_Init+0x2b0>
 8001c40:	2301      	movs	r3, #1
 8001c42:	e000      	b.n	8001c46 <HAL_DMA_Init+0x2b2>
 8001c44:	2300      	movs	r3, #0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c50:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	f023 0307 	bic.w	r3, r3, #7
 8001c68:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6e:	697a      	ldr	r2, [r7, #20]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c78:	2b04      	cmp	r3, #4
 8001c7a:	d117      	bne.n	8001cac <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c80:	697a      	ldr	r2, [r7, #20]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00e      	beq.n	8001cac <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f002 fb30 	bl	80042f4 <DMA_CheckFifoParam>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d008      	beq.n	8001cac <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2240      	movs	r2, #64	; 0x40
 8001c9e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e194      	b.n	8001fd6 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f002 fa6b 	bl	8004190 <DMA_CalcBaseAndBitshift>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc2:	f003 031f 	and.w	r3, r3, #31
 8001cc6:	223f      	movs	r2, #63	; 0x3f
 8001cc8:	409a      	lsls	r2, r3
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	609a      	str	r2, [r3, #8]
 8001cce:	e0ca      	b.n	8001e66 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a39      	ldr	r2, [pc, #228]	; (8001dbc <HAL_DMA_Init+0x428>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d022      	beq.n	8001d20 <HAL_DMA_Init+0x38c>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a38      	ldr	r2, [pc, #224]	; (8001dc0 <HAL_DMA_Init+0x42c>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d01d      	beq.n	8001d20 <HAL_DMA_Init+0x38c>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a36      	ldr	r2, [pc, #216]	; (8001dc4 <HAL_DMA_Init+0x430>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d018      	beq.n	8001d20 <HAL_DMA_Init+0x38c>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a35      	ldr	r2, [pc, #212]	; (8001dc8 <HAL_DMA_Init+0x434>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d013      	beq.n	8001d20 <HAL_DMA_Init+0x38c>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a33      	ldr	r2, [pc, #204]	; (8001dcc <HAL_DMA_Init+0x438>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d00e      	beq.n	8001d20 <HAL_DMA_Init+0x38c>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a32      	ldr	r2, [pc, #200]	; (8001dd0 <HAL_DMA_Init+0x43c>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d009      	beq.n	8001d20 <HAL_DMA_Init+0x38c>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a30      	ldr	r2, [pc, #192]	; (8001dd4 <HAL_DMA_Init+0x440>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d004      	beq.n	8001d20 <HAL_DMA_Init+0x38c>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a2f      	ldr	r2, [pc, #188]	; (8001dd8 <HAL_DMA_Init+0x444>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d101      	bne.n	8001d24 <HAL_DMA_Init+0x390>
 8001d20:	2301      	movs	r3, #1
 8001d22:	e000      	b.n	8001d26 <HAL_DMA_Init+0x392>
 8001d24:	2300      	movs	r3, #0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 8094 	beq.w	8001e54 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a22      	ldr	r2, [pc, #136]	; (8001dbc <HAL_DMA_Init+0x428>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d021      	beq.n	8001d7a <HAL_DMA_Init+0x3e6>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a21      	ldr	r2, [pc, #132]	; (8001dc0 <HAL_DMA_Init+0x42c>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d01c      	beq.n	8001d7a <HAL_DMA_Init+0x3e6>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a1f      	ldr	r2, [pc, #124]	; (8001dc4 <HAL_DMA_Init+0x430>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d017      	beq.n	8001d7a <HAL_DMA_Init+0x3e6>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a1e      	ldr	r2, [pc, #120]	; (8001dc8 <HAL_DMA_Init+0x434>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d012      	beq.n	8001d7a <HAL_DMA_Init+0x3e6>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a1c      	ldr	r2, [pc, #112]	; (8001dcc <HAL_DMA_Init+0x438>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d00d      	beq.n	8001d7a <HAL_DMA_Init+0x3e6>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a1b      	ldr	r2, [pc, #108]	; (8001dd0 <HAL_DMA_Init+0x43c>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d008      	beq.n	8001d7a <HAL_DMA_Init+0x3e6>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a19      	ldr	r2, [pc, #100]	; (8001dd4 <HAL_DMA_Init+0x440>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d003      	beq.n	8001d7a <HAL_DMA_Init+0x3e6>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a18      	ldr	r2, [pc, #96]	; (8001dd8 <HAL_DMA_Init+0x444>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2202      	movs	r2, #2
 8001d80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <HAL_DMA_Init+0x448>)
 8001d98:	4013      	ands	r3, r2
 8001d9a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	2b40      	cmp	r3, #64	; 0x40
 8001da2:	d01d      	beq.n	8001de0 <HAL_DMA_Init+0x44c>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	2b80      	cmp	r3, #128	; 0x80
 8001daa:	d102      	bne.n	8001db2 <HAL_DMA_Init+0x41e>
 8001dac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001db0:	e017      	b.n	8001de2 <HAL_DMA_Init+0x44e>
 8001db2:	2300      	movs	r3, #0
 8001db4:	e015      	b.n	8001de2 <HAL_DMA_Init+0x44e>
 8001db6:	bf00      	nop
 8001db8:	fe10803f 	.word	0xfe10803f
 8001dbc:	58025408 	.word	0x58025408
 8001dc0:	5802541c 	.word	0x5802541c
 8001dc4:	58025430 	.word	0x58025430
 8001dc8:	58025444 	.word	0x58025444
 8001dcc:	58025458 	.word	0x58025458
 8001dd0:	5802546c 	.word	0x5802546c
 8001dd4:	58025480 	.word	0x58025480
 8001dd8:	58025494 	.word	0x58025494
 8001ddc:	fffe000f 	.word	0xfffe000f
 8001de0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	68d2      	ldr	r2, [r2, #12]
 8001de6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001de8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001df0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001df8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001e00:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001e08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001e10:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	461a      	mov	r2, r3
 8001e26:	4b6e      	ldr	r3, [pc, #440]	; (8001fe0 <HAL_DMA_Init+0x64c>)
 8001e28:	4413      	add	r3, r2
 8001e2a:	4a6e      	ldr	r2, [pc, #440]	; (8001fe4 <HAL_DMA_Init+0x650>)
 8001e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e30:	091b      	lsrs	r3, r3, #4
 8001e32:	009a      	lsls	r2, r3, #2
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f002 f9a9 	bl	8004190 <DMA_CalcBaseAndBitshift>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e46:	f003 031f 	and.w	r3, r3, #31
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	409a      	lsls	r2, r3
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	e008      	b.n	8001e66 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2240      	movs	r2, #64	; 0x40
 8001e58:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e0b7      	b.n	8001fd6 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a5f      	ldr	r2, [pc, #380]	; (8001fe8 <HAL_DMA_Init+0x654>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d072      	beq.n	8001f56 <HAL_DMA_Init+0x5c2>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a5d      	ldr	r2, [pc, #372]	; (8001fec <HAL_DMA_Init+0x658>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d06d      	beq.n	8001f56 <HAL_DMA_Init+0x5c2>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a5c      	ldr	r2, [pc, #368]	; (8001ff0 <HAL_DMA_Init+0x65c>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d068      	beq.n	8001f56 <HAL_DMA_Init+0x5c2>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a5a      	ldr	r2, [pc, #360]	; (8001ff4 <HAL_DMA_Init+0x660>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d063      	beq.n	8001f56 <HAL_DMA_Init+0x5c2>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a59      	ldr	r2, [pc, #356]	; (8001ff8 <HAL_DMA_Init+0x664>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d05e      	beq.n	8001f56 <HAL_DMA_Init+0x5c2>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a57      	ldr	r2, [pc, #348]	; (8001ffc <HAL_DMA_Init+0x668>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d059      	beq.n	8001f56 <HAL_DMA_Init+0x5c2>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a56      	ldr	r2, [pc, #344]	; (8002000 <HAL_DMA_Init+0x66c>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d054      	beq.n	8001f56 <HAL_DMA_Init+0x5c2>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a54      	ldr	r2, [pc, #336]	; (8002004 <HAL_DMA_Init+0x670>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d04f      	beq.n	8001f56 <HAL_DMA_Init+0x5c2>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a53      	ldr	r2, [pc, #332]	; (8002008 <HAL_DMA_Init+0x674>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d04a      	beq.n	8001f56 <HAL_DMA_Init+0x5c2>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a51      	ldr	r2, [pc, #324]	; (800200c <HAL_DMA_Init+0x678>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d045      	beq.n	8001f56 <HAL_DMA_Init+0x5c2>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a50      	ldr	r2, [pc, #320]	; (8002010 <HAL_DMA_Init+0x67c>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d040      	beq.n	8001f56 <HAL_DMA_Init+0x5c2>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a4e      	ldr	r2, [pc, #312]	; (8002014 <HAL_DMA_Init+0x680>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d03b      	beq.n	8001f56 <HAL_DMA_Init+0x5c2>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a4d      	ldr	r2, [pc, #308]	; (8002018 <HAL_DMA_Init+0x684>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d036      	beq.n	8001f56 <HAL_DMA_Init+0x5c2>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a4b      	ldr	r2, [pc, #300]	; (800201c <HAL_DMA_Init+0x688>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d031      	beq.n	8001f56 <HAL_DMA_Init+0x5c2>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a4a      	ldr	r2, [pc, #296]	; (8002020 <HAL_DMA_Init+0x68c>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d02c      	beq.n	8001f56 <HAL_DMA_Init+0x5c2>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a48      	ldr	r2, [pc, #288]	; (8002024 <HAL_DMA_Init+0x690>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d027      	beq.n	8001f56 <HAL_DMA_Init+0x5c2>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a47      	ldr	r2, [pc, #284]	; (8002028 <HAL_DMA_Init+0x694>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d022      	beq.n	8001f56 <HAL_DMA_Init+0x5c2>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a45      	ldr	r2, [pc, #276]	; (800202c <HAL_DMA_Init+0x698>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d01d      	beq.n	8001f56 <HAL_DMA_Init+0x5c2>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a44      	ldr	r2, [pc, #272]	; (8002030 <HAL_DMA_Init+0x69c>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d018      	beq.n	8001f56 <HAL_DMA_Init+0x5c2>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a42      	ldr	r2, [pc, #264]	; (8002034 <HAL_DMA_Init+0x6a0>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d013      	beq.n	8001f56 <HAL_DMA_Init+0x5c2>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a41      	ldr	r2, [pc, #260]	; (8002038 <HAL_DMA_Init+0x6a4>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d00e      	beq.n	8001f56 <HAL_DMA_Init+0x5c2>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a3f      	ldr	r2, [pc, #252]	; (800203c <HAL_DMA_Init+0x6a8>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d009      	beq.n	8001f56 <HAL_DMA_Init+0x5c2>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a3e      	ldr	r2, [pc, #248]	; (8002040 <HAL_DMA_Init+0x6ac>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d004      	beq.n	8001f56 <HAL_DMA_Init+0x5c2>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a3c      	ldr	r2, [pc, #240]	; (8002044 <HAL_DMA_Init+0x6b0>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d101      	bne.n	8001f5a <HAL_DMA_Init+0x5c6>
 8001f56:	2301      	movs	r3, #1
 8001f58:	e000      	b.n	8001f5c <HAL_DMA_Init+0x5c8>
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d032      	beq.n	8001fc6 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f002 fa43 	bl	80043ec <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	2b80      	cmp	r3, #128	; 0x80
 8001f6c:	d102      	bne.n	8001f74 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001f88:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d010      	beq.n	8001fb4 <HAL_DMA_Init+0x620>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b08      	cmp	r3, #8
 8001f98:	d80c      	bhi.n	8001fb4 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f002 fac0 	bl	8004520 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001fb0:	605a      	str	r2, [r3, #4]
 8001fb2:	e008      	b.n	8001fc6 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	a7fdabf8 	.word	0xa7fdabf8
 8001fe4:	cccccccd 	.word	0xcccccccd
 8001fe8:	40020010 	.word	0x40020010
 8001fec:	40020028 	.word	0x40020028
 8001ff0:	40020040 	.word	0x40020040
 8001ff4:	40020058 	.word	0x40020058
 8001ff8:	40020070 	.word	0x40020070
 8001ffc:	40020088 	.word	0x40020088
 8002000:	400200a0 	.word	0x400200a0
 8002004:	400200b8 	.word	0x400200b8
 8002008:	40020410 	.word	0x40020410
 800200c:	40020428 	.word	0x40020428
 8002010:	40020440 	.word	0x40020440
 8002014:	40020458 	.word	0x40020458
 8002018:	40020470 	.word	0x40020470
 800201c:	40020488 	.word	0x40020488
 8002020:	400204a0 	.word	0x400204a0
 8002024:	400204b8 	.word	0x400204b8
 8002028:	58025408 	.word	0x58025408
 800202c:	5802541c 	.word	0x5802541c
 8002030:	58025430 	.word	0x58025430
 8002034:	58025444 	.word	0x58025444
 8002038:	58025458 	.word	0x58025458
 800203c:	5802546c 	.word	0x5802546c
 8002040:	58025480 	.word	0x58025480
 8002044:	58025494 	.word	0x58025494

08002048 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
 8002054:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002056:	2300      	movs	r3, #0
 8002058:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e226      	b.n	80024b2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800206a:	2b01      	cmp	r3, #1
 800206c:	d101      	bne.n	8002072 <HAL_DMA_Start_IT+0x2a>
 800206e:	2302      	movs	r3, #2
 8002070:	e21f      	b.n	80024b2 <HAL_DMA_Start_IT+0x46a>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b01      	cmp	r3, #1
 8002084:	f040 820a 	bne.w	800249c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2202      	movs	r2, #2
 800208c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a68      	ldr	r2, [pc, #416]	; (800223c <HAL_DMA_Start_IT+0x1f4>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d04a      	beq.n	8002136 <HAL_DMA_Start_IT+0xee>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a66      	ldr	r2, [pc, #408]	; (8002240 <HAL_DMA_Start_IT+0x1f8>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d045      	beq.n	8002136 <HAL_DMA_Start_IT+0xee>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a65      	ldr	r2, [pc, #404]	; (8002244 <HAL_DMA_Start_IT+0x1fc>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d040      	beq.n	8002136 <HAL_DMA_Start_IT+0xee>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a63      	ldr	r2, [pc, #396]	; (8002248 <HAL_DMA_Start_IT+0x200>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d03b      	beq.n	8002136 <HAL_DMA_Start_IT+0xee>
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a62      	ldr	r2, [pc, #392]	; (800224c <HAL_DMA_Start_IT+0x204>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d036      	beq.n	8002136 <HAL_DMA_Start_IT+0xee>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a60      	ldr	r2, [pc, #384]	; (8002250 <HAL_DMA_Start_IT+0x208>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d031      	beq.n	8002136 <HAL_DMA_Start_IT+0xee>
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a5f      	ldr	r2, [pc, #380]	; (8002254 <HAL_DMA_Start_IT+0x20c>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d02c      	beq.n	8002136 <HAL_DMA_Start_IT+0xee>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a5d      	ldr	r2, [pc, #372]	; (8002258 <HAL_DMA_Start_IT+0x210>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d027      	beq.n	8002136 <HAL_DMA_Start_IT+0xee>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a5c      	ldr	r2, [pc, #368]	; (800225c <HAL_DMA_Start_IT+0x214>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d022      	beq.n	8002136 <HAL_DMA_Start_IT+0xee>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a5a      	ldr	r2, [pc, #360]	; (8002260 <HAL_DMA_Start_IT+0x218>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d01d      	beq.n	8002136 <HAL_DMA_Start_IT+0xee>
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a59      	ldr	r2, [pc, #356]	; (8002264 <HAL_DMA_Start_IT+0x21c>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d018      	beq.n	8002136 <HAL_DMA_Start_IT+0xee>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a57      	ldr	r2, [pc, #348]	; (8002268 <HAL_DMA_Start_IT+0x220>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d013      	beq.n	8002136 <HAL_DMA_Start_IT+0xee>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a56      	ldr	r2, [pc, #344]	; (800226c <HAL_DMA_Start_IT+0x224>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d00e      	beq.n	8002136 <HAL_DMA_Start_IT+0xee>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a54      	ldr	r2, [pc, #336]	; (8002270 <HAL_DMA_Start_IT+0x228>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d009      	beq.n	8002136 <HAL_DMA_Start_IT+0xee>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a53      	ldr	r2, [pc, #332]	; (8002274 <HAL_DMA_Start_IT+0x22c>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d004      	beq.n	8002136 <HAL_DMA_Start_IT+0xee>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a51      	ldr	r2, [pc, #324]	; (8002278 <HAL_DMA_Start_IT+0x230>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d108      	bne.n	8002148 <HAL_DMA_Start_IT+0x100>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 0201 	bic.w	r2, r2, #1
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	e007      	b.n	8002158 <HAL_DMA_Start_IT+0x110>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0201 	bic.w	r2, r2, #1
 8002156:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	68b9      	ldr	r1, [r7, #8]
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	f001 fe6a 	bl	8003e38 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a34      	ldr	r2, [pc, #208]	; (800223c <HAL_DMA_Start_IT+0x1f4>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d04a      	beq.n	8002204 <HAL_DMA_Start_IT+0x1bc>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a33      	ldr	r2, [pc, #204]	; (8002240 <HAL_DMA_Start_IT+0x1f8>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d045      	beq.n	8002204 <HAL_DMA_Start_IT+0x1bc>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a31      	ldr	r2, [pc, #196]	; (8002244 <HAL_DMA_Start_IT+0x1fc>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d040      	beq.n	8002204 <HAL_DMA_Start_IT+0x1bc>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a30      	ldr	r2, [pc, #192]	; (8002248 <HAL_DMA_Start_IT+0x200>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d03b      	beq.n	8002204 <HAL_DMA_Start_IT+0x1bc>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a2e      	ldr	r2, [pc, #184]	; (800224c <HAL_DMA_Start_IT+0x204>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d036      	beq.n	8002204 <HAL_DMA_Start_IT+0x1bc>
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a2d      	ldr	r2, [pc, #180]	; (8002250 <HAL_DMA_Start_IT+0x208>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d031      	beq.n	8002204 <HAL_DMA_Start_IT+0x1bc>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a2b      	ldr	r2, [pc, #172]	; (8002254 <HAL_DMA_Start_IT+0x20c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d02c      	beq.n	8002204 <HAL_DMA_Start_IT+0x1bc>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a2a      	ldr	r2, [pc, #168]	; (8002258 <HAL_DMA_Start_IT+0x210>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d027      	beq.n	8002204 <HAL_DMA_Start_IT+0x1bc>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a28      	ldr	r2, [pc, #160]	; (800225c <HAL_DMA_Start_IT+0x214>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d022      	beq.n	8002204 <HAL_DMA_Start_IT+0x1bc>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a27      	ldr	r2, [pc, #156]	; (8002260 <HAL_DMA_Start_IT+0x218>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d01d      	beq.n	8002204 <HAL_DMA_Start_IT+0x1bc>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a25      	ldr	r2, [pc, #148]	; (8002264 <HAL_DMA_Start_IT+0x21c>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d018      	beq.n	8002204 <HAL_DMA_Start_IT+0x1bc>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a24      	ldr	r2, [pc, #144]	; (8002268 <HAL_DMA_Start_IT+0x220>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d013      	beq.n	8002204 <HAL_DMA_Start_IT+0x1bc>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a22      	ldr	r2, [pc, #136]	; (800226c <HAL_DMA_Start_IT+0x224>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d00e      	beq.n	8002204 <HAL_DMA_Start_IT+0x1bc>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a21      	ldr	r2, [pc, #132]	; (8002270 <HAL_DMA_Start_IT+0x228>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d009      	beq.n	8002204 <HAL_DMA_Start_IT+0x1bc>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a1f      	ldr	r2, [pc, #124]	; (8002274 <HAL_DMA_Start_IT+0x22c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d004      	beq.n	8002204 <HAL_DMA_Start_IT+0x1bc>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a1e      	ldr	r2, [pc, #120]	; (8002278 <HAL_DMA_Start_IT+0x230>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d101      	bne.n	8002208 <HAL_DMA_Start_IT+0x1c0>
 8002204:	2301      	movs	r3, #1
 8002206:	e000      	b.n	800220a <HAL_DMA_Start_IT+0x1c2>
 8002208:	2300      	movs	r3, #0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d036      	beq.n	800227c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f023 021e 	bic.w	r2, r3, #30
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f042 0216 	orr.w	r2, r2, #22
 8002220:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	2b00      	cmp	r3, #0
 8002228:	d03e      	beq.n	80022a8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f042 0208 	orr.w	r2, r2, #8
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	e035      	b.n	80022a8 <HAL_DMA_Start_IT+0x260>
 800223c:	40020010 	.word	0x40020010
 8002240:	40020028 	.word	0x40020028
 8002244:	40020040 	.word	0x40020040
 8002248:	40020058 	.word	0x40020058
 800224c:	40020070 	.word	0x40020070
 8002250:	40020088 	.word	0x40020088
 8002254:	400200a0 	.word	0x400200a0
 8002258:	400200b8 	.word	0x400200b8
 800225c:	40020410 	.word	0x40020410
 8002260:	40020428 	.word	0x40020428
 8002264:	40020440 	.word	0x40020440
 8002268:	40020458 	.word	0x40020458
 800226c:	40020470 	.word	0x40020470
 8002270:	40020488 	.word	0x40020488
 8002274:	400204a0 	.word	0x400204a0
 8002278:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f023 020e 	bic.w	r2, r3, #14
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 020a 	orr.w	r2, r2, #10
 800228e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002294:	2b00      	cmp	r3, #0
 8002296:	d007      	beq.n	80022a8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f042 0204 	orr.w	r2, r2, #4
 80022a6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a83      	ldr	r2, [pc, #524]	; (80024bc <HAL_DMA_Start_IT+0x474>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d072      	beq.n	8002398 <HAL_DMA_Start_IT+0x350>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a82      	ldr	r2, [pc, #520]	; (80024c0 <HAL_DMA_Start_IT+0x478>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d06d      	beq.n	8002398 <HAL_DMA_Start_IT+0x350>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a80      	ldr	r2, [pc, #512]	; (80024c4 <HAL_DMA_Start_IT+0x47c>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d068      	beq.n	8002398 <HAL_DMA_Start_IT+0x350>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a7f      	ldr	r2, [pc, #508]	; (80024c8 <HAL_DMA_Start_IT+0x480>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d063      	beq.n	8002398 <HAL_DMA_Start_IT+0x350>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a7d      	ldr	r2, [pc, #500]	; (80024cc <HAL_DMA_Start_IT+0x484>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d05e      	beq.n	8002398 <HAL_DMA_Start_IT+0x350>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a7c      	ldr	r2, [pc, #496]	; (80024d0 <HAL_DMA_Start_IT+0x488>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d059      	beq.n	8002398 <HAL_DMA_Start_IT+0x350>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a7a      	ldr	r2, [pc, #488]	; (80024d4 <HAL_DMA_Start_IT+0x48c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d054      	beq.n	8002398 <HAL_DMA_Start_IT+0x350>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a79      	ldr	r2, [pc, #484]	; (80024d8 <HAL_DMA_Start_IT+0x490>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d04f      	beq.n	8002398 <HAL_DMA_Start_IT+0x350>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a77      	ldr	r2, [pc, #476]	; (80024dc <HAL_DMA_Start_IT+0x494>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d04a      	beq.n	8002398 <HAL_DMA_Start_IT+0x350>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a76      	ldr	r2, [pc, #472]	; (80024e0 <HAL_DMA_Start_IT+0x498>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d045      	beq.n	8002398 <HAL_DMA_Start_IT+0x350>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a74      	ldr	r2, [pc, #464]	; (80024e4 <HAL_DMA_Start_IT+0x49c>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d040      	beq.n	8002398 <HAL_DMA_Start_IT+0x350>
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a73      	ldr	r2, [pc, #460]	; (80024e8 <HAL_DMA_Start_IT+0x4a0>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d03b      	beq.n	8002398 <HAL_DMA_Start_IT+0x350>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a71      	ldr	r2, [pc, #452]	; (80024ec <HAL_DMA_Start_IT+0x4a4>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d036      	beq.n	8002398 <HAL_DMA_Start_IT+0x350>
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a70      	ldr	r2, [pc, #448]	; (80024f0 <HAL_DMA_Start_IT+0x4a8>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d031      	beq.n	8002398 <HAL_DMA_Start_IT+0x350>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a6e      	ldr	r2, [pc, #440]	; (80024f4 <HAL_DMA_Start_IT+0x4ac>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d02c      	beq.n	8002398 <HAL_DMA_Start_IT+0x350>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a6d      	ldr	r2, [pc, #436]	; (80024f8 <HAL_DMA_Start_IT+0x4b0>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d027      	beq.n	8002398 <HAL_DMA_Start_IT+0x350>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a6b      	ldr	r2, [pc, #428]	; (80024fc <HAL_DMA_Start_IT+0x4b4>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d022      	beq.n	8002398 <HAL_DMA_Start_IT+0x350>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a6a      	ldr	r2, [pc, #424]	; (8002500 <HAL_DMA_Start_IT+0x4b8>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d01d      	beq.n	8002398 <HAL_DMA_Start_IT+0x350>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a68      	ldr	r2, [pc, #416]	; (8002504 <HAL_DMA_Start_IT+0x4bc>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d018      	beq.n	8002398 <HAL_DMA_Start_IT+0x350>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a67      	ldr	r2, [pc, #412]	; (8002508 <HAL_DMA_Start_IT+0x4c0>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d013      	beq.n	8002398 <HAL_DMA_Start_IT+0x350>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a65      	ldr	r2, [pc, #404]	; (800250c <HAL_DMA_Start_IT+0x4c4>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d00e      	beq.n	8002398 <HAL_DMA_Start_IT+0x350>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a64      	ldr	r2, [pc, #400]	; (8002510 <HAL_DMA_Start_IT+0x4c8>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d009      	beq.n	8002398 <HAL_DMA_Start_IT+0x350>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a62      	ldr	r2, [pc, #392]	; (8002514 <HAL_DMA_Start_IT+0x4cc>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d004      	beq.n	8002398 <HAL_DMA_Start_IT+0x350>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a61      	ldr	r2, [pc, #388]	; (8002518 <HAL_DMA_Start_IT+0x4d0>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d101      	bne.n	800239c <HAL_DMA_Start_IT+0x354>
 8002398:	2301      	movs	r3, #1
 800239a:	e000      	b.n	800239e <HAL_DMA_Start_IT+0x356>
 800239c:	2300      	movs	r3, #0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d01a      	beq.n	80023d8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d007      	beq.n	80023c0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023be:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d007      	beq.n	80023d8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023d6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a37      	ldr	r2, [pc, #220]	; (80024bc <HAL_DMA_Start_IT+0x474>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d04a      	beq.n	8002478 <HAL_DMA_Start_IT+0x430>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a36      	ldr	r2, [pc, #216]	; (80024c0 <HAL_DMA_Start_IT+0x478>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d045      	beq.n	8002478 <HAL_DMA_Start_IT+0x430>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a34      	ldr	r2, [pc, #208]	; (80024c4 <HAL_DMA_Start_IT+0x47c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d040      	beq.n	8002478 <HAL_DMA_Start_IT+0x430>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a33      	ldr	r2, [pc, #204]	; (80024c8 <HAL_DMA_Start_IT+0x480>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d03b      	beq.n	8002478 <HAL_DMA_Start_IT+0x430>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a31      	ldr	r2, [pc, #196]	; (80024cc <HAL_DMA_Start_IT+0x484>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d036      	beq.n	8002478 <HAL_DMA_Start_IT+0x430>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a30      	ldr	r2, [pc, #192]	; (80024d0 <HAL_DMA_Start_IT+0x488>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d031      	beq.n	8002478 <HAL_DMA_Start_IT+0x430>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a2e      	ldr	r2, [pc, #184]	; (80024d4 <HAL_DMA_Start_IT+0x48c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d02c      	beq.n	8002478 <HAL_DMA_Start_IT+0x430>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a2d      	ldr	r2, [pc, #180]	; (80024d8 <HAL_DMA_Start_IT+0x490>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d027      	beq.n	8002478 <HAL_DMA_Start_IT+0x430>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a2b      	ldr	r2, [pc, #172]	; (80024dc <HAL_DMA_Start_IT+0x494>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d022      	beq.n	8002478 <HAL_DMA_Start_IT+0x430>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a2a      	ldr	r2, [pc, #168]	; (80024e0 <HAL_DMA_Start_IT+0x498>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d01d      	beq.n	8002478 <HAL_DMA_Start_IT+0x430>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a28      	ldr	r2, [pc, #160]	; (80024e4 <HAL_DMA_Start_IT+0x49c>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d018      	beq.n	8002478 <HAL_DMA_Start_IT+0x430>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a27      	ldr	r2, [pc, #156]	; (80024e8 <HAL_DMA_Start_IT+0x4a0>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d013      	beq.n	8002478 <HAL_DMA_Start_IT+0x430>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a25      	ldr	r2, [pc, #148]	; (80024ec <HAL_DMA_Start_IT+0x4a4>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d00e      	beq.n	8002478 <HAL_DMA_Start_IT+0x430>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a24      	ldr	r2, [pc, #144]	; (80024f0 <HAL_DMA_Start_IT+0x4a8>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d009      	beq.n	8002478 <HAL_DMA_Start_IT+0x430>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a22      	ldr	r2, [pc, #136]	; (80024f4 <HAL_DMA_Start_IT+0x4ac>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d004      	beq.n	8002478 <HAL_DMA_Start_IT+0x430>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a21      	ldr	r2, [pc, #132]	; (80024f8 <HAL_DMA_Start_IT+0x4b0>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d108      	bne.n	800248a <HAL_DMA_Start_IT+0x442>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 0201 	orr.w	r2, r2, #1
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	e012      	b.n	80024b0 <HAL_DMA_Start_IT+0x468>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f042 0201 	orr.w	r2, r2, #1
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	e009      	b.n	80024b0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024a2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80024b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3718      	adds	r7, #24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40020010 	.word	0x40020010
 80024c0:	40020028 	.word	0x40020028
 80024c4:	40020040 	.word	0x40020040
 80024c8:	40020058 	.word	0x40020058
 80024cc:	40020070 	.word	0x40020070
 80024d0:	40020088 	.word	0x40020088
 80024d4:	400200a0 	.word	0x400200a0
 80024d8:	400200b8 	.word	0x400200b8
 80024dc:	40020410 	.word	0x40020410
 80024e0:	40020428 	.word	0x40020428
 80024e4:	40020440 	.word	0x40020440
 80024e8:	40020458 	.word	0x40020458
 80024ec:	40020470 	.word	0x40020470
 80024f0:	40020488 	.word	0x40020488
 80024f4:	400204a0 	.word	0x400204a0
 80024f8:	400204b8 	.word	0x400204b8
 80024fc:	58025408 	.word	0x58025408
 8002500:	5802541c 	.word	0x5802541c
 8002504:	58025430 	.word	0x58025430
 8002508:	58025444 	.word	0x58025444
 800250c:	58025458 	.word	0x58025458
 8002510:	5802546c 	.word	0x5802546c
 8002514:	58025480 	.word	0x58025480
 8002518:	58025494 	.word	0x58025494

0800251c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002524:	f7ff f926 	bl	8001774 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e2dc      	b.n	8002aee <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d008      	beq.n	8002552 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2280      	movs	r2, #128	; 0x80
 8002544:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e2cd      	b.n	8002aee <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a76      	ldr	r2, [pc, #472]	; (8002730 <HAL_DMA_Abort+0x214>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d04a      	beq.n	80025f2 <HAL_DMA_Abort+0xd6>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a74      	ldr	r2, [pc, #464]	; (8002734 <HAL_DMA_Abort+0x218>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d045      	beq.n	80025f2 <HAL_DMA_Abort+0xd6>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a73      	ldr	r2, [pc, #460]	; (8002738 <HAL_DMA_Abort+0x21c>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d040      	beq.n	80025f2 <HAL_DMA_Abort+0xd6>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a71      	ldr	r2, [pc, #452]	; (800273c <HAL_DMA_Abort+0x220>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d03b      	beq.n	80025f2 <HAL_DMA_Abort+0xd6>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a70      	ldr	r2, [pc, #448]	; (8002740 <HAL_DMA_Abort+0x224>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d036      	beq.n	80025f2 <HAL_DMA_Abort+0xd6>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a6e      	ldr	r2, [pc, #440]	; (8002744 <HAL_DMA_Abort+0x228>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d031      	beq.n	80025f2 <HAL_DMA_Abort+0xd6>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a6d      	ldr	r2, [pc, #436]	; (8002748 <HAL_DMA_Abort+0x22c>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d02c      	beq.n	80025f2 <HAL_DMA_Abort+0xd6>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a6b      	ldr	r2, [pc, #428]	; (800274c <HAL_DMA_Abort+0x230>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d027      	beq.n	80025f2 <HAL_DMA_Abort+0xd6>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a6a      	ldr	r2, [pc, #424]	; (8002750 <HAL_DMA_Abort+0x234>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d022      	beq.n	80025f2 <HAL_DMA_Abort+0xd6>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a68      	ldr	r2, [pc, #416]	; (8002754 <HAL_DMA_Abort+0x238>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d01d      	beq.n	80025f2 <HAL_DMA_Abort+0xd6>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a67      	ldr	r2, [pc, #412]	; (8002758 <HAL_DMA_Abort+0x23c>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d018      	beq.n	80025f2 <HAL_DMA_Abort+0xd6>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a65      	ldr	r2, [pc, #404]	; (800275c <HAL_DMA_Abort+0x240>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d013      	beq.n	80025f2 <HAL_DMA_Abort+0xd6>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a64      	ldr	r2, [pc, #400]	; (8002760 <HAL_DMA_Abort+0x244>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d00e      	beq.n	80025f2 <HAL_DMA_Abort+0xd6>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a62      	ldr	r2, [pc, #392]	; (8002764 <HAL_DMA_Abort+0x248>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d009      	beq.n	80025f2 <HAL_DMA_Abort+0xd6>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a61      	ldr	r2, [pc, #388]	; (8002768 <HAL_DMA_Abort+0x24c>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d004      	beq.n	80025f2 <HAL_DMA_Abort+0xd6>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a5f      	ldr	r2, [pc, #380]	; (800276c <HAL_DMA_Abort+0x250>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d101      	bne.n	80025f6 <HAL_DMA_Abort+0xda>
 80025f2:	2301      	movs	r3, #1
 80025f4:	e000      	b.n	80025f8 <HAL_DMA_Abort+0xdc>
 80025f6:	2300      	movs	r3, #0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d013      	beq.n	8002624 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 021e 	bic.w	r2, r2, #30
 800260a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	695a      	ldr	r2, [r3, #20]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800261a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	617b      	str	r3, [r7, #20]
 8002622:	e00a      	b.n	800263a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f022 020e 	bic.w	r2, r2, #14
 8002632:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a3c      	ldr	r2, [pc, #240]	; (8002730 <HAL_DMA_Abort+0x214>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d072      	beq.n	800272a <HAL_DMA_Abort+0x20e>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a3a      	ldr	r2, [pc, #232]	; (8002734 <HAL_DMA_Abort+0x218>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d06d      	beq.n	800272a <HAL_DMA_Abort+0x20e>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a39      	ldr	r2, [pc, #228]	; (8002738 <HAL_DMA_Abort+0x21c>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d068      	beq.n	800272a <HAL_DMA_Abort+0x20e>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a37      	ldr	r2, [pc, #220]	; (800273c <HAL_DMA_Abort+0x220>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d063      	beq.n	800272a <HAL_DMA_Abort+0x20e>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a36      	ldr	r2, [pc, #216]	; (8002740 <HAL_DMA_Abort+0x224>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d05e      	beq.n	800272a <HAL_DMA_Abort+0x20e>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a34      	ldr	r2, [pc, #208]	; (8002744 <HAL_DMA_Abort+0x228>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d059      	beq.n	800272a <HAL_DMA_Abort+0x20e>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a33      	ldr	r2, [pc, #204]	; (8002748 <HAL_DMA_Abort+0x22c>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d054      	beq.n	800272a <HAL_DMA_Abort+0x20e>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a31      	ldr	r2, [pc, #196]	; (800274c <HAL_DMA_Abort+0x230>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d04f      	beq.n	800272a <HAL_DMA_Abort+0x20e>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a30      	ldr	r2, [pc, #192]	; (8002750 <HAL_DMA_Abort+0x234>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d04a      	beq.n	800272a <HAL_DMA_Abort+0x20e>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a2e      	ldr	r2, [pc, #184]	; (8002754 <HAL_DMA_Abort+0x238>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d045      	beq.n	800272a <HAL_DMA_Abort+0x20e>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a2d      	ldr	r2, [pc, #180]	; (8002758 <HAL_DMA_Abort+0x23c>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d040      	beq.n	800272a <HAL_DMA_Abort+0x20e>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a2b      	ldr	r2, [pc, #172]	; (800275c <HAL_DMA_Abort+0x240>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d03b      	beq.n	800272a <HAL_DMA_Abort+0x20e>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a2a      	ldr	r2, [pc, #168]	; (8002760 <HAL_DMA_Abort+0x244>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d036      	beq.n	800272a <HAL_DMA_Abort+0x20e>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a28      	ldr	r2, [pc, #160]	; (8002764 <HAL_DMA_Abort+0x248>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d031      	beq.n	800272a <HAL_DMA_Abort+0x20e>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a27      	ldr	r2, [pc, #156]	; (8002768 <HAL_DMA_Abort+0x24c>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d02c      	beq.n	800272a <HAL_DMA_Abort+0x20e>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a25      	ldr	r2, [pc, #148]	; (800276c <HAL_DMA_Abort+0x250>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d027      	beq.n	800272a <HAL_DMA_Abort+0x20e>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a24      	ldr	r2, [pc, #144]	; (8002770 <HAL_DMA_Abort+0x254>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d022      	beq.n	800272a <HAL_DMA_Abort+0x20e>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a22      	ldr	r2, [pc, #136]	; (8002774 <HAL_DMA_Abort+0x258>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d01d      	beq.n	800272a <HAL_DMA_Abort+0x20e>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a21      	ldr	r2, [pc, #132]	; (8002778 <HAL_DMA_Abort+0x25c>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d018      	beq.n	800272a <HAL_DMA_Abort+0x20e>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a1f      	ldr	r2, [pc, #124]	; (800277c <HAL_DMA_Abort+0x260>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d013      	beq.n	800272a <HAL_DMA_Abort+0x20e>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a1e      	ldr	r2, [pc, #120]	; (8002780 <HAL_DMA_Abort+0x264>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d00e      	beq.n	800272a <HAL_DMA_Abort+0x20e>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a1c      	ldr	r2, [pc, #112]	; (8002784 <HAL_DMA_Abort+0x268>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d009      	beq.n	800272a <HAL_DMA_Abort+0x20e>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a1b      	ldr	r2, [pc, #108]	; (8002788 <HAL_DMA_Abort+0x26c>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d004      	beq.n	800272a <HAL_DMA_Abort+0x20e>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a19      	ldr	r2, [pc, #100]	; (800278c <HAL_DMA_Abort+0x270>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d132      	bne.n	8002790 <HAL_DMA_Abort+0x274>
 800272a:	2301      	movs	r3, #1
 800272c:	e031      	b.n	8002792 <HAL_DMA_Abort+0x276>
 800272e:	bf00      	nop
 8002730:	40020010 	.word	0x40020010
 8002734:	40020028 	.word	0x40020028
 8002738:	40020040 	.word	0x40020040
 800273c:	40020058 	.word	0x40020058
 8002740:	40020070 	.word	0x40020070
 8002744:	40020088 	.word	0x40020088
 8002748:	400200a0 	.word	0x400200a0
 800274c:	400200b8 	.word	0x400200b8
 8002750:	40020410 	.word	0x40020410
 8002754:	40020428 	.word	0x40020428
 8002758:	40020440 	.word	0x40020440
 800275c:	40020458 	.word	0x40020458
 8002760:	40020470 	.word	0x40020470
 8002764:	40020488 	.word	0x40020488
 8002768:	400204a0 	.word	0x400204a0
 800276c:	400204b8 	.word	0x400204b8
 8002770:	58025408 	.word	0x58025408
 8002774:	5802541c 	.word	0x5802541c
 8002778:	58025430 	.word	0x58025430
 800277c:	58025444 	.word	0x58025444
 8002780:	58025458 	.word	0x58025458
 8002784:	5802546c 	.word	0x5802546c
 8002788:	58025480 	.word	0x58025480
 800278c:	58025494 	.word	0x58025494
 8002790:	2300      	movs	r3, #0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d007      	beq.n	80027a6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a6d      	ldr	r2, [pc, #436]	; (8002960 <HAL_DMA_Abort+0x444>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d04a      	beq.n	8002846 <HAL_DMA_Abort+0x32a>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a6b      	ldr	r2, [pc, #428]	; (8002964 <HAL_DMA_Abort+0x448>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d045      	beq.n	8002846 <HAL_DMA_Abort+0x32a>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a6a      	ldr	r2, [pc, #424]	; (8002968 <HAL_DMA_Abort+0x44c>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d040      	beq.n	8002846 <HAL_DMA_Abort+0x32a>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a68      	ldr	r2, [pc, #416]	; (800296c <HAL_DMA_Abort+0x450>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d03b      	beq.n	8002846 <HAL_DMA_Abort+0x32a>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a67      	ldr	r2, [pc, #412]	; (8002970 <HAL_DMA_Abort+0x454>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d036      	beq.n	8002846 <HAL_DMA_Abort+0x32a>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a65      	ldr	r2, [pc, #404]	; (8002974 <HAL_DMA_Abort+0x458>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d031      	beq.n	8002846 <HAL_DMA_Abort+0x32a>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a64      	ldr	r2, [pc, #400]	; (8002978 <HAL_DMA_Abort+0x45c>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d02c      	beq.n	8002846 <HAL_DMA_Abort+0x32a>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a62      	ldr	r2, [pc, #392]	; (800297c <HAL_DMA_Abort+0x460>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d027      	beq.n	8002846 <HAL_DMA_Abort+0x32a>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a61      	ldr	r2, [pc, #388]	; (8002980 <HAL_DMA_Abort+0x464>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d022      	beq.n	8002846 <HAL_DMA_Abort+0x32a>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a5f      	ldr	r2, [pc, #380]	; (8002984 <HAL_DMA_Abort+0x468>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d01d      	beq.n	8002846 <HAL_DMA_Abort+0x32a>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a5e      	ldr	r2, [pc, #376]	; (8002988 <HAL_DMA_Abort+0x46c>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d018      	beq.n	8002846 <HAL_DMA_Abort+0x32a>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a5c      	ldr	r2, [pc, #368]	; (800298c <HAL_DMA_Abort+0x470>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d013      	beq.n	8002846 <HAL_DMA_Abort+0x32a>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a5b      	ldr	r2, [pc, #364]	; (8002990 <HAL_DMA_Abort+0x474>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d00e      	beq.n	8002846 <HAL_DMA_Abort+0x32a>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a59      	ldr	r2, [pc, #356]	; (8002994 <HAL_DMA_Abort+0x478>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d009      	beq.n	8002846 <HAL_DMA_Abort+0x32a>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a58      	ldr	r2, [pc, #352]	; (8002998 <HAL_DMA_Abort+0x47c>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d004      	beq.n	8002846 <HAL_DMA_Abort+0x32a>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a56      	ldr	r2, [pc, #344]	; (800299c <HAL_DMA_Abort+0x480>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d108      	bne.n	8002858 <HAL_DMA_Abort+0x33c>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 0201 	bic.w	r2, r2, #1
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	e007      	b.n	8002868 <HAL_DMA_Abort+0x34c>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0201 	bic.w	r2, r2, #1
 8002866:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002868:	e013      	b.n	8002892 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800286a:	f7fe ff83 	bl	8001774 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b05      	cmp	r3, #5
 8002876:	d90c      	bls.n	8002892 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2220      	movs	r2, #32
 800287c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2203      	movs	r2, #3
 8002882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e12d      	b.n	8002aee <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1e5      	bne.n	800286a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a2f      	ldr	r2, [pc, #188]	; (8002960 <HAL_DMA_Abort+0x444>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d04a      	beq.n	800293e <HAL_DMA_Abort+0x422>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a2d      	ldr	r2, [pc, #180]	; (8002964 <HAL_DMA_Abort+0x448>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d045      	beq.n	800293e <HAL_DMA_Abort+0x422>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a2c      	ldr	r2, [pc, #176]	; (8002968 <HAL_DMA_Abort+0x44c>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d040      	beq.n	800293e <HAL_DMA_Abort+0x422>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a2a      	ldr	r2, [pc, #168]	; (800296c <HAL_DMA_Abort+0x450>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d03b      	beq.n	800293e <HAL_DMA_Abort+0x422>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a29      	ldr	r2, [pc, #164]	; (8002970 <HAL_DMA_Abort+0x454>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d036      	beq.n	800293e <HAL_DMA_Abort+0x422>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a27      	ldr	r2, [pc, #156]	; (8002974 <HAL_DMA_Abort+0x458>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d031      	beq.n	800293e <HAL_DMA_Abort+0x422>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a26      	ldr	r2, [pc, #152]	; (8002978 <HAL_DMA_Abort+0x45c>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d02c      	beq.n	800293e <HAL_DMA_Abort+0x422>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a24      	ldr	r2, [pc, #144]	; (800297c <HAL_DMA_Abort+0x460>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d027      	beq.n	800293e <HAL_DMA_Abort+0x422>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a23      	ldr	r2, [pc, #140]	; (8002980 <HAL_DMA_Abort+0x464>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d022      	beq.n	800293e <HAL_DMA_Abort+0x422>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a21      	ldr	r2, [pc, #132]	; (8002984 <HAL_DMA_Abort+0x468>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d01d      	beq.n	800293e <HAL_DMA_Abort+0x422>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a20      	ldr	r2, [pc, #128]	; (8002988 <HAL_DMA_Abort+0x46c>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d018      	beq.n	800293e <HAL_DMA_Abort+0x422>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a1e      	ldr	r2, [pc, #120]	; (800298c <HAL_DMA_Abort+0x470>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d013      	beq.n	800293e <HAL_DMA_Abort+0x422>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a1d      	ldr	r2, [pc, #116]	; (8002990 <HAL_DMA_Abort+0x474>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d00e      	beq.n	800293e <HAL_DMA_Abort+0x422>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a1b      	ldr	r2, [pc, #108]	; (8002994 <HAL_DMA_Abort+0x478>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d009      	beq.n	800293e <HAL_DMA_Abort+0x422>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a1a      	ldr	r2, [pc, #104]	; (8002998 <HAL_DMA_Abort+0x47c>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d004      	beq.n	800293e <HAL_DMA_Abort+0x422>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a18      	ldr	r2, [pc, #96]	; (800299c <HAL_DMA_Abort+0x480>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d101      	bne.n	8002942 <HAL_DMA_Abort+0x426>
 800293e:	2301      	movs	r3, #1
 8002940:	e000      	b.n	8002944 <HAL_DMA_Abort+0x428>
 8002942:	2300      	movs	r3, #0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d02b      	beq.n	80029a0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002952:	f003 031f 	and.w	r3, r3, #31
 8002956:	223f      	movs	r2, #63	; 0x3f
 8002958:	409a      	lsls	r2, r3
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	609a      	str	r2, [r3, #8]
 800295e:	e02a      	b.n	80029b6 <HAL_DMA_Abort+0x49a>
 8002960:	40020010 	.word	0x40020010
 8002964:	40020028 	.word	0x40020028
 8002968:	40020040 	.word	0x40020040
 800296c:	40020058 	.word	0x40020058
 8002970:	40020070 	.word	0x40020070
 8002974:	40020088 	.word	0x40020088
 8002978:	400200a0 	.word	0x400200a0
 800297c:	400200b8 	.word	0x400200b8
 8002980:	40020410 	.word	0x40020410
 8002984:	40020428 	.word	0x40020428
 8002988:	40020440 	.word	0x40020440
 800298c:	40020458 	.word	0x40020458
 8002990:	40020470 	.word	0x40020470
 8002994:	40020488 	.word	0x40020488
 8002998:	400204a0 	.word	0x400204a0
 800299c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029aa:	f003 031f 	and.w	r3, r3, #31
 80029ae:	2201      	movs	r2, #1
 80029b0:	409a      	lsls	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a4f      	ldr	r2, [pc, #316]	; (8002af8 <HAL_DMA_Abort+0x5dc>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d072      	beq.n	8002aa6 <HAL_DMA_Abort+0x58a>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a4d      	ldr	r2, [pc, #308]	; (8002afc <HAL_DMA_Abort+0x5e0>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d06d      	beq.n	8002aa6 <HAL_DMA_Abort+0x58a>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a4c      	ldr	r2, [pc, #304]	; (8002b00 <HAL_DMA_Abort+0x5e4>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d068      	beq.n	8002aa6 <HAL_DMA_Abort+0x58a>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a4a      	ldr	r2, [pc, #296]	; (8002b04 <HAL_DMA_Abort+0x5e8>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d063      	beq.n	8002aa6 <HAL_DMA_Abort+0x58a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a49      	ldr	r2, [pc, #292]	; (8002b08 <HAL_DMA_Abort+0x5ec>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d05e      	beq.n	8002aa6 <HAL_DMA_Abort+0x58a>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a47      	ldr	r2, [pc, #284]	; (8002b0c <HAL_DMA_Abort+0x5f0>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d059      	beq.n	8002aa6 <HAL_DMA_Abort+0x58a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a46      	ldr	r2, [pc, #280]	; (8002b10 <HAL_DMA_Abort+0x5f4>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d054      	beq.n	8002aa6 <HAL_DMA_Abort+0x58a>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a44      	ldr	r2, [pc, #272]	; (8002b14 <HAL_DMA_Abort+0x5f8>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d04f      	beq.n	8002aa6 <HAL_DMA_Abort+0x58a>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a43      	ldr	r2, [pc, #268]	; (8002b18 <HAL_DMA_Abort+0x5fc>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d04a      	beq.n	8002aa6 <HAL_DMA_Abort+0x58a>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a41      	ldr	r2, [pc, #260]	; (8002b1c <HAL_DMA_Abort+0x600>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d045      	beq.n	8002aa6 <HAL_DMA_Abort+0x58a>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a40      	ldr	r2, [pc, #256]	; (8002b20 <HAL_DMA_Abort+0x604>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d040      	beq.n	8002aa6 <HAL_DMA_Abort+0x58a>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a3e      	ldr	r2, [pc, #248]	; (8002b24 <HAL_DMA_Abort+0x608>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d03b      	beq.n	8002aa6 <HAL_DMA_Abort+0x58a>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a3d      	ldr	r2, [pc, #244]	; (8002b28 <HAL_DMA_Abort+0x60c>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d036      	beq.n	8002aa6 <HAL_DMA_Abort+0x58a>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a3b      	ldr	r2, [pc, #236]	; (8002b2c <HAL_DMA_Abort+0x610>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d031      	beq.n	8002aa6 <HAL_DMA_Abort+0x58a>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a3a      	ldr	r2, [pc, #232]	; (8002b30 <HAL_DMA_Abort+0x614>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d02c      	beq.n	8002aa6 <HAL_DMA_Abort+0x58a>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a38      	ldr	r2, [pc, #224]	; (8002b34 <HAL_DMA_Abort+0x618>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d027      	beq.n	8002aa6 <HAL_DMA_Abort+0x58a>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a37      	ldr	r2, [pc, #220]	; (8002b38 <HAL_DMA_Abort+0x61c>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d022      	beq.n	8002aa6 <HAL_DMA_Abort+0x58a>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a35      	ldr	r2, [pc, #212]	; (8002b3c <HAL_DMA_Abort+0x620>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d01d      	beq.n	8002aa6 <HAL_DMA_Abort+0x58a>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a34      	ldr	r2, [pc, #208]	; (8002b40 <HAL_DMA_Abort+0x624>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d018      	beq.n	8002aa6 <HAL_DMA_Abort+0x58a>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a32      	ldr	r2, [pc, #200]	; (8002b44 <HAL_DMA_Abort+0x628>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d013      	beq.n	8002aa6 <HAL_DMA_Abort+0x58a>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a31      	ldr	r2, [pc, #196]	; (8002b48 <HAL_DMA_Abort+0x62c>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d00e      	beq.n	8002aa6 <HAL_DMA_Abort+0x58a>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a2f      	ldr	r2, [pc, #188]	; (8002b4c <HAL_DMA_Abort+0x630>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d009      	beq.n	8002aa6 <HAL_DMA_Abort+0x58a>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a2e      	ldr	r2, [pc, #184]	; (8002b50 <HAL_DMA_Abort+0x634>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d004      	beq.n	8002aa6 <HAL_DMA_Abort+0x58a>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a2c      	ldr	r2, [pc, #176]	; (8002b54 <HAL_DMA_Abort+0x638>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d101      	bne.n	8002aaa <HAL_DMA_Abort+0x58e>
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e000      	b.n	8002aac <HAL_DMA_Abort+0x590>
 8002aaa:	2300      	movs	r3, #0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d015      	beq.n	8002adc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002ab8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00c      	beq.n	8002adc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002acc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ad0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002ada:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3718      	adds	r7, #24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40020010 	.word	0x40020010
 8002afc:	40020028 	.word	0x40020028
 8002b00:	40020040 	.word	0x40020040
 8002b04:	40020058 	.word	0x40020058
 8002b08:	40020070 	.word	0x40020070
 8002b0c:	40020088 	.word	0x40020088
 8002b10:	400200a0 	.word	0x400200a0
 8002b14:	400200b8 	.word	0x400200b8
 8002b18:	40020410 	.word	0x40020410
 8002b1c:	40020428 	.word	0x40020428
 8002b20:	40020440 	.word	0x40020440
 8002b24:	40020458 	.word	0x40020458
 8002b28:	40020470 	.word	0x40020470
 8002b2c:	40020488 	.word	0x40020488
 8002b30:	400204a0 	.word	0x400204a0
 8002b34:	400204b8 	.word	0x400204b8
 8002b38:	58025408 	.word	0x58025408
 8002b3c:	5802541c 	.word	0x5802541c
 8002b40:	58025430 	.word	0x58025430
 8002b44:	58025444 	.word	0x58025444
 8002b48:	58025458 	.word	0x58025458
 8002b4c:	5802546c 	.word	0x5802546c
 8002b50:	58025480 	.word	0x58025480
 8002b54:	58025494 	.word	0x58025494

08002b58 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e237      	b.n	8002fda <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d004      	beq.n	8002b80 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2280      	movs	r2, #128	; 0x80
 8002b7a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e22c      	b.n	8002fda <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a5c      	ldr	r2, [pc, #368]	; (8002cf8 <HAL_DMA_Abort_IT+0x1a0>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d04a      	beq.n	8002c20 <HAL_DMA_Abort_IT+0xc8>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a5b      	ldr	r2, [pc, #364]	; (8002cfc <HAL_DMA_Abort_IT+0x1a4>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d045      	beq.n	8002c20 <HAL_DMA_Abort_IT+0xc8>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a59      	ldr	r2, [pc, #356]	; (8002d00 <HAL_DMA_Abort_IT+0x1a8>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d040      	beq.n	8002c20 <HAL_DMA_Abort_IT+0xc8>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a58      	ldr	r2, [pc, #352]	; (8002d04 <HAL_DMA_Abort_IT+0x1ac>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d03b      	beq.n	8002c20 <HAL_DMA_Abort_IT+0xc8>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a56      	ldr	r2, [pc, #344]	; (8002d08 <HAL_DMA_Abort_IT+0x1b0>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d036      	beq.n	8002c20 <HAL_DMA_Abort_IT+0xc8>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a55      	ldr	r2, [pc, #340]	; (8002d0c <HAL_DMA_Abort_IT+0x1b4>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d031      	beq.n	8002c20 <HAL_DMA_Abort_IT+0xc8>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a53      	ldr	r2, [pc, #332]	; (8002d10 <HAL_DMA_Abort_IT+0x1b8>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d02c      	beq.n	8002c20 <HAL_DMA_Abort_IT+0xc8>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a52      	ldr	r2, [pc, #328]	; (8002d14 <HAL_DMA_Abort_IT+0x1bc>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d027      	beq.n	8002c20 <HAL_DMA_Abort_IT+0xc8>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a50      	ldr	r2, [pc, #320]	; (8002d18 <HAL_DMA_Abort_IT+0x1c0>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d022      	beq.n	8002c20 <HAL_DMA_Abort_IT+0xc8>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a4f      	ldr	r2, [pc, #316]	; (8002d1c <HAL_DMA_Abort_IT+0x1c4>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d01d      	beq.n	8002c20 <HAL_DMA_Abort_IT+0xc8>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a4d      	ldr	r2, [pc, #308]	; (8002d20 <HAL_DMA_Abort_IT+0x1c8>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d018      	beq.n	8002c20 <HAL_DMA_Abort_IT+0xc8>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a4c      	ldr	r2, [pc, #304]	; (8002d24 <HAL_DMA_Abort_IT+0x1cc>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d013      	beq.n	8002c20 <HAL_DMA_Abort_IT+0xc8>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a4a      	ldr	r2, [pc, #296]	; (8002d28 <HAL_DMA_Abort_IT+0x1d0>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d00e      	beq.n	8002c20 <HAL_DMA_Abort_IT+0xc8>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a49      	ldr	r2, [pc, #292]	; (8002d2c <HAL_DMA_Abort_IT+0x1d4>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d009      	beq.n	8002c20 <HAL_DMA_Abort_IT+0xc8>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a47      	ldr	r2, [pc, #284]	; (8002d30 <HAL_DMA_Abort_IT+0x1d8>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d004      	beq.n	8002c20 <HAL_DMA_Abort_IT+0xc8>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a46      	ldr	r2, [pc, #280]	; (8002d34 <HAL_DMA_Abort_IT+0x1dc>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d101      	bne.n	8002c24 <HAL_DMA_Abort_IT+0xcc>
 8002c20:	2301      	movs	r3, #1
 8002c22:	e000      	b.n	8002c26 <HAL_DMA_Abort_IT+0xce>
 8002c24:	2300      	movs	r3, #0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f000 8086 	beq.w	8002d38 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2204      	movs	r2, #4
 8002c30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a2f      	ldr	r2, [pc, #188]	; (8002cf8 <HAL_DMA_Abort_IT+0x1a0>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d04a      	beq.n	8002cd4 <HAL_DMA_Abort_IT+0x17c>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a2e      	ldr	r2, [pc, #184]	; (8002cfc <HAL_DMA_Abort_IT+0x1a4>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d045      	beq.n	8002cd4 <HAL_DMA_Abort_IT+0x17c>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a2c      	ldr	r2, [pc, #176]	; (8002d00 <HAL_DMA_Abort_IT+0x1a8>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d040      	beq.n	8002cd4 <HAL_DMA_Abort_IT+0x17c>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a2b      	ldr	r2, [pc, #172]	; (8002d04 <HAL_DMA_Abort_IT+0x1ac>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d03b      	beq.n	8002cd4 <HAL_DMA_Abort_IT+0x17c>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a29      	ldr	r2, [pc, #164]	; (8002d08 <HAL_DMA_Abort_IT+0x1b0>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d036      	beq.n	8002cd4 <HAL_DMA_Abort_IT+0x17c>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a28      	ldr	r2, [pc, #160]	; (8002d0c <HAL_DMA_Abort_IT+0x1b4>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d031      	beq.n	8002cd4 <HAL_DMA_Abort_IT+0x17c>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a26      	ldr	r2, [pc, #152]	; (8002d10 <HAL_DMA_Abort_IT+0x1b8>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d02c      	beq.n	8002cd4 <HAL_DMA_Abort_IT+0x17c>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a25      	ldr	r2, [pc, #148]	; (8002d14 <HAL_DMA_Abort_IT+0x1bc>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d027      	beq.n	8002cd4 <HAL_DMA_Abort_IT+0x17c>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a23      	ldr	r2, [pc, #140]	; (8002d18 <HAL_DMA_Abort_IT+0x1c0>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d022      	beq.n	8002cd4 <HAL_DMA_Abort_IT+0x17c>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a22      	ldr	r2, [pc, #136]	; (8002d1c <HAL_DMA_Abort_IT+0x1c4>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d01d      	beq.n	8002cd4 <HAL_DMA_Abort_IT+0x17c>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a20      	ldr	r2, [pc, #128]	; (8002d20 <HAL_DMA_Abort_IT+0x1c8>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d018      	beq.n	8002cd4 <HAL_DMA_Abort_IT+0x17c>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a1f      	ldr	r2, [pc, #124]	; (8002d24 <HAL_DMA_Abort_IT+0x1cc>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d013      	beq.n	8002cd4 <HAL_DMA_Abort_IT+0x17c>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a1d      	ldr	r2, [pc, #116]	; (8002d28 <HAL_DMA_Abort_IT+0x1d0>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d00e      	beq.n	8002cd4 <HAL_DMA_Abort_IT+0x17c>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a1c      	ldr	r2, [pc, #112]	; (8002d2c <HAL_DMA_Abort_IT+0x1d4>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d009      	beq.n	8002cd4 <HAL_DMA_Abort_IT+0x17c>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a1a      	ldr	r2, [pc, #104]	; (8002d30 <HAL_DMA_Abort_IT+0x1d8>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d004      	beq.n	8002cd4 <HAL_DMA_Abort_IT+0x17c>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a19      	ldr	r2, [pc, #100]	; (8002d34 <HAL_DMA_Abort_IT+0x1dc>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d108      	bne.n	8002ce6 <HAL_DMA_Abort_IT+0x18e>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 0201 	bic.w	r2, r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	e178      	b.n	8002fd8 <HAL_DMA_Abort_IT+0x480>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 0201 	bic.w	r2, r2, #1
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	e16f      	b.n	8002fd8 <HAL_DMA_Abort_IT+0x480>
 8002cf8:	40020010 	.word	0x40020010
 8002cfc:	40020028 	.word	0x40020028
 8002d00:	40020040 	.word	0x40020040
 8002d04:	40020058 	.word	0x40020058
 8002d08:	40020070 	.word	0x40020070
 8002d0c:	40020088 	.word	0x40020088
 8002d10:	400200a0 	.word	0x400200a0
 8002d14:	400200b8 	.word	0x400200b8
 8002d18:	40020410 	.word	0x40020410
 8002d1c:	40020428 	.word	0x40020428
 8002d20:	40020440 	.word	0x40020440
 8002d24:	40020458 	.word	0x40020458
 8002d28:	40020470 	.word	0x40020470
 8002d2c:	40020488 	.word	0x40020488
 8002d30:	400204a0 	.word	0x400204a0
 8002d34:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 020e 	bic.w	r2, r2, #14
 8002d46:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a6c      	ldr	r2, [pc, #432]	; (8002f00 <HAL_DMA_Abort_IT+0x3a8>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d04a      	beq.n	8002de8 <HAL_DMA_Abort_IT+0x290>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a6b      	ldr	r2, [pc, #428]	; (8002f04 <HAL_DMA_Abort_IT+0x3ac>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d045      	beq.n	8002de8 <HAL_DMA_Abort_IT+0x290>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a69      	ldr	r2, [pc, #420]	; (8002f08 <HAL_DMA_Abort_IT+0x3b0>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d040      	beq.n	8002de8 <HAL_DMA_Abort_IT+0x290>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a68      	ldr	r2, [pc, #416]	; (8002f0c <HAL_DMA_Abort_IT+0x3b4>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d03b      	beq.n	8002de8 <HAL_DMA_Abort_IT+0x290>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a66      	ldr	r2, [pc, #408]	; (8002f10 <HAL_DMA_Abort_IT+0x3b8>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d036      	beq.n	8002de8 <HAL_DMA_Abort_IT+0x290>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a65      	ldr	r2, [pc, #404]	; (8002f14 <HAL_DMA_Abort_IT+0x3bc>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d031      	beq.n	8002de8 <HAL_DMA_Abort_IT+0x290>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a63      	ldr	r2, [pc, #396]	; (8002f18 <HAL_DMA_Abort_IT+0x3c0>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d02c      	beq.n	8002de8 <HAL_DMA_Abort_IT+0x290>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a62      	ldr	r2, [pc, #392]	; (8002f1c <HAL_DMA_Abort_IT+0x3c4>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d027      	beq.n	8002de8 <HAL_DMA_Abort_IT+0x290>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a60      	ldr	r2, [pc, #384]	; (8002f20 <HAL_DMA_Abort_IT+0x3c8>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d022      	beq.n	8002de8 <HAL_DMA_Abort_IT+0x290>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a5f      	ldr	r2, [pc, #380]	; (8002f24 <HAL_DMA_Abort_IT+0x3cc>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d01d      	beq.n	8002de8 <HAL_DMA_Abort_IT+0x290>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a5d      	ldr	r2, [pc, #372]	; (8002f28 <HAL_DMA_Abort_IT+0x3d0>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d018      	beq.n	8002de8 <HAL_DMA_Abort_IT+0x290>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a5c      	ldr	r2, [pc, #368]	; (8002f2c <HAL_DMA_Abort_IT+0x3d4>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d013      	beq.n	8002de8 <HAL_DMA_Abort_IT+0x290>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a5a      	ldr	r2, [pc, #360]	; (8002f30 <HAL_DMA_Abort_IT+0x3d8>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d00e      	beq.n	8002de8 <HAL_DMA_Abort_IT+0x290>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a59      	ldr	r2, [pc, #356]	; (8002f34 <HAL_DMA_Abort_IT+0x3dc>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d009      	beq.n	8002de8 <HAL_DMA_Abort_IT+0x290>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a57      	ldr	r2, [pc, #348]	; (8002f38 <HAL_DMA_Abort_IT+0x3e0>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d004      	beq.n	8002de8 <HAL_DMA_Abort_IT+0x290>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a56      	ldr	r2, [pc, #344]	; (8002f3c <HAL_DMA_Abort_IT+0x3e4>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d108      	bne.n	8002dfa <HAL_DMA_Abort_IT+0x2a2>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 0201 	bic.w	r2, r2, #1
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	e007      	b.n	8002e0a <HAL_DMA_Abort_IT+0x2b2>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 0201 	bic.w	r2, r2, #1
 8002e08:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a3c      	ldr	r2, [pc, #240]	; (8002f00 <HAL_DMA_Abort_IT+0x3a8>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d072      	beq.n	8002efa <HAL_DMA_Abort_IT+0x3a2>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a3a      	ldr	r2, [pc, #232]	; (8002f04 <HAL_DMA_Abort_IT+0x3ac>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d06d      	beq.n	8002efa <HAL_DMA_Abort_IT+0x3a2>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a39      	ldr	r2, [pc, #228]	; (8002f08 <HAL_DMA_Abort_IT+0x3b0>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d068      	beq.n	8002efa <HAL_DMA_Abort_IT+0x3a2>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a37      	ldr	r2, [pc, #220]	; (8002f0c <HAL_DMA_Abort_IT+0x3b4>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d063      	beq.n	8002efa <HAL_DMA_Abort_IT+0x3a2>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a36      	ldr	r2, [pc, #216]	; (8002f10 <HAL_DMA_Abort_IT+0x3b8>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d05e      	beq.n	8002efa <HAL_DMA_Abort_IT+0x3a2>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a34      	ldr	r2, [pc, #208]	; (8002f14 <HAL_DMA_Abort_IT+0x3bc>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d059      	beq.n	8002efa <HAL_DMA_Abort_IT+0x3a2>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a33      	ldr	r2, [pc, #204]	; (8002f18 <HAL_DMA_Abort_IT+0x3c0>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d054      	beq.n	8002efa <HAL_DMA_Abort_IT+0x3a2>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a31      	ldr	r2, [pc, #196]	; (8002f1c <HAL_DMA_Abort_IT+0x3c4>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d04f      	beq.n	8002efa <HAL_DMA_Abort_IT+0x3a2>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a30      	ldr	r2, [pc, #192]	; (8002f20 <HAL_DMA_Abort_IT+0x3c8>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d04a      	beq.n	8002efa <HAL_DMA_Abort_IT+0x3a2>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a2e      	ldr	r2, [pc, #184]	; (8002f24 <HAL_DMA_Abort_IT+0x3cc>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d045      	beq.n	8002efa <HAL_DMA_Abort_IT+0x3a2>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a2d      	ldr	r2, [pc, #180]	; (8002f28 <HAL_DMA_Abort_IT+0x3d0>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d040      	beq.n	8002efa <HAL_DMA_Abort_IT+0x3a2>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a2b      	ldr	r2, [pc, #172]	; (8002f2c <HAL_DMA_Abort_IT+0x3d4>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d03b      	beq.n	8002efa <HAL_DMA_Abort_IT+0x3a2>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a2a      	ldr	r2, [pc, #168]	; (8002f30 <HAL_DMA_Abort_IT+0x3d8>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d036      	beq.n	8002efa <HAL_DMA_Abort_IT+0x3a2>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a28      	ldr	r2, [pc, #160]	; (8002f34 <HAL_DMA_Abort_IT+0x3dc>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d031      	beq.n	8002efa <HAL_DMA_Abort_IT+0x3a2>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a27      	ldr	r2, [pc, #156]	; (8002f38 <HAL_DMA_Abort_IT+0x3e0>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d02c      	beq.n	8002efa <HAL_DMA_Abort_IT+0x3a2>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a25      	ldr	r2, [pc, #148]	; (8002f3c <HAL_DMA_Abort_IT+0x3e4>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d027      	beq.n	8002efa <HAL_DMA_Abort_IT+0x3a2>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a24      	ldr	r2, [pc, #144]	; (8002f40 <HAL_DMA_Abort_IT+0x3e8>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d022      	beq.n	8002efa <HAL_DMA_Abort_IT+0x3a2>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a22      	ldr	r2, [pc, #136]	; (8002f44 <HAL_DMA_Abort_IT+0x3ec>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d01d      	beq.n	8002efa <HAL_DMA_Abort_IT+0x3a2>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a21      	ldr	r2, [pc, #132]	; (8002f48 <HAL_DMA_Abort_IT+0x3f0>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d018      	beq.n	8002efa <HAL_DMA_Abort_IT+0x3a2>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a1f      	ldr	r2, [pc, #124]	; (8002f4c <HAL_DMA_Abort_IT+0x3f4>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d013      	beq.n	8002efa <HAL_DMA_Abort_IT+0x3a2>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a1e      	ldr	r2, [pc, #120]	; (8002f50 <HAL_DMA_Abort_IT+0x3f8>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d00e      	beq.n	8002efa <HAL_DMA_Abort_IT+0x3a2>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a1c      	ldr	r2, [pc, #112]	; (8002f54 <HAL_DMA_Abort_IT+0x3fc>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d009      	beq.n	8002efa <HAL_DMA_Abort_IT+0x3a2>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a1b      	ldr	r2, [pc, #108]	; (8002f58 <HAL_DMA_Abort_IT+0x400>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d004      	beq.n	8002efa <HAL_DMA_Abort_IT+0x3a2>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a19      	ldr	r2, [pc, #100]	; (8002f5c <HAL_DMA_Abort_IT+0x404>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d132      	bne.n	8002f60 <HAL_DMA_Abort_IT+0x408>
 8002efa:	2301      	movs	r3, #1
 8002efc:	e031      	b.n	8002f62 <HAL_DMA_Abort_IT+0x40a>
 8002efe:	bf00      	nop
 8002f00:	40020010 	.word	0x40020010
 8002f04:	40020028 	.word	0x40020028
 8002f08:	40020040 	.word	0x40020040
 8002f0c:	40020058 	.word	0x40020058
 8002f10:	40020070 	.word	0x40020070
 8002f14:	40020088 	.word	0x40020088
 8002f18:	400200a0 	.word	0x400200a0
 8002f1c:	400200b8 	.word	0x400200b8
 8002f20:	40020410 	.word	0x40020410
 8002f24:	40020428 	.word	0x40020428
 8002f28:	40020440 	.word	0x40020440
 8002f2c:	40020458 	.word	0x40020458
 8002f30:	40020470 	.word	0x40020470
 8002f34:	40020488 	.word	0x40020488
 8002f38:	400204a0 	.word	0x400204a0
 8002f3c:	400204b8 	.word	0x400204b8
 8002f40:	58025408 	.word	0x58025408
 8002f44:	5802541c 	.word	0x5802541c
 8002f48:	58025430 	.word	0x58025430
 8002f4c:	58025444 	.word	0x58025444
 8002f50:	58025458 	.word	0x58025458
 8002f54:	5802546c 	.word	0x5802546c
 8002f58:	58025480 	.word	0x58025480
 8002f5c:	58025494 	.word	0x58025494
 8002f60:	2300      	movs	r3, #0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d028      	beq.n	8002fb8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f74:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f80:	f003 031f 	and.w	r3, r3, #31
 8002f84:	2201      	movs	r2, #1
 8002f86:	409a      	lsls	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002f94:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00c      	beq.n	8002fb8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fa8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fac:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002fb6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d003      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop

08002fe4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b08a      	sub	sp, #40	; 0x28
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ff0:	4b67      	ldr	r3, [pc, #412]	; (8003190 <HAL_DMA_IRQHandler+0x1ac>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a67      	ldr	r2, [pc, #412]	; (8003194 <HAL_DMA_IRQHandler+0x1b0>)
 8002ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffa:	0a9b      	lsrs	r3, r3, #10
 8002ffc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003002:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003008:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800300a:	6a3b      	ldr	r3, [r7, #32]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a5f      	ldr	r2, [pc, #380]	; (8003198 <HAL_DMA_IRQHandler+0x1b4>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d04a      	beq.n	80030b6 <HAL_DMA_IRQHandler+0xd2>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a5d      	ldr	r2, [pc, #372]	; (800319c <HAL_DMA_IRQHandler+0x1b8>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d045      	beq.n	80030b6 <HAL_DMA_IRQHandler+0xd2>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a5c      	ldr	r2, [pc, #368]	; (80031a0 <HAL_DMA_IRQHandler+0x1bc>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d040      	beq.n	80030b6 <HAL_DMA_IRQHandler+0xd2>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a5a      	ldr	r2, [pc, #360]	; (80031a4 <HAL_DMA_IRQHandler+0x1c0>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d03b      	beq.n	80030b6 <HAL_DMA_IRQHandler+0xd2>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a59      	ldr	r2, [pc, #356]	; (80031a8 <HAL_DMA_IRQHandler+0x1c4>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d036      	beq.n	80030b6 <HAL_DMA_IRQHandler+0xd2>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a57      	ldr	r2, [pc, #348]	; (80031ac <HAL_DMA_IRQHandler+0x1c8>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d031      	beq.n	80030b6 <HAL_DMA_IRQHandler+0xd2>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a56      	ldr	r2, [pc, #344]	; (80031b0 <HAL_DMA_IRQHandler+0x1cc>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d02c      	beq.n	80030b6 <HAL_DMA_IRQHandler+0xd2>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a54      	ldr	r2, [pc, #336]	; (80031b4 <HAL_DMA_IRQHandler+0x1d0>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d027      	beq.n	80030b6 <HAL_DMA_IRQHandler+0xd2>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a53      	ldr	r2, [pc, #332]	; (80031b8 <HAL_DMA_IRQHandler+0x1d4>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d022      	beq.n	80030b6 <HAL_DMA_IRQHandler+0xd2>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a51      	ldr	r2, [pc, #324]	; (80031bc <HAL_DMA_IRQHandler+0x1d8>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d01d      	beq.n	80030b6 <HAL_DMA_IRQHandler+0xd2>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a50      	ldr	r2, [pc, #320]	; (80031c0 <HAL_DMA_IRQHandler+0x1dc>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d018      	beq.n	80030b6 <HAL_DMA_IRQHandler+0xd2>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a4e      	ldr	r2, [pc, #312]	; (80031c4 <HAL_DMA_IRQHandler+0x1e0>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d013      	beq.n	80030b6 <HAL_DMA_IRQHandler+0xd2>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a4d      	ldr	r2, [pc, #308]	; (80031c8 <HAL_DMA_IRQHandler+0x1e4>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d00e      	beq.n	80030b6 <HAL_DMA_IRQHandler+0xd2>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a4b      	ldr	r2, [pc, #300]	; (80031cc <HAL_DMA_IRQHandler+0x1e8>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d009      	beq.n	80030b6 <HAL_DMA_IRQHandler+0xd2>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a4a      	ldr	r2, [pc, #296]	; (80031d0 <HAL_DMA_IRQHandler+0x1ec>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d004      	beq.n	80030b6 <HAL_DMA_IRQHandler+0xd2>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a48      	ldr	r2, [pc, #288]	; (80031d4 <HAL_DMA_IRQHandler+0x1f0>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d101      	bne.n	80030ba <HAL_DMA_IRQHandler+0xd6>
 80030b6:	2301      	movs	r3, #1
 80030b8:	e000      	b.n	80030bc <HAL_DMA_IRQHandler+0xd8>
 80030ba:	2300      	movs	r3, #0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 842b 	beq.w	8003918 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c6:	f003 031f 	and.w	r3, r3, #31
 80030ca:	2208      	movs	r2, #8
 80030cc:	409a      	lsls	r2, r3
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	4013      	ands	r3, r2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f000 80a2 	beq.w	800321c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a2e      	ldr	r2, [pc, #184]	; (8003198 <HAL_DMA_IRQHandler+0x1b4>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d04a      	beq.n	8003178 <HAL_DMA_IRQHandler+0x194>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a2d      	ldr	r2, [pc, #180]	; (800319c <HAL_DMA_IRQHandler+0x1b8>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d045      	beq.n	8003178 <HAL_DMA_IRQHandler+0x194>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a2b      	ldr	r2, [pc, #172]	; (80031a0 <HAL_DMA_IRQHandler+0x1bc>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d040      	beq.n	8003178 <HAL_DMA_IRQHandler+0x194>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a2a      	ldr	r2, [pc, #168]	; (80031a4 <HAL_DMA_IRQHandler+0x1c0>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d03b      	beq.n	8003178 <HAL_DMA_IRQHandler+0x194>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a28      	ldr	r2, [pc, #160]	; (80031a8 <HAL_DMA_IRQHandler+0x1c4>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d036      	beq.n	8003178 <HAL_DMA_IRQHandler+0x194>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a27      	ldr	r2, [pc, #156]	; (80031ac <HAL_DMA_IRQHandler+0x1c8>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d031      	beq.n	8003178 <HAL_DMA_IRQHandler+0x194>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a25      	ldr	r2, [pc, #148]	; (80031b0 <HAL_DMA_IRQHandler+0x1cc>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d02c      	beq.n	8003178 <HAL_DMA_IRQHandler+0x194>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a24      	ldr	r2, [pc, #144]	; (80031b4 <HAL_DMA_IRQHandler+0x1d0>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d027      	beq.n	8003178 <HAL_DMA_IRQHandler+0x194>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a22      	ldr	r2, [pc, #136]	; (80031b8 <HAL_DMA_IRQHandler+0x1d4>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d022      	beq.n	8003178 <HAL_DMA_IRQHandler+0x194>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a21      	ldr	r2, [pc, #132]	; (80031bc <HAL_DMA_IRQHandler+0x1d8>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d01d      	beq.n	8003178 <HAL_DMA_IRQHandler+0x194>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a1f      	ldr	r2, [pc, #124]	; (80031c0 <HAL_DMA_IRQHandler+0x1dc>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d018      	beq.n	8003178 <HAL_DMA_IRQHandler+0x194>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a1e      	ldr	r2, [pc, #120]	; (80031c4 <HAL_DMA_IRQHandler+0x1e0>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d013      	beq.n	8003178 <HAL_DMA_IRQHandler+0x194>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a1c      	ldr	r2, [pc, #112]	; (80031c8 <HAL_DMA_IRQHandler+0x1e4>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d00e      	beq.n	8003178 <HAL_DMA_IRQHandler+0x194>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a1b      	ldr	r2, [pc, #108]	; (80031cc <HAL_DMA_IRQHandler+0x1e8>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d009      	beq.n	8003178 <HAL_DMA_IRQHandler+0x194>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a19      	ldr	r2, [pc, #100]	; (80031d0 <HAL_DMA_IRQHandler+0x1ec>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d004      	beq.n	8003178 <HAL_DMA_IRQHandler+0x194>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a18      	ldr	r2, [pc, #96]	; (80031d4 <HAL_DMA_IRQHandler+0x1f0>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d12f      	bne.n	80031d8 <HAL_DMA_IRQHandler+0x1f4>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0304 	and.w	r3, r3, #4
 8003182:	2b00      	cmp	r3, #0
 8003184:	bf14      	ite	ne
 8003186:	2301      	movne	r3, #1
 8003188:	2300      	moveq	r3, #0
 800318a:	b2db      	uxtb	r3, r3
 800318c:	e02e      	b.n	80031ec <HAL_DMA_IRQHandler+0x208>
 800318e:	bf00      	nop
 8003190:	24000000 	.word	0x24000000
 8003194:	1b4e81b5 	.word	0x1b4e81b5
 8003198:	40020010 	.word	0x40020010
 800319c:	40020028 	.word	0x40020028
 80031a0:	40020040 	.word	0x40020040
 80031a4:	40020058 	.word	0x40020058
 80031a8:	40020070 	.word	0x40020070
 80031ac:	40020088 	.word	0x40020088
 80031b0:	400200a0 	.word	0x400200a0
 80031b4:	400200b8 	.word	0x400200b8
 80031b8:	40020410 	.word	0x40020410
 80031bc:	40020428 	.word	0x40020428
 80031c0:	40020440 	.word	0x40020440
 80031c4:	40020458 	.word	0x40020458
 80031c8:	40020470 	.word	0x40020470
 80031cc:	40020488 	.word	0x40020488
 80031d0:	400204a0 	.word	0x400204a0
 80031d4:	400204b8 	.word	0x400204b8
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	bf14      	ite	ne
 80031e6:	2301      	movne	r3, #1
 80031e8:	2300      	moveq	r3, #0
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d015      	beq.n	800321c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 0204 	bic.w	r2, r2, #4
 80031fe:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003204:	f003 031f 	and.w	r3, r3, #31
 8003208:	2208      	movs	r2, #8
 800320a:	409a      	lsls	r2, r3
 800320c:	6a3b      	ldr	r3, [r7, #32]
 800320e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003214:	f043 0201 	orr.w	r2, r3, #1
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003220:	f003 031f 	and.w	r3, r3, #31
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	fa22 f303 	lsr.w	r3, r2, r3
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d06e      	beq.n	8003310 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a69      	ldr	r2, [pc, #420]	; (80033dc <HAL_DMA_IRQHandler+0x3f8>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d04a      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x2ee>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a67      	ldr	r2, [pc, #412]	; (80033e0 <HAL_DMA_IRQHandler+0x3fc>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d045      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x2ee>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a66      	ldr	r2, [pc, #408]	; (80033e4 <HAL_DMA_IRQHandler+0x400>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d040      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x2ee>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a64      	ldr	r2, [pc, #400]	; (80033e8 <HAL_DMA_IRQHandler+0x404>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d03b      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x2ee>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a63      	ldr	r2, [pc, #396]	; (80033ec <HAL_DMA_IRQHandler+0x408>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d036      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x2ee>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a61      	ldr	r2, [pc, #388]	; (80033f0 <HAL_DMA_IRQHandler+0x40c>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d031      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x2ee>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a60      	ldr	r2, [pc, #384]	; (80033f4 <HAL_DMA_IRQHandler+0x410>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d02c      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x2ee>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a5e      	ldr	r2, [pc, #376]	; (80033f8 <HAL_DMA_IRQHandler+0x414>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d027      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x2ee>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a5d      	ldr	r2, [pc, #372]	; (80033fc <HAL_DMA_IRQHandler+0x418>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d022      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x2ee>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a5b      	ldr	r2, [pc, #364]	; (8003400 <HAL_DMA_IRQHandler+0x41c>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d01d      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x2ee>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a5a      	ldr	r2, [pc, #360]	; (8003404 <HAL_DMA_IRQHandler+0x420>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d018      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x2ee>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a58      	ldr	r2, [pc, #352]	; (8003408 <HAL_DMA_IRQHandler+0x424>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d013      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x2ee>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a57      	ldr	r2, [pc, #348]	; (800340c <HAL_DMA_IRQHandler+0x428>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d00e      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x2ee>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a55      	ldr	r2, [pc, #340]	; (8003410 <HAL_DMA_IRQHandler+0x42c>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d009      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x2ee>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a54      	ldr	r2, [pc, #336]	; (8003414 <HAL_DMA_IRQHandler+0x430>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d004      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x2ee>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a52      	ldr	r2, [pc, #328]	; (8003418 <HAL_DMA_IRQHandler+0x434>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d10a      	bne.n	80032e8 <HAL_DMA_IRQHandler+0x304>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032dc:	2b00      	cmp	r3, #0
 80032de:	bf14      	ite	ne
 80032e0:	2301      	movne	r3, #1
 80032e2:	2300      	moveq	r3, #0
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	e003      	b.n	80032f0 <HAL_DMA_IRQHandler+0x30c>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2300      	movs	r3, #0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00d      	beq.n	8003310 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f8:	f003 031f 	and.w	r3, r3, #31
 80032fc:	2201      	movs	r2, #1
 80032fe:	409a      	lsls	r2, r3
 8003300:	6a3b      	ldr	r3, [r7, #32]
 8003302:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003308:	f043 0202 	orr.w	r2, r3, #2
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003314:	f003 031f 	and.w	r3, r3, #31
 8003318:	2204      	movs	r2, #4
 800331a:	409a      	lsls	r2, r3
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	4013      	ands	r3, r2
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 808f 	beq.w	8003444 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a2c      	ldr	r2, [pc, #176]	; (80033dc <HAL_DMA_IRQHandler+0x3f8>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d04a      	beq.n	80033c6 <HAL_DMA_IRQHandler+0x3e2>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a2a      	ldr	r2, [pc, #168]	; (80033e0 <HAL_DMA_IRQHandler+0x3fc>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d045      	beq.n	80033c6 <HAL_DMA_IRQHandler+0x3e2>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a29      	ldr	r2, [pc, #164]	; (80033e4 <HAL_DMA_IRQHandler+0x400>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d040      	beq.n	80033c6 <HAL_DMA_IRQHandler+0x3e2>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a27      	ldr	r2, [pc, #156]	; (80033e8 <HAL_DMA_IRQHandler+0x404>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d03b      	beq.n	80033c6 <HAL_DMA_IRQHandler+0x3e2>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a26      	ldr	r2, [pc, #152]	; (80033ec <HAL_DMA_IRQHandler+0x408>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d036      	beq.n	80033c6 <HAL_DMA_IRQHandler+0x3e2>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a24      	ldr	r2, [pc, #144]	; (80033f0 <HAL_DMA_IRQHandler+0x40c>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d031      	beq.n	80033c6 <HAL_DMA_IRQHandler+0x3e2>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a23      	ldr	r2, [pc, #140]	; (80033f4 <HAL_DMA_IRQHandler+0x410>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d02c      	beq.n	80033c6 <HAL_DMA_IRQHandler+0x3e2>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a21      	ldr	r2, [pc, #132]	; (80033f8 <HAL_DMA_IRQHandler+0x414>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d027      	beq.n	80033c6 <HAL_DMA_IRQHandler+0x3e2>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a20      	ldr	r2, [pc, #128]	; (80033fc <HAL_DMA_IRQHandler+0x418>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d022      	beq.n	80033c6 <HAL_DMA_IRQHandler+0x3e2>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a1e      	ldr	r2, [pc, #120]	; (8003400 <HAL_DMA_IRQHandler+0x41c>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d01d      	beq.n	80033c6 <HAL_DMA_IRQHandler+0x3e2>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a1d      	ldr	r2, [pc, #116]	; (8003404 <HAL_DMA_IRQHandler+0x420>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d018      	beq.n	80033c6 <HAL_DMA_IRQHandler+0x3e2>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a1b      	ldr	r2, [pc, #108]	; (8003408 <HAL_DMA_IRQHandler+0x424>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d013      	beq.n	80033c6 <HAL_DMA_IRQHandler+0x3e2>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a1a      	ldr	r2, [pc, #104]	; (800340c <HAL_DMA_IRQHandler+0x428>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d00e      	beq.n	80033c6 <HAL_DMA_IRQHandler+0x3e2>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a18      	ldr	r2, [pc, #96]	; (8003410 <HAL_DMA_IRQHandler+0x42c>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d009      	beq.n	80033c6 <HAL_DMA_IRQHandler+0x3e2>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a17      	ldr	r2, [pc, #92]	; (8003414 <HAL_DMA_IRQHandler+0x430>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d004      	beq.n	80033c6 <HAL_DMA_IRQHandler+0x3e2>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a15      	ldr	r2, [pc, #84]	; (8003418 <HAL_DMA_IRQHandler+0x434>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d12a      	bne.n	800341c <HAL_DMA_IRQHandler+0x438>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	bf14      	ite	ne
 80033d4:	2301      	movne	r3, #1
 80033d6:	2300      	moveq	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	e023      	b.n	8003424 <HAL_DMA_IRQHandler+0x440>
 80033dc:	40020010 	.word	0x40020010
 80033e0:	40020028 	.word	0x40020028
 80033e4:	40020040 	.word	0x40020040
 80033e8:	40020058 	.word	0x40020058
 80033ec:	40020070 	.word	0x40020070
 80033f0:	40020088 	.word	0x40020088
 80033f4:	400200a0 	.word	0x400200a0
 80033f8:	400200b8 	.word	0x400200b8
 80033fc:	40020410 	.word	0x40020410
 8003400:	40020428 	.word	0x40020428
 8003404:	40020440 	.word	0x40020440
 8003408:	40020458 	.word	0x40020458
 800340c:	40020470 	.word	0x40020470
 8003410:	40020488 	.word	0x40020488
 8003414:	400204a0 	.word	0x400204a0
 8003418:	400204b8 	.word	0x400204b8
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2300      	movs	r3, #0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00d      	beq.n	8003444 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342c:	f003 031f 	and.w	r3, r3, #31
 8003430:	2204      	movs	r2, #4
 8003432:	409a      	lsls	r2, r3
 8003434:	6a3b      	ldr	r3, [r7, #32]
 8003436:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343c:	f043 0204 	orr.w	r2, r3, #4
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003448:	f003 031f 	and.w	r3, r3, #31
 800344c:	2210      	movs	r2, #16
 800344e:	409a      	lsls	r2, r3
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	4013      	ands	r3, r2
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 80a6 	beq.w	80035a6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a85      	ldr	r2, [pc, #532]	; (8003674 <HAL_DMA_IRQHandler+0x690>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d04a      	beq.n	80034fa <HAL_DMA_IRQHandler+0x516>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a83      	ldr	r2, [pc, #524]	; (8003678 <HAL_DMA_IRQHandler+0x694>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d045      	beq.n	80034fa <HAL_DMA_IRQHandler+0x516>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a82      	ldr	r2, [pc, #520]	; (800367c <HAL_DMA_IRQHandler+0x698>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d040      	beq.n	80034fa <HAL_DMA_IRQHandler+0x516>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a80      	ldr	r2, [pc, #512]	; (8003680 <HAL_DMA_IRQHandler+0x69c>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d03b      	beq.n	80034fa <HAL_DMA_IRQHandler+0x516>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a7f      	ldr	r2, [pc, #508]	; (8003684 <HAL_DMA_IRQHandler+0x6a0>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d036      	beq.n	80034fa <HAL_DMA_IRQHandler+0x516>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a7d      	ldr	r2, [pc, #500]	; (8003688 <HAL_DMA_IRQHandler+0x6a4>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d031      	beq.n	80034fa <HAL_DMA_IRQHandler+0x516>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a7c      	ldr	r2, [pc, #496]	; (800368c <HAL_DMA_IRQHandler+0x6a8>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d02c      	beq.n	80034fa <HAL_DMA_IRQHandler+0x516>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a7a      	ldr	r2, [pc, #488]	; (8003690 <HAL_DMA_IRQHandler+0x6ac>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d027      	beq.n	80034fa <HAL_DMA_IRQHandler+0x516>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a79      	ldr	r2, [pc, #484]	; (8003694 <HAL_DMA_IRQHandler+0x6b0>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d022      	beq.n	80034fa <HAL_DMA_IRQHandler+0x516>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a77      	ldr	r2, [pc, #476]	; (8003698 <HAL_DMA_IRQHandler+0x6b4>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d01d      	beq.n	80034fa <HAL_DMA_IRQHandler+0x516>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a76      	ldr	r2, [pc, #472]	; (800369c <HAL_DMA_IRQHandler+0x6b8>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d018      	beq.n	80034fa <HAL_DMA_IRQHandler+0x516>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a74      	ldr	r2, [pc, #464]	; (80036a0 <HAL_DMA_IRQHandler+0x6bc>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d013      	beq.n	80034fa <HAL_DMA_IRQHandler+0x516>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a73      	ldr	r2, [pc, #460]	; (80036a4 <HAL_DMA_IRQHandler+0x6c0>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d00e      	beq.n	80034fa <HAL_DMA_IRQHandler+0x516>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a71      	ldr	r2, [pc, #452]	; (80036a8 <HAL_DMA_IRQHandler+0x6c4>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d009      	beq.n	80034fa <HAL_DMA_IRQHandler+0x516>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a70      	ldr	r2, [pc, #448]	; (80036ac <HAL_DMA_IRQHandler+0x6c8>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d004      	beq.n	80034fa <HAL_DMA_IRQHandler+0x516>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a6e      	ldr	r2, [pc, #440]	; (80036b0 <HAL_DMA_IRQHandler+0x6cc>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d10a      	bne.n	8003510 <HAL_DMA_IRQHandler+0x52c>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0308 	and.w	r3, r3, #8
 8003504:	2b00      	cmp	r3, #0
 8003506:	bf14      	ite	ne
 8003508:	2301      	movne	r3, #1
 800350a:	2300      	moveq	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	e009      	b.n	8003524 <HAL_DMA_IRQHandler+0x540>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0304 	and.w	r3, r3, #4
 800351a:	2b00      	cmp	r3, #0
 800351c:	bf14      	ite	ne
 800351e:	2301      	movne	r3, #1
 8003520:	2300      	moveq	r3, #0
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b00      	cmp	r3, #0
 8003526:	d03e      	beq.n	80035a6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800352c:	f003 031f 	and.w	r3, r3, #31
 8003530:	2210      	movs	r2, #16
 8003532:	409a      	lsls	r2, r3
 8003534:	6a3b      	ldr	r3, [r7, #32]
 8003536:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d018      	beq.n	8003578 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d108      	bne.n	8003566 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003558:	2b00      	cmp	r3, #0
 800355a:	d024      	beq.n	80035a6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	4798      	blx	r3
 8003564:	e01f      	b.n	80035a6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800356a:	2b00      	cmp	r3, #0
 800356c:	d01b      	beq.n	80035a6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	4798      	blx	r3
 8003576:	e016      	b.n	80035a6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003582:	2b00      	cmp	r3, #0
 8003584:	d107      	bne.n	8003596 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 0208 	bic.w	r2, r2, #8
 8003594:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035aa:	f003 031f 	and.w	r3, r3, #31
 80035ae:	2220      	movs	r2, #32
 80035b0:	409a      	lsls	r2, r3
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	4013      	ands	r3, r2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 8110 	beq.w	80037dc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a2c      	ldr	r2, [pc, #176]	; (8003674 <HAL_DMA_IRQHandler+0x690>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d04a      	beq.n	800365c <HAL_DMA_IRQHandler+0x678>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a2b      	ldr	r2, [pc, #172]	; (8003678 <HAL_DMA_IRQHandler+0x694>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d045      	beq.n	800365c <HAL_DMA_IRQHandler+0x678>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a29      	ldr	r2, [pc, #164]	; (800367c <HAL_DMA_IRQHandler+0x698>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d040      	beq.n	800365c <HAL_DMA_IRQHandler+0x678>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a28      	ldr	r2, [pc, #160]	; (8003680 <HAL_DMA_IRQHandler+0x69c>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d03b      	beq.n	800365c <HAL_DMA_IRQHandler+0x678>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a26      	ldr	r2, [pc, #152]	; (8003684 <HAL_DMA_IRQHandler+0x6a0>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d036      	beq.n	800365c <HAL_DMA_IRQHandler+0x678>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a25      	ldr	r2, [pc, #148]	; (8003688 <HAL_DMA_IRQHandler+0x6a4>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d031      	beq.n	800365c <HAL_DMA_IRQHandler+0x678>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a23      	ldr	r2, [pc, #140]	; (800368c <HAL_DMA_IRQHandler+0x6a8>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d02c      	beq.n	800365c <HAL_DMA_IRQHandler+0x678>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a22      	ldr	r2, [pc, #136]	; (8003690 <HAL_DMA_IRQHandler+0x6ac>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d027      	beq.n	800365c <HAL_DMA_IRQHandler+0x678>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a20      	ldr	r2, [pc, #128]	; (8003694 <HAL_DMA_IRQHandler+0x6b0>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d022      	beq.n	800365c <HAL_DMA_IRQHandler+0x678>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a1f      	ldr	r2, [pc, #124]	; (8003698 <HAL_DMA_IRQHandler+0x6b4>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d01d      	beq.n	800365c <HAL_DMA_IRQHandler+0x678>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a1d      	ldr	r2, [pc, #116]	; (800369c <HAL_DMA_IRQHandler+0x6b8>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d018      	beq.n	800365c <HAL_DMA_IRQHandler+0x678>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a1c      	ldr	r2, [pc, #112]	; (80036a0 <HAL_DMA_IRQHandler+0x6bc>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d013      	beq.n	800365c <HAL_DMA_IRQHandler+0x678>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a1a      	ldr	r2, [pc, #104]	; (80036a4 <HAL_DMA_IRQHandler+0x6c0>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d00e      	beq.n	800365c <HAL_DMA_IRQHandler+0x678>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a19      	ldr	r2, [pc, #100]	; (80036a8 <HAL_DMA_IRQHandler+0x6c4>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d009      	beq.n	800365c <HAL_DMA_IRQHandler+0x678>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a17      	ldr	r2, [pc, #92]	; (80036ac <HAL_DMA_IRQHandler+0x6c8>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d004      	beq.n	800365c <HAL_DMA_IRQHandler+0x678>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a16      	ldr	r2, [pc, #88]	; (80036b0 <HAL_DMA_IRQHandler+0x6cc>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d12b      	bne.n	80036b4 <HAL_DMA_IRQHandler+0x6d0>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0310 	and.w	r3, r3, #16
 8003666:	2b00      	cmp	r3, #0
 8003668:	bf14      	ite	ne
 800366a:	2301      	movne	r3, #1
 800366c:	2300      	moveq	r3, #0
 800366e:	b2db      	uxtb	r3, r3
 8003670:	e02a      	b.n	80036c8 <HAL_DMA_IRQHandler+0x6e4>
 8003672:	bf00      	nop
 8003674:	40020010 	.word	0x40020010
 8003678:	40020028 	.word	0x40020028
 800367c:	40020040 	.word	0x40020040
 8003680:	40020058 	.word	0x40020058
 8003684:	40020070 	.word	0x40020070
 8003688:	40020088 	.word	0x40020088
 800368c:	400200a0 	.word	0x400200a0
 8003690:	400200b8 	.word	0x400200b8
 8003694:	40020410 	.word	0x40020410
 8003698:	40020428 	.word	0x40020428
 800369c:	40020440 	.word	0x40020440
 80036a0:	40020458 	.word	0x40020458
 80036a4:	40020470 	.word	0x40020470
 80036a8:	40020488 	.word	0x40020488
 80036ac:	400204a0 	.word	0x400204a0
 80036b0:	400204b8 	.word	0x400204b8
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	bf14      	ite	ne
 80036c2:	2301      	movne	r3, #1
 80036c4:	2300      	moveq	r3, #0
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 8087 	beq.w	80037dc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d2:	f003 031f 	and.w	r3, r3, #31
 80036d6:	2220      	movs	r2, #32
 80036d8:	409a      	lsls	r2, r3
 80036da:	6a3b      	ldr	r3, [r7, #32]
 80036dc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	d139      	bne.n	800375e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 0216 	bic.w	r2, r2, #22
 80036f8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	695a      	ldr	r2, [r3, #20]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003708:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	2b00      	cmp	r3, #0
 8003710:	d103      	bne.n	800371a <HAL_DMA_IRQHandler+0x736>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003716:	2b00      	cmp	r3, #0
 8003718:	d007      	beq.n	800372a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 0208 	bic.w	r2, r2, #8
 8003728:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372e:	f003 031f 	and.w	r3, r3, #31
 8003732:	223f      	movs	r2, #63	; 0x3f
 8003734:	409a      	lsls	r2, r3
 8003736:	6a3b      	ldr	r3, [r7, #32]
 8003738:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800374e:	2b00      	cmp	r3, #0
 8003750:	f000 834a 	beq.w	8003de8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	4798      	blx	r3
          }
          return;
 800375c:	e344      	b.n	8003de8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d018      	beq.n	800379e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d108      	bne.n	800378c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377e:	2b00      	cmp	r3, #0
 8003780:	d02c      	beq.n	80037dc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	4798      	blx	r3
 800378a:	e027      	b.n	80037dc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003790:	2b00      	cmp	r3, #0
 8003792:	d023      	beq.n	80037dc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	4798      	blx	r3
 800379c:	e01e      	b.n	80037dc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10f      	bne.n	80037cc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0210 	bic.w	r2, r2, #16
 80037ba:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d003      	beq.n	80037dc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 8306 	beq.w	8003df2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f000 8088 	beq.w	8003904 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2204      	movs	r2, #4
 80037f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a7a      	ldr	r2, [pc, #488]	; (80039ec <HAL_DMA_IRQHandler+0xa08>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d04a      	beq.n	800389c <HAL_DMA_IRQHandler+0x8b8>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a79      	ldr	r2, [pc, #484]	; (80039f0 <HAL_DMA_IRQHandler+0xa0c>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d045      	beq.n	800389c <HAL_DMA_IRQHandler+0x8b8>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a77      	ldr	r2, [pc, #476]	; (80039f4 <HAL_DMA_IRQHandler+0xa10>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d040      	beq.n	800389c <HAL_DMA_IRQHandler+0x8b8>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a76      	ldr	r2, [pc, #472]	; (80039f8 <HAL_DMA_IRQHandler+0xa14>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d03b      	beq.n	800389c <HAL_DMA_IRQHandler+0x8b8>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a74      	ldr	r2, [pc, #464]	; (80039fc <HAL_DMA_IRQHandler+0xa18>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d036      	beq.n	800389c <HAL_DMA_IRQHandler+0x8b8>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a73      	ldr	r2, [pc, #460]	; (8003a00 <HAL_DMA_IRQHandler+0xa1c>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d031      	beq.n	800389c <HAL_DMA_IRQHandler+0x8b8>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a71      	ldr	r2, [pc, #452]	; (8003a04 <HAL_DMA_IRQHandler+0xa20>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d02c      	beq.n	800389c <HAL_DMA_IRQHandler+0x8b8>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a70      	ldr	r2, [pc, #448]	; (8003a08 <HAL_DMA_IRQHandler+0xa24>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d027      	beq.n	800389c <HAL_DMA_IRQHandler+0x8b8>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a6e      	ldr	r2, [pc, #440]	; (8003a0c <HAL_DMA_IRQHandler+0xa28>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d022      	beq.n	800389c <HAL_DMA_IRQHandler+0x8b8>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a6d      	ldr	r2, [pc, #436]	; (8003a10 <HAL_DMA_IRQHandler+0xa2c>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d01d      	beq.n	800389c <HAL_DMA_IRQHandler+0x8b8>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a6b      	ldr	r2, [pc, #428]	; (8003a14 <HAL_DMA_IRQHandler+0xa30>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d018      	beq.n	800389c <HAL_DMA_IRQHandler+0x8b8>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a6a      	ldr	r2, [pc, #424]	; (8003a18 <HAL_DMA_IRQHandler+0xa34>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d013      	beq.n	800389c <HAL_DMA_IRQHandler+0x8b8>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a68      	ldr	r2, [pc, #416]	; (8003a1c <HAL_DMA_IRQHandler+0xa38>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d00e      	beq.n	800389c <HAL_DMA_IRQHandler+0x8b8>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a67      	ldr	r2, [pc, #412]	; (8003a20 <HAL_DMA_IRQHandler+0xa3c>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d009      	beq.n	800389c <HAL_DMA_IRQHandler+0x8b8>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a65      	ldr	r2, [pc, #404]	; (8003a24 <HAL_DMA_IRQHandler+0xa40>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d004      	beq.n	800389c <HAL_DMA_IRQHandler+0x8b8>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a64      	ldr	r2, [pc, #400]	; (8003a28 <HAL_DMA_IRQHandler+0xa44>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d108      	bne.n	80038ae <HAL_DMA_IRQHandler+0x8ca>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 0201 	bic.w	r2, r2, #1
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	e007      	b.n	80038be <HAL_DMA_IRQHandler+0x8da>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0201 	bic.w	r2, r2, #1
 80038bc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	3301      	adds	r3, #1
 80038c2:	60fb      	str	r3, [r7, #12]
 80038c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d307      	bcc.n	80038da <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1f2      	bne.n	80038be <HAL_DMA_IRQHandler+0x8da>
 80038d8:	e000      	b.n	80038dc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80038da:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d004      	beq.n	80038f4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2203      	movs	r2, #3
 80038ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80038f2:	e003      	b.n	80038fc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 8272 	beq.w	8003df2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	4798      	blx	r3
 8003916:	e26c      	b.n	8003df2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a43      	ldr	r2, [pc, #268]	; (8003a2c <HAL_DMA_IRQHandler+0xa48>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d022      	beq.n	8003968 <HAL_DMA_IRQHandler+0x984>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a42      	ldr	r2, [pc, #264]	; (8003a30 <HAL_DMA_IRQHandler+0xa4c>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d01d      	beq.n	8003968 <HAL_DMA_IRQHandler+0x984>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a40      	ldr	r2, [pc, #256]	; (8003a34 <HAL_DMA_IRQHandler+0xa50>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d018      	beq.n	8003968 <HAL_DMA_IRQHandler+0x984>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a3f      	ldr	r2, [pc, #252]	; (8003a38 <HAL_DMA_IRQHandler+0xa54>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d013      	beq.n	8003968 <HAL_DMA_IRQHandler+0x984>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a3d      	ldr	r2, [pc, #244]	; (8003a3c <HAL_DMA_IRQHandler+0xa58>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d00e      	beq.n	8003968 <HAL_DMA_IRQHandler+0x984>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a3c      	ldr	r2, [pc, #240]	; (8003a40 <HAL_DMA_IRQHandler+0xa5c>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d009      	beq.n	8003968 <HAL_DMA_IRQHandler+0x984>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a3a      	ldr	r2, [pc, #232]	; (8003a44 <HAL_DMA_IRQHandler+0xa60>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d004      	beq.n	8003968 <HAL_DMA_IRQHandler+0x984>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a39      	ldr	r2, [pc, #228]	; (8003a48 <HAL_DMA_IRQHandler+0xa64>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d101      	bne.n	800396c <HAL_DMA_IRQHandler+0x988>
 8003968:	2301      	movs	r3, #1
 800396a:	e000      	b.n	800396e <HAL_DMA_IRQHandler+0x98a>
 800396c:	2300      	movs	r3, #0
 800396e:	2b00      	cmp	r3, #0
 8003970:	f000 823f 	beq.w	8003df2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003980:	f003 031f 	and.w	r3, r3, #31
 8003984:	2204      	movs	r2, #4
 8003986:	409a      	lsls	r2, r3
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	4013      	ands	r3, r2
 800398c:	2b00      	cmp	r3, #0
 800398e:	f000 80cd 	beq.w	8003b2c <HAL_DMA_IRQHandler+0xb48>
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 80c7 	beq.w	8003b2c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a2:	f003 031f 	and.w	r3, r3, #31
 80039a6:	2204      	movs	r2, #4
 80039a8:	409a      	lsls	r2, r3
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d049      	beq.n	8003a4c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d109      	bne.n	80039d6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f000 8210 	beq.w	8003dec <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039d4:	e20a      	b.n	8003dec <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f000 8206 	beq.w	8003dec <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039e8:	e200      	b.n	8003dec <HAL_DMA_IRQHandler+0xe08>
 80039ea:	bf00      	nop
 80039ec:	40020010 	.word	0x40020010
 80039f0:	40020028 	.word	0x40020028
 80039f4:	40020040 	.word	0x40020040
 80039f8:	40020058 	.word	0x40020058
 80039fc:	40020070 	.word	0x40020070
 8003a00:	40020088 	.word	0x40020088
 8003a04:	400200a0 	.word	0x400200a0
 8003a08:	400200b8 	.word	0x400200b8
 8003a0c:	40020410 	.word	0x40020410
 8003a10:	40020428 	.word	0x40020428
 8003a14:	40020440 	.word	0x40020440
 8003a18:	40020458 	.word	0x40020458
 8003a1c:	40020470 	.word	0x40020470
 8003a20:	40020488 	.word	0x40020488
 8003a24:	400204a0 	.word	0x400204a0
 8003a28:	400204b8 	.word	0x400204b8
 8003a2c:	58025408 	.word	0x58025408
 8003a30:	5802541c 	.word	0x5802541c
 8003a34:	58025430 	.word	0x58025430
 8003a38:	58025444 	.word	0x58025444
 8003a3c:	58025458 	.word	0x58025458
 8003a40:	5802546c 	.word	0x5802546c
 8003a44:	58025480 	.word	0x58025480
 8003a48:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	f003 0320 	and.w	r3, r3, #32
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d160      	bne.n	8003b18 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a7f      	ldr	r2, [pc, #508]	; (8003c58 <HAL_DMA_IRQHandler+0xc74>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d04a      	beq.n	8003af6 <HAL_DMA_IRQHandler+0xb12>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a7d      	ldr	r2, [pc, #500]	; (8003c5c <HAL_DMA_IRQHandler+0xc78>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d045      	beq.n	8003af6 <HAL_DMA_IRQHandler+0xb12>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a7c      	ldr	r2, [pc, #496]	; (8003c60 <HAL_DMA_IRQHandler+0xc7c>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d040      	beq.n	8003af6 <HAL_DMA_IRQHandler+0xb12>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a7a      	ldr	r2, [pc, #488]	; (8003c64 <HAL_DMA_IRQHandler+0xc80>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d03b      	beq.n	8003af6 <HAL_DMA_IRQHandler+0xb12>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a79      	ldr	r2, [pc, #484]	; (8003c68 <HAL_DMA_IRQHandler+0xc84>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d036      	beq.n	8003af6 <HAL_DMA_IRQHandler+0xb12>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a77      	ldr	r2, [pc, #476]	; (8003c6c <HAL_DMA_IRQHandler+0xc88>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d031      	beq.n	8003af6 <HAL_DMA_IRQHandler+0xb12>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a76      	ldr	r2, [pc, #472]	; (8003c70 <HAL_DMA_IRQHandler+0xc8c>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d02c      	beq.n	8003af6 <HAL_DMA_IRQHandler+0xb12>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a74      	ldr	r2, [pc, #464]	; (8003c74 <HAL_DMA_IRQHandler+0xc90>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d027      	beq.n	8003af6 <HAL_DMA_IRQHandler+0xb12>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a73      	ldr	r2, [pc, #460]	; (8003c78 <HAL_DMA_IRQHandler+0xc94>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d022      	beq.n	8003af6 <HAL_DMA_IRQHandler+0xb12>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a71      	ldr	r2, [pc, #452]	; (8003c7c <HAL_DMA_IRQHandler+0xc98>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d01d      	beq.n	8003af6 <HAL_DMA_IRQHandler+0xb12>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a70      	ldr	r2, [pc, #448]	; (8003c80 <HAL_DMA_IRQHandler+0xc9c>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d018      	beq.n	8003af6 <HAL_DMA_IRQHandler+0xb12>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a6e      	ldr	r2, [pc, #440]	; (8003c84 <HAL_DMA_IRQHandler+0xca0>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d013      	beq.n	8003af6 <HAL_DMA_IRQHandler+0xb12>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a6d      	ldr	r2, [pc, #436]	; (8003c88 <HAL_DMA_IRQHandler+0xca4>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d00e      	beq.n	8003af6 <HAL_DMA_IRQHandler+0xb12>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a6b      	ldr	r2, [pc, #428]	; (8003c8c <HAL_DMA_IRQHandler+0xca8>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d009      	beq.n	8003af6 <HAL_DMA_IRQHandler+0xb12>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a6a      	ldr	r2, [pc, #424]	; (8003c90 <HAL_DMA_IRQHandler+0xcac>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d004      	beq.n	8003af6 <HAL_DMA_IRQHandler+0xb12>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a68      	ldr	r2, [pc, #416]	; (8003c94 <HAL_DMA_IRQHandler+0xcb0>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d108      	bne.n	8003b08 <HAL_DMA_IRQHandler+0xb24>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 0208 	bic.w	r2, r2, #8
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	e007      	b.n	8003b18 <HAL_DMA_IRQHandler+0xb34>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 0204 	bic.w	r2, r2, #4
 8003b16:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 8165 	beq.w	8003dec <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b2a:	e15f      	b.n	8003dec <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b30:	f003 031f 	and.w	r3, r3, #31
 8003b34:	2202      	movs	r2, #2
 8003b36:	409a      	lsls	r2, r3
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 80c5 	beq.w	8003ccc <HAL_DMA_IRQHandler+0xce8>
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 80bf 	beq.w	8003ccc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b52:	f003 031f 	and.w	r3, r3, #31
 8003b56:	2202      	movs	r2, #2
 8003b58:	409a      	lsls	r2, r3
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d018      	beq.n	8003b9a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d109      	bne.n	8003b86 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f000 813a 	beq.w	8003df0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b84:	e134      	b.n	8003df0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 8130 	beq.w	8003df0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b98:	e12a      	b.n	8003df0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	f003 0320 	and.w	r3, r3, #32
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f040 8089 	bne.w	8003cb8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a2b      	ldr	r2, [pc, #172]	; (8003c58 <HAL_DMA_IRQHandler+0xc74>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d04a      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xc62>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a29      	ldr	r2, [pc, #164]	; (8003c5c <HAL_DMA_IRQHandler+0xc78>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d045      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xc62>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a28      	ldr	r2, [pc, #160]	; (8003c60 <HAL_DMA_IRQHandler+0xc7c>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d040      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xc62>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a26      	ldr	r2, [pc, #152]	; (8003c64 <HAL_DMA_IRQHandler+0xc80>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d03b      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xc62>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a25      	ldr	r2, [pc, #148]	; (8003c68 <HAL_DMA_IRQHandler+0xc84>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d036      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xc62>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a23      	ldr	r2, [pc, #140]	; (8003c6c <HAL_DMA_IRQHandler+0xc88>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d031      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xc62>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a22      	ldr	r2, [pc, #136]	; (8003c70 <HAL_DMA_IRQHandler+0xc8c>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d02c      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xc62>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a20      	ldr	r2, [pc, #128]	; (8003c74 <HAL_DMA_IRQHandler+0xc90>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d027      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xc62>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a1f      	ldr	r2, [pc, #124]	; (8003c78 <HAL_DMA_IRQHandler+0xc94>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d022      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xc62>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a1d      	ldr	r2, [pc, #116]	; (8003c7c <HAL_DMA_IRQHandler+0xc98>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d01d      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xc62>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a1c      	ldr	r2, [pc, #112]	; (8003c80 <HAL_DMA_IRQHandler+0xc9c>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d018      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xc62>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a1a      	ldr	r2, [pc, #104]	; (8003c84 <HAL_DMA_IRQHandler+0xca0>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d013      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xc62>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a19      	ldr	r2, [pc, #100]	; (8003c88 <HAL_DMA_IRQHandler+0xca4>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d00e      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xc62>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a17      	ldr	r2, [pc, #92]	; (8003c8c <HAL_DMA_IRQHandler+0xca8>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d009      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xc62>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a16      	ldr	r2, [pc, #88]	; (8003c90 <HAL_DMA_IRQHandler+0xcac>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d004      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xc62>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a14      	ldr	r2, [pc, #80]	; (8003c94 <HAL_DMA_IRQHandler+0xcb0>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d128      	bne.n	8003c98 <HAL_DMA_IRQHandler+0xcb4>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 0214 	bic.w	r2, r2, #20
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	e027      	b.n	8003ca8 <HAL_DMA_IRQHandler+0xcc4>
 8003c58:	40020010 	.word	0x40020010
 8003c5c:	40020028 	.word	0x40020028
 8003c60:	40020040 	.word	0x40020040
 8003c64:	40020058 	.word	0x40020058
 8003c68:	40020070 	.word	0x40020070
 8003c6c:	40020088 	.word	0x40020088
 8003c70:	400200a0 	.word	0x400200a0
 8003c74:	400200b8 	.word	0x400200b8
 8003c78:	40020410 	.word	0x40020410
 8003c7c:	40020428 	.word	0x40020428
 8003c80:	40020440 	.word	0x40020440
 8003c84:	40020458 	.word	0x40020458
 8003c88:	40020470 	.word	0x40020470
 8003c8c:	40020488 	.word	0x40020488
 8003c90:	400204a0 	.word	0x400204a0
 8003c94:	400204b8 	.word	0x400204b8
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 020a 	bic.w	r2, r2, #10
 8003ca6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 8097 	beq.w	8003df0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cca:	e091      	b.n	8003df0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd0:	f003 031f 	and.w	r3, r3, #31
 8003cd4:	2208      	movs	r2, #8
 8003cd6:	409a      	lsls	r2, r3
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 8088 	beq.w	8003df2 <HAL_DMA_IRQHandler+0xe0e>
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	f003 0308 	and.w	r3, r3, #8
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 8082 	beq.w	8003df2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a41      	ldr	r2, [pc, #260]	; (8003df8 <HAL_DMA_IRQHandler+0xe14>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d04a      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xdaa>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a3f      	ldr	r2, [pc, #252]	; (8003dfc <HAL_DMA_IRQHandler+0xe18>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d045      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xdaa>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a3e      	ldr	r2, [pc, #248]	; (8003e00 <HAL_DMA_IRQHandler+0xe1c>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d040      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xdaa>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a3c      	ldr	r2, [pc, #240]	; (8003e04 <HAL_DMA_IRQHandler+0xe20>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d03b      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xdaa>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a3b      	ldr	r2, [pc, #236]	; (8003e08 <HAL_DMA_IRQHandler+0xe24>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d036      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xdaa>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a39      	ldr	r2, [pc, #228]	; (8003e0c <HAL_DMA_IRQHandler+0xe28>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d031      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xdaa>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a38      	ldr	r2, [pc, #224]	; (8003e10 <HAL_DMA_IRQHandler+0xe2c>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d02c      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xdaa>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a36      	ldr	r2, [pc, #216]	; (8003e14 <HAL_DMA_IRQHandler+0xe30>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d027      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xdaa>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a35      	ldr	r2, [pc, #212]	; (8003e18 <HAL_DMA_IRQHandler+0xe34>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d022      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xdaa>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a33      	ldr	r2, [pc, #204]	; (8003e1c <HAL_DMA_IRQHandler+0xe38>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d01d      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xdaa>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a32      	ldr	r2, [pc, #200]	; (8003e20 <HAL_DMA_IRQHandler+0xe3c>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d018      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xdaa>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a30      	ldr	r2, [pc, #192]	; (8003e24 <HAL_DMA_IRQHandler+0xe40>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d013      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xdaa>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a2f      	ldr	r2, [pc, #188]	; (8003e28 <HAL_DMA_IRQHandler+0xe44>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d00e      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xdaa>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a2d      	ldr	r2, [pc, #180]	; (8003e2c <HAL_DMA_IRQHandler+0xe48>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d009      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xdaa>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a2c      	ldr	r2, [pc, #176]	; (8003e30 <HAL_DMA_IRQHandler+0xe4c>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d004      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xdaa>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a2a      	ldr	r2, [pc, #168]	; (8003e34 <HAL_DMA_IRQHandler+0xe50>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d108      	bne.n	8003da0 <HAL_DMA_IRQHandler+0xdbc>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 021c 	bic.w	r2, r2, #28
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	e007      	b.n	8003db0 <HAL_DMA_IRQHandler+0xdcc>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 020e 	bic.w	r2, r2, #14
 8003dae:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db4:	f003 031f 	and.w	r3, r3, #31
 8003db8:	2201      	movs	r2, #1
 8003dba:	409a      	lsls	r2, r3
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d009      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	4798      	blx	r3
 8003de6:	e004      	b.n	8003df2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003de8:	bf00      	nop
 8003dea:	e002      	b.n	8003df2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003dec:	bf00      	nop
 8003dee:	e000      	b.n	8003df2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003df0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003df2:	3728      	adds	r7, #40	; 0x28
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	40020010 	.word	0x40020010
 8003dfc:	40020028 	.word	0x40020028
 8003e00:	40020040 	.word	0x40020040
 8003e04:	40020058 	.word	0x40020058
 8003e08:	40020070 	.word	0x40020070
 8003e0c:	40020088 	.word	0x40020088
 8003e10:	400200a0 	.word	0x400200a0
 8003e14:	400200b8 	.word	0x400200b8
 8003e18:	40020410 	.word	0x40020410
 8003e1c:	40020428 	.word	0x40020428
 8003e20:	40020440 	.word	0x40020440
 8003e24:	40020458 	.word	0x40020458
 8003e28:	40020470 	.word	0x40020470
 8003e2c:	40020488 	.word	0x40020488
 8003e30:	400204a0 	.word	0x400204a0
 8003e34:	400204b8 	.word	0x400204b8

08003e38 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b087      	sub	sp, #28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
 8003e44:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e4a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e50:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a7f      	ldr	r2, [pc, #508]	; (8004054 <DMA_SetConfig+0x21c>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d072      	beq.n	8003f42 <DMA_SetConfig+0x10a>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a7d      	ldr	r2, [pc, #500]	; (8004058 <DMA_SetConfig+0x220>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d06d      	beq.n	8003f42 <DMA_SetConfig+0x10a>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a7c      	ldr	r2, [pc, #496]	; (800405c <DMA_SetConfig+0x224>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d068      	beq.n	8003f42 <DMA_SetConfig+0x10a>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a7a      	ldr	r2, [pc, #488]	; (8004060 <DMA_SetConfig+0x228>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d063      	beq.n	8003f42 <DMA_SetConfig+0x10a>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a79      	ldr	r2, [pc, #484]	; (8004064 <DMA_SetConfig+0x22c>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d05e      	beq.n	8003f42 <DMA_SetConfig+0x10a>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a77      	ldr	r2, [pc, #476]	; (8004068 <DMA_SetConfig+0x230>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d059      	beq.n	8003f42 <DMA_SetConfig+0x10a>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a76      	ldr	r2, [pc, #472]	; (800406c <DMA_SetConfig+0x234>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d054      	beq.n	8003f42 <DMA_SetConfig+0x10a>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a74      	ldr	r2, [pc, #464]	; (8004070 <DMA_SetConfig+0x238>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d04f      	beq.n	8003f42 <DMA_SetConfig+0x10a>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a73      	ldr	r2, [pc, #460]	; (8004074 <DMA_SetConfig+0x23c>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d04a      	beq.n	8003f42 <DMA_SetConfig+0x10a>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a71      	ldr	r2, [pc, #452]	; (8004078 <DMA_SetConfig+0x240>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d045      	beq.n	8003f42 <DMA_SetConfig+0x10a>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a70      	ldr	r2, [pc, #448]	; (800407c <DMA_SetConfig+0x244>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d040      	beq.n	8003f42 <DMA_SetConfig+0x10a>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a6e      	ldr	r2, [pc, #440]	; (8004080 <DMA_SetConfig+0x248>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d03b      	beq.n	8003f42 <DMA_SetConfig+0x10a>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a6d      	ldr	r2, [pc, #436]	; (8004084 <DMA_SetConfig+0x24c>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d036      	beq.n	8003f42 <DMA_SetConfig+0x10a>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a6b      	ldr	r2, [pc, #428]	; (8004088 <DMA_SetConfig+0x250>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d031      	beq.n	8003f42 <DMA_SetConfig+0x10a>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a6a      	ldr	r2, [pc, #424]	; (800408c <DMA_SetConfig+0x254>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d02c      	beq.n	8003f42 <DMA_SetConfig+0x10a>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a68      	ldr	r2, [pc, #416]	; (8004090 <DMA_SetConfig+0x258>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d027      	beq.n	8003f42 <DMA_SetConfig+0x10a>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a67      	ldr	r2, [pc, #412]	; (8004094 <DMA_SetConfig+0x25c>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d022      	beq.n	8003f42 <DMA_SetConfig+0x10a>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a65      	ldr	r2, [pc, #404]	; (8004098 <DMA_SetConfig+0x260>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d01d      	beq.n	8003f42 <DMA_SetConfig+0x10a>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a64      	ldr	r2, [pc, #400]	; (800409c <DMA_SetConfig+0x264>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d018      	beq.n	8003f42 <DMA_SetConfig+0x10a>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a62      	ldr	r2, [pc, #392]	; (80040a0 <DMA_SetConfig+0x268>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d013      	beq.n	8003f42 <DMA_SetConfig+0x10a>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a61      	ldr	r2, [pc, #388]	; (80040a4 <DMA_SetConfig+0x26c>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d00e      	beq.n	8003f42 <DMA_SetConfig+0x10a>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a5f      	ldr	r2, [pc, #380]	; (80040a8 <DMA_SetConfig+0x270>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d009      	beq.n	8003f42 <DMA_SetConfig+0x10a>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a5e      	ldr	r2, [pc, #376]	; (80040ac <DMA_SetConfig+0x274>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d004      	beq.n	8003f42 <DMA_SetConfig+0x10a>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a5c      	ldr	r2, [pc, #368]	; (80040b0 <DMA_SetConfig+0x278>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d101      	bne.n	8003f46 <DMA_SetConfig+0x10e>
 8003f42:	2301      	movs	r3, #1
 8003f44:	e000      	b.n	8003f48 <DMA_SetConfig+0x110>
 8003f46:	2300      	movs	r3, #0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00d      	beq.n	8003f68 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003f54:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d004      	beq.n	8003f68 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003f66:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a39      	ldr	r2, [pc, #228]	; (8004054 <DMA_SetConfig+0x21c>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d04a      	beq.n	8004008 <DMA_SetConfig+0x1d0>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a38      	ldr	r2, [pc, #224]	; (8004058 <DMA_SetConfig+0x220>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d045      	beq.n	8004008 <DMA_SetConfig+0x1d0>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a36      	ldr	r2, [pc, #216]	; (800405c <DMA_SetConfig+0x224>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d040      	beq.n	8004008 <DMA_SetConfig+0x1d0>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a35      	ldr	r2, [pc, #212]	; (8004060 <DMA_SetConfig+0x228>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d03b      	beq.n	8004008 <DMA_SetConfig+0x1d0>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a33      	ldr	r2, [pc, #204]	; (8004064 <DMA_SetConfig+0x22c>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d036      	beq.n	8004008 <DMA_SetConfig+0x1d0>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a32      	ldr	r2, [pc, #200]	; (8004068 <DMA_SetConfig+0x230>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d031      	beq.n	8004008 <DMA_SetConfig+0x1d0>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a30      	ldr	r2, [pc, #192]	; (800406c <DMA_SetConfig+0x234>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d02c      	beq.n	8004008 <DMA_SetConfig+0x1d0>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a2f      	ldr	r2, [pc, #188]	; (8004070 <DMA_SetConfig+0x238>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d027      	beq.n	8004008 <DMA_SetConfig+0x1d0>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a2d      	ldr	r2, [pc, #180]	; (8004074 <DMA_SetConfig+0x23c>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d022      	beq.n	8004008 <DMA_SetConfig+0x1d0>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a2c      	ldr	r2, [pc, #176]	; (8004078 <DMA_SetConfig+0x240>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d01d      	beq.n	8004008 <DMA_SetConfig+0x1d0>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a2a      	ldr	r2, [pc, #168]	; (800407c <DMA_SetConfig+0x244>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d018      	beq.n	8004008 <DMA_SetConfig+0x1d0>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a29      	ldr	r2, [pc, #164]	; (8004080 <DMA_SetConfig+0x248>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d013      	beq.n	8004008 <DMA_SetConfig+0x1d0>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a27      	ldr	r2, [pc, #156]	; (8004084 <DMA_SetConfig+0x24c>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d00e      	beq.n	8004008 <DMA_SetConfig+0x1d0>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a26      	ldr	r2, [pc, #152]	; (8004088 <DMA_SetConfig+0x250>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d009      	beq.n	8004008 <DMA_SetConfig+0x1d0>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a24      	ldr	r2, [pc, #144]	; (800408c <DMA_SetConfig+0x254>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d004      	beq.n	8004008 <DMA_SetConfig+0x1d0>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a23      	ldr	r2, [pc, #140]	; (8004090 <DMA_SetConfig+0x258>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d101      	bne.n	800400c <DMA_SetConfig+0x1d4>
 8004008:	2301      	movs	r3, #1
 800400a:	e000      	b.n	800400e <DMA_SetConfig+0x1d6>
 800400c:	2300      	movs	r3, #0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d059      	beq.n	80040c6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004016:	f003 031f 	and.w	r3, r3, #31
 800401a:	223f      	movs	r2, #63	; 0x3f
 800401c:	409a      	lsls	r2, r3
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004030:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	2b40      	cmp	r3, #64	; 0x40
 8004040:	d138      	bne.n	80040b4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68ba      	ldr	r2, [r7, #8]
 8004050:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004052:	e086      	b.n	8004162 <DMA_SetConfig+0x32a>
 8004054:	40020010 	.word	0x40020010
 8004058:	40020028 	.word	0x40020028
 800405c:	40020040 	.word	0x40020040
 8004060:	40020058 	.word	0x40020058
 8004064:	40020070 	.word	0x40020070
 8004068:	40020088 	.word	0x40020088
 800406c:	400200a0 	.word	0x400200a0
 8004070:	400200b8 	.word	0x400200b8
 8004074:	40020410 	.word	0x40020410
 8004078:	40020428 	.word	0x40020428
 800407c:	40020440 	.word	0x40020440
 8004080:	40020458 	.word	0x40020458
 8004084:	40020470 	.word	0x40020470
 8004088:	40020488 	.word	0x40020488
 800408c:	400204a0 	.word	0x400204a0
 8004090:	400204b8 	.word	0x400204b8
 8004094:	58025408 	.word	0x58025408
 8004098:	5802541c 	.word	0x5802541c
 800409c:	58025430 	.word	0x58025430
 80040a0:	58025444 	.word	0x58025444
 80040a4:	58025458 	.word	0x58025458
 80040a8:	5802546c 	.word	0x5802546c
 80040ac:	58025480 	.word	0x58025480
 80040b0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	60da      	str	r2, [r3, #12]
}
 80040c4:	e04d      	b.n	8004162 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a29      	ldr	r2, [pc, #164]	; (8004170 <DMA_SetConfig+0x338>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d022      	beq.n	8004116 <DMA_SetConfig+0x2de>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a27      	ldr	r2, [pc, #156]	; (8004174 <DMA_SetConfig+0x33c>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d01d      	beq.n	8004116 <DMA_SetConfig+0x2de>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a26      	ldr	r2, [pc, #152]	; (8004178 <DMA_SetConfig+0x340>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d018      	beq.n	8004116 <DMA_SetConfig+0x2de>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a24      	ldr	r2, [pc, #144]	; (800417c <DMA_SetConfig+0x344>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d013      	beq.n	8004116 <DMA_SetConfig+0x2de>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a23      	ldr	r2, [pc, #140]	; (8004180 <DMA_SetConfig+0x348>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d00e      	beq.n	8004116 <DMA_SetConfig+0x2de>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a21      	ldr	r2, [pc, #132]	; (8004184 <DMA_SetConfig+0x34c>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d009      	beq.n	8004116 <DMA_SetConfig+0x2de>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a20      	ldr	r2, [pc, #128]	; (8004188 <DMA_SetConfig+0x350>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d004      	beq.n	8004116 <DMA_SetConfig+0x2de>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a1e      	ldr	r2, [pc, #120]	; (800418c <DMA_SetConfig+0x354>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d101      	bne.n	800411a <DMA_SetConfig+0x2e2>
 8004116:	2301      	movs	r3, #1
 8004118:	e000      	b.n	800411c <DMA_SetConfig+0x2e4>
 800411a:	2300      	movs	r3, #0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d020      	beq.n	8004162 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004124:	f003 031f 	and.w	r3, r3, #31
 8004128:	2201      	movs	r2, #1
 800412a:	409a      	lsls	r2, r3
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	2b40      	cmp	r3, #64	; 0x40
 800413e:	d108      	bne.n	8004152 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68ba      	ldr	r2, [r7, #8]
 800414e:	60da      	str	r2, [r3, #12]
}
 8004150:	e007      	b.n	8004162 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	60da      	str	r2, [r3, #12]
}
 8004162:	bf00      	nop
 8004164:	371c      	adds	r7, #28
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	58025408 	.word	0x58025408
 8004174:	5802541c 	.word	0x5802541c
 8004178:	58025430 	.word	0x58025430
 800417c:	58025444 	.word	0x58025444
 8004180:	58025458 	.word	0x58025458
 8004184:	5802546c 	.word	0x5802546c
 8004188:	58025480 	.word	0x58025480
 800418c:	58025494 	.word	0x58025494

08004190 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a42      	ldr	r2, [pc, #264]	; (80042a8 <DMA_CalcBaseAndBitshift+0x118>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d04a      	beq.n	8004238 <DMA_CalcBaseAndBitshift+0xa8>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a41      	ldr	r2, [pc, #260]	; (80042ac <DMA_CalcBaseAndBitshift+0x11c>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d045      	beq.n	8004238 <DMA_CalcBaseAndBitshift+0xa8>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a3f      	ldr	r2, [pc, #252]	; (80042b0 <DMA_CalcBaseAndBitshift+0x120>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d040      	beq.n	8004238 <DMA_CalcBaseAndBitshift+0xa8>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a3e      	ldr	r2, [pc, #248]	; (80042b4 <DMA_CalcBaseAndBitshift+0x124>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d03b      	beq.n	8004238 <DMA_CalcBaseAndBitshift+0xa8>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a3c      	ldr	r2, [pc, #240]	; (80042b8 <DMA_CalcBaseAndBitshift+0x128>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d036      	beq.n	8004238 <DMA_CalcBaseAndBitshift+0xa8>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a3b      	ldr	r2, [pc, #236]	; (80042bc <DMA_CalcBaseAndBitshift+0x12c>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d031      	beq.n	8004238 <DMA_CalcBaseAndBitshift+0xa8>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a39      	ldr	r2, [pc, #228]	; (80042c0 <DMA_CalcBaseAndBitshift+0x130>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d02c      	beq.n	8004238 <DMA_CalcBaseAndBitshift+0xa8>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a38      	ldr	r2, [pc, #224]	; (80042c4 <DMA_CalcBaseAndBitshift+0x134>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d027      	beq.n	8004238 <DMA_CalcBaseAndBitshift+0xa8>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a36      	ldr	r2, [pc, #216]	; (80042c8 <DMA_CalcBaseAndBitshift+0x138>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d022      	beq.n	8004238 <DMA_CalcBaseAndBitshift+0xa8>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a35      	ldr	r2, [pc, #212]	; (80042cc <DMA_CalcBaseAndBitshift+0x13c>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d01d      	beq.n	8004238 <DMA_CalcBaseAndBitshift+0xa8>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a33      	ldr	r2, [pc, #204]	; (80042d0 <DMA_CalcBaseAndBitshift+0x140>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d018      	beq.n	8004238 <DMA_CalcBaseAndBitshift+0xa8>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a32      	ldr	r2, [pc, #200]	; (80042d4 <DMA_CalcBaseAndBitshift+0x144>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d013      	beq.n	8004238 <DMA_CalcBaseAndBitshift+0xa8>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a30      	ldr	r2, [pc, #192]	; (80042d8 <DMA_CalcBaseAndBitshift+0x148>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d00e      	beq.n	8004238 <DMA_CalcBaseAndBitshift+0xa8>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a2f      	ldr	r2, [pc, #188]	; (80042dc <DMA_CalcBaseAndBitshift+0x14c>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d009      	beq.n	8004238 <DMA_CalcBaseAndBitshift+0xa8>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a2d      	ldr	r2, [pc, #180]	; (80042e0 <DMA_CalcBaseAndBitshift+0x150>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d004      	beq.n	8004238 <DMA_CalcBaseAndBitshift+0xa8>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a2c      	ldr	r2, [pc, #176]	; (80042e4 <DMA_CalcBaseAndBitshift+0x154>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d101      	bne.n	800423c <DMA_CalcBaseAndBitshift+0xac>
 8004238:	2301      	movs	r3, #1
 800423a:	e000      	b.n	800423e <DMA_CalcBaseAndBitshift+0xae>
 800423c:	2300      	movs	r3, #0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d024      	beq.n	800428c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	b2db      	uxtb	r3, r3
 8004248:	3b10      	subs	r3, #16
 800424a:	4a27      	ldr	r2, [pc, #156]	; (80042e8 <DMA_CalcBaseAndBitshift+0x158>)
 800424c:	fba2 2303 	umull	r2, r3, r2, r3
 8004250:	091b      	lsrs	r3, r3, #4
 8004252:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f003 0307 	and.w	r3, r3, #7
 800425a:	4a24      	ldr	r2, [pc, #144]	; (80042ec <DMA_CalcBaseAndBitshift+0x15c>)
 800425c:	5cd3      	ldrb	r3, [r2, r3]
 800425e:	461a      	mov	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2b03      	cmp	r3, #3
 8004268:	d908      	bls.n	800427c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	461a      	mov	r2, r3
 8004270:	4b1f      	ldr	r3, [pc, #124]	; (80042f0 <DMA_CalcBaseAndBitshift+0x160>)
 8004272:	4013      	ands	r3, r2
 8004274:	1d1a      	adds	r2, r3, #4
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	659a      	str	r2, [r3, #88]	; 0x58
 800427a:	e00d      	b.n	8004298 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	461a      	mov	r2, r3
 8004282:	4b1b      	ldr	r3, [pc, #108]	; (80042f0 <DMA_CalcBaseAndBitshift+0x160>)
 8004284:	4013      	ands	r3, r2
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	6593      	str	r3, [r2, #88]	; 0x58
 800428a:	e005      	b.n	8004298 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800429c:	4618      	mov	r0, r3
 800429e:	3714      	adds	r7, #20
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr
 80042a8:	40020010 	.word	0x40020010
 80042ac:	40020028 	.word	0x40020028
 80042b0:	40020040 	.word	0x40020040
 80042b4:	40020058 	.word	0x40020058
 80042b8:	40020070 	.word	0x40020070
 80042bc:	40020088 	.word	0x40020088
 80042c0:	400200a0 	.word	0x400200a0
 80042c4:	400200b8 	.word	0x400200b8
 80042c8:	40020410 	.word	0x40020410
 80042cc:	40020428 	.word	0x40020428
 80042d0:	40020440 	.word	0x40020440
 80042d4:	40020458 	.word	0x40020458
 80042d8:	40020470 	.word	0x40020470
 80042dc:	40020488 	.word	0x40020488
 80042e0:	400204a0 	.word	0x400204a0
 80042e4:	400204b8 	.word	0x400204b8
 80042e8:	aaaaaaab 	.word	0xaaaaaaab
 80042ec:	08013ff4 	.word	0x08013ff4
 80042f0:	fffffc00 	.word	0xfffffc00

080042f4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042fc:	2300      	movs	r3, #0
 80042fe:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d120      	bne.n	800434a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430c:	2b03      	cmp	r3, #3
 800430e:	d858      	bhi.n	80043c2 <DMA_CheckFifoParam+0xce>
 8004310:	a201      	add	r2, pc, #4	; (adr r2, 8004318 <DMA_CheckFifoParam+0x24>)
 8004312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004316:	bf00      	nop
 8004318:	08004329 	.word	0x08004329
 800431c:	0800433b 	.word	0x0800433b
 8004320:	08004329 	.word	0x08004329
 8004324:	080043c3 	.word	0x080043c3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d048      	beq.n	80043c6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004338:	e045      	b.n	80043c6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004342:	d142      	bne.n	80043ca <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004348:	e03f      	b.n	80043ca <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004352:	d123      	bne.n	800439c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004358:	2b03      	cmp	r3, #3
 800435a:	d838      	bhi.n	80043ce <DMA_CheckFifoParam+0xda>
 800435c:	a201      	add	r2, pc, #4	; (adr r2, 8004364 <DMA_CheckFifoParam+0x70>)
 800435e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004362:	bf00      	nop
 8004364:	08004375 	.word	0x08004375
 8004368:	0800437b 	.word	0x0800437b
 800436c:	08004375 	.word	0x08004375
 8004370:	0800438d 	.word	0x0800438d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	73fb      	strb	r3, [r7, #15]
        break;
 8004378:	e030      	b.n	80043dc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d025      	beq.n	80043d2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800438a:	e022      	b.n	80043d2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004390:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004394:	d11f      	bne.n	80043d6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800439a:	e01c      	b.n	80043d6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d902      	bls.n	80043aa <DMA_CheckFifoParam+0xb6>
 80043a4:	2b03      	cmp	r3, #3
 80043a6:	d003      	beq.n	80043b0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80043a8:	e018      	b.n	80043dc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	73fb      	strb	r3, [r7, #15]
        break;
 80043ae:	e015      	b.n	80043dc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00e      	beq.n	80043da <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	73fb      	strb	r3, [r7, #15]
    break;
 80043c0:	e00b      	b.n	80043da <DMA_CheckFifoParam+0xe6>
        break;
 80043c2:	bf00      	nop
 80043c4:	e00a      	b.n	80043dc <DMA_CheckFifoParam+0xe8>
        break;
 80043c6:	bf00      	nop
 80043c8:	e008      	b.n	80043dc <DMA_CheckFifoParam+0xe8>
        break;
 80043ca:	bf00      	nop
 80043cc:	e006      	b.n	80043dc <DMA_CheckFifoParam+0xe8>
        break;
 80043ce:	bf00      	nop
 80043d0:	e004      	b.n	80043dc <DMA_CheckFifoParam+0xe8>
        break;
 80043d2:	bf00      	nop
 80043d4:	e002      	b.n	80043dc <DMA_CheckFifoParam+0xe8>
        break;
 80043d6:	bf00      	nop
 80043d8:	e000      	b.n	80043dc <DMA_CheckFifoParam+0xe8>
    break;
 80043da:	bf00      	nop
    }
  }

  return status;
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3714      	adds	r7, #20
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop

080043ec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a38      	ldr	r2, [pc, #224]	; (80044e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d022      	beq.n	800444a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a36      	ldr	r2, [pc, #216]	; (80044e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d01d      	beq.n	800444a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a35      	ldr	r2, [pc, #212]	; (80044e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d018      	beq.n	800444a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a33      	ldr	r2, [pc, #204]	; (80044ec <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d013      	beq.n	800444a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a32      	ldr	r2, [pc, #200]	; (80044f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d00e      	beq.n	800444a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a30      	ldr	r2, [pc, #192]	; (80044f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d009      	beq.n	800444a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a2f      	ldr	r2, [pc, #188]	; (80044f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d004      	beq.n	800444a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a2d      	ldr	r2, [pc, #180]	; (80044fc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d101      	bne.n	800444e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800444a:	2301      	movs	r3, #1
 800444c:	e000      	b.n	8004450 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800444e:	2300      	movs	r3, #0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d01a      	beq.n	800448a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	b2db      	uxtb	r3, r3
 800445a:	3b08      	subs	r3, #8
 800445c:	4a28      	ldr	r2, [pc, #160]	; (8004500 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800445e:	fba2 2303 	umull	r2, r3, r2, r3
 8004462:	091b      	lsrs	r3, r3, #4
 8004464:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	4b26      	ldr	r3, [pc, #152]	; (8004504 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800446a:	4413      	add	r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	461a      	mov	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a24      	ldr	r2, [pc, #144]	; (8004508 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004478:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f003 031f 	and.w	r3, r3, #31
 8004480:	2201      	movs	r2, #1
 8004482:	409a      	lsls	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004488:	e024      	b.n	80044d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	b2db      	uxtb	r3, r3
 8004490:	3b10      	subs	r3, #16
 8004492:	4a1e      	ldr	r2, [pc, #120]	; (800450c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004494:	fba2 2303 	umull	r2, r3, r2, r3
 8004498:	091b      	lsrs	r3, r3, #4
 800449a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	4a1c      	ldr	r2, [pc, #112]	; (8004510 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d806      	bhi.n	80044b2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	4a1b      	ldr	r2, [pc, #108]	; (8004514 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d902      	bls.n	80044b2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	3308      	adds	r3, #8
 80044b0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	4b18      	ldr	r3, [pc, #96]	; (8004518 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80044b6:	4413      	add	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	461a      	mov	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a16      	ldr	r2, [pc, #88]	; (800451c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80044c4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f003 031f 	and.w	r3, r3, #31
 80044cc:	2201      	movs	r2, #1
 80044ce:	409a      	lsls	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80044d4:	bf00      	nop
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr
 80044e0:	58025408 	.word	0x58025408
 80044e4:	5802541c 	.word	0x5802541c
 80044e8:	58025430 	.word	0x58025430
 80044ec:	58025444 	.word	0x58025444
 80044f0:	58025458 	.word	0x58025458
 80044f4:	5802546c 	.word	0x5802546c
 80044f8:	58025480 	.word	0x58025480
 80044fc:	58025494 	.word	0x58025494
 8004500:	cccccccd 	.word	0xcccccccd
 8004504:	16009600 	.word	0x16009600
 8004508:	58025880 	.word	0x58025880
 800450c:	aaaaaaab 	.word	0xaaaaaaab
 8004510:	400204b8 	.word	0x400204b8
 8004514:	4002040f 	.word	0x4002040f
 8004518:	10008200 	.word	0x10008200
 800451c:	40020880 	.word	0x40020880

08004520 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	b2db      	uxtb	r3, r3
 800452e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d04a      	beq.n	80045cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2b08      	cmp	r3, #8
 800453a:	d847      	bhi.n	80045cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a25      	ldr	r2, [pc, #148]	; (80045d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d022      	beq.n	800458c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a24      	ldr	r2, [pc, #144]	; (80045dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d01d      	beq.n	800458c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a22      	ldr	r2, [pc, #136]	; (80045e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d018      	beq.n	800458c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a21      	ldr	r2, [pc, #132]	; (80045e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d013      	beq.n	800458c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a1f      	ldr	r2, [pc, #124]	; (80045e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d00e      	beq.n	800458c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a1e      	ldr	r2, [pc, #120]	; (80045ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d009      	beq.n	800458c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a1c      	ldr	r2, [pc, #112]	; (80045f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d004      	beq.n	800458c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a1b      	ldr	r2, [pc, #108]	; (80045f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d101      	bne.n	8004590 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800458c:	2301      	movs	r3, #1
 800458e:	e000      	b.n	8004592 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004590:	2300      	movs	r3, #0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00a      	beq.n	80045ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	4b17      	ldr	r3, [pc, #92]	; (80045f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800459a:	4413      	add	r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	461a      	mov	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a15      	ldr	r2, [pc, #84]	; (80045fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80045a8:	671a      	str	r2, [r3, #112]	; 0x70
 80045aa:	e009      	b.n	80045c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	4b14      	ldr	r3, [pc, #80]	; (8004600 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80045b0:	4413      	add	r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	461a      	mov	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a11      	ldr	r2, [pc, #68]	; (8004604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80045be:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	3b01      	subs	r3, #1
 80045c4:	2201      	movs	r2, #1
 80045c6:	409a      	lsls	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80045cc:	bf00      	nop
 80045ce:	3714      	adds	r7, #20
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	58025408 	.word	0x58025408
 80045dc:	5802541c 	.word	0x5802541c
 80045e0:	58025430 	.word	0x58025430
 80045e4:	58025444 	.word	0x58025444
 80045e8:	58025458 	.word	0x58025458
 80045ec:	5802546c 	.word	0x5802546c
 80045f0:	58025480 	.word	0x58025480
 80045f4:	58025494 	.word	0x58025494
 80045f8:	1600963f 	.word	0x1600963f
 80045fc:	58025940 	.word	0x58025940
 8004600:	1000823f 	.word	0x1000823f
 8004604:	40020940 	.word	0x40020940

08004608 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004608:	b480      	push	{r7}
 800460a:	b089      	sub	sp, #36	; 0x24
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004612:	2300      	movs	r3, #0
 8004614:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004616:	4b86      	ldr	r3, [pc, #536]	; (8004830 <HAL_GPIO_Init+0x228>)
 8004618:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800461a:	e18c      	b.n	8004936 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	2101      	movs	r1, #1
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	fa01 f303 	lsl.w	r3, r1, r3
 8004628:	4013      	ands	r3, r2
 800462a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	2b00      	cmp	r3, #0
 8004630:	f000 817e 	beq.w	8004930 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f003 0303 	and.w	r3, r3, #3
 800463c:	2b01      	cmp	r3, #1
 800463e:	d005      	beq.n	800464c <HAL_GPIO_Init+0x44>
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f003 0303 	and.w	r3, r3, #3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d130      	bne.n	80046ae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	2203      	movs	r2, #3
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	43db      	mvns	r3, r3
 800465e:	69ba      	ldr	r2, [r7, #24]
 8004660:	4013      	ands	r3, r2
 8004662:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	68da      	ldr	r2, [r3, #12]
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	005b      	lsls	r3, r3, #1
 800466c:	fa02 f303 	lsl.w	r3, r2, r3
 8004670:	69ba      	ldr	r2, [r7, #24]
 8004672:	4313      	orrs	r3, r2
 8004674:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004682:	2201      	movs	r2, #1
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	fa02 f303 	lsl.w	r3, r2, r3
 800468a:	43db      	mvns	r3, r3
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	4013      	ands	r3, r2
 8004690:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	091b      	lsrs	r3, r3, #4
 8004698:	f003 0201 	and.w	r2, r3, #1
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	fa02 f303 	lsl.w	r3, r2, r3
 80046a2:	69ba      	ldr	r2, [r7, #24]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f003 0303 	and.w	r3, r3, #3
 80046b6:	2b03      	cmp	r3, #3
 80046b8:	d017      	beq.n	80046ea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	005b      	lsls	r3, r3, #1
 80046c4:	2203      	movs	r2, #3
 80046c6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ca:	43db      	mvns	r3, r3
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	4013      	ands	r3, r2
 80046d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	689a      	ldr	r2, [r3, #8]
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	fa02 f303 	lsl.w	r3, r2, r3
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	69ba      	ldr	r2, [r7, #24]
 80046e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f003 0303 	and.w	r3, r3, #3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d123      	bne.n	800473e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	08da      	lsrs	r2, r3, #3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	3208      	adds	r2, #8
 80046fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004702:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	220f      	movs	r2, #15
 800470e:	fa02 f303 	lsl.w	r3, r2, r3
 8004712:	43db      	mvns	r3, r3
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	4013      	ands	r3, r2
 8004718:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	691a      	ldr	r2, [r3, #16]
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	f003 0307 	and.w	r3, r3, #7
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	fa02 f303 	lsl.w	r3, r2, r3
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	4313      	orrs	r3, r2
 800472e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	08da      	lsrs	r2, r3, #3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	3208      	adds	r2, #8
 8004738:	69b9      	ldr	r1, [r7, #24]
 800473a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	2203      	movs	r2, #3
 800474a:	fa02 f303 	lsl.w	r3, r2, r3
 800474e:	43db      	mvns	r3, r3
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	4013      	ands	r3, r2
 8004754:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f003 0203 	and.w	r2, r3, #3
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	fa02 f303 	lsl.w	r3, r2, r3
 8004766:	69ba      	ldr	r2, [r7, #24]
 8004768:	4313      	orrs	r3, r2
 800476a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	69ba      	ldr	r2, [r7, #24]
 8004770:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800477a:	2b00      	cmp	r3, #0
 800477c:	f000 80d8 	beq.w	8004930 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004780:	4b2c      	ldr	r3, [pc, #176]	; (8004834 <HAL_GPIO_Init+0x22c>)
 8004782:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004786:	4a2b      	ldr	r2, [pc, #172]	; (8004834 <HAL_GPIO_Init+0x22c>)
 8004788:	f043 0302 	orr.w	r3, r3, #2
 800478c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004790:	4b28      	ldr	r3, [pc, #160]	; (8004834 <HAL_GPIO_Init+0x22c>)
 8004792:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	60fb      	str	r3, [r7, #12]
 800479c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800479e:	4a26      	ldr	r2, [pc, #152]	; (8004838 <HAL_GPIO_Init+0x230>)
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	089b      	lsrs	r3, r3, #2
 80047a4:	3302      	adds	r3, #2
 80047a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	f003 0303 	and.w	r3, r3, #3
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	220f      	movs	r2, #15
 80047b6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ba:	43db      	mvns	r3, r3
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	4013      	ands	r3, r2
 80047c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a1d      	ldr	r2, [pc, #116]	; (800483c <HAL_GPIO_Init+0x234>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d04a      	beq.n	8004860 <HAL_GPIO_Init+0x258>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a1c      	ldr	r2, [pc, #112]	; (8004840 <HAL_GPIO_Init+0x238>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d02b      	beq.n	800482a <HAL_GPIO_Init+0x222>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a1b      	ldr	r2, [pc, #108]	; (8004844 <HAL_GPIO_Init+0x23c>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d025      	beq.n	8004826 <HAL_GPIO_Init+0x21e>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a1a      	ldr	r2, [pc, #104]	; (8004848 <HAL_GPIO_Init+0x240>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d01f      	beq.n	8004822 <HAL_GPIO_Init+0x21a>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a19      	ldr	r2, [pc, #100]	; (800484c <HAL_GPIO_Init+0x244>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d019      	beq.n	800481e <HAL_GPIO_Init+0x216>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a18      	ldr	r2, [pc, #96]	; (8004850 <HAL_GPIO_Init+0x248>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d013      	beq.n	800481a <HAL_GPIO_Init+0x212>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a17      	ldr	r2, [pc, #92]	; (8004854 <HAL_GPIO_Init+0x24c>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d00d      	beq.n	8004816 <HAL_GPIO_Init+0x20e>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a16      	ldr	r2, [pc, #88]	; (8004858 <HAL_GPIO_Init+0x250>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d007      	beq.n	8004812 <HAL_GPIO_Init+0x20a>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a15      	ldr	r2, [pc, #84]	; (800485c <HAL_GPIO_Init+0x254>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d101      	bne.n	800480e <HAL_GPIO_Init+0x206>
 800480a:	2309      	movs	r3, #9
 800480c:	e029      	b.n	8004862 <HAL_GPIO_Init+0x25a>
 800480e:	230a      	movs	r3, #10
 8004810:	e027      	b.n	8004862 <HAL_GPIO_Init+0x25a>
 8004812:	2307      	movs	r3, #7
 8004814:	e025      	b.n	8004862 <HAL_GPIO_Init+0x25a>
 8004816:	2306      	movs	r3, #6
 8004818:	e023      	b.n	8004862 <HAL_GPIO_Init+0x25a>
 800481a:	2305      	movs	r3, #5
 800481c:	e021      	b.n	8004862 <HAL_GPIO_Init+0x25a>
 800481e:	2304      	movs	r3, #4
 8004820:	e01f      	b.n	8004862 <HAL_GPIO_Init+0x25a>
 8004822:	2303      	movs	r3, #3
 8004824:	e01d      	b.n	8004862 <HAL_GPIO_Init+0x25a>
 8004826:	2302      	movs	r3, #2
 8004828:	e01b      	b.n	8004862 <HAL_GPIO_Init+0x25a>
 800482a:	2301      	movs	r3, #1
 800482c:	e019      	b.n	8004862 <HAL_GPIO_Init+0x25a>
 800482e:	bf00      	nop
 8004830:	58000080 	.word	0x58000080
 8004834:	58024400 	.word	0x58024400
 8004838:	58000400 	.word	0x58000400
 800483c:	58020000 	.word	0x58020000
 8004840:	58020400 	.word	0x58020400
 8004844:	58020800 	.word	0x58020800
 8004848:	58020c00 	.word	0x58020c00
 800484c:	58021000 	.word	0x58021000
 8004850:	58021400 	.word	0x58021400
 8004854:	58021800 	.word	0x58021800
 8004858:	58021c00 	.word	0x58021c00
 800485c:	58022400 	.word	0x58022400
 8004860:	2300      	movs	r3, #0
 8004862:	69fa      	ldr	r2, [r7, #28]
 8004864:	f002 0203 	and.w	r2, r2, #3
 8004868:	0092      	lsls	r2, r2, #2
 800486a:	4093      	lsls	r3, r2
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	4313      	orrs	r3, r2
 8004870:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004872:	4938      	ldr	r1, [pc, #224]	; (8004954 <HAL_GPIO_Init+0x34c>)
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	089b      	lsrs	r3, r3, #2
 8004878:	3302      	adds	r3, #2
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	43db      	mvns	r3, r3
 800488c:	69ba      	ldr	r2, [r7, #24]
 800488e:	4013      	ands	r3, r2
 8004890:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80048a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80048ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	43db      	mvns	r3, r3
 80048ba:	69ba      	ldr	r2, [r7, #24]
 80048bc:	4013      	ands	r3, r2
 80048be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d003      	beq.n	80048d4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80048d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	43db      	mvns	r3, r3
 80048e6:	69ba      	ldr	r2, [r7, #24]
 80048e8:	4013      	ands	r3, r2
 80048ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	69ba      	ldr	r2, [r7, #24]
 8004904:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	43db      	mvns	r3, r3
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	4013      	ands	r3, r2
 8004914:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004922:	69ba      	ldr	r2, [r7, #24]
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	4313      	orrs	r3, r2
 8004928:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	3301      	adds	r3, #1
 8004934:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	fa22 f303 	lsr.w	r3, r2, r3
 8004940:	2b00      	cmp	r3, #0
 8004942:	f47f ae6b 	bne.w	800461c <HAL_GPIO_Init+0x14>
  }
}
 8004946:	bf00      	nop
 8004948:	bf00      	nop
 800494a:	3724      	adds	r7, #36	; 0x24
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr
 8004954:	58000400 	.word	0x58000400

08004958 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	460b      	mov	r3, r1
 8004962:	807b      	strh	r3, [r7, #2]
 8004964:	4613      	mov	r3, r2
 8004966:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004968:	787b      	ldrb	r3, [r7, #1]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800496e:	887a      	ldrh	r2, [r7, #2]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004974:	e003      	b.n	800497e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004976:	887b      	ldrh	r3, [r7, #2]
 8004978:	041a      	lsls	r2, r3, #16
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	619a      	str	r2, [r3, #24]
}
 800497e:	bf00      	nop
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800498a:	b480      	push	{r7}
 800498c:	b085      	sub	sp, #20
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
 8004992:	460b      	mov	r3, r1
 8004994:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800499c:	887a      	ldrh	r2, [r7, #2]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	4013      	ands	r3, r2
 80049a2:	041a      	lsls	r2, r3, #16
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	43d9      	mvns	r1, r3
 80049a8:	887b      	ldrh	r3, [r7, #2]
 80049aa:	400b      	ands	r3, r1
 80049ac:	431a      	orrs	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	619a      	str	r2, [r3, #24]
}
 80049b2:	bf00      	nop
 80049b4:	3714      	adds	r7, #20
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80049be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049c0:	b08f      	sub	sp, #60	; 0x3c
 80049c2:	af0a      	add	r7, sp, #40	; 0x28
 80049c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d101      	bne.n	80049d0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e054      	b.n	8004a7a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d106      	bne.n	80049f0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f00d fefe 	bl	80127ec <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2203      	movs	r2, #3
 80049f4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d102      	bne.n	8004a0a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f006 fb53 	bl	800b0ba <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	603b      	str	r3, [r7, #0]
 8004a1a:	687e      	ldr	r6, [r7, #4]
 8004a1c:	466d      	mov	r5, sp
 8004a1e:	f106 0410 	add.w	r4, r6, #16
 8004a22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004a2e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004a32:	1d33      	adds	r3, r6, #4
 8004a34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a36:	6838      	ldr	r0, [r7, #0]
 8004a38:	f006 fac0 	bl	800afbc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2101      	movs	r1, #1
 8004a42:	4618      	mov	r0, r3
 8004a44:	f006 fb4a 	bl	800b0dc <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	603b      	str	r3, [r7, #0]
 8004a4e:	687e      	ldr	r6, [r7, #4]
 8004a50:	466d      	mov	r5, sp
 8004a52:	f106 0410 	add.w	r4, r6, #16
 8004a56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004a62:	e885 0003 	stmia.w	r5, {r0, r1}
 8004a66:	1d33      	adds	r3, r6, #4
 8004a68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a6a:	6838      	ldr	r0, [r7, #0]
 8004a6c:	f006 fcd2 	bl	800b414 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a82 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004a82:	b590      	push	{r4, r7, lr}
 8004a84:	b089      	sub	sp, #36	; 0x24
 8004a86:	af04      	add	r7, sp, #16
 8004a88:	6078      	str	r0, [r7, #4]
 8004a8a:	4608      	mov	r0, r1
 8004a8c:	4611      	mov	r1, r2
 8004a8e:	461a      	mov	r2, r3
 8004a90:	4603      	mov	r3, r0
 8004a92:	70fb      	strb	r3, [r7, #3]
 8004a94:	460b      	mov	r3, r1
 8004a96:	70bb      	strb	r3, [r7, #2]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d101      	bne.n	8004aaa <HAL_HCD_HC_Init+0x28>
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	e076      	b.n	8004b98 <HAL_HCD_HC_Init+0x116>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8004ab2:	78fb      	ldrb	r3, [r7, #3]
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	212c      	movs	r1, #44	; 0x2c
 8004ab8:	fb01 f303 	mul.w	r3, r1, r3
 8004abc:	4413      	add	r3, r2
 8004abe:	333d      	adds	r3, #61	; 0x3d
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004ac4:	78fb      	ldrb	r3, [r7, #3]
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	212c      	movs	r1, #44	; 0x2c
 8004aca:	fb01 f303 	mul.w	r3, r1, r3
 8004ace:	4413      	add	r3, r2
 8004ad0:	3338      	adds	r3, #56	; 0x38
 8004ad2:	787a      	ldrb	r2, [r7, #1]
 8004ad4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004ad6:	78fb      	ldrb	r3, [r7, #3]
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	212c      	movs	r1, #44	; 0x2c
 8004adc:	fb01 f303 	mul.w	r3, r1, r3
 8004ae0:	4413      	add	r3, r2
 8004ae2:	3340      	adds	r3, #64	; 0x40
 8004ae4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004ae6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004ae8:	78fb      	ldrb	r3, [r7, #3]
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	212c      	movs	r1, #44	; 0x2c
 8004aee:	fb01 f303 	mul.w	r3, r1, r3
 8004af2:	4413      	add	r3, r2
 8004af4:	3339      	adds	r3, #57	; 0x39
 8004af6:	78fa      	ldrb	r2, [r7, #3]
 8004af8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004afa:	78fb      	ldrb	r3, [r7, #3]
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	212c      	movs	r1, #44	; 0x2c
 8004b00:	fb01 f303 	mul.w	r3, r1, r3
 8004b04:	4413      	add	r3, r2
 8004b06:	333f      	adds	r3, #63	; 0x3f
 8004b08:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004b0c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004b0e:	78fb      	ldrb	r3, [r7, #3]
 8004b10:	78ba      	ldrb	r2, [r7, #2]
 8004b12:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b16:	b2d0      	uxtb	r0, r2
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	212c      	movs	r1, #44	; 0x2c
 8004b1c:	fb01 f303 	mul.w	r3, r1, r3
 8004b20:	4413      	add	r3, r2
 8004b22:	333a      	adds	r3, #58	; 0x3a
 8004b24:	4602      	mov	r2, r0
 8004b26:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004b28:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	da09      	bge.n	8004b44 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004b30:	78fb      	ldrb	r3, [r7, #3]
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	212c      	movs	r1, #44	; 0x2c
 8004b36:	fb01 f303 	mul.w	r3, r1, r3
 8004b3a:	4413      	add	r3, r2
 8004b3c:	333b      	adds	r3, #59	; 0x3b
 8004b3e:	2201      	movs	r2, #1
 8004b40:	701a      	strb	r2, [r3, #0]
 8004b42:	e008      	b.n	8004b56 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004b44:	78fb      	ldrb	r3, [r7, #3]
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	212c      	movs	r1, #44	; 0x2c
 8004b4a:	fb01 f303 	mul.w	r3, r1, r3
 8004b4e:	4413      	add	r3, r2
 8004b50:	333b      	adds	r3, #59	; 0x3b
 8004b52:	2200      	movs	r2, #0
 8004b54:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004b56:	78fb      	ldrb	r3, [r7, #3]
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	212c      	movs	r1, #44	; 0x2c
 8004b5c:	fb01 f303 	mul.w	r3, r1, r3
 8004b60:	4413      	add	r3, r2
 8004b62:	333c      	adds	r3, #60	; 0x3c
 8004b64:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004b68:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6818      	ldr	r0, [r3, #0]
 8004b6e:	787c      	ldrb	r4, [r7, #1]
 8004b70:	78ba      	ldrb	r2, [r7, #2]
 8004b72:	78f9      	ldrb	r1, [r7, #3]
 8004b74:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004b76:	9302      	str	r3, [sp, #8]
 8004b78:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004b7c:	9301      	str	r3, [sp, #4]
 8004b7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004b82:	9300      	str	r3, [sp, #0]
 8004b84:	4623      	mov	r3, r4
 8004b86:	f006 fdc5 	bl	800b714 <USB_HC_Init>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3714      	adds	r7, #20
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd90      	pop	{r4, r7, pc}

08004ba0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	460b      	mov	r3, r1
 8004baa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004bac:	2300      	movs	r3, #0
 8004bae:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d101      	bne.n	8004bbe <HAL_HCD_HC_Halt+0x1e>
 8004bba:	2302      	movs	r3, #2
 8004bbc:	e00f      	b.n	8004bde <HAL_HCD_HC_Halt+0x3e>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	78fa      	ldrb	r2, [r7, #3]
 8004bcc:	4611      	mov	r1, r2
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f007 f815 	bl	800bbfe <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
	...

08004be8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	4608      	mov	r0, r1
 8004bf2:	4611      	mov	r1, r2
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	70fb      	strb	r3, [r7, #3]
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	70bb      	strb	r3, [r7, #2]
 8004bfe:	4613      	mov	r3, r2
 8004c00:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004c02:	78fb      	ldrb	r3, [r7, #3]
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	212c      	movs	r1, #44	; 0x2c
 8004c08:	fb01 f303 	mul.w	r3, r1, r3
 8004c0c:	4413      	add	r3, r2
 8004c0e:	333b      	adds	r3, #59	; 0x3b
 8004c10:	78ba      	ldrb	r2, [r7, #2]
 8004c12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004c14:	78fb      	ldrb	r3, [r7, #3]
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	212c      	movs	r1, #44	; 0x2c
 8004c1a:	fb01 f303 	mul.w	r3, r1, r3
 8004c1e:	4413      	add	r3, r2
 8004c20:	333f      	adds	r3, #63	; 0x3f
 8004c22:	787a      	ldrb	r2, [r7, #1]
 8004c24:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004c26:	7c3b      	ldrb	r3, [r7, #16]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d112      	bne.n	8004c52 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004c2c:	78fb      	ldrb	r3, [r7, #3]
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	212c      	movs	r1, #44	; 0x2c
 8004c32:	fb01 f303 	mul.w	r3, r1, r3
 8004c36:	4413      	add	r3, r2
 8004c38:	3342      	adds	r3, #66	; 0x42
 8004c3a:	2203      	movs	r2, #3
 8004c3c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004c3e:	78fb      	ldrb	r3, [r7, #3]
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	212c      	movs	r1, #44	; 0x2c
 8004c44:	fb01 f303 	mul.w	r3, r1, r3
 8004c48:	4413      	add	r3, r2
 8004c4a:	333d      	adds	r3, #61	; 0x3d
 8004c4c:	7f3a      	ldrb	r2, [r7, #28]
 8004c4e:	701a      	strb	r2, [r3, #0]
 8004c50:	e008      	b.n	8004c64 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c52:	78fb      	ldrb	r3, [r7, #3]
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	212c      	movs	r1, #44	; 0x2c
 8004c58:	fb01 f303 	mul.w	r3, r1, r3
 8004c5c:	4413      	add	r3, r2
 8004c5e:	3342      	adds	r3, #66	; 0x42
 8004c60:	2202      	movs	r2, #2
 8004c62:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004c64:	787b      	ldrb	r3, [r7, #1]
 8004c66:	2b03      	cmp	r3, #3
 8004c68:	f200 80c6 	bhi.w	8004df8 <HAL_HCD_HC_SubmitRequest+0x210>
 8004c6c:	a201      	add	r2, pc, #4	; (adr r2, 8004c74 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8004c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c72:	bf00      	nop
 8004c74:	08004c85 	.word	0x08004c85
 8004c78:	08004de5 	.word	0x08004de5
 8004c7c:	08004ce9 	.word	0x08004ce9
 8004c80:	08004d67 	.word	0x08004d67
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004c84:	7c3b      	ldrb	r3, [r7, #16]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	f040 80b8 	bne.w	8004dfc <HAL_HCD_HC_SubmitRequest+0x214>
 8004c8c:	78bb      	ldrb	r3, [r7, #2]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f040 80b4 	bne.w	8004dfc <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8004c94:	8b3b      	ldrh	r3, [r7, #24]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d108      	bne.n	8004cac <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004c9a:	78fb      	ldrb	r3, [r7, #3]
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	212c      	movs	r1, #44	; 0x2c
 8004ca0:	fb01 f303 	mul.w	r3, r1, r3
 8004ca4:	4413      	add	r3, r2
 8004ca6:	3355      	adds	r3, #85	; 0x55
 8004ca8:	2201      	movs	r2, #1
 8004caa:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004cac:	78fb      	ldrb	r3, [r7, #3]
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	212c      	movs	r1, #44	; 0x2c
 8004cb2:	fb01 f303 	mul.w	r3, r1, r3
 8004cb6:	4413      	add	r3, r2
 8004cb8:	3355      	adds	r3, #85	; 0x55
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d109      	bne.n	8004cd4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004cc0:	78fb      	ldrb	r3, [r7, #3]
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	212c      	movs	r1, #44	; 0x2c
 8004cc6:	fb01 f303 	mul.w	r3, r1, r3
 8004cca:	4413      	add	r3, r2
 8004ccc:	3342      	adds	r3, #66	; 0x42
 8004cce:	2200      	movs	r2, #0
 8004cd0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004cd2:	e093      	b.n	8004dfc <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004cd4:	78fb      	ldrb	r3, [r7, #3]
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	212c      	movs	r1, #44	; 0x2c
 8004cda:	fb01 f303 	mul.w	r3, r1, r3
 8004cde:	4413      	add	r3, r2
 8004ce0:	3342      	adds	r3, #66	; 0x42
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	701a      	strb	r2, [r3, #0]
      break;
 8004ce6:	e089      	b.n	8004dfc <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004ce8:	78bb      	ldrb	r3, [r7, #2]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d11d      	bne.n	8004d2a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004cee:	78fb      	ldrb	r3, [r7, #3]
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	212c      	movs	r1, #44	; 0x2c
 8004cf4:	fb01 f303 	mul.w	r3, r1, r3
 8004cf8:	4413      	add	r3, r2
 8004cfa:	3355      	adds	r3, #85	; 0x55
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d109      	bne.n	8004d16 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004d02:	78fb      	ldrb	r3, [r7, #3]
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	212c      	movs	r1, #44	; 0x2c
 8004d08:	fb01 f303 	mul.w	r3, r1, r3
 8004d0c:	4413      	add	r3, r2
 8004d0e:	3342      	adds	r3, #66	; 0x42
 8004d10:	2200      	movs	r2, #0
 8004d12:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004d14:	e073      	b.n	8004dfe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004d16:	78fb      	ldrb	r3, [r7, #3]
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	212c      	movs	r1, #44	; 0x2c
 8004d1c:	fb01 f303 	mul.w	r3, r1, r3
 8004d20:	4413      	add	r3, r2
 8004d22:	3342      	adds	r3, #66	; 0x42
 8004d24:	2202      	movs	r2, #2
 8004d26:	701a      	strb	r2, [r3, #0]
      break;
 8004d28:	e069      	b.n	8004dfe <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004d2a:	78fb      	ldrb	r3, [r7, #3]
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	212c      	movs	r1, #44	; 0x2c
 8004d30:	fb01 f303 	mul.w	r3, r1, r3
 8004d34:	4413      	add	r3, r2
 8004d36:	3354      	adds	r3, #84	; 0x54
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d109      	bne.n	8004d52 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004d3e:	78fb      	ldrb	r3, [r7, #3]
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	212c      	movs	r1, #44	; 0x2c
 8004d44:	fb01 f303 	mul.w	r3, r1, r3
 8004d48:	4413      	add	r3, r2
 8004d4a:	3342      	adds	r3, #66	; 0x42
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	701a      	strb	r2, [r3, #0]
      break;
 8004d50:	e055      	b.n	8004dfe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004d52:	78fb      	ldrb	r3, [r7, #3]
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	212c      	movs	r1, #44	; 0x2c
 8004d58:	fb01 f303 	mul.w	r3, r1, r3
 8004d5c:	4413      	add	r3, r2
 8004d5e:	3342      	adds	r3, #66	; 0x42
 8004d60:	2202      	movs	r2, #2
 8004d62:	701a      	strb	r2, [r3, #0]
      break;
 8004d64:	e04b      	b.n	8004dfe <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004d66:	78bb      	ldrb	r3, [r7, #2]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d11d      	bne.n	8004da8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004d6c:	78fb      	ldrb	r3, [r7, #3]
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	212c      	movs	r1, #44	; 0x2c
 8004d72:	fb01 f303 	mul.w	r3, r1, r3
 8004d76:	4413      	add	r3, r2
 8004d78:	3355      	adds	r3, #85	; 0x55
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d109      	bne.n	8004d94 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004d80:	78fb      	ldrb	r3, [r7, #3]
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	212c      	movs	r1, #44	; 0x2c
 8004d86:	fb01 f303 	mul.w	r3, r1, r3
 8004d8a:	4413      	add	r3, r2
 8004d8c:	3342      	adds	r3, #66	; 0x42
 8004d8e:	2200      	movs	r2, #0
 8004d90:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004d92:	e034      	b.n	8004dfe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004d94:	78fb      	ldrb	r3, [r7, #3]
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	212c      	movs	r1, #44	; 0x2c
 8004d9a:	fb01 f303 	mul.w	r3, r1, r3
 8004d9e:	4413      	add	r3, r2
 8004da0:	3342      	adds	r3, #66	; 0x42
 8004da2:	2202      	movs	r2, #2
 8004da4:	701a      	strb	r2, [r3, #0]
      break;
 8004da6:	e02a      	b.n	8004dfe <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004da8:	78fb      	ldrb	r3, [r7, #3]
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	212c      	movs	r1, #44	; 0x2c
 8004dae:	fb01 f303 	mul.w	r3, r1, r3
 8004db2:	4413      	add	r3, r2
 8004db4:	3354      	adds	r3, #84	; 0x54
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d109      	bne.n	8004dd0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004dbc:	78fb      	ldrb	r3, [r7, #3]
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	212c      	movs	r1, #44	; 0x2c
 8004dc2:	fb01 f303 	mul.w	r3, r1, r3
 8004dc6:	4413      	add	r3, r2
 8004dc8:	3342      	adds	r3, #66	; 0x42
 8004dca:	2200      	movs	r2, #0
 8004dcc:	701a      	strb	r2, [r3, #0]
      break;
 8004dce:	e016      	b.n	8004dfe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004dd0:	78fb      	ldrb	r3, [r7, #3]
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	212c      	movs	r1, #44	; 0x2c
 8004dd6:	fb01 f303 	mul.w	r3, r1, r3
 8004dda:	4413      	add	r3, r2
 8004ddc:	3342      	adds	r3, #66	; 0x42
 8004dde:	2202      	movs	r2, #2
 8004de0:	701a      	strb	r2, [r3, #0]
      break;
 8004de2:	e00c      	b.n	8004dfe <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004de4:	78fb      	ldrb	r3, [r7, #3]
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	212c      	movs	r1, #44	; 0x2c
 8004dea:	fb01 f303 	mul.w	r3, r1, r3
 8004dee:	4413      	add	r3, r2
 8004df0:	3342      	adds	r3, #66	; 0x42
 8004df2:	2200      	movs	r2, #0
 8004df4:	701a      	strb	r2, [r3, #0]
      break;
 8004df6:	e002      	b.n	8004dfe <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004df8:	bf00      	nop
 8004dfa:	e000      	b.n	8004dfe <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004dfc:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004dfe:	78fb      	ldrb	r3, [r7, #3]
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	212c      	movs	r1, #44	; 0x2c
 8004e04:	fb01 f303 	mul.w	r3, r1, r3
 8004e08:	4413      	add	r3, r2
 8004e0a:	3344      	adds	r3, #68	; 0x44
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004e10:	78fb      	ldrb	r3, [r7, #3]
 8004e12:	8b3a      	ldrh	r2, [r7, #24]
 8004e14:	6879      	ldr	r1, [r7, #4]
 8004e16:	202c      	movs	r0, #44	; 0x2c
 8004e18:	fb00 f303 	mul.w	r3, r0, r3
 8004e1c:	440b      	add	r3, r1
 8004e1e:	334c      	adds	r3, #76	; 0x4c
 8004e20:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004e22:	78fb      	ldrb	r3, [r7, #3]
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	212c      	movs	r1, #44	; 0x2c
 8004e28:	fb01 f303 	mul.w	r3, r1, r3
 8004e2c:	4413      	add	r3, r2
 8004e2e:	3360      	adds	r3, #96	; 0x60
 8004e30:	2200      	movs	r2, #0
 8004e32:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004e34:	78fb      	ldrb	r3, [r7, #3]
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	212c      	movs	r1, #44	; 0x2c
 8004e3a:	fb01 f303 	mul.w	r3, r1, r3
 8004e3e:	4413      	add	r3, r2
 8004e40:	3350      	adds	r3, #80	; 0x50
 8004e42:	2200      	movs	r2, #0
 8004e44:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004e46:	78fb      	ldrb	r3, [r7, #3]
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	212c      	movs	r1, #44	; 0x2c
 8004e4c:	fb01 f303 	mul.w	r3, r1, r3
 8004e50:	4413      	add	r3, r2
 8004e52:	3339      	adds	r3, #57	; 0x39
 8004e54:	78fa      	ldrb	r2, [r7, #3]
 8004e56:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004e58:	78fb      	ldrb	r3, [r7, #3]
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	212c      	movs	r1, #44	; 0x2c
 8004e5e:	fb01 f303 	mul.w	r3, r1, r3
 8004e62:	4413      	add	r3, r2
 8004e64:	3361      	adds	r3, #97	; 0x61
 8004e66:	2200      	movs	r2, #0
 8004e68:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6818      	ldr	r0, [r3, #0]
 8004e6e:	78fb      	ldrb	r3, [r7, #3]
 8004e70:	222c      	movs	r2, #44	; 0x2c
 8004e72:	fb02 f303 	mul.w	r3, r2, r3
 8004e76:	3338      	adds	r3, #56	; 0x38
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	18d1      	adds	r1, r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	461a      	mov	r2, r3
 8004e84:	f006 fd68 	bl	800b958 <USB_HC_StartXfer>
 8004e88:	4603      	mov	r3, r0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop

08004e94 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b086      	sub	sp, #24
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f006 fa6f 	bl	800b38e <USB_GetMode>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	f040 80f6 	bne.w	80050a4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f006 fa53 	bl	800b368 <USB_ReadInterrupts>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f000 80ec 	beq.w	80050a2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f006 fa4a 	bl	800b368 <USB_ReadInterrupts>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004eda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ede:	d104      	bne.n	8004eea <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004ee8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f006 fa3a 	bl	800b368 <USB_ReadInterrupts>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004efa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004efe:	d104      	bne.n	8004f0a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004f08:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f006 fa2a 	bl	800b368 <USB_ReadInterrupts>
 8004f14:	4603      	mov	r3, r0
 8004f16:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f1e:	d104      	bne.n	8004f2a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004f28:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f006 fa1a 	bl	800b368 <USB_ReadInterrupts>
 8004f34:	4603      	mov	r3, r0
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d103      	bne.n	8004f46 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2202      	movs	r2, #2
 8004f44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f006 fa0c 	bl	800b368 <USB_ReadInterrupts>
 8004f50:	4603      	mov	r3, r0
 8004f52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f5a:	d11c      	bne.n	8004f96 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004f64:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d10f      	bne.n	8004f96 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004f76:	2110      	movs	r1, #16
 8004f78:	6938      	ldr	r0, [r7, #16]
 8004f7a:	f006 f8fb 	bl	800b174 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004f7e:	6938      	ldr	r0, [r7, #16]
 8004f80:	f006 f92c 	bl	800b1dc <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2101      	movs	r1, #1
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f006 fafc 	bl	800b588 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f00d fcc9 	bl	8012928 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f006 f9e4 	bl	800b368 <USB_ReadInterrupts>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fa6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004faa:	d102      	bne.n	8004fb2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f001 f89e 	bl	80060ee <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f006 f9d6 	bl	800b368 <USB_ReadInterrupts>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	f003 0308 	and.w	r3, r3, #8
 8004fc2:	2b08      	cmp	r3, #8
 8004fc4:	d106      	bne.n	8004fd4 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f00d fc92 	bl	80128f0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2208      	movs	r2, #8
 8004fd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f006 f9c5 	bl	800b368 <USB_ReadInterrupts>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	f003 0310 	and.w	r3, r3, #16
 8004fe4:	2b10      	cmp	r3, #16
 8004fe6:	d101      	bne.n	8004fec <HAL_HCD_IRQHandler+0x158>
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e000      	b.n	8004fee <HAL_HCD_IRQHandler+0x15a>
 8004fec:	2300      	movs	r3, #0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d012      	beq.n	8005018 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	699a      	ldr	r2, [r3, #24]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f022 0210 	bic.w	r2, r2, #16
 8005000:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 ffa1 	bl	8005f4a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	699a      	ldr	r2, [r3, #24]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f042 0210 	orr.w	r2, r2, #16
 8005016:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4618      	mov	r0, r3
 800501e:	f006 f9a3 	bl	800b368 <USB_ReadInterrupts>
 8005022:	4603      	mov	r3, r0
 8005024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005028:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800502c:	d13a      	bne.n	80050a4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4618      	mov	r0, r3
 8005034:	f006 fdd2 	bl	800bbdc <USB_HC_ReadInterrupt>
 8005038:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800503a:	2300      	movs	r3, #0
 800503c:	617b      	str	r3, [r7, #20]
 800503e:	e025      	b.n	800508c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	f003 030f 	and.w	r3, r3, #15
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	fa22 f303 	lsr.w	r3, r2, r3
 800504c:	f003 0301 	and.w	r3, r3, #1
 8005050:	2b00      	cmp	r3, #0
 8005052:	d018      	beq.n	8005086 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	015a      	lsls	r2, r3, #5
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	4413      	add	r3, r2
 800505c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005066:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800506a:	d106      	bne.n	800507a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	b2db      	uxtb	r3, r3
 8005070:	4619      	mov	r1, r3
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f8ab 	bl	80051ce <HCD_HC_IN_IRQHandler>
 8005078:	e005      	b.n	8005086 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	b2db      	uxtb	r3, r3
 800507e:	4619      	mov	r1, r3
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 fbf9 	bl	8005878 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	3301      	adds	r3, #1
 800508a:	617b      	str	r3, [r7, #20]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	429a      	cmp	r2, r3
 8005094:	d3d4      	bcc.n	8005040 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800509e:	615a      	str	r2, [r3, #20]
 80050a0:	e000      	b.n	80050a4 <HAL_HCD_IRQHandler+0x210>
      return;
 80050a2:	bf00      	nop
    }
  }
}
 80050a4:	3718      	adds	r7, #24
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b082      	sub	sp, #8
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d101      	bne.n	80050c0 <HAL_HCD_Start+0x16>
 80050bc:	2302      	movs	r3, #2
 80050be:	e013      	b.n	80050e8 <HAL_HCD_Start+0x3e>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2101      	movs	r1, #1
 80050ce:	4618      	mov	r0, r3
 80050d0:	f006 fabe 	bl	800b650 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4618      	mov	r0, r3
 80050da:	f005 ffdd 	bl	800b098 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3708      	adds	r7, #8
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d101      	bne.n	8005106 <HAL_HCD_Stop+0x16>
 8005102:	2302      	movs	r3, #2
 8005104:	e00d      	b.n	8005122 <HAL_HCD_Stop+0x32>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4618      	mov	r0, r3
 8005114:	f006 feac 	bl	800be70 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3708      	adds	r7, #8
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800512a:	b580      	push	{r7, lr}
 800512c:	b082      	sub	sp, #8
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4618      	mov	r0, r3
 8005138:	f006 fa60 	bl	800b5fc <USB_ResetPort>
 800513c:	4603      	mov	r3, r0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3708      	adds	r7, #8
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005146:	b480      	push	{r7}
 8005148:	b083      	sub	sp, #12
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
 800514e:	460b      	mov	r3, r1
 8005150:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005152:	78fb      	ldrb	r3, [r7, #3]
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	212c      	movs	r1, #44	; 0x2c
 8005158:	fb01 f303 	mul.w	r3, r1, r3
 800515c:	4413      	add	r3, r2
 800515e:	3360      	adds	r3, #96	; 0x60
 8005160:	781b      	ldrb	r3, [r3, #0]
}
 8005162:	4618      	mov	r0, r3
 8005164:	370c      	adds	r7, #12
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr

0800516e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800516e:	b480      	push	{r7}
 8005170:	b083      	sub	sp, #12
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
 8005176:	460b      	mov	r3, r1
 8005178:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800517a:	78fb      	ldrb	r3, [r7, #3]
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	212c      	movs	r1, #44	; 0x2c
 8005180:	fb01 f303 	mul.w	r3, r1, r3
 8005184:	4413      	add	r3, r2
 8005186:	3350      	adds	r3, #80	; 0x50
 8005188:	681b      	ldr	r3, [r3, #0]
}
 800518a:	4618      	mov	r0, r3
 800518c:	370c      	adds	r7, #12
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005196:	b580      	push	{r7, lr}
 8005198:	b082      	sub	sp, #8
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f006 faa4 	bl	800b6f0 <USB_GetCurrentFrame>
 80051a8:	4603      	mov	r3, r0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b082      	sub	sp, #8
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4618      	mov	r0, r3
 80051c0:	f006 fa7f 	bl	800b6c2 <USB_GetHostSpeed>
 80051c4:	4603      	mov	r3, r0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3708      	adds	r7, #8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b086      	sub	sp, #24
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
 80051d6:	460b      	mov	r3, r1
 80051d8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80051e4:	78fb      	ldrb	r3, [r7, #3]
 80051e6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f003 0304 	and.w	r3, r3, #4
 80051fa:	2b04      	cmp	r3, #4
 80051fc:	d11a      	bne.n	8005234 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	015a      	lsls	r2, r3, #5
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	4413      	add	r3, r2
 8005206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800520a:	461a      	mov	r2, r3
 800520c:	2304      	movs	r3, #4
 800520e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	212c      	movs	r1, #44	; 0x2c
 8005216:	fb01 f303 	mul.w	r3, r1, r3
 800521a:	4413      	add	r3, r2
 800521c:	3361      	adds	r3, #97	; 0x61
 800521e:	2206      	movs	r2, #6
 8005220:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	b2d2      	uxtb	r2, r2
 800522a:	4611      	mov	r1, r2
 800522c:	4618      	mov	r0, r3
 800522e:	f006 fce6 	bl	800bbfe <USB_HC_Halt>
 8005232:	e0af      	b.n	8005394 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	015a      	lsls	r2, r3, #5
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	4413      	add	r3, r2
 800523c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005246:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800524a:	d11b      	bne.n	8005284 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	015a      	lsls	r2, r3, #5
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	4413      	add	r3, r2
 8005254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005258:	461a      	mov	r2, r3
 800525a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800525e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	212c      	movs	r1, #44	; 0x2c
 8005266:	fb01 f303 	mul.w	r3, r1, r3
 800526a:	4413      	add	r3, r2
 800526c:	3361      	adds	r3, #97	; 0x61
 800526e:	2207      	movs	r2, #7
 8005270:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	b2d2      	uxtb	r2, r2
 800527a:	4611      	mov	r1, r2
 800527c:	4618      	mov	r0, r3
 800527e:	f006 fcbe 	bl	800bbfe <USB_HC_Halt>
 8005282:	e087      	b.n	8005394 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	015a      	lsls	r2, r3, #5
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	4413      	add	r3, r2
 800528c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f003 0320 	and.w	r3, r3, #32
 8005296:	2b20      	cmp	r3, #32
 8005298:	d109      	bne.n	80052ae <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	015a      	lsls	r2, r3, #5
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	4413      	add	r3, r2
 80052a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052a6:	461a      	mov	r2, r3
 80052a8:	2320      	movs	r3, #32
 80052aa:	6093      	str	r3, [r2, #8]
 80052ac:	e072      	b.n	8005394 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	015a      	lsls	r2, r3, #5
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	4413      	add	r3, r2
 80052b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f003 0308 	and.w	r3, r3, #8
 80052c0:	2b08      	cmp	r3, #8
 80052c2:	d11a      	bne.n	80052fa <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	015a      	lsls	r2, r3, #5
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	4413      	add	r3, r2
 80052cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052d0:	461a      	mov	r2, r3
 80052d2:	2308      	movs	r3, #8
 80052d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	212c      	movs	r1, #44	; 0x2c
 80052dc:	fb01 f303 	mul.w	r3, r1, r3
 80052e0:	4413      	add	r3, r2
 80052e2:	3361      	adds	r3, #97	; 0x61
 80052e4:	2205      	movs	r2, #5
 80052e6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	b2d2      	uxtb	r2, r2
 80052f0:	4611      	mov	r1, r2
 80052f2:	4618      	mov	r0, r3
 80052f4:	f006 fc83 	bl	800bbfe <USB_HC_Halt>
 80052f8:	e04c      	b.n	8005394 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	015a      	lsls	r2, r3, #5
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	4413      	add	r3, r2
 8005302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800530c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005310:	d11b      	bne.n	800534a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	015a      	lsls	r2, r3, #5
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	4413      	add	r3, r2
 800531a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800531e:	461a      	mov	r2, r3
 8005320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005324:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	212c      	movs	r1, #44	; 0x2c
 800532c:	fb01 f303 	mul.w	r3, r1, r3
 8005330:	4413      	add	r3, r2
 8005332:	3361      	adds	r3, #97	; 0x61
 8005334:	2208      	movs	r2, #8
 8005336:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	b2d2      	uxtb	r2, r2
 8005340:	4611      	mov	r1, r2
 8005342:	4618      	mov	r0, r3
 8005344:	f006 fc5b 	bl	800bbfe <USB_HC_Halt>
 8005348:	e024      	b.n	8005394 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	015a      	lsls	r2, r3, #5
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	4413      	add	r3, r2
 8005352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800535c:	2b80      	cmp	r3, #128	; 0x80
 800535e:	d119      	bne.n	8005394 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	015a      	lsls	r2, r3, #5
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	4413      	add	r3, r2
 8005368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800536c:	461a      	mov	r2, r3
 800536e:	2380      	movs	r3, #128	; 0x80
 8005370:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	212c      	movs	r1, #44	; 0x2c
 8005378:	fb01 f303 	mul.w	r3, r1, r3
 800537c:	4413      	add	r3, r2
 800537e:	3361      	adds	r3, #97	; 0x61
 8005380:	2206      	movs	r2, #6
 8005382:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	b2d2      	uxtb	r2, r2
 800538c:	4611      	mov	r1, r2
 800538e:	4618      	mov	r0, r3
 8005390:	f006 fc35 	bl	800bbfe <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	015a      	lsls	r2, r3, #5
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	4413      	add	r3, r2
 800539c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053aa:	d112      	bne.n	80053d2 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	b2d2      	uxtb	r2, r2
 80053b4:	4611      	mov	r1, r2
 80053b6:	4618      	mov	r0, r3
 80053b8:	f006 fc21 	bl	800bbfe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053c8:	461a      	mov	r2, r3
 80053ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053ce:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80053d0:	e24e      	b.n	8005870 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	015a      	lsls	r2, r3, #5
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	4413      	add	r3, r2
 80053da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f003 0301 	and.w	r3, r3, #1
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	f040 80df 	bne.w	80055a8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d019      	beq.n	8005426 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	212c      	movs	r1, #44	; 0x2c
 80053f8:	fb01 f303 	mul.w	r3, r1, r3
 80053fc:	4413      	add	r3, r2
 80053fe:	3348      	adds	r3, #72	; 0x48
 8005400:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	0159      	lsls	r1, r3, #5
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	440b      	add	r3, r1
 800540a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005414:	1ad2      	subs	r2, r2, r3
 8005416:	6879      	ldr	r1, [r7, #4]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	202c      	movs	r0, #44	; 0x2c
 800541c:	fb00 f303 	mul.w	r3, r0, r3
 8005420:	440b      	add	r3, r1
 8005422:	3350      	adds	r3, #80	; 0x50
 8005424:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	212c      	movs	r1, #44	; 0x2c
 800542c:	fb01 f303 	mul.w	r3, r1, r3
 8005430:	4413      	add	r3, r2
 8005432:	3361      	adds	r3, #97	; 0x61
 8005434:	2201      	movs	r2, #1
 8005436:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	212c      	movs	r1, #44	; 0x2c
 800543e:	fb01 f303 	mul.w	r3, r1, r3
 8005442:	4413      	add	r3, r2
 8005444:	335c      	adds	r3, #92	; 0x5c
 8005446:	2200      	movs	r2, #0
 8005448:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	015a      	lsls	r2, r3, #5
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	4413      	add	r3, r2
 8005452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005456:	461a      	mov	r2, r3
 8005458:	2301      	movs	r3, #1
 800545a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	212c      	movs	r1, #44	; 0x2c
 8005462:	fb01 f303 	mul.w	r3, r1, r3
 8005466:	4413      	add	r3, r2
 8005468:	333f      	adds	r3, #63	; 0x3f
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d009      	beq.n	8005484 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	212c      	movs	r1, #44	; 0x2c
 8005476:	fb01 f303 	mul.w	r3, r1, r3
 800547a:	4413      	add	r3, r2
 800547c:	333f      	adds	r3, #63	; 0x3f
 800547e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005480:	2b02      	cmp	r3, #2
 8005482:	d111      	bne.n	80054a8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	b2d2      	uxtb	r2, r2
 800548c:	4611      	mov	r1, r2
 800548e:	4618      	mov	r0, r3
 8005490:	f006 fbb5 	bl	800bbfe <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	015a      	lsls	r2, r3, #5
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	4413      	add	r3, r2
 800549c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054a0:	461a      	mov	r2, r3
 80054a2:	2310      	movs	r3, #16
 80054a4:	6093      	str	r3, [r2, #8]
 80054a6:	e03a      	b.n	800551e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	212c      	movs	r1, #44	; 0x2c
 80054ae:	fb01 f303 	mul.w	r3, r1, r3
 80054b2:	4413      	add	r3, r2
 80054b4:	333f      	adds	r3, #63	; 0x3f
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	2b03      	cmp	r3, #3
 80054ba:	d009      	beq.n	80054d0 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	212c      	movs	r1, #44	; 0x2c
 80054c2:	fb01 f303 	mul.w	r3, r1, r3
 80054c6:	4413      	add	r3, r2
 80054c8:	333f      	adds	r3, #63	; 0x3f
 80054ca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d126      	bne.n	800551e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	015a      	lsls	r2, r3, #5
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	0151      	lsls	r1, r2, #5
 80054e2:	693a      	ldr	r2, [r7, #16]
 80054e4:	440a      	add	r2, r1
 80054e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054ee:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	212c      	movs	r1, #44	; 0x2c
 80054f6:	fb01 f303 	mul.w	r3, r1, r3
 80054fa:	4413      	add	r3, r2
 80054fc:	3360      	adds	r3, #96	; 0x60
 80054fe:	2201      	movs	r2, #1
 8005500:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	b2d9      	uxtb	r1, r3
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	202c      	movs	r0, #44	; 0x2c
 800550c:	fb00 f303 	mul.w	r3, r0, r3
 8005510:	4413      	add	r3, r2
 8005512:	3360      	adds	r3, #96	; 0x60
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	461a      	mov	r2, r3
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f00d fa13 	bl	8012944 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d12b      	bne.n	800557e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	212c      	movs	r1, #44	; 0x2c
 800552c:	fb01 f303 	mul.w	r3, r1, r3
 8005530:	4413      	add	r3, r2
 8005532:	3348      	adds	r3, #72	; 0x48
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6879      	ldr	r1, [r7, #4]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	202c      	movs	r0, #44	; 0x2c
 800553c:	fb00 f202 	mul.w	r2, r0, r2
 8005540:	440a      	add	r2, r1
 8005542:	3240      	adds	r2, #64	; 0x40
 8005544:	8812      	ldrh	r2, [r2, #0]
 8005546:	fbb3 f3f2 	udiv	r3, r3, r2
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	2b00      	cmp	r3, #0
 8005550:	f000 818e 	beq.w	8005870 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	212c      	movs	r1, #44	; 0x2c
 800555a:	fb01 f303 	mul.w	r3, r1, r3
 800555e:	4413      	add	r3, r2
 8005560:	3354      	adds	r3, #84	; 0x54
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	f083 0301 	eor.w	r3, r3, #1
 8005568:	b2d8      	uxtb	r0, r3
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	212c      	movs	r1, #44	; 0x2c
 8005570:	fb01 f303 	mul.w	r3, r1, r3
 8005574:	4413      	add	r3, r2
 8005576:	3354      	adds	r3, #84	; 0x54
 8005578:	4602      	mov	r2, r0
 800557a:	701a      	strb	r2, [r3, #0]
}
 800557c:	e178      	b.n	8005870 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	212c      	movs	r1, #44	; 0x2c
 8005584:	fb01 f303 	mul.w	r3, r1, r3
 8005588:	4413      	add	r3, r2
 800558a:	3354      	adds	r3, #84	; 0x54
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	f083 0301 	eor.w	r3, r3, #1
 8005592:	b2d8      	uxtb	r0, r3
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	212c      	movs	r1, #44	; 0x2c
 800559a:	fb01 f303 	mul.w	r3, r1, r3
 800559e:	4413      	add	r3, r2
 80055a0:	3354      	adds	r3, #84	; 0x54
 80055a2:	4602      	mov	r2, r0
 80055a4:	701a      	strb	r2, [r3, #0]
}
 80055a6:	e163      	b.n	8005870 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	015a      	lsls	r2, r3, #5
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	4413      	add	r3, r2
 80055b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f003 0302 	and.w	r3, r3, #2
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	f040 80f6 	bne.w	80057ac <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	212c      	movs	r1, #44	; 0x2c
 80055c6:	fb01 f303 	mul.w	r3, r1, r3
 80055ca:	4413      	add	r3, r2
 80055cc:	3361      	adds	r3, #97	; 0x61
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d109      	bne.n	80055e8 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	212c      	movs	r1, #44	; 0x2c
 80055da:	fb01 f303 	mul.w	r3, r1, r3
 80055de:	4413      	add	r3, r2
 80055e0:	3360      	adds	r3, #96	; 0x60
 80055e2:	2201      	movs	r2, #1
 80055e4:	701a      	strb	r2, [r3, #0]
 80055e6:	e0c9      	b.n	800577c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	212c      	movs	r1, #44	; 0x2c
 80055ee:	fb01 f303 	mul.w	r3, r1, r3
 80055f2:	4413      	add	r3, r2
 80055f4:	3361      	adds	r3, #97	; 0x61
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	2b05      	cmp	r3, #5
 80055fa:	d109      	bne.n	8005610 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	212c      	movs	r1, #44	; 0x2c
 8005602:	fb01 f303 	mul.w	r3, r1, r3
 8005606:	4413      	add	r3, r2
 8005608:	3360      	adds	r3, #96	; 0x60
 800560a:	2205      	movs	r2, #5
 800560c:	701a      	strb	r2, [r3, #0]
 800560e:	e0b5      	b.n	800577c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	212c      	movs	r1, #44	; 0x2c
 8005616:	fb01 f303 	mul.w	r3, r1, r3
 800561a:	4413      	add	r3, r2
 800561c:	3361      	adds	r3, #97	; 0x61
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	2b06      	cmp	r3, #6
 8005622:	d009      	beq.n	8005638 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	212c      	movs	r1, #44	; 0x2c
 800562a:	fb01 f303 	mul.w	r3, r1, r3
 800562e:	4413      	add	r3, r2
 8005630:	3361      	adds	r3, #97	; 0x61
 8005632:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005634:	2b08      	cmp	r3, #8
 8005636:	d150      	bne.n	80056da <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	212c      	movs	r1, #44	; 0x2c
 800563e:	fb01 f303 	mul.w	r3, r1, r3
 8005642:	4413      	add	r3, r2
 8005644:	335c      	adds	r3, #92	; 0x5c
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	1c5a      	adds	r2, r3, #1
 800564a:	6879      	ldr	r1, [r7, #4]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	202c      	movs	r0, #44	; 0x2c
 8005650:	fb00 f303 	mul.w	r3, r0, r3
 8005654:	440b      	add	r3, r1
 8005656:	335c      	adds	r3, #92	; 0x5c
 8005658:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	212c      	movs	r1, #44	; 0x2c
 8005660:	fb01 f303 	mul.w	r3, r1, r3
 8005664:	4413      	add	r3, r2
 8005666:	335c      	adds	r3, #92	; 0x5c
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2b02      	cmp	r3, #2
 800566c:	d912      	bls.n	8005694 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	212c      	movs	r1, #44	; 0x2c
 8005674:	fb01 f303 	mul.w	r3, r1, r3
 8005678:	4413      	add	r3, r2
 800567a:	335c      	adds	r3, #92	; 0x5c
 800567c:	2200      	movs	r2, #0
 800567e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	212c      	movs	r1, #44	; 0x2c
 8005686:	fb01 f303 	mul.w	r3, r1, r3
 800568a:	4413      	add	r3, r2
 800568c:	3360      	adds	r3, #96	; 0x60
 800568e:	2204      	movs	r2, #4
 8005690:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005692:	e073      	b.n	800577c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	212c      	movs	r1, #44	; 0x2c
 800569a:	fb01 f303 	mul.w	r3, r1, r3
 800569e:	4413      	add	r3, r2
 80056a0:	3360      	adds	r3, #96	; 0x60
 80056a2:	2202      	movs	r2, #2
 80056a4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	015a      	lsls	r2, r3, #5
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80056bc:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056c4:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	015a      	lsls	r2, r3, #5
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	4413      	add	r3, r2
 80056ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056d2:	461a      	mov	r2, r3
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80056d8:	e050      	b.n	800577c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	212c      	movs	r1, #44	; 0x2c
 80056e0:	fb01 f303 	mul.w	r3, r1, r3
 80056e4:	4413      	add	r3, r2
 80056e6:	3361      	adds	r3, #97	; 0x61
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	2b03      	cmp	r3, #3
 80056ec:	d122      	bne.n	8005734 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	212c      	movs	r1, #44	; 0x2c
 80056f4:	fb01 f303 	mul.w	r3, r1, r3
 80056f8:	4413      	add	r3, r2
 80056fa:	3360      	adds	r3, #96	; 0x60
 80056fc:	2202      	movs	r2, #2
 80056fe:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	015a      	lsls	r2, r3, #5
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	4413      	add	r3, r2
 8005708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005716:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800571e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	015a      	lsls	r2, r3, #5
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	4413      	add	r3, r2
 8005728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800572c:	461a      	mov	r2, r3
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	6013      	str	r3, [r2, #0]
 8005732:	e023      	b.n	800577c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	212c      	movs	r1, #44	; 0x2c
 800573a:	fb01 f303 	mul.w	r3, r1, r3
 800573e:	4413      	add	r3, r2
 8005740:	3361      	adds	r3, #97	; 0x61
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	2b07      	cmp	r3, #7
 8005746:	d119      	bne.n	800577c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	212c      	movs	r1, #44	; 0x2c
 800574e:	fb01 f303 	mul.w	r3, r1, r3
 8005752:	4413      	add	r3, r2
 8005754:	335c      	adds	r3, #92	; 0x5c
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	1c5a      	adds	r2, r3, #1
 800575a:	6879      	ldr	r1, [r7, #4]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	202c      	movs	r0, #44	; 0x2c
 8005760:	fb00 f303 	mul.w	r3, r0, r3
 8005764:	440b      	add	r3, r1
 8005766:	335c      	adds	r3, #92	; 0x5c
 8005768:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	212c      	movs	r1, #44	; 0x2c
 8005770:	fb01 f303 	mul.w	r3, r1, r3
 8005774:	4413      	add	r3, r2
 8005776:	3360      	adds	r3, #96	; 0x60
 8005778:	2204      	movs	r2, #4
 800577a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	015a      	lsls	r2, r3, #5
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	4413      	add	r3, r2
 8005784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005788:	461a      	mov	r2, r3
 800578a:	2302      	movs	r3, #2
 800578c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	b2d9      	uxtb	r1, r3
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	202c      	movs	r0, #44	; 0x2c
 8005798:	fb00 f303 	mul.w	r3, r0, r3
 800579c:	4413      	add	r3, r2
 800579e:	3360      	adds	r3, #96	; 0x60
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	461a      	mov	r2, r3
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f00d f8cd 	bl	8012944 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80057aa:	e061      	b.n	8005870 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	015a      	lsls	r2, r3, #5
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f003 0310 	and.w	r3, r3, #16
 80057be:	2b10      	cmp	r3, #16
 80057c0:	d156      	bne.n	8005870 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	212c      	movs	r1, #44	; 0x2c
 80057c8:	fb01 f303 	mul.w	r3, r1, r3
 80057cc:	4413      	add	r3, r2
 80057ce:	333f      	adds	r3, #63	; 0x3f
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	2b03      	cmp	r3, #3
 80057d4:	d111      	bne.n	80057fa <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	212c      	movs	r1, #44	; 0x2c
 80057dc:	fb01 f303 	mul.w	r3, r1, r3
 80057e0:	4413      	add	r3, r2
 80057e2:	335c      	adds	r3, #92	; 0x5c
 80057e4:	2200      	movs	r2, #0
 80057e6:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	b2d2      	uxtb	r2, r2
 80057f0:	4611      	mov	r1, r2
 80057f2:	4618      	mov	r0, r3
 80057f4:	f006 fa03 	bl	800bbfe <USB_HC_Halt>
 80057f8:	e031      	b.n	800585e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	212c      	movs	r1, #44	; 0x2c
 8005800:	fb01 f303 	mul.w	r3, r1, r3
 8005804:	4413      	add	r3, r2
 8005806:	333f      	adds	r3, #63	; 0x3f
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d009      	beq.n	8005822 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	212c      	movs	r1, #44	; 0x2c
 8005814:	fb01 f303 	mul.w	r3, r1, r3
 8005818:	4413      	add	r3, r2
 800581a:	333f      	adds	r3, #63	; 0x3f
 800581c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800581e:	2b02      	cmp	r3, #2
 8005820:	d11d      	bne.n	800585e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	212c      	movs	r1, #44	; 0x2c
 8005828:	fb01 f303 	mul.w	r3, r1, r3
 800582c:	4413      	add	r3, r2
 800582e:	335c      	adds	r3, #92	; 0x5c
 8005830:	2200      	movs	r2, #0
 8005832:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d110      	bne.n	800585e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	212c      	movs	r1, #44	; 0x2c
 8005842:	fb01 f303 	mul.w	r3, r1, r3
 8005846:	4413      	add	r3, r2
 8005848:	3361      	adds	r3, #97	; 0x61
 800584a:	2203      	movs	r2, #3
 800584c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	b2d2      	uxtb	r2, r2
 8005856:	4611      	mov	r1, r2
 8005858:	4618      	mov	r0, r3
 800585a:	f006 f9d0 	bl	800bbfe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	015a      	lsls	r2, r3, #5
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	4413      	add	r3, r2
 8005866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800586a:	461a      	mov	r2, r3
 800586c:	2310      	movs	r3, #16
 800586e:	6093      	str	r3, [r2, #8]
}
 8005870:	bf00      	nop
 8005872:	3718      	adds	r7, #24
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b088      	sub	sp, #32
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	460b      	mov	r3, r1
 8005882:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800588e:	78fb      	ldrb	r3, [r7, #3]
 8005890:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	015a      	lsls	r2, r3, #5
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	4413      	add	r3, r2
 800589a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f003 0304 	and.w	r3, r3, #4
 80058a4:	2b04      	cmp	r3, #4
 80058a6:	d11a      	bne.n	80058de <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058b4:	461a      	mov	r2, r3
 80058b6:	2304      	movs	r3, #4
 80058b8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	212c      	movs	r1, #44	; 0x2c
 80058c0:	fb01 f303 	mul.w	r3, r1, r3
 80058c4:	4413      	add	r3, r2
 80058c6:	3361      	adds	r3, #97	; 0x61
 80058c8:	2206      	movs	r2, #6
 80058ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	b2d2      	uxtb	r2, r2
 80058d4:	4611      	mov	r1, r2
 80058d6:	4618      	mov	r0, r3
 80058d8:	f006 f991 	bl	800bbfe <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80058dc:	e331      	b.n	8005f42 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	015a      	lsls	r2, r3, #5
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	4413      	add	r3, r2
 80058e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f003 0320 	and.w	r3, r3, #32
 80058f0:	2b20      	cmp	r3, #32
 80058f2:	d12e      	bne.n	8005952 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	015a      	lsls	r2, r3, #5
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	4413      	add	r3, r2
 80058fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005900:	461a      	mov	r2, r3
 8005902:	2320      	movs	r3, #32
 8005904:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	212c      	movs	r1, #44	; 0x2c
 800590c:	fb01 f303 	mul.w	r3, r1, r3
 8005910:	4413      	add	r3, r2
 8005912:	333d      	adds	r3, #61	; 0x3d
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	2b01      	cmp	r3, #1
 8005918:	f040 8313 	bne.w	8005f42 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	212c      	movs	r1, #44	; 0x2c
 8005922:	fb01 f303 	mul.w	r3, r1, r3
 8005926:	4413      	add	r3, r2
 8005928:	333d      	adds	r3, #61	; 0x3d
 800592a:	2200      	movs	r2, #0
 800592c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	212c      	movs	r1, #44	; 0x2c
 8005934:	fb01 f303 	mul.w	r3, r1, r3
 8005938:	4413      	add	r3, r2
 800593a:	3360      	adds	r3, #96	; 0x60
 800593c:	2202      	movs	r2, #2
 800593e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	b2d2      	uxtb	r2, r2
 8005948:	4611      	mov	r1, r2
 800594a:	4618      	mov	r0, r3
 800594c:	f006 f957 	bl	800bbfe <USB_HC_Halt>
}
 8005950:	e2f7      	b.n	8005f42 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	015a      	lsls	r2, r3, #5
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	4413      	add	r3, r2
 800595a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005968:	d112      	bne.n	8005990 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	015a      	lsls	r2, r3, #5
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	4413      	add	r3, r2
 8005972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005976:	461a      	mov	r2, r3
 8005978:	f44f 7300 	mov.w	r3, #512	; 0x200
 800597c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	b2d2      	uxtb	r2, r2
 8005986:	4611      	mov	r1, r2
 8005988:	4618      	mov	r0, r3
 800598a:	f006 f938 	bl	800bbfe <USB_HC_Halt>
}
 800598e:	e2d8      	b.n	8005f42 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	4413      	add	r3, r2
 8005998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d140      	bne.n	8005a28 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	212c      	movs	r1, #44	; 0x2c
 80059ac:	fb01 f303 	mul.w	r3, r1, r3
 80059b0:	4413      	add	r3, r2
 80059b2:	335c      	adds	r3, #92	; 0x5c
 80059b4:	2200      	movs	r2, #0
 80059b6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	015a      	lsls	r2, r3, #5
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	4413      	add	r3, r2
 80059c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ca:	2b40      	cmp	r3, #64	; 0x40
 80059cc:	d111      	bne.n	80059f2 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	212c      	movs	r1, #44	; 0x2c
 80059d4:	fb01 f303 	mul.w	r3, r1, r3
 80059d8:	4413      	add	r3, r2
 80059da:	333d      	adds	r3, #61	; 0x3d
 80059dc:	2201      	movs	r2, #1
 80059de:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	015a      	lsls	r2, r3, #5
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	4413      	add	r3, r2
 80059e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ec:	461a      	mov	r2, r3
 80059ee:	2340      	movs	r3, #64	; 0x40
 80059f0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	015a      	lsls	r2, r3, #5
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	4413      	add	r3, r2
 80059fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059fe:	461a      	mov	r2, r3
 8005a00:	2301      	movs	r3, #1
 8005a02:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	212c      	movs	r1, #44	; 0x2c
 8005a0a:	fb01 f303 	mul.w	r3, r1, r3
 8005a0e:	4413      	add	r3, r2
 8005a10:	3361      	adds	r3, #97	; 0x61
 8005a12:	2201      	movs	r2, #1
 8005a14:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	b2d2      	uxtb	r2, r2
 8005a1e:	4611      	mov	r1, r2
 8005a20:	4618      	mov	r0, r3
 8005a22:	f006 f8ec 	bl	800bbfe <USB_HC_Halt>
}
 8005a26:	e28c      	b.n	8005f42 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	015a      	lsls	r2, r3, #5
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a3a:	2b40      	cmp	r3, #64	; 0x40
 8005a3c:	d12c      	bne.n	8005a98 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	212c      	movs	r1, #44	; 0x2c
 8005a44:	fb01 f303 	mul.w	r3, r1, r3
 8005a48:	4413      	add	r3, r2
 8005a4a:	3361      	adds	r3, #97	; 0x61
 8005a4c:	2204      	movs	r2, #4
 8005a4e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	212c      	movs	r1, #44	; 0x2c
 8005a56:	fb01 f303 	mul.w	r3, r1, r3
 8005a5a:	4413      	add	r3, r2
 8005a5c:	333d      	adds	r3, #61	; 0x3d
 8005a5e:	2201      	movs	r2, #1
 8005a60:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	212c      	movs	r1, #44	; 0x2c
 8005a68:	fb01 f303 	mul.w	r3, r1, r3
 8005a6c:	4413      	add	r3, r2
 8005a6e:	335c      	adds	r3, #92	; 0x5c
 8005a70:	2200      	movs	r2, #0
 8005a72:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	697a      	ldr	r2, [r7, #20]
 8005a7a:	b2d2      	uxtb	r2, r2
 8005a7c:	4611      	mov	r1, r2
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f006 f8bd 	bl	800bbfe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	015a      	lsls	r2, r3, #5
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a90:	461a      	mov	r2, r3
 8005a92:	2340      	movs	r3, #64	; 0x40
 8005a94:	6093      	str	r3, [r2, #8]
}
 8005a96:	e254      	b.n	8005f42 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	f003 0308 	and.w	r3, r3, #8
 8005aaa:	2b08      	cmp	r3, #8
 8005aac:	d11a      	bne.n	8005ae4 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	015a      	lsls	r2, r3, #5
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aba:	461a      	mov	r2, r3
 8005abc:	2308      	movs	r3, #8
 8005abe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	212c      	movs	r1, #44	; 0x2c
 8005ac6:	fb01 f303 	mul.w	r3, r1, r3
 8005aca:	4413      	add	r3, r2
 8005acc:	3361      	adds	r3, #97	; 0x61
 8005ace:	2205      	movs	r2, #5
 8005ad0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	b2d2      	uxtb	r2, r2
 8005ada:	4611      	mov	r1, r2
 8005adc:	4618      	mov	r0, r3
 8005ade:	f006 f88e 	bl	800bbfe <USB_HC_Halt>
}
 8005ae2:	e22e      	b.n	8005f42 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	015a      	lsls	r2, r3, #5
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	4413      	add	r3, r2
 8005aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f003 0310 	and.w	r3, r3, #16
 8005af6:	2b10      	cmp	r3, #16
 8005af8:	d140      	bne.n	8005b7c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	212c      	movs	r1, #44	; 0x2c
 8005b00:	fb01 f303 	mul.w	r3, r1, r3
 8005b04:	4413      	add	r3, r2
 8005b06:	335c      	adds	r3, #92	; 0x5c
 8005b08:	2200      	movs	r2, #0
 8005b0a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	212c      	movs	r1, #44	; 0x2c
 8005b12:	fb01 f303 	mul.w	r3, r1, r3
 8005b16:	4413      	add	r3, r2
 8005b18:	3361      	adds	r3, #97	; 0x61
 8005b1a:	2203      	movs	r2, #3
 8005b1c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	212c      	movs	r1, #44	; 0x2c
 8005b24:	fb01 f303 	mul.w	r3, r1, r3
 8005b28:	4413      	add	r3, r2
 8005b2a:	333d      	adds	r3, #61	; 0x3d
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d112      	bne.n	8005b58 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	212c      	movs	r1, #44	; 0x2c
 8005b38:	fb01 f303 	mul.w	r3, r1, r3
 8005b3c:	4413      	add	r3, r2
 8005b3e:	333c      	adds	r3, #60	; 0x3c
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d108      	bne.n	8005b58 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	212c      	movs	r1, #44	; 0x2c
 8005b4c:	fb01 f303 	mul.w	r3, r1, r3
 8005b50:	4413      	add	r3, r2
 8005b52:	333d      	adds	r3, #61	; 0x3d
 8005b54:	2201      	movs	r2, #1
 8005b56:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	b2d2      	uxtb	r2, r2
 8005b60:	4611      	mov	r1, r2
 8005b62:	4618      	mov	r0, r3
 8005b64:	f006 f84b 	bl	800bbfe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	015a      	lsls	r2, r3, #5
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	4413      	add	r3, r2
 8005b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b74:	461a      	mov	r2, r3
 8005b76:	2310      	movs	r3, #16
 8005b78:	6093      	str	r3, [r2, #8]
}
 8005b7a:	e1e2      	b.n	8005f42 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	015a      	lsls	r2, r3, #5
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	4413      	add	r3, r2
 8005b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b8e:	2b80      	cmp	r3, #128	; 0x80
 8005b90:	d164      	bne.n	8005c5c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d111      	bne.n	8005bbe <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	212c      	movs	r1, #44	; 0x2c
 8005ba0:	fb01 f303 	mul.w	r3, r1, r3
 8005ba4:	4413      	add	r3, r2
 8005ba6:	3361      	adds	r3, #97	; 0x61
 8005ba8:	2206      	movs	r2, #6
 8005baa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	697a      	ldr	r2, [r7, #20]
 8005bb2:	b2d2      	uxtb	r2, r2
 8005bb4:	4611      	mov	r1, r2
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f006 f821 	bl	800bbfe <USB_HC_Halt>
 8005bbc:	e044      	b.n	8005c48 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	212c      	movs	r1, #44	; 0x2c
 8005bc4:	fb01 f303 	mul.w	r3, r1, r3
 8005bc8:	4413      	add	r3, r2
 8005bca:	335c      	adds	r3, #92	; 0x5c
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	1c5a      	adds	r2, r3, #1
 8005bd0:	6879      	ldr	r1, [r7, #4]
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	202c      	movs	r0, #44	; 0x2c
 8005bd6:	fb00 f303 	mul.w	r3, r0, r3
 8005bda:	440b      	add	r3, r1
 8005bdc:	335c      	adds	r3, #92	; 0x5c
 8005bde:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	212c      	movs	r1, #44	; 0x2c
 8005be6:	fb01 f303 	mul.w	r3, r1, r3
 8005bea:	4413      	add	r3, r2
 8005bec:	335c      	adds	r3, #92	; 0x5c
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d920      	bls.n	8005c36 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	212c      	movs	r1, #44	; 0x2c
 8005bfa:	fb01 f303 	mul.w	r3, r1, r3
 8005bfe:	4413      	add	r3, r2
 8005c00:	335c      	adds	r3, #92	; 0x5c
 8005c02:	2200      	movs	r2, #0
 8005c04:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	212c      	movs	r1, #44	; 0x2c
 8005c0c:	fb01 f303 	mul.w	r3, r1, r3
 8005c10:	4413      	add	r3, r2
 8005c12:	3360      	adds	r3, #96	; 0x60
 8005c14:	2204      	movs	r2, #4
 8005c16:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	b2d9      	uxtb	r1, r3
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	202c      	movs	r0, #44	; 0x2c
 8005c22:	fb00 f303 	mul.w	r3, r0, r3
 8005c26:	4413      	add	r3, r2
 8005c28:	3360      	adds	r3, #96	; 0x60
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f00c fe88 	bl	8012944 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005c34:	e008      	b.n	8005c48 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	212c      	movs	r1, #44	; 0x2c
 8005c3c:	fb01 f303 	mul.w	r3, r1, r3
 8005c40:	4413      	add	r3, r2
 8005c42:	3360      	adds	r3, #96	; 0x60
 8005c44:	2202      	movs	r2, #2
 8005c46:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	015a      	lsls	r2, r3, #5
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	4413      	add	r3, r2
 8005c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c54:	461a      	mov	r2, r3
 8005c56:	2380      	movs	r3, #128	; 0x80
 8005c58:	6093      	str	r3, [r2, #8]
}
 8005c5a:	e172      	b.n	8005f42 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	015a      	lsls	r2, r3, #5
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	4413      	add	r3, r2
 8005c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c72:	d11b      	bne.n	8005cac <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	212c      	movs	r1, #44	; 0x2c
 8005c7a:	fb01 f303 	mul.w	r3, r1, r3
 8005c7e:	4413      	add	r3, r2
 8005c80:	3361      	adds	r3, #97	; 0x61
 8005c82:	2208      	movs	r2, #8
 8005c84:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	b2d2      	uxtb	r2, r2
 8005c8e:	4611      	mov	r1, r2
 8005c90:	4618      	mov	r0, r3
 8005c92:	f005 ffb4 	bl	800bbfe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	015a      	lsls	r2, r3, #5
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ca8:	6093      	str	r3, [r2, #8]
}
 8005caa:	e14a      	b.n	8005f42 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	015a      	lsls	r2, r3, #5
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f003 0302 	and.w	r3, r3, #2
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	f040 813f 	bne.w	8005f42 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	212c      	movs	r1, #44	; 0x2c
 8005cca:	fb01 f303 	mul.w	r3, r1, r3
 8005cce:	4413      	add	r3, r2
 8005cd0:	3361      	adds	r3, #97	; 0x61
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d17d      	bne.n	8005dd4 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	212c      	movs	r1, #44	; 0x2c
 8005cde:	fb01 f303 	mul.w	r3, r1, r3
 8005ce2:	4413      	add	r3, r2
 8005ce4:	3360      	adds	r3, #96	; 0x60
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	212c      	movs	r1, #44	; 0x2c
 8005cf0:	fb01 f303 	mul.w	r3, r1, r3
 8005cf4:	4413      	add	r3, r2
 8005cf6:	333f      	adds	r3, #63	; 0x3f
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d00a      	beq.n	8005d14 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	212c      	movs	r1, #44	; 0x2c
 8005d04:	fb01 f303 	mul.w	r3, r1, r3
 8005d08:	4413      	add	r3, r2
 8005d0a:	333f      	adds	r3, #63	; 0x3f
 8005d0c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005d0e:	2b03      	cmp	r3, #3
 8005d10:	f040 8100 	bne.w	8005f14 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d113      	bne.n	8005d44 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	212c      	movs	r1, #44	; 0x2c
 8005d22:	fb01 f303 	mul.w	r3, r1, r3
 8005d26:	4413      	add	r3, r2
 8005d28:	3355      	adds	r3, #85	; 0x55
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	f083 0301 	eor.w	r3, r3, #1
 8005d30:	b2d8      	uxtb	r0, r3
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	212c      	movs	r1, #44	; 0x2c
 8005d38:	fb01 f303 	mul.w	r3, r1, r3
 8005d3c:	4413      	add	r3, r2
 8005d3e:	3355      	adds	r3, #85	; 0x55
 8005d40:	4602      	mov	r2, r0
 8005d42:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	f040 80e3 	bne.w	8005f14 <HCD_HC_OUT_IRQHandler+0x69c>
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	212c      	movs	r1, #44	; 0x2c
 8005d54:	fb01 f303 	mul.w	r3, r1, r3
 8005d58:	4413      	add	r3, r2
 8005d5a:	334c      	adds	r3, #76	; 0x4c
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	f000 80d8 	beq.w	8005f14 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	212c      	movs	r1, #44	; 0x2c
 8005d6a:	fb01 f303 	mul.w	r3, r1, r3
 8005d6e:	4413      	add	r3, r2
 8005d70:	334c      	adds	r3, #76	; 0x4c
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6879      	ldr	r1, [r7, #4]
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	202c      	movs	r0, #44	; 0x2c
 8005d7a:	fb00 f202 	mul.w	r2, r0, r2
 8005d7e:	440a      	add	r2, r1
 8005d80:	3240      	adds	r2, #64	; 0x40
 8005d82:	8812      	ldrh	r2, [r2, #0]
 8005d84:	4413      	add	r3, r2
 8005d86:	3b01      	subs	r3, #1
 8005d88:	6879      	ldr	r1, [r7, #4]
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	202c      	movs	r0, #44	; 0x2c
 8005d8e:	fb00 f202 	mul.w	r2, r0, r2
 8005d92:	440a      	add	r2, r1
 8005d94:	3240      	adds	r2, #64	; 0x40
 8005d96:	8812      	ldrh	r2, [r2, #0]
 8005d98:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d9c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f003 0301 	and.w	r3, r3, #1
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f000 80b5 	beq.w	8005f14 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	212c      	movs	r1, #44	; 0x2c
 8005db0:	fb01 f303 	mul.w	r3, r1, r3
 8005db4:	4413      	add	r3, r2
 8005db6:	3355      	adds	r3, #85	; 0x55
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	f083 0301 	eor.w	r3, r3, #1
 8005dbe:	b2d8      	uxtb	r0, r3
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	212c      	movs	r1, #44	; 0x2c
 8005dc6:	fb01 f303 	mul.w	r3, r1, r3
 8005dca:	4413      	add	r3, r2
 8005dcc:	3355      	adds	r3, #85	; 0x55
 8005dce:	4602      	mov	r2, r0
 8005dd0:	701a      	strb	r2, [r3, #0]
 8005dd2:	e09f      	b.n	8005f14 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	212c      	movs	r1, #44	; 0x2c
 8005dda:	fb01 f303 	mul.w	r3, r1, r3
 8005dde:	4413      	add	r3, r2
 8005de0:	3361      	adds	r3, #97	; 0x61
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	2b03      	cmp	r3, #3
 8005de6:	d109      	bne.n	8005dfc <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	212c      	movs	r1, #44	; 0x2c
 8005dee:	fb01 f303 	mul.w	r3, r1, r3
 8005df2:	4413      	add	r3, r2
 8005df4:	3360      	adds	r3, #96	; 0x60
 8005df6:	2202      	movs	r2, #2
 8005df8:	701a      	strb	r2, [r3, #0]
 8005dfa:	e08b      	b.n	8005f14 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	212c      	movs	r1, #44	; 0x2c
 8005e02:	fb01 f303 	mul.w	r3, r1, r3
 8005e06:	4413      	add	r3, r2
 8005e08:	3361      	adds	r3, #97	; 0x61
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	2b04      	cmp	r3, #4
 8005e0e:	d109      	bne.n	8005e24 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	212c      	movs	r1, #44	; 0x2c
 8005e16:	fb01 f303 	mul.w	r3, r1, r3
 8005e1a:	4413      	add	r3, r2
 8005e1c:	3360      	adds	r3, #96	; 0x60
 8005e1e:	2202      	movs	r2, #2
 8005e20:	701a      	strb	r2, [r3, #0]
 8005e22:	e077      	b.n	8005f14 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	212c      	movs	r1, #44	; 0x2c
 8005e2a:	fb01 f303 	mul.w	r3, r1, r3
 8005e2e:	4413      	add	r3, r2
 8005e30:	3361      	adds	r3, #97	; 0x61
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	2b05      	cmp	r3, #5
 8005e36:	d109      	bne.n	8005e4c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	212c      	movs	r1, #44	; 0x2c
 8005e3e:	fb01 f303 	mul.w	r3, r1, r3
 8005e42:	4413      	add	r3, r2
 8005e44:	3360      	adds	r3, #96	; 0x60
 8005e46:	2205      	movs	r2, #5
 8005e48:	701a      	strb	r2, [r3, #0]
 8005e4a:	e063      	b.n	8005f14 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	212c      	movs	r1, #44	; 0x2c
 8005e52:	fb01 f303 	mul.w	r3, r1, r3
 8005e56:	4413      	add	r3, r2
 8005e58:	3361      	adds	r3, #97	; 0x61
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	2b06      	cmp	r3, #6
 8005e5e:	d009      	beq.n	8005e74 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	212c      	movs	r1, #44	; 0x2c
 8005e66:	fb01 f303 	mul.w	r3, r1, r3
 8005e6a:	4413      	add	r3, r2
 8005e6c:	3361      	adds	r3, #97	; 0x61
 8005e6e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005e70:	2b08      	cmp	r3, #8
 8005e72:	d14f      	bne.n	8005f14 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	212c      	movs	r1, #44	; 0x2c
 8005e7a:	fb01 f303 	mul.w	r3, r1, r3
 8005e7e:	4413      	add	r3, r2
 8005e80:	335c      	adds	r3, #92	; 0x5c
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	1c5a      	adds	r2, r3, #1
 8005e86:	6879      	ldr	r1, [r7, #4]
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	202c      	movs	r0, #44	; 0x2c
 8005e8c:	fb00 f303 	mul.w	r3, r0, r3
 8005e90:	440b      	add	r3, r1
 8005e92:	335c      	adds	r3, #92	; 0x5c
 8005e94:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	212c      	movs	r1, #44	; 0x2c
 8005e9c:	fb01 f303 	mul.w	r3, r1, r3
 8005ea0:	4413      	add	r3, r2
 8005ea2:	335c      	adds	r3, #92	; 0x5c
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d912      	bls.n	8005ed0 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	212c      	movs	r1, #44	; 0x2c
 8005eb0:	fb01 f303 	mul.w	r3, r1, r3
 8005eb4:	4413      	add	r3, r2
 8005eb6:	335c      	adds	r3, #92	; 0x5c
 8005eb8:	2200      	movs	r2, #0
 8005eba:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	212c      	movs	r1, #44	; 0x2c
 8005ec2:	fb01 f303 	mul.w	r3, r1, r3
 8005ec6:	4413      	add	r3, r2
 8005ec8:	3360      	adds	r3, #96	; 0x60
 8005eca:	2204      	movs	r2, #4
 8005ecc:	701a      	strb	r2, [r3, #0]
 8005ece:	e021      	b.n	8005f14 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	212c      	movs	r1, #44	; 0x2c
 8005ed6:	fb01 f303 	mul.w	r3, r1, r3
 8005eda:	4413      	add	r3, r2
 8005edc:	3360      	adds	r3, #96	; 0x60
 8005ede:	2202      	movs	r2, #2
 8005ee0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	015a      	lsls	r2, r3, #5
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	4413      	add	r3, r2
 8005eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ef8:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f00:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	015a      	lsls	r2, r3, #5
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	4413      	add	r3, r2
 8005f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f0e:	461a      	mov	r2, r3
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	015a      	lsls	r2, r3, #5
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f20:	461a      	mov	r2, r3
 8005f22:	2302      	movs	r3, #2
 8005f24:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	b2d9      	uxtb	r1, r3
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	202c      	movs	r0, #44	; 0x2c
 8005f30:	fb00 f303 	mul.w	r3, r0, r3
 8005f34:	4413      	add	r3, r2
 8005f36:	3360      	adds	r3, #96	; 0x60
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f00c fd01 	bl	8012944 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005f42:	bf00      	nop
 8005f44:	3720      	adds	r7, #32
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b08a      	sub	sp, #40	; 0x28
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	f003 030f 	and.w	r3, r3, #15
 8005f6a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	0c5b      	lsrs	r3, r3, #17
 8005f70:	f003 030f 	and.w	r3, r3, #15
 8005f74:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	091b      	lsrs	r3, r3, #4
 8005f7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f7e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d004      	beq.n	8005f90 <HCD_RXQLVL_IRQHandler+0x46>
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	2b05      	cmp	r3, #5
 8005f8a:	f000 80a9 	beq.w	80060e0 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005f8e:	e0aa      	b.n	80060e6 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f000 80a6 	beq.w	80060e4 <HCD_RXQLVL_IRQHandler+0x19a>
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	212c      	movs	r1, #44	; 0x2c
 8005f9e:	fb01 f303 	mul.w	r3, r1, r3
 8005fa2:	4413      	add	r3, r2
 8005fa4:	3344      	adds	r3, #68	; 0x44
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f000 809b 	beq.w	80060e4 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	212c      	movs	r1, #44	; 0x2c
 8005fb4:	fb01 f303 	mul.w	r3, r1, r3
 8005fb8:	4413      	add	r3, r2
 8005fba:	3350      	adds	r3, #80	; 0x50
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	441a      	add	r2, r3
 8005fc2:	6879      	ldr	r1, [r7, #4]
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	202c      	movs	r0, #44	; 0x2c
 8005fc8:	fb00 f303 	mul.w	r3, r0, r3
 8005fcc:	440b      	add	r3, r1
 8005fce:	334c      	adds	r3, #76	; 0x4c
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d87a      	bhi.n	80060cc <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6818      	ldr	r0, [r3, #0]
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	212c      	movs	r1, #44	; 0x2c
 8005fe0:	fb01 f303 	mul.w	r3, r1, r3
 8005fe4:	4413      	add	r3, r2
 8005fe6:	3344      	adds	r3, #68	; 0x44
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	b292      	uxth	r2, r2
 8005fee:	4619      	mov	r1, r3
 8005ff0:	f005 f962 	bl	800b2b8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	212c      	movs	r1, #44	; 0x2c
 8005ffa:	fb01 f303 	mul.w	r3, r1, r3
 8005ffe:	4413      	add	r3, r2
 8006000:	3344      	adds	r3, #68	; 0x44
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	441a      	add	r2, r3
 8006008:	6879      	ldr	r1, [r7, #4]
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	202c      	movs	r0, #44	; 0x2c
 800600e:	fb00 f303 	mul.w	r3, r0, r3
 8006012:	440b      	add	r3, r1
 8006014:	3344      	adds	r3, #68	; 0x44
 8006016:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	212c      	movs	r1, #44	; 0x2c
 800601e:	fb01 f303 	mul.w	r3, r1, r3
 8006022:	4413      	add	r3, r2
 8006024:	3350      	adds	r3, #80	; 0x50
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	441a      	add	r2, r3
 800602c:	6879      	ldr	r1, [r7, #4]
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	202c      	movs	r0, #44	; 0x2c
 8006032:	fb00 f303 	mul.w	r3, r0, r3
 8006036:	440b      	add	r3, r1
 8006038:	3350      	adds	r3, #80	; 0x50
 800603a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	015a      	lsls	r2, r3, #5
 8006040:	6a3b      	ldr	r3, [r7, #32]
 8006042:	4413      	add	r3, r2
 8006044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	0cdb      	lsrs	r3, r3, #19
 800604c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006050:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	212c      	movs	r1, #44	; 0x2c
 8006058:	fb01 f303 	mul.w	r3, r1, r3
 800605c:	4413      	add	r3, r2
 800605e:	3340      	adds	r3, #64	; 0x40
 8006060:	881b      	ldrh	r3, [r3, #0]
 8006062:	461a      	mov	r2, r3
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	4293      	cmp	r3, r2
 8006068:	d13c      	bne.n	80060e4 <HCD_RXQLVL_IRQHandler+0x19a>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d039      	beq.n	80060e4 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	015a      	lsls	r2, r3, #5
 8006074:	6a3b      	ldr	r3, [r7, #32]
 8006076:	4413      	add	r3, r2
 8006078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006086:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800608e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	015a      	lsls	r2, r3, #5
 8006094:	6a3b      	ldr	r3, [r7, #32]
 8006096:	4413      	add	r3, r2
 8006098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800609c:	461a      	mov	r2, r3
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	212c      	movs	r1, #44	; 0x2c
 80060a8:	fb01 f303 	mul.w	r3, r1, r3
 80060ac:	4413      	add	r3, r2
 80060ae:	3354      	adds	r3, #84	; 0x54
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	f083 0301 	eor.w	r3, r3, #1
 80060b6:	b2d8      	uxtb	r0, r3
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	212c      	movs	r1, #44	; 0x2c
 80060be:	fb01 f303 	mul.w	r3, r1, r3
 80060c2:	4413      	add	r3, r2
 80060c4:	3354      	adds	r3, #84	; 0x54
 80060c6:	4602      	mov	r2, r0
 80060c8:	701a      	strb	r2, [r3, #0]
      break;
 80060ca:	e00b      	b.n	80060e4 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	212c      	movs	r1, #44	; 0x2c
 80060d2:	fb01 f303 	mul.w	r3, r1, r3
 80060d6:	4413      	add	r3, r2
 80060d8:	3360      	adds	r3, #96	; 0x60
 80060da:	2204      	movs	r2, #4
 80060dc:	701a      	strb	r2, [r3, #0]
      break;
 80060de:	e001      	b.n	80060e4 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80060e0:	bf00      	nop
 80060e2:	e000      	b.n	80060e6 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80060e4:	bf00      	nop
  }
}
 80060e6:	bf00      	nop
 80060e8:	3728      	adds	r7, #40	; 0x28
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b086      	sub	sp, #24
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800611a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f003 0302 	and.w	r3, r3, #2
 8006122:	2b02      	cmp	r3, #2
 8006124:	d10b      	bne.n	800613e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f003 0301 	and.w	r3, r3, #1
 800612c:	2b01      	cmp	r3, #1
 800612e:	d102      	bne.n	8006136 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f00c fbeb 	bl	801290c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	f043 0302 	orr.w	r3, r3, #2
 800613c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f003 0308 	and.w	r3, r3, #8
 8006144:	2b08      	cmp	r3, #8
 8006146:	d132      	bne.n	80061ae <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	f043 0308 	orr.w	r3, r3, #8
 800614e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f003 0304 	and.w	r3, r3, #4
 8006156:	2b04      	cmp	r3, #4
 8006158:	d126      	bne.n	80061a8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	2b02      	cmp	r3, #2
 8006160:	d113      	bne.n	800618a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006168:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800616c:	d106      	bne.n	800617c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2102      	movs	r1, #2
 8006174:	4618      	mov	r0, r3
 8006176:	f005 fa07 	bl	800b588 <USB_InitFSLSPClkSel>
 800617a:	e011      	b.n	80061a0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2101      	movs	r1, #1
 8006182:	4618      	mov	r0, r3
 8006184:	f005 fa00 	bl	800b588 <USB_InitFSLSPClkSel>
 8006188:	e00a      	b.n	80061a0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	2b01      	cmp	r3, #1
 8006190:	d106      	bne.n	80061a0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006198:	461a      	mov	r2, r3
 800619a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800619e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f00c fbe1 	bl	8012968 <HAL_HCD_PortEnabled_Callback>
 80061a6:	e002      	b.n	80061ae <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f00c fbeb 	bl	8012984 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f003 0320 	and.w	r3, r3, #32
 80061b4:	2b20      	cmp	r3, #32
 80061b6:	d103      	bne.n	80061c0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	f043 0320 	orr.w	r3, r3, #32
 80061be:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80061c6:	461a      	mov	r2, r3
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	6013      	str	r3, [r2, #0]
}
 80061cc:	bf00      	nop
 80061ce:	3718      	adds	r7, #24
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80061dc:	4b19      	ldr	r3, [pc, #100]	; (8006244 <HAL_PWREx_ConfigSupply+0x70>)
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	f003 0304 	and.w	r3, r3, #4
 80061e4:	2b04      	cmp	r3, #4
 80061e6:	d00a      	beq.n	80061fe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80061e8:	4b16      	ldr	r3, [pc, #88]	; (8006244 <HAL_PWREx_ConfigSupply+0x70>)
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	f003 0307 	and.w	r3, r3, #7
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d001      	beq.n	80061fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e01f      	b.n	800623a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80061fa:	2300      	movs	r3, #0
 80061fc:	e01d      	b.n	800623a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80061fe:	4b11      	ldr	r3, [pc, #68]	; (8006244 <HAL_PWREx_ConfigSupply+0x70>)
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	f023 0207 	bic.w	r2, r3, #7
 8006206:	490f      	ldr	r1, [pc, #60]	; (8006244 <HAL_PWREx_ConfigSupply+0x70>)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4313      	orrs	r3, r2
 800620c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800620e:	f7fb fab1 	bl	8001774 <HAL_GetTick>
 8006212:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006214:	e009      	b.n	800622a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006216:	f7fb faad 	bl	8001774 <HAL_GetTick>
 800621a:	4602      	mov	r2, r0
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006224:	d901      	bls.n	800622a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e007      	b.n	800623a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800622a:	4b06      	ldr	r3, [pc, #24]	; (8006244 <HAL_PWREx_ConfigSupply+0x70>)
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006232:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006236:	d1ee      	bne.n	8006216 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3710      	adds	r7, #16
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	58024800 	.word	0x58024800

08006248 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006248:	b480      	push	{r7}
 800624a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800624c:	4b05      	ldr	r3, [pc, #20]	; (8006264 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	4a04      	ldr	r2, [pc, #16]	; (8006264 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006252:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006256:	60d3      	str	r3, [r2, #12]
}
 8006258:	bf00      	nop
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	58024800 	.word	0x58024800

08006268 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b08c      	sub	sp, #48	; 0x30
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d101      	bne.n	800627a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e39d      	b.n	80069b6 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0301 	and.w	r3, r3, #1
 8006282:	2b00      	cmp	r3, #0
 8006284:	f000 8087 	beq.w	8006396 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006288:	4b88      	ldr	r3, [pc, #544]	; (80064ac <HAL_RCC_OscConfig+0x244>)
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006290:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006292:	4b86      	ldr	r3, [pc, #536]	; (80064ac <HAL_RCC_OscConfig+0x244>)
 8006294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006296:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629a:	2b10      	cmp	r3, #16
 800629c:	d007      	beq.n	80062ae <HAL_RCC_OscConfig+0x46>
 800629e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a0:	2b18      	cmp	r3, #24
 80062a2:	d110      	bne.n	80062c6 <HAL_RCC_OscConfig+0x5e>
 80062a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a6:	f003 0303 	and.w	r3, r3, #3
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d10b      	bne.n	80062c6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062ae:	4b7f      	ldr	r3, [pc, #508]	; (80064ac <HAL_RCC_OscConfig+0x244>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d06c      	beq.n	8006394 <HAL_RCC_OscConfig+0x12c>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d168      	bne.n	8006394 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e377      	b.n	80069b6 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062ce:	d106      	bne.n	80062de <HAL_RCC_OscConfig+0x76>
 80062d0:	4b76      	ldr	r3, [pc, #472]	; (80064ac <HAL_RCC_OscConfig+0x244>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a75      	ldr	r2, [pc, #468]	; (80064ac <HAL_RCC_OscConfig+0x244>)
 80062d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062da:	6013      	str	r3, [r2, #0]
 80062dc:	e02e      	b.n	800633c <HAL_RCC_OscConfig+0xd4>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d10c      	bne.n	8006300 <HAL_RCC_OscConfig+0x98>
 80062e6:	4b71      	ldr	r3, [pc, #452]	; (80064ac <HAL_RCC_OscConfig+0x244>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a70      	ldr	r2, [pc, #448]	; (80064ac <HAL_RCC_OscConfig+0x244>)
 80062ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062f0:	6013      	str	r3, [r2, #0]
 80062f2:	4b6e      	ldr	r3, [pc, #440]	; (80064ac <HAL_RCC_OscConfig+0x244>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a6d      	ldr	r2, [pc, #436]	; (80064ac <HAL_RCC_OscConfig+0x244>)
 80062f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062fc:	6013      	str	r3, [r2, #0]
 80062fe:	e01d      	b.n	800633c <HAL_RCC_OscConfig+0xd4>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006308:	d10c      	bne.n	8006324 <HAL_RCC_OscConfig+0xbc>
 800630a:	4b68      	ldr	r3, [pc, #416]	; (80064ac <HAL_RCC_OscConfig+0x244>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a67      	ldr	r2, [pc, #412]	; (80064ac <HAL_RCC_OscConfig+0x244>)
 8006310:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006314:	6013      	str	r3, [r2, #0]
 8006316:	4b65      	ldr	r3, [pc, #404]	; (80064ac <HAL_RCC_OscConfig+0x244>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a64      	ldr	r2, [pc, #400]	; (80064ac <HAL_RCC_OscConfig+0x244>)
 800631c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006320:	6013      	str	r3, [r2, #0]
 8006322:	e00b      	b.n	800633c <HAL_RCC_OscConfig+0xd4>
 8006324:	4b61      	ldr	r3, [pc, #388]	; (80064ac <HAL_RCC_OscConfig+0x244>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a60      	ldr	r2, [pc, #384]	; (80064ac <HAL_RCC_OscConfig+0x244>)
 800632a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800632e:	6013      	str	r3, [r2, #0]
 8006330:	4b5e      	ldr	r3, [pc, #376]	; (80064ac <HAL_RCC_OscConfig+0x244>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a5d      	ldr	r2, [pc, #372]	; (80064ac <HAL_RCC_OscConfig+0x244>)
 8006336:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800633a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d013      	beq.n	800636c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006344:	f7fb fa16 	bl	8001774 <HAL_GetTick>
 8006348:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800634a:	e008      	b.n	800635e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800634c:	f7fb fa12 	bl	8001774 <HAL_GetTick>
 8006350:	4602      	mov	r2, r0
 8006352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	2b64      	cmp	r3, #100	; 0x64
 8006358:	d901      	bls.n	800635e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e32b      	b.n	80069b6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800635e:	4b53      	ldr	r3, [pc, #332]	; (80064ac <HAL_RCC_OscConfig+0x244>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d0f0      	beq.n	800634c <HAL_RCC_OscConfig+0xe4>
 800636a:	e014      	b.n	8006396 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800636c:	f7fb fa02 	bl	8001774 <HAL_GetTick>
 8006370:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006372:	e008      	b.n	8006386 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006374:	f7fb f9fe 	bl	8001774 <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	2b64      	cmp	r3, #100	; 0x64
 8006380:	d901      	bls.n	8006386 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e317      	b.n	80069b6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006386:	4b49      	ldr	r3, [pc, #292]	; (80064ac <HAL_RCC_OscConfig+0x244>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1f0      	bne.n	8006374 <HAL_RCC_OscConfig+0x10c>
 8006392:	e000      	b.n	8006396 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 0302 	and.w	r3, r3, #2
 800639e:	2b00      	cmp	r3, #0
 80063a0:	f000 808c 	beq.w	80064bc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063a4:	4b41      	ldr	r3, [pc, #260]	; (80064ac <HAL_RCC_OscConfig+0x244>)
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063ac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80063ae:	4b3f      	ldr	r3, [pc, #252]	; (80064ac <HAL_RCC_OscConfig+0x244>)
 80063b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80063b4:	6a3b      	ldr	r3, [r7, #32]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d007      	beq.n	80063ca <HAL_RCC_OscConfig+0x162>
 80063ba:	6a3b      	ldr	r3, [r7, #32]
 80063bc:	2b18      	cmp	r3, #24
 80063be:	d137      	bne.n	8006430 <HAL_RCC_OscConfig+0x1c8>
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	f003 0303 	and.w	r3, r3, #3
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d132      	bne.n	8006430 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063ca:	4b38      	ldr	r3, [pc, #224]	; (80064ac <HAL_RCC_OscConfig+0x244>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0304 	and.w	r3, r3, #4
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d005      	beq.n	80063e2 <HAL_RCC_OscConfig+0x17a>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d101      	bne.n	80063e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e2e9      	b.n	80069b6 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80063e2:	4b32      	ldr	r3, [pc, #200]	; (80064ac <HAL_RCC_OscConfig+0x244>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f023 0219 	bic.w	r2, r3, #25
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	492f      	ldr	r1, [pc, #188]	; (80064ac <HAL_RCC_OscConfig+0x244>)
 80063f0:	4313      	orrs	r3, r2
 80063f2:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80063f4:	f7fb f9be 	bl	8001774 <HAL_GetTick>
 80063f8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063fa:	e008      	b.n	800640e <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063fc:	f7fb f9ba 	bl	8001774 <HAL_GetTick>
 8006400:	4602      	mov	r2, r0
 8006402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	2b02      	cmp	r3, #2
 8006408:	d901      	bls.n	800640e <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	e2d3      	b.n	80069b6 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800640e:	4b27      	ldr	r3, [pc, #156]	; (80064ac <HAL_RCC_OscConfig+0x244>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 0304 	and.w	r3, r3, #4
 8006416:	2b00      	cmp	r3, #0
 8006418:	d0f0      	beq.n	80063fc <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800641a:	4b24      	ldr	r3, [pc, #144]	; (80064ac <HAL_RCC_OscConfig+0x244>)
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	061b      	lsls	r3, r3, #24
 8006428:	4920      	ldr	r1, [pc, #128]	; (80064ac <HAL_RCC_OscConfig+0x244>)
 800642a:	4313      	orrs	r3, r2
 800642c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800642e:	e045      	b.n	80064bc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d026      	beq.n	8006486 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006438:	4b1c      	ldr	r3, [pc, #112]	; (80064ac <HAL_RCC_OscConfig+0x244>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f023 0219 	bic.w	r2, r3, #25
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	4919      	ldr	r1, [pc, #100]	; (80064ac <HAL_RCC_OscConfig+0x244>)
 8006446:	4313      	orrs	r3, r2
 8006448:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800644a:	f7fb f993 	bl	8001774 <HAL_GetTick>
 800644e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006450:	e008      	b.n	8006464 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006452:	f7fb f98f 	bl	8001774 <HAL_GetTick>
 8006456:	4602      	mov	r2, r0
 8006458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	2b02      	cmp	r3, #2
 800645e:	d901      	bls.n	8006464 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006460:	2303      	movs	r3, #3
 8006462:	e2a8      	b.n	80069b6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006464:	4b11      	ldr	r3, [pc, #68]	; (80064ac <HAL_RCC_OscConfig+0x244>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0304 	and.w	r3, r3, #4
 800646c:	2b00      	cmp	r3, #0
 800646e:	d0f0      	beq.n	8006452 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006470:	4b0e      	ldr	r3, [pc, #56]	; (80064ac <HAL_RCC_OscConfig+0x244>)
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	061b      	lsls	r3, r3, #24
 800647e:	490b      	ldr	r1, [pc, #44]	; (80064ac <HAL_RCC_OscConfig+0x244>)
 8006480:	4313      	orrs	r3, r2
 8006482:	604b      	str	r3, [r1, #4]
 8006484:	e01a      	b.n	80064bc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006486:	4b09      	ldr	r3, [pc, #36]	; (80064ac <HAL_RCC_OscConfig+0x244>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a08      	ldr	r2, [pc, #32]	; (80064ac <HAL_RCC_OscConfig+0x244>)
 800648c:	f023 0301 	bic.w	r3, r3, #1
 8006490:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006492:	f7fb f96f 	bl	8001774 <HAL_GetTick>
 8006496:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006498:	e00a      	b.n	80064b0 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800649a:	f7fb f96b 	bl	8001774 <HAL_GetTick>
 800649e:	4602      	mov	r2, r0
 80064a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a2:	1ad3      	subs	r3, r2, r3
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d903      	bls.n	80064b0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	e284      	b.n	80069b6 <HAL_RCC_OscConfig+0x74e>
 80064ac:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80064b0:	4b96      	ldr	r3, [pc, #600]	; (800670c <HAL_RCC_OscConfig+0x4a4>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0304 	and.w	r3, r3, #4
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d1ee      	bne.n	800649a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 0310 	and.w	r3, r3, #16
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d06a      	beq.n	800659e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064c8:	4b90      	ldr	r3, [pc, #576]	; (800670c <HAL_RCC_OscConfig+0x4a4>)
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064d0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80064d2:	4b8e      	ldr	r3, [pc, #568]	; (800670c <HAL_RCC_OscConfig+0x4a4>)
 80064d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	2b08      	cmp	r3, #8
 80064dc:	d007      	beq.n	80064ee <HAL_RCC_OscConfig+0x286>
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	2b18      	cmp	r3, #24
 80064e2:	d11b      	bne.n	800651c <HAL_RCC_OscConfig+0x2b4>
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	f003 0303 	and.w	r3, r3, #3
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d116      	bne.n	800651c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80064ee:	4b87      	ldr	r3, [pc, #540]	; (800670c <HAL_RCC_OscConfig+0x4a4>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d005      	beq.n	8006506 <HAL_RCC_OscConfig+0x29e>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	69db      	ldr	r3, [r3, #28]
 80064fe:	2b80      	cmp	r3, #128	; 0x80
 8006500:	d001      	beq.n	8006506 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e257      	b.n	80069b6 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006506:	4b81      	ldr	r3, [pc, #516]	; (800670c <HAL_RCC_OscConfig+0x4a4>)
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a1b      	ldr	r3, [r3, #32]
 8006512:	061b      	lsls	r3, r3, #24
 8006514:	497d      	ldr	r1, [pc, #500]	; (800670c <HAL_RCC_OscConfig+0x4a4>)
 8006516:	4313      	orrs	r3, r2
 8006518:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800651a:	e040      	b.n	800659e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	69db      	ldr	r3, [r3, #28]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d023      	beq.n	800656c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006524:	4b79      	ldr	r3, [pc, #484]	; (800670c <HAL_RCC_OscConfig+0x4a4>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a78      	ldr	r2, [pc, #480]	; (800670c <HAL_RCC_OscConfig+0x4a4>)
 800652a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800652e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006530:	f7fb f920 	bl	8001774 <HAL_GetTick>
 8006534:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006536:	e008      	b.n	800654a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006538:	f7fb f91c 	bl	8001774 <HAL_GetTick>
 800653c:	4602      	mov	r2, r0
 800653e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	2b02      	cmp	r3, #2
 8006544:	d901      	bls.n	800654a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	e235      	b.n	80069b6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800654a:	4b70      	ldr	r3, [pc, #448]	; (800670c <HAL_RCC_OscConfig+0x4a4>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006552:	2b00      	cmp	r3, #0
 8006554:	d0f0      	beq.n	8006538 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006556:	4b6d      	ldr	r3, [pc, #436]	; (800670c <HAL_RCC_OscConfig+0x4a4>)
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a1b      	ldr	r3, [r3, #32]
 8006562:	061b      	lsls	r3, r3, #24
 8006564:	4969      	ldr	r1, [pc, #420]	; (800670c <HAL_RCC_OscConfig+0x4a4>)
 8006566:	4313      	orrs	r3, r2
 8006568:	60cb      	str	r3, [r1, #12]
 800656a:	e018      	b.n	800659e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800656c:	4b67      	ldr	r3, [pc, #412]	; (800670c <HAL_RCC_OscConfig+0x4a4>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a66      	ldr	r2, [pc, #408]	; (800670c <HAL_RCC_OscConfig+0x4a4>)
 8006572:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006578:	f7fb f8fc 	bl	8001774 <HAL_GetTick>
 800657c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800657e:	e008      	b.n	8006592 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006580:	f7fb f8f8 	bl	8001774 <HAL_GetTick>
 8006584:	4602      	mov	r2, r0
 8006586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	2b02      	cmp	r3, #2
 800658c:	d901      	bls.n	8006592 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e211      	b.n	80069b6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006592:	4b5e      	ldr	r3, [pc, #376]	; (800670c <HAL_RCC_OscConfig+0x4a4>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1f0      	bne.n	8006580 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0308 	and.w	r3, r3, #8
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d036      	beq.n	8006618 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d019      	beq.n	80065e6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065b2:	4b56      	ldr	r3, [pc, #344]	; (800670c <HAL_RCC_OscConfig+0x4a4>)
 80065b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065b6:	4a55      	ldr	r2, [pc, #340]	; (800670c <HAL_RCC_OscConfig+0x4a4>)
 80065b8:	f043 0301 	orr.w	r3, r3, #1
 80065bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065be:	f7fb f8d9 	bl	8001774 <HAL_GetTick>
 80065c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80065c4:	e008      	b.n	80065d8 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065c6:	f7fb f8d5 	bl	8001774 <HAL_GetTick>
 80065ca:	4602      	mov	r2, r0
 80065cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	d901      	bls.n	80065d8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e1ee      	b.n	80069b6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80065d8:	4b4c      	ldr	r3, [pc, #304]	; (800670c <HAL_RCC_OscConfig+0x4a4>)
 80065da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065dc:	f003 0302 	and.w	r3, r3, #2
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d0f0      	beq.n	80065c6 <HAL_RCC_OscConfig+0x35e>
 80065e4:	e018      	b.n	8006618 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065e6:	4b49      	ldr	r3, [pc, #292]	; (800670c <HAL_RCC_OscConfig+0x4a4>)
 80065e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065ea:	4a48      	ldr	r2, [pc, #288]	; (800670c <HAL_RCC_OscConfig+0x4a4>)
 80065ec:	f023 0301 	bic.w	r3, r3, #1
 80065f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065f2:	f7fb f8bf 	bl	8001774 <HAL_GetTick>
 80065f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80065f8:	e008      	b.n	800660c <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065fa:	f7fb f8bb 	bl	8001774 <HAL_GetTick>
 80065fe:	4602      	mov	r2, r0
 8006600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	2b02      	cmp	r3, #2
 8006606:	d901      	bls.n	800660c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8006608:	2303      	movs	r3, #3
 800660a:	e1d4      	b.n	80069b6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800660c:	4b3f      	ldr	r3, [pc, #252]	; (800670c <HAL_RCC_OscConfig+0x4a4>)
 800660e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006610:	f003 0302 	and.w	r3, r3, #2
 8006614:	2b00      	cmp	r3, #0
 8006616:	d1f0      	bne.n	80065fa <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 0320 	and.w	r3, r3, #32
 8006620:	2b00      	cmp	r3, #0
 8006622:	d036      	beq.n	8006692 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	699b      	ldr	r3, [r3, #24]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d019      	beq.n	8006660 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800662c:	4b37      	ldr	r3, [pc, #220]	; (800670c <HAL_RCC_OscConfig+0x4a4>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a36      	ldr	r2, [pc, #216]	; (800670c <HAL_RCC_OscConfig+0x4a4>)
 8006632:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006636:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006638:	f7fb f89c 	bl	8001774 <HAL_GetTick>
 800663c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800663e:	e008      	b.n	8006652 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006640:	f7fb f898 	bl	8001774 <HAL_GetTick>
 8006644:	4602      	mov	r2, r0
 8006646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006648:	1ad3      	subs	r3, r2, r3
 800664a:	2b02      	cmp	r3, #2
 800664c:	d901      	bls.n	8006652 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e1b1      	b.n	80069b6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006652:	4b2e      	ldr	r3, [pc, #184]	; (800670c <HAL_RCC_OscConfig+0x4a4>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800665a:	2b00      	cmp	r3, #0
 800665c:	d0f0      	beq.n	8006640 <HAL_RCC_OscConfig+0x3d8>
 800665e:	e018      	b.n	8006692 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006660:	4b2a      	ldr	r3, [pc, #168]	; (800670c <HAL_RCC_OscConfig+0x4a4>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a29      	ldr	r2, [pc, #164]	; (800670c <HAL_RCC_OscConfig+0x4a4>)
 8006666:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800666a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800666c:	f7fb f882 	bl	8001774 <HAL_GetTick>
 8006670:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006672:	e008      	b.n	8006686 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006674:	f7fb f87e 	bl	8001774 <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	2b02      	cmp	r3, #2
 8006680:	d901      	bls.n	8006686 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e197      	b.n	80069b6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006686:	4b21      	ldr	r3, [pc, #132]	; (800670c <HAL_RCC_OscConfig+0x4a4>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1f0      	bne.n	8006674 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 0304 	and.w	r3, r3, #4
 800669a:	2b00      	cmp	r3, #0
 800669c:	f000 8086 	beq.w	80067ac <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80066a0:	4b1b      	ldr	r3, [pc, #108]	; (8006710 <HAL_RCC_OscConfig+0x4a8>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a1a      	ldr	r2, [pc, #104]	; (8006710 <HAL_RCC_OscConfig+0x4a8>)
 80066a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80066ac:	f7fb f862 	bl	8001774 <HAL_GetTick>
 80066b0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066b2:	e008      	b.n	80066c6 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80066b4:	f7fb f85e 	bl	8001774 <HAL_GetTick>
 80066b8:	4602      	mov	r2, r0
 80066ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	2b64      	cmp	r3, #100	; 0x64
 80066c0:	d901      	bls.n	80066c6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e177      	b.n	80069b6 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066c6:	4b12      	ldr	r3, [pc, #72]	; (8006710 <HAL_RCC_OscConfig+0x4a8>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d0f0      	beq.n	80066b4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d106      	bne.n	80066e8 <HAL_RCC_OscConfig+0x480>
 80066da:	4b0c      	ldr	r3, [pc, #48]	; (800670c <HAL_RCC_OscConfig+0x4a4>)
 80066dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066de:	4a0b      	ldr	r2, [pc, #44]	; (800670c <HAL_RCC_OscConfig+0x4a4>)
 80066e0:	f043 0301 	orr.w	r3, r3, #1
 80066e4:	6713      	str	r3, [r2, #112]	; 0x70
 80066e6:	e032      	b.n	800674e <HAL_RCC_OscConfig+0x4e6>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d111      	bne.n	8006714 <HAL_RCC_OscConfig+0x4ac>
 80066f0:	4b06      	ldr	r3, [pc, #24]	; (800670c <HAL_RCC_OscConfig+0x4a4>)
 80066f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066f4:	4a05      	ldr	r2, [pc, #20]	; (800670c <HAL_RCC_OscConfig+0x4a4>)
 80066f6:	f023 0301 	bic.w	r3, r3, #1
 80066fa:	6713      	str	r3, [r2, #112]	; 0x70
 80066fc:	4b03      	ldr	r3, [pc, #12]	; (800670c <HAL_RCC_OscConfig+0x4a4>)
 80066fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006700:	4a02      	ldr	r2, [pc, #8]	; (800670c <HAL_RCC_OscConfig+0x4a4>)
 8006702:	f023 0304 	bic.w	r3, r3, #4
 8006706:	6713      	str	r3, [r2, #112]	; 0x70
 8006708:	e021      	b.n	800674e <HAL_RCC_OscConfig+0x4e6>
 800670a:	bf00      	nop
 800670c:	58024400 	.word	0x58024400
 8006710:	58024800 	.word	0x58024800
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	2b05      	cmp	r3, #5
 800671a:	d10c      	bne.n	8006736 <HAL_RCC_OscConfig+0x4ce>
 800671c:	4b83      	ldr	r3, [pc, #524]	; (800692c <HAL_RCC_OscConfig+0x6c4>)
 800671e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006720:	4a82      	ldr	r2, [pc, #520]	; (800692c <HAL_RCC_OscConfig+0x6c4>)
 8006722:	f043 0304 	orr.w	r3, r3, #4
 8006726:	6713      	str	r3, [r2, #112]	; 0x70
 8006728:	4b80      	ldr	r3, [pc, #512]	; (800692c <HAL_RCC_OscConfig+0x6c4>)
 800672a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800672c:	4a7f      	ldr	r2, [pc, #508]	; (800692c <HAL_RCC_OscConfig+0x6c4>)
 800672e:	f043 0301 	orr.w	r3, r3, #1
 8006732:	6713      	str	r3, [r2, #112]	; 0x70
 8006734:	e00b      	b.n	800674e <HAL_RCC_OscConfig+0x4e6>
 8006736:	4b7d      	ldr	r3, [pc, #500]	; (800692c <HAL_RCC_OscConfig+0x6c4>)
 8006738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800673a:	4a7c      	ldr	r2, [pc, #496]	; (800692c <HAL_RCC_OscConfig+0x6c4>)
 800673c:	f023 0301 	bic.w	r3, r3, #1
 8006740:	6713      	str	r3, [r2, #112]	; 0x70
 8006742:	4b7a      	ldr	r3, [pc, #488]	; (800692c <HAL_RCC_OscConfig+0x6c4>)
 8006744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006746:	4a79      	ldr	r2, [pc, #484]	; (800692c <HAL_RCC_OscConfig+0x6c4>)
 8006748:	f023 0304 	bic.w	r3, r3, #4
 800674c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d015      	beq.n	8006782 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006756:	f7fb f80d 	bl	8001774 <HAL_GetTick>
 800675a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800675c:	e00a      	b.n	8006774 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800675e:	f7fb f809 	bl	8001774 <HAL_GetTick>
 8006762:	4602      	mov	r2, r0
 8006764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	f241 3288 	movw	r2, #5000	; 0x1388
 800676c:	4293      	cmp	r3, r2
 800676e:	d901      	bls.n	8006774 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8006770:	2303      	movs	r3, #3
 8006772:	e120      	b.n	80069b6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006774:	4b6d      	ldr	r3, [pc, #436]	; (800692c <HAL_RCC_OscConfig+0x6c4>)
 8006776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006778:	f003 0302 	and.w	r3, r3, #2
 800677c:	2b00      	cmp	r3, #0
 800677e:	d0ee      	beq.n	800675e <HAL_RCC_OscConfig+0x4f6>
 8006780:	e014      	b.n	80067ac <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006782:	f7fa fff7 	bl	8001774 <HAL_GetTick>
 8006786:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006788:	e00a      	b.n	80067a0 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800678a:	f7fa fff3 	bl	8001774 <HAL_GetTick>
 800678e:	4602      	mov	r2, r0
 8006790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	f241 3288 	movw	r2, #5000	; 0x1388
 8006798:	4293      	cmp	r3, r2
 800679a:	d901      	bls.n	80067a0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800679c:	2303      	movs	r3, #3
 800679e:	e10a      	b.n	80069b6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80067a0:	4b62      	ldr	r3, [pc, #392]	; (800692c <HAL_RCC_OscConfig+0x6c4>)
 80067a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a4:	f003 0302 	and.w	r3, r3, #2
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d1ee      	bne.n	800678a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f000 80ff 	beq.w	80069b4 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80067b6:	4b5d      	ldr	r3, [pc, #372]	; (800692c <HAL_RCC_OscConfig+0x6c4>)
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067be:	2b18      	cmp	r3, #24
 80067c0:	f000 80ba 	beq.w	8006938 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	f040 8095 	bne.w	80068f8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067ce:	4b57      	ldr	r3, [pc, #348]	; (800692c <HAL_RCC_OscConfig+0x6c4>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a56      	ldr	r2, [pc, #344]	; (800692c <HAL_RCC_OscConfig+0x6c4>)
 80067d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067da:	f7fa ffcb 	bl	8001774 <HAL_GetTick>
 80067de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80067e0:	e008      	b.n	80067f4 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067e2:	f7fa ffc7 	bl	8001774 <HAL_GetTick>
 80067e6:	4602      	mov	r2, r0
 80067e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d901      	bls.n	80067f4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80067f0:	2303      	movs	r3, #3
 80067f2:	e0e0      	b.n	80069b6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80067f4:	4b4d      	ldr	r3, [pc, #308]	; (800692c <HAL_RCC_OscConfig+0x6c4>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d1f0      	bne.n	80067e2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006800:	4b4a      	ldr	r3, [pc, #296]	; (800692c <HAL_RCC_OscConfig+0x6c4>)
 8006802:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006804:	4b4a      	ldr	r3, [pc, #296]	; (8006930 <HAL_RCC_OscConfig+0x6c8>)
 8006806:	4013      	ands	r3, r2
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006810:	0112      	lsls	r2, r2, #4
 8006812:	430a      	orrs	r2, r1
 8006814:	4945      	ldr	r1, [pc, #276]	; (800692c <HAL_RCC_OscConfig+0x6c4>)
 8006816:	4313      	orrs	r3, r2
 8006818:	628b      	str	r3, [r1, #40]	; 0x28
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800681e:	3b01      	subs	r3, #1
 8006820:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006828:	3b01      	subs	r3, #1
 800682a:	025b      	lsls	r3, r3, #9
 800682c:	b29b      	uxth	r3, r3
 800682e:	431a      	orrs	r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006834:	3b01      	subs	r3, #1
 8006836:	041b      	lsls	r3, r3, #16
 8006838:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800683c:	431a      	orrs	r2, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006842:	3b01      	subs	r3, #1
 8006844:	061b      	lsls	r3, r3, #24
 8006846:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800684a:	4938      	ldr	r1, [pc, #224]	; (800692c <HAL_RCC_OscConfig+0x6c4>)
 800684c:	4313      	orrs	r3, r2
 800684e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006850:	4b36      	ldr	r3, [pc, #216]	; (800692c <HAL_RCC_OscConfig+0x6c4>)
 8006852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006854:	4a35      	ldr	r2, [pc, #212]	; (800692c <HAL_RCC_OscConfig+0x6c4>)
 8006856:	f023 0301 	bic.w	r3, r3, #1
 800685a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800685c:	4b33      	ldr	r3, [pc, #204]	; (800692c <HAL_RCC_OscConfig+0x6c4>)
 800685e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006860:	4b34      	ldr	r3, [pc, #208]	; (8006934 <HAL_RCC_OscConfig+0x6cc>)
 8006862:	4013      	ands	r3, r2
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006868:	00d2      	lsls	r2, r2, #3
 800686a:	4930      	ldr	r1, [pc, #192]	; (800692c <HAL_RCC_OscConfig+0x6c4>)
 800686c:	4313      	orrs	r3, r2
 800686e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006870:	4b2e      	ldr	r3, [pc, #184]	; (800692c <HAL_RCC_OscConfig+0x6c4>)
 8006872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006874:	f023 020c 	bic.w	r2, r3, #12
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687c:	492b      	ldr	r1, [pc, #172]	; (800692c <HAL_RCC_OscConfig+0x6c4>)
 800687e:	4313      	orrs	r3, r2
 8006880:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006882:	4b2a      	ldr	r3, [pc, #168]	; (800692c <HAL_RCC_OscConfig+0x6c4>)
 8006884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006886:	f023 0202 	bic.w	r2, r3, #2
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800688e:	4927      	ldr	r1, [pc, #156]	; (800692c <HAL_RCC_OscConfig+0x6c4>)
 8006890:	4313      	orrs	r3, r2
 8006892:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006894:	4b25      	ldr	r3, [pc, #148]	; (800692c <HAL_RCC_OscConfig+0x6c4>)
 8006896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006898:	4a24      	ldr	r2, [pc, #144]	; (800692c <HAL_RCC_OscConfig+0x6c4>)
 800689a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800689e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068a0:	4b22      	ldr	r3, [pc, #136]	; (800692c <HAL_RCC_OscConfig+0x6c4>)
 80068a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a4:	4a21      	ldr	r2, [pc, #132]	; (800692c <HAL_RCC_OscConfig+0x6c4>)
 80068a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80068ac:	4b1f      	ldr	r3, [pc, #124]	; (800692c <HAL_RCC_OscConfig+0x6c4>)
 80068ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b0:	4a1e      	ldr	r2, [pc, #120]	; (800692c <HAL_RCC_OscConfig+0x6c4>)
 80068b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80068b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80068b8:	4b1c      	ldr	r3, [pc, #112]	; (800692c <HAL_RCC_OscConfig+0x6c4>)
 80068ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068bc:	4a1b      	ldr	r2, [pc, #108]	; (800692c <HAL_RCC_OscConfig+0x6c4>)
 80068be:	f043 0301 	orr.w	r3, r3, #1
 80068c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068c4:	4b19      	ldr	r3, [pc, #100]	; (800692c <HAL_RCC_OscConfig+0x6c4>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a18      	ldr	r2, [pc, #96]	; (800692c <HAL_RCC_OscConfig+0x6c4>)
 80068ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80068ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068d0:	f7fa ff50 	bl	8001774 <HAL_GetTick>
 80068d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80068d6:	e008      	b.n	80068ea <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068d8:	f7fa ff4c 	bl	8001774 <HAL_GetTick>
 80068dc:	4602      	mov	r2, r0
 80068de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d901      	bls.n	80068ea <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e065      	b.n	80069b6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80068ea:	4b10      	ldr	r3, [pc, #64]	; (800692c <HAL_RCC_OscConfig+0x6c4>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d0f0      	beq.n	80068d8 <HAL_RCC_OscConfig+0x670>
 80068f6:	e05d      	b.n	80069b4 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068f8:	4b0c      	ldr	r3, [pc, #48]	; (800692c <HAL_RCC_OscConfig+0x6c4>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a0b      	ldr	r2, [pc, #44]	; (800692c <HAL_RCC_OscConfig+0x6c4>)
 80068fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006902:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006904:	f7fa ff36 	bl	8001774 <HAL_GetTick>
 8006908:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800690a:	e008      	b.n	800691e <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800690c:	f7fa ff32 	bl	8001774 <HAL_GetTick>
 8006910:	4602      	mov	r2, r0
 8006912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	2b02      	cmp	r3, #2
 8006918:	d901      	bls.n	800691e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800691a:	2303      	movs	r3, #3
 800691c:	e04b      	b.n	80069b6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800691e:	4b03      	ldr	r3, [pc, #12]	; (800692c <HAL_RCC_OscConfig+0x6c4>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1f0      	bne.n	800690c <HAL_RCC_OscConfig+0x6a4>
 800692a:	e043      	b.n	80069b4 <HAL_RCC_OscConfig+0x74c>
 800692c:	58024400 	.word	0x58024400
 8006930:	fffffc0c 	.word	0xfffffc0c
 8006934:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006938:	4b21      	ldr	r3, [pc, #132]	; (80069c0 <HAL_RCC_OscConfig+0x758>)
 800693a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800693c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800693e:	4b20      	ldr	r3, [pc, #128]	; (80069c0 <HAL_RCC_OscConfig+0x758>)
 8006940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006942:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006948:	2b01      	cmp	r3, #1
 800694a:	d031      	beq.n	80069b0 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	f003 0203 	and.w	r2, r3, #3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006956:	429a      	cmp	r2, r3
 8006958:	d12a      	bne.n	80069b0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	091b      	lsrs	r3, r3, #4
 800695e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006966:	429a      	cmp	r2, r3
 8006968:	d122      	bne.n	80069b0 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006974:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006976:	429a      	cmp	r2, r3
 8006978:	d11a      	bne.n	80069b0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	0a5b      	lsrs	r3, r3, #9
 800697e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006986:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006988:	429a      	cmp	r2, r3
 800698a:	d111      	bne.n	80069b0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	0c1b      	lsrs	r3, r3, #16
 8006990:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006998:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800699a:	429a      	cmp	r2, r3
 800699c:	d108      	bne.n	80069b0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	0e1b      	lsrs	r3, r3, #24
 80069a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069aa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d001      	beq.n	80069b4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e000      	b.n	80069b6 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3730      	adds	r7, #48	; 0x30
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	58024400 	.word	0x58024400

080069c4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d101      	bne.n	80069d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	e19c      	b.n	8006d12 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80069d8:	4b8a      	ldr	r3, [pc, #552]	; (8006c04 <HAL_RCC_ClockConfig+0x240>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 030f 	and.w	r3, r3, #15
 80069e0:	683a      	ldr	r2, [r7, #0]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d910      	bls.n	8006a08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069e6:	4b87      	ldr	r3, [pc, #540]	; (8006c04 <HAL_RCC_ClockConfig+0x240>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f023 020f 	bic.w	r2, r3, #15
 80069ee:	4985      	ldr	r1, [pc, #532]	; (8006c04 <HAL_RCC_ClockConfig+0x240>)
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069f6:	4b83      	ldr	r3, [pc, #524]	; (8006c04 <HAL_RCC_ClockConfig+0x240>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 030f 	and.w	r3, r3, #15
 80069fe:	683a      	ldr	r2, [r7, #0]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d001      	beq.n	8006a08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e184      	b.n	8006d12 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 0304 	and.w	r3, r3, #4
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d010      	beq.n	8006a36 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	691a      	ldr	r2, [r3, #16]
 8006a18:	4b7b      	ldr	r3, [pc, #492]	; (8006c08 <HAL_RCC_ClockConfig+0x244>)
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d908      	bls.n	8006a36 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006a24:	4b78      	ldr	r3, [pc, #480]	; (8006c08 <HAL_RCC_ClockConfig+0x244>)
 8006a26:	699b      	ldr	r3, [r3, #24]
 8006a28:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	4975      	ldr	r1, [pc, #468]	; (8006c08 <HAL_RCC_ClockConfig+0x244>)
 8006a32:	4313      	orrs	r3, r2
 8006a34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0308 	and.w	r3, r3, #8
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d010      	beq.n	8006a64 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	695a      	ldr	r2, [r3, #20]
 8006a46:	4b70      	ldr	r3, [pc, #448]	; (8006c08 <HAL_RCC_ClockConfig+0x244>)
 8006a48:	69db      	ldr	r3, [r3, #28]
 8006a4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d908      	bls.n	8006a64 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006a52:	4b6d      	ldr	r3, [pc, #436]	; (8006c08 <HAL_RCC_ClockConfig+0x244>)
 8006a54:	69db      	ldr	r3, [r3, #28]
 8006a56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	695b      	ldr	r3, [r3, #20]
 8006a5e:	496a      	ldr	r1, [pc, #424]	; (8006c08 <HAL_RCC_ClockConfig+0x244>)
 8006a60:	4313      	orrs	r3, r2
 8006a62:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 0310 	and.w	r3, r3, #16
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d010      	beq.n	8006a92 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	699a      	ldr	r2, [r3, #24]
 8006a74:	4b64      	ldr	r3, [pc, #400]	; (8006c08 <HAL_RCC_ClockConfig+0x244>)
 8006a76:	69db      	ldr	r3, [r3, #28]
 8006a78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d908      	bls.n	8006a92 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006a80:	4b61      	ldr	r3, [pc, #388]	; (8006c08 <HAL_RCC_ClockConfig+0x244>)
 8006a82:	69db      	ldr	r3, [r3, #28]
 8006a84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	699b      	ldr	r3, [r3, #24]
 8006a8c:	495e      	ldr	r1, [pc, #376]	; (8006c08 <HAL_RCC_ClockConfig+0x244>)
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 0320 	and.w	r3, r3, #32
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d010      	beq.n	8006ac0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	69da      	ldr	r2, [r3, #28]
 8006aa2:	4b59      	ldr	r3, [pc, #356]	; (8006c08 <HAL_RCC_ClockConfig+0x244>)
 8006aa4:	6a1b      	ldr	r3, [r3, #32]
 8006aa6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d908      	bls.n	8006ac0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006aae:	4b56      	ldr	r3, [pc, #344]	; (8006c08 <HAL_RCC_ClockConfig+0x244>)
 8006ab0:	6a1b      	ldr	r3, [r3, #32]
 8006ab2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	69db      	ldr	r3, [r3, #28]
 8006aba:	4953      	ldr	r1, [pc, #332]	; (8006c08 <HAL_RCC_ClockConfig+0x244>)
 8006abc:	4313      	orrs	r3, r2
 8006abe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 0302 	and.w	r3, r3, #2
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d010      	beq.n	8006aee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	68da      	ldr	r2, [r3, #12]
 8006ad0:	4b4d      	ldr	r3, [pc, #308]	; (8006c08 <HAL_RCC_ClockConfig+0x244>)
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	f003 030f 	and.w	r3, r3, #15
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d908      	bls.n	8006aee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006adc:	4b4a      	ldr	r3, [pc, #296]	; (8006c08 <HAL_RCC_ClockConfig+0x244>)
 8006ade:	699b      	ldr	r3, [r3, #24]
 8006ae0:	f023 020f 	bic.w	r2, r3, #15
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	4947      	ldr	r1, [pc, #284]	; (8006c08 <HAL_RCC_ClockConfig+0x244>)
 8006aea:	4313      	orrs	r3, r2
 8006aec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 0301 	and.w	r3, r3, #1
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d055      	beq.n	8006ba6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006afa:	4b43      	ldr	r3, [pc, #268]	; (8006c08 <HAL_RCC_ClockConfig+0x244>)
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	4940      	ldr	r1, [pc, #256]	; (8006c08 <HAL_RCC_ClockConfig+0x244>)
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d107      	bne.n	8006b24 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006b14:	4b3c      	ldr	r3, [pc, #240]	; (8006c08 <HAL_RCC_ClockConfig+0x244>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d121      	bne.n	8006b64 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e0f6      	b.n	8006d12 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	2b03      	cmp	r3, #3
 8006b2a:	d107      	bne.n	8006b3c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b2c:	4b36      	ldr	r3, [pc, #216]	; (8006c08 <HAL_RCC_ClockConfig+0x244>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d115      	bne.n	8006b64 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e0ea      	b.n	8006d12 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d107      	bne.n	8006b54 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b44:	4b30      	ldr	r3, [pc, #192]	; (8006c08 <HAL_RCC_ClockConfig+0x244>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d109      	bne.n	8006b64 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	e0de      	b.n	8006d12 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b54:	4b2c      	ldr	r3, [pc, #176]	; (8006c08 <HAL_RCC_ClockConfig+0x244>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 0304 	and.w	r3, r3, #4
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d101      	bne.n	8006b64 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e0d6      	b.n	8006d12 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006b64:	4b28      	ldr	r3, [pc, #160]	; (8006c08 <HAL_RCC_ClockConfig+0x244>)
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	f023 0207 	bic.w	r2, r3, #7
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	4925      	ldr	r1, [pc, #148]	; (8006c08 <HAL_RCC_ClockConfig+0x244>)
 8006b72:	4313      	orrs	r3, r2
 8006b74:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b76:	f7fa fdfd 	bl	8001774 <HAL_GetTick>
 8006b7a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b7c:	e00a      	b.n	8006b94 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b7e:	f7fa fdf9 	bl	8001774 <HAL_GetTick>
 8006b82:	4602      	mov	r2, r0
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	1ad3      	subs	r3, r2, r3
 8006b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d901      	bls.n	8006b94 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006b90:	2303      	movs	r3, #3
 8006b92:	e0be      	b.n	8006d12 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b94:	4b1c      	ldr	r3, [pc, #112]	; (8006c08 <HAL_RCC_ClockConfig+0x244>)
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	00db      	lsls	r3, r3, #3
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d1eb      	bne.n	8006b7e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 0302 	and.w	r3, r3, #2
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d010      	beq.n	8006bd4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	68da      	ldr	r2, [r3, #12]
 8006bb6:	4b14      	ldr	r3, [pc, #80]	; (8006c08 <HAL_RCC_ClockConfig+0x244>)
 8006bb8:	699b      	ldr	r3, [r3, #24]
 8006bba:	f003 030f 	and.w	r3, r3, #15
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d208      	bcs.n	8006bd4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bc2:	4b11      	ldr	r3, [pc, #68]	; (8006c08 <HAL_RCC_ClockConfig+0x244>)
 8006bc4:	699b      	ldr	r3, [r3, #24]
 8006bc6:	f023 020f 	bic.w	r2, r3, #15
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	490e      	ldr	r1, [pc, #56]	; (8006c08 <HAL_RCC_ClockConfig+0x244>)
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006bd4:	4b0b      	ldr	r3, [pc, #44]	; (8006c04 <HAL_RCC_ClockConfig+0x240>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 030f 	and.w	r3, r3, #15
 8006bdc:	683a      	ldr	r2, [r7, #0]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d214      	bcs.n	8006c0c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006be2:	4b08      	ldr	r3, [pc, #32]	; (8006c04 <HAL_RCC_ClockConfig+0x240>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f023 020f 	bic.w	r2, r3, #15
 8006bea:	4906      	ldr	r1, [pc, #24]	; (8006c04 <HAL_RCC_ClockConfig+0x240>)
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bf2:	4b04      	ldr	r3, [pc, #16]	; (8006c04 <HAL_RCC_ClockConfig+0x240>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 030f 	and.w	r3, r3, #15
 8006bfa:	683a      	ldr	r2, [r7, #0]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d005      	beq.n	8006c0c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e086      	b.n	8006d12 <HAL_RCC_ClockConfig+0x34e>
 8006c04:	52002000 	.word	0x52002000
 8006c08:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 0304 	and.w	r3, r3, #4
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d010      	beq.n	8006c3a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	691a      	ldr	r2, [r3, #16]
 8006c1c:	4b3f      	ldr	r3, [pc, #252]	; (8006d1c <HAL_RCC_ClockConfig+0x358>)
 8006c1e:	699b      	ldr	r3, [r3, #24]
 8006c20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d208      	bcs.n	8006c3a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006c28:	4b3c      	ldr	r3, [pc, #240]	; (8006d1c <HAL_RCC_ClockConfig+0x358>)
 8006c2a:	699b      	ldr	r3, [r3, #24]
 8006c2c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	691b      	ldr	r3, [r3, #16]
 8006c34:	4939      	ldr	r1, [pc, #228]	; (8006d1c <HAL_RCC_ClockConfig+0x358>)
 8006c36:	4313      	orrs	r3, r2
 8006c38:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 0308 	and.w	r3, r3, #8
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d010      	beq.n	8006c68 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	695a      	ldr	r2, [r3, #20]
 8006c4a:	4b34      	ldr	r3, [pc, #208]	; (8006d1c <HAL_RCC_ClockConfig+0x358>)
 8006c4c:	69db      	ldr	r3, [r3, #28]
 8006c4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d208      	bcs.n	8006c68 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006c56:	4b31      	ldr	r3, [pc, #196]	; (8006d1c <HAL_RCC_ClockConfig+0x358>)
 8006c58:	69db      	ldr	r3, [r3, #28]
 8006c5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	695b      	ldr	r3, [r3, #20]
 8006c62:	492e      	ldr	r1, [pc, #184]	; (8006d1c <HAL_RCC_ClockConfig+0x358>)
 8006c64:	4313      	orrs	r3, r2
 8006c66:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 0310 	and.w	r3, r3, #16
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d010      	beq.n	8006c96 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	699a      	ldr	r2, [r3, #24]
 8006c78:	4b28      	ldr	r3, [pc, #160]	; (8006d1c <HAL_RCC_ClockConfig+0x358>)
 8006c7a:	69db      	ldr	r3, [r3, #28]
 8006c7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d208      	bcs.n	8006c96 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006c84:	4b25      	ldr	r3, [pc, #148]	; (8006d1c <HAL_RCC_ClockConfig+0x358>)
 8006c86:	69db      	ldr	r3, [r3, #28]
 8006c88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	699b      	ldr	r3, [r3, #24]
 8006c90:	4922      	ldr	r1, [pc, #136]	; (8006d1c <HAL_RCC_ClockConfig+0x358>)
 8006c92:	4313      	orrs	r3, r2
 8006c94:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 0320 	and.w	r3, r3, #32
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d010      	beq.n	8006cc4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	69da      	ldr	r2, [r3, #28]
 8006ca6:	4b1d      	ldr	r3, [pc, #116]	; (8006d1c <HAL_RCC_ClockConfig+0x358>)
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d208      	bcs.n	8006cc4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006cb2:	4b1a      	ldr	r3, [pc, #104]	; (8006d1c <HAL_RCC_ClockConfig+0x358>)
 8006cb4:	6a1b      	ldr	r3, [r3, #32]
 8006cb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	69db      	ldr	r3, [r3, #28]
 8006cbe:	4917      	ldr	r1, [pc, #92]	; (8006d1c <HAL_RCC_ClockConfig+0x358>)
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006cc4:	f000 f834 	bl	8006d30 <HAL_RCC_GetSysClockFreq>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	4b14      	ldr	r3, [pc, #80]	; (8006d1c <HAL_RCC_ClockConfig+0x358>)
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	0a1b      	lsrs	r3, r3, #8
 8006cd0:	f003 030f 	and.w	r3, r3, #15
 8006cd4:	4912      	ldr	r1, [pc, #72]	; (8006d20 <HAL_RCC_ClockConfig+0x35c>)
 8006cd6:	5ccb      	ldrb	r3, [r1, r3]
 8006cd8:	f003 031f 	and.w	r3, r3, #31
 8006cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8006ce0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006ce2:	4b0e      	ldr	r3, [pc, #56]	; (8006d1c <HAL_RCC_ClockConfig+0x358>)
 8006ce4:	699b      	ldr	r3, [r3, #24]
 8006ce6:	f003 030f 	and.w	r3, r3, #15
 8006cea:	4a0d      	ldr	r2, [pc, #52]	; (8006d20 <HAL_RCC_ClockConfig+0x35c>)
 8006cec:	5cd3      	ldrb	r3, [r2, r3]
 8006cee:	f003 031f 	and.w	r3, r3, #31
 8006cf2:	693a      	ldr	r2, [r7, #16]
 8006cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8006cf8:	4a0a      	ldr	r2, [pc, #40]	; (8006d24 <HAL_RCC_ClockConfig+0x360>)
 8006cfa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006cfc:	4a0a      	ldr	r2, [pc, #40]	; (8006d28 <HAL_RCC_ClockConfig+0x364>)
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006d02:	4b0a      	ldr	r3, [pc, #40]	; (8006d2c <HAL_RCC_ClockConfig+0x368>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7fa fb10 	bl	800132c <HAL_InitTick>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3718      	adds	r7, #24
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	58024400 	.word	0x58024400
 8006d20:	08013fe4 	.word	0x08013fe4
 8006d24:	24000004 	.word	0x24000004
 8006d28:	24000000 	.word	0x24000000
 8006d2c:	24000008 	.word	0x24000008

08006d30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b089      	sub	sp, #36	; 0x24
 8006d34:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d36:	4bb3      	ldr	r3, [pc, #716]	; (8007004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d3e:	2b18      	cmp	r3, #24
 8006d40:	f200 8155 	bhi.w	8006fee <HAL_RCC_GetSysClockFreq+0x2be>
 8006d44:	a201      	add	r2, pc, #4	; (adr r2, 8006d4c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d4a:	bf00      	nop
 8006d4c:	08006db1 	.word	0x08006db1
 8006d50:	08006fef 	.word	0x08006fef
 8006d54:	08006fef 	.word	0x08006fef
 8006d58:	08006fef 	.word	0x08006fef
 8006d5c:	08006fef 	.word	0x08006fef
 8006d60:	08006fef 	.word	0x08006fef
 8006d64:	08006fef 	.word	0x08006fef
 8006d68:	08006fef 	.word	0x08006fef
 8006d6c:	08006dd7 	.word	0x08006dd7
 8006d70:	08006fef 	.word	0x08006fef
 8006d74:	08006fef 	.word	0x08006fef
 8006d78:	08006fef 	.word	0x08006fef
 8006d7c:	08006fef 	.word	0x08006fef
 8006d80:	08006fef 	.word	0x08006fef
 8006d84:	08006fef 	.word	0x08006fef
 8006d88:	08006fef 	.word	0x08006fef
 8006d8c:	08006ddd 	.word	0x08006ddd
 8006d90:	08006fef 	.word	0x08006fef
 8006d94:	08006fef 	.word	0x08006fef
 8006d98:	08006fef 	.word	0x08006fef
 8006d9c:	08006fef 	.word	0x08006fef
 8006da0:	08006fef 	.word	0x08006fef
 8006da4:	08006fef 	.word	0x08006fef
 8006da8:	08006fef 	.word	0x08006fef
 8006dac:	08006de3 	.word	0x08006de3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006db0:	4b94      	ldr	r3, [pc, #592]	; (8007004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 0320 	and.w	r3, r3, #32
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d009      	beq.n	8006dd0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006dbc:	4b91      	ldr	r3, [pc, #580]	; (8007004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	08db      	lsrs	r3, r3, #3
 8006dc2:	f003 0303 	and.w	r3, r3, #3
 8006dc6:	4a90      	ldr	r2, [pc, #576]	; (8007008 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8006dcc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006dce:	e111      	b.n	8006ff4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006dd0:	4b8d      	ldr	r3, [pc, #564]	; (8007008 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006dd2:	61bb      	str	r3, [r7, #24]
    break;
 8006dd4:	e10e      	b.n	8006ff4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006dd6:	4b8d      	ldr	r3, [pc, #564]	; (800700c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006dd8:	61bb      	str	r3, [r7, #24]
    break;
 8006dda:	e10b      	b.n	8006ff4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006ddc:	4b8c      	ldr	r3, [pc, #560]	; (8007010 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006dde:	61bb      	str	r3, [r7, #24]
    break;
 8006de0:	e108      	b.n	8006ff4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006de2:	4b88      	ldr	r3, [pc, #544]	; (8007004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de6:	f003 0303 	and.w	r3, r3, #3
 8006dea:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006dec:	4b85      	ldr	r3, [pc, #532]	; (8007004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df0:	091b      	lsrs	r3, r3, #4
 8006df2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006df6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006df8:	4b82      	ldr	r3, [pc, #520]	; (8007004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dfc:	f003 0301 	and.w	r3, r3, #1
 8006e00:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006e02:	4b80      	ldr	r3, [pc, #512]	; (8007004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e06:	08db      	lsrs	r3, r3, #3
 8006e08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	fb02 f303 	mul.w	r3, r2, r3
 8006e12:	ee07 3a90 	vmov	s15, r3
 8006e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e1a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	f000 80e1 	beq.w	8006fe8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	f000 8083 	beq.w	8006f34 <HAL_RCC_GetSysClockFreq+0x204>
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	f200 80a1 	bhi.w	8006f78 <HAL_RCC_GetSysClockFreq+0x248>
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d003      	beq.n	8006e44 <HAL_RCC_GetSysClockFreq+0x114>
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d056      	beq.n	8006ef0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006e42:	e099      	b.n	8006f78 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e44:	4b6f      	ldr	r3, [pc, #444]	; (8007004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 0320 	and.w	r3, r3, #32
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d02d      	beq.n	8006eac <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006e50:	4b6c      	ldr	r3, [pc, #432]	; (8007004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	08db      	lsrs	r3, r3, #3
 8006e56:	f003 0303 	and.w	r3, r3, #3
 8006e5a:	4a6b      	ldr	r2, [pc, #428]	; (8007008 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e60:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	ee07 3a90 	vmov	s15, r3
 8006e68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	ee07 3a90 	vmov	s15, r3
 8006e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e7a:	4b62      	ldr	r3, [pc, #392]	; (8007004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e82:	ee07 3a90 	vmov	s15, r3
 8006e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e8e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007014 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ea6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006eaa:	e087      	b.n	8006fbc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	ee07 3a90 	vmov	s15, r3
 8006eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eb6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007018 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ebe:	4b51      	ldr	r3, [pc, #324]	; (8007004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ec6:	ee07 3a90 	vmov	s15, r3
 8006eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ece:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ed2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007014 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ede:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006eee:	e065      	b.n	8006fbc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	ee07 3a90 	vmov	s15, r3
 8006ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006efa:	eddf 6a48 	vldr	s13, [pc, #288]	; 800701c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f02:	4b40      	ldr	r3, [pc, #256]	; (8007004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f0a:	ee07 3a90 	vmov	s15, r3
 8006f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f12:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f16:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007014 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f32:	e043      	b.n	8006fbc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	ee07 3a90 	vmov	s15, r3
 8006f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f3e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007020 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006f42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f46:	4b2f      	ldr	r3, [pc, #188]	; (8007004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f4e:	ee07 3a90 	vmov	s15, r3
 8006f52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f56:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f5a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007014 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f76:	e021      	b.n	8006fbc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	ee07 3a90 	vmov	s15, r3
 8006f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f82:	eddf 6a26 	vldr	s13, [pc, #152]	; 800701c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006f86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f8a:	4b1e      	ldr	r3, [pc, #120]	; (8007004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f92:	ee07 3a90 	vmov	s15, r3
 8006f96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f9e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007014 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006fa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006faa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fba:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006fbc:	4b11      	ldr	r3, [pc, #68]	; (8007004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc0:	0a5b      	lsrs	r3, r3, #9
 8006fc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	ee07 3a90 	vmov	s15, r3
 8006fd0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006fd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fe0:	ee17 3a90 	vmov	r3, s15
 8006fe4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006fe6:	e005      	b.n	8006ff4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	61bb      	str	r3, [r7, #24]
    break;
 8006fec:	e002      	b.n	8006ff4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006fee:	4b07      	ldr	r3, [pc, #28]	; (800700c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006ff0:	61bb      	str	r3, [r7, #24]
    break;
 8006ff2:	bf00      	nop
  }

  return sysclockfreq;
 8006ff4:	69bb      	ldr	r3, [r7, #24]
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3724      	adds	r7, #36	; 0x24
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	58024400 	.word	0x58024400
 8007008:	03d09000 	.word	0x03d09000
 800700c:	003d0900 	.word	0x003d0900
 8007010:	007a1200 	.word	0x007a1200
 8007014:	46000000 	.word	0x46000000
 8007018:	4c742400 	.word	0x4c742400
 800701c:	4a742400 	.word	0x4a742400
 8007020:	4af42400 	.word	0x4af42400

08007024 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800702a:	f7ff fe81 	bl	8006d30 <HAL_RCC_GetSysClockFreq>
 800702e:	4602      	mov	r2, r0
 8007030:	4b10      	ldr	r3, [pc, #64]	; (8007074 <HAL_RCC_GetHCLKFreq+0x50>)
 8007032:	699b      	ldr	r3, [r3, #24]
 8007034:	0a1b      	lsrs	r3, r3, #8
 8007036:	f003 030f 	and.w	r3, r3, #15
 800703a:	490f      	ldr	r1, [pc, #60]	; (8007078 <HAL_RCC_GetHCLKFreq+0x54>)
 800703c:	5ccb      	ldrb	r3, [r1, r3]
 800703e:	f003 031f 	and.w	r3, r3, #31
 8007042:	fa22 f303 	lsr.w	r3, r2, r3
 8007046:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007048:	4b0a      	ldr	r3, [pc, #40]	; (8007074 <HAL_RCC_GetHCLKFreq+0x50>)
 800704a:	699b      	ldr	r3, [r3, #24]
 800704c:	f003 030f 	and.w	r3, r3, #15
 8007050:	4a09      	ldr	r2, [pc, #36]	; (8007078 <HAL_RCC_GetHCLKFreq+0x54>)
 8007052:	5cd3      	ldrb	r3, [r2, r3]
 8007054:	f003 031f 	and.w	r3, r3, #31
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	fa22 f303 	lsr.w	r3, r2, r3
 800705e:	4a07      	ldr	r2, [pc, #28]	; (800707c <HAL_RCC_GetHCLKFreq+0x58>)
 8007060:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007062:	4a07      	ldr	r2, [pc, #28]	; (8007080 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007068:	4b04      	ldr	r3, [pc, #16]	; (800707c <HAL_RCC_GetHCLKFreq+0x58>)
 800706a:	681b      	ldr	r3, [r3, #0]
}
 800706c:	4618      	mov	r0, r3
 800706e:	3708      	adds	r7, #8
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	58024400 	.word	0x58024400
 8007078:	08013fe4 	.word	0x08013fe4
 800707c:	24000004 	.word	0x24000004
 8007080:	24000000 	.word	0x24000000

08007084 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007088:	f7ff ffcc 	bl	8007024 <HAL_RCC_GetHCLKFreq>
 800708c:	4602      	mov	r2, r0
 800708e:	4b06      	ldr	r3, [pc, #24]	; (80070a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007090:	69db      	ldr	r3, [r3, #28]
 8007092:	091b      	lsrs	r3, r3, #4
 8007094:	f003 0307 	and.w	r3, r3, #7
 8007098:	4904      	ldr	r1, [pc, #16]	; (80070ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800709a:	5ccb      	ldrb	r3, [r1, r3]
 800709c:	f003 031f 	and.w	r3, r3, #31
 80070a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	58024400 	.word	0x58024400
 80070ac:	08013fe4 	.word	0x08013fe4

080070b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80070b4:	f7ff ffb6 	bl	8007024 <HAL_RCC_GetHCLKFreq>
 80070b8:	4602      	mov	r2, r0
 80070ba:	4b06      	ldr	r3, [pc, #24]	; (80070d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80070bc:	69db      	ldr	r3, [r3, #28]
 80070be:	0a1b      	lsrs	r3, r3, #8
 80070c0:	f003 0307 	and.w	r3, r3, #7
 80070c4:	4904      	ldr	r1, [pc, #16]	; (80070d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80070c6:	5ccb      	ldrb	r3, [r1, r3]
 80070c8:	f003 031f 	and.w	r3, r3, #31
 80070cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	58024400 	.word	0x58024400
 80070d8:	08013fe4 	.word	0x08013fe4

080070dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	223f      	movs	r2, #63	; 0x3f
 80070ea:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80070ec:	4b1a      	ldr	r3, [pc, #104]	; (8007158 <HAL_RCC_GetClockConfig+0x7c>)
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	f003 0207 	and.w	r2, r3, #7
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80070f8:	4b17      	ldr	r3, [pc, #92]	; (8007158 <HAL_RCC_GetClockConfig+0x7c>)
 80070fa:	699b      	ldr	r3, [r3, #24]
 80070fc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007104:	4b14      	ldr	r3, [pc, #80]	; (8007158 <HAL_RCC_GetClockConfig+0x7c>)
 8007106:	699b      	ldr	r3, [r3, #24]
 8007108:	f003 020f 	and.w	r2, r3, #15
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007110:	4b11      	ldr	r3, [pc, #68]	; (8007158 <HAL_RCC_GetClockConfig+0x7c>)
 8007112:	699b      	ldr	r3, [r3, #24]
 8007114:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800711c:	4b0e      	ldr	r3, [pc, #56]	; (8007158 <HAL_RCC_GetClockConfig+0x7c>)
 800711e:	69db      	ldr	r3, [r3, #28]
 8007120:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007128:	4b0b      	ldr	r3, [pc, #44]	; (8007158 <HAL_RCC_GetClockConfig+0x7c>)
 800712a:	69db      	ldr	r3, [r3, #28]
 800712c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007134:	4b08      	ldr	r3, [pc, #32]	; (8007158 <HAL_RCC_GetClockConfig+0x7c>)
 8007136:	6a1b      	ldr	r3, [r3, #32]
 8007138:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007140:	4b06      	ldr	r3, [pc, #24]	; (800715c <HAL_RCC_GetClockConfig+0x80>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 020f 	and.w	r2, r3, #15
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	601a      	str	r2, [r3, #0]
}
 800714c:	bf00      	nop
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr
 8007158:	58024400 	.word	0x58024400
 800715c:	52002000 	.word	0x52002000

08007160 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b086      	sub	sp, #24
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007168:	2300      	movs	r3, #0
 800716a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800716c:	2300      	movs	r3, #0
 800716e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007178:	2b00      	cmp	r3, #0
 800717a:	d03f      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007180:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007184:	d02a      	beq.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007186:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800718a:	d824      	bhi.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800718c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007190:	d018      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007192:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007196:	d81e      	bhi.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007198:	2b00      	cmp	r3, #0
 800719a:	d003      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800719c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071a0:	d007      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80071a2:	e018      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071a4:	4ba4      	ldr	r3, [pc, #656]	; (8007438 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80071a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a8:	4aa3      	ldr	r2, [pc, #652]	; (8007438 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80071aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80071b0:	e015      	b.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	3304      	adds	r3, #4
 80071b6:	2102      	movs	r1, #2
 80071b8:	4618      	mov	r0, r3
 80071ba:	f001 f989 	bl	80084d0 <RCCEx_PLL2_Config>
 80071be:	4603      	mov	r3, r0
 80071c0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80071c2:	e00c      	b.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	3324      	adds	r3, #36	; 0x24
 80071c8:	2102      	movs	r1, #2
 80071ca:	4618      	mov	r0, r3
 80071cc:	f001 fa32 	bl	8008634 <RCCEx_PLL3_Config>
 80071d0:	4603      	mov	r3, r0
 80071d2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80071d4:	e003      	b.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	75fb      	strb	r3, [r7, #23]
      break;
 80071da:	e000      	b.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80071dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071de:	7dfb      	ldrb	r3, [r7, #23]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d109      	bne.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80071e4:	4b94      	ldr	r3, [pc, #592]	; (8007438 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80071e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071f0:	4991      	ldr	r1, [pc, #580]	; (8007438 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80071f2:	4313      	orrs	r3, r2
 80071f4:	650b      	str	r3, [r1, #80]	; 0x50
 80071f6:	e001      	b.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071f8:	7dfb      	ldrb	r3, [r7, #23]
 80071fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007204:	2b00      	cmp	r3, #0
 8007206:	d03d      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800720c:	2b04      	cmp	r3, #4
 800720e:	d826      	bhi.n	800725e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007210:	a201      	add	r2, pc, #4	; (adr r2, 8007218 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007216:	bf00      	nop
 8007218:	0800722d 	.word	0x0800722d
 800721c:	0800723b 	.word	0x0800723b
 8007220:	0800724d 	.word	0x0800724d
 8007224:	08007265 	.word	0x08007265
 8007228:	08007265 	.word	0x08007265
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800722c:	4b82      	ldr	r3, [pc, #520]	; (8007438 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800722e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007230:	4a81      	ldr	r2, [pc, #516]	; (8007438 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007232:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007236:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007238:	e015      	b.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	3304      	adds	r3, #4
 800723e:	2100      	movs	r1, #0
 8007240:	4618      	mov	r0, r3
 8007242:	f001 f945 	bl	80084d0 <RCCEx_PLL2_Config>
 8007246:	4603      	mov	r3, r0
 8007248:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800724a:	e00c      	b.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	3324      	adds	r3, #36	; 0x24
 8007250:	2100      	movs	r1, #0
 8007252:	4618      	mov	r0, r3
 8007254:	f001 f9ee 	bl	8008634 <RCCEx_PLL3_Config>
 8007258:	4603      	mov	r3, r0
 800725a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800725c:	e003      	b.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	75fb      	strb	r3, [r7, #23]
      break;
 8007262:	e000      	b.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007264:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007266:	7dfb      	ldrb	r3, [r7, #23]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d109      	bne.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800726c:	4b72      	ldr	r3, [pc, #456]	; (8007438 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800726e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007270:	f023 0207 	bic.w	r2, r3, #7
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007278:	496f      	ldr	r1, [pc, #444]	; (8007438 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800727a:	4313      	orrs	r3, r2
 800727c:	650b      	str	r3, [r1, #80]	; 0x50
 800727e:	e001      	b.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007280:	7dfb      	ldrb	r3, [r7, #23]
 8007282:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800728c:	2b00      	cmp	r3, #0
 800728e:	d051      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007296:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800729a:	d036      	beq.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800729c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80072a0:	d830      	bhi.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80072a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80072a6:	d032      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80072a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80072ac:	d82a      	bhi.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80072ae:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80072b2:	d02e      	beq.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80072b4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80072b8:	d824      	bhi.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80072ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072be:	d018      	beq.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80072c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072c4:	d81e      	bhi.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d003      	beq.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x172>
 80072ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072ce:	d007      	beq.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80072d0:	e018      	b.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072d2:	4b59      	ldr	r3, [pc, #356]	; (8007438 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80072d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d6:	4a58      	ldr	r2, [pc, #352]	; (8007438 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80072d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80072de:	e019      	b.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	3304      	adds	r3, #4
 80072e4:	2100      	movs	r1, #0
 80072e6:	4618      	mov	r0, r3
 80072e8:	f001 f8f2 	bl	80084d0 <RCCEx_PLL2_Config>
 80072ec:	4603      	mov	r3, r0
 80072ee:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80072f0:	e010      	b.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	3324      	adds	r3, #36	; 0x24
 80072f6:	2100      	movs	r1, #0
 80072f8:	4618      	mov	r0, r3
 80072fa:	f001 f99b 	bl	8008634 <RCCEx_PLL3_Config>
 80072fe:	4603      	mov	r3, r0
 8007300:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007302:	e007      	b.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	75fb      	strb	r3, [r7, #23]
      break;
 8007308:	e004      	b.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800730a:	bf00      	nop
 800730c:	e002      	b.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800730e:	bf00      	nop
 8007310:	e000      	b.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8007312:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007314:	7dfb      	ldrb	r3, [r7, #23]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d10a      	bne.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800731a:	4b47      	ldr	r3, [pc, #284]	; (8007438 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800731c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800731e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007328:	4943      	ldr	r1, [pc, #268]	; (8007438 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800732a:	4313      	orrs	r3, r2
 800732c:	658b      	str	r3, [r1, #88]	; 0x58
 800732e:	e001      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007330:	7dfb      	ldrb	r3, [r7, #23]
 8007332:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800733c:	2b00      	cmp	r3, #0
 800733e:	d051      	beq.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007346:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800734a:	d036      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800734c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007350:	d830      	bhi.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007352:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007356:	d032      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8007358:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800735c:	d82a      	bhi.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800735e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007362:	d02e      	beq.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8007364:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007368:	d824      	bhi.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800736a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800736e:	d018      	beq.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8007370:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007374:	d81e      	bhi.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007376:	2b00      	cmp	r3, #0
 8007378:	d003      	beq.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800737a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800737e:	d007      	beq.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007380:	e018      	b.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007382:	4b2d      	ldr	r3, [pc, #180]	; (8007438 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007386:	4a2c      	ldr	r2, [pc, #176]	; (8007438 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800738c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800738e:	e019      	b.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	3304      	adds	r3, #4
 8007394:	2100      	movs	r1, #0
 8007396:	4618      	mov	r0, r3
 8007398:	f001 f89a 	bl	80084d0 <RCCEx_PLL2_Config>
 800739c:	4603      	mov	r3, r0
 800739e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80073a0:	e010      	b.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	3324      	adds	r3, #36	; 0x24
 80073a6:	2100      	movs	r1, #0
 80073a8:	4618      	mov	r0, r3
 80073aa:	f001 f943 	bl	8008634 <RCCEx_PLL3_Config>
 80073ae:	4603      	mov	r3, r0
 80073b0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80073b2:	e007      	b.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	75fb      	strb	r3, [r7, #23]
      break;
 80073b8:	e004      	b.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80073ba:	bf00      	nop
 80073bc:	e002      	b.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80073be:	bf00      	nop
 80073c0:	e000      	b.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80073c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073c4:	7dfb      	ldrb	r3, [r7, #23]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d10a      	bne.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80073ca:	4b1b      	ldr	r3, [pc, #108]	; (8007438 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80073cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073ce:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80073d8:	4917      	ldr	r1, [pc, #92]	; (8007438 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80073da:	4313      	orrs	r3, r2
 80073dc:	658b      	str	r3, [r1, #88]	; 0x58
 80073de:	e001      	b.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073e0:	7dfb      	ldrb	r3, [r7, #23]
 80073e2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d035      	beq.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073f4:	2b30      	cmp	r3, #48	; 0x30
 80073f6:	d01c      	beq.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80073f8:	2b30      	cmp	r3, #48	; 0x30
 80073fa:	d817      	bhi.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80073fc:	2b20      	cmp	r3, #32
 80073fe:	d00c      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8007400:	2b20      	cmp	r3, #32
 8007402:	d813      	bhi.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8007404:	2b00      	cmp	r3, #0
 8007406:	d019      	beq.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8007408:	2b10      	cmp	r3, #16
 800740a:	d10f      	bne.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800740c:	4b0a      	ldr	r3, [pc, #40]	; (8007438 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800740e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007410:	4a09      	ldr	r2, [pc, #36]	; (8007438 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007412:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007416:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8007418:	e011      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	3304      	adds	r3, #4
 800741e:	2102      	movs	r1, #2
 8007420:	4618      	mov	r0, r3
 8007422:	f001 f855 	bl	80084d0 <RCCEx_PLL2_Config>
 8007426:	4603      	mov	r3, r0
 8007428:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800742a:	e008      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	75fb      	strb	r3, [r7, #23]
      break;
 8007430:	e005      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8007432:	bf00      	nop
 8007434:	e003      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8007436:	bf00      	nop
 8007438:	58024400 	.word	0x58024400
      break;
 800743c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800743e:	7dfb      	ldrb	r3, [r7, #23]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d109      	bne.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007444:	4ba3      	ldr	r3, [pc, #652]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8007446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007448:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007450:	49a0      	ldr	r1, [pc, #640]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8007452:	4313      	orrs	r3, r2
 8007454:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007456:	e001      	b.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007458:	7dfb      	ldrb	r3, [r7, #23]
 800745a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007464:	2b00      	cmp	r3, #0
 8007466:	d047      	beq.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800746c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007470:	d030      	beq.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8007472:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007476:	d82a      	bhi.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007478:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800747c:	d02c      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800747e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007482:	d824      	bhi.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007484:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007488:	d018      	beq.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800748a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800748e:	d81e      	bhi.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007490:	2b00      	cmp	r3, #0
 8007492:	d003      	beq.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007498:	d007      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800749a:	e018      	b.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800749c:	4b8d      	ldr	r3, [pc, #564]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800749e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a0:	4a8c      	ldr	r2, [pc, #560]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80074a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80074a8:	e017      	b.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	3304      	adds	r3, #4
 80074ae:	2100      	movs	r1, #0
 80074b0:	4618      	mov	r0, r3
 80074b2:	f001 f80d 	bl	80084d0 <RCCEx_PLL2_Config>
 80074b6:	4603      	mov	r3, r0
 80074b8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80074ba:	e00e      	b.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	3324      	adds	r3, #36	; 0x24
 80074c0:	2100      	movs	r1, #0
 80074c2:	4618      	mov	r0, r3
 80074c4:	f001 f8b6 	bl	8008634 <RCCEx_PLL3_Config>
 80074c8:	4603      	mov	r3, r0
 80074ca:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80074cc:	e005      	b.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	75fb      	strb	r3, [r7, #23]
      break;
 80074d2:	e002      	b.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80074d4:	bf00      	nop
 80074d6:	e000      	b.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80074d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074da:	7dfb      	ldrb	r3, [r7, #23]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d109      	bne.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80074e0:	4b7c      	ldr	r3, [pc, #496]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80074e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074e4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ec:	4979      	ldr	r1, [pc, #484]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80074ee:	4313      	orrs	r3, r2
 80074f0:	650b      	str	r3, [r1, #80]	; 0x50
 80074f2:	e001      	b.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074f4:	7dfb      	ldrb	r3, [r7, #23]
 80074f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007500:	2b00      	cmp	r3, #0
 8007502:	d049      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007508:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800750c:	d02e      	beq.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800750e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007512:	d828      	bhi.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007514:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007518:	d02a      	beq.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800751a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800751e:	d822      	bhi.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007520:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007524:	d026      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8007526:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800752a:	d81c      	bhi.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800752c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007530:	d010      	beq.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8007532:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007536:	d816      	bhi.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007538:	2b00      	cmp	r3, #0
 800753a:	d01d      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800753c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007540:	d111      	bne.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	3304      	adds	r3, #4
 8007546:	2101      	movs	r1, #1
 8007548:	4618      	mov	r0, r3
 800754a:	f000 ffc1 	bl	80084d0 <RCCEx_PLL2_Config>
 800754e:	4603      	mov	r3, r0
 8007550:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007552:	e012      	b.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	3324      	adds	r3, #36	; 0x24
 8007558:	2101      	movs	r1, #1
 800755a:	4618      	mov	r0, r3
 800755c:	f001 f86a 	bl	8008634 <RCCEx_PLL3_Config>
 8007560:	4603      	mov	r3, r0
 8007562:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007564:	e009      	b.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	75fb      	strb	r3, [r7, #23]
      break;
 800756a:	e006      	b.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800756c:	bf00      	nop
 800756e:	e004      	b.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007570:	bf00      	nop
 8007572:	e002      	b.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007574:	bf00      	nop
 8007576:	e000      	b.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007578:	bf00      	nop
    }

    if(ret == HAL_OK)
 800757a:	7dfb      	ldrb	r3, [r7, #23]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d109      	bne.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007580:	4b54      	ldr	r3, [pc, #336]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8007582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007584:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800758c:	4951      	ldr	r1, [pc, #324]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800758e:	4313      	orrs	r3, r2
 8007590:	650b      	str	r3, [r1, #80]	; 0x50
 8007592:	e001      	b.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007594:	7dfb      	ldrb	r3, [r7, #23]
 8007596:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d04b      	beq.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80075aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075ae:	d02e      	beq.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80075b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075b4:	d828      	bhi.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80075b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075ba:	d02a      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80075bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075c0:	d822      	bhi.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80075c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80075c6:	d026      	beq.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80075c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80075cc:	d81c      	bhi.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80075ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075d2:	d010      	beq.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x496>
 80075d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075d8:	d816      	bhi.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d01d      	beq.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80075de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075e2:	d111      	bne.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	3304      	adds	r3, #4
 80075e8:	2101      	movs	r1, #1
 80075ea:	4618      	mov	r0, r3
 80075ec:	f000 ff70 	bl	80084d0 <RCCEx_PLL2_Config>
 80075f0:	4603      	mov	r3, r0
 80075f2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80075f4:	e012      	b.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	3324      	adds	r3, #36	; 0x24
 80075fa:	2101      	movs	r1, #1
 80075fc:	4618      	mov	r0, r3
 80075fe:	f001 f819 	bl	8008634 <RCCEx_PLL3_Config>
 8007602:	4603      	mov	r3, r0
 8007604:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007606:	e009      	b.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	75fb      	strb	r3, [r7, #23]
      break;
 800760c:	e006      	b.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800760e:	bf00      	nop
 8007610:	e004      	b.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007612:	bf00      	nop
 8007614:	e002      	b.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007616:	bf00      	nop
 8007618:	e000      	b.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800761a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800761c:	7dfb      	ldrb	r3, [r7, #23]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d10a      	bne.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007622:	4b2c      	ldr	r3, [pc, #176]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8007624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007626:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007630:	4928      	ldr	r1, [pc, #160]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8007632:	4313      	orrs	r3, r2
 8007634:	658b      	str	r3, [r1, #88]	; 0x58
 8007636:	e001      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007638:	7dfb      	ldrb	r3, [r7, #23]
 800763a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007644:	2b00      	cmp	r3, #0
 8007646:	d02f      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800764c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007650:	d00e      	beq.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8007652:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007656:	d814      	bhi.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8007658:	2b00      	cmp	r3, #0
 800765a:	d015      	beq.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800765c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007660:	d10f      	bne.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007662:	4b1c      	ldr	r3, [pc, #112]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8007664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007666:	4a1b      	ldr	r2, [pc, #108]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8007668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800766c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800766e:	e00c      	b.n	800768a <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	3304      	adds	r3, #4
 8007674:	2101      	movs	r1, #1
 8007676:	4618      	mov	r0, r3
 8007678:	f000 ff2a 	bl	80084d0 <RCCEx_PLL2_Config>
 800767c:	4603      	mov	r3, r0
 800767e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007680:	e003      	b.n	800768a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	75fb      	strb	r3, [r7, #23]
      break;
 8007686:	e000      	b.n	800768a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8007688:	bf00      	nop
    }

    if(ret == HAL_OK)
 800768a:	7dfb      	ldrb	r3, [r7, #23]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d109      	bne.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007690:	4b10      	ldr	r3, [pc, #64]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8007692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007694:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800769c:	490d      	ldr	r1, [pc, #52]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800769e:	4313      	orrs	r3, r2
 80076a0:	650b      	str	r3, [r1, #80]	; 0x50
 80076a2:	e001      	b.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076a4:	7dfb      	ldrb	r3, [r7, #23]
 80076a6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d034      	beq.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076b8:	2b03      	cmp	r3, #3
 80076ba:	d81d      	bhi.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80076bc:	a201      	add	r2, pc, #4	; (adr r2, 80076c4 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80076be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c2:	bf00      	nop
 80076c4:	080076ff 	.word	0x080076ff
 80076c8:	080076d9 	.word	0x080076d9
 80076cc:	080076e7 	.word	0x080076e7
 80076d0:	080076ff 	.word	0x080076ff
 80076d4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076d8:	4bb1      	ldr	r3, [pc, #708]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80076da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076dc:	4ab0      	ldr	r2, [pc, #704]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80076de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80076e4:	e00c      	b.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	3304      	adds	r3, #4
 80076ea:	2102      	movs	r1, #2
 80076ec:	4618      	mov	r0, r3
 80076ee:	f000 feef 	bl	80084d0 <RCCEx_PLL2_Config>
 80076f2:	4603      	mov	r3, r0
 80076f4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80076f6:	e003      	b.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	75fb      	strb	r3, [r7, #23]
      break;
 80076fc:	e000      	b.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 80076fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007700:	7dfb      	ldrb	r3, [r7, #23]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d109      	bne.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007706:	4ba6      	ldr	r3, [pc, #664]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800770a:	f023 0203 	bic.w	r2, r3, #3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007712:	49a3      	ldr	r1, [pc, #652]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007714:	4313      	orrs	r3, r2
 8007716:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007718:	e001      	b.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800771a:	7dfb      	ldrb	r3, [r7, #23]
 800771c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007726:	2b00      	cmp	r3, #0
 8007728:	f000 8086 	beq.w	8007838 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800772c:	4b9d      	ldr	r3, [pc, #628]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a9c      	ldr	r2, [pc, #624]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8007732:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007736:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007738:	f7fa f81c 	bl	8001774 <HAL_GetTick>
 800773c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800773e:	e009      	b.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007740:	f7fa f818 	bl	8001774 <HAL_GetTick>
 8007744:	4602      	mov	r2, r0
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	1ad3      	subs	r3, r2, r3
 800774a:	2b64      	cmp	r3, #100	; 0x64
 800774c:	d902      	bls.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800774e:	2303      	movs	r3, #3
 8007750:	75fb      	strb	r3, [r7, #23]
        break;
 8007752:	e005      	b.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007754:	4b93      	ldr	r3, [pc, #588]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800775c:	2b00      	cmp	r3, #0
 800775e:	d0ef      	beq.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8007760:	7dfb      	ldrb	r3, [r7, #23]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d166      	bne.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007766:	4b8e      	ldr	r3, [pc, #568]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007768:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007770:	4053      	eors	r3, r2
 8007772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007776:	2b00      	cmp	r3, #0
 8007778:	d013      	beq.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800777a:	4b89      	ldr	r3, [pc, #548]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800777c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800777e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007782:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007784:	4b86      	ldr	r3, [pc, #536]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007788:	4a85      	ldr	r2, [pc, #532]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800778a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800778e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007790:	4b83      	ldr	r3, [pc, #524]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007794:	4a82      	ldr	r2, [pc, #520]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007796:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800779a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800779c:	4a80      	ldr	r2, [pc, #512]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80077a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077ac:	d115      	bne.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077ae:	f7f9 ffe1 	bl	8001774 <HAL_GetTick>
 80077b2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80077b4:	e00b      	b.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077b6:	f7f9 ffdd 	bl	8001774 <HAL_GetTick>
 80077ba:	4602      	mov	r2, r0
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	1ad3      	subs	r3, r2, r3
 80077c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d902      	bls.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 80077c8:	2303      	movs	r3, #3
 80077ca:	75fb      	strb	r3, [r7, #23]
            break;
 80077cc:	e005      	b.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80077ce:	4b74      	ldr	r3, [pc, #464]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80077d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077d2:	f003 0302 	and.w	r3, r3, #2
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d0ed      	beq.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 80077da:	7dfb      	ldrb	r3, [r7, #23]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d126      	bne.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80077e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077ee:	d10d      	bne.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 80077f0:	4b6b      	ldr	r3, [pc, #428]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80077fe:	0919      	lsrs	r1, r3, #4
 8007800:	4b69      	ldr	r3, [pc, #420]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007802:	400b      	ands	r3, r1
 8007804:	4966      	ldr	r1, [pc, #408]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007806:	4313      	orrs	r3, r2
 8007808:	610b      	str	r3, [r1, #16]
 800780a:	e005      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800780c:	4b64      	ldr	r3, [pc, #400]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800780e:	691b      	ldr	r3, [r3, #16]
 8007810:	4a63      	ldr	r2, [pc, #396]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007812:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007816:	6113      	str	r3, [r2, #16]
 8007818:	4b61      	ldr	r3, [pc, #388]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800781a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007822:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007826:	495e      	ldr	r1, [pc, #376]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007828:	4313      	orrs	r3, r2
 800782a:	670b      	str	r3, [r1, #112]	; 0x70
 800782c:	e004      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800782e:	7dfb      	ldrb	r3, [r7, #23]
 8007830:	75bb      	strb	r3, [r7, #22]
 8007832:	e001      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007834:	7dfb      	ldrb	r3, [r7, #23]
 8007836:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 0301 	and.w	r3, r3, #1
 8007840:	2b00      	cmp	r3, #0
 8007842:	d07e      	beq.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007848:	2b28      	cmp	r3, #40	; 0x28
 800784a:	d867      	bhi.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800784c:	a201      	add	r2, pc, #4	; (adr r2, 8007854 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800784e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007852:	bf00      	nop
 8007854:	08007923 	.word	0x08007923
 8007858:	0800791d 	.word	0x0800791d
 800785c:	0800791d 	.word	0x0800791d
 8007860:	0800791d 	.word	0x0800791d
 8007864:	0800791d 	.word	0x0800791d
 8007868:	0800791d 	.word	0x0800791d
 800786c:	0800791d 	.word	0x0800791d
 8007870:	0800791d 	.word	0x0800791d
 8007874:	080078f9 	.word	0x080078f9
 8007878:	0800791d 	.word	0x0800791d
 800787c:	0800791d 	.word	0x0800791d
 8007880:	0800791d 	.word	0x0800791d
 8007884:	0800791d 	.word	0x0800791d
 8007888:	0800791d 	.word	0x0800791d
 800788c:	0800791d 	.word	0x0800791d
 8007890:	0800791d 	.word	0x0800791d
 8007894:	0800790b 	.word	0x0800790b
 8007898:	0800791d 	.word	0x0800791d
 800789c:	0800791d 	.word	0x0800791d
 80078a0:	0800791d 	.word	0x0800791d
 80078a4:	0800791d 	.word	0x0800791d
 80078a8:	0800791d 	.word	0x0800791d
 80078ac:	0800791d 	.word	0x0800791d
 80078b0:	0800791d 	.word	0x0800791d
 80078b4:	08007923 	.word	0x08007923
 80078b8:	0800791d 	.word	0x0800791d
 80078bc:	0800791d 	.word	0x0800791d
 80078c0:	0800791d 	.word	0x0800791d
 80078c4:	0800791d 	.word	0x0800791d
 80078c8:	0800791d 	.word	0x0800791d
 80078cc:	0800791d 	.word	0x0800791d
 80078d0:	0800791d 	.word	0x0800791d
 80078d4:	08007923 	.word	0x08007923
 80078d8:	0800791d 	.word	0x0800791d
 80078dc:	0800791d 	.word	0x0800791d
 80078e0:	0800791d 	.word	0x0800791d
 80078e4:	0800791d 	.word	0x0800791d
 80078e8:	0800791d 	.word	0x0800791d
 80078ec:	0800791d 	.word	0x0800791d
 80078f0:	0800791d 	.word	0x0800791d
 80078f4:	08007923 	.word	0x08007923
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	3304      	adds	r3, #4
 80078fc:	2101      	movs	r1, #1
 80078fe:	4618      	mov	r0, r3
 8007900:	f000 fde6 	bl	80084d0 <RCCEx_PLL2_Config>
 8007904:	4603      	mov	r3, r0
 8007906:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007908:	e00c      	b.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	3324      	adds	r3, #36	; 0x24
 800790e:	2101      	movs	r1, #1
 8007910:	4618      	mov	r0, r3
 8007912:	f000 fe8f 	bl	8008634 <RCCEx_PLL3_Config>
 8007916:	4603      	mov	r3, r0
 8007918:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800791a:	e003      	b.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	75fb      	strb	r3, [r7, #23]
      break;
 8007920:	e000      	b.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8007922:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007924:	7dfb      	ldrb	r3, [r7, #23]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d109      	bne.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800792a:	4b1d      	ldr	r3, [pc, #116]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800792c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800792e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007936:	491a      	ldr	r1, [pc, #104]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007938:	4313      	orrs	r3, r2
 800793a:	654b      	str	r3, [r1, #84]	; 0x54
 800793c:	e001      	b.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800793e:	7dfb      	ldrb	r3, [r7, #23]
 8007940:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f003 0302 	and.w	r3, r3, #2
 800794a:	2b00      	cmp	r3, #0
 800794c:	d03e      	beq.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007952:	2b05      	cmp	r3, #5
 8007954:	d820      	bhi.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8007956:	a201      	add	r2, pc, #4	; (adr r2, 800795c <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8007958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800795c:	080079ad 	.word	0x080079ad
 8007960:	08007975 	.word	0x08007975
 8007964:	08007987 	.word	0x08007987
 8007968:	080079ad 	.word	0x080079ad
 800796c:	080079ad 	.word	0x080079ad
 8007970:	080079ad 	.word	0x080079ad
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	3304      	adds	r3, #4
 8007978:	2101      	movs	r1, #1
 800797a:	4618      	mov	r0, r3
 800797c:	f000 fda8 	bl	80084d0 <RCCEx_PLL2_Config>
 8007980:	4603      	mov	r3, r0
 8007982:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007984:	e013      	b.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	3324      	adds	r3, #36	; 0x24
 800798a:	2101      	movs	r1, #1
 800798c:	4618      	mov	r0, r3
 800798e:	f000 fe51 	bl	8008634 <RCCEx_PLL3_Config>
 8007992:	4603      	mov	r3, r0
 8007994:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007996:	e00a      	b.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	75fb      	strb	r3, [r7, #23]
      break;
 800799c:	e007      	b.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800799e:	bf00      	nop
 80079a0:	58024400 	.word	0x58024400
 80079a4:	58024800 	.word	0x58024800
 80079a8:	00ffffcf 	.word	0x00ffffcf
      break;
 80079ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079ae:	7dfb      	ldrb	r3, [r7, #23]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d109      	bne.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80079b4:	4b9f      	ldr	r3, [pc, #636]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80079b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079b8:	f023 0207 	bic.w	r2, r3, #7
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079c0:	499c      	ldr	r1, [pc, #624]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80079c2:	4313      	orrs	r3, r2
 80079c4:	654b      	str	r3, [r1, #84]	; 0x54
 80079c6:	e001      	b.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079c8:	7dfb      	ldrb	r3, [r7, #23]
 80079ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f003 0304 	and.w	r3, r3, #4
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d039      	beq.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079de:	2b05      	cmp	r3, #5
 80079e0:	d820      	bhi.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 80079e2:	a201      	add	r2, pc, #4	; (adr r2, 80079e8 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80079e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e8:	08007a2b 	.word	0x08007a2b
 80079ec:	08007a01 	.word	0x08007a01
 80079f0:	08007a13 	.word	0x08007a13
 80079f4:	08007a2b 	.word	0x08007a2b
 80079f8:	08007a2b 	.word	0x08007a2b
 80079fc:	08007a2b 	.word	0x08007a2b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	3304      	adds	r3, #4
 8007a04:	2101      	movs	r1, #1
 8007a06:	4618      	mov	r0, r3
 8007a08:	f000 fd62 	bl	80084d0 <RCCEx_PLL2_Config>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007a10:	e00c      	b.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	3324      	adds	r3, #36	; 0x24
 8007a16:	2101      	movs	r1, #1
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f000 fe0b 	bl	8008634 <RCCEx_PLL3_Config>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007a22:	e003      	b.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	75fb      	strb	r3, [r7, #23]
      break;
 8007a28:	e000      	b.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8007a2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a2c:	7dfb      	ldrb	r3, [r7, #23]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d10a      	bne.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007a32:	4b80      	ldr	r3, [pc, #512]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a36:	f023 0207 	bic.w	r2, r3, #7
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a40:	497c      	ldr	r1, [pc, #496]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007a42:	4313      	orrs	r3, r2
 8007a44:	658b      	str	r3, [r1, #88]	; 0x58
 8007a46:	e001      	b.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a48:	7dfb      	ldrb	r3, [r7, #23]
 8007a4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f003 0320 	and.w	r3, r3, #32
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d04b      	beq.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a62:	d02e      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8007a64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a68:	d828      	bhi.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8007a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a6e:	d02a      	beq.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8007a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a74:	d822      	bhi.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8007a76:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007a7a:	d026      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8007a7c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007a80:	d81c      	bhi.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8007a82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a86:	d010      	beq.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8007a88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a8c:	d816      	bhi.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d01d      	beq.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8007a92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a96:	d111      	bne.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	3304      	adds	r3, #4
 8007a9c:	2100      	movs	r1, #0
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f000 fd16 	bl	80084d0 <RCCEx_PLL2_Config>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007aa8:	e012      	b.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	3324      	adds	r3, #36	; 0x24
 8007aae:	2102      	movs	r1, #2
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f000 fdbf 	bl	8008634 <RCCEx_PLL3_Config>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007aba:	e009      	b.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	75fb      	strb	r3, [r7, #23]
      break;
 8007ac0:	e006      	b.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8007ac2:	bf00      	nop
 8007ac4:	e004      	b.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8007ac6:	bf00      	nop
 8007ac8:	e002      	b.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8007aca:	bf00      	nop
 8007acc:	e000      	b.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8007ace:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ad0:	7dfb      	ldrb	r3, [r7, #23]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d10a      	bne.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007ad6:	4b57      	ldr	r3, [pc, #348]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ada:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ae4:	4953      	ldr	r1, [pc, #332]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	654b      	str	r3, [r1, #84]	; 0x54
 8007aea:	e001      	b.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aec:	7dfb      	ldrb	r3, [r7, #23]
 8007aee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d04b      	beq.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b02:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007b06:	d02e      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8007b08:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007b0c:	d828      	bhi.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8007b0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b12:	d02a      	beq.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8007b14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b18:	d822      	bhi.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8007b1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b1e:	d026      	beq.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8007b20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b24:	d81c      	bhi.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8007b26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b2a:	d010      	beq.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8007b2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b30:	d816      	bhi.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d01d      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b3a:	d111      	bne.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	3304      	adds	r3, #4
 8007b40:	2100      	movs	r1, #0
 8007b42:	4618      	mov	r0, r3
 8007b44:	f000 fcc4 	bl	80084d0 <RCCEx_PLL2_Config>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007b4c:	e012      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	3324      	adds	r3, #36	; 0x24
 8007b52:	2102      	movs	r1, #2
 8007b54:	4618      	mov	r0, r3
 8007b56:	f000 fd6d 	bl	8008634 <RCCEx_PLL3_Config>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007b5e:	e009      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	75fb      	strb	r3, [r7, #23]
      break;
 8007b64:	e006      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8007b66:	bf00      	nop
 8007b68:	e004      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8007b6a:	bf00      	nop
 8007b6c:	e002      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8007b6e:	bf00      	nop
 8007b70:	e000      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8007b72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b74:	7dfb      	ldrb	r3, [r7, #23]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d10a      	bne.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007b7a:	4b2e      	ldr	r3, [pc, #184]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b7e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b88:	492a      	ldr	r1, [pc, #168]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	658b      	str	r3, [r1, #88]	; 0x58
 8007b8e:	e001      	b.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b90:	7dfb      	ldrb	r3, [r7, #23]
 8007b92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d04d      	beq.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ba6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007baa:	d02e      	beq.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8007bac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007bb0:	d828      	bhi.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8007bb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bb6:	d02a      	beq.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8007bb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bbc:	d822      	bhi.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8007bbe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007bc2:	d026      	beq.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8007bc4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007bc8:	d81c      	bhi.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8007bca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bce:	d010      	beq.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8007bd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bd4:	d816      	bhi.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d01d      	beq.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8007bda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bde:	d111      	bne.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	3304      	adds	r3, #4
 8007be4:	2100      	movs	r1, #0
 8007be6:	4618      	mov	r0, r3
 8007be8:	f000 fc72 	bl	80084d0 <RCCEx_PLL2_Config>
 8007bec:	4603      	mov	r3, r0
 8007bee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007bf0:	e012      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	3324      	adds	r3, #36	; 0x24
 8007bf6:	2102      	movs	r1, #2
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f000 fd1b 	bl	8008634 <RCCEx_PLL3_Config>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007c02:	e009      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	75fb      	strb	r3, [r7, #23]
      break;
 8007c08:	e006      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8007c0a:	bf00      	nop
 8007c0c:	e004      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8007c0e:	bf00      	nop
 8007c10:	e002      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8007c12:	bf00      	nop
 8007c14:	e000      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8007c16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c18:	7dfb      	ldrb	r3, [r7, #23]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d10c      	bne.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007c1e:	4b05      	ldr	r3, [pc, #20]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c2c:	4901      	ldr	r1, [pc, #4]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	658b      	str	r3, [r1, #88]	; 0x58
 8007c32:	e003      	b.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8007c34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c38:	7dfb      	ldrb	r3, [r7, #23]
 8007c3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f003 0308 	and.w	r3, r3, #8
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d018      	beq.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c50:	d10a      	bne.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	3324      	adds	r3, #36	; 0x24
 8007c56:	2102      	movs	r1, #2
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f000 fceb 	bl	8008634 <RCCEx_PLL3_Config>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d001      	beq.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007c68:	4b8a      	ldr	r3, [pc, #552]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8007c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c6c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c74:	4987      	ldr	r1, [pc, #540]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8007c76:	4313      	orrs	r3, r2
 8007c78:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f003 0310 	and.w	r3, r3, #16
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d01a      	beq.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c90:	d10a      	bne.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	3324      	adds	r3, #36	; 0x24
 8007c96:	2102      	movs	r1, #2
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f000 fccb 	bl	8008634 <RCCEx_PLL3_Config>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d001      	beq.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007ca8:	4b7a      	ldr	r3, [pc, #488]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8007caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cb6:	4977      	ldr	r1, [pc, #476]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d034      	beq.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007cce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cd2:	d01d      	beq.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8007cd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cd8:	d817      	bhi.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d003      	beq.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8007cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ce2:	d009      	beq.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007ce4:	e011      	b.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	3304      	adds	r3, #4
 8007cea:	2100      	movs	r1, #0
 8007cec:	4618      	mov	r0, r3
 8007cee:	f000 fbef 	bl	80084d0 <RCCEx_PLL2_Config>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007cf6:	e00c      	b.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	3324      	adds	r3, #36	; 0x24
 8007cfc:	2102      	movs	r1, #2
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f000 fc98 	bl	8008634 <RCCEx_PLL3_Config>
 8007d04:	4603      	mov	r3, r0
 8007d06:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007d08:	e003      	b.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	75fb      	strb	r3, [r7, #23]
      break;
 8007d0e:	e000      	b.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8007d10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d12:	7dfb      	ldrb	r3, [r7, #23]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d10a      	bne.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007d18:	4b5e      	ldr	r3, [pc, #376]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8007d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d26:	495b      	ldr	r1, [pc, #364]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	658b      	str	r3, [r1, #88]	; 0x58
 8007d2c:	e001      	b.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d2e:	7dfb      	ldrb	r3, [r7, #23]
 8007d30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d033      	beq.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d48:	d01c      	beq.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007d4a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d4e:	d816      	bhi.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007d50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d54:	d003      	beq.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007d56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d5a:	d007      	beq.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8007d5c:	e00f      	b.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d5e:	4b4d      	ldr	r3, [pc, #308]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8007d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d62:	4a4c      	ldr	r2, [pc, #304]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8007d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007d6a:	e00c      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	3324      	adds	r3, #36	; 0x24
 8007d70:	2101      	movs	r1, #1
 8007d72:	4618      	mov	r0, r3
 8007d74:	f000 fc5e 	bl	8008634 <RCCEx_PLL3_Config>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007d7c:	e003      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	75fb      	strb	r3, [r7, #23]
      break;
 8007d82:	e000      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8007d84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d86:	7dfb      	ldrb	r3, [r7, #23]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d10a      	bne.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007d8c:	4b41      	ldr	r3, [pc, #260]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8007d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d9a:	493e      	ldr	r1, [pc, #248]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	654b      	str	r3, [r1, #84]	; 0x54
 8007da0:	e001      	b.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007da2:	7dfb      	ldrb	r3, [r7, #23]
 8007da4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d029      	beq.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d003      	beq.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8007dba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dbe:	d007      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007dc0:	e00f      	b.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dc2:	4b34      	ldr	r3, [pc, #208]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8007dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc6:	4a33      	ldr	r2, [pc, #204]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8007dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dcc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007dce:	e00b      	b.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	3304      	adds	r3, #4
 8007dd4:	2102      	movs	r1, #2
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f000 fb7a 	bl	80084d0 <RCCEx_PLL2_Config>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007de0:	e002      	b.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	75fb      	strb	r3, [r7, #23]
      break;
 8007de6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007de8:	7dfb      	ldrb	r3, [r7, #23]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d109      	bne.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007dee:	4b29      	ldr	r3, [pc, #164]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8007df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007df2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dfa:	4926      	ldr	r1, [pc, #152]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007e00:	e001      	b.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e02:	7dfb      	ldrb	r3, [r7, #23]
 8007e04:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d00a      	beq.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	3324      	adds	r3, #36	; 0x24
 8007e16:	2102      	movs	r1, #2
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f000 fc0b 	bl	8008634 <RCCEx_PLL3_Config>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d001      	beq.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 8007e24:	2301      	movs	r3, #1
 8007e26:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d033      	beq.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e3c:	d017      	beq.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8007e3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e42:	d811      	bhi.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007e44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e48:	d013      	beq.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 8007e4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e4e:	d80b      	bhi.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d010      	beq.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8007e54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e58:	d106      	bne.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e5a:	4b0e      	ldr	r3, [pc, #56]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8007e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e5e:	4a0d      	ldr	r2, [pc, #52]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8007e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007e66:	e007      	b.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	75fb      	strb	r3, [r7, #23]
      break;
 8007e6c:	e004      	b.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8007e6e:	bf00      	nop
 8007e70:	e002      	b.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8007e72:	bf00      	nop
 8007e74:	e000      	b.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8007e76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e78:	7dfb      	ldrb	r3, [r7, #23]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d10c      	bne.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007e7e:	4b05      	ldr	r3, [pc, #20]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8007e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e8a:	4902      	ldr	r1, [pc, #8]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	654b      	str	r3, [r1, #84]	; 0x54
 8007e90:	e004      	b.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 8007e92:	bf00      	nop
 8007e94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e98:	7dfb      	ldrb	r3, [r7, #23]
 8007e9a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d008      	beq.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007ea8:	4b29      	ldr	r3, [pc, #164]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007eb4:	4926      	ldr	r1, [pc, #152]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d008      	beq.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007ec6:	4b22      	ldr	r3, [pc, #136]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eca:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ed2:	491f      	ldr	r1, [pc, #124]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d00d      	beq.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007ee4:	4b1a      	ldr	r3, [pc, #104]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	4a19      	ldr	r2, [pc, #100]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007eea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007eee:	6113      	str	r3, [r2, #16]
 8007ef0:	4b17      	ldr	r3, [pc, #92]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007ef2:	691a      	ldr	r2, [r3, #16]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007efa:	4915      	ldr	r1, [pc, #84]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007efc:	4313      	orrs	r3, r2
 8007efe:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	da08      	bge.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007f08:	4b11      	ldr	r3, [pc, #68]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f0c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f14:	490e      	ldr	r1, [pc, #56]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007f16:	4313      	orrs	r3, r2
 8007f18:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d009      	beq.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007f26:	4b0a      	ldr	r3, [pc, #40]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f34:	4906      	ldr	r1, [pc, #24]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007f36:	4313      	orrs	r3, r2
 8007f38:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007f3a:	7dbb      	ldrb	r3, [r7, #22]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d101      	bne.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8007f40:	2300      	movs	r3, #0
 8007f42:	e000      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3718      	adds	r7, #24
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop
 8007f50:	58024400 	.word	0x58024400

08007f54 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007f58:	f7ff f864 	bl	8007024 <HAL_RCC_GetHCLKFreq>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	4b06      	ldr	r3, [pc, #24]	; (8007f78 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007f60:	6a1b      	ldr	r3, [r3, #32]
 8007f62:	091b      	lsrs	r3, r3, #4
 8007f64:	f003 0307 	and.w	r3, r3, #7
 8007f68:	4904      	ldr	r1, [pc, #16]	; (8007f7c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007f6a:	5ccb      	ldrb	r3, [r1, r3]
 8007f6c:	f003 031f 	and.w	r3, r3, #31
 8007f70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	58024400 	.word	0x58024400
 8007f7c:	08013fe4 	.word	0x08013fe4

08007f80 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b089      	sub	sp, #36	; 0x24
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f88:	4ba1      	ldr	r3, [pc, #644]	; (8008210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f8c:	f003 0303 	and.w	r3, r3, #3
 8007f90:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007f92:	4b9f      	ldr	r3, [pc, #636]	; (8008210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f96:	0b1b      	lsrs	r3, r3, #12
 8007f98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f9c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007f9e:	4b9c      	ldr	r3, [pc, #624]	; (8008210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa2:	091b      	lsrs	r3, r3, #4
 8007fa4:	f003 0301 	and.w	r3, r3, #1
 8007fa8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007faa:	4b99      	ldr	r3, [pc, #612]	; (8008210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fae:	08db      	lsrs	r3, r3, #3
 8007fb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007fb4:	693a      	ldr	r2, [r7, #16]
 8007fb6:	fb02 f303 	mul.w	r3, r2, r3
 8007fba:	ee07 3a90 	vmov	s15, r3
 8007fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fc2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	f000 8111 	beq.w	80081f0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	2b02      	cmp	r3, #2
 8007fd2:	f000 8083 	beq.w	80080dc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	2b02      	cmp	r3, #2
 8007fda:	f200 80a1 	bhi.w	8008120 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007fde:	69bb      	ldr	r3, [r7, #24]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d003      	beq.n	8007fec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d056      	beq.n	8008098 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007fea:	e099      	b.n	8008120 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007fec:	4b88      	ldr	r3, [pc, #544]	; (8008210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f003 0320 	and.w	r3, r3, #32
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d02d      	beq.n	8008054 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ff8:	4b85      	ldr	r3, [pc, #532]	; (8008210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	08db      	lsrs	r3, r3, #3
 8007ffe:	f003 0303 	and.w	r3, r3, #3
 8008002:	4a84      	ldr	r2, [pc, #528]	; (8008214 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008004:	fa22 f303 	lsr.w	r3, r2, r3
 8008008:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	ee07 3a90 	vmov	s15, r3
 8008010:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	ee07 3a90 	vmov	s15, r3
 800801a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800801e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008022:	4b7b      	ldr	r3, [pc, #492]	; (8008210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800802a:	ee07 3a90 	vmov	s15, r3
 800802e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008032:	ed97 6a03 	vldr	s12, [r7, #12]
 8008036:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008218 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800803a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800803e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008042:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800804a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800804e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008052:	e087      	b.n	8008164 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	ee07 3a90 	vmov	s15, r3
 800805a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800805e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800821c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008066:	4b6a      	ldr	r3, [pc, #424]	; (8008210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800806a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800806e:	ee07 3a90 	vmov	s15, r3
 8008072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008076:	ed97 6a03 	vldr	s12, [r7, #12]
 800807a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008218 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800807e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008086:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800808a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800808e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008092:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008096:	e065      	b.n	8008164 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	ee07 3a90 	vmov	s15, r3
 800809e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080a2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008220 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80080a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080aa:	4b59      	ldr	r3, [pc, #356]	; (8008210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080b2:	ee07 3a90 	vmov	s15, r3
 80080b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80080be:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008218 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080da:	e043      	b.n	8008164 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	ee07 3a90 	vmov	s15, r3
 80080e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080e6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008224 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80080ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080ee:	4b48      	ldr	r3, [pc, #288]	; (8008210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080f6:	ee07 3a90 	vmov	s15, r3
 80080fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008102:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008218 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800810a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800810e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800811a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800811e:	e021      	b.n	8008164 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	ee07 3a90 	vmov	s15, r3
 8008126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800812a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008220 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800812e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008132:	4b37      	ldr	r3, [pc, #220]	; (8008210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800813a:	ee07 3a90 	vmov	s15, r3
 800813e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008142:	ed97 6a03 	vldr	s12, [r7, #12]
 8008146:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008218 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800814a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800814e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008152:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800815a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800815e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008162:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008164:	4b2a      	ldr	r3, [pc, #168]	; (8008210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008168:	0a5b      	lsrs	r3, r3, #9
 800816a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800816e:	ee07 3a90 	vmov	s15, r3
 8008172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008176:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800817a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800817e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008182:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008186:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800818a:	ee17 2a90 	vmov	r2, s15
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008192:	4b1f      	ldr	r3, [pc, #124]	; (8008210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008196:	0c1b      	lsrs	r3, r3, #16
 8008198:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800819c:	ee07 3a90 	vmov	s15, r3
 80081a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80081b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081b8:	ee17 2a90 	vmov	r2, s15
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80081c0:	4b13      	ldr	r3, [pc, #76]	; (8008210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c4:	0e1b      	lsrs	r3, r3, #24
 80081c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081ca:	ee07 3a90 	vmov	s15, r3
 80081ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081da:	edd7 6a07 	vldr	s13, [r7, #28]
 80081de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081e6:	ee17 2a90 	vmov	r2, s15
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80081ee:	e008      	b.n	8008202 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	609a      	str	r2, [r3, #8]
}
 8008202:	bf00      	nop
 8008204:	3724      	adds	r7, #36	; 0x24
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr
 800820e:	bf00      	nop
 8008210:	58024400 	.word	0x58024400
 8008214:	03d09000 	.word	0x03d09000
 8008218:	46000000 	.word	0x46000000
 800821c:	4c742400 	.word	0x4c742400
 8008220:	4a742400 	.word	0x4a742400
 8008224:	4af42400 	.word	0x4af42400

08008228 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008228:	b480      	push	{r7}
 800822a:	b089      	sub	sp, #36	; 0x24
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008230:	4ba1      	ldr	r3, [pc, #644]	; (80084b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008234:	f003 0303 	and.w	r3, r3, #3
 8008238:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800823a:	4b9f      	ldr	r3, [pc, #636]	; (80084b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800823c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800823e:	0d1b      	lsrs	r3, r3, #20
 8008240:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008244:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008246:	4b9c      	ldr	r3, [pc, #624]	; (80084b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800824a:	0a1b      	lsrs	r3, r3, #8
 800824c:	f003 0301 	and.w	r3, r3, #1
 8008250:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008252:	4b99      	ldr	r3, [pc, #612]	; (80084b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008256:	08db      	lsrs	r3, r3, #3
 8008258:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800825c:	693a      	ldr	r2, [r7, #16]
 800825e:	fb02 f303 	mul.w	r3, r2, r3
 8008262:	ee07 3a90 	vmov	s15, r3
 8008266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800826a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	2b00      	cmp	r3, #0
 8008272:	f000 8111 	beq.w	8008498 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	2b02      	cmp	r3, #2
 800827a:	f000 8083 	beq.w	8008384 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	2b02      	cmp	r3, #2
 8008282:	f200 80a1 	bhi.w	80083c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d003      	beq.n	8008294 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800828c:	69bb      	ldr	r3, [r7, #24]
 800828e:	2b01      	cmp	r3, #1
 8008290:	d056      	beq.n	8008340 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008292:	e099      	b.n	80083c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008294:	4b88      	ldr	r3, [pc, #544]	; (80084b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f003 0320 	and.w	r3, r3, #32
 800829c:	2b00      	cmp	r3, #0
 800829e:	d02d      	beq.n	80082fc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80082a0:	4b85      	ldr	r3, [pc, #532]	; (80084b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	08db      	lsrs	r3, r3, #3
 80082a6:	f003 0303 	and.w	r3, r3, #3
 80082aa:	4a84      	ldr	r2, [pc, #528]	; (80084bc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80082ac:	fa22 f303 	lsr.w	r3, r2, r3
 80082b0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	ee07 3a90 	vmov	s15, r3
 80082b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	ee07 3a90 	vmov	s15, r3
 80082c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082ca:	4b7b      	ldr	r3, [pc, #492]	; (80084b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082d2:	ee07 3a90 	vmov	s15, r3
 80082d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082da:	ed97 6a03 	vldr	s12, [r7, #12]
 80082de:	eddf 5a78 	vldr	s11, [pc, #480]	; 80084c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80082e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082f6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80082fa:	e087      	b.n	800840c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	ee07 3a90 	vmov	s15, r3
 8008302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008306:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80084c4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800830a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800830e:	4b6a      	ldr	r3, [pc, #424]	; (80084b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008316:	ee07 3a90 	vmov	s15, r3
 800831a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800831e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008322:	eddf 5a67 	vldr	s11, [pc, #412]	; 80084c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800832a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800832e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800833a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800833e:	e065      	b.n	800840c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	ee07 3a90 	vmov	s15, r3
 8008346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800834a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80084c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800834e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008352:	4b59      	ldr	r3, [pc, #356]	; (80084b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800835a:	ee07 3a90 	vmov	s15, r3
 800835e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008362:	ed97 6a03 	vldr	s12, [r7, #12]
 8008366:	eddf 5a56 	vldr	s11, [pc, #344]	; 80084c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800836a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800836e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008372:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800837a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800837e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008382:	e043      	b.n	800840c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	ee07 3a90 	vmov	s15, r3
 800838a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800838e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80084cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008396:	4b48      	ldr	r3, [pc, #288]	; (80084b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800839a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800839e:	ee07 3a90 	vmov	s15, r3
 80083a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80083aa:	eddf 5a45 	vldr	s11, [pc, #276]	; 80084c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80083ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083c6:	e021      	b.n	800840c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	ee07 3a90 	vmov	s15, r3
 80083ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083d2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80084c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80083d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083da:	4b37      	ldr	r3, [pc, #220]	; (80084b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083e2:	ee07 3a90 	vmov	s15, r3
 80083e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80083ee:	eddf 5a34 	vldr	s11, [pc, #208]	; 80084c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80083f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008406:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800840a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800840c:	4b2a      	ldr	r3, [pc, #168]	; (80084b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800840e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008410:	0a5b      	lsrs	r3, r3, #9
 8008412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008416:	ee07 3a90 	vmov	s15, r3
 800841a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800841e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008422:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008426:	edd7 6a07 	vldr	s13, [r7, #28]
 800842a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800842e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008432:	ee17 2a90 	vmov	r2, s15
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800843a:	4b1f      	ldr	r3, [pc, #124]	; (80084b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800843c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800843e:	0c1b      	lsrs	r3, r3, #16
 8008440:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008444:	ee07 3a90 	vmov	s15, r3
 8008448:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800844c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008450:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008454:	edd7 6a07 	vldr	s13, [r7, #28]
 8008458:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800845c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008460:	ee17 2a90 	vmov	r2, s15
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008468:	4b13      	ldr	r3, [pc, #76]	; (80084b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800846a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800846c:	0e1b      	lsrs	r3, r3, #24
 800846e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008472:	ee07 3a90 	vmov	s15, r3
 8008476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800847a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800847e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008482:	edd7 6a07 	vldr	s13, [r7, #28]
 8008486:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800848a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800848e:	ee17 2a90 	vmov	r2, s15
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008496:	e008      	b.n	80084aa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2200      	movs	r2, #0
 80084a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	609a      	str	r2, [r3, #8]
}
 80084aa:	bf00      	nop
 80084ac:	3724      	adds	r7, #36	; 0x24
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr
 80084b6:	bf00      	nop
 80084b8:	58024400 	.word	0x58024400
 80084bc:	03d09000 	.word	0x03d09000
 80084c0:	46000000 	.word	0x46000000
 80084c4:	4c742400 	.word	0x4c742400
 80084c8:	4a742400 	.word	0x4a742400
 80084cc:	4af42400 	.word	0x4af42400

080084d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80084da:	2300      	movs	r3, #0
 80084dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80084de:	4b53      	ldr	r3, [pc, #332]	; (800862c <RCCEx_PLL2_Config+0x15c>)
 80084e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e2:	f003 0303 	and.w	r3, r3, #3
 80084e6:	2b03      	cmp	r3, #3
 80084e8:	d101      	bne.n	80084ee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	e099      	b.n	8008622 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80084ee:	4b4f      	ldr	r3, [pc, #316]	; (800862c <RCCEx_PLL2_Config+0x15c>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a4e      	ldr	r2, [pc, #312]	; (800862c <RCCEx_PLL2_Config+0x15c>)
 80084f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80084f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084fa:	f7f9 f93b 	bl	8001774 <HAL_GetTick>
 80084fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008500:	e008      	b.n	8008514 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008502:	f7f9 f937 	bl	8001774 <HAL_GetTick>
 8008506:	4602      	mov	r2, r0
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	1ad3      	subs	r3, r2, r3
 800850c:	2b02      	cmp	r3, #2
 800850e:	d901      	bls.n	8008514 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008510:	2303      	movs	r3, #3
 8008512:	e086      	b.n	8008622 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008514:	4b45      	ldr	r3, [pc, #276]	; (800862c <RCCEx_PLL2_Config+0x15c>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800851c:	2b00      	cmp	r3, #0
 800851e:	d1f0      	bne.n	8008502 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008520:	4b42      	ldr	r3, [pc, #264]	; (800862c <RCCEx_PLL2_Config+0x15c>)
 8008522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008524:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	031b      	lsls	r3, r3, #12
 800852e:	493f      	ldr	r1, [pc, #252]	; (800862c <RCCEx_PLL2_Config+0x15c>)
 8008530:	4313      	orrs	r3, r2
 8008532:	628b      	str	r3, [r1, #40]	; 0x28
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	3b01      	subs	r3, #1
 800853a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	3b01      	subs	r3, #1
 8008544:	025b      	lsls	r3, r3, #9
 8008546:	b29b      	uxth	r3, r3
 8008548:	431a      	orrs	r2, r3
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	68db      	ldr	r3, [r3, #12]
 800854e:	3b01      	subs	r3, #1
 8008550:	041b      	lsls	r3, r3, #16
 8008552:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008556:	431a      	orrs	r2, r3
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	691b      	ldr	r3, [r3, #16]
 800855c:	3b01      	subs	r3, #1
 800855e:	061b      	lsls	r3, r3, #24
 8008560:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008564:	4931      	ldr	r1, [pc, #196]	; (800862c <RCCEx_PLL2_Config+0x15c>)
 8008566:	4313      	orrs	r3, r2
 8008568:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800856a:	4b30      	ldr	r3, [pc, #192]	; (800862c <RCCEx_PLL2_Config+0x15c>)
 800856c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800856e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	695b      	ldr	r3, [r3, #20]
 8008576:	492d      	ldr	r1, [pc, #180]	; (800862c <RCCEx_PLL2_Config+0x15c>)
 8008578:	4313      	orrs	r3, r2
 800857a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800857c:	4b2b      	ldr	r3, [pc, #172]	; (800862c <RCCEx_PLL2_Config+0x15c>)
 800857e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008580:	f023 0220 	bic.w	r2, r3, #32
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	699b      	ldr	r3, [r3, #24]
 8008588:	4928      	ldr	r1, [pc, #160]	; (800862c <RCCEx_PLL2_Config+0x15c>)
 800858a:	4313      	orrs	r3, r2
 800858c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800858e:	4b27      	ldr	r3, [pc, #156]	; (800862c <RCCEx_PLL2_Config+0x15c>)
 8008590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008592:	4a26      	ldr	r2, [pc, #152]	; (800862c <RCCEx_PLL2_Config+0x15c>)
 8008594:	f023 0310 	bic.w	r3, r3, #16
 8008598:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800859a:	4b24      	ldr	r3, [pc, #144]	; (800862c <RCCEx_PLL2_Config+0x15c>)
 800859c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800859e:	4b24      	ldr	r3, [pc, #144]	; (8008630 <RCCEx_PLL2_Config+0x160>)
 80085a0:	4013      	ands	r3, r2
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	69d2      	ldr	r2, [r2, #28]
 80085a6:	00d2      	lsls	r2, r2, #3
 80085a8:	4920      	ldr	r1, [pc, #128]	; (800862c <RCCEx_PLL2_Config+0x15c>)
 80085aa:	4313      	orrs	r3, r2
 80085ac:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80085ae:	4b1f      	ldr	r3, [pc, #124]	; (800862c <RCCEx_PLL2_Config+0x15c>)
 80085b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b2:	4a1e      	ldr	r2, [pc, #120]	; (800862c <RCCEx_PLL2_Config+0x15c>)
 80085b4:	f043 0310 	orr.w	r3, r3, #16
 80085b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d106      	bne.n	80085ce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80085c0:	4b1a      	ldr	r3, [pc, #104]	; (800862c <RCCEx_PLL2_Config+0x15c>)
 80085c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c4:	4a19      	ldr	r2, [pc, #100]	; (800862c <RCCEx_PLL2_Config+0x15c>)
 80085c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80085ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80085cc:	e00f      	b.n	80085ee <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d106      	bne.n	80085e2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80085d4:	4b15      	ldr	r3, [pc, #84]	; (800862c <RCCEx_PLL2_Config+0x15c>)
 80085d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d8:	4a14      	ldr	r2, [pc, #80]	; (800862c <RCCEx_PLL2_Config+0x15c>)
 80085da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80085e0:	e005      	b.n	80085ee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80085e2:	4b12      	ldr	r3, [pc, #72]	; (800862c <RCCEx_PLL2_Config+0x15c>)
 80085e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e6:	4a11      	ldr	r2, [pc, #68]	; (800862c <RCCEx_PLL2_Config+0x15c>)
 80085e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80085ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80085ee:	4b0f      	ldr	r3, [pc, #60]	; (800862c <RCCEx_PLL2_Config+0x15c>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a0e      	ldr	r2, [pc, #56]	; (800862c <RCCEx_PLL2_Config+0x15c>)
 80085f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80085f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085fa:	f7f9 f8bb 	bl	8001774 <HAL_GetTick>
 80085fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008600:	e008      	b.n	8008614 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008602:	f7f9 f8b7 	bl	8001774 <HAL_GetTick>
 8008606:	4602      	mov	r2, r0
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	1ad3      	subs	r3, r2, r3
 800860c:	2b02      	cmp	r3, #2
 800860e:	d901      	bls.n	8008614 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008610:	2303      	movs	r3, #3
 8008612:	e006      	b.n	8008622 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008614:	4b05      	ldr	r3, [pc, #20]	; (800862c <RCCEx_PLL2_Config+0x15c>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800861c:	2b00      	cmp	r3, #0
 800861e:	d0f0      	beq.n	8008602 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008620:	7bfb      	ldrb	r3, [r7, #15]
}
 8008622:	4618      	mov	r0, r3
 8008624:	3710      	adds	r7, #16
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
 800862a:	bf00      	nop
 800862c:	58024400 	.word	0x58024400
 8008630:	ffff0007 	.word	0xffff0007

08008634 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800863e:	2300      	movs	r3, #0
 8008640:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008642:	4b53      	ldr	r3, [pc, #332]	; (8008790 <RCCEx_PLL3_Config+0x15c>)
 8008644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008646:	f003 0303 	and.w	r3, r3, #3
 800864a:	2b03      	cmp	r3, #3
 800864c:	d101      	bne.n	8008652 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800864e:	2301      	movs	r3, #1
 8008650:	e099      	b.n	8008786 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008652:	4b4f      	ldr	r3, [pc, #316]	; (8008790 <RCCEx_PLL3_Config+0x15c>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a4e      	ldr	r2, [pc, #312]	; (8008790 <RCCEx_PLL3_Config+0x15c>)
 8008658:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800865c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800865e:	f7f9 f889 	bl	8001774 <HAL_GetTick>
 8008662:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008664:	e008      	b.n	8008678 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008666:	f7f9 f885 	bl	8001774 <HAL_GetTick>
 800866a:	4602      	mov	r2, r0
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	1ad3      	subs	r3, r2, r3
 8008670:	2b02      	cmp	r3, #2
 8008672:	d901      	bls.n	8008678 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008674:	2303      	movs	r3, #3
 8008676:	e086      	b.n	8008786 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008678:	4b45      	ldr	r3, [pc, #276]	; (8008790 <RCCEx_PLL3_Config+0x15c>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008680:	2b00      	cmp	r3, #0
 8008682:	d1f0      	bne.n	8008666 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008684:	4b42      	ldr	r3, [pc, #264]	; (8008790 <RCCEx_PLL3_Config+0x15c>)
 8008686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008688:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	051b      	lsls	r3, r3, #20
 8008692:	493f      	ldr	r1, [pc, #252]	; (8008790 <RCCEx_PLL3_Config+0x15c>)
 8008694:	4313      	orrs	r3, r2
 8008696:	628b      	str	r3, [r1, #40]	; 0x28
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	3b01      	subs	r3, #1
 800869e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	3b01      	subs	r3, #1
 80086a8:	025b      	lsls	r3, r3, #9
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	431a      	orrs	r2, r3
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	68db      	ldr	r3, [r3, #12]
 80086b2:	3b01      	subs	r3, #1
 80086b4:	041b      	lsls	r3, r3, #16
 80086b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80086ba:	431a      	orrs	r2, r3
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	691b      	ldr	r3, [r3, #16]
 80086c0:	3b01      	subs	r3, #1
 80086c2:	061b      	lsls	r3, r3, #24
 80086c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80086c8:	4931      	ldr	r1, [pc, #196]	; (8008790 <RCCEx_PLL3_Config+0x15c>)
 80086ca:	4313      	orrs	r3, r2
 80086cc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80086ce:	4b30      	ldr	r3, [pc, #192]	; (8008790 <RCCEx_PLL3_Config+0x15c>)
 80086d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	695b      	ldr	r3, [r3, #20]
 80086da:	492d      	ldr	r1, [pc, #180]	; (8008790 <RCCEx_PLL3_Config+0x15c>)
 80086dc:	4313      	orrs	r3, r2
 80086de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80086e0:	4b2b      	ldr	r3, [pc, #172]	; (8008790 <RCCEx_PLL3_Config+0x15c>)
 80086e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	699b      	ldr	r3, [r3, #24]
 80086ec:	4928      	ldr	r1, [pc, #160]	; (8008790 <RCCEx_PLL3_Config+0x15c>)
 80086ee:	4313      	orrs	r3, r2
 80086f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80086f2:	4b27      	ldr	r3, [pc, #156]	; (8008790 <RCCEx_PLL3_Config+0x15c>)
 80086f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f6:	4a26      	ldr	r2, [pc, #152]	; (8008790 <RCCEx_PLL3_Config+0x15c>)
 80086f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80086fe:	4b24      	ldr	r3, [pc, #144]	; (8008790 <RCCEx_PLL3_Config+0x15c>)
 8008700:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008702:	4b24      	ldr	r3, [pc, #144]	; (8008794 <RCCEx_PLL3_Config+0x160>)
 8008704:	4013      	ands	r3, r2
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	69d2      	ldr	r2, [r2, #28]
 800870a:	00d2      	lsls	r2, r2, #3
 800870c:	4920      	ldr	r1, [pc, #128]	; (8008790 <RCCEx_PLL3_Config+0x15c>)
 800870e:	4313      	orrs	r3, r2
 8008710:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008712:	4b1f      	ldr	r3, [pc, #124]	; (8008790 <RCCEx_PLL3_Config+0x15c>)
 8008714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008716:	4a1e      	ldr	r2, [pc, #120]	; (8008790 <RCCEx_PLL3_Config+0x15c>)
 8008718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800871c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d106      	bne.n	8008732 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008724:	4b1a      	ldr	r3, [pc, #104]	; (8008790 <RCCEx_PLL3_Config+0x15c>)
 8008726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008728:	4a19      	ldr	r2, [pc, #100]	; (8008790 <RCCEx_PLL3_Config+0x15c>)
 800872a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800872e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008730:	e00f      	b.n	8008752 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	2b01      	cmp	r3, #1
 8008736:	d106      	bne.n	8008746 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008738:	4b15      	ldr	r3, [pc, #84]	; (8008790 <RCCEx_PLL3_Config+0x15c>)
 800873a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800873c:	4a14      	ldr	r2, [pc, #80]	; (8008790 <RCCEx_PLL3_Config+0x15c>)
 800873e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008742:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008744:	e005      	b.n	8008752 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008746:	4b12      	ldr	r3, [pc, #72]	; (8008790 <RCCEx_PLL3_Config+0x15c>)
 8008748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800874a:	4a11      	ldr	r2, [pc, #68]	; (8008790 <RCCEx_PLL3_Config+0x15c>)
 800874c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008750:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008752:	4b0f      	ldr	r3, [pc, #60]	; (8008790 <RCCEx_PLL3_Config+0x15c>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a0e      	ldr	r2, [pc, #56]	; (8008790 <RCCEx_PLL3_Config+0x15c>)
 8008758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800875c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800875e:	f7f9 f809 	bl	8001774 <HAL_GetTick>
 8008762:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008764:	e008      	b.n	8008778 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008766:	f7f9 f805 	bl	8001774 <HAL_GetTick>
 800876a:	4602      	mov	r2, r0
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	1ad3      	subs	r3, r2, r3
 8008770:	2b02      	cmp	r3, #2
 8008772:	d901      	bls.n	8008778 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008774:	2303      	movs	r3, #3
 8008776:	e006      	b.n	8008786 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008778:	4b05      	ldr	r3, [pc, #20]	; (8008790 <RCCEx_PLL3_Config+0x15c>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008780:	2b00      	cmp	r3, #0
 8008782:	d0f0      	beq.n	8008766 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008784:	7bfb      	ldrb	r3, [r7, #15]
}
 8008786:	4618      	mov	r0, r3
 8008788:	3710      	adds	r7, #16
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	58024400 	.word	0x58024400
 8008794:	ffff0007 	.word	0xffff0007

08008798 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d101      	bne.n	80087aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	e049      	b.n	800883e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d106      	bne.n	80087c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2200      	movs	r2, #0
 80087ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 f841 	bl	8008846 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2202      	movs	r2, #2
 80087c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	3304      	adds	r3, #4
 80087d4:	4619      	mov	r1, r3
 80087d6:	4610      	mov	r0, r2
 80087d8:	f000 fa0e 	bl	8008bf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2201      	movs	r2, #1
 80087e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2201      	movs	r2, #1
 80087e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2201      	movs	r2, #1
 80087f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2201      	movs	r2, #1
 80087f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2201      	movs	r2, #1
 8008800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2201      	movs	r2, #1
 8008808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2201      	movs	r2, #1
 8008810:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2201      	movs	r2, #1
 8008818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2201      	movs	r2, #1
 8008820:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2201      	movs	r2, #1
 8008828:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2201      	movs	r2, #1
 8008830:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2201      	movs	r2, #1
 8008838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800883c:	2300      	movs	r3, #0
}
 800883e:	4618      	mov	r0, r3
 8008840:	3708      	adds	r7, #8
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}

08008846 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008846:	b480      	push	{r7}
 8008848:	b083      	sub	sp, #12
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800884e:	bf00      	nop
 8008850:	370c      	adds	r7, #12
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr
	...

0800885c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800885c:	b480      	push	{r7}
 800885e:	b085      	sub	sp, #20
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800886a:	b2db      	uxtb	r3, r3
 800886c:	2b01      	cmp	r3, #1
 800886e:	d001      	beq.n	8008874 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008870:	2301      	movs	r3, #1
 8008872:	e05e      	b.n	8008932 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2202      	movs	r2, #2
 8008878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	68da      	ldr	r2, [r3, #12]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f042 0201 	orr.w	r2, r2, #1
 800888a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a2b      	ldr	r2, [pc, #172]	; (8008940 <HAL_TIM_Base_Start_IT+0xe4>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d02c      	beq.n	80088f0 <HAL_TIM_Base_Start_IT+0x94>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800889e:	d027      	beq.n	80088f0 <HAL_TIM_Base_Start_IT+0x94>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a27      	ldr	r2, [pc, #156]	; (8008944 <HAL_TIM_Base_Start_IT+0xe8>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d022      	beq.n	80088f0 <HAL_TIM_Base_Start_IT+0x94>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a26      	ldr	r2, [pc, #152]	; (8008948 <HAL_TIM_Base_Start_IT+0xec>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d01d      	beq.n	80088f0 <HAL_TIM_Base_Start_IT+0x94>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a24      	ldr	r2, [pc, #144]	; (800894c <HAL_TIM_Base_Start_IT+0xf0>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d018      	beq.n	80088f0 <HAL_TIM_Base_Start_IT+0x94>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a23      	ldr	r2, [pc, #140]	; (8008950 <HAL_TIM_Base_Start_IT+0xf4>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d013      	beq.n	80088f0 <HAL_TIM_Base_Start_IT+0x94>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a21      	ldr	r2, [pc, #132]	; (8008954 <HAL_TIM_Base_Start_IT+0xf8>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d00e      	beq.n	80088f0 <HAL_TIM_Base_Start_IT+0x94>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a20      	ldr	r2, [pc, #128]	; (8008958 <HAL_TIM_Base_Start_IT+0xfc>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d009      	beq.n	80088f0 <HAL_TIM_Base_Start_IT+0x94>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a1e      	ldr	r2, [pc, #120]	; (800895c <HAL_TIM_Base_Start_IT+0x100>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d004      	beq.n	80088f0 <HAL_TIM_Base_Start_IT+0x94>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a1d      	ldr	r2, [pc, #116]	; (8008960 <HAL_TIM_Base_Start_IT+0x104>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d115      	bne.n	800891c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	689a      	ldr	r2, [r3, #8]
 80088f6:	4b1b      	ldr	r3, [pc, #108]	; (8008964 <HAL_TIM_Base_Start_IT+0x108>)
 80088f8:	4013      	ands	r3, r2
 80088fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2b06      	cmp	r3, #6
 8008900:	d015      	beq.n	800892e <HAL_TIM_Base_Start_IT+0xd2>
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008908:	d011      	beq.n	800892e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f042 0201 	orr.w	r2, r2, #1
 8008918:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800891a:	e008      	b.n	800892e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f042 0201 	orr.w	r2, r2, #1
 800892a:	601a      	str	r2, [r3, #0]
 800892c:	e000      	b.n	8008930 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800892e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008930:	2300      	movs	r3, #0
}
 8008932:	4618      	mov	r0, r3
 8008934:	3714      	adds	r7, #20
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr
 800893e:	bf00      	nop
 8008940:	40010000 	.word	0x40010000
 8008944:	40000400 	.word	0x40000400
 8008948:	40000800 	.word	0x40000800
 800894c:	40000c00 	.word	0x40000c00
 8008950:	40010400 	.word	0x40010400
 8008954:	40001800 	.word	0x40001800
 8008958:	40014000 	.word	0x40014000
 800895c:	4000e000 	.word	0x4000e000
 8008960:	4000e400 	.word	0x4000e400
 8008964:	00010007 	.word	0x00010007

08008968 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	691b      	ldr	r3, [r3, #16]
 8008976:	f003 0302 	and.w	r3, r3, #2
 800897a:	2b02      	cmp	r3, #2
 800897c:	d122      	bne.n	80089c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	68db      	ldr	r3, [r3, #12]
 8008984:	f003 0302 	and.w	r3, r3, #2
 8008988:	2b02      	cmp	r3, #2
 800898a:	d11b      	bne.n	80089c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f06f 0202 	mvn.w	r2, #2
 8008994:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2201      	movs	r2, #1
 800899a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	699b      	ldr	r3, [r3, #24]
 80089a2:	f003 0303 	and.w	r3, r3, #3
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d003      	beq.n	80089b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 f905 	bl	8008bba <HAL_TIM_IC_CaptureCallback>
 80089b0:	e005      	b.n	80089be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 f8f7 	bl	8008ba6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 f908 	bl	8008bce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	691b      	ldr	r3, [r3, #16]
 80089ca:	f003 0304 	and.w	r3, r3, #4
 80089ce:	2b04      	cmp	r3, #4
 80089d0:	d122      	bne.n	8008a18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	f003 0304 	and.w	r3, r3, #4
 80089dc:	2b04      	cmp	r3, #4
 80089de:	d11b      	bne.n	8008a18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f06f 0204 	mvn.w	r2, #4
 80089e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2202      	movs	r2, #2
 80089ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	699b      	ldr	r3, [r3, #24]
 80089f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d003      	beq.n	8008a06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 f8db 	bl	8008bba <HAL_TIM_IC_CaptureCallback>
 8008a04:	e005      	b.n	8008a12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 f8cd 	bl	8008ba6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f000 f8de 	bl	8008bce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	f003 0308 	and.w	r3, r3, #8
 8008a22:	2b08      	cmp	r3, #8
 8008a24:	d122      	bne.n	8008a6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	f003 0308 	and.w	r3, r3, #8
 8008a30:	2b08      	cmp	r3, #8
 8008a32:	d11b      	bne.n	8008a6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f06f 0208 	mvn.w	r2, #8
 8008a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2204      	movs	r2, #4
 8008a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	69db      	ldr	r3, [r3, #28]
 8008a4a:	f003 0303 	and.w	r3, r3, #3
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d003      	beq.n	8008a5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 f8b1 	bl	8008bba <HAL_TIM_IC_CaptureCallback>
 8008a58:	e005      	b.n	8008a66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 f8a3 	bl	8008ba6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 f8b4 	bl	8008bce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	691b      	ldr	r3, [r3, #16]
 8008a72:	f003 0310 	and.w	r3, r3, #16
 8008a76:	2b10      	cmp	r3, #16
 8008a78:	d122      	bne.n	8008ac0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	f003 0310 	and.w	r3, r3, #16
 8008a84:	2b10      	cmp	r3, #16
 8008a86:	d11b      	bne.n	8008ac0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f06f 0210 	mvn.w	r2, #16
 8008a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2208      	movs	r2, #8
 8008a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	69db      	ldr	r3, [r3, #28]
 8008a9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d003      	beq.n	8008aae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 f887 	bl	8008bba <HAL_TIM_IC_CaptureCallback>
 8008aac:	e005      	b.n	8008aba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 f879 	bl	8008ba6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 f88a 	bl	8008bce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2200      	movs	r2, #0
 8008abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	691b      	ldr	r3, [r3, #16]
 8008ac6:	f003 0301 	and.w	r3, r3, #1
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d10e      	bne.n	8008aec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	68db      	ldr	r3, [r3, #12]
 8008ad4:	f003 0301 	and.w	r3, r3, #1
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d107      	bne.n	8008aec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f06f 0201 	mvn.w	r2, #1
 8008ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f7f8 fb18 	bl	800111c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	691b      	ldr	r3, [r3, #16]
 8008af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008af6:	2b80      	cmp	r3, #128	; 0x80
 8008af8:	d10e      	bne.n	8008b18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	68db      	ldr	r3, [r3, #12]
 8008b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b04:	2b80      	cmp	r3, #128	; 0x80
 8008b06:	d107      	bne.n	8008b18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 f920 	bl	8008d58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	691b      	ldr	r3, [r3, #16]
 8008b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b26:	d10e      	bne.n	8008b46 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	68db      	ldr	r3, [r3, #12]
 8008b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b32:	2b80      	cmp	r3, #128	; 0x80
 8008b34:	d107      	bne.n	8008b46 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008b3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 f913 	bl	8008d6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	691b      	ldr	r3, [r3, #16]
 8008b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b50:	2b40      	cmp	r3, #64	; 0x40
 8008b52:	d10e      	bne.n	8008b72 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	68db      	ldr	r3, [r3, #12]
 8008b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b5e:	2b40      	cmp	r3, #64	; 0x40
 8008b60:	d107      	bne.n	8008b72 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008b6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 f838 	bl	8008be2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	691b      	ldr	r3, [r3, #16]
 8008b78:	f003 0320 	and.w	r3, r3, #32
 8008b7c:	2b20      	cmp	r3, #32
 8008b7e:	d10e      	bne.n	8008b9e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	68db      	ldr	r3, [r3, #12]
 8008b86:	f003 0320 	and.w	r3, r3, #32
 8008b8a:	2b20      	cmp	r3, #32
 8008b8c:	d107      	bne.n	8008b9e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f06f 0220 	mvn.w	r2, #32
 8008b96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 f8d3 	bl	8008d44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008b9e:	bf00      	nop
 8008ba0:	3708      	adds	r7, #8
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}

08008ba6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ba6:	b480      	push	{r7}
 8008ba8:	b083      	sub	sp, #12
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008bae:	bf00      	nop
 8008bb0:	370c      	adds	r7, #12
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr

08008bba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008bba:	b480      	push	{r7}
 8008bbc:	b083      	sub	sp, #12
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008bc2:	bf00      	nop
 8008bc4:	370c      	adds	r7, #12
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr

08008bce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008bce:	b480      	push	{r7}
 8008bd0:	b083      	sub	sp, #12
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008bd6:	bf00      	nop
 8008bd8:	370c      	adds	r7, #12
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr

08008be2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008be2:	b480      	push	{r7}
 8008be4:	b083      	sub	sp, #12
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008bea:	bf00      	nop
 8008bec:	370c      	adds	r7, #12
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr
	...

08008bf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b085      	sub	sp, #20
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	4a44      	ldr	r2, [pc, #272]	; (8008d1c <TIM_Base_SetConfig+0x124>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d013      	beq.n	8008c38 <TIM_Base_SetConfig+0x40>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c16:	d00f      	beq.n	8008c38 <TIM_Base_SetConfig+0x40>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	4a41      	ldr	r2, [pc, #260]	; (8008d20 <TIM_Base_SetConfig+0x128>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d00b      	beq.n	8008c38 <TIM_Base_SetConfig+0x40>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	4a40      	ldr	r2, [pc, #256]	; (8008d24 <TIM_Base_SetConfig+0x12c>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d007      	beq.n	8008c38 <TIM_Base_SetConfig+0x40>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	4a3f      	ldr	r2, [pc, #252]	; (8008d28 <TIM_Base_SetConfig+0x130>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d003      	beq.n	8008c38 <TIM_Base_SetConfig+0x40>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4a3e      	ldr	r2, [pc, #248]	; (8008d2c <TIM_Base_SetConfig+0x134>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d108      	bne.n	8008c4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	68fa      	ldr	r2, [r7, #12]
 8008c46:	4313      	orrs	r3, r2
 8008c48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4a33      	ldr	r2, [pc, #204]	; (8008d1c <TIM_Base_SetConfig+0x124>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d027      	beq.n	8008ca2 <TIM_Base_SetConfig+0xaa>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c58:	d023      	beq.n	8008ca2 <TIM_Base_SetConfig+0xaa>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	4a30      	ldr	r2, [pc, #192]	; (8008d20 <TIM_Base_SetConfig+0x128>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d01f      	beq.n	8008ca2 <TIM_Base_SetConfig+0xaa>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	4a2f      	ldr	r2, [pc, #188]	; (8008d24 <TIM_Base_SetConfig+0x12c>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d01b      	beq.n	8008ca2 <TIM_Base_SetConfig+0xaa>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	4a2e      	ldr	r2, [pc, #184]	; (8008d28 <TIM_Base_SetConfig+0x130>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d017      	beq.n	8008ca2 <TIM_Base_SetConfig+0xaa>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	4a2d      	ldr	r2, [pc, #180]	; (8008d2c <TIM_Base_SetConfig+0x134>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d013      	beq.n	8008ca2 <TIM_Base_SetConfig+0xaa>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	4a2c      	ldr	r2, [pc, #176]	; (8008d30 <TIM_Base_SetConfig+0x138>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d00f      	beq.n	8008ca2 <TIM_Base_SetConfig+0xaa>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	4a2b      	ldr	r2, [pc, #172]	; (8008d34 <TIM_Base_SetConfig+0x13c>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d00b      	beq.n	8008ca2 <TIM_Base_SetConfig+0xaa>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	4a2a      	ldr	r2, [pc, #168]	; (8008d38 <TIM_Base_SetConfig+0x140>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d007      	beq.n	8008ca2 <TIM_Base_SetConfig+0xaa>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	4a29      	ldr	r2, [pc, #164]	; (8008d3c <TIM_Base_SetConfig+0x144>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d003      	beq.n	8008ca2 <TIM_Base_SetConfig+0xaa>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	4a28      	ldr	r2, [pc, #160]	; (8008d40 <TIM_Base_SetConfig+0x148>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d108      	bne.n	8008cb4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ca8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	68db      	ldr	r3, [r3, #12]
 8008cae:	68fa      	ldr	r2, [r7, #12]
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	695b      	ldr	r3, [r3, #20]
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	68fa      	ldr	r2, [r7, #12]
 8008cc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	689a      	ldr	r2, [r3, #8]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	4a10      	ldr	r2, [pc, #64]	; (8008d1c <TIM_Base_SetConfig+0x124>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d00f      	beq.n	8008d00 <TIM_Base_SetConfig+0x108>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	4a12      	ldr	r2, [pc, #72]	; (8008d2c <TIM_Base_SetConfig+0x134>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d00b      	beq.n	8008d00 <TIM_Base_SetConfig+0x108>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a11      	ldr	r2, [pc, #68]	; (8008d30 <TIM_Base_SetConfig+0x138>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d007      	beq.n	8008d00 <TIM_Base_SetConfig+0x108>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4a10      	ldr	r2, [pc, #64]	; (8008d34 <TIM_Base_SetConfig+0x13c>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d003      	beq.n	8008d00 <TIM_Base_SetConfig+0x108>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	4a0f      	ldr	r2, [pc, #60]	; (8008d38 <TIM_Base_SetConfig+0x140>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d103      	bne.n	8008d08 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	691a      	ldr	r2, [r3, #16]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	615a      	str	r2, [r3, #20]
}
 8008d0e:	bf00      	nop
 8008d10:	3714      	adds	r7, #20
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr
 8008d1a:	bf00      	nop
 8008d1c:	40010000 	.word	0x40010000
 8008d20:	40000400 	.word	0x40000400
 8008d24:	40000800 	.word	0x40000800
 8008d28:	40000c00 	.word	0x40000c00
 8008d2c:	40010400 	.word	0x40010400
 8008d30:	40014000 	.word	0x40014000
 8008d34:	40014400 	.word	0x40014400
 8008d38:	40014800 	.word	0x40014800
 8008d3c:	4000e000 	.word	0x4000e000
 8008d40:	4000e400 	.word	0x4000e400

08008d44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b083      	sub	sp, #12
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d4c:	bf00      	nop
 8008d4e:	370c      	adds	r7, #12
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr

08008d58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d60:	bf00      	nop
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008d74:	bf00      	nop
 8008d76:	370c      	adds	r7, #12
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b082      	sub	sp, #8
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d101      	bne.n	8008d92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	e042      	b.n	8008e18 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d106      	bne.n	8008daa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f7f8 f9ef 	bl	8001188 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2224      	movs	r2, #36	; 0x24
 8008dae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f022 0201 	bic.w	r2, r2, #1
 8008dc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 fc84 	bl	80096d0 <UART_SetConfig>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d101      	bne.n	8008dd2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e022      	b.n	8008e18 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d002      	beq.n	8008de0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f001 fae4 	bl	800a3a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	685a      	ldr	r2, [r3, #4]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008dee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	689a      	ldr	r2, [r3, #8]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008dfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f042 0201 	orr.w	r2, r2, #1
 8008e0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f001 fb6b 	bl	800a4ec <UART_CheckIdleState>
 8008e16:	4603      	mov	r3, r0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b08a      	sub	sp, #40	; 0x28
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	4613      	mov	r3, r2
 8008e2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e34:	2b20      	cmp	r3, #32
 8008e36:	d17a      	bne.n	8008f2e <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d002      	beq.n	8008e44 <HAL_UART_Transmit_DMA+0x24>
 8008e3e:	88fb      	ldrh	r3, [r7, #6]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d101      	bne.n	8008e48 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008e44:	2301      	movs	r3, #1
 8008e46:	e073      	b.n	8008f30 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d101      	bne.n	8008e56 <HAL_UART_Transmit_DMA+0x36>
 8008e52:	2302      	movs	r3, #2
 8008e54:	e06c      	b.n	8008f30 <HAL_UART_Transmit_DMA+0x110>
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2201      	movs	r2, #1
 8008e5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	68ba      	ldr	r2, [r7, #8]
 8008e62:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	88fa      	ldrh	r2, [r7, #6]
 8008e68:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	88fa      	ldrh	r2, [r7, #6]
 8008e70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2200      	movs	r2, #0
 8008e78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2221      	movs	r2, #33	; 0x21
 8008e80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d02c      	beq.n	8008ee6 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e90:	4a29      	ldr	r2, [pc, #164]	; (8008f38 <HAL_UART_Transmit_DMA+0x118>)
 8008e92:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e98:	4a28      	ldr	r2, [pc, #160]	; (8008f3c <HAL_UART_Transmit_DMA+0x11c>)
 8008e9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ea0:	4a27      	ldr	r2, [pc, #156]	; (8008f40 <HAL_UART_Transmit_DMA+0x120>)
 8008ea2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	3328      	adds	r3, #40	; 0x28
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	88fb      	ldrh	r3, [r7, #6]
 8008ec0:	f7f9 f8c2 	bl	8002048 <HAL_DMA_Start_IT>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d00d      	beq.n	8008ee6 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2210      	movs	r2, #16
 8008ece:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2220      	movs	r2, #32
 8008ede:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	e024      	b.n	8008f30 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	2240      	movs	r2, #64	; 0x40
 8008eec:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	3308      	adds	r3, #8
 8008efc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	e853 3f00 	ldrex	r3, [r3]
 8008f04:	613b      	str	r3, [r7, #16]
   return(result);
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	3308      	adds	r3, #8
 8008f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f16:	623a      	str	r2, [r7, #32]
 8008f18:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f1a:	69f9      	ldr	r1, [r7, #28]
 8008f1c:	6a3a      	ldr	r2, [r7, #32]
 8008f1e:	e841 2300 	strex	r3, r2, [r1]
 8008f22:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f24:	69bb      	ldr	r3, [r7, #24]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d1e5      	bne.n	8008ef6 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	e000      	b.n	8008f30 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8008f2e:	2302      	movs	r3, #2
  }
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3728      	adds	r7, #40	; 0x28
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}
 8008f38:	0800a9b5 	.word	0x0800a9b5
 8008f3c:	0800aa4b 	.word	0x0800aa4b
 8008f40:	0800abc1 	.word	0x0800abc1

08008f44 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b0ba      	sub	sp, #232	; 0xe8
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	69db      	ldr	r3, [r3, #28]
 8008f52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008f6a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008f6e:	f640 030f 	movw	r3, #2063	; 0x80f
 8008f72:	4013      	ands	r3, r2
 8008f74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008f78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d11b      	bne.n	8008fb8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f84:	f003 0320 	and.w	r3, r3, #32
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d015      	beq.n	8008fb8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f90:	f003 0320 	and.w	r3, r3, #32
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d105      	bne.n	8008fa4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008f98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d009      	beq.n	8008fb8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	f000 835a 	beq.w	8009662 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	4798      	blx	r3
      }
      return;
 8008fb6:	e354      	b.n	8009662 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008fb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	f000 811f 	beq.w	8009200 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008fc2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008fc6:	4b8b      	ldr	r3, [pc, #556]	; (80091f4 <HAL_UART_IRQHandler+0x2b0>)
 8008fc8:	4013      	ands	r3, r2
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d106      	bne.n	8008fdc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008fce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008fd2:	4b89      	ldr	r3, [pc, #548]	; (80091f8 <HAL_UART_IRQHandler+0x2b4>)
 8008fd4:	4013      	ands	r3, r2
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	f000 8112 	beq.w	8009200 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fe0:	f003 0301 	and.w	r3, r3, #1
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d011      	beq.n	800900c <HAL_UART_IRQHandler+0xc8>
 8008fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d00b      	beq.n	800900c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009002:	f043 0201 	orr.w	r2, r3, #1
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800900c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009010:	f003 0302 	and.w	r3, r3, #2
 8009014:	2b00      	cmp	r3, #0
 8009016:	d011      	beq.n	800903c <HAL_UART_IRQHandler+0xf8>
 8009018:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800901c:	f003 0301 	and.w	r3, r3, #1
 8009020:	2b00      	cmp	r3, #0
 8009022:	d00b      	beq.n	800903c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	2202      	movs	r2, #2
 800902a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009032:	f043 0204 	orr.w	r2, r3, #4
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800903c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009040:	f003 0304 	and.w	r3, r3, #4
 8009044:	2b00      	cmp	r3, #0
 8009046:	d011      	beq.n	800906c <HAL_UART_IRQHandler+0x128>
 8009048:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800904c:	f003 0301 	and.w	r3, r3, #1
 8009050:	2b00      	cmp	r3, #0
 8009052:	d00b      	beq.n	800906c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	2204      	movs	r2, #4
 800905a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009062:	f043 0202 	orr.w	r2, r3, #2
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800906c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009070:	f003 0308 	and.w	r3, r3, #8
 8009074:	2b00      	cmp	r3, #0
 8009076:	d017      	beq.n	80090a8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800907c:	f003 0320 	and.w	r3, r3, #32
 8009080:	2b00      	cmp	r3, #0
 8009082:	d105      	bne.n	8009090 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009084:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009088:	4b5a      	ldr	r3, [pc, #360]	; (80091f4 <HAL_UART_IRQHandler+0x2b0>)
 800908a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800908c:	2b00      	cmp	r3, #0
 800908e:	d00b      	beq.n	80090a8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	2208      	movs	r2, #8
 8009096:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800909e:	f043 0208 	orr.w	r2, r3, #8
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80090a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d012      	beq.n	80090da <HAL_UART_IRQHandler+0x196>
 80090b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d00c      	beq.n	80090da <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80090c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090d0:	f043 0220 	orr.w	r2, r3, #32
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	f000 82c0 	beq.w	8009666 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80090e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090ea:	f003 0320 	and.w	r3, r3, #32
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d013      	beq.n	800911a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80090f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090f6:	f003 0320 	and.w	r3, r3, #32
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d105      	bne.n	800910a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80090fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009106:	2b00      	cmp	r3, #0
 8009108:	d007      	beq.n	800911a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800910e:	2b00      	cmp	r3, #0
 8009110:	d003      	beq.n	800911a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009120:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	689b      	ldr	r3, [r3, #8]
 800912a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800912e:	2b40      	cmp	r3, #64	; 0x40
 8009130:	d005      	beq.n	800913e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009132:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009136:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800913a:	2b00      	cmp	r3, #0
 800913c:	d04f      	beq.n	80091de <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f001 fbd2 	bl	800a8e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800914e:	2b40      	cmp	r3, #64	; 0x40
 8009150:	d141      	bne.n	80091d6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	3308      	adds	r3, #8
 8009158:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800915c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009160:	e853 3f00 	ldrex	r3, [r3]
 8009164:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009168:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800916c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009170:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	3308      	adds	r3, #8
 800917a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800917e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009182:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009186:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800918a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800918e:	e841 2300 	strex	r3, r2, [r1]
 8009192:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009196:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800919a:	2b00      	cmp	r3, #0
 800919c:	d1d9      	bne.n	8009152 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d013      	beq.n	80091ce <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091aa:	4a14      	ldr	r2, [pc, #80]	; (80091fc <HAL_UART_IRQHandler+0x2b8>)
 80091ac:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7f9 fcd0 	bl	8002b58 <HAL_DMA_Abort_IT>
 80091b8:	4603      	mov	r3, r0
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d017      	beq.n	80091ee <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80091c8:	4610      	mov	r0, r2
 80091ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091cc:	e00f      	b.n	80091ee <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 fa74 	bl	80096bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091d4:	e00b      	b.n	80091ee <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 fa70 	bl	80096bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091dc:	e007      	b.n	80091ee <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 fa6c 	bl	80096bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2200      	movs	r2, #0
 80091e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80091ec:	e23b      	b.n	8009666 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091ee:	bf00      	nop
    return;
 80091f0:	e239      	b.n	8009666 <HAL_UART_IRQHandler+0x722>
 80091f2:	bf00      	nop
 80091f4:	10000001 	.word	0x10000001
 80091f8:	04000120 	.word	0x04000120
 80091fc:	0800ac41 	.word	0x0800ac41

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009204:	2b01      	cmp	r3, #1
 8009206:	f040 81ce 	bne.w	80095a6 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800920a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800920e:	f003 0310 	and.w	r3, r3, #16
 8009212:	2b00      	cmp	r3, #0
 8009214:	f000 81c7 	beq.w	80095a6 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800921c:	f003 0310 	and.w	r3, r3, #16
 8009220:	2b00      	cmp	r3, #0
 8009222:	f000 81c0 	beq.w	80095a6 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	2210      	movs	r2, #16
 800922c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	689b      	ldr	r3, [r3, #8]
 8009234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009238:	2b40      	cmp	r3, #64	; 0x40
 800923a:	f040 813b 	bne.w	80094b4 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a8b      	ldr	r2, [pc, #556]	; (8009474 <HAL_UART_IRQHandler+0x530>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d059      	beq.n	80092fe <HAL_UART_IRQHandler+0x3ba>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a89      	ldr	r2, [pc, #548]	; (8009478 <HAL_UART_IRQHandler+0x534>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d053      	beq.n	80092fe <HAL_UART_IRQHandler+0x3ba>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a87      	ldr	r2, [pc, #540]	; (800947c <HAL_UART_IRQHandler+0x538>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d04d      	beq.n	80092fe <HAL_UART_IRQHandler+0x3ba>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a85      	ldr	r2, [pc, #532]	; (8009480 <HAL_UART_IRQHandler+0x53c>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d047      	beq.n	80092fe <HAL_UART_IRQHandler+0x3ba>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a83      	ldr	r2, [pc, #524]	; (8009484 <HAL_UART_IRQHandler+0x540>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d041      	beq.n	80092fe <HAL_UART_IRQHandler+0x3ba>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4a81      	ldr	r2, [pc, #516]	; (8009488 <HAL_UART_IRQHandler+0x544>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d03b      	beq.n	80092fe <HAL_UART_IRQHandler+0x3ba>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a7f      	ldr	r2, [pc, #508]	; (800948c <HAL_UART_IRQHandler+0x548>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d035      	beq.n	80092fe <HAL_UART_IRQHandler+0x3ba>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4a7d      	ldr	r2, [pc, #500]	; (8009490 <HAL_UART_IRQHandler+0x54c>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d02f      	beq.n	80092fe <HAL_UART_IRQHandler+0x3ba>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a7b      	ldr	r2, [pc, #492]	; (8009494 <HAL_UART_IRQHandler+0x550>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d029      	beq.n	80092fe <HAL_UART_IRQHandler+0x3ba>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a79      	ldr	r2, [pc, #484]	; (8009498 <HAL_UART_IRQHandler+0x554>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d023      	beq.n	80092fe <HAL_UART_IRQHandler+0x3ba>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4a77      	ldr	r2, [pc, #476]	; (800949c <HAL_UART_IRQHandler+0x558>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d01d      	beq.n	80092fe <HAL_UART_IRQHandler+0x3ba>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a75      	ldr	r2, [pc, #468]	; (80094a0 <HAL_UART_IRQHandler+0x55c>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d017      	beq.n	80092fe <HAL_UART_IRQHandler+0x3ba>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a73      	ldr	r2, [pc, #460]	; (80094a4 <HAL_UART_IRQHandler+0x560>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d011      	beq.n	80092fe <HAL_UART_IRQHandler+0x3ba>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4a71      	ldr	r2, [pc, #452]	; (80094a8 <HAL_UART_IRQHandler+0x564>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d00b      	beq.n	80092fe <HAL_UART_IRQHandler+0x3ba>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4a6f      	ldr	r2, [pc, #444]	; (80094ac <HAL_UART_IRQHandler+0x568>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d005      	beq.n	80092fe <HAL_UART_IRQHandler+0x3ba>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a6d      	ldr	r2, [pc, #436]	; (80094b0 <HAL_UART_IRQHandler+0x56c>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d105      	bne.n	800930a <HAL_UART_IRQHandler+0x3c6>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	b29b      	uxth	r3, r3
 8009308:	e004      	b.n	8009314 <HAL_UART_IRQHandler+0x3d0>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	b29b      	uxth	r3, r3
 8009314:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009318:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800931c:	2b00      	cmp	r3, #0
 800931e:	f000 81a4 	beq.w	800966a <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009328:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800932c:	429a      	cmp	r2, r3
 800932e:	f080 819c 	bcs.w	800966a <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009338:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009340:	69db      	ldr	r3, [r3, #28]
 8009342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009346:	f000 8086 	beq.w	8009456 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009352:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009356:	e853 3f00 	ldrex	r3, [r3]
 800935a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800935e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009362:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009366:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	461a      	mov	r2, r3
 8009370:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009374:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009378:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800937c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009380:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009384:	e841 2300 	strex	r3, r2, [r1]
 8009388:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800938c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009390:	2b00      	cmp	r3, #0
 8009392:	d1da      	bne.n	800934a <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	3308      	adds	r3, #8
 800939a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800939c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800939e:	e853 3f00 	ldrex	r3, [r3]
 80093a2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80093a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80093a6:	f023 0301 	bic.w	r3, r3, #1
 80093aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	3308      	adds	r3, #8
 80093b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80093b8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80093bc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093be:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80093c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80093c4:	e841 2300 	strex	r3, r2, [r1]
 80093c8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80093ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d1e1      	bne.n	8009394 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	3308      	adds	r3, #8
 80093d6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80093da:	e853 3f00 	ldrex	r3, [r3]
 80093de:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80093e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	3308      	adds	r3, #8
 80093f0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80093f4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80093f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80093fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80093fc:	e841 2300 	strex	r3, r2, [r1]
 8009400:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009402:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009404:	2b00      	cmp	r3, #0
 8009406:	d1e3      	bne.n	80093d0 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2220      	movs	r2, #32
 800940c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2200      	movs	r2, #0
 8009414:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800941c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800941e:	e853 3f00 	ldrex	r3, [r3]
 8009422:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009426:	f023 0310 	bic.w	r3, r3, #16
 800942a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	461a      	mov	r2, r3
 8009434:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009438:	65bb      	str	r3, [r7, #88]	; 0x58
 800943a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800943c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800943e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009440:	e841 2300 	strex	r3, r2, [r1]
 8009444:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009448:	2b00      	cmp	r3, #0
 800944a:	d1e4      	bne.n	8009416 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009450:	4618      	mov	r0, r3
 8009452:	f7f9 f863 	bl	800251c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009462:	b29b      	uxth	r3, r3
 8009464:	1ad3      	subs	r3, r2, r3
 8009466:	b29b      	uxth	r3, r3
 8009468:	4619      	mov	r1, r3
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f7f7 fc02 	bl	8000c74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009470:	e0fb      	b.n	800966a <HAL_UART_IRQHandler+0x726>
 8009472:	bf00      	nop
 8009474:	40020010 	.word	0x40020010
 8009478:	40020028 	.word	0x40020028
 800947c:	40020040 	.word	0x40020040
 8009480:	40020058 	.word	0x40020058
 8009484:	40020070 	.word	0x40020070
 8009488:	40020088 	.word	0x40020088
 800948c:	400200a0 	.word	0x400200a0
 8009490:	400200b8 	.word	0x400200b8
 8009494:	40020410 	.word	0x40020410
 8009498:	40020428 	.word	0x40020428
 800949c:	40020440 	.word	0x40020440
 80094a0:	40020458 	.word	0x40020458
 80094a4:	40020470 	.word	0x40020470
 80094a8:	40020488 	.word	0x40020488
 80094ac:	400204a0 	.word	0x400204a0
 80094b0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094c0:	b29b      	uxth	r3, r3
 80094c2:	1ad3      	subs	r3, r2, r3
 80094c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	f000 80cc 	beq.w	800966e <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 80094d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80094da:	2b00      	cmp	r3, #0
 80094dc:	f000 80c7 	beq.w	800966e <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e8:	e853 3f00 	ldrex	r3, [r3]
 80094ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80094ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80094f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	461a      	mov	r2, r3
 80094fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009502:	647b      	str	r3, [r7, #68]	; 0x44
 8009504:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009506:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009508:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800950a:	e841 2300 	strex	r3, r2, [r1]
 800950e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009512:	2b00      	cmp	r3, #0
 8009514:	d1e4      	bne.n	80094e0 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	3308      	adds	r3, #8
 800951c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800951e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009520:	e853 3f00 	ldrex	r3, [r3]
 8009524:	623b      	str	r3, [r7, #32]
   return(result);
 8009526:	6a3a      	ldr	r2, [r7, #32]
 8009528:	4b54      	ldr	r3, [pc, #336]	; (800967c <HAL_UART_IRQHandler+0x738>)
 800952a:	4013      	ands	r3, r2
 800952c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	3308      	adds	r3, #8
 8009536:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800953a:	633a      	str	r2, [r7, #48]	; 0x30
 800953c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800953e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009542:	e841 2300 	strex	r3, r2, [r1]
 8009546:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800954a:	2b00      	cmp	r3, #0
 800954c:	d1e3      	bne.n	8009516 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2220      	movs	r2, #32
 8009552:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2200      	movs	r2, #0
 800955a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2200      	movs	r2, #0
 8009560:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	e853 3f00 	ldrex	r3, [r3]
 800956e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f023 0310 	bic.w	r3, r3, #16
 8009576:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	461a      	mov	r2, r3
 8009580:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009584:	61fb      	str	r3, [r7, #28]
 8009586:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009588:	69b9      	ldr	r1, [r7, #24]
 800958a:	69fa      	ldr	r2, [r7, #28]
 800958c:	e841 2300 	strex	r3, r2, [r1]
 8009590:	617b      	str	r3, [r7, #20]
   return(result);
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d1e4      	bne.n	8009562 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009598:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800959c:	4619      	mov	r1, r3
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f7f7 fb68 	bl	8000c74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80095a4:	e063      	b.n	800966e <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80095a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d00e      	beq.n	80095d0 <HAL_UART_IRQHandler+0x68c>
 80095b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d008      	beq.n	80095d0 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80095c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f001 fb7a 	bl	800acc2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80095ce:	e051      	b.n	8009674 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80095d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d014      	beq.n	8009606 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80095dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d105      	bne.n	80095f4 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80095e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d008      	beq.n	8009606 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d03a      	beq.n	8009672 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	4798      	blx	r3
    }
    return;
 8009604:	e035      	b.n	8009672 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800960a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800960e:	2b00      	cmp	r3, #0
 8009610:	d009      	beq.n	8009626 <HAL_UART_IRQHandler+0x6e2>
 8009612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800961a:	2b00      	cmp	r3, #0
 800961c:	d003      	beq.n	8009626 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f001 fb24 	bl	800ac6c <UART_EndTransmit_IT>
    return;
 8009624:	e026      	b.n	8009674 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800962a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800962e:	2b00      	cmp	r3, #0
 8009630:	d009      	beq.n	8009646 <HAL_UART_IRQHandler+0x702>
 8009632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009636:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800963a:	2b00      	cmp	r3, #0
 800963c:	d003      	beq.n	8009646 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f001 fb53 	bl	800acea <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009644:	e016      	b.n	8009674 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800964a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800964e:	2b00      	cmp	r3, #0
 8009650:	d010      	beq.n	8009674 <HAL_UART_IRQHandler+0x730>
 8009652:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009656:	2b00      	cmp	r3, #0
 8009658:	da0c      	bge.n	8009674 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f001 fb3b 	bl	800acd6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009660:	e008      	b.n	8009674 <HAL_UART_IRQHandler+0x730>
      return;
 8009662:	bf00      	nop
 8009664:	e006      	b.n	8009674 <HAL_UART_IRQHandler+0x730>
    return;
 8009666:	bf00      	nop
 8009668:	e004      	b.n	8009674 <HAL_UART_IRQHandler+0x730>
      return;
 800966a:	bf00      	nop
 800966c:	e002      	b.n	8009674 <HAL_UART_IRQHandler+0x730>
      return;
 800966e:	bf00      	nop
 8009670:	e000      	b.n	8009674 <HAL_UART_IRQHandler+0x730>
    return;
 8009672:	bf00      	nop
  }
}
 8009674:	37e8      	adds	r7, #232	; 0xe8
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}
 800967a:	bf00      	nop
 800967c:	effffffe 	.word	0xeffffffe

08009680 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009680:	b480      	push	{r7}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009688:	bf00      	nop
 800968a:	370c      	adds	r7, #12
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800969c:	bf00      	nop
 800969e:	370c      	adds	r7, #12
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr

080096a8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b083      	sub	sp, #12
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80096b0:	bf00      	nop
 80096b2:	370c      	adds	r7, #12
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr

080096bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80096c4:	bf00      	nop
 80096c6:	370c      	adds	r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80096d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80096d4:	b092      	sub	sp, #72	; 0x48
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80096da:	2300      	movs	r3, #0
 80096dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	689a      	ldr	r2, [r3, #8]
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	691b      	ldr	r3, [r3, #16]
 80096e8:	431a      	orrs	r2, r3
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	695b      	ldr	r3, [r3, #20]
 80096ee:	431a      	orrs	r2, r3
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	69db      	ldr	r3, [r3, #28]
 80096f4:	4313      	orrs	r3, r2
 80096f6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	681a      	ldr	r2, [r3, #0]
 80096fe:	4bbe      	ldr	r3, [pc, #760]	; (80099f8 <UART_SetConfig+0x328>)
 8009700:	4013      	ands	r3, r2
 8009702:	697a      	ldr	r2, [r7, #20]
 8009704:	6812      	ldr	r2, [r2, #0]
 8009706:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009708:	430b      	orrs	r3, r1
 800970a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	68da      	ldr	r2, [r3, #12]
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	430a      	orrs	r2, r1
 8009720:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	699b      	ldr	r3, [r3, #24]
 8009726:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4ab3      	ldr	r2, [pc, #716]	; (80099fc <UART_SetConfig+0x32c>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d004      	beq.n	800973c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	6a1b      	ldr	r3, [r3, #32]
 8009736:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009738:	4313      	orrs	r3, r2
 800973a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	689a      	ldr	r2, [r3, #8]
 8009742:	4baf      	ldr	r3, [pc, #700]	; (8009a00 <UART_SetConfig+0x330>)
 8009744:	4013      	ands	r3, r2
 8009746:	697a      	ldr	r2, [r7, #20]
 8009748:	6812      	ldr	r2, [r2, #0]
 800974a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800974c:	430b      	orrs	r3, r1
 800974e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009756:	f023 010f 	bic.w	r1, r3, #15
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	430a      	orrs	r2, r1
 8009764:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4aa6      	ldr	r2, [pc, #664]	; (8009a04 <UART_SetConfig+0x334>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d177      	bne.n	8009860 <UART_SetConfig+0x190>
 8009770:	4ba5      	ldr	r3, [pc, #660]	; (8009a08 <UART_SetConfig+0x338>)
 8009772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009774:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009778:	2b28      	cmp	r3, #40	; 0x28
 800977a:	d86d      	bhi.n	8009858 <UART_SetConfig+0x188>
 800977c:	a201      	add	r2, pc, #4	; (adr r2, 8009784 <UART_SetConfig+0xb4>)
 800977e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009782:	bf00      	nop
 8009784:	08009829 	.word	0x08009829
 8009788:	08009859 	.word	0x08009859
 800978c:	08009859 	.word	0x08009859
 8009790:	08009859 	.word	0x08009859
 8009794:	08009859 	.word	0x08009859
 8009798:	08009859 	.word	0x08009859
 800979c:	08009859 	.word	0x08009859
 80097a0:	08009859 	.word	0x08009859
 80097a4:	08009831 	.word	0x08009831
 80097a8:	08009859 	.word	0x08009859
 80097ac:	08009859 	.word	0x08009859
 80097b0:	08009859 	.word	0x08009859
 80097b4:	08009859 	.word	0x08009859
 80097b8:	08009859 	.word	0x08009859
 80097bc:	08009859 	.word	0x08009859
 80097c0:	08009859 	.word	0x08009859
 80097c4:	08009839 	.word	0x08009839
 80097c8:	08009859 	.word	0x08009859
 80097cc:	08009859 	.word	0x08009859
 80097d0:	08009859 	.word	0x08009859
 80097d4:	08009859 	.word	0x08009859
 80097d8:	08009859 	.word	0x08009859
 80097dc:	08009859 	.word	0x08009859
 80097e0:	08009859 	.word	0x08009859
 80097e4:	08009841 	.word	0x08009841
 80097e8:	08009859 	.word	0x08009859
 80097ec:	08009859 	.word	0x08009859
 80097f0:	08009859 	.word	0x08009859
 80097f4:	08009859 	.word	0x08009859
 80097f8:	08009859 	.word	0x08009859
 80097fc:	08009859 	.word	0x08009859
 8009800:	08009859 	.word	0x08009859
 8009804:	08009849 	.word	0x08009849
 8009808:	08009859 	.word	0x08009859
 800980c:	08009859 	.word	0x08009859
 8009810:	08009859 	.word	0x08009859
 8009814:	08009859 	.word	0x08009859
 8009818:	08009859 	.word	0x08009859
 800981c:	08009859 	.word	0x08009859
 8009820:	08009859 	.word	0x08009859
 8009824:	08009851 	.word	0x08009851
 8009828:	2301      	movs	r3, #1
 800982a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800982e:	e326      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009830:	2304      	movs	r3, #4
 8009832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009836:	e322      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009838:	2308      	movs	r3, #8
 800983a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800983e:	e31e      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009840:	2310      	movs	r3, #16
 8009842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009846:	e31a      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009848:	2320      	movs	r3, #32
 800984a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800984e:	e316      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009850:	2340      	movs	r3, #64	; 0x40
 8009852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009856:	e312      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009858:	2380      	movs	r3, #128	; 0x80
 800985a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800985e:	e30e      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a69      	ldr	r2, [pc, #420]	; (8009a0c <UART_SetConfig+0x33c>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d130      	bne.n	80098cc <UART_SetConfig+0x1fc>
 800986a:	4b67      	ldr	r3, [pc, #412]	; (8009a08 <UART_SetConfig+0x338>)
 800986c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800986e:	f003 0307 	and.w	r3, r3, #7
 8009872:	2b05      	cmp	r3, #5
 8009874:	d826      	bhi.n	80098c4 <UART_SetConfig+0x1f4>
 8009876:	a201      	add	r2, pc, #4	; (adr r2, 800987c <UART_SetConfig+0x1ac>)
 8009878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800987c:	08009895 	.word	0x08009895
 8009880:	0800989d 	.word	0x0800989d
 8009884:	080098a5 	.word	0x080098a5
 8009888:	080098ad 	.word	0x080098ad
 800988c:	080098b5 	.word	0x080098b5
 8009890:	080098bd 	.word	0x080098bd
 8009894:	2300      	movs	r3, #0
 8009896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800989a:	e2f0      	b.n	8009e7e <UART_SetConfig+0x7ae>
 800989c:	2304      	movs	r3, #4
 800989e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098a2:	e2ec      	b.n	8009e7e <UART_SetConfig+0x7ae>
 80098a4:	2308      	movs	r3, #8
 80098a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098aa:	e2e8      	b.n	8009e7e <UART_SetConfig+0x7ae>
 80098ac:	2310      	movs	r3, #16
 80098ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098b2:	e2e4      	b.n	8009e7e <UART_SetConfig+0x7ae>
 80098b4:	2320      	movs	r3, #32
 80098b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098ba:	e2e0      	b.n	8009e7e <UART_SetConfig+0x7ae>
 80098bc:	2340      	movs	r3, #64	; 0x40
 80098be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098c2:	e2dc      	b.n	8009e7e <UART_SetConfig+0x7ae>
 80098c4:	2380      	movs	r3, #128	; 0x80
 80098c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098ca:	e2d8      	b.n	8009e7e <UART_SetConfig+0x7ae>
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a4f      	ldr	r2, [pc, #316]	; (8009a10 <UART_SetConfig+0x340>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d130      	bne.n	8009938 <UART_SetConfig+0x268>
 80098d6:	4b4c      	ldr	r3, [pc, #304]	; (8009a08 <UART_SetConfig+0x338>)
 80098d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098da:	f003 0307 	and.w	r3, r3, #7
 80098de:	2b05      	cmp	r3, #5
 80098e0:	d826      	bhi.n	8009930 <UART_SetConfig+0x260>
 80098e2:	a201      	add	r2, pc, #4	; (adr r2, 80098e8 <UART_SetConfig+0x218>)
 80098e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098e8:	08009901 	.word	0x08009901
 80098ec:	08009909 	.word	0x08009909
 80098f0:	08009911 	.word	0x08009911
 80098f4:	08009919 	.word	0x08009919
 80098f8:	08009921 	.word	0x08009921
 80098fc:	08009929 	.word	0x08009929
 8009900:	2300      	movs	r3, #0
 8009902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009906:	e2ba      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009908:	2304      	movs	r3, #4
 800990a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800990e:	e2b6      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009910:	2308      	movs	r3, #8
 8009912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009916:	e2b2      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009918:	2310      	movs	r3, #16
 800991a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800991e:	e2ae      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009920:	2320      	movs	r3, #32
 8009922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009926:	e2aa      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009928:	2340      	movs	r3, #64	; 0x40
 800992a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800992e:	e2a6      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009930:	2380      	movs	r3, #128	; 0x80
 8009932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009936:	e2a2      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a35      	ldr	r2, [pc, #212]	; (8009a14 <UART_SetConfig+0x344>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d130      	bne.n	80099a4 <UART_SetConfig+0x2d4>
 8009942:	4b31      	ldr	r3, [pc, #196]	; (8009a08 <UART_SetConfig+0x338>)
 8009944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009946:	f003 0307 	and.w	r3, r3, #7
 800994a:	2b05      	cmp	r3, #5
 800994c:	d826      	bhi.n	800999c <UART_SetConfig+0x2cc>
 800994e:	a201      	add	r2, pc, #4	; (adr r2, 8009954 <UART_SetConfig+0x284>)
 8009950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009954:	0800996d 	.word	0x0800996d
 8009958:	08009975 	.word	0x08009975
 800995c:	0800997d 	.word	0x0800997d
 8009960:	08009985 	.word	0x08009985
 8009964:	0800998d 	.word	0x0800998d
 8009968:	08009995 	.word	0x08009995
 800996c:	2300      	movs	r3, #0
 800996e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009972:	e284      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009974:	2304      	movs	r3, #4
 8009976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800997a:	e280      	b.n	8009e7e <UART_SetConfig+0x7ae>
 800997c:	2308      	movs	r3, #8
 800997e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009982:	e27c      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009984:	2310      	movs	r3, #16
 8009986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800998a:	e278      	b.n	8009e7e <UART_SetConfig+0x7ae>
 800998c:	2320      	movs	r3, #32
 800998e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009992:	e274      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009994:	2340      	movs	r3, #64	; 0x40
 8009996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800999a:	e270      	b.n	8009e7e <UART_SetConfig+0x7ae>
 800999c:	2380      	movs	r3, #128	; 0x80
 800999e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099a2:	e26c      	b.n	8009e7e <UART_SetConfig+0x7ae>
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4a1b      	ldr	r2, [pc, #108]	; (8009a18 <UART_SetConfig+0x348>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d142      	bne.n	8009a34 <UART_SetConfig+0x364>
 80099ae:	4b16      	ldr	r3, [pc, #88]	; (8009a08 <UART_SetConfig+0x338>)
 80099b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099b2:	f003 0307 	and.w	r3, r3, #7
 80099b6:	2b05      	cmp	r3, #5
 80099b8:	d838      	bhi.n	8009a2c <UART_SetConfig+0x35c>
 80099ba:	a201      	add	r2, pc, #4	; (adr r2, 80099c0 <UART_SetConfig+0x2f0>)
 80099bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099c0:	080099d9 	.word	0x080099d9
 80099c4:	080099e1 	.word	0x080099e1
 80099c8:	080099e9 	.word	0x080099e9
 80099cc:	080099f1 	.word	0x080099f1
 80099d0:	08009a1d 	.word	0x08009a1d
 80099d4:	08009a25 	.word	0x08009a25
 80099d8:	2300      	movs	r3, #0
 80099da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099de:	e24e      	b.n	8009e7e <UART_SetConfig+0x7ae>
 80099e0:	2304      	movs	r3, #4
 80099e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099e6:	e24a      	b.n	8009e7e <UART_SetConfig+0x7ae>
 80099e8:	2308      	movs	r3, #8
 80099ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099ee:	e246      	b.n	8009e7e <UART_SetConfig+0x7ae>
 80099f0:	2310      	movs	r3, #16
 80099f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099f6:	e242      	b.n	8009e7e <UART_SetConfig+0x7ae>
 80099f8:	cfff69f3 	.word	0xcfff69f3
 80099fc:	58000c00 	.word	0x58000c00
 8009a00:	11fff4ff 	.word	0x11fff4ff
 8009a04:	40011000 	.word	0x40011000
 8009a08:	58024400 	.word	0x58024400
 8009a0c:	40004400 	.word	0x40004400
 8009a10:	40004800 	.word	0x40004800
 8009a14:	40004c00 	.word	0x40004c00
 8009a18:	40005000 	.word	0x40005000
 8009a1c:	2320      	movs	r3, #32
 8009a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a22:	e22c      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009a24:	2340      	movs	r3, #64	; 0x40
 8009a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a2a:	e228      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009a2c:	2380      	movs	r3, #128	; 0x80
 8009a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a32:	e224      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4ab1      	ldr	r2, [pc, #708]	; (8009d00 <UART_SetConfig+0x630>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d176      	bne.n	8009b2c <UART_SetConfig+0x45c>
 8009a3e:	4bb1      	ldr	r3, [pc, #708]	; (8009d04 <UART_SetConfig+0x634>)
 8009a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a46:	2b28      	cmp	r3, #40	; 0x28
 8009a48:	d86c      	bhi.n	8009b24 <UART_SetConfig+0x454>
 8009a4a:	a201      	add	r2, pc, #4	; (adr r2, 8009a50 <UART_SetConfig+0x380>)
 8009a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a50:	08009af5 	.word	0x08009af5
 8009a54:	08009b25 	.word	0x08009b25
 8009a58:	08009b25 	.word	0x08009b25
 8009a5c:	08009b25 	.word	0x08009b25
 8009a60:	08009b25 	.word	0x08009b25
 8009a64:	08009b25 	.word	0x08009b25
 8009a68:	08009b25 	.word	0x08009b25
 8009a6c:	08009b25 	.word	0x08009b25
 8009a70:	08009afd 	.word	0x08009afd
 8009a74:	08009b25 	.word	0x08009b25
 8009a78:	08009b25 	.word	0x08009b25
 8009a7c:	08009b25 	.word	0x08009b25
 8009a80:	08009b25 	.word	0x08009b25
 8009a84:	08009b25 	.word	0x08009b25
 8009a88:	08009b25 	.word	0x08009b25
 8009a8c:	08009b25 	.word	0x08009b25
 8009a90:	08009b05 	.word	0x08009b05
 8009a94:	08009b25 	.word	0x08009b25
 8009a98:	08009b25 	.word	0x08009b25
 8009a9c:	08009b25 	.word	0x08009b25
 8009aa0:	08009b25 	.word	0x08009b25
 8009aa4:	08009b25 	.word	0x08009b25
 8009aa8:	08009b25 	.word	0x08009b25
 8009aac:	08009b25 	.word	0x08009b25
 8009ab0:	08009b0d 	.word	0x08009b0d
 8009ab4:	08009b25 	.word	0x08009b25
 8009ab8:	08009b25 	.word	0x08009b25
 8009abc:	08009b25 	.word	0x08009b25
 8009ac0:	08009b25 	.word	0x08009b25
 8009ac4:	08009b25 	.word	0x08009b25
 8009ac8:	08009b25 	.word	0x08009b25
 8009acc:	08009b25 	.word	0x08009b25
 8009ad0:	08009b15 	.word	0x08009b15
 8009ad4:	08009b25 	.word	0x08009b25
 8009ad8:	08009b25 	.word	0x08009b25
 8009adc:	08009b25 	.word	0x08009b25
 8009ae0:	08009b25 	.word	0x08009b25
 8009ae4:	08009b25 	.word	0x08009b25
 8009ae8:	08009b25 	.word	0x08009b25
 8009aec:	08009b25 	.word	0x08009b25
 8009af0:	08009b1d 	.word	0x08009b1d
 8009af4:	2301      	movs	r3, #1
 8009af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009afa:	e1c0      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009afc:	2304      	movs	r3, #4
 8009afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b02:	e1bc      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009b04:	2308      	movs	r3, #8
 8009b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b0a:	e1b8      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009b0c:	2310      	movs	r3, #16
 8009b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b12:	e1b4      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009b14:	2320      	movs	r3, #32
 8009b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b1a:	e1b0      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009b1c:	2340      	movs	r3, #64	; 0x40
 8009b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b22:	e1ac      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009b24:	2380      	movs	r3, #128	; 0x80
 8009b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b2a:	e1a8      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a75      	ldr	r2, [pc, #468]	; (8009d08 <UART_SetConfig+0x638>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d130      	bne.n	8009b98 <UART_SetConfig+0x4c8>
 8009b36:	4b73      	ldr	r3, [pc, #460]	; (8009d04 <UART_SetConfig+0x634>)
 8009b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b3a:	f003 0307 	and.w	r3, r3, #7
 8009b3e:	2b05      	cmp	r3, #5
 8009b40:	d826      	bhi.n	8009b90 <UART_SetConfig+0x4c0>
 8009b42:	a201      	add	r2, pc, #4	; (adr r2, 8009b48 <UART_SetConfig+0x478>)
 8009b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b48:	08009b61 	.word	0x08009b61
 8009b4c:	08009b69 	.word	0x08009b69
 8009b50:	08009b71 	.word	0x08009b71
 8009b54:	08009b79 	.word	0x08009b79
 8009b58:	08009b81 	.word	0x08009b81
 8009b5c:	08009b89 	.word	0x08009b89
 8009b60:	2300      	movs	r3, #0
 8009b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b66:	e18a      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009b68:	2304      	movs	r3, #4
 8009b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b6e:	e186      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009b70:	2308      	movs	r3, #8
 8009b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b76:	e182      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009b78:	2310      	movs	r3, #16
 8009b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b7e:	e17e      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009b80:	2320      	movs	r3, #32
 8009b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b86:	e17a      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009b88:	2340      	movs	r3, #64	; 0x40
 8009b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b8e:	e176      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009b90:	2380      	movs	r3, #128	; 0x80
 8009b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b96:	e172      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a5b      	ldr	r2, [pc, #364]	; (8009d0c <UART_SetConfig+0x63c>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d130      	bne.n	8009c04 <UART_SetConfig+0x534>
 8009ba2:	4b58      	ldr	r3, [pc, #352]	; (8009d04 <UART_SetConfig+0x634>)
 8009ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ba6:	f003 0307 	and.w	r3, r3, #7
 8009baa:	2b05      	cmp	r3, #5
 8009bac:	d826      	bhi.n	8009bfc <UART_SetConfig+0x52c>
 8009bae:	a201      	add	r2, pc, #4	; (adr r2, 8009bb4 <UART_SetConfig+0x4e4>)
 8009bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb4:	08009bcd 	.word	0x08009bcd
 8009bb8:	08009bd5 	.word	0x08009bd5
 8009bbc:	08009bdd 	.word	0x08009bdd
 8009bc0:	08009be5 	.word	0x08009be5
 8009bc4:	08009bed 	.word	0x08009bed
 8009bc8:	08009bf5 	.word	0x08009bf5
 8009bcc:	2300      	movs	r3, #0
 8009bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bd2:	e154      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009bd4:	2304      	movs	r3, #4
 8009bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bda:	e150      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009bdc:	2308      	movs	r3, #8
 8009bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009be2:	e14c      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009be4:	2310      	movs	r3, #16
 8009be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bea:	e148      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009bec:	2320      	movs	r3, #32
 8009bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bf2:	e144      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009bf4:	2340      	movs	r3, #64	; 0x40
 8009bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bfa:	e140      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009bfc:	2380      	movs	r3, #128	; 0x80
 8009bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c02:	e13c      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4a41      	ldr	r2, [pc, #260]	; (8009d10 <UART_SetConfig+0x640>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	f040 8082 	bne.w	8009d14 <UART_SetConfig+0x644>
 8009c10:	4b3c      	ldr	r3, [pc, #240]	; (8009d04 <UART_SetConfig+0x634>)
 8009c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c18:	2b28      	cmp	r3, #40	; 0x28
 8009c1a:	d86d      	bhi.n	8009cf8 <UART_SetConfig+0x628>
 8009c1c:	a201      	add	r2, pc, #4	; (adr r2, 8009c24 <UART_SetConfig+0x554>)
 8009c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c22:	bf00      	nop
 8009c24:	08009cc9 	.word	0x08009cc9
 8009c28:	08009cf9 	.word	0x08009cf9
 8009c2c:	08009cf9 	.word	0x08009cf9
 8009c30:	08009cf9 	.word	0x08009cf9
 8009c34:	08009cf9 	.word	0x08009cf9
 8009c38:	08009cf9 	.word	0x08009cf9
 8009c3c:	08009cf9 	.word	0x08009cf9
 8009c40:	08009cf9 	.word	0x08009cf9
 8009c44:	08009cd1 	.word	0x08009cd1
 8009c48:	08009cf9 	.word	0x08009cf9
 8009c4c:	08009cf9 	.word	0x08009cf9
 8009c50:	08009cf9 	.word	0x08009cf9
 8009c54:	08009cf9 	.word	0x08009cf9
 8009c58:	08009cf9 	.word	0x08009cf9
 8009c5c:	08009cf9 	.word	0x08009cf9
 8009c60:	08009cf9 	.word	0x08009cf9
 8009c64:	08009cd9 	.word	0x08009cd9
 8009c68:	08009cf9 	.word	0x08009cf9
 8009c6c:	08009cf9 	.word	0x08009cf9
 8009c70:	08009cf9 	.word	0x08009cf9
 8009c74:	08009cf9 	.word	0x08009cf9
 8009c78:	08009cf9 	.word	0x08009cf9
 8009c7c:	08009cf9 	.word	0x08009cf9
 8009c80:	08009cf9 	.word	0x08009cf9
 8009c84:	08009ce1 	.word	0x08009ce1
 8009c88:	08009cf9 	.word	0x08009cf9
 8009c8c:	08009cf9 	.word	0x08009cf9
 8009c90:	08009cf9 	.word	0x08009cf9
 8009c94:	08009cf9 	.word	0x08009cf9
 8009c98:	08009cf9 	.word	0x08009cf9
 8009c9c:	08009cf9 	.word	0x08009cf9
 8009ca0:	08009cf9 	.word	0x08009cf9
 8009ca4:	08009ce9 	.word	0x08009ce9
 8009ca8:	08009cf9 	.word	0x08009cf9
 8009cac:	08009cf9 	.word	0x08009cf9
 8009cb0:	08009cf9 	.word	0x08009cf9
 8009cb4:	08009cf9 	.word	0x08009cf9
 8009cb8:	08009cf9 	.word	0x08009cf9
 8009cbc:	08009cf9 	.word	0x08009cf9
 8009cc0:	08009cf9 	.word	0x08009cf9
 8009cc4:	08009cf1 	.word	0x08009cf1
 8009cc8:	2301      	movs	r3, #1
 8009cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cce:	e0d6      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009cd0:	2304      	movs	r3, #4
 8009cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cd6:	e0d2      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009cd8:	2308      	movs	r3, #8
 8009cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cde:	e0ce      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009ce0:	2310      	movs	r3, #16
 8009ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ce6:	e0ca      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009ce8:	2320      	movs	r3, #32
 8009cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cee:	e0c6      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009cf0:	2340      	movs	r3, #64	; 0x40
 8009cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cf6:	e0c2      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009cf8:	2380      	movs	r3, #128	; 0x80
 8009cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cfe:	e0be      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009d00:	40011400 	.word	0x40011400
 8009d04:	58024400 	.word	0x58024400
 8009d08:	40007800 	.word	0x40007800
 8009d0c:	40007c00 	.word	0x40007c00
 8009d10:	40011800 	.word	0x40011800
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4aad      	ldr	r2, [pc, #692]	; (8009fd0 <UART_SetConfig+0x900>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d176      	bne.n	8009e0c <UART_SetConfig+0x73c>
 8009d1e:	4bad      	ldr	r3, [pc, #692]	; (8009fd4 <UART_SetConfig+0x904>)
 8009d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d26:	2b28      	cmp	r3, #40	; 0x28
 8009d28:	d86c      	bhi.n	8009e04 <UART_SetConfig+0x734>
 8009d2a:	a201      	add	r2, pc, #4	; (adr r2, 8009d30 <UART_SetConfig+0x660>)
 8009d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d30:	08009dd5 	.word	0x08009dd5
 8009d34:	08009e05 	.word	0x08009e05
 8009d38:	08009e05 	.word	0x08009e05
 8009d3c:	08009e05 	.word	0x08009e05
 8009d40:	08009e05 	.word	0x08009e05
 8009d44:	08009e05 	.word	0x08009e05
 8009d48:	08009e05 	.word	0x08009e05
 8009d4c:	08009e05 	.word	0x08009e05
 8009d50:	08009ddd 	.word	0x08009ddd
 8009d54:	08009e05 	.word	0x08009e05
 8009d58:	08009e05 	.word	0x08009e05
 8009d5c:	08009e05 	.word	0x08009e05
 8009d60:	08009e05 	.word	0x08009e05
 8009d64:	08009e05 	.word	0x08009e05
 8009d68:	08009e05 	.word	0x08009e05
 8009d6c:	08009e05 	.word	0x08009e05
 8009d70:	08009de5 	.word	0x08009de5
 8009d74:	08009e05 	.word	0x08009e05
 8009d78:	08009e05 	.word	0x08009e05
 8009d7c:	08009e05 	.word	0x08009e05
 8009d80:	08009e05 	.word	0x08009e05
 8009d84:	08009e05 	.word	0x08009e05
 8009d88:	08009e05 	.word	0x08009e05
 8009d8c:	08009e05 	.word	0x08009e05
 8009d90:	08009ded 	.word	0x08009ded
 8009d94:	08009e05 	.word	0x08009e05
 8009d98:	08009e05 	.word	0x08009e05
 8009d9c:	08009e05 	.word	0x08009e05
 8009da0:	08009e05 	.word	0x08009e05
 8009da4:	08009e05 	.word	0x08009e05
 8009da8:	08009e05 	.word	0x08009e05
 8009dac:	08009e05 	.word	0x08009e05
 8009db0:	08009df5 	.word	0x08009df5
 8009db4:	08009e05 	.word	0x08009e05
 8009db8:	08009e05 	.word	0x08009e05
 8009dbc:	08009e05 	.word	0x08009e05
 8009dc0:	08009e05 	.word	0x08009e05
 8009dc4:	08009e05 	.word	0x08009e05
 8009dc8:	08009e05 	.word	0x08009e05
 8009dcc:	08009e05 	.word	0x08009e05
 8009dd0:	08009dfd 	.word	0x08009dfd
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dda:	e050      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009ddc:	2304      	movs	r3, #4
 8009dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009de2:	e04c      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009de4:	2308      	movs	r3, #8
 8009de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dea:	e048      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009dec:	2310      	movs	r3, #16
 8009dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009df2:	e044      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009df4:	2320      	movs	r3, #32
 8009df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dfa:	e040      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009dfc:	2340      	movs	r3, #64	; 0x40
 8009dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e02:	e03c      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009e04:	2380      	movs	r3, #128	; 0x80
 8009e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e0a:	e038      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4a71      	ldr	r2, [pc, #452]	; (8009fd8 <UART_SetConfig+0x908>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d130      	bne.n	8009e78 <UART_SetConfig+0x7a8>
 8009e16:	4b6f      	ldr	r3, [pc, #444]	; (8009fd4 <UART_SetConfig+0x904>)
 8009e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e1a:	f003 0307 	and.w	r3, r3, #7
 8009e1e:	2b05      	cmp	r3, #5
 8009e20:	d826      	bhi.n	8009e70 <UART_SetConfig+0x7a0>
 8009e22:	a201      	add	r2, pc, #4	; (adr r2, 8009e28 <UART_SetConfig+0x758>)
 8009e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e28:	08009e41 	.word	0x08009e41
 8009e2c:	08009e49 	.word	0x08009e49
 8009e30:	08009e51 	.word	0x08009e51
 8009e34:	08009e59 	.word	0x08009e59
 8009e38:	08009e61 	.word	0x08009e61
 8009e3c:	08009e69 	.word	0x08009e69
 8009e40:	2302      	movs	r3, #2
 8009e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e46:	e01a      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009e48:	2304      	movs	r3, #4
 8009e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e4e:	e016      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009e50:	2308      	movs	r3, #8
 8009e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e56:	e012      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009e58:	2310      	movs	r3, #16
 8009e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e5e:	e00e      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009e60:	2320      	movs	r3, #32
 8009e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e66:	e00a      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009e68:	2340      	movs	r3, #64	; 0x40
 8009e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e6e:	e006      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009e70:	2380      	movs	r3, #128	; 0x80
 8009e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e76:	e002      	b.n	8009e7e <UART_SetConfig+0x7ae>
 8009e78:	2380      	movs	r3, #128	; 0x80
 8009e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4a55      	ldr	r2, [pc, #340]	; (8009fd8 <UART_SetConfig+0x908>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	f040 80f8 	bne.w	800a07a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009e8a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009e8e:	2b20      	cmp	r3, #32
 8009e90:	dc46      	bgt.n	8009f20 <UART_SetConfig+0x850>
 8009e92:	2b02      	cmp	r3, #2
 8009e94:	db75      	blt.n	8009f82 <UART_SetConfig+0x8b2>
 8009e96:	3b02      	subs	r3, #2
 8009e98:	2b1e      	cmp	r3, #30
 8009e9a:	d872      	bhi.n	8009f82 <UART_SetConfig+0x8b2>
 8009e9c:	a201      	add	r2, pc, #4	; (adr r2, 8009ea4 <UART_SetConfig+0x7d4>)
 8009e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea2:	bf00      	nop
 8009ea4:	08009f27 	.word	0x08009f27
 8009ea8:	08009f83 	.word	0x08009f83
 8009eac:	08009f2f 	.word	0x08009f2f
 8009eb0:	08009f83 	.word	0x08009f83
 8009eb4:	08009f83 	.word	0x08009f83
 8009eb8:	08009f83 	.word	0x08009f83
 8009ebc:	08009f3f 	.word	0x08009f3f
 8009ec0:	08009f83 	.word	0x08009f83
 8009ec4:	08009f83 	.word	0x08009f83
 8009ec8:	08009f83 	.word	0x08009f83
 8009ecc:	08009f83 	.word	0x08009f83
 8009ed0:	08009f83 	.word	0x08009f83
 8009ed4:	08009f83 	.word	0x08009f83
 8009ed8:	08009f83 	.word	0x08009f83
 8009edc:	08009f4f 	.word	0x08009f4f
 8009ee0:	08009f83 	.word	0x08009f83
 8009ee4:	08009f83 	.word	0x08009f83
 8009ee8:	08009f83 	.word	0x08009f83
 8009eec:	08009f83 	.word	0x08009f83
 8009ef0:	08009f83 	.word	0x08009f83
 8009ef4:	08009f83 	.word	0x08009f83
 8009ef8:	08009f83 	.word	0x08009f83
 8009efc:	08009f83 	.word	0x08009f83
 8009f00:	08009f83 	.word	0x08009f83
 8009f04:	08009f83 	.word	0x08009f83
 8009f08:	08009f83 	.word	0x08009f83
 8009f0c:	08009f83 	.word	0x08009f83
 8009f10:	08009f83 	.word	0x08009f83
 8009f14:	08009f83 	.word	0x08009f83
 8009f18:	08009f83 	.word	0x08009f83
 8009f1c:	08009f75 	.word	0x08009f75
 8009f20:	2b40      	cmp	r3, #64	; 0x40
 8009f22:	d02a      	beq.n	8009f7a <UART_SetConfig+0x8aa>
 8009f24:	e02d      	b.n	8009f82 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009f26:	f7fe f815 	bl	8007f54 <HAL_RCCEx_GetD3PCLK1Freq>
 8009f2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009f2c:	e02f      	b.n	8009f8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7fe f824 	bl	8007f80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f3c:	e027      	b.n	8009f8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f3e:	f107 0318 	add.w	r3, r7, #24
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7fe f970 	bl	8008228 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f48:	69fb      	ldr	r3, [r7, #28]
 8009f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f4c:	e01f      	b.n	8009f8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f4e:	4b21      	ldr	r3, [pc, #132]	; (8009fd4 <UART_SetConfig+0x904>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f003 0320 	and.w	r3, r3, #32
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d009      	beq.n	8009f6e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f5a:	4b1e      	ldr	r3, [pc, #120]	; (8009fd4 <UART_SetConfig+0x904>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	08db      	lsrs	r3, r3, #3
 8009f60:	f003 0303 	and.w	r3, r3, #3
 8009f64:	4a1d      	ldr	r2, [pc, #116]	; (8009fdc <UART_SetConfig+0x90c>)
 8009f66:	fa22 f303 	lsr.w	r3, r2, r3
 8009f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f6c:	e00f      	b.n	8009f8e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009f6e:	4b1b      	ldr	r3, [pc, #108]	; (8009fdc <UART_SetConfig+0x90c>)
 8009f70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f72:	e00c      	b.n	8009f8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f74:	4b1a      	ldr	r3, [pc, #104]	; (8009fe0 <UART_SetConfig+0x910>)
 8009f76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f78:	e009      	b.n	8009f8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f80:	e005      	b.n	8009f8e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009f82:	2300      	movs	r3, #0
 8009f84:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009f86:	2301      	movs	r3, #1
 8009f88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009f8c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	f000 81ee 	beq.w	800a372 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f9a:	4a12      	ldr	r2, [pc, #72]	; (8009fe4 <UART_SetConfig+0x914>)
 8009f9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fa0:	461a      	mov	r2, r3
 8009fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fa4:	fbb3 f3f2 	udiv	r3, r3, r2
 8009fa8:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	685a      	ldr	r2, [r3, #4]
 8009fae:	4613      	mov	r3, r2
 8009fb0:	005b      	lsls	r3, r3, #1
 8009fb2:	4413      	add	r3, r2
 8009fb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d305      	bcc.n	8009fc6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d910      	bls.n	8009fe8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009fcc:	e1d1      	b.n	800a372 <UART_SetConfig+0xca2>
 8009fce:	bf00      	nop
 8009fd0:	40011c00 	.word	0x40011c00
 8009fd4:	58024400 	.word	0x58024400
 8009fd8:	58000c00 	.word	0x58000c00
 8009fdc:	03d09000 	.word	0x03d09000
 8009fe0:	003d0900 	.word	0x003d0900
 8009fe4:	08013ffc 	.word	0x08013ffc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fea:	2200      	movs	r2, #0
 8009fec:	60bb      	str	r3, [r7, #8]
 8009fee:	60fa      	str	r2, [r7, #12]
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff4:	4ac0      	ldr	r2, [pc, #768]	; (800a2f8 <UART_SetConfig+0xc28>)
 8009ff6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	603b      	str	r3, [r7, #0]
 800a000:	607a      	str	r2, [r7, #4]
 800a002:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a006:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a00a:	f7f6 f9d1 	bl	80003b0 <__aeabi_uldivmod>
 800a00e:	4602      	mov	r2, r0
 800a010:	460b      	mov	r3, r1
 800a012:	4610      	mov	r0, r2
 800a014:	4619      	mov	r1, r3
 800a016:	f04f 0200 	mov.w	r2, #0
 800a01a:	f04f 0300 	mov.w	r3, #0
 800a01e:	020b      	lsls	r3, r1, #8
 800a020:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a024:	0202      	lsls	r2, r0, #8
 800a026:	6979      	ldr	r1, [r7, #20]
 800a028:	6849      	ldr	r1, [r1, #4]
 800a02a:	0849      	lsrs	r1, r1, #1
 800a02c:	2000      	movs	r0, #0
 800a02e:	460c      	mov	r4, r1
 800a030:	4605      	mov	r5, r0
 800a032:	eb12 0804 	adds.w	r8, r2, r4
 800a036:	eb43 0905 	adc.w	r9, r3, r5
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	2200      	movs	r2, #0
 800a040:	469a      	mov	sl, r3
 800a042:	4693      	mov	fp, r2
 800a044:	4652      	mov	r2, sl
 800a046:	465b      	mov	r3, fp
 800a048:	4640      	mov	r0, r8
 800a04a:	4649      	mov	r1, r9
 800a04c:	f7f6 f9b0 	bl	80003b0 <__aeabi_uldivmod>
 800a050:	4602      	mov	r2, r0
 800a052:	460b      	mov	r3, r1
 800a054:	4613      	mov	r3, r2
 800a056:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a05a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a05e:	d308      	bcc.n	800a072 <UART_SetConfig+0x9a2>
 800a060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a062:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a066:	d204      	bcs.n	800a072 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a06e:	60da      	str	r2, [r3, #12]
 800a070:	e17f      	b.n	800a372 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a072:	2301      	movs	r3, #1
 800a074:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a078:	e17b      	b.n	800a372 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	69db      	ldr	r3, [r3, #28]
 800a07e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a082:	f040 80bd 	bne.w	800a200 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a086:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a08a:	2b20      	cmp	r3, #32
 800a08c:	dc48      	bgt.n	800a120 <UART_SetConfig+0xa50>
 800a08e:	2b00      	cmp	r3, #0
 800a090:	db7b      	blt.n	800a18a <UART_SetConfig+0xaba>
 800a092:	2b20      	cmp	r3, #32
 800a094:	d879      	bhi.n	800a18a <UART_SetConfig+0xaba>
 800a096:	a201      	add	r2, pc, #4	; (adr r2, 800a09c <UART_SetConfig+0x9cc>)
 800a098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a09c:	0800a127 	.word	0x0800a127
 800a0a0:	0800a12f 	.word	0x0800a12f
 800a0a4:	0800a18b 	.word	0x0800a18b
 800a0a8:	0800a18b 	.word	0x0800a18b
 800a0ac:	0800a137 	.word	0x0800a137
 800a0b0:	0800a18b 	.word	0x0800a18b
 800a0b4:	0800a18b 	.word	0x0800a18b
 800a0b8:	0800a18b 	.word	0x0800a18b
 800a0bc:	0800a147 	.word	0x0800a147
 800a0c0:	0800a18b 	.word	0x0800a18b
 800a0c4:	0800a18b 	.word	0x0800a18b
 800a0c8:	0800a18b 	.word	0x0800a18b
 800a0cc:	0800a18b 	.word	0x0800a18b
 800a0d0:	0800a18b 	.word	0x0800a18b
 800a0d4:	0800a18b 	.word	0x0800a18b
 800a0d8:	0800a18b 	.word	0x0800a18b
 800a0dc:	0800a157 	.word	0x0800a157
 800a0e0:	0800a18b 	.word	0x0800a18b
 800a0e4:	0800a18b 	.word	0x0800a18b
 800a0e8:	0800a18b 	.word	0x0800a18b
 800a0ec:	0800a18b 	.word	0x0800a18b
 800a0f0:	0800a18b 	.word	0x0800a18b
 800a0f4:	0800a18b 	.word	0x0800a18b
 800a0f8:	0800a18b 	.word	0x0800a18b
 800a0fc:	0800a18b 	.word	0x0800a18b
 800a100:	0800a18b 	.word	0x0800a18b
 800a104:	0800a18b 	.word	0x0800a18b
 800a108:	0800a18b 	.word	0x0800a18b
 800a10c:	0800a18b 	.word	0x0800a18b
 800a110:	0800a18b 	.word	0x0800a18b
 800a114:	0800a18b 	.word	0x0800a18b
 800a118:	0800a18b 	.word	0x0800a18b
 800a11c:	0800a17d 	.word	0x0800a17d
 800a120:	2b40      	cmp	r3, #64	; 0x40
 800a122:	d02e      	beq.n	800a182 <UART_SetConfig+0xab2>
 800a124:	e031      	b.n	800a18a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a126:	f7fc ffad 	bl	8007084 <HAL_RCC_GetPCLK1Freq>
 800a12a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a12c:	e033      	b.n	800a196 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a12e:	f7fc ffbf 	bl	80070b0 <HAL_RCC_GetPCLK2Freq>
 800a132:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a134:	e02f      	b.n	800a196 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a136:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a13a:	4618      	mov	r0, r3
 800a13c:	f7fd ff20 	bl	8007f80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a142:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a144:	e027      	b.n	800a196 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a146:	f107 0318 	add.w	r3, r7, #24
 800a14a:	4618      	mov	r0, r3
 800a14c:	f7fe f86c 	bl	8008228 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a150:	69fb      	ldr	r3, [r7, #28]
 800a152:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a154:	e01f      	b.n	800a196 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a156:	4b69      	ldr	r3, [pc, #420]	; (800a2fc <UART_SetConfig+0xc2c>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f003 0320 	and.w	r3, r3, #32
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d009      	beq.n	800a176 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a162:	4b66      	ldr	r3, [pc, #408]	; (800a2fc <UART_SetConfig+0xc2c>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	08db      	lsrs	r3, r3, #3
 800a168:	f003 0303 	and.w	r3, r3, #3
 800a16c:	4a64      	ldr	r2, [pc, #400]	; (800a300 <UART_SetConfig+0xc30>)
 800a16e:	fa22 f303 	lsr.w	r3, r2, r3
 800a172:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a174:	e00f      	b.n	800a196 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a176:	4b62      	ldr	r3, [pc, #392]	; (800a300 <UART_SetConfig+0xc30>)
 800a178:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a17a:	e00c      	b.n	800a196 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a17c:	4b61      	ldr	r3, [pc, #388]	; (800a304 <UART_SetConfig+0xc34>)
 800a17e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a180:	e009      	b.n	800a196 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a186:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a188:	e005      	b.n	800a196 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a18a:	2300      	movs	r3, #0
 800a18c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a18e:	2301      	movs	r3, #1
 800a190:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a194:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a198:	2b00      	cmp	r3, #0
 800a19a:	f000 80ea 	beq.w	800a372 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a2:	4a55      	ldr	r2, [pc, #340]	; (800a2f8 <UART_SetConfig+0xc28>)
 800a1a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1ac:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1b0:	005a      	lsls	r2, r3, #1
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	685b      	ldr	r3, [r3, #4]
 800a1b6:	085b      	lsrs	r3, r3, #1
 800a1b8:	441a      	add	r2, r3
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1c2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c6:	2b0f      	cmp	r3, #15
 800a1c8:	d916      	bls.n	800a1f8 <UART_SetConfig+0xb28>
 800a1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1d0:	d212      	bcs.n	800a1f8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	f023 030f 	bic.w	r3, r3, #15
 800a1da:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1de:	085b      	lsrs	r3, r3, #1
 800a1e0:	b29b      	uxth	r3, r3
 800a1e2:	f003 0307 	and.w	r3, r3, #7
 800a1e6:	b29a      	uxth	r2, r3
 800a1e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a1f4:	60da      	str	r2, [r3, #12]
 800a1f6:	e0bc      	b.n	800a372 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a1fe:	e0b8      	b.n	800a372 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a200:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a204:	2b20      	cmp	r3, #32
 800a206:	dc4b      	bgt.n	800a2a0 <UART_SetConfig+0xbd0>
 800a208:	2b00      	cmp	r3, #0
 800a20a:	f2c0 8087 	blt.w	800a31c <UART_SetConfig+0xc4c>
 800a20e:	2b20      	cmp	r3, #32
 800a210:	f200 8084 	bhi.w	800a31c <UART_SetConfig+0xc4c>
 800a214:	a201      	add	r2, pc, #4	; (adr r2, 800a21c <UART_SetConfig+0xb4c>)
 800a216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a21a:	bf00      	nop
 800a21c:	0800a2a7 	.word	0x0800a2a7
 800a220:	0800a2af 	.word	0x0800a2af
 800a224:	0800a31d 	.word	0x0800a31d
 800a228:	0800a31d 	.word	0x0800a31d
 800a22c:	0800a2b7 	.word	0x0800a2b7
 800a230:	0800a31d 	.word	0x0800a31d
 800a234:	0800a31d 	.word	0x0800a31d
 800a238:	0800a31d 	.word	0x0800a31d
 800a23c:	0800a2c7 	.word	0x0800a2c7
 800a240:	0800a31d 	.word	0x0800a31d
 800a244:	0800a31d 	.word	0x0800a31d
 800a248:	0800a31d 	.word	0x0800a31d
 800a24c:	0800a31d 	.word	0x0800a31d
 800a250:	0800a31d 	.word	0x0800a31d
 800a254:	0800a31d 	.word	0x0800a31d
 800a258:	0800a31d 	.word	0x0800a31d
 800a25c:	0800a2d7 	.word	0x0800a2d7
 800a260:	0800a31d 	.word	0x0800a31d
 800a264:	0800a31d 	.word	0x0800a31d
 800a268:	0800a31d 	.word	0x0800a31d
 800a26c:	0800a31d 	.word	0x0800a31d
 800a270:	0800a31d 	.word	0x0800a31d
 800a274:	0800a31d 	.word	0x0800a31d
 800a278:	0800a31d 	.word	0x0800a31d
 800a27c:	0800a31d 	.word	0x0800a31d
 800a280:	0800a31d 	.word	0x0800a31d
 800a284:	0800a31d 	.word	0x0800a31d
 800a288:	0800a31d 	.word	0x0800a31d
 800a28c:	0800a31d 	.word	0x0800a31d
 800a290:	0800a31d 	.word	0x0800a31d
 800a294:	0800a31d 	.word	0x0800a31d
 800a298:	0800a31d 	.word	0x0800a31d
 800a29c:	0800a30f 	.word	0x0800a30f
 800a2a0:	2b40      	cmp	r3, #64	; 0x40
 800a2a2:	d037      	beq.n	800a314 <UART_SetConfig+0xc44>
 800a2a4:	e03a      	b.n	800a31c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2a6:	f7fc feed 	bl	8007084 <HAL_RCC_GetPCLK1Freq>
 800a2aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a2ac:	e03c      	b.n	800a328 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a2ae:	f7fc feff 	bl	80070b0 <HAL_RCC_GetPCLK2Freq>
 800a2b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a2b4:	e038      	b.n	800a328 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f7fd fe60 	bl	8007f80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2c4:	e030      	b.n	800a328 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2c6:	f107 0318 	add.w	r3, r7, #24
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f7fd ffac 	bl	8008228 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a2d0:	69fb      	ldr	r3, [r7, #28]
 800a2d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2d4:	e028      	b.n	800a328 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2d6:	4b09      	ldr	r3, [pc, #36]	; (800a2fc <UART_SetConfig+0xc2c>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f003 0320 	and.w	r3, r3, #32
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d012      	beq.n	800a308 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a2e2:	4b06      	ldr	r3, [pc, #24]	; (800a2fc <UART_SetConfig+0xc2c>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	08db      	lsrs	r3, r3, #3
 800a2e8:	f003 0303 	and.w	r3, r3, #3
 800a2ec:	4a04      	ldr	r2, [pc, #16]	; (800a300 <UART_SetConfig+0xc30>)
 800a2ee:	fa22 f303 	lsr.w	r3, r2, r3
 800a2f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a2f4:	e018      	b.n	800a328 <UART_SetConfig+0xc58>
 800a2f6:	bf00      	nop
 800a2f8:	08013ffc 	.word	0x08013ffc
 800a2fc:	58024400 	.word	0x58024400
 800a300:	03d09000 	.word	0x03d09000
 800a304:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a308:	4b24      	ldr	r3, [pc, #144]	; (800a39c <UART_SetConfig+0xccc>)
 800a30a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a30c:	e00c      	b.n	800a328 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a30e:	4b24      	ldr	r3, [pc, #144]	; (800a3a0 <UART_SetConfig+0xcd0>)
 800a310:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a312:	e009      	b.n	800a328 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a314:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a318:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a31a:	e005      	b.n	800a328 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a31c:	2300      	movs	r3, #0
 800a31e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a320:	2301      	movs	r3, #1
 800a322:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a326:	bf00      	nop
    }

    if (pclk != 0U)
 800a328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d021      	beq.n	800a372 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a332:	4a1c      	ldr	r2, [pc, #112]	; (800a3a4 <UART_SetConfig+0xcd4>)
 800a334:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a338:	461a      	mov	r2, r3
 800a33a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a33c:	fbb3 f2f2 	udiv	r2, r3, r2
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	685b      	ldr	r3, [r3, #4]
 800a344:	085b      	lsrs	r3, r3, #1
 800a346:	441a      	add	r2, r3
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	685b      	ldr	r3, [r3, #4]
 800a34c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a350:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a354:	2b0f      	cmp	r3, #15
 800a356:	d909      	bls.n	800a36c <UART_SetConfig+0xc9c>
 800a358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a35a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a35e:	d205      	bcs.n	800a36c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a362:	b29a      	uxth	r2, r3
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	60da      	str	r2, [r3, #12]
 800a36a:	e002      	b.n	800a372 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a36c:	2301      	movs	r3, #1
 800a36e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	2201      	movs	r2, #1
 800a376:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	2201      	movs	r2, #1
 800a37e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	2200      	movs	r2, #0
 800a386:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	2200      	movs	r2, #0
 800a38c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a38e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a392:	4618      	mov	r0, r3
 800a394:	3748      	adds	r7, #72	; 0x48
 800a396:	46bd      	mov	sp, r7
 800a398:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a39c:	03d09000 	.word	0x03d09000
 800a3a0:	003d0900 	.word	0x003d0900
 800a3a4:	08013ffc 	.word	0x08013ffc

0800a3a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b083      	sub	sp, #12
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3b4:	f003 0301 	and.w	r3, r3, #1
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d00a      	beq.n	800a3d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	430a      	orrs	r2, r1
 800a3d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3d6:	f003 0302 	and.w	r3, r3, #2
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d00a      	beq.n	800a3f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	430a      	orrs	r2, r1
 800a3f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3f8:	f003 0304 	and.w	r3, r3, #4
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d00a      	beq.n	800a416 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	685b      	ldr	r3, [r3, #4]
 800a406:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	430a      	orrs	r2, r1
 800a414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a41a:	f003 0308 	and.w	r3, r3, #8
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d00a      	beq.n	800a438 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	430a      	orrs	r2, r1
 800a436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a43c:	f003 0310 	and.w	r3, r3, #16
 800a440:	2b00      	cmp	r3, #0
 800a442:	d00a      	beq.n	800a45a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	689b      	ldr	r3, [r3, #8]
 800a44a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	430a      	orrs	r2, r1
 800a458:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a45e:	f003 0320 	and.w	r3, r3, #32
 800a462:	2b00      	cmp	r3, #0
 800a464:	d00a      	beq.n	800a47c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	689b      	ldr	r3, [r3, #8]
 800a46c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	430a      	orrs	r2, r1
 800a47a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a484:	2b00      	cmp	r3, #0
 800a486:	d01a      	beq.n	800a4be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	430a      	orrs	r2, r1
 800a49c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a4a6:	d10a      	bne.n	800a4be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	685b      	ldr	r3, [r3, #4]
 800a4ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	430a      	orrs	r2, r1
 800a4bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d00a      	beq.n	800a4e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	430a      	orrs	r2, r1
 800a4de:	605a      	str	r2, [r3, #4]
  }
}
 800a4e0:	bf00      	nop
 800a4e2:	370c      	adds	r7, #12
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr

0800a4ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b086      	sub	sp, #24
 800a4f0:	af02      	add	r7, sp, #8
 800a4f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a4fc:	f7f7 f93a 	bl	8001774 <HAL_GetTick>
 800a500:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f003 0308 	and.w	r3, r3, #8
 800a50c:	2b08      	cmp	r3, #8
 800a50e:	d10e      	bne.n	800a52e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a510:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a514:	9300      	str	r3, [sp, #0]
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2200      	movs	r2, #0
 800a51a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f000 f82f 	bl	800a582 <UART_WaitOnFlagUntilTimeout>
 800a524:	4603      	mov	r3, r0
 800a526:	2b00      	cmp	r3, #0
 800a528:	d001      	beq.n	800a52e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a52a:	2303      	movs	r3, #3
 800a52c:	e025      	b.n	800a57a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f003 0304 	and.w	r3, r3, #4
 800a538:	2b04      	cmp	r3, #4
 800a53a:	d10e      	bne.n	800a55a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a53c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a540:	9300      	str	r3, [sp, #0]
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2200      	movs	r2, #0
 800a546:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f000 f819 	bl	800a582 <UART_WaitOnFlagUntilTimeout>
 800a550:	4603      	mov	r3, r0
 800a552:	2b00      	cmp	r3, #0
 800a554:	d001      	beq.n	800a55a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a556:	2303      	movs	r3, #3
 800a558:	e00f      	b.n	800a57a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2220      	movs	r2, #32
 800a55e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2220      	movs	r2, #32
 800a566:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2200      	movs	r2, #0
 800a56e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2200      	movs	r2, #0
 800a574:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a578:	2300      	movs	r3, #0
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3710      	adds	r7, #16
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}

0800a582 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a582:	b580      	push	{r7, lr}
 800a584:	b09c      	sub	sp, #112	; 0x70
 800a586:	af00      	add	r7, sp, #0
 800a588:	60f8      	str	r0, [r7, #12]
 800a58a:	60b9      	str	r1, [r7, #8]
 800a58c:	603b      	str	r3, [r7, #0]
 800a58e:	4613      	mov	r3, r2
 800a590:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a592:	e0a9      	b.n	800a6e8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a594:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a596:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a59a:	f000 80a5 	beq.w	800a6e8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a59e:	f7f7 f8e9 	bl	8001774 <HAL_GetTick>
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	1ad3      	subs	r3, r2, r3
 800a5a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d302      	bcc.n	800a5b4 <UART_WaitOnFlagUntilTimeout+0x32>
 800a5ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d140      	bne.n	800a636 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5bc:	e853 3f00 	ldrex	r3, [r3]
 800a5c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a5c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a5c8:	667b      	str	r3, [r7, #100]	; 0x64
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a5d4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a5d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a5da:	e841 2300 	strex	r3, r2, [r1]
 800a5de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a5e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d1e6      	bne.n	800a5b4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	3308      	adds	r3, #8
 800a5ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5f0:	e853 3f00 	ldrex	r3, [r3]
 800a5f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f8:	f023 0301 	bic.w	r3, r3, #1
 800a5fc:	663b      	str	r3, [r7, #96]	; 0x60
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	3308      	adds	r3, #8
 800a604:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a606:	64ba      	str	r2, [r7, #72]	; 0x48
 800a608:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a60a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a60c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a60e:	e841 2300 	strex	r3, r2, [r1]
 800a612:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a616:	2b00      	cmp	r3, #0
 800a618:	d1e5      	bne.n	800a5e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2220      	movs	r2, #32
 800a61e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	2220      	movs	r2, #32
 800a626:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	2200      	movs	r2, #0
 800a62e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a632:	2303      	movs	r3, #3
 800a634:	e069      	b.n	800a70a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f003 0304 	and.w	r3, r3, #4
 800a640:	2b00      	cmp	r3, #0
 800a642:	d051      	beq.n	800a6e8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	69db      	ldr	r3, [r3, #28]
 800a64a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a64e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a652:	d149      	bne.n	800a6e8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a65c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a666:	e853 3f00 	ldrex	r3, [r3]
 800a66a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a672:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	461a      	mov	r2, r3
 800a67a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a67c:	637b      	str	r3, [r7, #52]	; 0x34
 800a67e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a680:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a682:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a684:	e841 2300 	strex	r3, r2, [r1]
 800a688:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d1e6      	bne.n	800a65e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	3308      	adds	r3, #8
 800a696:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	e853 3f00 	ldrex	r3, [r3]
 800a69e:	613b      	str	r3, [r7, #16]
   return(result);
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	f023 0301 	bic.w	r3, r3, #1
 800a6a6:	66bb      	str	r3, [r7, #104]	; 0x68
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	3308      	adds	r3, #8
 800a6ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a6b0:	623a      	str	r2, [r7, #32]
 800a6b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6b4:	69f9      	ldr	r1, [r7, #28]
 800a6b6:	6a3a      	ldr	r2, [r7, #32]
 800a6b8:	e841 2300 	strex	r3, r2, [r1]
 800a6bc:	61bb      	str	r3, [r7, #24]
   return(result);
 800a6be:	69bb      	ldr	r3, [r7, #24]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d1e5      	bne.n	800a690 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2220      	movs	r2, #32
 800a6c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	2220      	movs	r2, #32
 800a6d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2220      	movs	r2, #32
 800a6d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a6e4:	2303      	movs	r3, #3
 800a6e6:	e010      	b.n	800a70a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	69da      	ldr	r2, [r3, #28]
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	4013      	ands	r3, r2
 800a6f2:	68ba      	ldr	r2, [r7, #8]
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	bf0c      	ite	eq
 800a6f8:	2301      	moveq	r3, #1
 800a6fa:	2300      	movne	r3, #0
 800a6fc:	b2db      	uxtb	r3, r3
 800a6fe:	461a      	mov	r2, r3
 800a700:	79fb      	ldrb	r3, [r7, #7]
 800a702:	429a      	cmp	r2, r3
 800a704:	f43f af46 	beq.w	800a594 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a708:	2300      	movs	r3, #0
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3770      	adds	r7, #112	; 0x70
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
	...

0800a714 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b096      	sub	sp, #88	; 0x58
 800a718:	af00      	add	r7, sp, #0
 800a71a:	60f8      	str	r0, [r7, #12]
 800a71c:	60b9      	str	r1, [r7, #8]
 800a71e:	4613      	mov	r3, r2
 800a720:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	68ba      	ldr	r2, [r7, #8]
 800a726:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	88fa      	ldrh	r2, [r7, #6]
 800a72c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	2200      	movs	r2, #0
 800a734:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2222      	movs	r2, #34	; 0x22
 800a73c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a744:	2b00      	cmp	r3, #0
 800a746:	d02c      	beq.n	800a7a2 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a74c:	4a42      	ldr	r2, [pc, #264]	; (800a858 <UART_Start_Receive_DMA+0x144>)
 800a74e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a754:	4a41      	ldr	r2, [pc, #260]	; (800a85c <UART_Start_Receive_DMA+0x148>)
 800a756:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a75c:	4a40      	ldr	r2, [pc, #256]	; (800a860 <UART_Start_Receive_DMA+0x14c>)
 800a75e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a764:	2200      	movs	r2, #0
 800a766:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	3324      	adds	r3, #36	; 0x24
 800a772:	4619      	mov	r1, r3
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a778:	461a      	mov	r2, r3
 800a77a:	88fb      	ldrh	r3, [r7, #6]
 800a77c:	f7f7 fc64 	bl	8002048 <HAL_DMA_Start_IT>
 800a780:	4603      	mov	r3, r0
 800a782:	2b00      	cmp	r3, #0
 800a784:	d00d      	beq.n	800a7a2 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	2210      	movs	r2, #16
 800a78a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2200      	movs	r2, #0
 800a792:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	2220      	movs	r2, #32
 800a79a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800a79e:	2301      	movs	r3, #1
 800a7a0:	e055      	b.n	800a84e <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	691b      	ldr	r3, [r3, #16]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d018      	beq.n	800a7e4 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7ba:	e853 3f00 	ldrex	r3, [r3]
 800a7be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a7c6:	657b      	str	r3, [r7, #84]	; 0x54
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7d0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a7d2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7d4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a7d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a7d8:	e841 2300 	strex	r3, r2, [r1]
 800a7dc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a7de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d1e6      	bne.n	800a7b2 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	3308      	adds	r3, #8
 800a7ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ee:	e853 3f00 	ldrex	r3, [r3]
 800a7f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f6:	f043 0301 	orr.w	r3, r3, #1
 800a7fa:	653b      	str	r3, [r7, #80]	; 0x50
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	3308      	adds	r3, #8
 800a802:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a804:	637a      	str	r2, [r7, #52]	; 0x34
 800a806:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a808:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a80a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a80c:	e841 2300 	strex	r3, r2, [r1]
 800a810:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a814:	2b00      	cmp	r3, #0
 800a816:	d1e5      	bne.n	800a7e4 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	3308      	adds	r3, #8
 800a81e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	e853 3f00 	ldrex	r3, [r3]
 800a826:	613b      	str	r3, [r7, #16]
   return(result);
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a82e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	3308      	adds	r3, #8
 800a836:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a838:	623a      	str	r2, [r7, #32]
 800a83a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a83c:	69f9      	ldr	r1, [r7, #28]
 800a83e:	6a3a      	ldr	r2, [r7, #32]
 800a840:	e841 2300 	strex	r3, r2, [r1]
 800a844:	61bb      	str	r3, [r7, #24]
   return(result);
 800a846:	69bb      	ldr	r3, [r7, #24]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d1e5      	bne.n	800a818 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800a84c:	2300      	movs	r3, #0
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3758      	adds	r7, #88	; 0x58
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
 800a856:	bf00      	nop
 800a858:	0800aa67 	.word	0x0800aa67
 800a85c:	0800ab89 	.word	0x0800ab89
 800a860:	0800abc1 	.word	0x0800abc1

0800a864 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a864:	b480      	push	{r7}
 800a866:	b08f      	sub	sp, #60	; 0x3c
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a872:	6a3b      	ldr	r3, [r7, #32]
 800a874:	e853 3f00 	ldrex	r3, [r3]
 800a878:	61fb      	str	r3, [r7, #28]
   return(result);
 800a87a:	69fb      	ldr	r3, [r7, #28]
 800a87c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a880:	637b      	str	r3, [r7, #52]	; 0x34
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	461a      	mov	r2, r3
 800a888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a88a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a88c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a88e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a890:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a892:	e841 2300 	strex	r3, r2, [r1]
 800a896:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d1e6      	bne.n	800a86c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	3308      	adds	r3, #8
 800a8a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	e853 3f00 	ldrex	r3, [r3]
 800a8ac:	60bb      	str	r3, [r7, #8]
   return(result);
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a8b4:	633b      	str	r3, [r7, #48]	; 0x30
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	3308      	adds	r3, #8
 800a8bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8be:	61ba      	str	r2, [r7, #24]
 800a8c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8c2:	6979      	ldr	r1, [r7, #20]
 800a8c4:	69ba      	ldr	r2, [r7, #24]
 800a8c6:	e841 2300 	strex	r3, r2, [r1]
 800a8ca:	613b      	str	r3, [r7, #16]
   return(result);
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d1e5      	bne.n	800a89e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2220      	movs	r2, #32
 800a8d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800a8da:	bf00      	nop
 800a8dc:	373c      	adds	r7, #60	; 0x3c
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr
	...

0800a8e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b095      	sub	sp, #84	; 0x54
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8f8:	e853 3f00 	ldrex	r3, [r3]
 800a8fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a900:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a904:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	461a      	mov	r2, r3
 800a90c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a90e:	643b      	str	r3, [r7, #64]	; 0x40
 800a910:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a912:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a914:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a916:	e841 2300 	strex	r3, r2, [r1]
 800a91a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d1e6      	bne.n	800a8f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	3308      	adds	r3, #8
 800a928:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a92a:	6a3b      	ldr	r3, [r7, #32]
 800a92c:	e853 3f00 	ldrex	r3, [r3]
 800a930:	61fb      	str	r3, [r7, #28]
   return(result);
 800a932:	69fa      	ldr	r2, [r7, #28]
 800a934:	4b1e      	ldr	r3, [pc, #120]	; (800a9b0 <UART_EndRxTransfer+0xc8>)
 800a936:	4013      	ands	r3, r2
 800a938:	64bb      	str	r3, [r7, #72]	; 0x48
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	3308      	adds	r3, #8
 800a940:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a942:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a944:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a946:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a948:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a94a:	e841 2300 	strex	r3, r2, [r1]
 800a94e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a952:	2b00      	cmp	r3, #0
 800a954:	d1e5      	bne.n	800a922 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a95a:	2b01      	cmp	r3, #1
 800a95c:	d118      	bne.n	800a990 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	e853 3f00 	ldrex	r3, [r3]
 800a96a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	f023 0310 	bic.w	r3, r3, #16
 800a972:	647b      	str	r3, [r7, #68]	; 0x44
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	461a      	mov	r2, r3
 800a97a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a97c:	61bb      	str	r3, [r7, #24]
 800a97e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a980:	6979      	ldr	r1, [r7, #20]
 800a982:	69ba      	ldr	r2, [r7, #24]
 800a984:	e841 2300 	strex	r3, r2, [r1]
 800a988:	613b      	str	r3, [r7, #16]
   return(result);
 800a98a:	693b      	ldr	r3, [r7, #16]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d1e6      	bne.n	800a95e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2220      	movs	r2, #32
 800a994:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2200      	movs	r2, #0
 800a99c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a9a4:	bf00      	nop
 800a9a6:	3754      	adds	r7, #84	; 0x54
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr
 800a9b0:	effffffe 	.word	0xeffffffe

0800a9b4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b090      	sub	sp, #64	; 0x40
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9c0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	69db      	ldr	r3, [r3, #28]
 800a9c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9ca:	d037      	beq.n	800aa3c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800a9cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a9d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	3308      	adds	r3, #8
 800a9da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9de:	e853 3f00 	ldrex	r3, [r3]
 800a9e2:	623b      	str	r3, [r7, #32]
   return(result);
 800a9e4:	6a3b      	ldr	r3, [r7, #32]
 800a9e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a9ea:	63bb      	str	r3, [r7, #56]	; 0x38
 800a9ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	3308      	adds	r3, #8
 800a9f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a9f4:	633a      	str	r2, [r7, #48]	; 0x30
 800a9f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a9fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9fc:	e841 2300 	strex	r3, r2, [r1]
 800aa00:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aa02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d1e5      	bne.n	800a9d4 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aa08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	e853 3f00 	ldrex	r3, [r3]
 800aa14:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa1c:	637b      	str	r3, [r7, #52]	; 0x34
 800aa1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	461a      	mov	r2, r3
 800aa24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa26:	61fb      	str	r3, [r7, #28]
 800aa28:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa2a:	69b9      	ldr	r1, [r7, #24]
 800aa2c:	69fa      	ldr	r2, [r7, #28]
 800aa2e:	e841 2300 	strex	r3, r2, [r1]
 800aa32:	617b      	str	r3, [r7, #20]
   return(result);
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d1e6      	bne.n	800aa08 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aa3a:	e002      	b.n	800aa42 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800aa3c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800aa3e:	f7f6 f90b 	bl	8000c58 <HAL_UART_TxCpltCallback>
}
 800aa42:	bf00      	nop
 800aa44:	3740      	adds	r7, #64	; 0x40
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}

0800aa4a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aa4a:	b580      	push	{r7, lr}
 800aa4c:	b084      	sub	sp, #16
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa56:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800aa58:	68f8      	ldr	r0, [r7, #12]
 800aa5a:	f7fe fe11 	bl	8009680 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa5e:	bf00      	nop
 800aa60:	3710      	adds	r7, #16
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}

0800aa66 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aa66:	b580      	push	{r7, lr}
 800aa68:	b09c      	sub	sp, #112	; 0x70
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa72:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	69db      	ldr	r3, [r3, #28]
 800aa78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa7c:	d071      	beq.n	800ab62 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800aa7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa80:	2200      	movs	r2, #0
 800aa82:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa8e:	e853 3f00 	ldrex	r3, [r3]
 800aa92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800aa94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa9a:	66bb      	str	r3, [r7, #104]	; 0x68
 800aa9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aaa4:	65bb      	str	r3, [r7, #88]	; 0x58
 800aaa6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaa8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aaaa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aaac:	e841 2300 	strex	r3, r2, [r1]
 800aab0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aab2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d1e6      	bne.n	800aa86 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	3308      	adds	r3, #8
 800aabe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aac2:	e853 3f00 	ldrex	r3, [r3]
 800aac6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800aac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaca:	f023 0301 	bic.w	r3, r3, #1
 800aace:	667b      	str	r3, [r7, #100]	; 0x64
 800aad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	3308      	adds	r3, #8
 800aad6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800aad8:	647a      	str	r2, [r7, #68]	; 0x44
 800aada:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aadc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aade:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aae0:	e841 2300 	strex	r3, r2, [r1]
 800aae4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d1e5      	bne.n	800aab8 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aaec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	3308      	adds	r3, #8
 800aaf2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf6:	e853 3f00 	ldrex	r3, [r3]
 800aafa:	623b      	str	r3, [r7, #32]
   return(result);
 800aafc:	6a3b      	ldr	r3, [r7, #32]
 800aafe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab02:	663b      	str	r3, [r7, #96]	; 0x60
 800ab04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	3308      	adds	r3, #8
 800ab0a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ab0c:	633a      	str	r2, [r7, #48]	; 0x30
 800ab0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab14:	e841 2300 	strex	r3, r2, [r1]
 800ab18:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ab1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d1e5      	bne.n	800aaec <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ab20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab22:	2220      	movs	r2, #32
 800ab24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab2c:	2b01      	cmp	r3, #1
 800ab2e:	d118      	bne.n	800ab62 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	e853 3f00 	ldrex	r3, [r3]
 800ab3c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	f023 0310 	bic.w	r3, r3, #16
 800ab44:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	461a      	mov	r2, r3
 800ab4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab4e:	61fb      	str	r3, [r7, #28]
 800ab50:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab52:	69b9      	ldr	r1, [r7, #24]
 800ab54:	69fa      	ldr	r2, [r7, #28]
 800ab56:	e841 2300 	strex	r3, r2, [r1]
 800ab5a:	617b      	str	r3, [r7, #20]
   return(result);
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d1e6      	bne.n	800ab30 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab66:	2b01      	cmp	r3, #1
 800ab68:	d107      	bne.n	800ab7a <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ab6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ab70:	4619      	mov	r1, r3
 800ab72:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ab74:	f7f6 f87e 	bl	8000c74 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ab78:	e002      	b.n	800ab80 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800ab7a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ab7c:	f7fe fd8a 	bl	8009694 <HAL_UART_RxCpltCallback>
}
 800ab80:	bf00      	nop
 800ab82:	3770      	adds	r7, #112	; 0x70
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}

0800ab88 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b084      	sub	sp, #16
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab94:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab9a:	2b01      	cmp	r3, #1
 800ab9c:	d109      	bne.n	800abb2 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800aba4:	085b      	lsrs	r3, r3, #1
 800aba6:	b29b      	uxth	r3, r3
 800aba8:	4619      	mov	r1, r3
 800abaa:	68f8      	ldr	r0, [r7, #12]
 800abac:	f7f6 f862 	bl	8000c74 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800abb0:	e002      	b.n	800abb8 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800abb2:	68f8      	ldr	r0, [r7, #12]
 800abb4:	f7fe fd78 	bl	80096a8 <HAL_UART_RxHalfCpltCallback>
}
 800abb8:	bf00      	nop
 800abba:	3710      	adds	r7, #16
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b086      	sub	sp, #24
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abcc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800abd4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abdc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	689b      	ldr	r3, [r3, #8]
 800abe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abe8:	2b80      	cmp	r3, #128	; 0x80
 800abea:	d109      	bne.n	800ac00 <UART_DMAError+0x40>
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	2b21      	cmp	r3, #33	; 0x21
 800abf0:	d106      	bne.n	800ac00 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	2200      	movs	r2, #0
 800abf6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800abfa:	6978      	ldr	r0, [r7, #20]
 800abfc:	f7ff fe32 	bl	800a864 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	689b      	ldr	r3, [r3, #8]
 800ac06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac0a:	2b40      	cmp	r3, #64	; 0x40
 800ac0c:	d109      	bne.n	800ac22 <UART_DMAError+0x62>
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	2b22      	cmp	r3, #34	; 0x22
 800ac12:	d106      	bne.n	800ac22 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	2200      	movs	r2, #0
 800ac18:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800ac1c:	6978      	ldr	r0, [r7, #20]
 800ac1e:	f7ff fe63 	bl	800a8e8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac28:	f043 0210 	orr.w	r2, r3, #16
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac32:	6978      	ldr	r0, [r7, #20]
 800ac34:	f7fe fd42 	bl	80096bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac38:	bf00      	nop
 800ac3a:	3718      	adds	r7, #24
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	2200      	movs	r2, #0
 800ac52:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac5e:	68f8      	ldr	r0, [r7, #12]
 800ac60:	f7fe fd2c 	bl	80096bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac64:	bf00      	nop
 800ac66:	3710      	adds	r7, #16
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}

0800ac6c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b088      	sub	sp, #32
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	e853 3f00 	ldrex	r3, [r3]
 800ac80:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac88:	61fb      	str	r3, [r7, #28]
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	461a      	mov	r2, r3
 800ac90:	69fb      	ldr	r3, [r7, #28]
 800ac92:	61bb      	str	r3, [r7, #24]
 800ac94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac96:	6979      	ldr	r1, [r7, #20]
 800ac98:	69ba      	ldr	r2, [r7, #24]
 800ac9a:	e841 2300 	strex	r3, r2, [r1]
 800ac9e:	613b      	str	r3, [r7, #16]
   return(result);
 800aca0:	693b      	ldr	r3, [r7, #16]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d1e6      	bne.n	800ac74 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2220      	movs	r2, #32
 800acaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2200      	movs	r2, #0
 800acb2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f7f5 ffcf 	bl	8000c58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800acba:	bf00      	nop
 800acbc:	3720      	adds	r7, #32
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}

0800acc2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800acc2:	b480      	push	{r7}
 800acc4:	b083      	sub	sp, #12
 800acc6:	af00      	add	r7, sp, #0
 800acc8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800acca:	bf00      	nop
 800accc:	370c      	adds	r7, #12
 800acce:	46bd      	mov	sp, r7
 800acd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd4:	4770      	bx	lr

0800acd6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800acd6:	b480      	push	{r7}
 800acd8:	b083      	sub	sp, #12
 800acda:	af00      	add	r7, sp, #0
 800acdc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800acde:	bf00      	nop
 800ace0:	370c      	adds	r7, #12
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr

0800acea <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800acea:	b480      	push	{r7}
 800acec:	b083      	sub	sp, #12
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800acf2:	bf00      	nop
 800acf4:	370c      	adds	r7, #12
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr

0800acfe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800acfe:	b480      	push	{r7}
 800ad00:	b085      	sub	sp, #20
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ad0c:	2b01      	cmp	r3, #1
 800ad0e:	d101      	bne.n	800ad14 <HAL_UARTEx_DisableFifoMode+0x16>
 800ad10:	2302      	movs	r3, #2
 800ad12:	e027      	b.n	800ad64 <HAL_UARTEx_DisableFifoMode+0x66>
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2201      	movs	r2, #1
 800ad18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2224      	movs	r2, #36	; 0x24
 800ad20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	681a      	ldr	r2, [r3, #0]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f022 0201 	bic.w	r2, r2, #1
 800ad3a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ad42:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2200      	movs	r2, #0
 800ad48:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	68fa      	ldr	r2, [r7, #12]
 800ad50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2220      	movs	r2, #32
 800ad56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ad62:	2300      	movs	r3, #0
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3714      	adds	r7, #20
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr

0800ad70 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b084      	sub	sp, #16
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ad80:	2b01      	cmp	r3, #1
 800ad82:	d101      	bne.n	800ad88 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ad84:	2302      	movs	r3, #2
 800ad86:	e02d      	b.n	800ade4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2224      	movs	r2, #36	; 0x24
 800ad94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	681a      	ldr	r2, [r3, #0]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f022 0201 	bic.w	r2, r2, #1
 800adae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	689b      	ldr	r3, [r3, #8]
 800adb6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	683a      	ldr	r2, [r7, #0]
 800adc0:	430a      	orrs	r2, r1
 800adc2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f000 f8ab 	bl	800af20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	68fa      	ldr	r2, [r7, #12]
 800add0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2220      	movs	r2, #32
 800add6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2200      	movs	r2, #0
 800adde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ade2:	2300      	movs	r3, #0
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3710      	adds	r7, #16
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b084      	sub	sp, #16
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
 800adf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800adfc:	2b01      	cmp	r3, #1
 800adfe:	d101      	bne.n	800ae04 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ae00:	2302      	movs	r3, #2
 800ae02:	e02d      	b.n	800ae60 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2201      	movs	r2, #1
 800ae08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2224      	movs	r2, #36	; 0x24
 800ae10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	681a      	ldr	r2, [r3, #0]
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f022 0201 	bic.w	r2, r2, #1
 800ae2a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	689b      	ldr	r3, [r3, #8]
 800ae32:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	683a      	ldr	r2, [r7, #0]
 800ae3c:	430a      	orrs	r2, r1
 800ae3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f000 f86d 	bl	800af20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	68fa      	ldr	r2, [r7, #12]
 800ae4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2220      	movs	r2, #32
 800ae52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ae5e:	2300      	movs	r3, #0
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3710      	adds	r7, #16
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}

0800ae68 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b08c      	sub	sp, #48	; 0x30
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	60f8      	str	r0, [r7, #12]
 800ae70:	60b9      	str	r1, [r7, #8]
 800ae72:	4613      	mov	r3, r2
 800ae74:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae7c:	2b20      	cmp	r3, #32
 800ae7e:	d14a      	bne.n	800af16 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d002      	beq.n	800ae8c <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800ae86:	88fb      	ldrh	r3, [r7, #6]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d101      	bne.n	800ae90 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	e043      	b.n	800af18 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	d101      	bne.n	800ae9e <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 800ae9a:	2302      	movs	r3, #2
 800ae9c:	e03c      	b.n	800af18 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	2201      	movs	r2, #1
 800aea2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2201      	movs	r2, #1
 800aeaa:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800aeac:	88fb      	ldrh	r3, [r7, #6]
 800aeae:	461a      	mov	r2, r3
 800aeb0:	68b9      	ldr	r1, [r7, #8]
 800aeb2:	68f8      	ldr	r0, [r7, #12]
 800aeb4:	f7ff fc2e 	bl	800a714 <UART_Start_Receive_DMA>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800aebe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d124      	bne.n	800af10 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	d11d      	bne.n	800af0a <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	2210      	movs	r2, #16
 800aed4:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aedc:	69bb      	ldr	r3, [r7, #24]
 800aede:	e853 3f00 	ldrex	r3, [r3]
 800aee2:	617b      	str	r3, [r7, #20]
   return(result);
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	f043 0310 	orr.w	r3, r3, #16
 800aeea:	62bb      	str	r3, [r7, #40]	; 0x28
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	461a      	mov	r2, r3
 800aef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aef4:	627b      	str	r3, [r7, #36]	; 0x24
 800aef6:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aef8:	6a39      	ldr	r1, [r7, #32]
 800aefa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aefc:	e841 2300 	strex	r3, r2, [r1]
 800af00:	61fb      	str	r3, [r7, #28]
   return(result);
 800af02:	69fb      	ldr	r3, [r7, #28]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d1e6      	bne.n	800aed6 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800af08:	e002      	b.n	800af10 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800af0a:	2301      	movs	r3, #1
 800af0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800af10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af14:	e000      	b.n	800af18 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800af16:	2302      	movs	r3, #2
  }
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3730      	adds	r7, #48	; 0x30
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800af20:	b480      	push	{r7}
 800af22:	b085      	sub	sp, #20
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d108      	bne.n	800af42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2201      	movs	r2, #1
 800af34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2201      	movs	r2, #1
 800af3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800af40:	e031      	b.n	800afa6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800af42:	2310      	movs	r3, #16
 800af44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800af46:	2310      	movs	r3, #16
 800af48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	689b      	ldr	r3, [r3, #8]
 800af50:	0e5b      	lsrs	r3, r3, #25
 800af52:	b2db      	uxtb	r3, r3
 800af54:	f003 0307 	and.w	r3, r3, #7
 800af58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	689b      	ldr	r3, [r3, #8]
 800af60:	0f5b      	lsrs	r3, r3, #29
 800af62:	b2db      	uxtb	r3, r3
 800af64:	f003 0307 	and.w	r3, r3, #7
 800af68:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800af6a:	7bbb      	ldrb	r3, [r7, #14]
 800af6c:	7b3a      	ldrb	r2, [r7, #12]
 800af6e:	4911      	ldr	r1, [pc, #68]	; (800afb4 <UARTEx_SetNbDataToProcess+0x94>)
 800af70:	5c8a      	ldrb	r2, [r1, r2]
 800af72:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800af76:	7b3a      	ldrb	r2, [r7, #12]
 800af78:	490f      	ldr	r1, [pc, #60]	; (800afb8 <UARTEx_SetNbDataToProcess+0x98>)
 800af7a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800af7c:	fb93 f3f2 	sdiv	r3, r3, r2
 800af80:	b29a      	uxth	r2, r3
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800af88:	7bfb      	ldrb	r3, [r7, #15]
 800af8a:	7b7a      	ldrb	r2, [r7, #13]
 800af8c:	4909      	ldr	r1, [pc, #36]	; (800afb4 <UARTEx_SetNbDataToProcess+0x94>)
 800af8e:	5c8a      	ldrb	r2, [r1, r2]
 800af90:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800af94:	7b7a      	ldrb	r2, [r7, #13]
 800af96:	4908      	ldr	r1, [pc, #32]	; (800afb8 <UARTEx_SetNbDataToProcess+0x98>)
 800af98:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800af9a:	fb93 f3f2 	sdiv	r3, r3, r2
 800af9e:	b29a      	uxth	r2, r3
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800afa6:	bf00      	nop
 800afa8:	3714      	adds	r7, #20
 800afaa:	46bd      	mov	sp, r7
 800afac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb0:	4770      	bx	lr
 800afb2:	bf00      	nop
 800afb4:	08014014 	.word	0x08014014
 800afb8:	0801401c 	.word	0x0801401c

0800afbc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800afbc:	b084      	sub	sp, #16
 800afbe:	b580      	push	{r7, lr}
 800afc0:	b084      	sub	sp, #16
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	6078      	str	r0, [r7, #4]
 800afc6:	f107 001c 	add.w	r0, r7, #28
 800afca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800afce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d120      	bne.n	800b016 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afd8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	68da      	ldr	r2, [r3, #12]
 800afe4:	4b2a      	ldr	r3, [pc, #168]	; (800b090 <USB_CoreInit+0xd4>)
 800afe6:	4013      	ands	r3, r2
 800afe8:	687a      	ldr	r2, [r7, #4]
 800afea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	68db      	ldr	r3, [r3, #12]
 800aff0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800aff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800affa:	2b01      	cmp	r3, #1
 800affc:	d105      	bne.n	800b00a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	68db      	ldr	r3, [r3, #12]
 800b002:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f000 f9ce 	bl	800b3ac <USB_CoreReset>
 800b010:	4603      	mov	r3, r0
 800b012:	73fb      	strb	r3, [r7, #15]
 800b014:	e01a      	b.n	800b04c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	68db      	ldr	r3, [r3, #12]
 800b01a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f000 f9c2 	bl	800b3ac <USB_CoreReset>
 800b028:	4603      	mov	r3, r0
 800b02a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b02c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d106      	bne.n	800b040 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b036:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	639a      	str	r2, [r3, #56]	; 0x38
 800b03e:	e005      	b.n	800b04c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b044:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b04e:	2b01      	cmp	r3, #1
 800b050:	d116      	bne.n	800b080 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b056:	b29a      	uxth	r2, r3
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b060:	4b0c      	ldr	r3, [pc, #48]	; (800b094 <USB_CoreInit+0xd8>)
 800b062:	4313      	orrs	r3, r2
 800b064:	687a      	ldr	r2, [r7, #4]
 800b066:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	689b      	ldr	r3, [r3, #8]
 800b06c:	f043 0206 	orr.w	r2, r3, #6
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	689b      	ldr	r3, [r3, #8]
 800b078:	f043 0220 	orr.w	r2, r3, #32
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b080:	7bfb      	ldrb	r3, [r7, #15]
}
 800b082:	4618      	mov	r0, r3
 800b084:	3710      	adds	r7, #16
 800b086:	46bd      	mov	sp, r7
 800b088:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b08c:	b004      	add	sp, #16
 800b08e:	4770      	bx	lr
 800b090:	ffbdffbf 	.word	0xffbdffbf
 800b094:	03ee0000 	.word	0x03ee0000

0800b098 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b098:	b480      	push	{r7}
 800b09a:	b083      	sub	sp, #12
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	689b      	ldr	r3, [r3, #8]
 800b0a4:	f043 0201 	orr.w	r2, r3, #1
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b0ac:	2300      	movs	r3, #0
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	370c      	adds	r7, #12
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b8:	4770      	bx	lr

0800b0ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b0ba:	b480      	push	{r7}
 800b0bc:	b083      	sub	sp, #12
 800b0be:	af00      	add	r7, sp, #0
 800b0c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	689b      	ldr	r3, [r3, #8]
 800b0c6:	f023 0201 	bic.w	r2, r3, #1
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b0ce:	2300      	movs	r3, #0
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	370c      	adds	r7, #12
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0da:	4770      	bx	lr

0800b0dc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b084      	sub	sp, #16
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
 800b0e4:	460b      	mov	r3, r1
 800b0e6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	68db      	ldr	r3, [r3, #12]
 800b0f0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b0f8:	78fb      	ldrb	r3, [r7, #3]
 800b0fa:	2b01      	cmp	r3, #1
 800b0fc:	d115      	bne.n	800b12a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	68db      	ldr	r3, [r3, #12]
 800b102:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b10a:	2001      	movs	r0, #1
 800b10c:	f7f6 fb3e 	bl	800178c <HAL_Delay>
      ms++;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	3301      	adds	r3, #1
 800b114:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f000 f939 	bl	800b38e <USB_GetMode>
 800b11c:	4603      	mov	r3, r0
 800b11e:	2b01      	cmp	r3, #1
 800b120:	d01e      	beq.n	800b160 <USB_SetCurrentMode+0x84>
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2b31      	cmp	r3, #49	; 0x31
 800b126:	d9f0      	bls.n	800b10a <USB_SetCurrentMode+0x2e>
 800b128:	e01a      	b.n	800b160 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b12a:	78fb      	ldrb	r3, [r7, #3]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d115      	bne.n	800b15c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	68db      	ldr	r3, [r3, #12]
 800b134:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b13c:	2001      	movs	r0, #1
 800b13e:	f7f6 fb25 	bl	800178c <HAL_Delay>
      ms++;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	3301      	adds	r3, #1
 800b146:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f000 f920 	bl	800b38e <USB_GetMode>
 800b14e:	4603      	mov	r3, r0
 800b150:	2b00      	cmp	r3, #0
 800b152:	d005      	beq.n	800b160 <USB_SetCurrentMode+0x84>
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	2b31      	cmp	r3, #49	; 0x31
 800b158:	d9f0      	bls.n	800b13c <USB_SetCurrentMode+0x60>
 800b15a:	e001      	b.n	800b160 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b15c:	2301      	movs	r3, #1
 800b15e:	e005      	b.n	800b16c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	2b32      	cmp	r3, #50	; 0x32
 800b164:	d101      	bne.n	800b16a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b166:	2301      	movs	r3, #1
 800b168:	e000      	b.n	800b16c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b16a:	2300      	movs	r3, #0
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	3710      	adds	r7, #16
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}

0800b174 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b174:	b480      	push	{r7}
 800b176:	b085      	sub	sp, #20
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b17e:	2300      	movs	r3, #0
 800b180:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	3301      	adds	r3, #1
 800b186:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	4a13      	ldr	r2, [pc, #76]	; (800b1d8 <USB_FlushTxFifo+0x64>)
 800b18c:	4293      	cmp	r3, r2
 800b18e:	d901      	bls.n	800b194 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b190:	2303      	movs	r3, #3
 800b192:	e01b      	b.n	800b1cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	691b      	ldr	r3, [r3, #16]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	daf2      	bge.n	800b182 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b19c:	2300      	movs	r3, #0
 800b19e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	019b      	lsls	r3, r3, #6
 800b1a4:	f043 0220 	orr.w	r2, r3, #32
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	3301      	adds	r3, #1
 800b1b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	4a08      	ldr	r2, [pc, #32]	; (800b1d8 <USB_FlushTxFifo+0x64>)
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d901      	bls.n	800b1be <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b1ba:	2303      	movs	r3, #3
 800b1bc:	e006      	b.n	800b1cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	691b      	ldr	r3, [r3, #16]
 800b1c2:	f003 0320 	and.w	r3, r3, #32
 800b1c6:	2b20      	cmp	r3, #32
 800b1c8:	d0f0      	beq.n	800b1ac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b1ca:	2300      	movs	r3, #0
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	3714      	adds	r7, #20
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr
 800b1d8:	00030d40 	.word	0x00030d40

0800b1dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b1dc:	b480      	push	{r7}
 800b1de:	b085      	sub	sp, #20
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	3301      	adds	r3, #1
 800b1ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	4a11      	ldr	r2, [pc, #68]	; (800b238 <USB_FlushRxFifo+0x5c>)
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	d901      	bls.n	800b1fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b1f6:	2303      	movs	r3, #3
 800b1f8:	e018      	b.n	800b22c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	691b      	ldr	r3, [r3, #16]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	daf2      	bge.n	800b1e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b202:	2300      	movs	r3, #0
 800b204:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2210      	movs	r2, #16
 800b20a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	3301      	adds	r3, #1
 800b210:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	4a08      	ldr	r2, [pc, #32]	; (800b238 <USB_FlushRxFifo+0x5c>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d901      	bls.n	800b21e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b21a:	2303      	movs	r3, #3
 800b21c:	e006      	b.n	800b22c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	691b      	ldr	r3, [r3, #16]
 800b222:	f003 0310 	and.w	r3, r3, #16
 800b226:	2b10      	cmp	r3, #16
 800b228:	d0f0      	beq.n	800b20c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b22a:	2300      	movs	r3, #0
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3714      	adds	r7, #20
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr
 800b238:	00030d40 	.word	0x00030d40

0800b23c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b089      	sub	sp, #36	; 0x24
 800b240:	af00      	add	r7, sp, #0
 800b242:	60f8      	str	r0, [r7, #12]
 800b244:	60b9      	str	r1, [r7, #8]
 800b246:	4611      	mov	r1, r2
 800b248:	461a      	mov	r2, r3
 800b24a:	460b      	mov	r3, r1
 800b24c:	71fb      	strb	r3, [r7, #7]
 800b24e:	4613      	mov	r3, r2
 800b250:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b25a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d123      	bne.n	800b2aa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b262:	88bb      	ldrh	r3, [r7, #4]
 800b264:	3303      	adds	r3, #3
 800b266:	089b      	lsrs	r3, r3, #2
 800b268:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b26a:	2300      	movs	r3, #0
 800b26c:	61bb      	str	r3, [r7, #24]
 800b26e:	e018      	b.n	800b2a2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b270:	79fb      	ldrb	r3, [r7, #7]
 800b272:	031a      	lsls	r2, r3, #12
 800b274:	697b      	ldr	r3, [r7, #20]
 800b276:	4413      	add	r3, r2
 800b278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b27c:	461a      	mov	r2, r3
 800b27e:	69fb      	ldr	r3, [r7, #28]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b284:	69fb      	ldr	r3, [r7, #28]
 800b286:	3301      	adds	r3, #1
 800b288:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b28a:	69fb      	ldr	r3, [r7, #28]
 800b28c:	3301      	adds	r3, #1
 800b28e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b290:	69fb      	ldr	r3, [r7, #28]
 800b292:	3301      	adds	r3, #1
 800b294:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b296:	69fb      	ldr	r3, [r7, #28]
 800b298:	3301      	adds	r3, #1
 800b29a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b29c:	69bb      	ldr	r3, [r7, #24]
 800b29e:	3301      	adds	r3, #1
 800b2a0:	61bb      	str	r3, [r7, #24]
 800b2a2:	69ba      	ldr	r2, [r7, #24]
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d3e2      	bcc.n	800b270 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b2aa:	2300      	movs	r3, #0
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3724      	adds	r7, #36	; 0x24
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b6:	4770      	bx	lr

0800b2b8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b08b      	sub	sp, #44	; 0x2c
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	60f8      	str	r0, [r7, #12]
 800b2c0:	60b9      	str	r1, [r7, #8]
 800b2c2:	4613      	mov	r3, r2
 800b2c4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b2ce:	88fb      	ldrh	r3, [r7, #6]
 800b2d0:	089b      	lsrs	r3, r3, #2
 800b2d2:	b29b      	uxth	r3, r3
 800b2d4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b2d6:	88fb      	ldrh	r3, [r7, #6]
 800b2d8:	f003 0303 	and.w	r3, r3, #3
 800b2dc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b2de:	2300      	movs	r3, #0
 800b2e0:	623b      	str	r3, [r7, #32]
 800b2e2:	e014      	b.n	800b30e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b2e4:	69bb      	ldr	r3, [r7, #24]
 800b2e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2ea:	681a      	ldr	r2, [r3, #0]
 800b2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ee:	601a      	str	r2, [r3, #0]
    pDest++;
 800b2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2fe:	3301      	adds	r3, #1
 800b300:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b304:	3301      	adds	r3, #1
 800b306:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b308:	6a3b      	ldr	r3, [r7, #32]
 800b30a:	3301      	adds	r3, #1
 800b30c:	623b      	str	r3, [r7, #32]
 800b30e:	6a3a      	ldr	r2, [r7, #32]
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	429a      	cmp	r2, r3
 800b314:	d3e6      	bcc.n	800b2e4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b316:	8bfb      	ldrh	r3, [r7, #30]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d01e      	beq.n	800b35a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b31c:	2300      	movs	r3, #0
 800b31e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b320:	69bb      	ldr	r3, [r7, #24]
 800b322:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b326:	461a      	mov	r2, r3
 800b328:	f107 0310 	add.w	r3, r7, #16
 800b32c:	6812      	ldr	r2, [r2, #0]
 800b32e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b330:	693a      	ldr	r2, [r7, #16]
 800b332:	6a3b      	ldr	r3, [r7, #32]
 800b334:	b2db      	uxtb	r3, r3
 800b336:	00db      	lsls	r3, r3, #3
 800b338:	fa22 f303 	lsr.w	r3, r2, r3
 800b33c:	b2da      	uxtb	r2, r3
 800b33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b340:	701a      	strb	r2, [r3, #0]
      i++;
 800b342:	6a3b      	ldr	r3, [r7, #32]
 800b344:	3301      	adds	r3, #1
 800b346:	623b      	str	r3, [r7, #32]
      pDest++;
 800b348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b34a:	3301      	adds	r3, #1
 800b34c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b34e:	8bfb      	ldrh	r3, [r7, #30]
 800b350:	3b01      	subs	r3, #1
 800b352:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b354:	8bfb      	ldrh	r3, [r7, #30]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d1ea      	bne.n	800b330 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	372c      	adds	r7, #44	; 0x2c
 800b360:	46bd      	mov	sp, r7
 800b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b366:	4770      	bx	lr

0800b368 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b368:	b480      	push	{r7}
 800b36a:	b085      	sub	sp, #20
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	695b      	ldr	r3, [r3, #20]
 800b374:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	699b      	ldr	r3, [r3, #24]
 800b37a:	68fa      	ldr	r2, [r7, #12]
 800b37c:	4013      	ands	r3, r2
 800b37e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b380:	68fb      	ldr	r3, [r7, #12]
}
 800b382:	4618      	mov	r0, r3
 800b384:	3714      	adds	r7, #20
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr

0800b38e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b38e:	b480      	push	{r7}
 800b390:	b083      	sub	sp, #12
 800b392:	af00      	add	r7, sp, #0
 800b394:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	695b      	ldr	r3, [r3, #20]
 800b39a:	f003 0301 	and.w	r3, r3, #1
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	370c      	adds	r7, #12
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a8:	4770      	bx	lr
	...

0800b3ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b085      	sub	sp, #20
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	3301      	adds	r3, #1
 800b3bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	4a13      	ldr	r2, [pc, #76]	; (800b410 <USB_CoreReset+0x64>)
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	d901      	bls.n	800b3ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b3c6:	2303      	movs	r3, #3
 800b3c8:	e01b      	b.n	800b402 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	691b      	ldr	r3, [r3, #16]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	daf2      	bge.n	800b3b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	691b      	ldr	r3, [r3, #16]
 800b3da:	f043 0201 	orr.w	r2, r3, #1
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	3301      	adds	r3, #1
 800b3e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	4a09      	ldr	r2, [pc, #36]	; (800b410 <USB_CoreReset+0x64>)
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d901      	bls.n	800b3f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b3f0:	2303      	movs	r3, #3
 800b3f2:	e006      	b.n	800b402 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	691b      	ldr	r3, [r3, #16]
 800b3f8:	f003 0301 	and.w	r3, r3, #1
 800b3fc:	2b01      	cmp	r3, #1
 800b3fe:	d0f0      	beq.n	800b3e2 <USB_CoreReset+0x36>

  return HAL_OK;
 800b400:	2300      	movs	r3, #0
}
 800b402:	4618      	mov	r0, r3
 800b404:	3714      	adds	r7, #20
 800b406:	46bd      	mov	sp, r7
 800b408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40c:	4770      	bx	lr
 800b40e:	bf00      	nop
 800b410:	00030d40 	.word	0x00030d40

0800b414 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b414:	b084      	sub	sp, #16
 800b416:	b580      	push	{r7, lr}
 800b418:	b086      	sub	sp, #24
 800b41a:	af00      	add	r7, sp, #0
 800b41c:	6078      	str	r0, [r7, #4]
 800b41e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b422:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b426:	2300      	movs	r3, #0
 800b428:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b434:	461a      	mov	r2, r3
 800b436:	2300      	movs	r3, #0
 800b438:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b43e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b44a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d018      	beq.n	800b490 <USB_HostInit+0x7c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800b45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b460:	2b01      	cmp	r3, #1
 800b462:	d10a      	bne.n	800b47a <USB_HostInit+0x66>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	68fa      	ldr	r2, [r7, #12]
 800b46e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b472:	f043 0304 	orr.w	r3, r3, #4
 800b476:	6013      	str	r3, [r2, #0]
 800b478:	e014      	b.n	800b4a4 <USB_HostInit+0x90>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	68fa      	ldr	r2, [r7, #12]
 800b484:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b488:	f023 0304 	bic.w	r3, r3, #4
 800b48c:	6013      	str	r3, [r2, #0]
 800b48e:	e009      	b.n	800b4a4 <USB_HostInit+0x90>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	68fa      	ldr	r2, [r7, #12]
 800b49a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b49e:	f023 0304 	bic.w	r3, r3, #4
 800b4a2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b4a4:	2110      	movs	r1, #16
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f7ff fe64 	bl	800b174 <USB_FlushTxFifo>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d001      	beq.n	800b4b6 <USB_HostInit+0xa2>
  {
    ret = HAL_ERROR;
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f7ff fe90 	bl	800b1dc <USB_FlushRxFifo>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d001      	beq.n	800b4c6 <USB_HostInit+0xb2>
  {
    ret = HAL_ERROR;
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	613b      	str	r3, [r7, #16]
 800b4ca:	e015      	b.n	800b4f8 <USB_HostInit+0xe4>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800b4cc:	693b      	ldr	r3, [r7, #16]
 800b4ce:	015a      	lsls	r2, r3, #5
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	4413      	add	r3, r2
 800b4d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b4d8:	461a      	mov	r2, r3
 800b4da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b4de:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	015a      	lsls	r2, r3, #5
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	4413      	add	r3, r2
 800b4e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b4ec:	461a      	mov	r2, r3
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800b4f2:	693b      	ldr	r3, [r7, #16]
 800b4f4:	3301      	adds	r3, #1
 800b4f6:	613b      	str	r3, [r7, #16]
 800b4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4fa:	693a      	ldr	r2, [r7, #16]
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	d3e5      	bcc.n	800b4cc <USB_HostInit+0xb8>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2200      	movs	r2, #0
 800b504:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b50c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b516:	2b00      	cmp	r3, #0
 800b518:	d00b      	beq.n	800b532 <USB_HostInit+0x11e>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b520:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	4a13      	ldr	r2, [pc, #76]	; (800b574 <USB_HostInit+0x160>)
 800b526:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	4a13      	ldr	r2, [pc, #76]	; (800b578 <USB_HostInit+0x164>)
 800b52c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800b530:	e009      	b.n	800b546 <USB_HostInit+0x132>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2280      	movs	r2, #128	; 0x80
 800b536:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	4a10      	ldr	r2, [pc, #64]	; (800b57c <USB_HostInit+0x168>)
 800b53c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	4a0f      	ldr	r2, [pc, #60]	; (800b580 <USB_HostInit+0x16c>)
 800b542:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d105      	bne.n	800b558 <USB_HostInit+0x144>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	699b      	ldr	r3, [r3, #24]
 800b550:	f043 0210 	orr.w	r2, r3, #16
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	699a      	ldr	r2, [r3, #24]
 800b55c:	4b09      	ldr	r3, [pc, #36]	; (800b584 <USB_HostInit+0x170>)
 800b55e:	4313      	orrs	r3, r2
 800b560:	687a      	ldr	r2, [r7, #4]
 800b562:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800b564:	7dfb      	ldrb	r3, [r7, #23]
}
 800b566:	4618      	mov	r0, r3
 800b568:	3718      	adds	r7, #24
 800b56a:	46bd      	mov	sp, r7
 800b56c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b570:	b004      	add	sp, #16
 800b572:	4770      	bx	lr
 800b574:	01000200 	.word	0x01000200
 800b578:	00e00300 	.word	0x00e00300
 800b57c:	00600080 	.word	0x00600080
 800b580:	004000e0 	.word	0x004000e0
 800b584:	a3200008 	.word	0xa3200008

0800b588 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800b588:	b480      	push	{r7}
 800b58a:	b085      	sub	sp, #20
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
 800b590:	460b      	mov	r3, r1
 800b592:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	68fa      	ldr	r2, [r7, #12]
 800b5a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b5a6:	f023 0303 	bic.w	r3, r3, #3
 800b5aa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b5b2:	681a      	ldr	r2, [r3, #0]
 800b5b4:	78fb      	ldrb	r3, [r7, #3]
 800b5b6:	f003 0303 	and.w	r3, r3, #3
 800b5ba:	68f9      	ldr	r1, [r7, #12]
 800b5bc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800b5c4:	78fb      	ldrb	r3, [r7, #3]
 800b5c6:	2b01      	cmp	r3, #1
 800b5c8:	d107      	bne.n	800b5da <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b5d0:	461a      	mov	r2, r3
 800b5d2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b5d6:	6053      	str	r3, [r2, #4]
 800b5d8:	e009      	b.n	800b5ee <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800b5da:	78fb      	ldrb	r3, [r7, #3]
 800b5dc:	2b02      	cmp	r3, #2
 800b5de:	d106      	bne.n	800b5ee <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	f241 7370 	movw	r3, #6000	; 0x1770
 800b5ec:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800b5ee:	2300      	movs	r3, #0
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3714      	adds	r7, #20
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fa:	4770      	bx	lr

0800b5fc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b084      	sub	sp, #16
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800b608:	2300      	movs	r3, #0
 800b60a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b61c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	68fa      	ldr	r2, [r7, #12]
 800b622:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b62a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800b62c:	2064      	movs	r0, #100	; 0x64
 800b62e:	f7f6 f8ad 	bl	800178c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	68fa      	ldr	r2, [r7, #12]
 800b636:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b63a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b63e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800b640:	200a      	movs	r0, #10
 800b642:	f7f6 f8a3 	bl	800178c <HAL_Delay>

  return HAL_OK;
 800b646:	2300      	movs	r3, #0
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3710      	adds	r7, #16
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}

0800b650 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800b650:	b480      	push	{r7}
 800b652:	b085      	sub	sp, #20
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	460b      	mov	r3, r1
 800b65a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b660:	2300      	movs	r3, #0
 800b662:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b674:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d109      	bne.n	800b694 <USB_DriveVbus+0x44>
 800b680:	78fb      	ldrb	r3, [r7, #3]
 800b682:	2b01      	cmp	r3, #1
 800b684:	d106      	bne.n	800b694 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	68fa      	ldr	r2, [r7, #12]
 800b68a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b68e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b692:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b69a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b69e:	d109      	bne.n	800b6b4 <USB_DriveVbus+0x64>
 800b6a0:	78fb      	ldrb	r3, [r7, #3]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d106      	bne.n	800b6b4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	68fa      	ldr	r2, [r7, #12]
 800b6aa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b6ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b6b2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800b6b4:	2300      	movs	r3, #0
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3714      	adds	r7, #20
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c0:	4770      	bx	lr

0800b6c2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b6c2:	b480      	push	{r7}
 800b6c4:	b085      	sub	sp, #20
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	0c5b      	lsrs	r3, r3, #17
 800b6e0:	f003 0303 	and.w	r3, r3, #3
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3714      	adds	r7, #20
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ee:	4770      	bx	lr

0800b6f0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	b085      	sub	sp, #20
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b702:	689b      	ldr	r3, [r3, #8]
 800b704:	b29b      	uxth	r3, r3
}
 800b706:	4618      	mov	r0, r3
 800b708:	3714      	adds	r7, #20
 800b70a:	46bd      	mov	sp, r7
 800b70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b710:	4770      	bx	lr
	...

0800b714 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b088      	sub	sp, #32
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
 800b71c:	4608      	mov	r0, r1
 800b71e:	4611      	mov	r1, r2
 800b720:	461a      	mov	r2, r3
 800b722:	4603      	mov	r3, r0
 800b724:	70fb      	strb	r3, [r7, #3]
 800b726:	460b      	mov	r3, r1
 800b728:	70bb      	strb	r3, [r7, #2]
 800b72a:	4613      	mov	r3, r2
 800b72c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800b72e:	2300      	movs	r3, #0
 800b730:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800b736:	78fb      	ldrb	r3, [r7, #3]
 800b738:	015a      	lsls	r2, r3, #5
 800b73a:	693b      	ldr	r3, [r7, #16]
 800b73c:	4413      	add	r3, r2
 800b73e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b742:	461a      	mov	r2, r3
 800b744:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b748:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800b74a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b74e:	2b03      	cmp	r3, #3
 800b750:	d87e      	bhi.n	800b850 <USB_HC_Init+0x13c>
 800b752:	a201      	add	r2, pc, #4	; (adr r2, 800b758 <USB_HC_Init+0x44>)
 800b754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b758:	0800b769 	.word	0x0800b769
 800b75c:	0800b813 	.word	0x0800b813
 800b760:	0800b769 	.word	0x0800b769
 800b764:	0800b7d5 	.word	0x0800b7d5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b768:	78fb      	ldrb	r3, [r7, #3]
 800b76a:	015a      	lsls	r2, r3, #5
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	4413      	add	r3, r2
 800b770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b774:	461a      	mov	r2, r3
 800b776:	f240 439d 	movw	r3, #1181	; 0x49d
 800b77a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800b77c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b780:	2b00      	cmp	r3, #0
 800b782:	da10      	bge.n	800b7a6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b784:	78fb      	ldrb	r3, [r7, #3]
 800b786:	015a      	lsls	r2, r3, #5
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	4413      	add	r3, r2
 800b78c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b790:	68db      	ldr	r3, [r3, #12]
 800b792:	78fa      	ldrb	r2, [r7, #3]
 800b794:	0151      	lsls	r1, r2, #5
 800b796:	693a      	ldr	r2, [r7, #16]
 800b798:	440a      	add	r2, r1
 800b79a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b79e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b7a2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800b7a4:	e057      	b.n	800b856 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d051      	beq.n	800b856 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800b7b2:	78fb      	ldrb	r3, [r7, #3]
 800b7b4:	015a      	lsls	r2, r3, #5
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	4413      	add	r3, r2
 800b7ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b7be:	68db      	ldr	r3, [r3, #12]
 800b7c0:	78fa      	ldrb	r2, [r7, #3]
 800b7c2:	0151      	lsls	r1, r2, #5
 800b7c4:	693a      	ldr	r2, [r7, #16]
 800b7c6:	440a      	add	r2, r1
 800b7c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b7cc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800b7d0:	60d3      	str	r3, [r2, #12]
      break;
 800b7d2:	e040      	b.n	800b856 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b7d4:	78fb      	ldrb	r3, [r7, #3]
 800b7d6:	015a      	lsls	r2, r3, #5
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	4413      	add	r3, r2
 800b7dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b7e0:	461a      	mov	r2, r3
 800b7e2:	f240 639d 	movw	r3, #1693	; 0x69d
 800b7e6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b7e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	da34      	bge.n	800b85a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b7f0:	78fb      	ldrb	r3, [r7, #3]
 800b7f2:	015a      	lsls	r2, r3, #5
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	4413      	add	r3, r2
 800b7f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b7fc:	68db      	ldr	r3, [r3, #12]
 800b7fe:	78fa      	ldrb	r2, [r7, #3]
 800b800:	0151      	lsls	r1, r2, #5
 800b802:	693a      	ldr	r2, [r7, #16]
 800b804:	440a      	add	r2, r1
 800b806:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b80a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b80e:	60d3      	str	r3, [r2, #12]
      }

      break;
 800b810:	e023      	b.n	800b85a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b812:	78fb      	ldrb	r3, [r7, #3]
 800b814:	015a      	lsls	r2, r3, #5
 800b816:	693b      	ldr	r3, [r7, #16]
 800b818:	4413      	add	r3, r2
 800b81a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b81e:	461a      	mov	r2, r3
 800b820:	f240 2325 	movw	r3, #549	; 0x225
 800b824:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b826:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	da17      	bge.n	800b85e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800b82e:	78fb      	ldrb	r3, [r7, #3]
 800b830:	015a      	lsls	r2, r3, #5
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	4413      	add	r3, r2
 800b836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b83a:	68db      	ldr	r3, [r3, #12]
 800b83c:	78fa      	ldrb	r2, [r7, #3]
 800b83e:	0151      	lsls	r1, r2, #5
 800b840:	693a      	ldr	r2, [r7, #16]
 800b842:	440a      	add	r2, r1
 800b844:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b848:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800b84c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800b84e:	e006      	b.n	800b85e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800b850:	2301      	movs	r3, #1
 800b852:	77fb      	strb	r3, [r7, #31]
      break;
 800b854:	e004      	b.n	800b860 <USB_HC_Init+0x14c>
      break;
 800b856:	bf00      	nop
 800b858:	e002      	b.n	800b860 <USB_HC_Init+0x14c>
      break;
 800b85a:	bf00      	nop
 800b85c:	e000      	b.n	800b860 <USB_HC_Init+0x14c>
      break;
 800b85e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800b860:	78fb      	ldrb	r3, [r7, #3]
 800b862:	015a      	lsls	r2, r3, #5
 800b864:	693b      	ldr	r3, [r7, #16]
 800b866:	4413      	add	r3, r2
 800b868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b86c:	68db      	ldr	r3, [r3, #12]
 800b86e:	78fa      	ldrb	r2, [r7, #3]
 800b870:	0151      	lsls	r1, r2, #5
 800b872:	693a      	ldr	r2, [r7, #16]
 800b874:	440a      	add	r2, r1
 800b876:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b87a:	f043 0302 	orr.w	r3, r3, #2
 800b87e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b886:	699a      	ldr	r2, [r3, #24]
 800b888:	78fb      	ldrb	r3, [r7, #3]
 800b88a:	f003 030f 	and.w	r3, r3, #15
 800b88e:	2101      	movs	r1, #1
 800b890:	fa01 f303 	lsl.w	r3, r1, r3
 800b894:	6939      	ldr	r1, [r7, #16]
 800b896:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b89a:	4313      	orrs	r3, r2
 800b89c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	699b      	ldr	r3, [r3, #24]
 800b8a2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800b8aa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	da03      	bge.n	800b8ba <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800b8b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b8b6:	61bb      	str	r3, [r7, #24]
 800b8b8:	e001      	b.n	800b8be <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f7ff feff 	bl	800b6c2 <USB_GetHostSpeed>
 800b8c4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800b8c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b8ca:	2b02      	cmp	r3, #2
 800b8cc:	d106      	bne.n	800b8dc <USB_HC_Init+0x1c8>
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	2b02      	cmp	r3, #2
 800b8d2:	d003      	beq.n	800b8dc <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800b8d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b8d8:	617b      	str	r3, [r7, #20]
 800b8da:	e001      	b.n	800b8e0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b8e0:	787b      	ldrb	r3, [r7, #1]
 800b8e2:	059b      	lsls	r3, r3, #22
 800b8e4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b8e8:	78bb      	ldrb	r3, [r7, #2]
 800b8ea:	02db      	lsls	r3, r3, #11
 800b8ec:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b8f0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b8f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b8f6:	049b      	lsls	r3, r3, #18
 800b8f8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b8fc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b8fe:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b900:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b904:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b906:	69bb      	ldr	r3, [r7, #24]
 800b908:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b90a:	78fb      	ldrb	r3, [r7, #3]
 800b90c:	0159      	lsls	r1, r3, #5
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	440b      	add	r3, r1
 800b912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b916:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b91c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800b91e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b922:	2b03      	cmp	r3, #3
 800b924:	d003      	beq.n	800b92e <USB_HC_Init+0x21a>
 800b926:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b92a:	2b01      	cmp	r3, #1
 800b92c:	d10f      	bne.n	800b94e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800b92e:	78fb      	ldrb	r3, [r7, #3]
 800b930:	015a      	lsls	r2, r3, #5
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	4413      	add	r3, r2
 800b936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	78fa      	ldrb	r2, [r7, #3]
 800b93e:	0151      	lsls	r1, r2, #5
 800b940:	693a      	ldr	r2, [r7, #16]
 800b942:	440a      	add	r2, r1
 800b944:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b948:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b94c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800b94e:	7ffb      	ldrb	r3, [r7, #31]
}
 800b950:	4618      	mov	r0, r3
 800b952:	3720      	adds	r7, #32
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}

0800b958 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b08c      	sub	sp, #48	; 0x30
 800b95c:	af02      	add	r7, sp, #8
 800b95e:	60f8      	str	r0, [r7, #12]
 800b960:	60b9      	str	r1, [r7, #8]
 800b962:	4613      	mov	r3, r2
 800b964:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	785b      	ldrb	r3, [r3, #1]
 800b96e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800b970:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b974:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b97a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d02d      	beq.n	800b9de <USB_HC_StartXfer+0x86>
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	791b      	ldrb	r3, [r3, #4]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d129      	bne.n	800b9de <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800b98a:	79fb      	ldrb	r3, [r7, #7]
 800b98c:	2b01      	cmp	r3, #1
 800b98e:	d117      	bne.n	800b9c0 <USB_HC_StartXfer+0x68>
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	79db      	ldrb	r3, [r3, #7]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d003      	beq.n	800b9a0 <USB_HC_StartXfer+0x48>
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	79db      	ldrb	r3, [r3, #7]
 800b99c:	2b02      	cmp	r3, #2
 800b99e:	d10f      	bne.n	800b9c0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800b9a0:	69fb      	ldr	r3, [r7, #28]
 800b9a2:	015a      	lsls	r2, r3, #5
 800b9a4:	6a3b      	ldr	r3, [r7, #32]
 800b9a6:	4413      	add	r3, r2
 800b9a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b9ac:	68db      	ldr	r3, [r3, #12]
 800b9ae:	69fa      	ldr	r2, [r7, #28]
 800b9b0:	0151      	lsls	r1, r2, #5
 800b9b2:	6a3a      	ldr	r2, [r7, #32]
 800b9b4:	440a      	add	r2, r1
 800b9b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b9ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9be:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800b9c0:	79fb      	ldrb	r3, [r7, #7]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d10b      	bne.n	800b9de <USB_HC_StartXfer+0x86>
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	795b      	ldrb	r3, [r3, #5]
 800b9ca:	2b01      	cmp	r3, #1
 800b9cc:	d107      	bne.n	800b9de <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	785b      	ldrb	r3, [r3, #1]
 800b9d2:	4619      	mov	r1, r3
 800b9d4:	68f8      	ldr	r0, [r7, #12]
 800b9d6:	f000 fa0f 	bl	800bdf8 <USB_DoPing>
      return HAL_OK;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	e0f8      	b.n	800bbd0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	695b      	ldr	r3, [r3, #20]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d018      	beq.n	800ba18 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	695b      	ldr	r3, [r3, #20]
 800b9ea:	68ba      	ldr	r2, [r7, #8]
 800b9ec:	8912      	ldrh	r2, [r2, #8]
 800b9ee:	4413      	add	r3, r2
 800b9f0:	3b01      	subs	r3, #1
 800b9f2:	68ba      	ldr	r2, [r7, #8]
 800b9f4:	8912      	ldrh	r2, [r2, #8]
 800b9f6:	fbb3 f3f2 	udiv	r3, r3, r2
 800b9fa:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800b9fc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b9fe:	8b7b      	ldrh	r3, [r7, #26]
 800ba00:	429a      	cmp	r2, r3
 800ba02:	d90b      	bls.n	800ba1c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800ba04:	8b7b      	ldrh	r3, [r7, #26]
 800ba06:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800ba08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ba0a:	68ba      	ldr	r2, [r7, #8]
 800ba0c:	8912      	ldrh	r2, [r2, #8]
 800ba0e:	fb03 f202 	mul.w	r2, r3, r2
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	611a      	str	r2, [r3, #16]
 800ba16:	e001      	b.n	800ba1c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800ba18:	2301      	movs	r3, #1
 800ba1a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	78db      	ldrb	r3, [r3, #3]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d007      	beq.n	800ba34 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800ba24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ba26:	68ba      	ldr	r2, [r7, #8]
 800ba28:	8912      	ldrh	r2, [r2, #8]
 800ba2a:	fb03 f202 	mul.w	r2, r3, r2
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	611a      	str	r2, [r3, #16]
 800ba32:	e003      	b.n	800ba3c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	695a      	ldr	r2, [r3, #20]
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	691b      	ldr	r3, [r3, #16]
 800ba40:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ba44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ba46:	04d9      	lsls	r1, r3, #19
 800ba48:	4b63      	ldr	r3, [pc, #396]	; (800bbd8 <USB_HC_StartXfer+0x280>)
 800ba4a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800ba4c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	7a9b      	ldrb	r3, [r3, #10]
 800ba52:	075b      	lsls	r3, r3, #29
 800ba54:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800ba58:	69f9      	ldr	r1, [r7, #28]
 800ba5a:	0148      	lsls	r0, r1, #5
 800ba5c:	6a39      	ldr	r1, [r7, #32]
 800ba5e:	4401      	add	r1, r0
 800ba60:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ba64:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800ba66:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800ba68:	79fb      	ldrb	r3, [r7, #7]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d009      	beq.n	800ba82 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	68d9      	ldr	r1, [r3, #12]
 800ba72:	69fb      	ldr	r3, [r7, #28]
 800ba74:	015a      	lsls	r2, r3, #5
 800ba76:	6a3b      	ldr	r3, [r7, #32]
 800ba78:	4413      	add	r3, r2
 800ba7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba7e:	460a      	mov	r2, r1
 800ba80:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800ba82:	6a3b      	ldr	r3, [r7, #32]
 800ba84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ba88:	689b      	ldr	r3, [r3, #8]
 800ba8a:	f003 0301 	and.w	r3, r3, #1
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	bf0c      	ite	eq
 800ba92:	2301      	moveq	r3, #1
 800ba94:	2300      	movne	r3, #0
 800ba96:	b2db      	uxtb	r3, r3
 800ba98:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800ba9a:	69fb      	ldr	r3, [r7, #28]
 800ba9c:	015a      	lsls	r2, r3, #5
 800ba9e:	6a3b      	ldr	r3, [r7, #32]
 800baa0:	4413      	add	r3, r2
 800baa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	69fa      	ldr	r2, [r7, #28]
 800baaa:	0151      	lsls	r1, r2, #5
 800baac:	6a3a      	ldr	r2, [r7, #32]
 800baae:	440a      	add	r2, r1
 800bab0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bab4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bab8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800baba:	69fb      	ldr	r3, [r7, #28]
 800babc:	015a      	lsls	r2, r3, #5
 800babe:	6a3b      	ldr	r3, [r7, #32]
 800bac0:	4413      	add	r3, r2
 800bac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bac6:	681a      	ldr	r2, [r3, #0]
 800bac8:	7e7b      	ldrb	r3, [r7, #25]
 800baca:	075b      	lsls	r3, r3, #29
 800bacc:	69f9      	ldr	r1, [r7, #28]
 800bace:	0148      	lsls	r0, r1, #5
 800bad0:	6a39      	ldr	r1, [r7, #32]
 800bad2:	4401      	add	r1, r0
 800bad4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800bad8:	4313      	orrs	r3, r2
 800bada:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800badc:	69fb      	ldr	r3, [r7, #28]
 800bade:	015a      	lsls	r2, r3, #5
 800bae0:	6a3b      	ldr	r3, [r7, #32]
 800bae2:	4413      	add	r3, r2
 800bae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800baec:	693b      	ldr	r3, [r7, #16]
 800baee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800baf2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	78db      	ldrb	r3, [r3, #3]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d004      	beq.n	800bb06 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb02:	613b      	str	r3, [r7, #16]
 800bb04:	e003      	b.n	800bb0e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800bb06:	693b      	ldr	r3, [r7, #16]
 800bb08:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bb0c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bb14:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800bb16:	69fb      	ldr	r3, [r7, #28]
 800bb18:	015a      	lsls	r2, r3, #5
 800bb1a:	6a3b      	ldr	r3, [r7, #32]
 800bb1c:	4413      	add	r3, r2
 800bb1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb22:	461a      	mov	r2, r3
 800bb24:	693b      	ldr	r3, [r7, #16]
 800bb26:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800bb28:	79fb      	ldrb	r3, [r7, #7]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d001      	beq.n	800bb32 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	e04e      	b.n	800bbd0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	78db      	ldrb	r3, [r3, #3]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d149      	bne.n	800bbce <USB_HC_StartXfer+0x276>
 800bb3a:	68bb      	ldr	r3, [r7, #8]
 800bb3c:	695b      	ldr	r3, [r3, #20]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d045      	beq.n	800bbce <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	79db      	ldrb	r3, [r3, #7]
 800bb46:	2b03      	cmp	r3, #3
 800bb48:	d830      	bhi.n	800bbac <USB_HC_StartXfer+0x254>
 800bb4a:	a201      	add	r2, pc, #4	; (adr r2, 800bb50 <USB_HC_StartXfer+0x1f8>)
 800bb4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb50:	0800bb61 	.word	0x0800bb61
 800bb54:	0800bb85 	.word	0x0800bb85
 800bb58:	0800bb61 	.word	0x0800bb61
 800bb5c:	0800bb85 	.word	0x0800bb85
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	695b      	ldr	r3, [r3, #20]
 800bb64:	3303      	adds	r3, #3
 800bb66:	089b      	lsrs	r3, r3, #2
 800bb68:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800bb6a:	8afa      	ldrh	r2, [r7, #22]
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb70:	b29b      	uxth	r3, r3
 800bb72:	429a      	cmp	r2, r3
 800bb74:	d91c      	bls.n	800bbb0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	699b      	ldr	r3, [r3, #24]
 800bb7a:	f043 0220 	orr.w	r2, r3, #32
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	619a      	str	r2, [r3, #24]
        }
        break;
 800bb82:	e015      	b.n	800bbb0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	695b      	ldr	r3, [r3, #20]
 800bb88:	3303      	adds	r3, #3
 800bb8a:	089b      	lsrs	r3, r3, #2
 800bb8c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800bb8e:	8afa      	ldrh	r2, [r7, #22]
 800bb90:	6a3b      	ldr	r3, [r7, #32]
 800bb92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bb96:	691b      	ldr	r3, [r3, #16]
 800bb98:	b29b      	uxth	r3, r3
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d90a      	bls.n	800bbb4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	699b      	ldr	r3, [r3, #24]
 800bba2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	619a      	str	r2, [r3, #24]
        }
        break;
 800bbaa:	e003      	b.n	800bbb4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800bbac:	bf00      	nop
 800bbae:	e002      	b.n	800bbb6 <USB_HC_StartXfer+0x25e>
        break;
 800bbb0:	bf00      	nop
 800bbb2:	e000      	b.n	800bbb6 <USB_HC_StartXfer+0x25e>
        break;
 800bbb4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	68d9      	ldr	r1, [r3, #12]
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	785a      	ldrb	r2, [r3, #1]
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	695b      	ldr	r3, [r3, #20]
 800bbc2:	b29b      	uxth	r3, r3
 800bbc4:	2000      	movs	r0, #0
 800bbc6:	9000      	str	r0, [sp, #0]
 800bbc8:	68f8      	ldr	r0, [r7, #12]
 800bbca:	f7ff fb37 	bl	800b23c <USB_WritePacket>
  }

  return HAL_OK;
 800bbce:	2300      	movs	r3, #0
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3728      	adds	r7, #40	; 0x28
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}
 800bbd8:	1ff80000 	.word	0x1ff80000

0800bbdc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bbdc:	b480      	push	{r7}
 800bbde:	b085      	sub	sp, #20
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bbee:	695b      	ldr	r3, [r3, #20]
 800bbf0:	b29b      	uxth	r3, r3
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3714      	adds	r7, #20
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfc:	4770      	bx	lr

0800bbfe <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800bbfe:	b480      	push	{r7}
 800bc00:	b089      	sub	sp, #36	; 0x24
 800bc02:	af00      	add	r7, sp, #0
 800bc04:	6078      	str	r0, [r7, #4]
 800bc06:	460b      	mov	r3, r1
 800bc08:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800bc0e:	78fb      	ldrb	r3, [r7, #3]
 800bc10:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800bc12:	2300      	movs	r3, #0
 800bc14:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800bc16:	69bb      	ldr	r3, [r7, #24]
 800bc18:	015a      	lsls	r2, r3, #5
 800bc1a:	69fb      	ldr	r3, [r7, #28]
 800bc1c:	4413      	add	r3, r2
 800bc1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	0c9b      	lsrs	r3, r3, #18
 800bc26:	f003 0303 	and.w	r3, r3, #3
 800bc2a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800bc2c:	69bb      	ldr	r3, [r7, #24]
 800bc2e:	015a      	lsls	r2, r3, #5
 800bc30:	69fb      	ldr	r3, [r7, #28]
 800bc32:	4413      	add	r3, r2
 800bc34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	0fdb      	lsrs	r3, r3, #31
 800bc3c:	f003 0301 	and.w	r3, r3, #1
 800bc40:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	689b      	ldr	r3, [r3, #8]
 800bc46:	f003 0320 	and.w	r3, r3, #32
 800bc4a:	2b20      	cmp	r3, #32
 800bc4c:	d104      	bne.n	800bc58 <USB_HC_Halt+0x5a>
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d101      	bne.n	800bc58 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800bc54:	2300      	movs	r3, #0
 800bc56:	e0c8      	b.n	800bdea <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d002      	beq.n	800bc64 <USB_HC_Halt+0x66>
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	2b02      	cmp	r3, #2
 800bc62:	d163      	bne.n	800bd2c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800bc64:	69bb      	ldr	r3, [r7, #24]
 800bc66:	015a      	lsls	r2, r3, #5
 800bc68:	69fb      	ldr	r3, [r7, #28]
 800bc6a:	4413      	add	r3, r2
 800bc6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	69ba      	ldr	r2, [r7, #24]
 800bc74:	0151      	lsls	r1, r2, #5
 800bc76:	69fa      	ldr	r2, [r7, #28]
 800bc78:	440a      	add	r2, r1
 800bc7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bc7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bc82:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	689b      	ldr	r3, [r3, #8]
 800bc88:	f003 0320 	and.w	r3, r3, #32
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	f040 80ab 	bne.w	800bde8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc96:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d133      	bne.n	800bd06 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800bc9e:	69bb      	ldr	r3, [r7, #24]
 800bca0:	015a      	lsls	r2, r3, #5
 800bca2:	69fb      	ldr	r3, [r7, #28]
 800bca4:	4413      	add	r3, r2
 800bca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	69ba      	ldr	r2, [r7, #24]
 800bcae:	0151      	lsls	r1, r2, #5
 800bcb0:	69fa      	ldr	r2, [r7, #28]
 800bcb2:	440a      	add	r2, r1
 800bcb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bcb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bcbc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bcbe:	69bb      	ldr	r3, [r7, #24]
 800bcc0:	015a      	lsls	r2, r3, #5
 800bcc2:	69fb      	ldr	r3, [r7, #28]
 800bcc4:	4413      	add	r3, r2
 800bcc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	69ba      	ldr	r2, [r7, #24]
 800bcce:	0151      	lsls	r1, r2, #5
 800bcd0:	69fa      	ldr	r2, [r7, #28]
 800bcd2:	440a      	add	r2, r1
 800bcd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bcd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bcdc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	3301      	adds	r3, #1
 800bce2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bcea:	d81d      	bhi.n	800bd28 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bcec:	69bb      	ldr	r3, [r7, #24]
 800bcee:	015a      	lsls	r2, r3, #5
 800bcf0:	69fb      	ldr	r3, [r7, #28]
 800bcf2:	4413      	add	r3, r2
 800bcf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bcfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bd02:	d0ec      	beq.n	800bcde <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bd04:	e070      	b.n	800bde8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bd06:	69bb      	ldr	r3, [r7, #24]
 800bd08:	015a      	lsls	r2, r3, #5
 800bd0a:	69fb      	ldr	r3, [r7, #28]
 800bd0c:	4413      	add	r3, r2
 800bd0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	69ba      	ldr	r2, [r7, #24]
 800bd16:	0151      	lsls	r1, r2, #5
 800bd18:	69fa      	ldr	r2, [r7, #28]
 800bd1a:	440a      	add	r2, r1
 800bd1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bd20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bd24:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bd26:	e05f      	b.n	800bde8 <USB_HC_Halt+0x1ea>
            break;
 800bd28:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bd2a:	e05d      	b.n	800bde8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800bd2c:	69bb      	ldr	r3, [r7, #24]
 800bd2e:	015a      	lsls	r2, r3, #5
 800bd30:	69fb      	ldr	r3, [r7, #28]
 800bd32:	4413      	add	r3, r2
 800bd34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	69ba      	ldr	r2, [r7, #24]
 800bd3c:	0151      	lsls	r1, r2, #5
 800bd3e:	69fa      	ldr	r2, [r7, #28]
 800bd40:	440a      	add	r2, r1
 800bd42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bd46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bd4a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800bd4c:	69fb      	ldr	r3, [r7, #28]
 800bd4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bd52:	691b      	ldr	r3, [r3, #16]
 800bd54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d133      	bne.n	800bdc4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800bd5c:	69bb      	ldr	r3, [r7, #24]
 800bd5e:	015a      	lsls	r2, r3, #5
 800bd60:	69fb      	ldr	r3, [r7, #28]
 800bd62:	4413      	add	r3, r2
 800bd64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	69ba      	ldr	r2, [r7, #24]
 800bd6c:	0151      	lsls	r1, r2, #5
 800bd6e:	69fa      	ldr	r2, [r7, #28]
 800bd70:	440a      	add	r2, r1
 800bd72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bd76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bd7a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bd7c:	69bb      	ldr	r3, [r7, #24]
 800bd7e:	015a      	lsls	r2, r3, #5
 800bd80:	69fb      	ldr	r3, [r7, #28]
 800bd82:	4413      	add	r3, r2
 800bd84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	69ba      	ldr	r2, [r7, #24]
 800bd8c:	0151      	lsls	r1, r2, #5
 800bd8e:	69fa      	ldr	r2, [r7, #28]
 800bd90:	440a      	add	r2, r1
 800bd92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bd96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bd9a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	3301      	adds	r3, #1
 800bda0:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bda8:	d81d      	bhi.n	800bde6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bdaa:	69bb      	ldr	r3, [r7, #24]
 800bdac:	015a      	lsls	r2, r3, #5
 800bdae:	69fb      	ldr	r3, [r7, #28]
 800bdb0:	4413      	add	r3, r2
 800bdb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bdbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bdc0:	d0ec      	beq.n	800bd9c <USB_HC_Halt+0x19e>
 800bdc2:	e011      	b.n	800bde8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bdc4:	69bb      	ldr	r3, [r7, #24]
 800bdc6:	015a      	lsls	r2, r3, #5
 800bdc8:	69fb      	ldr	r3, [r7, #28]
 800bdca:	4413      	add	r3, r2
 800bdcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	69ba      	ldr	r2, [r7, #24]
 800bdd4:	0151      	lsls	r1, r2, #5
 800bdd6:	69fa      	ldr	r2, [r7, #28]
 800bdd8:	440a      	add	r2, r1
 800bdda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bdde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bde2:	6013      	str	r3, [r2, #0]
 800bde4:	e000      	b.n	800bde8 <USB_HC_Halt+0x1ea>
          break;
 800bde6:	bf00      	nop
    }
  }

  return HAL_OK;
 800bde8:	2300      	movs	r3, #0
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3724      	adds	r7, #36	; 0x24
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf4:	4770      	bx	lr
	...

0800bdf8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b087      	sub	sp, #28
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
 800be00:	460b      	mov	r3, r1
 800be02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800be08:	78fb      	ldrb	r3, [r7, #3]
 800be0a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800be0c:	2301      	movs	r3, #1
 800be0e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	04da      	lsls	r2, r3, #19
 800be14:	4b15      	ldr	r3, [pc, #84]	; (800be6c <USB_DoPing+0x74>)
 800be16:	4013      	ands	r3, r2
 800be18:	693a      	ldr	r2, [r7, #16]
 800be1a:	0151      	lsls	r1, r2, #5
 800be1c:	697a      	ldr	r2, [r7, #20]
 800be1e:	440a      	add	r2, r1
 800be20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800be24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800be28:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	015a      	lsls	r2, r3, #5
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	4413      	add	r3, r2
 800be32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800be40:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800be48:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	015a      	lsls	r2, r3, #5
 800be4e:	697b      	ldr	r3, [r7, #20]
 800be50:	4413      	add	r3, r2
 800be52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be56:	461a      	mov	r2, r3
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800be5c:	2300      	movs	r3, #0
}
 800be5e:	4618      	mov	r0, r3
 800be60:	371c      	adds	r7, #28
 800be62:	46bd      	mov	sp, r7
 800be64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be68:	4770      	bx	lr
 800be6a:	bf00      	nop
 800be6c:	1ff80000 	.word	0x1ff80000

0800be70 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b088      	sub	sp, #32
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800be78:	2300      	movs	r3, #0
 800be7a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800be80:	2300      	movs	r3, #0
 800be82:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f7ff f918 	bl	800b0ba <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800be8a:	2110      	movs	r1, #16
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f7ff f971 	bl	800b174 <USB_FlushTxFifo>
 800be92:	4603      	mov	r3, r0
 800be94:	2b00      	cmp	r3, #0
 800be96:	d001      	beq.n	800be9c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800be98:	2301      	movs	r3, #1
 800be9a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f7ff f99d 	bl	800b1dc <USB_FlushRxFifo>
 800bea2:	4603      	mov	r3, r0
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d001      	beq.n	800beac <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800bea8:	2301      	movs	r3, #1
 800beaa:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800beac:	2300      	movs	r3, #0
 800beae:	61bb      	str	r3, [r7, #24]
 800beb0:	e01f      	b.n	800bef2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800beb2:	69bb      	ldr	r3, [r7, #24]
 800beb4:	015a      	lsls	r2, r3, #5
 800beb6:	697b      	ldr	r3, [r7, #20]
 800beb8:	4413      	add	r3, r2
 800beba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800bec2:	693b      	ldr	r3, [r7, #16]
 800bec4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bec8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800beca:	693b      	ldr	r3, [r7, #16]
 800becc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bed0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800bed2:	693b      	ldr	r3, [r7, #16]
 800bed4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bed8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800beda:	69bb      	ldr	r3, [r7, #24]
 800bedc:	015a      	lsls	r2, r3, #5
 800bede:	697b      	ldr	r3, [r7, #20]
 800bee0:	4413      	add	r3, r2
 800bee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bee6:	461a      	mov	r2, r3
 800bee8:	693b      	ldr	r3, [r7, #16]
 800beea:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800beec:	69bb      	ldr	r3, [r7, #24]
 800beee:	3301      	adds	r3, #1
 800bef0:	61bb      	str	r3, [r7, #24]
 800bef2:	69bb      	ldr	r3, [r7, #24]
 800bef4:	2b0f      	cmp	r3, #15
 800bef6:	d9dc      	bls.n	800beb2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800bef8:	2300      	movs	r3, #0
 800befa:	61bb      	str	r3, [r7, #24]
 800befc:	e034      	b.n	800bf68 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800befe:	69bb      	ldr	r3, [r7, #24]
 800bf00:	015a      	lsls	r2, r3, #5
 800bf02:	697b      	ldr	r3, [r7, #20]
 800bf04:	4413      	add	r3, r2
 800bf06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800bf0e:	693b      	ldr	r3, [r7, #16]
 800bf10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bf14:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800bf16:	693b      	ldr	r3, [r7, #16]
 800bf18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bf1c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800bf1e:	693b      	ldr	r3, [r7, #16]
 800bf20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bf24:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800bf26:	69bb      	ldr	r3, [r7, #24]
 800bf28:	015a      	lsls	r2, r3, #5
 800bf2a:	697b      	ldr	r3, [r7, #20]
 800bf2c:	4413      	add	r3, r2
 800bf2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf32:	461a      	mov	r2, r3
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	3301      	adds	r3, #1
 800bf3c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bf44:	d80c      	bhi.n	800bf60 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bf46:	69bb      	ldr	r3, [r7, #24]
 800bf48:	015a      	lsls	r2, r3, #5
 800bf4a:	697b      	ldr	r3, [r7, #20]
 800bf4c:	4413      	add	r3, r2
 800bf4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bf58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bf5c:	d0ec      	beq.n	800bf38 <USB_StopHost+0xc8>
 800bf5e:	e000      	b.n	800bf62 <USB_StopHost+0xf2>
        break;
 800bf60:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800bf62:	69bb      	ldr	r3, [r7, #24]
 800bf64:	3301      	adds	r3, #1
 800bf66:	61bb      	str	r3, [r7, #24]
 800bf68:	69bb      	ldr	r3, [r7, #24]
 800bf6a:	2b0f      	cmp	r3, #15
 800bf6c:	d9c7      	bls.n	800befe <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bf74:	461a      	mov	r2, r3
 800bf76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf7a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bf82:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f7ff f887 	bl	800b098 <USB_EnableGlobalInt>

  return ret;
 800bf8a:	7ffb      	ldrb	r3, [r7, #31]
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3720      	adds	r7, #32
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}

0800bf94 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800bf98:	4904      	ldr	r1, [pc, #16]	; (800bfac <MX_FATFS_Init+0x18>)
 800bf9a:	4805      	ldr	r0, [pc, #20]	; (800bfb0 <MX_FATFS_Init+0x1c>)
 800bf9c:	f003 fc5e 	bl	800f85c <FATFS_LinkDriver>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	461a      	mov	r2, r3
 800bfa4:	4b03      	ldr	r3, [pc, #12]	; (800bfb4 <MX_FATFS_Init+0x20>)
 800bfa6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800bfa8:	bf00      	nop
 800bfaa:	bd80      	pop	{r7, pc}
 800bfac:	24000a10 	.word	0x24000a10
 800bfb0:	08014024 	.word	0x08014024
 800bfb4:	24000a0c 	.word	0x24000a0c

0800bfb8 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800bfb8:	b480      	push	{r7}
 800bfba:	b083      	sub	sp, #12
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800bfc2:	2300      	movs	r3, #0
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	370c      	adds	r7, #12
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfce:	4770      	bx	lr

0800bfd0 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b084      	sub	sp, #16
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800bfda:	2301      	movs	r3, #1
 800bfdc:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800bfde:	79fb      	ldrb	r3, [r7, #7]
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	4808      	ldr	r0, [pc, #32]	; (800c004 <USBH_status+0x34>)
 800bfe4:	f000 fe73 	bl	800ccce <USBH_MSC_UnitIsReady>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d002      	beq.n	800bff4 <USBH_status+0x24>
  {
    res = RES_OK;
 800bfee:	2300      	movs	r3, #0
 800bff0:	73fb      	strb	r3, [r7, #15]
 800bff2:	e001      	b.n	800bff8 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800bff4:	2301      	movs	r3, #1
 800bff6:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800bff8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3710      	adds	r7, #16
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}
 800c002:	bf00      	nop
 800c004:	240048d8 	.word	0x240048d8

0800c008 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b094      	sub	sp, #80	; 0x50
 800c00c:	af02      	add	r7, sp, #8
 800c00e:	60b9      	str	r1, [r7, #8]
 800c010:	607a      	str	r2, [r7, #4]
 800c012:	603b      	str	r3, [r7, #0]
 800c014:	4603      	mov	r3, r0
 800c016:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c018:	2301      	movs	r3, #1
 800c01a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800c01e:	7bf9      	ldrb	r1, [r7, #15]
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	9300      	str	r3, [sp, #0]
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	687a      	ldr	r2, [r7, #4]
 800c028:	4813      	ldr	r0, [pc, #76]	; (800c078 <USBH_read+0x70>)
 800c02a:	f000 fe9a 	bl	800cd62 <USBH_MSC_Read>
 800c02e:	4603      	mov	r3, r0
 800c030:	2b00      	cmp	r3, #0
 800c032:	d103      	bne.n	800c03c <USBH_read+0x34>
  {
    res = RES_OK;
 800c034:	2300      	movs	r3, #0
 800c036:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800c03a:	e017      	b.n	800c06c <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800c03c:	f107 0210 	add.w	r2, r7, #16
 800c040:	7bfb      	ldrb	r3, [r7, #15]
 800c042:	4619      	mov	r1, r3
 800c044:	480c      	ldr	r0, [pc, #48]	; (800c078 <USBH_read+0x70>)
 800c046:	f000 fe68 	bl	800cd1a <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800c04a:	7f7b      	ldrb	r3, [r7, #29]
 800c04c:	2b3a      	cmp	r3, #58	; 0x3a
 800c04e:	d005      	beq.n	800c05c <USBH_read+0x54>
 800c050:	2b3a      	cmp	r3, #58	; 0x3a
 800c052:	dc07      	bgt.n	800c064 <USBH_read+0x5c>
 800c054:	2b04      	cmp	r3, #4
 800c056:	d001      	beq.n	800c05c <USBH_read+0x54>
 800c058:	2b28      	cmp	r3, #40	; 0x28
 800c05a:	d103      	bne.n	800c064 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800c05c:	2303      	movs	r3, #3
 800c05e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800c062:	e003      	b.n	800c06c <USBH_read+0x64>

    default:
      res = RES_ERROR;
 800c064:	2301      	movs	r3, #1
 800c066:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800c06a:	bf00      	nop
    }
  }

  return res;
 800c06c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800c070:	4618      	mov	r0, r3
 800c072:	3748      	adds	r7, #72	; 0x48
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}
 800c078:	240048d8 	.word	0x240048d8

0800c07c <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b094      	sub	sp, #80	; 0x50
 800c080:	af02      	add	r7, sp, #8
 800c082:	60b9      	str	r1, [r7, #8]
 800c084:	607a      	str	r2, [r7, #4]
 800c086:	603b      	str	r3, [r7, #0]
 800c088:	4603      	mov	r3, r0
 800c08a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c08c:	2301      	movs	r3, #1
 800c08e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800c092:	7bf9      	ldrb	r1, [r7, #15]
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	9300      	str	r3, [sp, #0]
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	687a      	ldr	r2, [r7, #4]
 800c09c:	4817      	ldr	r0, [pc, #92]	; (800c0fc <USBH_write+0x80>)
 800c09e:	f000 fec9 	bl	800ce34 <USBH_MSC_Write>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d103      	bne.n	800c0b0 <USBH_write+0x34>
  {
    res = RES_OK;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800c0ae:	e01f      	b.n	800c0f0 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800c0b0:	f107 0210 	add.w	r2, r7, #16
 800c0b4:	7bfb      	ldrb	r3, [r7, #15]
 800c0b6:	4619      	mov	r1, r3
 800c0b8:	4810      	ldr	r0, [pc, #64]	; (800c0fc <USBH_write+0x80>)
 800c0ba:	f000 fe2e 	bl	800cd1a <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800c0be:	7f7b      	ldrb	r3, [r7, #29]
 800c0c0:	2b3a      	cmp	r3, #58	; 0x3a
 800c0c2:	d00d      	beq.n	800c0e0 <USBH_write+0x64>
 800c0c4:	2b3a      	cmp	r3, #58	; 0x3a
 800c0c6:	dc0f      	bgt.n	800c0e8 <USBH_write+0x6c>
 800c0c8:	2b28      	cmp	r3, #40	; 0x28
 800c0ca:	d009      	beq.n	800c0e0 <USBH_write+0x64>
 800c0cc:	2b28      	cmp	r3, #40	; 0x28
 800c0ce:	dc0b      	bgt.n	800c0e8 <USBH_write+0x6c>
 800c0d0:	2b04      	cmp	r3, #4
 800c0d2:	d005      	beq.n	800c0e0 <USBH_write+0x64>
 800c0d4:	2b27      	cmp	r3, #39	; 0x27
 800c0d6:	d107      	bne.n	800c0e8 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800c0d8:	2302      	movs	r3, #2
 800c0da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800c0de:	e007      	b.n	800c0f0 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 800c0e0:	2303      	movs	r3, #3
 800c0e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800c0e6:	e003      	b.n	800c0f0 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800c0ee:	bf00      	nop
    }
  }

  return res;
 800c0f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3748      	adds	r7, #72	; 0x48
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}
 800c0fc:	240048d8 	.word	0x240048d8

0800c100 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b090      	sub	sp, #64	; 0x40
 800c104:	af00      	add	r7, sp, #0
 800c106:	4603      	mov	r3, r0
 800c108:	603a      	str	r2, [r7, #0]
 800c10a:	71fb      	strb	r3, [r7, #7]
 800c10c:	460b      	mov	r3, r1
 800c10e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c110:	2301      	movs	r3, #1
 800c112:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800c116:	79bb      	ldrb	r3, [r7, #6]
 800c118:	2b03      	cmp	r3, #3
 800c11a:	d852      	bhi.n	800c1c2 <USBH_ioctl+0xc2>
 800c11c:	a201      	add	r2, pc, #4	; (adr r2, 800c124 <USBH_ioctl+0x24>)
 800c11e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c122:	bf00      	nop
 800c124:	0800c135 	.word	0x0800c135
 800c128:	0800c13d 	.word	0x0800c13d
 800c12c:	0800c167 	.word	0x0800c167
 800c130:	0800c193 	.word	0x0800c193
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800c134:	2300      	movs	r3, #0
 800c136:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800c13a:	e045      	b.n	800c1c8 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800c13c:	f107 0208 	add.w	r2, r7, #8
 800c140:	79fb      	ldrb	r3, [r7, #7]
 800c142:	4619      	mov	r1, r3
 800c144:	4823      	ldr	r0, [pc, #140]	; (800c1d4 <USBH_ioctl+0xd4>)
 800c146:	f000 fde8 	bl	800cd1a <USBH_MSC_GetLUNInfo>
 800c14a:	4603      	mov	r3, r0
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d106      	bne.n	800c15e <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800c150:	68fa      	ldr	r2, [r7, #12]
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800c156:	2300      	movs	r3, #0
 800c158:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800c15c:	e034      	b.n	800c1c8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800c15e:	2301      	movs	r3, #1
 800c160:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800c164:	e030      	b.n	800c1c8 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800c166:	f107 0208 	add.w	r2, r7, #8
 800c16a:	79fb      	ldrb	r3, [r7, #7]
 800c16c:	4619      	mov	r1, r3
 800c16e:	4819      	ldr	r0, [pc, #100]	; (800c1d4 <USBH_ioctl+0xd4>)
 800c170:	f000 fdd3 	bl	800cd1a <USBH_MSC_GetLUNInfo>
 800c174:	4603      	mov	r3, r0
 800c176:	2b00      	cmp	r3, #0
 800c178:	d107      	bne.n	800c18a <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800c17a:	8a3b      	ldrh	r3, [r7, #16]
 800c17c:	461a      	mov	r2, r3
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800c182:	2300      	movs	r3, #0
 800c184:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800c188:	e01e      	b.n	800c1c8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800c18a:	2301      	movs	r3, #1
 800c18c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800c190:	e01a      	b.n	800c1c8 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800c192:	f107 0208 	add.w	r2, r7, #8
 800c196:	79fb      	ldrb	r3, [r7, #7]
 800c198:	4619      	mov	r1, r3
 800c19a:	480e      	ldr	r0, [pc, #56]	; (800c1d4 <USBH_ioctl+0xd4>)
 800c19c:	f000 fdbd 	bl	800cd1a <USBH_MSC_GetLUNInfo>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d109      	bne.n	800c1ba <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800c1a6:	8a3b      	ldrh	r3, [r7, #16]
 800c1a8:	0a5b      	lsrs	r3, r3, #9
 800c1aa:	b29b      	uxth	r3, r3
 800c1ac:	461a      	mov	r2, r3
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800c1b8:	e006      	b.n	800c1c8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800c1c0:	e002      	b.n	800c1c8 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800c1c2:	2304      	movs	r3, #4
 800c1c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 800c1c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	3740      	adds	r7, #64	; 0x40
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	bd80      	pop	{r7, pc}
 800c1d4:	240048d8 	.word	0x240048d8

0800c1d8 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800c1d8:	b590      	push	{r4, r7, lr}
 800c1da:	b089      	sub	sp, #36	; 0x24
 800c1dc:	af04      	add	r7, sp, #16
 800c1de:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c1e6:	7919      	ldrb	r1, [r3, #4]
 800c1e8:	2350      	movs	r3, #80	; 0x50
 800c1ea:	2206      	movs	r2, #6
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f001 fd5f 	bl	800dcb0 <USBH_FindInterface>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800c1f6:	7bfb      	ldrb	r3, [r7, #15]
 800c1f8:	2bff      	cmp	r3, #255	; 0xff
 800c1fa:	d002      	beq.n	800c202 <USBH_MSC_InterfaceInit+0x2a>
 800c1fc:	7bfb      	ldrb	r3, [r7, #15]
 800c1fe:	2b01      	cmp	r3, #1
 800c200:	d901      	bls.n	800c206 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800c202:	2302      	movs	r3, #2
 800c204:	e106      	b.n	800c414 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 800c206:	7bfb      	ldrb	r3, [r7, #15]
 800c208:	4619      	mov	r1, r3
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	f001 fd34 	bl	800dc78 <USBH_SelectInterface>
 800c210:	4603      	mov	r3, r0
 800c212:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800c214:	7bbb      	ldrb	r3, [r7, #14]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d001      	beq.n	800c21e <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800c21a:	2302      	movs	r3, #2
 800c21c:	e0fa      	b.n	800c414 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800c224:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c228:	f006 fe0e 	bl	8012e48 <malloc>
 800c22c:	4603      	mov	r3, r0
 800c22e:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c236:	69db      	ldr	r3, [r3, #28]
 800c238:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d101      	bne.n	800c244 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800c240:	2302      	movs	r3, #2
 800c242:	e0e7      	b.n	800c414 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800c244:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c248:	2100      	movs	r1, #0
 800c24a:	68b8      	ldr	r0, [r7, #8]
 800c24c:	f006 fe1a 	bl	8012e84 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800c250:	7bfb      	ldrb	r3, [r7, #15]
 800c252:	687a      	ldr	r2, [r7, #4]
 800c254:	211a      	movs	r1, #26
 800c256:	fb01 f303 	mul.w	r3, r1, r3
 800c25a:	4413      	add	r3, r2
 800c25c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c260:	781b      	ldrb	r3, [r3, #0]
 800c262:	b25b      	sxtb	r3, r3
 800c264:	2b00      	cmp	r3, #0
 800c266:	da16      	bge.n	800c296 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800c268:	7bfb      	ldrb	r3, [r7, #15]
 800c26a:	687a      	ldr	r2, [r7, #4]
 800c26c:	211a      	movs	r1, #26
 800c26e:	fb01 f303 	mul.w	r3, r1, r3
 800c272:	4413      	add	r3, r2
 800c274:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c278:	781a      	ldrb	r2, [r3, #0]
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c27e:	7bfb      	ldrb	r3, [r7, #15]
 800c280:	687a      	ldr	r2, [r7, #4]
 800c282:	211a      	movs	r1, #26
 800c284:	fb01 f303 	mul.w	r3, r1, r3
 800c288:	4413      	add	r3, r2
 800c28a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800c28e:	881a      	ldrh	r2, [r3, #0]
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	815a      	strh	r2, [r3, #10]
 800c294:	e015      	b.n	800c2c2 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800c296:	7bfb      	ldrb	r3, [r7, #15]
 800c298:	687a      	ldr	r2, [r7, #4]
 800c29a:	211a      	movs	r1, #26
 800c29c:	fb01 f303 	mul.w	r3, r1, r3
 800c2a0:	4413      	add	r3, r2
 800c2a2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c2a6:	781a      	ldrb	r2, [r3, #0]
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c2ac:	7bfb      	ldrb	r3, [r7, #15]
 800c2ae:	687a      	ldr	r2, [r7, #4]
 800c2b0:	211a      	movs	r1, #26
 800c2b2:	fb01 f303 	mul.w	r3, r1, r3
 800c2b6:	4413      	add	r3, r2
 800c2b8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800c2bc:	881a      	ldrh	r2, [r3, #0]
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800c2c2:	7bfb      	ldrb	r3, [r7, #15]
 800c2c4:	687a      	ldr	r2, [r7, #4]
 800c2c6:	211a      	movs	r1, #26
 800c2c8:	fb01 f303 	mul.w	r3, r1, r3
 800c2cc:	4413      	add	r3, r2
 800c2ce:	f203 3356 	addw	r3, r3, #854	; 0x356
 800c2d2:	781b      	ldrb	r3, [r3, #0]
 800c2d4:	b25b      	sxtb	r3, r3
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	da16      	bge.n	800c308 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800c2da:	7bfb      	ldrb	r3, [r7, #15]
 800c2dc:	687a      	ldr	r2, [r7, #4]
 800c2de:	211a      	movs	r1, #26
 800c2e0:	fb01 f303 	mul.w	r3, r1, r3
 800c2e4:	4413      	add	r3, r2
 800c2e6:	f203 3356 	addw	r3, r3, #854	; 0x356
 800c2ea:	781a      	ldrb	r2, [r3, #0]
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c2f0:	7bfb      	ldrb	r3, [r7, #15]
 800c2f2:	687a      	ldr	r2, [r7, #4]
 800c2f4:	211a      	movs	r1, #26
 800c2f6:	fb01 f303 	mul.w	r3, r1, r3
 800c2fa:	4413      	add	r3, r2
 800c2fc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800c300:	881a      	ldrh	r2, [r3, #0]
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	815a      	strh	r2, [r3, #10]
 800c306:	e015      	b.n	800c334 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800c308:	7bfb      	ldrb	r3, [r7, #15]
 800c30a:	687a      	ldr	r2, [r7, #4]
 800c30c:	211a      	movs	r1, #26
 800c30e:	fb01 f303 	mul.w	r3, r1, r3
 800c312:	4413      	add	r3, r2
 800c314:	f203 3356 	addw	r3, r3, #854	; 0x356
 800c318:	781a      	ldrb	r2, [r3, #0]
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c31e:	7bfb      	ldrb	r3, [r7, #15]
 800c320:	687a      	ldr	r2, [r7, #4]
 800c322:	211a      	movs	r1, #26
 800c324:	fb01 f303 	mul.w	r3, r1, r3
 800c328:	4413      	add	r3, r2
 800c32a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800c32e:	881a      	ldrh	r2, [r3, #0]
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	2200      	movs	r2, #0
 800c338:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	2200      	movs	r2, #0
 800c33e:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800c340:	68bb      	ldr	r3, [r7, #8]
 800c342:	2200      	movs	r2, #0
 800c344:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800c346:	68bb      	ldr	r3, [r7, #8]
 800c348:	799b      	ldrb	r3, [r3, #6]
 800c34a:	4619      	mov	r1, r3
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f003 f9d6 	bl	800f6fe <USBH_AllocPipe>
 800c352:	4603      	mov	r3, r0
 800c354:	461a      	mov	r2, r3
 800c356:	68bb      	ldr	r3, [r7, #8]
 800c358:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	79db      	ldrb	r3, [r3, #7]
 800c35e:	4619      	mov	r1, r3
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f003 f9cc 	bl	800f6fe <USBH_AllocPipe>
 800c366:	4603      	mov	r3, r0
 800c368:	461a      	mov	r2, r3
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f000 fe04 	bl	800cf7c <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	799b      	ldrb	r3, [r3, #6]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d01e      	beq.n	800c3ba <USBH_MSC_InterfaceInit+0x1e2>
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	891b      	ldrh	r3, [r3, #8]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d01a      	beq.n	800c3ba <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	7959      	ldrb	r1, [r3, #5]
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	7998      	ldrb	r0, [r3, #6]
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c398:	68ba      	ldr	r2, [r7, #8]
 800c39a:	8912      	ldrh	r2, [r2, #8]
 800c39c:	9202      	str	r2, [sp, #8]
 800c39e:	2202      	movs	r2, #2
 800c3a0:	9201      	str	r2, [sp, #4]
 800c3a2:	9300      	str	r3, [sp, #0]
 800c3a4:	4623      	mov	r3, r4
 800c3a6:	4602      	mov	r2, r0
 800c3a8:	6878      	ldr	r0, [r7, #4]
 800c3aa:	f003 f979 	bl	800f6a0 <USBH_OpenPipe>
 800c3ae:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	79db      	ldrb	r3, [r3, #7]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d02c      	beq.n	800c412 <USBH_MSC_InterfaceInit+0x23a>
 800c3b8:	e001      	b.n	800c3be <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 800c3ba:	2303      	movs	r3, #3
 800c3bc:	e02a      	b.n	800c414 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	895b      	ldrh	r3, [r3, #10]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d025      	beq.n	800c412 <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	7919      	ldrb	r1, [r3, #4]
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	79d8      	ldrb	r0, [r3, #7]
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c3da:	68ba      	ldr	r2, [r7, #8]
 800c3dc:	8952      	ldrh	r2, [r2, #10]
 800c3de:	9202      	str	r2, [sp, #8]
 800c3e0:	2202      	movs	r2, #2
 800c3e2:	9201      	str	r2, [sp, #4]
 800c3e4:	9300      	str	r3, [sp, #0]
 800c3e6:	4623      	mov	r3, r4
 800c3e8:	4602      	mov	r2, r0
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	f003 f958 	bl	800f6a0 <USBH_OpenPipe>
 800c3f0:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800c3f2:	68bb      	ldr	r3, [r7, #8]
 800c3f4:	791b      	ldrb	r3, [r3, #4]
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	4619      	mov	r1, r3
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	f006 fc46 	bl	8012c8c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	795b      	ldrb	r3, [r3, #5]
 800c404:	2200      	movs	r2, #0
 800c406:	4619      	mov	r1, r3
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	f006 fc3f 	bl	8012c8c <USBH_LL_SetToggle>

  return USBH_OK;
 800c40e:	2300      	movs	r3, #0
 800c410:	e000      	b.n	800c414 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 800c412:	2303      	movs	r3, #3
}
 800c414:	4618      	mov	r0, r3
 800c416:	3714      	adds	r7, #20
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd90      	pop	{r4, r7, pc}

0800c41c <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b084      	sub	sp, #16
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c42a:	69db      	ldr	r3, [r3, #28]
 800c42c:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	795b      	ldrb	r3, [r3, #5]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d00e      	beq.n	800c454 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	795b      	ldrb	r3, [r3, #5]
 800c43a:	4619      	mov	r1, r3
 800c43c:	6878      	ldr	r0, [r7, #4]
 800c43e:	f003 f94e 	bl	800f6de <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	795b      	ldrb	r3, [r3, #5]
 800c446:	4619      	mov	r1, r3
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f003 f979 	bl	800f740 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	2200      	movs	r2, #0
 800c452:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	791b      	ldrb	r3, [r3, #4]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d00e      	beq.n	800c47a <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	791b      	ldrb	r3, [r3, #4]
 800c460:	4619      	mov	r1, r3
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f003 f93b 	bl	800f6de <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	791b      	ldrb	r3, [r3, #4]
 800c46c:	4619      	mov	r1, r3
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f003 f966 	bl	800f740 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	2200      	movs	r2, #0
 800c478:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c480:	69db      	ldr	r3, [r3, #28]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d00b      	beq.n	800c49e <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c48c:	69db      	ldr	r3, [r3, #28]
 800c48e:	4618      	mov	r0, r3
 800c490:	f006 fce2 	bl	8012e58 <free>
    phost->pActiveClass->pData = 0U;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c49a:	2200      	movs	r2, #0
 800c49c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800c49e:	2300      	movs	r3, #0
}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	3710      	adds	r7, #16
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd80      	pop	{r7, pc}

0800c4a8 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b084      	sub	sp, #16
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c4b6:	69db      	ldr	r3, [r3, #28]
 800c4b8:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	7b9b      	ldrb	r3, [r3, #14]
 800c4c2:	2b03      	cmp	r3, #3
 800c4c4:	d041      	beq.n	800c54a <USBH_MSC_ClassRequest+0xa2>
 800c4c6:	2b03      	cmp	r3, #3
 800c4c8:	dc4b      	bgt.n	800c562 <USBH_MSC_ClassRequest+0xba>
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d001      	beq.n	800c4d2 <USBH_MSC_ClassRequest+0x2a>
 800c4ce:	2b02      	cmp	r3, #2
 800c4d0:	d147      	bne.n	800c562 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	4619      	mov	r1, r3
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f000 fd32 	bl	800cf40 <USBH_MSC_BOT_REQ_GetMaxLUN>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800c4e0:	7bfb      	ldrb	r3, [r7, #15]
 800c4e2:	2b03      	cmp	r3, #3
 800c4e4:	d104      	bne.n	800c4f0 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800c4f0:	7bfb      	ldrb	r3, [r7, #15]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d137      	bne.n	800c566 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	781b      	ldrb	r3, [r3, #0]
 800c4fa:	2b02      	cmp	r3, #2
 800c4fc:	d804      	bhi.n	800c508 <USBH_MSC_ClassRequest+0x60>
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	3301      	adds	r3, #1
 800c504:	b2da      	uxtb	r2, r3
 800c506:	e000      	b.n	800c50a <USBH_MSC_ClassRequest+0x62>
 800c508:	2202      	movs	r2, #2
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800c50e:	2300      	movs	r3, #0
 800c510:	73bb      	strb	r3, [r7, #14]
 800c512:	e014      	b.n	800c53e <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800c514:	7bbb      	ldrb	r3, [r7, #14]
 800c516:	68ba      	ldr	r2, [r7, #8]
 800c518:	2134      	movs	r1, #52	; 0x34
 800c51a:	fb01 f303 	mul.w	r3, r1, r3
 800c51e:	4413      	add	r3, r2
 800c520:	3392      	adds	r3, #146	; 0x92
 800c522:	2202      	movs	r2, #2
 800c524:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800c526:	7bbb      	ldrb	r3, [r7, #14]
 800c528:	68ba      	ldr	r2, [r7, #8]
 800c52a:	2134      	movs	r1, #52	; 0x34
 800c52c:	fb01 f303 	mul.w	r3, r1, r3
 800c530:	4413      	add	r3, r2
 800c532:	33c1      	adds	r3, #193	; 0xc1
 800c534:	2200      	movs	r2, #0
 800c536:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800c538:	7bbb      	ldrb	r3, [r7, #14]
 800c53a:	3301      	adds	r3, #1
 800c53c:	73bb      	strb	r3, [r7, #14]
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	781b      	ldrb	r3, [r3, #0]
 800c542:	7bba      	ldrb	r2, [r7, #14]
 800c544:	429a      	cmp	r2, r3
 800c546:	d3e5      	bcc.n	800c514 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800c548:	e00d      	b.n	800c566 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800c54a:	2100      	movs	r1, #0
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f002 fa96 	bl	800ea7e <USBH_ClrFeature>
 800c552:	4603      	mov	r3, r0
 800c554:	2b00      	cmp	r3, #0
 800c556:	d108      	bne.n	800c56a <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	7bda      	ldrb	r2, [r3, #15]
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	739a      	strb	r2, [r3, #14]
      }
      break;
 800c560:	e003      	b.n	800c56a <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800c562:	bf00      	nop
 800c564:	e002      	b.n	800c56c <USBH_MSC_ClassRequest+0xc4>
      break;
 800c566:	bf00      	nop
 800c568:	e000      	b.n	800c56c <USBH_MSC_ClassRequest+0xc4>
      break;
 800c56a:	bf00      	nop
  }

  return status;
 800c56c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c56e:	4618      	mov	r0, r3
 800c570:	3710      	adds	r7, #16
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}
	...

0800c578 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b086      	sub	sp, #24
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c586:	69db      	ldr	r3, [r3, #28]
 800c588:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800c58a:	2301      	movs	r3, #1
 800c58c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800c58e:	2301      	movs	r3, #1
 800c590:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800c592:	2301      	movs	r3, #1
 800c594:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800c596:	693b      	ldr	r3, [r7, #16]
 800c598:	7b1b      	ldrb	r3, [r3, #12]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d003      	beq.n	800c5a6 <USBH_MSC_Process+0x2e>
 800c59e:	2b01      	cmp	r3, #1
 800c5a0:	f000 828d 	beq.w	800cabe <USBH_MSC_Process+0x546>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800c5a4:	e28e      	b.n	800cac4 <USBH_MSC_Process+0x54c>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800c5a6:	693b      	ldr	r3, [r7, #16]
 800c5a8:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	781b      	ldrb	r3, [r3, #0]
 800c5b0:	b29b      	uxth	r3, r3
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	f080 8267 	bcs.w	800ca86 <USBH_MSC_Process+0x50e>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800c5b8:	693b      	ldr	r3, [r7, #16]
 800c5ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c5be:	4619      	mov	r1, r3
 800c5c0:	693a      	ldr	r2, [r7, #16]
 800c5c2:	2334      	movs	r3, #52	; 0x34
 800c5c4:	fb01 f303 	mul.w	r3, r1, r3
 800c5c8:	4413      	add	r3, r2
 800c5ca:	3391      	adds	r3, #145	; 0x91
 800c5cc:	2201      	movs	r2, #1
 800c5ce:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800c5d0:	693b      	ldr	r3, [r7, #16]
 800c5d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c5d6:	4619      	mov	r1, r3
 800c5d8:	693a      	ldr	r2, [r7, #16]
 800c5da:	2334      	movs	r3, #52	; 0x34
 800c5dc:	fb01 f303 	mul.w	r3, r1, r3
 800c5e0:	4413      	add	r3, r2
 800c5e2:	3390      	adds	r3, #144	; 0x90
 800c5e4:	781b      	ldrb	r3, [r3, #0]
 800c5e6:	2b08      	cmp	r3, #8
 800c5e8:	f200 8235 	bhi.w	800ca56 <USBH_MSC_Process+0x4de>
 800c5ec:	a201      	add	r2, pc, #4	; (adr r2, 800c5f4 <USBH_MSC_Process+0x7c>)
 800c5ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5f2:	bf00      	nop
 800c5f4:	0800c619 	.word	0x0800c619
 800c5f8:	0800ca57 	.word	0x0800ca57
 800c5fc:	0800c6e1 	.word	0x0800c6e1
 800c600:	0800c865 	.word	0x0800c865
 800c604:	0800c63f 	.word	0x0800c63f
 800c608:	0800c931 	.word	0x0800c931
 800c60c:	0800ca57 	.word	0x0800ca57
 800c610:	0800ca57 	.word	0x0800ca57
 800c614:	0800ca45 	.word	0x0800ca45
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800c618:	693b      	ldr	r3, [r7, #16]
 800c61a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c61e:	4619      	mov	r1, r3
 800c620:	693a      	ldr	r2, [r7, #16]
 800c622:	2334      	movs	r3, #52	; 0x34
 800c624:	fb01 f303 	mul.w	r3, r1, r3
 800c628:	4413      	add	r3, r2
 800c62a:	3390      	adds	r3, #144	; 0x90
 800c62c:	2204      	movs	r2, #4
 800c62e:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800c636:	693b      	ldr	r3, [r7, #16]
 800c638:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800c63c:	e214      	b.n	800ca68 <USBH_MSC_Process+0x4f0>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800c63e:	693b      	ldr	r3, [r7, #16]
 800c640:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c644:	b2d9      	uxtb	r1, r3
 800c646:	693b      	ldr	r3, [r7, #16]
 800c648:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c64c:	461a      	mov	r2, r3
 800c64e:	2334      	movs	r3, #52	; 0x34
 800c650:	fb02 f303 	mul.w	r3, r2, r3
 800c654:	3398      	adds	r3, #152	; 0x98
 800c656:	693a      	ldr	r2, [r7, #16]
 800c658:	4413      	add	r3, r2
 800c65a:	3307      	adds	r3, #7
 800c65c:	461a      	mov	r2, r3
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	f001 f836 	bl	800d6d0 <USBH_MSC_SCSI_Inquiry>
 800c664:	4603      	mov	r3, r0
 800c666:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800c668:	7bfb      	ldrb	r3, [r7, #15]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d10b      	bne.n	800c686 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800c66e:	693b      	ldr	r3, [r7, #16]
 800c670:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c674:	4619      	mov	r1, r3
 800c676:	693a      	ldr	r2, [r7, #16]
 800c678:	2334      	movs	r3, #52	; 0x34
 800c67a:	fb01 f303 	mul.w	r3, r1, r3
 800c67e:	4413      	add	r3, r2
 800c680:	3390      	adds	r3, #144	; 0x90
 800c682:	2202      	movs	r2, #2
 800c684:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800c686:	7bfb      	ldrb	r3, [r7, #15]
 800c688:	2b02      	cmp	r3, #2
 800c68a:	d10c      	bne.n	800c6a6 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800c68c:	693b      	ldr	r3, [r7, #16]
 800c68e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c692:	4619      	mov	r1, r3
 800c694:	693a      	ldr	r2, [r7, #16]
 800c696:	2334      	movs	r3, #52	; 0x34
 800c698:	fb01 f303 	mul.w	r3, r1, r3
 800c69c:	4413      	add	r3, r2
 800c69e:	3390      	adds	r3, #144	; 0x90
 800c6a0:	2205      	movs	r2, #5
 800c6a2:	701a      	strb	r2, [r3, #0]
            break;
 800c6a4:	e1d9      	b.n	800ca5a <USBH_MSC_Process+0x4e2>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800c6a6:	7bfb      	ldrb	r3, [r7, #15]
 800c6a8:	2b04      	cmp	r3, #4
 800c6aa:	f040 81d6 	bne.w	800ca5a <USBH_MSC_Process+0x4e2>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800c6ae:	693b      	ldr	r3, [r7, #16]
 800c6b0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c6b4:	4619      	mov	r1, r3
 800c6b6:	693a      	ldr	r2, [r7, #16]
 800c6b8:	2334      	movs	r3, #52	; 0x34
 800c6ba:	fb01 f303 	mul.w	r3, r1, r3
 800c6be:	4413      	add	r3, r2
 800c6c0:	3390      	adds	r3, #144	; 0x90
 800c6c2:	2201      	movs	r2, #1
 800c6c4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800c6c6:	693b      	ldr	r3, [r7, #16]
 800c6c8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c6cc:	4619      	mov	r1, r3
 800c6ce:	693a      	ldr	r2, [r7, #16]
 800c6d0:	2334      	movs	r3, #52	; 0x34
 800c6d2:	fb01 f303 	mul.w	r3, r1, r3
 800c6d6:	4413      	add	r3, r2
 800c6d8:	3391      	adds	r3, #145	; 0x91
 800c6da:	2202      	movs	r2, #2
 800c6dc:	701a      	strb	r2, [r3, #0]
            break;
 800c6de:	e1bc      	b.n	800ca5a <USBH_MSC_Process+0x4e2>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800c6e0:	693b      	ldr	r3, [r7, #16]
 800c6e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c6e6:	b2db      	uxtb	r3, r3
 800c6e8:	4619      	mov	r1, r3
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f000 ff32 	bl	800d554 <USBH_MSC_SCSI_TestUnitReady>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800c6f4:	7bbb      	ldrb	r3, [r7, #14]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d149      	bne.n	800c78e <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800c6fa:	693b      	ldr	r3, [r7, #16]
 800c6fc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c700:	4619      	mov	r1, r3
 800c702:	693a      	ldr	r2, [r7, #16]
 800c704:	2334      	movs	r3, #52	; 0x34
 800c706:	fb01 f303 	mul.w	r3, r1, r3
 800c70a:	4413      	add	r3, r2
 800c70c:	3392      	adds	r3, #146	; 0x92
 800c70e:	781b      	ldrb	r3, [r3, #0]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d00c      	beq.n	800c72e <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800c714:	693b      	ldr	r3, [r7, #16]
 800c716:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c71a:	4619      	mov	r1, r3
 800c71c:	693a      	ldr	r2, [r7, #16]
 800c71e:	2334      	movs	r3, #52	; 0x34
 800c720:	fb01 f303 	mul.w	r3, r1, r3
 800c724:	4413      	add	r3, r2
 800c726:	33c1      	adds	r3, #193	; 0xc1
 800c728:	2201      	movs	r2, #1
 800c72a:	701a      	strb	r2, [r3, #0]
 800c72c:	e00b      	b.n	800c746 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800c72e:	693b      	ldr	r3, [r7, #16]
 800c730:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c734:	4619      	mov	r1, r3
 800c736:	693a      	ldr	r2, [r7, #16]
 800c738:	2334      	movs	r3, #52	; 0x34
 800c73a:	fb01 f303 	mul.w	r3, r1, r3
 800c73e:	4413      	add	r3, r2
 800c740:	33c1      	adds	r3, #193	; 0xc1
 800c742:	2200      	movs	r2, #0
 800c744:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800c746:	693b      	ldr	r3, [r7, #16]
 800c748:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c74c:	4619      	mov	r1, r3
 800c74e:	693a      	ldr	r2, [r7, #16]
 800c750:	2334      	movs	r3, #52	; 0x34
 800c752:	fb01 f303 	mul.w	r3, r1, r3
 800c756:	4413      	add	r3, r2
 800c758:	3390      	adds	r3, #144	; 0x90
 800c75a:	2203      	movs	r2, #3
 800c75c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800c75e:	693b      	ldr	r3, [r7, #16]
 800c760:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c764:	4619      	mov	r1, r3
 800c766:	693a      	ldr	r2, [r7, #16]
 800c768:	2334      	movs	r3, #52	; 0x34
 800c76a:	fb01 f303 	mul.w	r3, r1, r3
 800c76e:	4413      	add	r3, r2
 800c770:	3391      	adds	r3, #145	; 0x91
 800c772:	2200      	movs	r2, #0
 800c774:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800c776:	693b      	ldr	r3, [r7, #16]
 800c778:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c77c:	4619      	mov	r1, r3
 800c77e:	693a      	ldr	r2, [r7, #16]
 800c780:	2334      	movs	r3, #52	; 0x34
 800c782:	fb01 f303 	mul.w	r3, r1, r3
 800c786:	4413      	add	r3, r2
 800c788:	3392      	adds	r3, #146	; 0x92
 800c78a:	2200      	movs	r2, #0
 800c78c:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800c78e:	7bbb      	ldrb	r3, [r7, #14]
 800c790:	2b02      	cmp	r3, #2
 800c792:	d14a      	bne.n	800c82a <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800c794:	693b      	ldr	r3, [r7, #16]
 800c796:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c79a:	4619      	mov	r1, r3
 800c79c:	693a      	ldr	r2, [r7, #16]
 800c79e:	2334      	movs	r3, #52	; 0x34
 800c7a0:	fb01 f303 	mul.w	r3, r1, r3
 800c7a4:	4413      	add	r3, r2
 800c7a6:	3392      	adds	r3, #146	; 0x92
 800c7a8:	781b      	ldrb	r3, [r3, #0]
 800c7aa:	2b02      	cmp	r3, #2
 800c7ac:	d00c      	beq.n	800c7c8 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c7b4:	4619      	mov	r1, r3
 800c7b6:	693a      	ldr	r2, [r7, #16]
 800c7b8:	2334      	movs	r3, #52	; 0x34
 800c7ba:	fb01 f303 	mul.w	r3, r1, r3
 800c7be:	4413      	add	r3, r2
 800c7c0:	33c1      	adds	r3, #193	; 0xc1
 800c7c2:	2201      	movs	r2, #1
 800c7c4:	701a      	strb	r2, [r3, #0]
 800c7c6:	e00b      	b.n	800c7e0 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800c7c8:	693b      	ldr	r3, [r7, #16]
 800c7ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c7ce:	4619      	mov	r1, r3
 800c7d0:	693a      	ldr	r2, [r7, #16]
 800c7d2:	2334      	movs	r3, #52	; 0x34
 800c7d4:	fb01 f303 	mul.w	r3, r1, r3
 800c7d8:	4413      	add	r3, r2
 800c7da:	33c1      	adds	r3, #193	; 0xc1
 800c7dc:	2200      	movs	r2, #0
 800c7de:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800c7e0:	693b      	ldr	r3, [r7, #16]
 800c7e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c7e6:	4619      	mov	r1, r3
 800c7e8:	693a      	ldr	r2, [r7, #16]
 800c7ea:	2334      	movs	r3, #52	; 0x34
 800c7ec:	fb01 f303 	mul.w	r3, r1, r3
 800c7f0:	4413      	add	r3, r2
 800c7f2:	3390      	adds	r3, #144	; 0x90
 800c7f4:	2205      	movs	r2, #5
 800c7f6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800c7f8:	693b      	ldr	r3, [r7, #16]
 800c7fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c7fe:	4619      	mov	r1, r3
 800c800:	693a      	ldr	r2, [r7, #16]
 800c802:	2334      	movs	r3, #52	; 0x34
 800c804:	fb01 f303 	mul.w	r3, r1, r3
 800c808:	4413      	add	r3, r2
 800c80a:	3391      	adds	r3, #145	; 0x91
 800c80c:	2201      	movs	r2, #1
 800c80e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800c810:	693b      	ldr	r3, [r7, #16]
 800c812:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c816:	4619      	mov	r1, r3
 800c818:	693a      	ldr	r2, [r7, #16]
 800c81a:	2334      	movs	r3, #52	; 0x34
 800c81c:	fb01 f303 	mul.w	r3, r1, r3
 800c820:	4413      	add	r3, r2
 800c822:	3392      	adds	r3, #146	; 0x92
 800c824:	2202      	movs	r2, #2
 800c826:	701a      	strb	r2, [r3, #0]
            break;
 800c828:	e119      	b.n	800ca5e <USBH_MSC_Process+0x4e6>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800c82a:	7bbb      	ldrb	r3, [r7, #14]
 800c82c:	2b04      	cmp	r3, #4
 800c82e:	f040 8116 	bne.w	800ca5e <USBH_MSC_Process+0x4e6>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800c832:	693b      	ldr	r3, [r7, #16]
 800c834:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c838:	4619      	mov	r1, r3
 800c83a:	693a      	ldr	r2, [r7, #16]
 800c83c:	2334      	movs	r3, #52	; 0x34
 800c83e:	fb01 f303 	mul.w	r3, r1, r3
 800c842:	4413      	add	r3, r2
 800c844:	3390      	adds	r3, #144	; 0x90
 800c846:	2201      	movs	r2, #1
 800c848:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c850:	4619      	mov	r1, r3
 800c852:	693a      	ldr	r2, [r7, #16]
 800c854:	2334      	movs	r3, #52	; 0x34
 800c856:	fb01 f303 	mul.w	r3, r1, r3
 800c85a:	4413      	add	r3, r2
 800c85c:	3391      	adds	r3, #145	; 0x91
 800c85e:	2202      	movs	r2, #2
 800c860:	701a      	strb	r2, [r3, #0]
            break;
 800c862:	e0fc      	b.n	800ca5e <USBH_MSC_Process+0x4e6>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c86a:	b2d9      	uxtb	r1, r3
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c872:	461a      	mov	r2, r3
 800c874:	2334      	movs	r3, #52	; 0x34
 800c876:	fb02 f303 	mul.w	r3, r2, r3
 800c87a:	3390      	adds	r3, #144	; 0x90
 800c87c:	693a      	ldr	r2, [r7, #16]
 800c87e:	4413      	add	r3, r2
 800c880:	3304      	adds	r3, #4
 800c882:	461a      	mov	r2, r3
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	f000 fea8 	bl	800d5da <USBH_MSC_SCSI_ReadCapacity>
 800c88a:	4603      	mov	r3, r0
 800c88c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800c88e:	7bfb      	ldrb	r3, [r7, #15]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d120      	bne.n	800c8d6 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800c894:	693b      	ldr	r3, [r7, #16]
 800c896:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c89a:	4619      	mov	r1, r3
 800c89c:	693a      	ldr	r2, [r7, #16]
 800c89e:	2334      	movs	r3, #52	; 0x34
 800c8a0:	fb01 f303 	mul.w	r3, r1, r3
 800c8a4:	4413      	add	r3, r2
 800c8a6:	3390      	adds	r3, #144	; 0x90
 800c8a8:	2201      	movs	r2, #1
 800c8aa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800c8ac:	693b      	ldr	r3, [r7, #16]
 800c8ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c8b2:	4619      	mov	r1, r3
 800c8b4:	693a      	ldr	r2, [r7, #16]
 800c8b6:	2334      	movs	r3, #52	; 0x34
 800c8b8:	fb01 f303 	mul.w	r3, r1, r3
 800c8bc:	4413      	add	r3, r2
 800c8be:	3391      	adds	r3, #145	; 0x91
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800c8c4:	693b      	ldr	r3, [r7, #16]
 800c8c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c8ca:	3301      	adds	r3, #1
 800c8cc:	b29a      	uxth	r2, r3
 800c8ce:	693b      	ldr	r3, [r7, #16]
 800c8d0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800c8d4:	e0c5      	b.n	800ca62 <USBH_MSC_Process+0x4ea>
            else if (scsi_status == USBH_FAIL)
 800c8d6:	7bfb      	ldrb	r3, [r7, #15]
 800c8d8:	2b02      	cmp	r3, #2
 800c8da:	d10c      	bne.n	800c8f6 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800c8dc:	693b      	ldr	r3, [r7, #16]
 800c8de:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c8e2:	4619      	mov	r1, r3
 800c8e4:	693a      	ldr	r2, [r7, #16]
 800c8e6:	2334      	movs	r3, #52	; 0x34
 800c8e8:	fb01 f303 	mul.w	r3, r1, r3
 800c8ec:	4413      	add	r3, r2
 800c8ee:	3390      	adds	r3, #144	; 0x90
 800c8f0:	2205      	movs	r2, #5
 800c8f2:	701a      	strb	r2, [r3, #0]
            break;
 800c8f4:	e0b5      	b.n	800ca62 <USBH_MSC_Process+0x4ea>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800c8f6:	7bfb      	ldrb	r3, [r7, #15]
 800c8f8:	2b04      	cmp	r3, #4
 800c8fa:	f040 80b2 	bne.w	800ca62 <USBH_MSC_Process+0x4ea>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800c8fe:	693b      	ldr	r3, [r7, #16]
 800c900:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c904:	4619      	mov	r1, r3
 800c906:	693a      	ldr	r2, [r7, #16]
 800c908:	2334      	movs	r3, #52	; 0x34
 800c90a:	fb01 f303 	mul.w	r3, r1, r3
 800c90e:	4413      	add	r3, r2
 800c910:	3390      	adds	r3, #144	; 0x90
 800c912:	2201      	movs	r2, #1
 800c914:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c91c:	4619      	mov	r1, r3
 800c91e:	693a      	ldr	r2, [r7, #16]
 800c920:	2334      	movs	r3, #52	; 0x34
 800c922:	fb01 f303 	mul.w	r3, r1, r3
 800c926:	4413      	add	r3, r2
 800c928:	3391      	adds	r3, #145	; 0x91
 800c92a:	2202      	movs	r2, #2
 800c92c:	701a      	strb	r2, [r3, #0]
            break;
 800c92e:	e098      	b.n	800ca62 <USBH_MSC_Process+0x4ea>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c936:	b2d9      	uxtb	r1, r3
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c93e:	461a      	mov	r2, r3
 800c940:	2334      	movs	r3, #52	; 0x34
 800c942:	fb02 f303 	mul.w	r3, r2, r3
 800c946:	3398      	adds	r3, #152	; 0x98
 800c948:	693a      	ldr	r2, [r7, #16]
 800c94a:	4413      	add	r3, r2
 800c94c:	3304      	adds	r3, #4
 800c94e:	461a      	mov	r2, r3
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f000 ff62 	bl	800d81a <USBH_MSC_SCSI_RequestSense>
 800c956:	4603      	mov	r3, r0
 800c958:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800c95a:	7bfb      	ldrb	r3, [r7, #15]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d145      	bne.n	800c9ec <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800c960:	693b      	ldr	r3, [r7, #16]
 800c962:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c966:	4619      	mov	r1, r3
 800c968:	693a      	ldr	r2, [r7, #16]
 800c96a:	2334      	movs	r3, #52	; 0x34
 800c96c:	fb01 f303 	mul.w	r3, r1, r3
 800c970:	4413      	add	r3, r2
 800c972:	339c      	adds	r3, #156	; 0x9c
 800c974:	781b      	ldrb	r3, [r3, #0]
 800c976:	2b06      	cmp	r3, #6
 800c978:	d00c      	beq.n	800c994 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800c97a:	693b      	ldr	r3, [r7, #16]
 800c97c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c980:	4619      	mov	r1, r3
 800c982:	693a      	ldr	r2, [r7, #16]
 800c984:	2334      	movs	r3, #52	; 0x34
 800c986:	fb01 f303 	mul.w	r3, r1, r3
 800c98a:	4413      	add	r3, r2
 800c98c:	339c      	adds	r3, #156	; 0x9c
 800c98e:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800c990:	2b02      	cmp	r3, #2
 800c992:	d117      	bne.n	800c9c4 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800c99a:	693b      	ldr	r3, [r7, #16]
 800c99c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800c9a0:	1ad3      	subs	r3, r2, r3
 800c9a2:	f242 720f 	movw	r2, #9999	; 0x270f
 800c9a6:	4293      	cmp	r3, r2
 800c9a8:	d80c      	bhi.n	800c9c4 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800c9aa:	693b      	ldr	r3, [r7, #16]
 800c9ac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c9b0:	4619      	mov	r1, r3
 800c9b2:	693a      	ldr	r2, [r7, #16]
 800c9b4:	2334      	movs	r3, #52	; 0x34
 800c9b6:	fb01 f303 	mul.w	r3, r1, r3
 800c9ba:	4413      	add	r3, r2
 800c9bc:	3390      	adds	r3, #144	; 0x90
 800c9be:	2202      	movs	r2, #2
 800c9c0:	701a      	strb	r2, [r3, #0]
                  break;
 800c9c2:	e051      	b.n	800ca68 <USBH_MSC_Process+0x4f0>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800c9c4:	693b      	ldr	r3, [r7, #16]
 800c9c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c9ca:	4619      	mov	r1, r3
 800c9cc:	693a      	ldr	r2, [r7, #16]
 800c9ce:	2334      	movs	r3, #52	; 0x34
 800c9d0:	fb01 f303 	mul.w	r3, r1, r3
 800c9d4:	4413      	add	r3, r2
 800c9d6:	3390      	adds	r3, #144	; 0x90
 800c9d8:	2201      	movs	r2, #1
 800c9da:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800c9dc:	693b      	ldr	r3, [r7, #16]
 800c9de:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c9e2:	3301      	adds	r3, #1
 800c9e4:	b29a      	uxth	r2, r3
 800c9e6:	693b      	ldr	r3, [r7, #16]
 800c9e8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800c9ec:	7bfb      	ldrb	r3, [r7, #15]
 800c9ee:	2b02      	cmp	r3, #2
 800c9f0:	d10c      	bne.n	800ca0c <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800c9f2:	693b      	ldr	r3, [r7, #16]
 800c9f4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c9f8:	4619      	mov	r1, r3
 800c9fa:	693a      	ldr	r2, [r7, #16]
 800c9fc:	2334      	movs	r3, #52	; 0x34
 800c9fe:	fb01 f303 	mul.w	r3, r1, r3
 800ca02:	4413      	add	r3, r2
 800ca04:	3390      	adds	r3, #144	; 0x90
 800ca06:	2208      	movs	r2, #8
 800ca08:	701a      	strb	r2, [r3, #0]
            break;
 800ca0a:	e02c      	b.n	800ca66 <USBH_MSC_Process+0x4ee>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800ca0c:	7bfb      	ldrb	r3, [r7, #15]
 800ca0e:	2b04      	cmp	r3, #4
 800ca10:	d129      	bne.n	800ca66 <USBH_MSC_Process+0x4ee>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800ca12:	693b      	ldr	r3, [r7, #16]
 800ca14:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ca18:	4619      	mov	r1, r3
 800ca1a:	693a      	ldr	r2, [r7, #16]
 800ca1c:	2334      	movs	r3, #52	; 0x34
 800ca1e:	fb01 f303 	mul.w	r3, r1, r3
 800ca22:	4413      	add	r3, r2
 800ca24:	3390      	adds	r3, #144	; 0x90
 800ca26:	2201      	movs	r2, #1
 800ca28:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800ca2a:	693b      	ldr	r3, [r7, #16]
 800ca2c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ca30:	4619      	mov	r1, r3
 800ca32:	693a      	ldr	r2, [r7, #16]
 800ca34:	2334      	movs	r3, #52	; 0x34
 800ca36:	fb01 f303 	mul.w	r3, r1, r3
 800ca3a:	4413      	add	r3, r2
 800ca3c:	3391      	adds	r3, #145	; 0x91
 800ca3e:	2202      	movs	r2, #2
 800ca40:	701a      	strb	r2, [r3, #0]
            break;
 800ca42:	e010      	b.n	800ca66 <USBH_MSC_Process+0x4ee>
            MSC_Handle->current_lun++;
 800ca44:	693b      	ldr	r3, [r7, #16]
 800ca46:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ca4a:	3301      	adds	r3, #1
 800ca4c:	b29a      	uxth	r2, r3
 800ca4e:	693b      	ldr	r3, [r7, #16]
 800ca50:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800ca54:	e008      	b.n	800ca68 <USBH_MSC_Process+0x4f0>
            break;
 800ca56:	bf00      	nop
 800ca58:	e006      	b.n	800ca68 <USBH_MSC_Process+0x4f0>
            break;
 800ca5a:	bf00      	nop
 800ca5c:	e004      	b.n	800ca68 <USBH_MSC_Process+0x4f0>
            break;
 800ca5e:	bf00      	nop
 800ca60:	e002      	b.n	800ca68 <USBH_MSC_Process+0x4f0>
            break;
 800ca62:	bf00      	nop
 800ca64:	e000      	b.n	800ca68 <USBH_MSC_Process+0x4f0>
            break;
 800ca66:	bf00      	nop
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2204      	movs	r2, #4
 800ca6c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	4619      	mov	r1, r3
 800ca80:	f003 f81a 	bl	800fab8 <osMessagePut>
      break;
 800ca84:	e01e      	b.n	800cac4 <USBH_MSC_Process+0x54c>
        MSC_Handle->current_lun = 0U;
 800ca86:	693b      	ldr	r3, [r7, #16]
 800ca88:	2200      	movs	r2, #0
 800ca8a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800ca8e:	693b      	ldr	r3, [r7, #16]
 800ca90:	2201      	movs	r2, #1
 800ca92:	731a      	strb	r2, [r3, #12]
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2204      	movs	r2, #4
 800ca98:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800caa8:	2200      	movs	r2, #0
 800caaa:	4619      	mov	r1, r3
 800caac:	f003 f804 	bl	800fab8 <osMessagePut>
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cab6:	2102      	movs	r1, #2
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	4798      	blx	r3
      break;
 800cabc:	e002      	b.n	800cac4 <USBH_MSC_Process+0x54c>
      error = USBH_OK;
 800cabe:	2300      	movs	r3, #0
 800cac0:	75fb      	strb	r3, [r7, #23]
      break;
 800cac2:	bf00      	nop
  }
  return error;
 800cac4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	3718      	adds	r7, #24
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}
 800cace:	bf00      	nop

0800cad0 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800cad0:	b480      	push	{r7}
 800cad2:	b083      	sub	sp, #12
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800cad8:	2300      	movs	r3, #0
}
 800cada:	4618      	mov	r0, r3
 800cadc:	370c      	adds	r7, #12
 800cade:	46bd      	mov	sp, r7
 800cae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae4:	4770      	bx	lr

0800cae6 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800cae6:	b580      	push	{r7, lr}
 800cae8:	b088      	sub	sp, #32
 800caea:	af02      	add	r7, sp, #8
 800caec:	6078      	str	r0, [r7, #4]
 800caee:	460b      	mov	r3, r1
 800caf0:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800caf8:	69db      	ldr	r3, [r3, #28]
 800cafa:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800cafc:	2301      	movs	r3, #1
 800cafe:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800cb00:	2301      	movs	r3, #1
 800cb02:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800cb04:	78fb      	ldrb	r3, [r7, #3]
 800cb06:	693a      	ldr	r2, [r7, #16]
 800cb08:	2134      	movs	r1, #52	; 0x34
 800cb0a:	fb01 f303 	mul.w	r3, r1, r3
 800cb0e:	4413      	add	r3, r2
 800cb10:	3390      	adds	r3, #144	; 0x90
 800cb12:	781b      	ldrb	r3, [r3, #0]
 800cb14:	2b07      	cmp	r3, #7
 800cb16:	d04b      	beq.n	800cbb0 <USBH_MSC_RdWrProcess+0xca>
 800cb18:	2b07      	cmp	r3, #7
 800cb1a:	f300 80d2 	bgt.w	800ccc2 <USBH_MSC_RdWrProcess+0x1dc>
 800cb1e:	2b05      	cmp	r3, #5
 800cb20:	f000 8089 	beq.w	800cc36 <USBH_MSC_RdWrProcess+0x150>
 800cb24:	2b06      	cmp	r3, #6
 800cb26:	f040 80cc 	bne.w	800ccc2 <USBH_MSC_RdWrProcess+0x1dc>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800cb2a:	78f9      	ldrb	r1, [r7, #3]
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	9300      	str	r3, [sp, #0]
 800cb30:	2300      	movs	r3, #0
 800cb32:	2200      	movs	r2, #0
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f000 ff54 	bl	800d9e2 <USBH_MSC_SCSI_Read>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800cb3e:	7bfb      	ldrb	r3, [r7, #15]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d10b      	bne.n	800cb5c <USBH_MSC_RdWrProcess+0x76>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800cb44:	78fb      	ldrb	r3, [r7, #3]
 800cb46:	693a      	ldr	r2, [r7, #16]
 800cb48:	2134      	movs	r1, #52	; 0x34
 800cb4a:	fb01 f303 	mul.w	r3, r1, r3
 800cb4e:	4413      	add	r3, r2
 800cb50:	3390      	adds	r3, #144	; 0x90
 800cb52:	2201      	movs	r2, #1
 800cb54:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800cb56:	2300      	movs	r3, #0
 800cb58:	75fb      	strb	r3, [r7, #23]
 800cb5a:	e01a      	b.n	800cb92 <USBH_MSC_RdWrProcess+0xac>
      }
      else if (scsi_status == USBH_FAIL)
 800cb5c:	7bfb      	ldrb	r3, [r7, #15]
 800cb5e:	2b02      	cmp	r3, #2
 800cb60:	d109      	bne.n	800cb76 <USBH_MSC_RdWrProcess+0x90>
      {
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800cb62:	78fb      	ldrb	r3, [r7, #3]
 800cb64:	693a      	ldr	r2, [r7, #16]
 800cb66:	2134      	movs	r1, #52	; 0x34
 800cb68:	fb01 f303 	mul.w	r3, r1, r3
 800cb6c:	4413      	add	r3, r2
 800cb6e:	3390      	adds	r3, #144	; 0x90
 800cb70:	2205      	movs	r2, #5
 800cb72:	701a      	strb	r2, [r3, #0]
 800cb74:	e00d      	b.n	800cb92 <USBH_MSC_RdWrProcess+0xac>
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800cb76:	7bfb      	ldrb	r3, [r7, #15]
 800cb78:	2b04      	cmp	r3, #4
 800cb7a:	d10a      	bne.n	800cb92 <USBH_MSC_RdWrProcess+0xac>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800cb7c:	78fb      	ldrb	r3, [r7, #3]
 800cb7e:	693a      	ldr	r2, [r7, #16]
 800cb80:	2134      	movs	r1, #52	; 0x34
 800cb82:	fb01 f303 	mul.w	r3, r1, r3
 800cb86:	4413      	add	r3, r2
 800cb88:	3390      	adds	r3, #144	; 0x90
 800cb8a:	2208      	movs	r2, #8
 800cb8c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800cb8e:	2302      	movs	r3, #2
 800cb90:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2204      	movs	r2, #4
 800cb96:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cba6:	2200      	movs	r2, #0
 800cba8:	4619      	mov	r1, r3
 800cbaa:	f002 ff85 	bl	800fab8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cbae:	e089      	b.n	800ccc4 <USBH_MSC_RdWrProcess+0x1de>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800cbb0:	78f9      	ldrb	r1, [r7, #3]
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	9300      	str	r3, [sp, #0]
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	2200      	movs	r2, #0
 800cbba:	6878      	ldr	r0, [r7, #4]
 800cbbc:	f000 fea6 	bl	800d90c <USBH_MSC_SCSI_Write>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800cbc4:	7bfb      	ldrb	r3, [r7, #15]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d10b      	bne.n	800cbe2 <USBH_MSC_RdWrProcess+0xfc>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800cbca:	78fb      	ldrb	r3, [r7, #3]
 800cbcc:	693a      	ldr	r2, [r7, #16]
 800cbce:	2134      	movs	r1, #52	; 0x34
 800cbd0:	fb01 f303 	mul.w	r3, r1, r3
 800cbd4:	4413      	add	r3, r2
 800cbd6:	3390      	adds	r3, #144	; 0x90
 800cbd8:	2201      	movs	r2, #1
 800cbda:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800cbdc:	2300      	movs	r3, #0
 800cbde:	75fb      	strb	r3, [r7, #23]
 800cbe0:	e01a      	b.n	800cc18 <USBH_MSC_RdWrProcess+0x132>
      }
      else if (scsi_status == USBH_FAIL)
 800cbe2:	7bfb      	ldrb	r3, [r7, #15]
 800cbe4:	2b02      	cmp	r3, #2
 800cbe6:	d109      	bne.n	800cbfc <USBH_MSC_RdWrProcess+0x116>
      {
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800cbe8:	78fb      	ldrb	r3, [r7, #3]
 800cbea:	693a      	ldr	r2, [r7, #16]
 800cbec:	2134      	movs	r1, #52	; 0x34
 800cbee:	fb01 f303 	mul.w	r3, r1, r3
 800cbf2:	4413      	add	r3, r2
 800cbf4:	3390      	adds	r3, #144	; 0x90
 800cbf6:	2205      	movs	r2, #5
 800cbf8:	701a      	strb	r2, [r3, #0]
 800cbfa:	e00d      	b.n	800cc18 <USBH_MSC_RdWrProcess+0x132>
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800cbfc:	7bfb      	ldrb	r3, [r7, #15]
 800cbfe:	2b04      	cmp	r3, #4
 800cc00:	d10a      	bne.n	800cc18 <USBH_MSC_RdWrProcess+0x132>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800cc02:	78fb      	ldrb	r3, [r7, #3]
 800cc04:	693a      	ldr	r2, [r7, #16]
 800cc06:	2134      	movs	r1, #52	; 0x34
 800cc08:	fb01 f303 	mul.w	r3, r1, r3
 800cc0c:	4413      	add	r3, r2
 800cc0e:	3390      	adds	r3, #144	; 0x90
 800cc10:	2208      	movs	r2, #8
 800cc12:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800cc14:	2302      	movs	r3, #2
 800cc16:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2204      	movs	r2, #4
 800cc1c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	4619      	mov	r1, r3
 800cc30:	f002 ff42 	bl	800fab8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cc34:	e046      	b.n	800ccc4 <USBH_MSC_RdWrProcess+0x1de>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800cc36:	78fb      	ldrb	r3, [r7, #3]
 800cc38:	2234      	movs	r2, #52	; 0x34
 800cc3a:	fb02 f303 	mul.w	r3, r2, r3
 800cc3e:	3398      	adds	r3, #152	; 0x98
 800cc40:	693a      	ldr	r2, [r7, #16]
 800cc42:	4413      	add	r3, r2
 800cc44:	1d1a      	adds	r2, r3, #4
 800cc46:	78fb      	ldrb	r3, [r7, #3]
 800cc48:	4619      	mov	r1, r3
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f000 fde5 	bl	800d81a <USBH_MSC_SCSI_RequestSense>
 800cc50:	4603      	mov	r3, r0
 800cc52:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800cc54:	7bfb      	ldrb	r3, [r7, #15]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d113      	bne.n	800cc82 <USBH_MSC_RdWrProcess+0x19c>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800cc5a:	78fb      	ldrb	r3, [r7, #3]
 800cc5c:	693a      	ldr	r2, [r7, #16]
 800cc5e:	2134      	movs	r1, #52	; 0x34
 800cc60:	fb01 f303 	mul.w	r3, r1, r3
 800cc64:	4413      	add	r3, r2
 800cc66:	3390      	adds	r3, #144	; 0x90
 800cc68:	2201      	movs	r2, #1
 800cc6a:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800cc6c:	78fb      	ldrb	r3, [r7, #3]
 800cc6e:	693a      	ldr	r2, [r7, #16]
 800cc70:	2134      	movs	r1, #52	; 0x34
 800cc72:	fb01 f303 	mul.w	r3, r1, r3
 800cc76:	4413      	add	r3, r2
 800cc78:	3391      	adds	r3, #145	; 0x91
 800cc7a:	2202      	movs	r2, #2
 800cc7c:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800cc7e:	2302      	movs	r3, #2
 800cc80:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800cc82:	7bfb      	ldrb	r3, [r7, #15]
 800cc84:	2b02      	cmp	r3, #2
 800cc86:	d00d      	beq.n	800cca4 <USBH_MSC_RdWrProcess+0x1be>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800cc88:	7bfb      	ldrb	r3, [r7, #15]
 800cc8a:	2b04      	cmp	r3, #4
 800cc8c:	d10a      	bne.n	800cca4 <USBH_MSC_RdWrProcess+0x1be>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800cc8e:	78fb      	ldrb	r3, [r7, #3]
 800cc90:	693a      	ldr	r2, [r7, #16]
 800cc92:	2134      	movs	r1, #52	; 0x34
 800cc94:	fb01 f303 	mul.w	r3, r1, r3
 800cc98:	4413      	add	r3, r2
 800cc9a:	3390      	adds	r3, #144	; 0x90
 800cc9c:	2208      	movs	r2, #8
 800cc9e:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800cca0:	2302      	movs	r3, #2
 800cca2:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2204      	movs	r2, #4
 800cca8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ccb8:	2200      	movs	r2, #0
 800ccba:	4619      	mov	r1, r3
 800ccbc:	f002 fefc 	bl	800fab8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ccc0:	e000      	b.n	800ccc4 <USBH_MSC_RdWrProcess+0x1de>

    default:
      break;
 800ccc2:	bf00      	nop

  }
  return error;
 800ccc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	3718      	adds	r7, #24
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}

0800ccce <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800ccce:	b480      	push	{r7}
 800ccd0:	b085      	sub	sp, #20
 800ccd2:	af00      	add	r7, sp, #0
 800ccd4:	6078      	str	r0, [r7, #4]
 800ccd6:	460b      	mov	r3, r1
 800ccd8:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cce0:	69db      	ldr	r3, [r3, #28]
 800cce2:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	781b      	ldrb	r3, [r3, #0]
 800cce8:	b2db      	uxtb	r3, r3
 800ccea:	2b0b      	cmp	r3, #11
 800ccec:	d10c      	bne.n	800cd08 <USBH_MSC_UnitIsReady+0x3a>
 800ccee:	78fb      	ldrb	r3, [r7, #3]
 800ccf0:	68ba      	ldr	r2, [r7, #8]
 800ccf2:	2134      	movs	r1, #52	; 0x34
 800ccf4:	fb01 f303 	mul.w	r3, r1, r3
 800ccf8:	4413      	add	r3, r2
 800ccfa:	3391      	adds	r3, #145	; 0x91
 800ccfc:	781b      	ldrb	r3, [r3, #0]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d102      	bne.n	800cd08 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800cd02:	2301      	movs	r3, #1
 800cd04:	73fb      	strb	r3, [r7, #15]
 800cd06:	e001      	b.n	800cd0c <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800cd08:	2300      	movs	r3, #0
 800cd0a:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800cd0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3714      	adds	r7, #20
 800cd12:	46bd      	mov	sp, r7
 800cd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd18:	4770      	bx	lr

0800cd1a <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800cd1a:	b580      	push	{r7, lr}
 800cd1c:	b086      	sub	sp, #24
 800cd1e:	af00      	add	r7, sp, #0
 800cd20:	60f8      	str	r0, [r7, #12]
 800cd22:	460b      	mov	r3, r1
 800cd24:	607a      	str	r2, [r7, #4]
 800cd26:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cd2e:	69db      	ldr	r3, [r3, #28]
 800cd30:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	781b      	ldrb	r3, [r3, #0]
 800cd36:	b2db      	uxtb	r3, r3
 800cd38:	2b0b      	cmp	r3, #11
 800cd3a:	d10d      	bne.n	800cd58 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800cd3c:	7afb      	ldrb	r3, [r7, #11]
 800cd3e:	2234      	movs	r2, #52	; 0x34
 800cd40:	fb02 f303 	mul.w	r3, r2, r3
 800cd44:	3390      	adds	r3, #144	; 0x90
 800cd46:	697a      	ldr	r2, [r7, #20]
 800cd48:	4413      	add	r3, r2
 800cd4a:	2234      	movs	r2, #52	; 0x34
 800cd4c:	4619      	mov	r1, r3
 800cd4e:	6878      	ldr	r0, [r7, #4]
 800cd50:	f006 f88a 	bl	8012e68 <memcpy>
    return USBH_OK;
 800cd54:	2300      	movs	r3, #0
 800cd56:	e000      	b.n	800cd5a <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800cd58:	2302      	movs	r3, #2
  }
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	3718      	adds	r7, #24
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}

0800cd62 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800cd62:	b580      	push	{r7, lr}
 800cd64:	b088      	sub	sp, #32
 800cd66:	af02      	add	r7, sp, #8
 800cd68:	60f8      	str	r0, [r7, #12]
 800cd6a:	607a      	str	r2, [r7, #4]
 800cd6c:	603b      	str	r3, [r7, #0]
 800cd6e:	460b      	mov	r3, r1
 800cd70:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cd78:	69db      	ldr	r3, [r3, #28]
 800cd7a:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800cd82:	b2db      	uxtb	r3, r3
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d00e      	beq.n	800cda6 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	781b      	ldrb	r3, [r3, #0]
 800cd8c:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800cd8e:	2b0b      	cmp	r3, #11
 800cd90:	d109      	bne.n	800cda6 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800cd92:	7afb      	ldrb	r3, [r7, #11]
 800cd94:	697a      	ldr	r2, [r7, #20]
 800cd96:	2134      	movs	r1, #52	; 0x34
 800cd98:	fb01 f303 	mul.w	r3, r1, r3
 800cd9c:	4413      	add	r3, r2
 800cd9e:	3390      	adds	r3, #144	; 0x90
 800cda0:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800cda2:	2b01      	cmp	r3, #1
 800cda4:	d001      	beq.n	800cdaa <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800cda6:	2302      	movs	r3, #2
 800cda8:	e040      	b.n	800ce2c <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800cdaa:	697b      	ldr	r3, [r7, #20]
 800cdac:	2206      	movs	r2, #6
 800cdae:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800cdb0:	7afb      	ldrb	r3, [r7, #11]
 800cdb2:	697a      	ldr	r2, [r7, #20]
 800cdb4:	2134      	movs	r1, #52	; 0x34
 800cdb6:	fb01 f303 	mul.w	r3, r1, r3
 800cdba:	4413      	add	r3, r2
 800cdbc:	3390      	adds	r3, #144	; 0x90
 800cdbe:	2206      	movs	r2, #6
 800cdc0:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800cdc2:	7afb      	ldrb	r3, [r7, #11]
 800cdc4:	b29a      	uxth	r2, r3
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800cdcc:	7af9      	ldrb	r1, [r7, #11]
 800cdce:	6a3b      	ldr	r3, [r7, #32]
 800cdd0:	9300      	str	r3, [sp, #0]
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	687a      	ldr	r2, [r7, #4]
 800cdd6:	68f8      	ldr	r0, [r7, #12]
 800cdd8:	f000 fe03 	bl	800d9e2 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cde2:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800cde4:	e016      	b.n	800ce14 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800cdec:	693b      	ldr	r3, [r7, #16]
 800cdee:	1ad2      	subs	r2, r2, r3
 800cdf0:	6a3b      	ldr	r3, [r7, #32]
 800cdf2:	f242 7110 	movw	r1, #10000	; 0x2710
 800cdf6:	fb01 f303 	mul.w	r3, r1, r3
 800cdfa:	429a      	cmp	r2, r3
 800cdfc:	d805      	bhi.n	800ce0a <USBH_MSC_Read+0xa8>
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800ce04:	b2db      	uxtb	r3, r3
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d104      	bne.n	800ce14 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800ce0a:	697b      	ldr	r3, [r7, #20]
 800ce0c:	2201      	movs	r2, #1
 800ce0e:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800ce10:	2302      	movs	r3, #2
 800ce12:	e00b      	b.n	800ce2c <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800ce14:	7afb      	ldrb	r3, [r7, #11]
 800ce16:	4619      	mov	r1, r3
 800ce18:	68f8      	ldr	r0, [r7, #12]
 800ce1a:	f7ff fe64 	bl	800cae6 <USBH_MSC_RdWrProcess>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	2b01      	cmp	r3, #1
 800ce22:	d0e0      	beq.n	800cde6 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800ce24:	697b      	ldr	r3, [r7, #20]
 800ce26:	2201      	movs	r2, #1
 800ce28:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800ce2a:	2300      	movs	r3, #0
}
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	3718      	adds	r7, #24
 800ce30:	46bd      	mov	sp, r7
 800ce32:	bd80      	pop	{r7, pc}

0800ce34 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b088      	sub	sp, #32
 800ce38:	af02      	add	r7, sp, #8
 800ce3a:	60f8      	str	r0, [r7, #12]
 800ce3c:	607a      	str	r2, [r7, #4]
 800ce3e:	603b      	str	r3, [r7, #0]
 800ce40:	460b      	mov	r3, r1
 800ce42:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ce4a:	69db      	ldr	r3, [r3, #28]
 800ce4c:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800ce54:	b2db      	uxtb	r3, r3
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d00e      	beq.n	800ce78 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	781b      	ldrb	r3, [r3, #0]
 800ce5e:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800ce60:	2b0b      	cmp	r3, #11
 800ce62:	d109      	bne.n	800ce78 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800ce64:	7afb      	ldrb	r3, [r7, #11]
 800ce66:	697a      	ldr	r2, [r7, #20]
 800ce68:	2134      	movs	r1, #52	; 0x34
 800ce6a:	fb01 f303 	mul.w	r3, r1, r3
 800ce6e:	4413      	add	r3, r2
 800ce70:	3390      	adds	r3, #144	; 0x90
 800ce72:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800ce74:	2b01      	cmp	r3, #1
 800ce76:	d001      	beq.n	800ce7c <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800ce78:	2302      	movs	r3, #2
 800ce7a:	e040      	b.n	800cefe <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800ce7c:	697b      	ldr	r3, [r7, #20]
 800ce7e:	2207      	movs	r2, #7
 800ce80:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800ce82:	7afb      	ldrb	r3, [r7, #11]
 800ce84:	697a      	ldr	r2, [r7, #20]
 800ce86:	2134      	movs	r1, #52	; 0x34
 800ce88:	fb01 f303 	mul.w	r3, r1, r3
 800ce8c:	4413      	add	r3, r2
 800ce8e:	3390      	adds	r3, #144	; 0x90
 800ce90:	2207      	movs	r2, #7
 800ce92:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800ce94:	7afb      	ldrb	r3, [r7, #11]
 800ce96:	b29a      	uxth	r2, r3
 800ce98:	697b      	ldr	r3, [r7, #20]
 800ce9a:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800ce9e:	7af9      	ldrb	r1, [r7, #11]
 800cea0:	6a3b      	ldr	r3, [r7, #32]
 800cea2:	9300      	str	r3, [sp, #0]
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	687a      	ldr	r2, [r7, #4]
 800cea8:	68f8      	ldr	r0, [r7, #12]
 800ceaa:	f000 fd2f 	bl	800d90c <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ceb4:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800ceb6:	e016      	b.n	800cee6 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800cebe:	693b      	ldr	r3, [r7, #16]
 800cec0:	1ad2      	subs	r2, r2, r3
 800cec2:	6a3b      	ldr	r3, [r7, #32]
 800cec4:	f242 7110 	movw	r1, #10000	; 0x2710
 800cec8:	fb01 f303 	mul.w	r3, r1, r3
 800cecc:	429a      	cmp	r2, r3
 800cece:	d805      	bhi.n	800cedc <USBH_MSC_Write+0xa8>
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800ced6:	b2db      	uxtb	r3, r3
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d104      	bne.n	800cee6 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800cedc:	697b      	ldr	r3, [r7, #20]
 800cede:	2201      	movs	r2, #1
 800cee0:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800cee2:	2302      	movs	r3, #2
 800cee4:	e00b      	b.n	800cefe <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800cee6:	7afb      	ldrb	r3, [r7, #11]
 800cee8:	4619      	mov	r1, r3
 800ceea:	68f8      	ldr	r0, [r7, #12]
 800ceec:	f7ff fdfb 	bl	800cae6 <USBH_MSC_RdWrProcess>
 800cef0:	4603      	mov	r3, r0
 800cef2:	2b01      	cmp	r3, #1
 800cef4:	d0e0      	beq.n	800ceb8 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	2201      	movs	r2, #1
 800cefa:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800cefc:	2300      	movs	r3, #0
}
 800cefe:	4618      	mov	r0, r3
 800cf00:	3718      	adds	r7, #24
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}

0800cf06 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800cf06:	b580      	push	{r7, lr}
 800cf08:	b082      	sub	sp, #8
 800cf0a:	af00      	add	r7, sp, #0
 800cf0c:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2221      	movs	r2, #33	; 0x21
 800cf12:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	22ff      	movs	r2, #255	; 0xff
 800cf18:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2200      	movs	r2, #0
 800cf24:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2200      	movs	r2, #0
 800cf2a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	2100      	movs	r1, #0
 800cf30:	6878      	ldr	r0, [r7, #4]
 800cf32:	f002 f873 	bl	800f01c <USBH_CtlReq>
 800cf36:	4603      	mov	r3, r0
}
 800cf38:	4618      	mov	r0, r3
 800cf3a:	3708      	adds	r7, #8
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bd80      	pop	{r7, pc}

0800cf40 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b082      	sub	sp, #8
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
 800cf48:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	22a1      	movs	r2, #161	; 0xa1
 800cf4e:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	22fe      	movs	r2, #254	; 0xfe
 800cf54:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2200      	movs	r2, #0
 800cf5a:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2200      	movs	r2, #0
 800cf60:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2201      	movs	r2, #1
 800cf66:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800cf68:	2201      	movs	r2, #1
 800cf6a:	6839      	ldr	r1, [r7, #0]
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f002 f855 	bl	800f01c <USBH_CtlReq>
 800cf72:	4603      	mov	r3, r0
}
 800cf74:	4618      	mov	r0, r3
 800cf76:	3708      	adds	r7, #8
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}

0800cf7c <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b085      	sub	sp, #20
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cf8a:	69db      	ldr	r3, [r3, #28]
 800cf8c:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	4a09      	ldr	r2, [pc, #36]	; (800cfb8 <USBH_MSC_BOT_Init+0x3c>)
 800cf92:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	4a09      	ldr	r2, [pc, #36]	; (800cfbc <USBH_MSC_BOT_Init+0x40>)
 800cf98:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	2201      	movs	r2, #1
 800cf9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	2201      	movs	r2, #1
 800cfa6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800cfaa:	2300      	movs	r3, #0
}
 800cfac:	4618      	mov	r0, r3
 800cfae:	3714      	adds	r7, #20
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb6:	4770      	bx	lr
 800cfb8:	43425355 	.word	0x43425355
 800cfbc:	20304050 	.word	0x20304050

0800cfc0 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b088      	sub	sp, #32
 800cfc4:	af02      	add	r7, sp, #8
 800cfc6:	6078      	str	r0, [r7, #4]
 800cfc8:	460b      	mov	r3, r1
 800cfca:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800cfcc:	2301      	movs	r3, #1
 800cfce:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800cfd0:	2301      	movs	r3, #1
 800cfd2:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800cfd4:	2301      	movs	r3, #1
 800cfd6:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800cfd8:	2300      	movs	r3, #0
 800cfda:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cfe2:	69db      	ldr	r3, [r3, #28]
 800cfe4:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800cfea:	693b      	ldr	r3, [r7, #16]
 800cfec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800cff0:	3b01      	subs	r3, #1
 800cff2:	2b0a      	cmp	r3, #10
 800cff4:	f200 822a 	bhi.w	800d44c <USBH_MSC_BOT_Process+0x48c>
 800cff8:	a201      	add	r2, pc, #4	; (adr r2, 800d000 <USBH_MSC_BOT_Process+0x40>)
 800cffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cffe:	bf00      	nop
 800d000:	0800d02d 	.word	0x0800d02d
 800d004:	0800d055 	.word	0x0800d055
 800d008:	0800d113 	.word	0x0800d113
 800d00c:	0800d131 	.word	0x0800d131
 800d010:	0800d1ed 	.word	0x0800d1ed
 800d014:	0800d20f 	.word	0x0800d20f
 800d018:	0800d2fb 	.word	0x0800d2fb
 800d01c:	0800d317 	.word	0x0800d317
 800d020:	0800d3a1 	.word	0x0800d3a1
 800d024:	0800d3d1 	.word	0x0800d3d1
 800d028:	0800d433 	.word	0x0800d433
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800d02c:	693b      	ldr	r3, [r7, #16]
 800d02e:	78fa      	ldrb	r2, [r7, #3]
 800d030:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800d034:	693b      	ldr	r3, [r7, #16]
 800d036:	2202      	movs	r2, #2
 800d038:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800d03c:	693b      	ldr	r3, [r7, #16]
 800d03e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800d042:	693b      	ldr	r3, [r7, #16]
 800d044:	795b      	ldrb	r3, [r3, #5]
 800d046:	2201      	movs	r2, #1
 800d048:	9200      	str	r2, [sp, #0]
 800d04a:	221f      	movs	r2, #31
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f002 fae4 	bl	800f61a <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800d052:	e20a      	b.n	800d46a <USBH_MSC_BOT_Process+0x4aa>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800d054:	693b      	ldr	r3, [r7, #16]
 800d056:	795b      	ldrb	r3, [r3, #5]
 800d058:	4619      	mov	r1, r3
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	f005 fdec 	bl	8012c38 <USBH_LL_GetURBState>
 800d060:	4603      	mov	r3, r0
 800d062:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800d064:	7d3b      	ldrb	r3, [r7, #20]
 800d066:	2b01      	cmp	r3, #1
 800d068:	d126      	bne.n	800d0b8 <USBH_MSC_BOT_Process+0xf8>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800d06a:	693b      	ldr	r3, [r7, #16]
 800d06c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d00f      	beq.n	800d092 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800d072:	693b      	ldr	r3, [r7, #16]
 800d074:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800d078:	b25b      	sxtb	r3, r3
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	da04      	bge.n	800d088 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800d07e:	693b      	ldr	r3, [r7, #16]
 800d080:	2203      	movs	r2, #3
 800d082:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800d086:	e008      	b.n	800d09a <USBH_MSC_BOT_Process+0xda>
          }
          else
          {
            /* Data Direction is OUT */
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800d088:	693b      	ldr	r3, [r7, #16]
 800d08a:	2205      	movs	r2, #5
 800d08c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800d090:	e003      	b.n	800d09a <USBH_MSC_BOT_Process+0xda>
        }

        else
        {
          /* If there is NO Data Transfer Stage */
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800d092:	693b      	ldr	r3, [r7, #16]
 800d094:	2207      	movs	r2, #7
 800d096:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	2202      	movs	r2, #2
 800d09e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	4619      	mov	r1, r3
 800d0b2:	f002 fd01 	bl	800fab8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d0b6:	e1cb      	b.n	800d450 <USBH_MSC_BOT_Process+0x490>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d0b8:	7d3b      	ldrb	r3, [r7, #20]
 800d0ba:	2b02      	cmp	r3, #2
 800d0bc:	d112      	bne.n	800d0e4 <USBH_MSC_BOT_Process+0x124>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d0be:	693b      	ldr	r3, [r7, #16]
 800d0c0:	2201      	movs	r2, #1
 800d0c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2202      	movs	r2, #2
 800d0ca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d0da:	2200      	movs	r2, #0
 800d0dc:	4619      	mov	r1, r3
 800d0de:	f002 fceb 	bl	800fab8 <osMessagePut>
      break;
 800d0e2:	e1b5      	b.n	800d450 <USBH_MSC_BOT_Process+0x490>
        if (URB_Status == USBH_URB_STALL)
 800d0e4:	7d3b      	ldrb	r3, [r7, #20]
 800d0e6:	2b05      	cmp	r3, #5
 800d0e8:	f040 81b2 	bne.w	800d450 <USBH_MSC_BOT_Process+0x490>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800d0ec:	693b      	ldr	r3, [r7, #16]
 800d0ee:	220a      	movs	r2, #10
 800d0f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2202      	movs	r2, #2
 800d0f8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d108:	2200      	movs	r2, #0
 800d10a:	4619      	mov	r1, r3
 800d10c:	f002 fcd4 	bl	800fab8 <osMessagePut>
      break;
 800d110:	e19e      	b.n	800d450 <USBH_MSC_BOT_Process+0x490>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800d112:	693b      	ldr	r3, [r7, #16]
 800d114:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800d118:	693b      	ldr	r3, [r7, #16]
 800d11a:	895a      	ldrh	r2, [r3, #10]
 800d11c:	693b      	ldr	r3, [r7, #16]
 800d11e:	791b      	ldrb	r3, [r3, #4]
 800d120:	6878      	ldr	r0, [r7, #4]
 800d122:	f002 fa9f 	bl	800f664 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800d126:	693b      	ldr	r3, [r7, #16]
 800d128:	2204      	movs	r2, #4
 800d12a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800d12e:	e19c      	b.n	800d46a <USBH_MSC_BOT_Process+0x4aa>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800d130:	693b      	ldr	r3, [r7, #16]
 800d132:	791b      	ldrb	r3, [r3, #4]
 800d134:	4619      	mov	r1, r3
 800d136:	6878      	ldr	r0, [r7, #4]
 800d138:	f005 fd7e 	bl	8012c38 <USBH_LL_GetURBState>
 800d13c:	4603      	mov	r3, r0
 800d13e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800d140:	7d3b      	ldrb	r3, [r7, #20]
 800d142:	2b01      	cmp	r3, #1
 800d144:	d13b      	bne.n	800d1be <USBH_MSC_BOT_Process+0x1fe>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800d146:	693b      	ldr	r3, [r7, #16]
 800d148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d14a:	693a      	ldr	r2, [r7, #16]
 800d14c:	8952      	ldrh	r2, [r2, #10]
 800d14e:	4293      	cmp	r3, r2
 800d150:	d910      	bls.n	800d174 <USBH_MSC_BOT_Process+0x1b4>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800d152:	693b      	ldr	r3, [r7, #16]
 800d154:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d158:	693a      	ldr	r2, [r7, #16]
 800d15a:	8952      	ldrh	r2, [r2, #10]
 800d15c:	441a      	add	r2, r3
 800d15e:	693b      	ldr	r3, [r7, #16]
 800d160:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800d164:	693b      	ldr	r3, [r7, #16]
 800d166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d168:	693a      	ldr	r2, [r7, #16]
 800d16a:	8952      	ldrh	r2, [r2, #10]
 800d16c:	1a9a      	subs	r2, r3, r2
 800d16e:	693b      	ldr	r3, [r7, #16]
 800d170:	65da      	str	r2, [r3, #92]	; 0x5c
 800d172:	e002      	b.n	800d17a <USBH_MSC_BOT_Process+0x1ba>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800d174:	693b      	ldr	r3, [r7, #16]
 800d176:	2200      	movs	r2, #0
 800d178:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800d17a:	693b      	ldr	r3, [r7, #16]
 800d17c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d00a      	beq.n	800d198 <USBH_MSC_BOT_Process+0x1d8>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800d182:	693b      	ldr	r3, [r7, #16]
 800d184:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800d188:	693b      	ldr	r3, [r7, #16]
 800d18a:	895a      	ldrh	r2, [r3, #10]
 800d18c:	693b      	ldr	r3, [r7, #16]
 800d18e:	791b      	ldrb	r3, [r3, #4]
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f002 fa67 	bl	800f664 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800d196:	e15d      	b.n	800d454 <USBH_MSC_BOT_Process+0x494>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800d198:	693b      	ldr	r3, [r7, #16]
 800d19a:	2207      	movs	r2, #7
 800d19c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2202      	movs	r2, #2
 800d1a4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	4619      	mov	r1, r3
 800d1b8:	f002 fc7e 	bl	800fab8 <osMessagePut>
      break;
 800d1bc:	e14a      	b.n	800d454 <USBH_MSC_BOT_Process+0x494>
      else if (URB_Status == USBH_URB_STALL)
 800d1be:	7d3b      	ldrb	r3, [r7, #20]
 800d1c0:	2b05      	cmp	r3, #5
 800d1c2:	f040 8147 	bne.w	800d454 <USBH_MSC_BOT_Process+0x494>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800d1c6:	693b      	ldr	r3, [r7, #16]
 800d1c8:	2209      	movs	r2, #9
 800d1ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2202      	movs	r2, #2
 800d1d2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	4619      	mov	r1, r3
 800d1e6:	f002 fc67 	bl	800fab8 <osMessagePut>
      break;
 800d1ea:	e133      	b.n	800d454 <USBH_MSC_BOT_Process+0x494>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800d1ec:	693b      	ldr	r3, [r7, #16]
 800d1ee:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800d1f2:	693b      	ldr	r3, [r7, #16]
 800d1f4:	891a      	ldrh	r2, [r3, #8]
 800d1f6:	693b      	ldr	r3, [r7, #16]
 800d1f8:	795b      	ldrb	r3, [r3, #5]
 800d1fa:	2001      	movs	r0, #1
 800d1fc:	9000      	str	r0, [sp, #0]
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	f002 fa0b 	bl	800f61a <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800d204:	693b      	ldr	r3, [r7, #16]
 800d206:	2206      	movs	r2, #6
 800d208:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800d20c:	e12d      	b.n	800d46a <USBH_MSC_BOT_Process+0x4aa>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800d20e:	693b      	ldr	r3, [r7, #16]
 800d210:	795b      	ldrb	r3, [r3, #5]
 800d212:	4619      	mov	r1, r3
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f005 fd0f 	bl	8012c38 <USBH_LL_GetURBState>
 800d21a:	4603      	mov	r3, r0
 800d21c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800d21e:	7d3b      	ldrb	r3, [r7, #20]
 800d220:	2b01      	cmp	r3, #1
 800d222:	d13d      	bne.n	800d2a0 <USBH_MSC_BOT_Process+0x2e0>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800d224:	693b      	ldr	r3, [r7, #16]
 800d226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d228:	693a      	ldr	r2, [r7, #16]
 800d22a:	8912      	ldrh	r2, [r2, #8]
 800d22c:	4293      	cmp	r3, r2
 800d22e:	d910      	bls.n	800d252 <USBH_MSC_BOT_Process+0x292>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800d230:	693b      	ldr	r3, [r7, #16]
 800d232:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d236:	693a      	ldr	r2, [r7, #16]
 800d238:	8912      	ldrh	r2, [r2, #8]
 800d23a:	441a      	add	r2, r3
 800d23c:	693b      	ldr	r3, [r7, #16]
 800d23e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800d242:	693b      	ldr	r3, [r7, #16]
 800d244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d246:	693a      	ldr	r2, [r7, #16]
 800d248:	8912      	ldrh	r2, [r2, #8]
 800d24a:	1a9a      	subs	r2, r3, r2
 800d24c:	693b      	ldr	r3, [r7, #16]
 800d24e:	65da      	str	r2, [r3, #92]	; 0x5c
 800d250:	e002      	b.n	800d258 <USBH_MSC_BOT_Process+0x298>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800d252:	693b      	ldr	r3, [r7, #16]
 800d254:	2200      	movs	r2, #0
 800d256:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800d258:	693b      	ldr	r3, [r7, #16]
 800d25a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d00c      	beq.n	800d27a <USBH_MSC_BOT_Process+0x2ba>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800d260:	693b      	ldr	r3, [r7, #16]
 800d262:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800d266:	693b      	ldr	r3, [r7, #16]
 800d268:	891a      	ldrh	r2, [r3, #8]
 800d26a:	693b      	ldr	r3, [r7, #16]
 800d26c:	795b      	ldrb	r3, [r3, #5]
 800d26e:	2001      	movs	r0, #1
 800d270:	9000      	str	r0, [sp, #0]
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f002 f9d1 	bl	800f61a <USBH_BulkSendData>
 800d278:	e003      	b.n	800d282 <USBH_MSC_BOT_Process+0x2c2>
                                  MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);
        }
        else
        {
          /* If value was 0, and successful transfer, then change the state */
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800d27a:	693b      	ldr	r3, [r7, #16]
 800d27c:	2207      	movs	r2, #7
 800d27e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	2202      	movs	r2, #2
 800d286:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d296:	2200      	movs	r2, #0
 800d298:	4619      	mov	r1, r3
 800d29a:	f002 fc0d 	bl	800fab8 <osMessagePut>
#endif
      }
      else
      {
      }
      break;
 800d29e:	e0db      	b.n	800d458 <USBH_MSC_BOT_Process+0x498>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d2a0:	7d3b      	ldrb	r3, [r7, #20]
 800d2a2:	2b02      	cmp	r3, #2
 800d2a4:	d112      	bne.n	800d2cc <USBH_MSC_BOT_Process+0x30c>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800d2a6:	693b      	ldr	r3, [r7, #16]
 800d2a8:	2205      	movs	r2, #5
 800d2aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	2202      	movs	r2, #2
 800d2b2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	4619      	mov	r1, r3
 800d2c6:	f002 fbf7 	bl	800fab8 <osMessagePut>
      break;
 800d2ca:	e0c5      	b.n	800d458 <USBH_MSC_BOT_Process+0x498>
      else if (URB_Status == USBH_URB_STALL)
 800d2cc:	7d3b      	ldrb	r3, [r7, #20]
 800d2ce:	2b05      	cmp	r3, #5
 800d2d0:	f040 80c2 	bne.w	800d458 <USBH_MSC_BOT_Process+0x498>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800d2d4:	693b      	ldr	r3, [r7, #16]
 800d2d6:	220a      	movs	r2, #10
 800d2d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2202      	movs	r2, #2
 800d2e0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	4619      	mov	r1, r3
 800d2f4:	f002 fbe0 	bl	800fab8 <osMessagePut>
      break;
 800d2f8:	e0ae      	b.n	800d458 <USBH_MSC_BOT_Process+0x498>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800d2fa:	693b      	ldr	r3, [r7, #16]
 800d2fc:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800d300:	693b      	ldr	r3, [r7, #16]
 800d302:	791b      	ldrb	r3, [r3, #4]
 800d304:	220d      	movs	r2, #13
 800d306:	6878      	ldr	r0, [r7, #4]
 800d308:	f002 f9ac 	bl	800f664 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800d30c:	693b      	ldr	r3, [r7, #16]
 800d30e:	2208      	movs	r2, #8
 800d310:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800d314:	e0a9      	b.n	800d46a <USBH_MSC_BOT_Process+0x4aa>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800d316:	693b      	ldr	r3, [r7, #16]
 800d318:	791b      	ldrb	r3, [r3, #4]
 800d31a:	4619      	mov	r1, r3
 800d31c:	6878      	ldr	r0, [r7, #4]
 800d31e:	f005 fc8b 	bl	8012c38 <USBH_LL_GetURBState>
 800d322:	4603      	mov	r3, r0
 800d324:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800d326:	7d3b      	ldrb	r3, [r7, #20]
 800d328:	2b01      	cmp	r3, #1
 800d32a:	d123      	bne.n	800d374 <USBH_MSC_BOT_Process+0x3b4>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d32c:	693b      	ldr	r3, [r7, #16]
 800d32e:	2201      	movs	r2, #1
 800d330:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800d334:	693b      	ldr	r3, [r7, #16]
 800d336:	2201      	movs	r2, #1
 800d338:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800d33c:	6878      	ldr	r0, [r7, #4]
 800d33e:	f000 f8c5 	bl	800d4cc <USBH_MSC_DecodeCSW>
 800d342:	4603      	mov	r3, r0
 800d344:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800d346:	7d7b      	ldrb	r3, [r7, #21]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d102      	bne.n	800d352 <USBH_MSC_BOT_Process+0x392>
        {
          status = USBH_OK;
 800d34c:	2300      	movs	r3, #0
 800d34e:	75fb      	strb	r3, [r7, #23]
 800d350:	e001      	b.n	800d356 <USBH_MSC_BOT_Process+0x396>
        }
        else
        {
          status = USBH_FAIL;
 800d352:	2302      	movs	r3, #2
 800d354:	75fb      	strb	r3, [r7, #23]
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	2202      	movs	r2, #2
 800d35a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d36a:	2200      	movs	r2, #0
 800d36c:	4619      	mov	r1, r3
 800d36e:	f002 fba3 	bl	800fab8 <osMessagePut>
#endif
      }
      else
      {
      }
      break;
 800d372:	e073      	b.n	800d45c <USBH_MSC_BOT_Process+0x49c>
      else if (URB_Status == USBH_URB_STALL)
 800d374:	7d3b      	ldrb	r3, [r7, #20]
 800d376:	2b05      	cmp	r3, #5
 800d378:	d170      	bne.n	800d45c <USBH_MSC_BOT_Process+0x49c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800d37a:	693b      	ldr	r3, [r7, #16]
 800d37c:	2209      	movs	r2, #9
 800d37e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2202      	movs	r2, #2
 800d386:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d396:	2200      	movs	r2, #0
 800d398:	4619      	mov	r1, r3
 800d39a:	f002 fb8d 	bl	800fab8 <osMessagePut>
      break;
 800d39e:	e05d      	b.n	800d45c <USBH_MSC_BOT_Process+0x49c>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800d3a0:	78fb      	ldrb	r3, [r7, #3]
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	4619      	mov	r1, r3
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	f000 f864 	bl	800d474 <USBH_MSC_BOT_Abort>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800d3b0:	7dbb      	ldrb	r3, [r7, #22]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d104      	bne.n	800d3c0 <USBH_MSC_BOT_Process+0x400>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800d3b6:	693b      	ldr	r3, [r7, #16]
 800d3b8:	2207      	movs	r2, #7
 800d3ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800d3be:	e04f      	b.n	800d460 <USBH_MSC_BOT_Process+0x4a0>
      else if (error == USBH_UNRECOVERED_ERROR)
 800d3c0:	7dbb      	ldrb	r3, [r7, #22]
 800d3c2:	2b04      	cmp	r3, #4
 800d3c4:	d14c      	bne.n	800d460 <USBH_MSC_BOT_Process+0x4a0>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800d3c6:	693b      	ldr	r3, [r7, #16]
 800d3c8:	220b      	movs	r2, #11
 800d3ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800d3ce:	e047      	b.n	800d460 <USBH_MSC_BOT_Process+0x4a0>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800d3d0:	78fb      	ldrb	r3, [r7, #3]
 800d3d2:	2201      	movs	r2, #1
 800d3d4:	4619      	mov	r1, r3
 800d3d6:	6878      	ldr	r0, [r7, #4]
 800d3d8:	f000 f84c 	bl	800d474 <USBH_MSC_BOT_Abort>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800d3e0:	7dbb      	ldrb	r3, [r7, #22]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d11d      	bne.n	800d422 <USBH_MSC_BOT_Process+0x462>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800d3e6:	693b      	ldr	r3, [r7, #16]
 800d3e8:	795b      	ldrb	r3, [r3, #5]
 800d3ea:	4619      	mov	r1, r3
 800d3ec:	6878      	ldr	r0, [r7, #4]
 800d3ee:	f005 fc7d 	bl	8012cec <USBH_LL_GetToggle>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800d3f6:	693b      	ldr	r3, [r7, #16]
 800d3f8:	7959      	ldrb	r1, [r3, #5]
 800d3fa:	7bfb      	ldrb	r3, [r7, #15]
 800d3fc:	f1c3 0301 	rsb	r3, r3, #1
 800d400:	b2db      	uxtb	r3, r3
 800d402:	461a      	mov	r2, r3
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	f005 fc41 	bl	8012c8c <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800d40a:	693b      	ldr	r3, [r7, #16]
 800d40c:	791b      	ldrb	r3, [r3, #4]
 800d40e:	2200      	movs	r2, #0
 800d410:	4619      	mov	r1, r3
 800d412:	6878      	ldr	r0, [r7, #4]
 800d414:	f005 fc3a 	bl	8012c8c <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800d418:	693b      	ldr	r3, [r7, #16]
 800d41a:	2209      	movs	r2, #9
 800d41c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800d420:	e020      	b.n	800d464 <USBH_MSC_BOT_Process+0x4a4>
        if (error == USBH_UNRECOVERED_ERROR)
 800d422:	7dbb      	ldrb	r3, [r7, #22]
 800d424:	2b04      	cmp	r3, #4
 800d426:	d11d      	bne.n	800d464 <USBH_MSC_BOT_Process+0x4a4>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800d428:	693b      	ldr	r3, [r7, #16]
 800d42a:	220b      	movs	r2, #11
 800d42c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800d430:	e018      	b.n	800d464 <USBH_MSC_BOT_Process+0x4a4>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	f7ff fd67 	bl	800cf06 <USBH_MSC_BOT_REQ_Reset>
 800d438:	4603      	mov	r3, r0
 800d43a:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800d43c:	7dfb      	ldrb	r3, [r7, #23]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d112      	bne.n	800d468 <USBH_MSC_BOT_Process+0x4a8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d442:	693b      	ldr	r3, [r7, #16]
 800d444:	2201      	movs	r2, #1
 800d446:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800d44a:	e00d      	b.n	800d468 <USBH_MSC_BOT_Process+0x4a8>

    default:
      break;
 800d44c:	bf00      	nop
 800d44e:	e00c      	b.n	800d46a <USBH_MSC_BOT_Process+0x4aa>
      break;
 800d450:	bf00      	nop
 800d452:	e00a      	b.n	800d46a <USBH_MSC_BOT_Process+0x4aa>
      break;
 800d454:	bf00      	nop
 800d456:	e008      	b.n	800d46a <USBH_MSC_BOT_Process+0x4aa>
      break;
 800d458:	bf00      	nop
 800d45a:	e006      	b.n	800d46a <USBH_MSC_BOT_Process+0x4aa>
      break;
 800d45c:	bf00      	nop
 800d45e:	e004      	b.n	800d46a <USBH_MSC_BOT_Process+0x4aa>
      break;
 800d460:	bf00      	nop
 800d462:	e002      	b.n	800d46a <USBH_MSC_BOT_Process+0x4aa>
      break;
 800d464:	bf00      	nop
 800d466:	e000      	b.n	800d46a <USBH_MSC_BOT_Process+0x4aa>
      break;
 800d468:	bf00      	nop
  }
  return status;
 800d46a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d46c:	4618      	mov	r0, r3
 800d46e:	3718      	adds	r7, #24
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}

0800d474 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b084      	sub	sp, #16
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
 800d47c:	460b      	mov	r3, r1
 800d47e:	70fb      	strb	r3, [r7, #3]
 800d480:	4613      	mov	r3, r2
 800d482:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800d484:	2302      	movs	r3, #2
 800d486:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d48e:	69db      	ldr	r3, [r3, #28]
 800d490:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800d492:	78bb      	ldrb	r3, [r7, #2]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d002      	beq.n	800d49e <USBH_MSC_BOT_Abort+0x2a>
 800d498:	2b01      	cmp	r3, #1
 800d49a:	d009      	beq.n	800d4b0 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800d49c:	e011      	b.n	800d4c2 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800d49e:	68bb      	ldr	r3, [r7, #8]
 800d4a0:	79db      	ldrb	r3, [r3, #7]
 800d4a2:	4619      	mov	r1, r3
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	f001 faea 	bl	800ea7e <USBH_ClrFeature>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	73fb      	strb	r3, [r7, #15]
      break;
 800d4ae:	e008      	b.n	800d4c2 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	799b      	ldrb	r3, [r3, #6]
 800d4b4:	4619      	mov	r1, r3
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	f001 fae1 	bl	800ea7e <USBH_ClrFeature>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	73fb      	strb	r3, [r7, #15]
      break;
 800d4c0:	bf00      	nop
  }
  return status;
 800d4c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	3710      	adds	r7, #16
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}

0800d4cc <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b084      	sub	sp, #16
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d4da:	69db      	ldr	r3, [r3, #28]
 800d4dc:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800d4de:	2301      	movs	r3, #1
 800d4e0:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	791b      	ldrb	r3, [r3, #4]
 800d4e6:	4619      	mov	r1, r3
 800d4e8:	6878      	ldr	r0, [r7, #4]
 800d4ea:	f005 fb13 	bl	8012b14 <USBH_LL_GetLastXferSize>
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	2b0d      	cmp	r3, #13
 800d4f2:	d002      	beq.n	800d4fa <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800d4f4:	2302      	movs	r3, #2
 800d4f6:	73fb      	strb	r3, [r7, #15]
 800d4f8:	e024      	b.n	800d544 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800d4fa:	68bb      	ldr	r3, [r7, #8]
 800d4fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d4fe:	4a14      	ldr	r2, [pc, #80]	; (800d550 <USBH_MSC_DecodeCSW+0x84>)
 800d500:	4293      	cmp	r3, r2
 800d502:	d11d      	bne.n	800d540 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800d504:	68bb      	ldr	r3, [r7, #8]
 800d506:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800d508:	68bb      	ldr	r3, [r7, #8]
 800d50a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d50c:	429a      	cmp	r2, r3
 800d50e:	d119      	bne.n	800d544 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800d510:	68bb      	ldr	r3, [r7, #8]
 800d512:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d516:	2b00      	cmp	r3, #0
 800d518:	d102      	bne.n	800d520 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800d51a:	2300      	movs	r3, #0
 800d51c:	73fb      	strb	r3, [r7, #15]
 800d51e:	e011      	b.n	800d544 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d526:	2b01      	cmp	r3, #1
 800d528:	d102      	bne.n	800d530 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800d52a:	2301      	movs	r3, #1
 800d52c:	73fb      	strb	r3, [r7, #15]
 800d52e:	e009      	b.n	800d544 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d536:	2b02      	cmp	r3, #2
 800d538:	d104      	bne.n	800d544 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800d53a:	2302      	movs	r3, #2
 800d53c:	73fb      	strb	r3, [r7, #15]
 800d53e:	e001      	b.n	800d544 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800d540:	2302      	movs	r3, #2
 800d542:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800d544:	7bfb      	ldrb	r3, [r7, #15]
}
 800d546:	4618      	mov	r0, r3
 800d548:	3710      	adds	r7, #16
 800d54a:	46bd      	mov	sp, r7
 800d54c:	bd80      	pop	{r7, pc}
 800d54e:	bf00      	nop
 800d550:	53425355 	.word	0x53425355

0800d554 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b084      	sub	sp, #16
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
 800d55c:	460b      	mov	r3, r1
 800d55e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800d560:	2302      	movs	r3, #2
 800d562:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d56a:	69db      	ldr	r3, [r3, #28]
 800d56c:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800d56e:	68bb      	ldr	r3, [r7, #8]
 800d570:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800d574:	2b01      	cmp	r3, #1
 800d576:	d002      	beq.n	800d57e <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800d578:	2b02      	cmp	r3, #2
 800d57a:	d021      	beq.n	800d5c0 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800d57c:	e028      	b.n	800d5d0 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800d57e:	68bb      	ldr	r3, [r7, #8]
 800d580:	2200      	movs	r2, #0
 800d582:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	2200      	movs	r2, #0
 800d588:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	220a      	movs	r2, #10
 800d590:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800d594:	68bb      	ldr	r3, [r7, #8]
 800d596:	3363      	adds	r3, #99	; 0x63
 800d598:	2210      	movs	r2, #16
 800d59a:	2100      	movs	r1, #0
 800d59c:	4618      	mov	r0, r3
 800d59e:	f005 fc71 	bl	8012e84 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800d5a2:	68bb      	ldr	r3, [r7, #8]
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d5aa:	68bb      	ldr	r3, [r7, #8]
 800d5ac:	2201      	movs	r2, #1
 800d5ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	2202      	movs	r2, #2
 800d5b6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	73fb      	strb	r3, [r7, #15]
      break;
 800d5be:	e007      	b.n	800d5d0 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800d5c0:	78fb      	ldrb	r3, [r7, #3]
 800d5c2:	4619      	mov	r1, r3
 800d5c4:	6878      	ldr	r0, [r7, #4]
 800d5c6:	f7ff fcfb 	bl	800cfc0 <USBH_MSC_BOT_Process>
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	73fb      	strb	r3, [r7, #15]
      break;
 800d5ce:	bf00      	nop
  }

  return error;
 800d5d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	3710      	adds	r7, #16
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	bd80      	pop	{r7, pc}

0800d5da <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800d5da:	b580      	push	{r7, lr}
 800d5dc:	b086      	sub	sp, #24
 800d5de:	af00      	add	r7, sp, #0
 800d5e0:	60f8      	str	r0, [r7, #12]
 800d5e2:	460b      	mov	r3, r1
 800d5e4:	607a      	str	r2, [r7, #4]
 800d5e6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800d5e8:	2301      	movs	r3, #1
 800d5ea:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d5f2:	69db      	ldr	r3, [r3, #28]
 800d5f4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800d5f6:	693b      	ldr	r3, [r7, #16]
 800d5f8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800d5fc:	2b01      	cmp	r3, #1
 800d5fe:	d002      	beq.n	800d606 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800d600:	2b02      	cmp	r3, #2
 800d602:	d027      	beq.n	800d654 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800d604:	e05f      	b.n	800d6c6 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800d606:	693b      	ldr	r3, [r7, #16]
 800d608:	2208      	movs	r2, #8
 800d60a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800d60c:	693b      	ldr	r3, [r7, #16]
 800d60e:	2280      	movs	r2, #128	; 0x80
 800d610:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800d614:	693b      	ldr	r3, [r7, #16]
 800d616:	220a      	movs	r2, #10
 800d618:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800d61c:	693b      	ldr	r3, [r7, #16]
 800d61e:	3363      	adds	r3, #99	; 0x63
 800d620:	2210      	movs	r2, #16
 800d622:	2100      	movs	r1, #0
 800d624:	4618      	mov	r0, r3
 800d626:	f005 fc2d 	bl	8012e84 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800d62a:	693b      	ldr	r3, [r7, #16]
 800d62c:	2225      	movs	r2, #37	; 0x25
 800d62e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d632:	693b      	ldr	r3, [r7, #16]
 800d634:	2201      	movs	r2, #1
 800d636:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800d63a:	693b      	ldr	r3, [r7, #16]
 800d63c:	2202      	movs	r2, #2
 800d63e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800d642:	693b      	ldr	r3, [r7, #16]
 800d644:	f103 0210 	add.w	r2, r3, #16
 800d648:	693b      	ldr	r3, [r7, #16]
 800d64a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800d64e:	2301      	movs	r3, #1
 800d650:	75fb      	strb	r3, [r7, #23]
      break;
 800d652:	e038      	b.n	800d6c6 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800d654:	7afb      	ldrb	r3, [r7, #11]
 800d656:	4619      	mov	r1, r3
 800d658:	68f8      	ldr	r0, [r7, #12]
 800d65a:	f7ff fcb1 	bl	800cfc0 <USBH_MSC_BOT_Process>
 800d65e:	4603      	mov	r3, r0
 800d660:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800d662:	7dfb      	ldrb	r3, [r7, #23]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d12d      	bne.n	800d6c4 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800d668:	693b      	ldr	r3, [r7, #16]
 800d66a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d66e:	3303      	adds	r3, #3
 800d670:	781b      	ldrb	r3, [r3, #0]
 800d672:	461a      	mov	r2, r3
 800d674:	693b      	ldr	r3, [r7, #16]
 800d676:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d67a:	3302      	adds	r3, #2
 800d67c:	781b      	ldrb	r3, [r3, #0]
 800d67e:	021b      	lsls	r3, r3, #8
 800d680:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800d682:	693b      	ldr	r3, [r7, #16]
 800d684:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d688:	3301      	adds	r3, #1
 800d68a:	781b      	ldrb	r3, [r3, #0]
 800d68c:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800d68e:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800d690:	693b      	ldr	r3, [r7, #16]
 800d692:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d696:	781b      	ldrb	r3, [r3, #0]
 800d698:	061b      	lsls	r3, r3, #24
 800d69a:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800d6a0:	693b      	ldr	r3, [r7, #16]
 800d6a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d6a6:	3307      	adds	r3, #7
 800d6a8:	781b      	ldrb	r3, [r3, #0]
 800d6aa:	b29a      	uxth	r2, r3
 800d6ac:	693b      	ldr	r3, [r7, #16]
 800d6ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d6b2:	3306      	adds	r3, #6
 800d6b4:	781b      	ldrb	r3, [r3, #0]
 800d6b6:	b29b      	uxth	r3, r3
 800d6b8:	021b      	lsls	r3, r3, #8
 800d6ba:	b29b      	uxth	r3, r3
 800d6bc:	4313      	orrs	r3, r2
 800d6be:	b29a      	uxth	r2, r3
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	809a      	strh	r2, [r3, #4]
      break;
 800d6c4:	bf00      	nop
  }

  return error;
 800d6c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	3718      	adds	r7, #24
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd80      	pop	{r7, pc}

0800d6d0 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b086      	sub	sp, #24
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	60f8      	str	r0, [r7, #12]
 800d6d8:	460b      	mov	r3, r1
 800d6da:	607a      	str	r2, [r7, #4]
 800d6dc:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800d6de:	2302      	movs	r3, #2
 800d6e0:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d6e8:	69db      	ldr	r3, [r3, #28]
 800d6ea:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800d6ec:	693b      	ldr	r3, [r7, #16]
 800d6ee:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800d6f2:	2b01      	cmp	r3, #1
 800d6f4:	d002      	beq.n	800d6fc <USBH_MSC_SCSI_Inquiry+0x2c>
 800d6f6:	2b02      	cmp	r3, #2
 800d6f8:	d03d      	beq.n	800d776 <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800d6fa:	e089      	b.n	800d810 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800d6fc:	693b      	ldr	r3, [r7, #16]
 800d6fe:	2224      	movs	r2, #36	; 0x24
 800d700:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800d702:	693b      	ldr	r3, [r7, #16]
 800d704:	2280      	movs	r2, #128	; 0x80
 800d706:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800d70a:	693b      	ldr	r3, [r7, #16]
 800d70c:	220a      	movs	r2, #10
 800d70e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800d712:	693b      	ldr	r3, [r7, #16]
 800d714:	3363      	adds	r3, #99	; 0x63
 800d716:	220a      	movs	r2, #10
 800d718:	2100      	movs	r1, #0
 800d71a:	4618      	mov	r0, r3
 800d71c:	f005 fbb2 	bl	8012e84 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800d720:	693b      	ldr	r3, [r7, #16]
 800d722:	2212      	movs	r2, #18
 800d724:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800d728:	7afb      	ldrb	r3, [r7, #11]
 800d72a:	015b      	lsls	r3, r3, #5
 800d72c:	b2da      	uxtb	r2, r3
 800d72e:	693b      	ldr	r3, [r7, #16]
 800d730:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800d734:	693b      	ldr	r3, [r7, #16]
 800d736:	2200      	movs	r2, #0
 800d738:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	2200      	movs	r2, #0
 800d740:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800d744:	693b      	ldr	r3, [r7, #16]
 800d746:	2224      	movs	r2, #36	; 0x24
 800d748:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800d74c:	693b      	ldr	r3, [r7, #16]
 800d74e:	2200      	movs	r2, #0
 800d750:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d754:	693b      	ldr	r3, [r7, #16]
 800d756:	2201      	movs	r2, #1
 800d758:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800d75c:	693b      	ldr	r3, [r7, #16]
 800d75e:	2202      	movs	r2, #2
 800d760:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800d764:	693b      	ldr	r3, [r7, #16]
 800d766:	f103 0210 	add.w	r2, r3, #16
 800d76a:	693b      	ldr	r3, [r7, #16]
 800d76c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800d770:	2301      	movs	r3, #1
 800d772:	75fb      	strb	r3, [r7, #23]
      break;
 800d774:	e04c      	b.n	800d810 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800d776:	7afb      	ldrb	r3, [r7, #11]
 800d778:	4619      	mov	r1, r3
 800d77a:	68f8      	ldr	r0, [r7, #12]
 800d77c:	f7ff fc20 	bl	800cfc0 <USBH_MSC_BOT_Process>
 800d780:	4603      	mov	r3, r0
 800d782:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800d784:	7dfb      	ldrb	r3, [r7, #23]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d141      	bne.n	800d80e <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800d78a:	2222      	movs	r2, #34	; 0x22
 800d78c:	2100      	movs	r1, #0
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f005 fb78 	bl	8012e84 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800d794:	693b      	ldr	r3, [r7, #16]
 800d796:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d79a:	781b      	ldrb	r3, [r3, #0]
 800d79c:	f003 031f 	and.w	r3, r3, #31
 800d7a0:	b2da      	uxtb	r2, r3
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800d7a6:	693b      	ldr	r3, [r7, #16]
 800d7a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7ac:	781b      	ldrb	r3, [r3, #0]
 800d7ae:	095b      	lsrs	r3, r3, #5
 800d7b0:	b2da      	uxtb	r2, r3
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800d7b6:	693b      	ldr	r3, [r7, #16]
 800d7b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7bc:	3301      	adds	r3, #1
 800d7be:	781b      	ldrb	r3, [r3, #0]
 800d7c0:	b25b      	sxtb	r3, r3
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	da03      	bge.n	800d7ce <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	2201      	movs	r2, #1
 800d7ca:	709a      	strb	r2, [r3, #2]
 800d7cc:	e002      	b.n	800d7d4 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	1cd8      	adds	r0, r3, #3
 800d7d8:	693b      	ldr	r3, [r7, #16]
 800d7da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7de:	3308      	adds	r3, #8
 800d7e0:	2208      	movs	r2, #8
 800d7e2:	4619      	mov	r1, r3
 800d7e4:	f005 fb40 	bl	8012e68 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f103 000c 	add.w	r0, r3, #12
 800d7ee:	693b      	ldr	r3, [r7, #16]
 800d7f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7f4:	3310      	adds	r3, #16
 800d7f6:	2210      	movs	r2, #16
 800d7f8:	4619      	mov	r1, r3
 800d7fa:	f005 fb35 	bl	8012e68 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	331d      	adds	r3, #29
 800d802:	693a      	ldr	r2, [r7, #16]
 800d804:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800d808:	3220      	adds	r2, #32
 800d80a:	6812      	ldr	r2, [r2, #0]
 800d80c:	601a      	str	r2, [r3, #0]
      break;
 800d80e:	bf00      	nop
  }

  return error;
 800d810:	7dfb      	ldrb	r3, [r7, #23]
}
 800d812:	4618      	mov	r0, r3
 800d814:	3718      	adds	r7, #24
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}

0800d81a <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800d81a:	b580      	push	{r7, lr}
 800d81c:	b086      	sub	sp, #24
 800d81e:	af00      	add	r7, sp, #0
 800d820:	60f8      	str	r0, [r7, #12]
 800d822:	460b      	mov	r3, r1
 800d824:	607a      	str	r2, [r7, #4]
 800d826:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800d828:	2302      	movs	r3, #2
 800d82a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d832:	69db      	ldr	r3, [r3, #28]
 800d834:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800d836:	693b      	ldr	r3, [r7, #16]
 800d838:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800d83c:	2b01      	cmp	r3, #1
 800d83e:	d002      	beq.n	800d846 <USBH_MSC_SCSI_RequestSense+0x2c>
 800d840:	2b02      	cmp	r3, #2
 800d842:	d03d      	beq.n	800d8c0 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800d844:	e05d      	b.n	800d902 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800d846:	693b      	ldr	r3, [r7, #16]
 800d848:	220e      	movs	r2, #14
 800d84a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800d84c:	693b      	ldr	r3, [r7, #16]
 800d84e:	2280      	movs	r2, #128	; 0x80
 800d850:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800d854:	693b      	ldr	r3, [r7, #16]
 800d856:	220a      	movs	r2, #10
 800d858:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800d85c:	693b      	ldr	r3, [r7, #16]
 800d85e:	3363      	adds	r3, #99	; 0x63
 800d860:	2210      	movs	r2, #16
 800d862:	2100      	movs	r1, #0
 800d864:	4618      	mov	r0, r3
 800d866:	f005 fb0d 	bl	8012e84 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800d86a:	693b      	ldr	r3, [r7, #16]
 800d86c:	2203      	movs	r2, #3
 800d86e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800d872:	7afb      	ldrb	r3, [r7, #11]
 800d874:	015b      	lsls	r3, r3, #5
 800d876:	b2da      	uxtb	r2, r3
 800d878:	693b      	ldr	r3, [r7, #16]
 800d87a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800d87e:	693b      	ldr	r3, [r7, #16]
 800d880:	2200      	movs	r2, #0
 800d882:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800d886:	693b      	ldr	r3, [r7, #16]
 800d888:	2200      	movs	r2, #0
 800d88a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800d88e:	693b      	ldr	r3, [r7, #16]
 800d890:	220e      	movs	r2, #14
 800d892:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800d896:	693b      	ldr	r3, [r7, #16]
 800d898:	2200      	movs	r2, #0
 800d89a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d89e:	693b      	ldr	r3, [r7, #16]
 800d8a0:	2201      	movs	r2, #1
 800d8a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800d8a6:	693b      	ldr	r3, [r7, #16]
 800d8a8:	2202      	movs	r2, #2
 800d8aa:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800d8ae:	693b      	ldr	r3, [r7, #16]
 800d8b0:	f103 0210 	add.w	r2, r3, #16
 800d8b4:	693b      	ldr	r3, [r7, #16]
 800d8b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	75fb      	strb	r3, [r7, #23]
      break;
 800d8be:	e020      	b.n	800d902 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800d8c0:	7afb      	ldrb	r3, [r7, #11]
 800d8c2:	4619      	mov	r1, r3
 800d8c4:	68f8      	ldr	r0, [r7, #12]
 800d8c6:	f7ff fb7b 	bl	800cfc0 <USBH_MSC_BOT_Process>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800d8ce:	7dfb      	ldrb	r3, [r7, #23]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d115      	bne.n	800d900 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800d8d4:	693b      	ldr	r3, [r7, #16]
 800d8d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8da:	3302      	adds	r3, #2
 800d8dc:	781b      	ldrb	r3, [r3, #0]
 800d8de:	f003 030f 	and.w	r3, r3, #15
 800d8e2:	b2da      	uxtb	r2, r3
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800d8e8:	693b      	ldr	r3, [r7, #16]
 800d8ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8ee:	7b1a      	ldrb	r2, [r3, #12]
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800d8f4:	693b      	ldr	r3, [r7, #16]
 800d8f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8fa:	7b5a      	ldrb	r2, [r3, #13]
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	709a      	strb	r2, [r3, #2]
      break;
 800d900:	bf00      	nop
  }

  return error;
 800d902:	7dfb      	ldrb	r3, [r7, #23]
}
 800d904:	4618      	mov	r0, r3
 800d906:	3718      	adds	r7, #24
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}

0800d90c <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b086      	sub	sp, #24
 800d910:	af00      	add	r7, sp, #0
 800d912:	60f8      	str	r0, [r7, #12]
 800d914:	607a      	str	r2, [r7, #4]
 800d916:	603b      	str	r3, [r7, #0]
 800d918:	460b      	mov	r3, r1
 800d91a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800d91c:	2302      	movs	r3, #2
 800d91e:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d926:	69db      	ldr	r3, [r3, #28]
 800d928:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800d92a:	693b      	ldr	r3, [r7, #16]
 800d92c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800d930:	2b01      	cmp	r3, #1
 800d932:	d002      	beq.n	800d93a <USBH_MSC_SCSI_Write+0x2e>
 800d934:	2b02      	cmp	r3, #2
 800d936:	d047      	beq.n	800d9c8 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800d938:	e04e      	b.n	800d9d8 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800d93a:	693b      	ldr	r3, [r7, #16]
 800d93c:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800d940:	461a      	mov	r2, r3
 800d942:	6a3b      	ldr	r3, [r7, #32]
 800d944:	fb03 f202 	mul.w	r2, r3, r2
 800d948:	693b      	ldr	r3, [r7, #16]
 800d94a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800d94c:	693b      	ldr	r3, [r7, #16]
 800d94e:	2200      	movs	r2, #0
 800d950:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800d954:	693b      	ldr	r3, [r7, #16]
 800d956:	220a      	movs	r2, #10
 800d958:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800d95c:	693b      	ldr	r3, [r7, #16]
 800d95e:	3363      	adds	r3, #99	; 0x63
 800d960:	2210      	movs	r2, #16
 800d962:	2100      	movs	r1, #0
 800d964:	4618      	mov	r0, r3
 800d966:	f005 fa8d 	bl	8012e84 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800d96a:	693b      	ldr	r3, [r7, #16]
 800d96c:	222a      	movs	r2, #42	; 0x2a
 800d96e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800d972:	79fa      	ldrb	r2, [r7, #7]
 800d974:	693b      	ldr	r3, [r7, #16]
 800d976:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800d97a:	79ba      	ldrb	r2, [r7, #6]
 800d97c:	693b      	ldr	r3, [r7, #16]
 800d97e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800d982:	797a      	ldrb	r2, [r7, #5]
 800d984:	693b      	ldr	r3, [r7, #16]
 800d986:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800d98a:	1d3b      	adds	r3, r7, #4
 800d98c:	781a      	ldrb	r2, [r3, #0]
 800d98e:	693b      	ldr	r3, [r7, #16]
 800d990:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800d994:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800d998:	693b      	ldr	r3, [r7, #16]
 800d99a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800d99e:	f107 0320 	add.w	r3, r7, #32
 800d9a2:	781a      	ldrb	r2, [r3, #0]
 800d9a4:	693b      	ldr	r3, [r7, #16]
 800d9a6:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d9aa:	693b      	ldr	r3, [r7, #16]
 800d9ac:	2201      	movs	r2, #1
 800d9ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800d9b2:	693b      	ldr	r3, [r7, #16]
 800d9b4:	2202      	movs	r2, #2
 800d9b6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800d9ba:	693b      	ldr	r3, [r7, #16]
 800d9bc:	683a      	ldr	r2, [r7, #0]
 800d9be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800d9c2:	2301      	movs	r3, #1
 800d9c4:	75fb      	strb	r3, [r7, #23]
      break;
 800d9c6:	e007      	b.n	800d9d8 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800d9c8:	7afb      	ldrb	r3, [r7, #11]
 800d9ca:	4619      	mov	r1, r3
 800d9cc:	68f8      	ldr	r0, [r7, #12]
 800d9ce:	f7ff faf7 	bl	800cfc0 <USBH_MSC_BOT_Process>
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	75fb      	strb	r3, [r7, #23]
      break;
 800d9d6:	bf00      	nop
  }

  return error;
 800d9d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9da:	4618      	mov	r0, r3
 800d9dc:	3718      	adds	r7, #24
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}

0800d9e2 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800d9e2:	b580      	push	{r7, lr}
 800d9e4:	b086      	sub	sp, #24
 800d9e6:	af00      	add	r7, sp, #0
 800d9e8:	60f8      	str	r0, [r7, #12]
 800d9ea:	607a      	str	r2, [r7, #4]
 800d9ec:	603b      	str	r3, [r7, #0]
 800d9ee:	460b      	mov	r3, r1
 800d9f0:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800d9f2:	2302      	movs	r3, #2
 800d9f4:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d9fc:	69db      	ldr	r3, [r3, #28]
 800d9fe:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800da00:	693b      	ldr	r3, [r7, #16]
 800da02:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800da06:	2b01      	cmp	r3, #1
 800da08:	d002      	beq.n	800da10 <USBH_MSC_SCSI_Read+0x2e>
 800da0a:	2b02      	cmp	r3, #2
 800da0c:	d047      	beq.n	800da9e <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800da0e:	e04e      	b.n	800daae <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800da10:	693b      	ldr	r3, [r7, #16]
 800da12:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800da16:	461a      	mov	r2, r3
 800da18:	6a3b      	ldr	r3, [r7, #32]
 800da1a:	fb03 f202 	mul.w	r2, r3, r2
 800da1e:	693b      	ldr	r3, [r7, #16]
 800da20:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800da22:	693b      	ldr	r3, [r7, #16]
 800da24:	2280      	movs	r2, #128	; 0x80
 800da26:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800da2a:	693b      	ldr	r3, [r7, #16]
 800da2c:	220a      	movs	r2, #10
 800da2e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800da32:	693b      	ldr	r3, [r7, #16]
 800da34:	3363      	adds	r3, #99	; 0x63
 800da36:	2210      	movs	r2, #16
 800da38:	2100      	movs	r1, #0
 800da3a:	4618      	mov	r0, r3
 800da3c:	f005 fa22 	bl	8012e84 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800da40:	693b      	ldr	r3, [r7, #16]
 800da42:	2228      	movs	r2, #40	; 0x28
 800da44:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800da48:	79fa      	ldrb	r2, [r7, #7]
 800da4a:	693b      	ldr	r3, [r7, #16]
 800da4c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800da50:	79ba      	ldrb	r2, [r7, #6]
 800da52:	693b      	ldr	r3, [r7, #16]
 800da54:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800da58:	797a      	ldrb	r2, [r7, #5]
 800da5a:	693b      	ldr	r3, [r7, #16]
 800da5c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800da60:	1d3b      	adds	r3, r7, #4
 800da62:	781a      	ldrb	r2, [r3, #0]
 800da64:	693b      	ldr	r3, [r7, #16]
 800da66:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800da6a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800da6e:	693b      	ldr	r3, [r7, #16]
 800da70:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800da74:	f107 0320 	add.w	r3, r7, #32
 800da78:	781a      	ldrb	r2, [r3, #0]
 800da7a:	693b      	ldr	r3, [r7, #16]
 800da7c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800da80:	693b      	ldr	r3, [r7, #16]
 800da82:	2201      	movs	r2, #1
 800da84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800da88:	693b      	ldr	r3, [r7, #16]
 800da8a:	2202      	movs	r2, #2
 800da8c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800da90:	693b      	ldr	r3, [r7, #16]
 800da92:	683a      	ldr	r2, [r7, #0]
 800da94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800da98:	2301      	movs	r3, #1
 800da9a:	75fb      	strb	r3, [r7, #23]
      break;
 800da9c:	e007      	b.n	800daae <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800da9e:	7afb      	ldrb	r3, [r7, #11]
 800daa0:	4619      	mov	r1, r3
 800daa2:	68f8      	ldr	r0, [r7, #12]
 800daa4:	f7ff fa8c 	bl	800cfc0 <USBH_MSC_BOT_Process>
 800daa8:	4603      	mov	r3, r0
 800daaa:	75fb      	strb	r3, [r7, #23]
      break;
 800daac:	bf00      	nop
  }

  return error;
 800daae:	7dfb      	ldrb	r3, [r7, #23]
}
 800dab0:	4618      	mov	r0, r3
 800dab2:	3718      	adds	r7, #24
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd80      	pop	{r7, pc}

0800dab8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800dab8:	b5b0      	push	{r4, r5, r7, lr}
 800daba:	b090      	sub	sp, #64	; 0x40
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	60f8      	str	r0, [r7, #12]
 800dac0:	60b9      	str	r1, [r7, #8]
 800dac2:	4613      	mov	r3, r2
 800dac4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d101      	bne.n	800dad0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800dacc:	2302      	movs	r3, #2
 800dace:	e04d      	b.n	800db6c <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	79fa      	ldrb	r2, [r7, #7]
 800dad4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	2200      	movs	r2, #0
 800dadc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	2200      	movs	r2, #0
 800dae4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800dae8:	68f8      	ldr	r0, [r7, #12]
 800daea:	f000 f847 	bl	800db7c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	2200      	movs	r2, #0
 800daf2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	2200      	movs	r2, #0
 800dafa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	2200      	movs	r2, #0
 800db02:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	2200      	movs	r2, #0
 800db0a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800db0e:	68bb      	ldr	r3, [r7, #8]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d003      	beq.n	800db1c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	68ba      	ldr	r2, [r7, #8]
 800db18:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800db1c:	4b15      	ldr	r3, [pc, #84]	; (800db74 <USBH_Init+0xbc>)
 800db1e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800db22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800db24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800db28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800db2c:	2100      	movs	r1, #0
 800db2e:	4618      	mov	r0, r3
 800db30:	f001 ff9a 	bl	800fa68 <osMessageCreate>
 800db34:	4602      	mov	r2, r0
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800db3c:	4b0e      	ldr	r3, [pc, #56]	; (800db78 <USBH_Init+0xc0>)
 800db3e:	f107 0414 	add.w	r4, r7, #20
 800db42:	461d      	mov	r5, r3
 800db44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800db46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800db48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800db4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800db50:	f107 0314 	add.w	r3, r7, #20
 800db54:	68f9      	ldr	r1, [r7, #12]
 800db56:	4618      	mov	r0, r3
 800db58:	f001 fec0 	bl	800f8dc <osThreadCreate>
 800db5c:	4602      	mov	r2, r0
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800db64:	68f8      	ldr	r0, [r7, #12]
 800db66:	f004 ff1b 	bl	80129a0 <USBH_LL_Init>

  return USBH_OK;
 800db6a:	2300      	movs	r3, #0
}
 800db6c:	4618      	mov	r0, r3
 800db6e:	3740      	adds	r7, #64	; 0x40
 800db70:	46bd      	mov	sp, r7
 800db72:	bdb0      	pop	{r4, r5, r7, pc}
 800db74:	08013f58 	.word	0x08013f58
 800db78:	08013f68 	.word	0x08013f68

0800db7c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800db7c:	b480      	push	{r7}
 800db7e:	b085      	sub	sp, #20
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800db84:	2300      	movs	r3, #0
 800db86:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800db88:	2300      	movs	r3, #0
 800db8a:	60fb      	str	r3, [r7, #12]
 800db8c:	e009      	b.n	800dba2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800db8e:	687a      	ldr	r2, [r7, #4]
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	33e0      	adds	r3, #224	; 0xe0
 800db94:	009b      	lsls	r3, r3, #2
 800db96:	4413      	add	r3, r2
 800db98:	2200      	movs	r2, #0
 800db9a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	3301      	adds	r3, #1
 800dba0:	60fb      	str	r3, [r7, #12]
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	2b0f      	cmp	r3, #15
 800dba6:	d9f2      	bls.n	800db8e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800dba8:	2300      	movs	r3, #0
 800dbaa:	60fb      	str	r3, [r7, #12]
 800dbac:	e009      	b.n	800dbc2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800dbae:	687a      	ldr	r2, [r7, #4]
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	4413      	add	r3, r2
 800dbb4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800dbb8:	2200      	movs	r2, #0
 800dbba:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	3301      	adds	r3, #1
 800dbc0:	60fb      	str	r3, [r7, #12]
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dbc8:	d3f1      	bcc.n	800dbae <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2200      	movs	r2, #0
 800dbce:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	2201      	movs	r2, #1
 800dbda:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	2200      	movs	r2, #0
 800dbe0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	2201      	movs	r2, #1
 800dbe8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	2240      	movs	r2, #64	; 0x40
 800dbee:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2201      	movs	r2, #1
 800dc02:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	2200      	movs	r2, #0
 800dc0a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2200      	movs	r2, #0
 800dc12:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800dc16:	2300      	movs	r3, #0
}
 800dc18:	4618      	mov	r0, r3
 800dc1a:	3714      	adds	r7, #20
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc22:	4770      	bx	lr

0800dc24 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800dc24:	b480      	push	{r7}
 800dc26:	b085      	sub	sp, #20
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
 800dc2c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800dc2e:	2300      	movs	r3, #0
 800dc30:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d016      	beq.n	800dc66 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d10e      	bne.n	800dc60 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800dc48:	1c59      	adds	r1, r3, #1
 800dc4a:	687a      	ldr	r2, [r7, #4]
 800dc4c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800dc50:	687a      	ldr	r2, [r7, #4]
 800dc52:	33de      	adds	r3, #222	; 0xde
 800dc54:	6839      	ldr	r1, [r7, #0]
 800dc56:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	73fb      	strb	r3, [r7, #15]
 800dc5e:	e004      	b.n	800dc6a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800dc60:	2302      	movs	r3, #2
 800dc62:	73fb      	strb	r3, [r7, #15]
 800dc64:	e001      	b.n	800dc6a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800dc66:	2302      	movs	r3, #2
 800dc68:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800dc6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	3714      	adds	r7, #20
 800dc70:	46bd      	mov	sp, r7
 800dc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc76:	4770      	bx	lr

0800dc78 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800dc78:	b480      	push	{r7}
 800dc7a:	b085      	sub	sp, #20
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
 800dc80:	460b      	mov	r3, r1
 800dc82:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800dc84:	2300      	movs	r3, #0
 800dc86:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800dc8e:	78fa      	ldrb	r2, [r7, #3]
 800dc90:	429a      	cmp	r2, r3
 800dc92:	d204      	bcs.n	800dc9e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	78fa      	ldrb	r2, [r7, #3]
 800dc98:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800dc9c:	e001      	b.n	800dca2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800dc9e:	2302      	movs	r3, #2
 800dca0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800dca2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dca4:	4618      	mov	r0, r3
 800dca6:	3714      	adds	r7, #20
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcae:	4770      	bx	lr

0800dcb0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800dcb0:	b480      	push	{r7}
 800dcb2:	b087      	sub	sp, #28
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
 800dcb8:	4608      	mov	r0, r1
 800dcba:	4611      	mov	r1, r2
 800dcbc:	461a      	mov	r2, r3
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	70fb      	strb	r3, [r7, #3]
 800dcc2:	460b      	mov	r3, r1
 800dcc4:	70bb      	strb	r3, [r7, #2]
 800dcc6:	4613      	mov	r3, r2
 800dcc8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800dcca:	2300      	movs	r3, #0
 800dccc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800dcce:	2300      	movs	r3, #0
 800dcd0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800dcd8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800dcda:	e025      	b.n	800dd28 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800dcdc:	7dfb      	ldrb	r3, [r7, #23]
 800dcde:	221a      	movs	r2, #26
 800dce0:	fb02 f303 	mul.w	r3, r2, r3
 800dce4:	3308      	adds	r3, #8
 800dce6:	68fa      	ldr	r2, [r7, #12]
 800dce8:	4413      	add	r3, r2
 800dcea:	3302      	adds	r3, #2
 800dcec:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800dcee:	693b      	ldr	r3, [r7, #16]
 800dcf0:	795b      	ldrb	r3, [r3, #5]
 800dcf2:	78fa      	ldrb	r2, [r7, #3]
 800dcf4:	429a      	cmp	r2, r3
 800dcf6:	d002      	beq.n	800dcfe <USBH_FindInterface+0x4e>
 800dcf8:	78fb      	ldrb	r3, [r7, #3]
 800dcfa:	2bff      	cmp	r3, #255	; 0xff
 800dcfc:	d111      	bne.n	800dd22 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800dd02:	78ba      	ldrb	r2, [r7, #2]
 800dd04:	429a      	cmp	r2, r3
 800dd06:	d002      	beq.n	800dd0e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800dd08:	78bb      	ldrb	r3, [r7, #2]
 800dd0a:	2bff      	cmp	r3, #255	; 0xff
 800dd0c:	d109      	bne.n	800dd22 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800dd0e:	693b      	ldr	r3, [r7, #16]
 800dd10:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800dd12:	787a      	ldrb	r2, [r7, #1]
 800dd14:	429a      	cmp	r2, r3
 800dd16:	d002      	beq.n	800dd1e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800dd18:	787b      	ldrb	r3, [r7, #1]
 800dd1a:	2bff      	cmp	r3, #255	; 0xff
 800dd1c:	d101      	bne.n	800dd22 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800dd1e:	7dfb      	ldrb	r3, [r7, #23]
 800dd20:	e006      	b.n	800dd30 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800dd22:	7dfb      	ldrb	r3, [r7, #23]
 800dd24:	3301      	adds	r3, #1
 800dd26:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800dd28:	7dfb      	ldrb	r3, [r7, #23]
 800dd2a:	2b01      	cmp	r3, #1
 800dd2c:	d9d6      	bls.n	800dcdc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800dd2e:	23ff      	movs	r3, #255	; 0xff
}
 800dd30:	4618      	mov	r0, r3
 800dd32:	371c      	adds	r7, #28
 800dd34:	46bd      	mov	sp, r7
 800dd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3a:	4770      	bx	lr

0800dd3c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b082      	sub	sp, #8
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800dd44:	6878      	ldr	r0, [r7, #4]
 800dd46:	f004 fe6d 	bl	8012a24 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800dd4a:	2101      	movs	r1, #1
 800dd4c:	6878      	ldr	r0, [r7, #4]
 800dd4e:	f004 ff86 	bl	8012c5e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800dd52:	2300      	movs	r3, #0
}
 800dd54:	4618      	mov	r0, r3
 800dd56:	3708      	adds	r7, #8
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bd80      	pop	{r7, pc}

0800dd5c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b088      	sub	sp, #32
 800dd60:	af04      	add	r7, sp, #16
 800dd62:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800dd64:	2302      	movs	r3, #2
 800dd66:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800dd68:	2300      	movs	r3, #0
 800dd6a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800dd72:	b2db      	uxtb	r3, r3
 800dd74:	2b01      	cmp	r3, #1
 800dd76:	d102      	bne.n	800dd7e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2203      	movs	r2, #3
 800dd7c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	781b      	ldrb	r3, [r3, #0]
 800dd82:	b2db      	uxtb	r3, r3
 800dd84:	2b0b      	cmp	r3, #11
 800dd86:	f200 8247 	bhi.w	800e218 <USBH_Process+0x4bc>
 800dd8a:	a201      	add	r2, pc, #4	; (adr r2, 800dd90 <USBH_Process+0x34>)
 800dd8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd90:	0800ddc1 	.word	0x0800ddc1
 800dd94:	0800de0f 	.word	0x0800de0f
 800dd98:	0800de93 	.word	0x0800de93
 800dd9c:	0800e197 	.word	0x0800e197
 800dda0:	0800e219 	.word	0x0800e219
 800dda4:	0800df53 	.word	0x0800df53
 800dda8:	0800e121 	.word	0x0800e121
 800ddac:	0800dfa5 	.word	0x0800dfa5
 800ddb0:	0800dfe1 	.word	0x0800dfe1
 800ddb4:	0800e01b 	.word	0x0800e01b
 800ddb8:	0800e079 	.word	0x0800e079
 800ddbc:	0800e17f 	.word	0x0800e17f
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800ddc6:	b2db      	uxtb	r3, r3
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	f000 8227 	beq.w	800e21c <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	2201      	movs	r2, #1
 800ddd2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800ddd4:	20c8      	movs	r0, #200	; 0xc8
 800ddd6:	f004 ffb9 	bl	8012d4c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800ddda:	6878      	ldr	r0, [r7, #4]
 800dddc:	f004 fe7f 	bl	8012ade <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2200      	movs	r2, #0
 800dde4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	2200      	movs	r2, #0
 800ddec:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2201      	movs	r2, #1
 800ddf4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800de04:	2200      	movs	r2, #0
 800de06:	4619      	mov	r1, r3
 800de08:	f001 fe56 	bl	800fab8 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800de0c:	e206      	b.n	800e21c <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800de14:	2b01      	cmp	r3, #1
 800de16:	d107      	bne.n	800de28 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	2200      	movs	r2, #0
 800de1c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2202      	movs	r2, #2
 800de24:	701a      	strb	r2, [r3, #0]
 800de26:	e025      	b.n	800de74 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800de2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800de32:	d914      	bls.n	800de5e <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800de3a:	3301      	adds	r3, #1
 800de3c:	b2da      	uxtb	r2, r3
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800de4a:	2b03      	cmp	r3, #3
 800de4c:	d903      	bls.n	800de56 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	220d      	movs	r2, #13
 800de52:	701a      	strb	r2, [r3, #0]
 800de54:	e00e      	b.n	800de74 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2200      	movs	r2, #0
 800de5a:	701a      	strb	r2, [r3, #0]
 800de5c:	e00a      	b.n	800de74 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800de64:	f103 020a 	add.w	r2, r3, #10
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800de6e:	200a      	movs	r0, #10
 800de70:	f004 ff6c 	bl	8012d4c <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	2201      	movs	r2, #1
 800de78:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800de88:	2200      	movs	r2, #0
 800de8a:	4619      	mov	r1, r3
 800de8c:	f001 fe14 	bl	800fab8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800de90:	e1cb      	b.n	800e22a <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d005      	beq.n	800dea8 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dea2:	2104      	movs	r1, #4
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800dea8:	2064      	movs	r0, #100	; 0x64
 800deaa:	f004 ff4f 	bl	8012d4c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800deae:	6878      	ldr	r0, [r7, #4]
 800deb0:	f004 fdee 	bl	8012a90 <USBH_LL_GetSpeed>
 800deb4:	4603      	mov	r3, r0
 800deb6:	461a      	mov	r2, r3
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	2205      	movs	r2, #5
 800dec2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800dec4:	2100      	movs	r1, #0
 800dec6:	6878      	ldr	r0, [r7, #4]
 800dec8:	f001 fc19 	bl	800f6fe <USBH_AllocPipe>
 800decc:	4603      	mov	r3, r0
 800dece:	461a      	mov	r2, r3
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800ded4:	2180      	movs	r1, #128	; 0x80
 800ded6:	6878      	ldr	r0, [r7, #4]
 800ded8:	f001 fc11 	bl	800f6fe <USBH_AllocPipe>
 800dedc:	4603      	mov	r3, r0
 800dede:	461a      	mov	r2, r3
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	7919      	ldrb	r1, [r3, #4]
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800def4:	687a      	ldr	r2, [r7, #4]
 800def6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800def8:	b292      	uxth	r2, r2
 800defa:	9202      	str	r2, [sp, #8]
 800defc:	2200      	movs	r2, #0
 800defe:	9201      	str	r2, [sp, #4]
 800df00:	9300      	str	r3, [sp, #0]
 800df02:	4603      	mov	r3, r0
 800df04:	2280      	movs	r2, #128	; 0x80
 800df06:	6878      	ldr	r0, [r7, #4]
 800df08:	f001 fbca 	bl	800f6a0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	7959      	ldrb	r1, [r3, #5]
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800df1c:	687a      	ldr	r2, [r7, #4]
 800df1e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800df20:	b292      	uxth	r2, r2
 800df22:	9202      	str	r2, [sp, #8]
 800df24:	2200      	movs	r2, #0
 800df26:	9201      	str	r2, [sp, #4]
 800df28:	9300      	str	r3, [sp, #0]
 800df2a:	4603      	mov	r3, r0
 800df2c:	2200      	movs	r2, #0
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f001 fbb6 	bl	800f6a0 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	2201      	movs	r2, #1
 800df38:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800df48:	2200      	movs	r2, #0
 800df4a:	4619      	mov	r1, r3
 800df4c:	f001 fdb4 	bl	800fab8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800df50:	e16b      	b.n	800e22a <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800df52:	6878      	ldr	r0, [r7, #4]
 800df54:	f000 f96e 	bl	800e234 <USBH_HandleEnum>
 800df58:	4603      	mov	r3, r0
 800df5a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800df5c:	7bbb      	ldrb	r3, [r7, #14]
 800df5e:	b2db      	uxtb	r3, r3
 800df60:	2b00      	cmp	r3, #0
 800df62:	f040 815d 	bne.w	800e220 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	2200      	movs	r2, #0
 800df6a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800df74:	2b01      	cmp	r3, #1
 800df76:	d103      	bne.n	800df80 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2208      	movs	r2, #8
 800df7c:	701a      	strb	r2, [r3, #0]
 800df7e:	e002      	b.n	800df86 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	2207      	movs	r2, #7
 800df84:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	2205      	movs	r2, #5
 800df8a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800df9a:	2200      	movs	r2, #0
 800df9c:	4619      	mov	r1, r3
 800df9e:	f001 fd8b 	bl	800fab8 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800dfa2:	e13d      	b.n	800e220 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	f000 813a 	beq.w	800e224 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dfb6:	2101      	movs	r1, #1
 800dfb8:	6878      	ldr	r0, [r7, #4]
 800dfba:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2208      	movs	r2, #8
 800dfc0:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	2205      	movs	r2, #5
 800dfc6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	4619      	mov	r1, r3
 800dfda:	f001 fd6d 	bl	800fab8 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800dfde:	e121      	b.n	800e224 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800dfe6:	b29b      	uxth	r3, r3
 800dfe8:	4619      	mov	r1, r3
 800dfea:	6878      	ldr	r0, [r7, #4]
 800dfec:	f000 fd00 	bl	800e9f0 <USBH_SetCfg>
 800dff0:	4603      	mov	r3, r0
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d102      	bne.n	800dffc <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	2209      	movs	r2, #9
 800dffa:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2201      	movs	r2, #1
 800e000:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e010:	2200      	movs	r2, #0
 800e012:	4619      	mov	r1, r3
 800e014:	f001 fd50 	bl	800fab8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e018:	e107      	b.n	800e22a <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800e020:	f003 0320 	and.w	r3, r3, #32
 800e024:	2b00      	cmp	r3, #0
 800e026:	d015      	beq.n	800e054 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800e028:	2101      	movs	r1, #1
 800e02a:	6878      	ldr	r0, [r7, #4]
 800e02c:	f000 fd03 	bl	800ea36 <USBH_SetFeature>
 800e030:	4603      	mov	r3, r0
 800e032:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800e034:	7bbb      	ldrb	r3, [r7, #14]
 800e036:	b2db      	uxtb	r3, r3
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d103      	bne.n	800e044 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	220a      	movs	r2, #10
 800e040:	701a      	strb	r2, [r3, #0]
 800e042:	e00a      	b.n	800e05a <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800e044:	7bbb      	ldrb	r3, [r7, #14]
 800e046:	b2db      	uxtb	r3, r3
 800e048:	2b03      	cmp	r3, #3
 800e04a:	d106      	bne.n	800e05a <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	220a      	movs	r2, #10
 800e050:	701a      	strb	r2, [r3, #0]
 800e052:	e002      	b.n	800e05a <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	220a      	movs	r2, #10
 800e058:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	2201      	movs	r2, #1
 800e05e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e06e:	2200      	movs	r2, #0
 800e070:	4619      	mov	r1, r3
 800e072:	f001 fd21 	bl	800fab8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e076:	e0d8      	b.n	800e22a <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d03f      	beq.n	800e102 <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	2200      	movs	r2, #0
 800e086:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e08a:	2300      	movs	r3, #0
 800e08c:	73fb      	strb	r3, [r7, #15]
 800e08e:	e016      	b.n	800e0be <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800e090:	7bfa      	ldrb	r2, [r7, #15]
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	32de      	adds	r2, #222	; 0xde
 800e096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e09a:	791a      	ldrb	r2, [r3, #4]
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800e0a2:	429a      	cmp	r2, r3
 800e0a4:	d108      	bne.n	800e0b8 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 800e0a6:	7bfa      	ldrb	r2, [r7, #15]
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	32de      	adds	r2, #222	; 0xde
 800e0ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800e0b6:	e005      	b.n	800e0c4 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e0b8:	7bfb      	ldrb	r3, [r7, #15]
 800e0ba:	3301      	adds	r3, #1
 800e0bc:	73fb      	strb	r3, [r7, #15]
 800e0be:	7bfb      	ldrb	r3, [r7, #15]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d0e5      	beq.n	800e090 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d016      	beq.n	800e0fc <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e0d4:	689b      	ldr	r3, [r3, #8]
 800e0d6:	6878      	ldr	r0, [r7, #4]
 800e0d8:	4798      	blx	r3
 800e0da:	4603      	mov	r3, r0
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d109      	bne.n	800e0f4 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	2206      	movs	r2, #6
 800e0e4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e0ec:	2103      	movs	r1, #3
 800e0ee:	6878      	ldr	r0, [r7, #4]
 800e0f0:	4798      	blx	r3
 800e0f2:	e006      	b.n	800e102 <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	220d      	movs	r2, #13
 800e0f8:	701a      	strb	r2, [r3, #0]
 800e0fa:	e002      	b.n	800e102 <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	220d      	movs	r2, #13
 800e100:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	2205      	movs	r2, #5
 800e106:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e116:	2200      	movs	r2, #0
 800e118:	4619      	mov	r1, r3
 800e11a:	f001 fccd 	bl	800fab8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e11e:	e084      	b.n	800e22a <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e126:	2b00      	cmp	r3, #0
 800e128:	d017      	beq.n	800e15a <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e130:	691b      	ldr	r3, [r3, #16]
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	4798      	blx	r3
 800e136:	4603      	mov	r3, r0
 800e138:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800e13a:	7bbb      	ldrb	r3, [r7, #14]
 800e13c:	b2db      	uxtb	r3, r3
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d103      	bne.n	800e14a <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	220b      	movs	r2, #11
 800e146:	701a      	strb	r2, [r3, #0]
 800e148:	e00a      	b.n	800e160 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 800e14a:	7bbb      	ldrb	r3, [r7, #14]
 800e14c:	b2db      	uxtb	r3, r3
 800e14e:	2b02      	cmp	r3, #2
 800e150:	d106      	bne.n	800e160 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	220d      	movs	r2, #13
 800e156:	701a      	strb	r2, [r3, #0]
 800e158:	e002      	b.n	800e160 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	220d      	movs	r2, #13
 800e15e:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	2205      	movs	r2, #5
 800e164:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e174:	2200      	movs	r2, #0
 800e176:	4619      	mov	r1, r3
 800e178:	f001 fc9e 	bl	800fab8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e17c:	e055      	b.n	800e22a <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e184:	2b00      	cmp	r3, #0
 800e186:	d04f      	beq.n	800e228 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e18e:	695b      	ldr	r3, [r3, #20]
 800e190:	6878      	ldr	r0, [r7, #4]
 800e192:	4798      	blx	r3
      }
      break;
 800e194:	e048      	b.n	800e228 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	2200      	movs	r2, #0
 800e19a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800e19e:	6878      	ldr	r0, [r7, #4]
 800e1a0:	f7ff fcec 	bl	800db7c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d009      	beq.n	800e1c2 <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e1b4:	68db      	ldr	r3, [r3, #12]
 800e1b6:	6878      	ldr	r0, [r7, #4]
 800e1b8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	2200      	movs	r2, #0
 800e1be:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d005      	beq.n	800e1d8 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e1d2:	2105      	movs	r1, #5
 800e1d4:	6878      	ldr	r0, [r7, #4]
 800e1d6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800e1de:	b2db      	uxtb	r3, r3
 800e1e0:	2b01      	cmp	r3, #1
 800e1e2:	d107      	bne.n	800e1f4 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800e1ec:	6878      	ldr	r0, [r7, #4]
 800e1ee:	f7ff fda5 	bl	800dd3c <USBH_Start>
 800e1f2:	e002      	b.n	800e1fa <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800e1f4:	6878      	ldr	r0, [r7, #4]
 800e1f6:	f004 fc15 	bl	8012a24 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	2201      	movs	r2, #1
 800e1fe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e20e:	2200      	movs	r2, #0
 800e210:	4619      	mov	r1, r3
 800e212:	f001 fc51 	bl	800fab8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e216:	e008      	b.n	800e22a <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 800e218:	bf00      	nop
 800e21a:	e006      	b.n	800e22a <USBH_Process+0x4ce>
      break;
 800e21c:	bf00      	nop
 800e21e:	e004      	b.n	800e22a <USBH_Process+0x4ce>
      break;
 800e220:	bf00      	nop
 800e222:	e002      	b.n	800e22a <USBH_Process+0x4ce>
    break;
 800e224:	bf00      	nop
 800e226:	e000      	b.n	800e22a <USBH_Process+0x4ce>
      break;
 800e228:	bf00      	nop
  }
  return USBH_OK;
 800e22a:	2300      	movs	r3, #0
}
 800e22c:	4618      	mov	r0, r3
 800e22e:	3710      	adds	r7, #16
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}

0800e234 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b088      	sub	sp, #32
 800e238:	af04      	add	r7, sp, #16
 800e23a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800e23c:	2301      	movs	r3, #1
 800e23e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800e240:	2301      	movs	r3, #1
 800e242:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	785b      	ldrb	r3, [r3, #1]
 800e248:	2b07      	cmp	r3, #7
 800e24a:	f200 8208 	bhi.w	800e65e <USBH_HandleEnum+0x42a>
 800e24e:	a201      	add	r2, pc, #4	; (adr r2, 800e254 <USBH_HandleEnum+0x20>)
 800e250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e254:	0800e275 	.word	0x0800e275
 800e258:	0800e333 	.word	0x0800e333
 800e25c:	0800e39d 	.word	0x0800e39d
 800e260:	0800e42b 	.word	0x0800e42b
 800e264:	0800e495 	.word	0x0800e495
 800e268:	0800e505 	.word	0x0800e505
 800e26c:	0800e5a1 	.word	0x0800e5a1
 800e270:	0800e61f 	.word	0x0800e61f
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800e274:	2108      	movs	r1, #8
 800e276:	6878      	ldr	r0, [r7, #4]
 800e278:	f000 faea 	bl	800e850 <USBH_Get_DevDesc>
 800e27c:	4603      	mov	r3, r0
 800e27e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e280:	7bbb      	ldrb	r3, [r7, #14]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d130      	bne.n	800e2e8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	2201      	movs	r2, #1
 800e294:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	7919      	ldrb	r1, [r3, #4]
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800e2a6:	687a      	ldr	r2, [r7, #4]
 800e2a8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800e2aa:	b292      	uxth	r2, r2
 800e2ac:	9202      	str	r2, [sp, #8]
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	9201      	str	r2, [sp, #4]
 800e2b2:	9300      	str	r3, [sp, #0]
 800e2b4:	4603      	mov	r3, r0
 800e2b6:	2280      	movs	r2, #128	; 0x80
 800e2b8:	6878      	ldr	r0, [r7, #4]
 800e2ba:	f001 f9f1 	bl	800f6a0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	7959      	ldrb	r1, [r3, #5]
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800e2ce:	687a      	ldr	r2, [r7, #4]
 800e2d0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e2d2:	b292      	uxth	r2, r2
 800e2d4:	9202      	str	r2, [sp, #8]
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	9201      	str	r2, [sp, #4]
 800e2da:	9300      	str	r3, [sp, #0]
 800e2dc:	4603      	mov	r3, r0
 800e2de:	2200      	movs	r2, #0
 800e2e0:	6878      	ldr	r0, [r7, #4]
 800e2e2:	f001 f9dd 	bl	800f6a0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800e2e6:	e1bc      	b.n	800e662 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e2e8:	7bbb      	ldrb	r3, [r7, #14]
 800e2ea:	2b03      	cmp	r3, #3
 800e2ec:	f040 81b9 	bne.w	800e662 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e2f6:	3301      	adds	r3, #1
 800e2f8:	b2da      	uxtb	r2, r3
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e306:	2b03      	cmp	r3, #3
 800e308:	d903      	bls.n	800e312 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	220d      	movs	r2, #13
 800e30e:	701a      	strb	r2, [r3, #0]
      break;
 800e310:	e1a7      	b.n	800e662 <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	795b      	ldrb	r3, [r3, #5]
 800e316:	4619      	mov	r1, r3
 800e318:	6878      	ldr	r0, [r7, #4]
 800e31a:	f001 fa11 	bl	800f740 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	791b      	ldrb	r3, [r3, #4]
 800e322:	4619      	mov	r1, r3
 800e324:	6878      	ldr	r0, [r7, #4]
 800e326:	f001 fa0b 	bl	800f740 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	2200      	movs	r2, #0
 800e32e:	701a      	strb	r2, [r3, #0]
      break;
 800e330:	e197      	b.n	800e662 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800e332:	2112      	movs	r1, #18
 800e334:	6878      	ldr	r0, [r7, #4]
 800e336:	f000 fa8b 	bl	800e850 <USBH_Get_DevDesc>
 800e33a:	4603      	mov	r3, r0
 800e33c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e33e:	7bbb      	ldrb	r3, [r7, #14]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d103      	bne.n	800e34c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	2202      	movs	r2, #2
 800e348:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e34a:	e18c      	b.n	800e666 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e34c:	7bbb      	ldrb	r3, [r7, #14]
 800e34e:	2b03      	cmp	r3, #3
 800e350:	f040 8189 	bne.w	800e666 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e35a:	3301      	adds	r3, #1
 800e35c:	b2da      	uxtb	r2, r3
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e36a:	2b03      	cmp	r3, #3
 800e36c:	d903      	bls.n	800e376 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	220d      	movs	r2, #13
 800e372:	701a      	strb	r2, [r3, #0]
      break;
 800e374:	e177      	b.n	800e666 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	795b      	ldrb	r3, [r3, #5]
 800e37a:	4619      	mov	r1, r3
 800e37c:	6878      	ldr	r0, [r7, #4]
 800e37e:	f001 f9df 	bl	800f740 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	791b      	ldrb	r3, [r3, #4]
 800e386:	4619      	mov	r1, r3
 800e388:	6878      	ldr	r0, [r7, #4]
 800e38a:	f001 f9d9 	bl	800f740 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	2200      	movs	r2, #0
 800e392:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2200      	movs	r2, #0
 800e398:	701a      	strb	r2, [r3, #0]
      break;
 800e39a:	e164      	b.n	800e666 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800e39c:	2101      	movs	r1, #1
 800e39e:	6878      	ldr	r0, [r7, #4]
 800e3a0:	f000 fb02 	bl	800e9a8 <USBH_SetAddress>
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e3a8:	7bbb      	ldrb	r3, [r7, #14]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d132      	bne.n	800e414 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800e3ae:	2002      	movs	r0, #2
 800e3b0:	f004 fccc 	bl	8012d4c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	2201      	movs	r2, #1
 800e3b8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	2203      	movs	r2, #3
 800e3c0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	7919      	ldrb	r1, [r3, #4]
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800e3d2:	687a      	ldr	r2, [r7, #4]
 800e3d4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800e3d6:	b292      	uxth	r2, r2
 800e3d8:	9202      	str	r2, [sp, #8]
 800e3da:	2200      	movs	r2, #0
 800e3dc:	9201      	str	r2, [sp, #4]
 800e3de:	9300      	str	r3, [sp, #0]
 800e3e0:	4603      	mov	r3, r0
 800e3e2:	2280      	movs	r2, #128	; 0x80
 800e3e4:	6878      	ldr	r0, [r7, #4]
 800e3e6:	f001 f95b 	bl	800f6a0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	7959      	ldrb	r1, [r3, #5]
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800e3fa:	687a      	ldr	r2, [r7, #4]
 800e3fc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e3fe:	b292      	uxth	r2, r2
 800e400:	9202      	str	r2, [sp, #8]
 800e402:	2200      	movs	r2, #0
 800e404:	9201      	str	r2, [sp, #4]
 800e406:	9300      	str	r3, [sp, #0]
 800e408:	4603      	mov	r3, r0
 800e40a:	2200      	movs	r2, #0
 800e40c:	6878      	ldr	r0, [r7, #4]
 800e40e:	f001 f947 	bl	800f6a0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800e412:	e12a      	b.n	800e66a <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e414:	7bbb      	ldrb	r3, [r7, #14]
 800e416:	2b03      	cmp	r3, #3
 800e418:	f040 8127 	bne.w	800e66a <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	220d      	movs	r2, #13
 800e420:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	2200      	movs	r2, #0
 800e426:	705a      	strb	r2, [r3, #1]
      break;
 800e428:	e11f      	b.n	800e66a <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800e42a:	2109      	movs	r1, #9
 800e42c:	6878      	ldr	r0, [r7, #4]
 800e42e:	f000 fa37 	bl	800e8a0 <USBH_Get_CfgDesc>
 800e432:	4603      	mov	r3, r0
 800e434:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e436:	7bbb      	ldrb	r3, [r7, #14]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d103      	bne.n	800e444 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2204      	movs	r2, #4
 800e440:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e442:	e114      	b.n	800e66e <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e444:	7bbb      	ldrb	r3, [r7, #14]
 800e446:	2b03      	cmp	r3, #3
 800e448:	f040 8111 	bne.w	800e66e <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e452:	3301      	adds	r3, #1
 800e454:	b2da      	uxtb	r2, r3
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e462:	2b03      	cmp	r3, #3
 800e464:	d903      	bls.n	800e46e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	220d      	movs	r2, #13
 800e46a:	701a      	strb	r2, [r3, #0]
      break;
 800e46c:	e0ff      	b.n	800e66e <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	795b      	ldrb	r3, [r3, #5]
 800e472:	4619      	mov	r1, r3
 800e474:	6878      	ldr	r0, [r7, #4]
 800e476:	f001 f963 	bl	800f740 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	791b      	ldrb	r3, [r3, #4]
 800e47e:	4619      	mov	r1, r3
 800e480:	6878      	ldr	r0, [r7, #4]
 800e482:	f001 f95d 	bl	800f740 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	2200      	movs	r2, #0
 800e48a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	2200      	movs	r2, #0
 800e490:	701a      	strb	r2, [r3, #0]
      break;
 800e492:	e0ec      	b.n	800e66e <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800e49a:	4619      	mov	r1, r3
 800e49c:	6878      	ldr	r0, [r7, #4]
 800e49e:	f000 f9ff 	bl	800e8a0 <USBH_Get_CfgDesc>
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e4a6:	7bbb      	ldrb	r3, [r7, #14]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d103      	bne.n	800e4b4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	2205      	movs	r2, #5
 800e4b0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e4b2:	e0de      	b.n	800e672 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e4b4:	7bbb      	ldrb	r3, [r7, #14]
 800e4b6:	2b03      	cmp	r3, #3
 800e4b8:	f040 80db 	bne.w	800e672 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e4c2:	3301      	adds	r3, #1
 800e4c4:	b2da      	uxtb	r2, r3
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e4d2:	2b03      	cmp	r3, #3
 800e4d4:	d903      	bls.n	800e4de <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	220d      	movs	r2, #13
 800e4da:	701a      	strb	r2, [r3, #0]
      break;
 800e4dc:	e0c9      	b.n	800e672 <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	795b      	ldrb	r3, [r3, #5]
 800e4e2:	4619      	mov	r1, r3
 800e4e4:	6878      	ldr	r0, [r7, #4]
 800e4e6:	f001 f92b 	bl	800f740 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	791b      	ldrb	r3, [r3, #4]
 800e4ee:	4619      	mov	r1, r3
 800e4f0:	6878      	ldr	r0, [r7, #4]
 800e4f2:	f001 f925 	bl	800f740 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	2200      	movs	r2, #0
 800e500:	701a      	strb	r2, [r3, #0]
      break;
 800e502:	e0b6      	b.n	800e672 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d036      	beq.n	800e57c <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800e51a:	23ff      	movs	r3, #255	; 0xff
 800e51c:	6878      	ldr	r0, [r7, #4]
 800e51e:	f000 f9e3 	bl	800e8e8 <USBH_Get_StringDesc>
 800e522:	4603      	mov	r3, r0
 800e524:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e526:	7bbb      	ldrb	r3, [r7, #14]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d111      	bne.n	800e550 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	2206      	movs	r2, #6
 800e530:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	2205      	movs	r2, #5
 800e536:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e546:	2200      	movs	r2, #0
 800e548:	4619      	mov	r1, r3
 800e54a:	f001 fab5 	bl	800fab8 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800e54e:	e092      	b.n	800e676 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e550:	7bbb      	ldrb	r3, [r7, #14]
 800e552:	2b03      	cmp	r3, #3
 800e554:	f040 808f 	bne.w	800e676 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	2206      	movs	r2, #6
 800e55c:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	2205      	movs	r2, #5
 800e562:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e572:	2200      	movs	r2, #0
 800e574:	4619      	mov	r1, r3
 800e576:	f001 fa9f 	bl	800fab8 <osMessagePut>
      break;
 800e57a:	e07c      	b.n	800e676 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	2206      	movs	r2, #6
 800e580:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	2205      	movs	r2, #5
 800e586:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e596:	2200      	movs	r2, #0
 800e598:	4619      	mov	r1, r3
 800e59a:	f001 fa8d 	bl	800fab8 <osMessagePut>
      break;
 800e59e:	e06a      	b.n	800e676 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d027      	beq.n	800e5fa <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800e5b6:	23ff      	movs	r3, #255	; 0xff
 800e5b8:	6878      	ldr	r0, [r7, #4]
 800e5ba:	f000 f995 	bl	800e8e8 <USBH_Get_StringDesc>
 800e5be:	4603      	mov	r3, r0
 800e5c0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e5c2:	7bbb      	ldrb	r3, [r7, #14]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d103      	bne.n	800e5d0 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2207      	movs	r2, #7
 800e5cc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800e5ce:	e054      	b.n	800e67a <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e5d0:	7bbb      	ldrb	r3, [r7, #14]
 800e5d2:	2b03      	cmp	r3, #3
 800e5d4:	d151      	bne.n	800e67a <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	2207      	movs	r2, #7
 800e5da:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2205      	movs	r2, #5
 800e5e0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e5f0:	2200      	movs	r2, #0
 800e5f2:	4619      	mov	r1, r3
 800e5f4:	f001 fa60 	bl	800fab8 <osMessagePut>
      break;
 800e5f8:	e03f      	b.n	800e67a <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	2207      	movs	r2, #7
 800e5fe:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	2205      	movs	r2, #5
 800e604:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e614:	2200      	movs	r2, #0
 800e616:	4619      	mov	r1, r3
 800e618:	f001 fa4e 	bl	800fab8 <osMessagePut>
      break;
 800e61c:	e02d      	b.n	800e67a <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800e624:	2b00      	cmp	r3, #0
 800e626:	d017      	beq.n	800e658 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800e634:	23ff      	movs	r3, #255	; 0xff
 800e636:	6878      	ldr	r0, [r7, #4]
 800e638:	f000 f956 	bl	800e8e8 <USBH_Get_StringDesc>
 800e63c:	4603      	mov	r3, r0
 800e63e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e640:	7bbb      	ldrb	r3, [r7, #14]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d102      	bne.n	800e64c <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800e646:	2300      	movs	r3, #0
 800e648:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800e64a:	e018      	b.n	800e67e <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e64c:	7bbb      	ldrb	r3, [r7, #14]
 800e64e:	2b03      	cmp	r3, #3
 800e650:	d115      	bne.n	800e67e <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800e652:	2300      	movs	r3, #0
 800e654:	73fb      	strb	r3, [r7, #15]
      break;
 800e656:	e012      	b.n	800e67e <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800e658:	2300      	movs	r3, #0
 800e65a:	73fb      	strb	r3, [r7, #15]
      break;
 800e65c:	e00f      	b.n	800e67e <USBH_HandleEnum+0x44a>

    default:
      break;
 800e65e:	bf00      	nop
 800e660:	e00e      	b.n	800e680 <USBH_HandleEnum+0x44c>
      break;
 800e662:	bf00      	nop
 800e664:	e00c      	b.n	800e680 <USBH_HandleEnum+0x44c>
      break;
 800e666:	bf00      	nop
 800e668:	e00a      	b.n	800e680 <USBH_HandleEnum+0x44c>
      break;
 800e66a:	bf00      	nop
 800e66c:	e008      	b.n	800e680 <USBH_HandleEnum+0x44c>
      break;
 800e66e:	bf00      	nop
 800e670:	e006      	b.n	800e680 <USBH_HandleEnum+0x44c>
      break;
 800e672:	bf00      	nop
 800e674:	e004      	b.n	800e680 <USBH_HandleEnum+0x44c>
      break;
 800e676:	bf00      	nop
 800e678:	e002      	b.n	800e680 <USBH_HandleEnum+0x44c>
      break;
 800e67a:	bf00      	nop
 800e67c:	e000      	b.n	800e680 <USBH_HandleEnum+0x44c>
      break;
 800e67e:	bf00      	nop
  }
  return Status;
 800e680:	7bfb      	ldrb	r3, [r7, #15]
}
 800e682:	4618      	mov	r0, r3
 800e684:	3710      	adds	r7, #16
 800e686:	46bd      	mov	sp, r7
 800e688:	bd80      	pop	{r7, pc}
 800e68a:	bf00      	nop

0800e68c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800e68c:	b480      	push	{r7}
 800e68e:	b083      	sub	sp, #12
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
 800e694:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	683a      	ldr	r2, [r7, #0]
 800e69a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800e69e:	bf00      	nop
 800e6a0:	370c      	adds	r7, #12
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a8:	4770      	bx	lr

0800e6aa <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800e6aa:	b580      	push	{r7, lr}
 800e6ac:	b082      	sub	sp, #8
 800e6ae:	af00      	add	r7, sp, #0
 800e6b0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e6b8:	1c5a      	adds	r2, r3, #1
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800e6c0:	6878      	ldr	r0, [r7, #4]
 800e6c2:	f000 f804 	bl	800e6ce <USBH_HandleSof>
}
 800e6c6:	bf00      	nop
 800e6c8:	3708      	adds	r7, #8
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bd80      	pop	{r7, pc}

0800e6ce <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800e6ce:	b580      	push	{r7, lr}
 800e6d0:	b082      	sub	sp, #8
 800e6d2:	af00      	add	r7, sp, #0
 800e6d4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	781b      	ldrb	r3, [r3, #0]
 800e6da:	b2db      	uxtb	r3, r3
 800e6dc:	2b0b      	cmp	r3, #11
 800e6de:	d10a      	bne.n	800e6f6 <USBH_HandleSof+0x28>
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d005      	beq.n	800e6f6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e6f0:	699b      	ldr	r3, [r3, #24]
 800e6f2:	6878      	ldr	r0, [r7, #4]
 800e6f4:	4798      	blx	r3
  }
}
 800e6f6:	bf00      	nop
 800e6f8:	3708      	adds	r7, #8
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	bd80      	pop	{r7, pc}

0800e6fe <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800e6fe:	b580      	push	{r7, lr}
 800e700:	b082      	sub	sp, #8
 800e702:	af00      	add	r7, sp, #0
 800e704:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	2201      	movs	r2, #1
 800e70a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	2201      	movs	r2, #1
 800e712:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e722:	2200      	movs	r2, #0
 800e724:	4619      	mov	r1, r3
 800e726:	f001 f9c7 	bl	800fab8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800e72a:	bf00      	nop
}
 800e72c:	3708      	adds	r7, #8
 800e72e:	46bd      	mov	sp, r7
 800e730:	bd80      	pop	{r7, pc}

0800e732 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800e732:	b480      	push	{r7}
 800e734:	b083      	sub	sp, #12
 800e736:	af00      	add	r7, sp, #0
 800e738:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	2200      	movs	r2, #0
 800e73e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800e742:	bf00      	nop
}
 800e744:	370c      	adds	r7, #12
 800e746:	46bd      	mov	sp, r7
 800e748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74c:	4770      	bx	lr

0800e74e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800e74e:	b580      	push	{r7, lr}
 800e750:	b082      	sub	sp, #8
 800e752:	af00      	add	r7, sp, #0
 800e754:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	2201      	movs	r2, #1
 800e75a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	2200      	movs	r2, #0
 800e762:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	2200      	movs	r2, #0
 800e76a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	2201      	movs	r2, #1
 800e772:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e782:	2200      	movs	r2, #0
 800e784:	4619      	mov	r1, r3
 800e786:	f001 f997 	bl	800fab8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800e78a:	2300      	movs	r3, #0
}
 800e78c:	4618      	mov	r0, r3
 800e78e:	3708      	adds	r7, #8
 800e790:	46bd      	mov	sp, r7
 800e792:	bd80      	pop	{r7, pc}

0800e794 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800e794:	b580      	push	{r7, lr}
 800e796:	b082      	sub	sp, #8
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	2201      	movs	r2, #1
 800e7a0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800e7b4:	6878      	ldr	r0, [r7, #4]
 800e7b6:	f004 f950 	bl	8012a5a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	791b      	ldrb	r3, [r3, #4]
 800e7be:	4619      	mov	r1, r3
 800e7c0:	6878      	ldr	r0, [r7, #4]
 800e7c2:	f000 ffbd 	bl	800f740 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	795b      	ldrb	r3, [r3, #5]
 800e7ca:	4619      	mov	r1, r3
 800e7cc:	6878      	ldr	r0, [r7, #4]
 800e7ce:	f000 ffb7 	bl	800f740 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	2201      	movs	r2, #1
 800e7d6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	4619      	mov	r1, r3
 800e7ea:	f001 f965 	bl	800fab8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800e7ee:	2300      	movs	r3, #0
}
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	3708      	adds	r7, #8
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	bd80      	pop	{r7, pc}

0800e7f8 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b086      	sub	sp, #24
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 800e806:	f107 030c 	add.w	r3, r7, #12
 800e80a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e80e:	4618      	mov	r0, r3
 800e810:	f001 f992 	bl	800fb38 <osMessageGet>
    if (event.status == osEventMessage)
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	2b10      	cmp	r3, #16
 800e818:	d1f2      	bne.n	800e800 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800e81a:	6878      	ldr	r0, [r7, #4]
 800e81c:	f7ff fa9e 	bl	800dd5c <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800e820:	e7ee      	b.n	800e800 <USBH_Process_OS+0x8>

0800e822 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800e822:	b580      	push	{r7, lr}
 800e824:	b082      	sub	sp, #8
 800e826:	af00      	add	r7, sp, #0
 800e828:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	2201      	movs	r2, #1
 800e82e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e83e:	2200      	movs	r2, #0
 800e840:	4619      	mov	r1, r3
 800e842:	f001 f939 	bl	800fab8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 800e846:	2300      	movs	r3, #0
}
 800e848:	4618      	mov	r0, r3
 800e84a:	3708      	adds	r7, #8
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd80      	pop	{r7, pc}

0800e850 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b086      	sub	sp, #24
 800e854:	af02      	add	r7, sp, #8
 800e856:	6078      	str	r0, [r7, #4]
 800e858:	460b      	mov	r3, r1
 800e85a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800e862:	78fb      	ldrb	r3, [r7, #3]
 800e864:	b29b      	uxth	r3, r3
 800e866:	9300      	str	r3, [sp, #0]
 800e868:	4613      	mov	r3, r2
 800e86a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e86e:	2100      	movs	r1, #0
 800e870:	6878      	ldr	r0, [r7, #4]
 800e872:	f000 f864 	bl	800e93e <USBH_GetDescriptor>
 800e876:	4603      	mov	r3, r0
 800e878:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800e87a:	7bfb      	ldrb	r3, [r7, #15]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d10a      	bne.n	800e896 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	f203 3026 	addw	r0, r3, #806	; 0x326
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e88c:	78fa      	ldrb	r2, [r7, #3]
 800e88e:	b292      	uxth	r2, r2
 800e890:	4619      	mov	r1, r3
 800e892:	f000 f919 	bl	800eac8 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800e896:	7bfb      	ldrb	r3, [r7, #15]
}
 800e898:	4618      	mov	r0, r3
 800e89a:	3710      	adds	r7, #16
 800e89c:	46bd      	mov	sp, r7
 800e89e:	bd80      	pop	{r7, pc}

0800e8a0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b086      	sub	sp, #24
 800e8a4:	af02      	add	r7, sp, #8
 800e8a6:	6078      	str	r0, [r7, #4]
 800e8a8:	460b      	mov	r3, r1
 800e8aa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	331c      	adds	r3, #28
 800e8b0:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800e8b2:	887b      	ldrh	r3, [r7, #2]
 800e8b4:	9300      	str	r3, [sp, #0]
 800e8b6:	68bb      	ldr	r3, [r7, #8]
 800e8b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e8bc:	2100      	movs	r1, #0
 800e8be:	6878      	ldr	r0, [r7, #4]
 800e8c0:	f000 f83d 	bl	800e93e <USBH_GetDescriptor>
 800e8c4:	4603      	mov	r3, r0
 800e8c6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800e8c8:	7bfb      	ldrb	r3, [r7, #15]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d107      	bne.n	800e8de <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800e8ce:	887b      	ldrh	r3, [r7, #2]
 800e8d0:	461a      	mov	r2, r3
 800e8d2:	68b9      	ldr	r1, [r7, #8]
 800e8d4:	6878      	ldr	r0, [r7, #4]
 800e8d6:	f000 f987 	bl	800ebe8 <USBH_ParseCfgDesc>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e8de:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	3710      	adds	r7, #16
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	bd80      	pop	{r7, pc}

0800e8e8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b088      	sub	sp, #32
 800e8ec:	af02      	add	r7, sp, #8
 800e8ee:	60f8      	str	r0, [r7, #12]
 800e8f0:	607a      	str	r2, [r7, #4]
 800e8f2:	461a      	mov	r2, r3
 800e8f4:	460b      	mov	r3, r1
 800e8f6:	72fb      	strb	r3, [r7, #11]
 800e8f8:	4613      	mov	r3, r2
 800e8fa:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800e8fc:	7afb      	ldrb	r3, [r7, #11]
 800e8fe:	b29b      	uxth	r3, r3
 800e900:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800e904:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800e90c:	893b      	ldrh	r3, [r7, #8]
 800e90e:	9300      	str	r3, [sp, #0]
 800e910:	460b      	mov	r3, r1
 800e912:	2100      	movs	r1, #0
 800e914:	68f8      	ldr	r0, [r7, #12]
 800e916:	f000 f812 	bl	800e93e <USBH_GetDescriptor>
 800e91a:	4603      	mov	r3, r0
 800e91c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800e91e:	7dfb      	ldrb	r3, [r7, #23]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d107      	bne.n	800e934 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e92a:	893a      	ldrh	r2, [r7, #8]
 800e92c:	6879      	ldr	r1, [r7, #4]
 800e92e:	4618      	mov	r0, r3
 800e930:	f000 fb26 	bl	800ef80 <USBH_ParseStringDesc>
  }

  return status;
 800e934:	7dfb      	ldrb	r3, [r7, #23]
}
 800e936:	4618      	mov	r0, r3
 800e938:	3718      	adds	r7, #24
 800e93a:	46bd      	mov	sp, r7
 800e93c:	bd80      	pop	{r7, pc}

0800e93e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800e93e:	b580      	push	{r7, lr}
 800e940:	b084      	sub	sp, #16
 800e942:	af00      	add	r7, sp, #0
 800e944:	60f8      	str	r0, [r7, #12]
 800e946:	607b      	str	r3, [r7, #4]
 800e948:	460b      	mov	r3, r1
 800e94a:	72fb      	strb	r3, [r7, #11]
 800e94c:	4613      	mov	r3, r2
 800e94e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	789b      	ldrb	r3, [r3, #2]
 800e954:	2b01      	cmp	r3, #1
 800e956:	d11c      	bne.n	800e992 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800e958:	7afb      	ldrb	r3, [r7, #11]
 800e95a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e95e:	b2da      	uxtb	r2, r3
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	2206      	movs	r2, #6
 800e968:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	893a      	ldrh	r2, [r7, #8]
 800e96e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800e970:	893b      	ldrh	r3, [r7, #8]
 800e972:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e976:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e97a:	d104      	bne.n	800e986 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	f240 4209 	movw	r2, #1033	; 0x409
 800e982:	829a      	strh	r2, [r3, #20]
 800e984:	e002      	b.n	800e98c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	2200      	movs	r2, #0
 800e98a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	8b3a      	ldrh	r2, [r7, #24]
 800e990:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800e992:	8b3b      	ldrh	r3, [r7, #24]
 800e994:	461a      	mov	r2, r3
 800e996:	6879      	ldr	r1, [r7, #4]
 800e998:	68f8      	ldr	r0, [r7, #12]
 800e99a:	f000 fb3f 	bl	800f01c <USBH_CtlReq>
 800e99e:	4603      	mov	r3, r0
}
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	3710      	adds	r7, #16
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	bd80      	pop	{r7, pc}

0800e9a8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b082      	sub	sp, #8
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
 800e9b0:	460b      	mov	r3, r1
 800e9b2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	789b      	ldrb	r3, [r3, #2]
 800e9b8:	2b01      	cmp	r3, #1
 800e9ba:	d10f      	bne.n	800e9dc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2200      	movs	r2, #0
 800e9c0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	2205      	movs	r2, #5
 800e9c6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800e9c8:	78fb      	ldrb	r3, [r7, #3]
 800e9ca:	b29a      	uxth	r2, r3
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	2200      	movs	r2, #0
 800e9da:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800e9dc:	2200      	movs	r2, #0
 800e9de:	2100      	movs	r1, #0
 800e9e0:	6878      	ldr	r0, [r7, #4]
 800e9e2:	f000 fb1b 	bl	800f01c <USBH_CtlReq>
 800e9e6:	4603      	mov	r3, r0
}
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	3708      	adds	r7, #8
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	bd80      	pop	{r7, pc}

0800e9f0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	b082      	sub	sp, #8
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	6078      	str	r0, [r7, #4]
 800e9f8:	460b      	mov	r3, r1
 800e9fa:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	789b      	ldrb	r3, [r3, #2]
 800ea00:	2b01      	cmp	r3, #1
 800ea02:	d10e      	bne.n	800ea22 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	2200      	movs	r2, #0
 800ea08:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	2209      	movs	r2, #9
 800ea0e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	887a      	ldrh	r2, [r7, #2]
 800ea14:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	2200      	movs	r2, #0
 800ea1a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	2200      	movs	r2, #0
 800ea20:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ea22:	2200      	movs	r2, #0
 800ea24:	2100      	movs	r1, #0
 800ea26:	6878      	ldr	r0, [r7, #4]
 800ea28:	f000 faf8 	bl	800f01c <USBH_CtlReq>
 800ea2c:	4603      	mov	r3, r0
}
 800ea2e:	4618      	mov	r0, r3
 800ea30:	3708      	adds	r7, #8
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}

0800ea36 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800ea36:	b580      	push	{r7, lr}
 800ea38:	b082      	sub	sp, #8
 800ea3a:	af00      	add	r7, sp, #0
 800ea3c:	6078      	str	r0, [r7, #4]
 800ea3e:	460b      	mov	r3, r1
 800ea40:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	789b      	ldrb	r3, [r3, #2]
 800ea46:	2b01      	cmp	r3, #1
 800ea48:	d10f      	bne.n	800ea6a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2203      	movs	r2, #3
 800ea54:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800ea56:	78fb      	ldrb	r3, [r7, #3]
 800ea58:	b29a      	uxth	r2, r3
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	2200      	movs	r2, #0
 800ea62:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	2200      	movs	r2, #0
 800ea68:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	2100      	movs	r1, #0
 800ea6e:	6878      	ldr	r0, [r7, #4]
 800ea70:	f000 fad4 	bl	800f01c <USBH_CtlReq>
 800ea74:	4603      	mov	r3, r0
}
 800ea76:	4618      	mov	r0, r3
 800ea78:	3708      	adds	r7, #8
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}

0800ea7e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ea7e:	b580      	push	{r7, lr}
 800ea80:	b082      	sub	sp, #8
 800ea82:	af00      	add	r7, sp, #0
 800ea84:	6078      	str	r0, [r7, #4]
 800ea86:	460b      	mov	r3, r1
 800ea88:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	789b      	ldrb	r3, [r3, #2]
 800ea8e:	2b01      	cmp	r3, #1
 800ea90:	d10f      	bne.n	800eab2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	2202      	movs	r2, #2
 800ea96:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	2201      	movs	r2, #1
 800ea9c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800eaa4:	78fb      	ldrb	r3, [r7, #3]
 800eaa6:	b29a      	uxth	r2, r3
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	2200      	movs	r2, #0
 800eab0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800eab2:	2200      	movs	r2, #0
 800eab4:	2100      	movs	r1, #0
 800eab6:	6878      	ldr	r0, [r7, #4]
 800eab8:	f000 fab0 	bl	800f01c <USBH_CtlReq>
 800eabc:	4603      	mov	r3, r0
}
 800eabe:	4618      	mov	r0, r3
 800eac0:	3708      	adds	r7, #8
 800eac2:	46bd      	mov	sp, r7
 800eac4:	bd80      	pop	{r7, pc}
	...

0800eac8 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800eac8:	b480      	push	{r7}
 800eaca:	b085      	sub	sp, #20
 800eacc:	af00      	add	r7, sp, #0
 800eace:	60f8      	str	r0, [r7, #12]
 800ead0:	60b9      	str	r1, [r7, #8]
 800ead2:	4613      	mov	r3, r2
 800ead4:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800ead6:	68bb      	ldr	r3, [r7, #8]
 800ead8:	781a      	ldrb	r2, [r3, #0]
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800eade:	68bb      	ldr	r3, [r7, #8]
 800eae0:	785a      	ldrb	r2, [r3, #1]
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800eae6:	68bb      	ldr	r3, [r7, #8]
 800eae8:	3302      	adds	r3, #2
 800eaea:	781b      	ldrb	r3, [r3, #0]
 800eaec:	b29a      	uxth	r2, r3
 800eaee:	68bb      	ldr	r3, [r7, #8]
 800eaf0:	3303      	adds	r3, #3
 800eaf2:	781b      	ldrb	r3, [r3, #0]
 800eaf4:	b29b      	uxth	r3, r3
 800eaf6:	021b      	lsls	r3, r3, #8
 800eaf8:	b29b      	uxth	r3, r3
 800eafa:	4313      	orrs	r3, r2
 800eafc:	b29a      	uxth	r2, r3
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800eb02:	68bb      	ldr	r3, [r7, #8]
 800eb04:	791a      	ldrb	r2, [r3, #4]
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800eb0a:	68bb      	ldr	r3, [r7, #8]
 800eb0c:	795a      	ldrb	r2, [r3, #5]
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800eb12:	68bb      	ldr	r3, [r7, #8]
 800eb14:	799a      	ldrb	r2, [r3, #6]
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800eb1a:	68bb      	ldr	r3, [r7, #8]
 800eb1c:	79da      	ldrb	r2, [r3, #7]
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	79db      	ldrb	r3, [r3, #7]
 800eb26:	2b20      	cmp	r3, #32
 800eb28:	dc0e      	bgt.n	800eb48 <USBH_ParseDevDesc+0x80>
 800eb2a:	2b08      	cmp	r3, #8
 800eb2c:	db13      	blt.n	800eb56 <USBH_ParseDevDesc+0x8e>
 800eb2e:	3b08      	subs	r3, #8
 800eb30:	2201      	movs	r2, #1
 800eb32:	409a      	lsls	r2, r3
 800eb34:	4b2b      	ldr	r3, [pc, #172]	; (800ebe4 <USBH_ParseDevDesc+0x11c>)
 800eb36:	4013      	ands	r3, r2
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	bf14      	ite	ne
 800eb3c:	2301      	movne	r3, #1
 800eb3e:	2300      	moveq	r3, #0
 800eb40:	b2db      	uxtb	r3, r3
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d102      	bne.n	800eb4c <USBH_ParseDevDesc+0x84>
 800eb46:	e006      	b.n	800eb56 <USBH_ParseDevDesc+0x8e>
 800eb48:	2b40      	cmp	r3, #64	; 0x40
 800eb4a:	d104      	bne.n	800eb56 <USBH_ParseDevDesc+0x8e>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	79da      	ldrb	r2, [r3, #7]
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	71da      	strb	r2, [r3, #7]
      break;
 800eb54:	e003      	b.n	800eb5e <USBH_ParseDevDesc+0x96>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	2240      	movs	r2, #64	; 0x40
 800eb5a:	71da      	strb	r2, [r3, #7]
      break;
 800eb5c:	bf00      	nop
  }

  if (length > 8U)
 800eb5e:	88fb      	ldrh	r3, [r7, #6]
 800eb60:	2b08      	cmp	r3, #8
 800eb62:	d939      	bls.n	800ebd8 <USBH_ParseDevDesc+0x110>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800eb64:	68bb      	ldr	r3, [r7, #8]
 800eb66:	3308      	adds	r3, #8
 800eb68:	781b      	ldrb	r3, [r3, #0]
 800eb6a:	b29a      	uxth	r2, r3
 800eb6c:	68bb      	ldr	r3, [r7, #8]
 800eb6e:	3309      	adds	r3, #9
 800eb70:	781b      	ldrb	r3, [r3, #0]
 800eb72:	b29b      	uxth	r3, r3
 800eb74:	021b      	lsls	r3, r3, #8
 800eb76:	b29b      	uxth	r3, r3
 800eb78:	4313      	orrs	r3, r2
 800eb7a:	b29a      	uxth	r2, r3
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	330a      	adds	r3, #10
 800eb84:	781b      	ldrb	r3, [r3, #0]
 800eb86:	b29a      	uxth	r2, r3
 800eb88:	68bb      	ldr	r3, [r7, #8]
 800eb8a:	330b      	adds	r3, #11
 800eb8c:	781b      	ldrb	r3, [r3, #0]
 800eb8e:	b29b      	uxth	r3, r3
 800eb90:	021b      	lsls	r3, r3, #8
 800eb92:	b29b      	uxth	r3, r3
 800eb94:	4313      	orrs	r3, r2
 800eb96:	b29a      	uxth	r2, r3
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800eb9c:	68bb      	ldr	r3, [r7, #8]
 800eb9e:	330c      	adds	r3, #12
 800eba0:	781b      	ldrb	r3, [r3, #0]
 800eba2:	b29a      	uxth	r2, r3
 800eba4:	68bb      	ldr	r3, [r7, #8]
 800eba6:	330d      	adds	r3, #13
 800eba8:	781b      	ldrb	r3, [r3, #0]
 800ebaa:	b29b      	uxth	r3, r3
 800ebac:	021b      	lsls	r3, r3, #8
 800ebae:	b29b      	uxth	r3, r3
 800ebb0:	4313      	orrs	r3, r2
 800ebb2:	b29a      	uxth	r2, r3
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	7b9a      	ldrb	r2, [r3, #14]
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800ebc0:	68bb      	ldr	r3, [r7, #8]
 800ebc2:	7bda      	ldrb	r2, [r3, #15]
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800ebc8:	68bb      	ldr	r3, [r7, #8]
 800ebca:	7c1a      	ldrb	r2, [r3, #16]
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800ebd0:	68bb      	ldr	r3, [r7, #8]
 800ebd2:	7c5a      	ldrb	r2, [r3, #17]
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	745a      	strb	r2, [r3, #17]
  }
}
 800ebd8:	bf00      	nop
 800ebda:	3714      	adds	r7, #20
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe2:	4770      	bx	lr
 800ebe4:	01000101 	.word	0x01000101

0800ebe8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b08c      	sub	sp, #48	; 0x30
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	60f8      	str	r0, [r7, #12]
 800ebf0:	60b9      	str	r1, [r7, #8]
 800ebf2:	4613      	mov	r3, r2
 800ebf4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ebfc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800ebfe:	2300      	movs	r3, #0
 800ec00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800ec04:	68bb      	ldr	r3, [r7, #8]
 800ec06:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800ec08:	2300      	movs	r3, #0
 800ec0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800ec0e:	2300      	movs	r3, #0
 800ec10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800ec14:	68bb      	ldr	r3, [r7, #8]
 800ec16:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800ec18:	68bb      	ldr	r3, [r7, #8]
 800ec1a:	781a      	ldrb	r2, [r3, #0]
 800ec1c:	6a3b      	ldr	r3, [r7, #32]
 800ec1e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800ec20:	68bb      	ldr	r3, [r7, #8]
 800ec22:	785a      	ldrb	r2, [r3, #1]
 800ec24:	6a3b      	ldr	r3, [r7, #32]
 800ec26:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800ec28:	68bb      	ldr	r3, [r7, #8]
 800ec2a:	3302      	adds	r3, #2
 800ec2c:	781b      	ldrb	r3, [r3, #0]
 800ec2e:	b29a      	uxth	r2, r3
 800ec30:	68bb      	ldr	r3, [r7, #8]
 800ec32:	3303      	adds	r3, #3
 800ec34:	781b      	ldrb	r3, [r3, #0]
 800ec36:	b29b      	uxth	r3, r3
 800ec38:	021b      	lsls	r3, r3, #8
 800ec3a:	b29b      	uxth	r3, r3
 800ec3c:	4313      	orrs	r3, r2
 800ec3e:	b29b      	uxth	r3, r3
 800ec40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec44:	bf28      	it	cs
 800ec46:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800ec4a:	b29a      	uxth	r2, r3
 800ec4c:	6a3b      	ldr	r3, [r7, #32]
 800ec4e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800ec50:	68bb      	ldr	r3, [r7, #8]
 800ec52:	791a      	ldrb	r2, [r3, #4]
 800ec54:	6a3b      	ldr	r3, [r7, #32]
 800ec56:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800ec58:	68bb      	ldr	r3, [r7, #8]
 800ec5a:	795a      	ldrb	r2, [r3, #5]
 800ec5c:	6a3b      	ldr	r3, [r7, #32]
 800ec5e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800ec60:	68bb      	ldr	r3, [r7, #8]
 800ec62:	799a      	ldrb	r2, [r3, #6]
 800ec64:	6a3b      	ldr	r3, [r7, #32]
 800ec66:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800ec68:	68bb      	ldr	r3, [r7, #8]
 800ec6a:	79da      	ldrb	r2, [r3, #7]
 800ec6c:	6a3b      	ldr	r3, [r7, #32]
 800ec6e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800ec70:	68bb      	ldr	r3, [r7, #8]
 800ec72:	7a1a      	ldrb	r2, [r3, #8]
 800ec74:	6a3b      	ldr	r3, [r7, #32]
 800ec76:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800ec78:	6a3b      	ldr	r3, [r7, #32]
 800ec7a:	781b      	ldrb	r3, [r3, #0]
 800ec7c:	2b09      	cmp	r3, #9
 800ec7e:	d002      	beq.n	800ec86 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800ec80:	6a3b      	ldr	r3, [r7, #32]
 800ec82:	2209      	movs	r2, #9
 800ec84:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800ec86:	88fb      	ldrh	r3, [r7, #6]
 800ec88:	2b09      	cmp	r3, #9
 800ec8a:	f240 809d 	bls.w	800edc8 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800ec8e:	2309      	movs	r3, #9
 800ec90:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800ec92:	2300      	movs	r3, #0
 800ec94:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ec96:	e081      	b.n	800ed9c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ec98:	f107 0316 	add.w	r3, r7, #22
 800ec9c:	4619      	mov	r1, r3
 800ec9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eca0:	f000 f9a1 	bl	800efe6 <USBH_GetNextDesc>
 800eca4:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800eca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eca8:	785b      	ldrb	r3, [r3, #1]
 800ecaa:	2b04      	cmp	r3, #4
 800ecac:	d176      	bne.n	800ed9c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800ecae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecb0:	781b      	ldrb	r3, [r3, #0]
 800ecb2:	2b09      	cmp	r3, #9
 800ecb4:	d002      	beq.n	800ecbc <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800ecb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecb8:	2209      	movs	r2, #9
 800ecba:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800ecbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ecc0:	221a      	movs	r2, #26
 800ecc2:	fb02 f303 	mul.w	r3, r2, r3
 800ecc6:	3308      	adds	r3, #8
 800ecc8:	6a3a      	ldr	r2, [r7, #32]
 800ecca:	4413      	add	r3, r2
 800eccc:	3302      	adds	r3, #2
 800ecce:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800ecd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ecd2:	69f8      	ldr	r0, [r7, #28]
 800ecd4:	f000 f87e 	bl	800edd4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800ecd8:	2300      	movs	r3, #0
 800ecda:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800ecde:	2300      	movs	r3, #0
 800ece0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ece2:	e043      	b.n	800ed6c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ece4:	f107 0316 	add.w	r3, r7, #22
 800ece8:	4619      	mov	r1, r3
 800ecea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ecec:	f000 f97b 	bl	800efe6 <USBH_GetNextDesc>
 800ecf0:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ecf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecf4:	785b      	ldrb	r3, [r3, #1]
 800ecf6:	2b05      	cmp	r3, #5
 800ecf8:	d138      	bne.n	800ed6c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800ecfa:	69fb      	ldr	r3, [r7, #28]
 800ecfc:	795b      	ldrb	r3, [r3, #5]
 800ecfe:	2b01      	cmp	r3, #1
 800ed00:	d10f      	bne.n	800ed22 <USBH_ParseCfgDesc+0x13a>
 800ed02:	69fb      	ldr	r3, [r7, #28]
 800ed04:	799b      	ldrb	r3, [r3, #6]
 800ed06:	2b02      	cmp	r3, #2
 800ed08:	d10b      	bne.n	800ed22 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ed0a:	69fb      	ldr	r3, [r7, #28]
 800ed0c:	79db      	ldrb	r3, [r3, #7]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d10f      	bne.n	800ed32 <USBH_ParseCfgDesc+0x14a>
 800ed12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed14:	781b      	ldrb	r3, [r3, #0]
 800ed16:	2b09      	cmp	r3, #9
 800ed18:	d00b      	beq.n	800ed32 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800ed1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed1c:	2209      	movs	r2, #9
 800ed1e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ed20:	e007      	b.n	800ed32 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800ed22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed24:	781b      	ldrb	r3, [r3, #0]
 800ed26:	2b07      	cmp	r3, #7
 800ed28:	d004      	beq.n	800ed34 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800ed2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed2c:	2207      	movs	r2, #7
 800ed2e:	701a      	strb	r2, [r3, #0]
 800ed30:	e000      	b.n	800ed34 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ed32:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ed34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed38:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ed3c:	3201      	adds	r2, #1
 800ed3e:	00d2      	lsls	r2, r2, #3
 800ed40:	211a      	movs	r1, #26
 800ed42:	fb01 f303 	mul.w	r3, r1, r3
 800ed46:	4413      	add	r3, r2
 800ed48:	3308      	adds	r3, #8
 800ed4a:	6a3a      	ldr	r2, [r7, #32]
 800ed4c:	4413      	add	r3, r2
 800ed4e:	3304      	adds	r3, #4
 800ed50:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800ed52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed54:	69b9      	ldr	r1, [r7, #24]
 800ed56:	68f8      	ldr	r0, [r7, #12]
 800ed58:	f000 f86c 	bl	800ee34 <USBH_ParseEPDesc>
 800ed5c:	4603      	mov	r3, r0
 800ed5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800ed62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ed66:	3301      	adds	r3, #1
 800ed68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ed6c:	69fb      	ldr	r3, [r7, #28]
 800ed6e:	791b      	ldrb	r3, [r3, #4]
 800ed70:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ed74:	429a      	cmp	r2, r3
 800ed76:	d204      	bcs.n	800ed82 <USBH_ParseCfgDesc+0x19a>
 800ed78:	6a3b      	ldr	r3, [r7, #32]
 800ed7a:	885a      	ldrh	r2, [r3, #2]
 800ed7c:	8afb      	ldrh	r3, [r7, #22]
 800ed7e:	429a      	cmp	r2, r3
 800ed80:	d8b0      	bhi.n	800ece4 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800ed82:	69fb      	ldr	r3, [r7, #28]
 800ed84:	791b      	ldrb	r3, [r3, #4]
 800ed86:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ed8a:	429a      	cmp	r2, r3
 800ed8c:	d201      	bcs.n	800ed92 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800ed8e:	2303      	movs	r3, #3
 800ed90:	e01c      	b.n	800edcc <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800ed92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed96:	3301      	adds	r3, #1
 800ed98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ed9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eda0:	2b01      	cmp	r3, #1
 800eda2:	d805      	bhi.n	800edb0 <USBH_ParseCfgDesc+0x1c8>
 800eda4:	6a3b      	ldr	r3, [r7, #32]
 800eda6:	885a      	ldrh	r2, [r3, #2]
 800eda8:	8afb      	ldrh	r3, [r7, #22]
 800edaa:	429a      	cmp	r2, r3
 800edac:	f63f af74 	bhi.w	800ec98 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800edb0:	6a3b      	ldr	r3, [r7, #32]
 800edb2:	791b      	ldrb	r3, [r3, #4]
 800edb4:	2b02      	cmp	r3, #2
 800edb6:	bf28      	it	cs
 800edb8:	2302      	movcs	r3, #2
 800edba:	b2db      	uxtb	r3, r3
 800edbc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800edc0:	429a      	cmp	r2, r3
 800edc2:	d201      	bcs.n	800edc8 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800edc4:	2303      	movs	r3, #3
 800edc6:	e001      	b.n	800edcc <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800edc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800edcc:	4618      	mov	r0, r3
 800edce:	3730      	adds	r7, #48	; 0x30
 800edd0:	46bd      	mov	sp, r7
 800edd2:	bd80      	pop	{r7, pc}

0800edd4 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800edd4:	b480      	push	{r7}
 800edd6:	b083      	sub	sp, #12
 800edd8:	af00      	add	r7, sp, #0
 800edda:	6078      	str	r0, [r7, #4]
 800eddc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800edde:	683b      	ldr	r3, [r7, #0]
 800ede0:	781a      	ldrb	r2, [r3, #0]
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	785a      	ldrb	r2, [r3, #1]
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800edee:	683b      	ldr	r3, [r7, #0]
 800edf0:	789a      	ldrb	r2, [r3, #2]
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800edf6:	683b      	ldr	r3, [r7, #0]
 800edf8:	78da      	ldrb	r2, [r3, #3]
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800edfe:	683b      	ldr	r3, [r7, #0]
 800ee00:	791a      	ldrb	r2, [r3, #4]
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800ee06:	683b      	ldr	r3, [r7, #0]
 800ee08:	795a      	ldrb	r2, [r3, #5]
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800ee0e:	683b      	ldr	r3, [r7, #0]
 800ee10:	799a      	ldrb	r2, [r3, #6]
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	79da      	ldrb	r2, [r3, #7]
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800ee1e:	683b      	ldr	r3, [r7, #0]
 800ee20:	7a1a      	ldrb	r2, [r3, #8]
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	721a      	strb	r2, [r3, #8]
}
 800ee26:	bf00      	nop
 800ee28:	370c      	adds	r7, #12
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee30:	4770      	bx	lr
	...

0800ee34 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800ee34:	b480      	push	{r7}
 800ee36:	b087      	sub	sp, #28
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	60f8      	str	r0, [r7, #12]
 800ee3c:	60b9      	str	r1, [r7, #8]
 800ee3e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800ee40:	2300      	movs	r3, #0
 800ee42:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	781a      	ldrb	r2, [r3, #0]
 800ee48:	68bb      	ldr	r3, [r7, #8]
 800ee4a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	785a      	ldrb	r2, [r3, #1]
 800ee50:	68bb      	ldr	r3, [r7, #8]
 800ee52:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	789a      	ldrb	r2, [r3, #2]
 800ee58:	68bb      	ldr	r3, [r7, #8]
 800ee5a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	78da      	ldrb	r2, [r3, #3]
 800ee60:	68bb      	ldr	r3, [r7, #8]
 800ee62:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	3304      	adds	r3, #4
 800ee68:	781b      	ldrb	r3, [r3, #0]
 800ee6a:	b29a      	uxth	r2, r3
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	3305      	adds	r3, #5
 800ee70:	781b      	ldrb	r3, [r3, #0]
 800ee72:	b29b      	uxth	r3, r3
 800ee74:	021b      	lsls	r3, r3, #8
 800ee76:	b29b      	uxth	r3, r3
 800ee78:	4313      	orrs	r3, r2
 800ee7a:	b29a      	uxth	r2, r3
 800ee7c:	68bb      	ldr	r3, [r7, #8]
 800ee7e:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	799a      	ldrb	r2, [r3, #6]
 800ee84:	68bb      	ldr	r3, [r7, #8]
 800ee86:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800ee88:	68bb      	ldr	r3, [r7, #8]
 800ee8a:	889b      	ldrh	r3, [r3, #4]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d102      	bne.n	800ee96 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800ee90:	2303      	movs	r3, #3
 800ee92:	75fb      	strb	r3, [r7, #23]
 800ee94:	e031      	b.n	800eefa <USBH_ParseEPDesc+0xc6>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800ee96:	68bb      	ldr	r3, [r7, #8]
 800ee98:	889a      	ldrh	r2, [r3, #4]
 800ee9a:	4b38      	ldr	r3, [pc, #224]	; (800ef7c <USBH_ParseEPDesc+0x148>)
 800ee9c:	4013      	ands	r3, r2
 800ee9e:	b29a      	uxth	r2, r3
 800eea0:	68bb      	ldr	r3, [r7, #8]
 800eea2:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800eea4:	68bb      	ldr	r3, [r7, #8]
 800eea6:	889b      	ldrh	r3, [r3, #4]
 800eea8:	b21a      	sxth	r2, r3
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	3304      	adds	r3, #4
 800eeae:	781b      	ldrb	r3, [r3, #0]
 800eeb0:	b299      	uxth	r1, r3
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	3305      	adds	r3, #5
 800eeb6:	781b      	ldrb	r3, [r3, #0]
 800eeb8:	b29b      	uxth	r3, r3
 800eeba:	021b      	lsls	r3, r3, #8
 800eebc:	b29b      	uxth	r3, r3
 800eebe:	430b      	orrs	r3, r1
 800eec0:	b29b      	uxth	r3, r3
 800eec2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d110      	bne.n	800eeec <USBH_ParseEPDesc+0xb8>
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	3304      	adds	r3, #4
 800eece:	781b      	ldrb	r3, [r3, #0]
 800eed0:	b299      	uxth	r1, r3
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	3305      	adds	r3, #5
 800eed6:	781b      	ldrb	r3, [r3, #0]
 800eed8:	b29b      	uxth	r3, r3
 800eeda:	021b      	lsls	r3, r3, #8
 800eedc:	b29b      	uxth	r3, r3
 800eede:	430b      	orrs	r3, r1
 800eee0:	b29b      	uxth	r3, r3
 800eee2:	b21b      	sxth	r3, r3
 800eee4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800eee8:	b21b      	sxth	r3, r3
 800eeea:	e001      	b.n	800eef0 <USBH_ParseEPDesc+0xbc>
 800eeec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eef0:	4313      	orrs	r3, r2
 800eef2:	b21b      	sxth	r3, r3
 800eef4:	b29a      	uxth	r2, r3
 800eef6:	68bb      	ldr	r3, [r7, #8]
 800eef8:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d116      	bne.n	800ef32 <USBH_ParseEPDesc+0xfe>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800ef04:	68bb      	ldr	r3, [r7, #8]
 800ef06:	78db      	ldrb	r3, [r3, #3]
 800ef08:	f003 0303 	and.w	r3, r3, #3
 800ef0c:	2b01      	cmp	r3, #1
 800ef0e:	d005      	beq.n	800ef1c <USBH_ParseEPDesc+0xe8>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800ef10:	68bb      	ldr	r3, [r7, #8]
 800ef12:	78db      	ldrb	r3, [r3, #3]
 800ef14:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800ef18:	2b03      	cmp	r3, #3
 800ef1a:	d127      	bne.n	800ef6c <USBH_ParseEPDesc+0x138>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800ef1c:	68bb      	ldr	r3, [r7, #8]
 800ef1e:	799b      	ldrb	r3, [r3, #6]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d003      	beq.n	800ef2c <USBH_ParseEPDesc+0xf8>
 800ef24:	68bb      	ldr	r3, [r7, #8]
 800ef26:	799b      	ldrb	r3, [r3, #6]
 800ef28:	2b10      	cmp	r3, #16
 800ef2a:	d91f      	bls.n	800ef6c <USBH_ParseEPDesc+0x138>
      {
        status = USBH_NOT_SUPPORTED;
 800ef2c:	2303      	movs	r3, #3
 800ef2e:	75fb      	strb	r3, [r7, #23]
 800ef30:	e01c      	b.n	800ef6c <USBH_ParseEPDesc+0x138>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800ef32:	68bb      	ldr	r3, [r7, #8]
 800ef34:	78db      	ldrb	r3, [r3, #3]
 800ef36:	f003 0303 	and.w	r3, r3, #3
 800ef3a:	2b01      	cmp	r3, #1
 800ef3c:	d10a      	bne.n	800ef54 <USBH_ParseEPDesc+0x120>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800ef3e:	68bb      	ldr	r3, [r7, #8]
 800ef40:	799b      	ldrb	r3, [r3, #6]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d003      	beq.n	800ef4e <USBH_ParseEPDesc+0x11a>
 800ef46:	68bb      	ldr	r3, [r7, #8]
 800ef48:	799b      	ldrb	r3, [r3, #6]
 800ef4a:	2b10      	cmp	r3, #16
 800ef4c:	d90e      	bls.n	800ef6c <USBH_ParseEPDesc+0x138>
      {
        status = USBH_NOT_SUPPORTED;
 800ef4e:	2303      	movs	r3, #3
 800ef50:	75fb      	strb	r3, [r7, #23]
 800ef52:	e00b      	b.n	800ef6c <USBH_ParseEPDesc+0x138>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800ef54:	68bb      	ldr	r3, [r7, #8]
 800ef56:	78db      	ldrb	r3, [r3, #3]
 800ef58:	f003 0303 	and.w	r3, r3, #3
 800ef5c:	2b03      	cmp	r3, #3
 800ef5e:	d105      	bne.n	800ef6c <USBH_ParseEPDesc+0x138>
    {
      if (ep_descriptor->bInterval == 0U)
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	799b      	ldrb	r3, [r3, #6]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d101      	bne.n	800ef6c <USBH_ParseEPDesc+0x138>
      {
        status = USBH_NOT_SUPPORTED;
 800ef68:	2303      	movs	r3, #3
 800ef6a:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800ef6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef6e:	4618      	mov	r0, r3
 800ef70:	371c      	adds	r7, #28
 800ef72:	46bd      	mov	sp, r7
 800ef74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef78:	4770      	bx	lr
 800ef7a:	bf00      	nop
 800ef7c:	fffff800 	.word	0xfffff800

0800ef80 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800ef80:	b480      	push	{r7}
 800ef82:	b087      	sub	sp, #28
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	60f8      	str	r0, [r7, #12]
 800ef88:	60b9      	str	r1, [r7, #8]
 800ef8a:	4613      	mov	r3, r2
 800ef8c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	3301      	adds	r3, #1
 800ef92:	781b      	ldrb	r3, [r3, #0]
 800ef94:	2b03      	cmp	r3, #3
 800ef96:	d120      	bne.n	800efda <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	781b      	ldrb	r3, [r3, #0]
 800ef9c:	1e9a      	subs	r2, r3, #2
 800ef9e:	88fb      	ldrh	r3, [r7, #6]
 800efa0:	4293      	cmp	r3, r2
 800efa2:	bf28      	it	cs
 800efa4:	4613      	movcs	r3, r2
 800efa6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	3302      	adds	r3, #2
 800efac:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800efae:	2300      	movs	r3, #0
 800efb0:	82fb      	strh	r3, [r7, #22]
 800efb2:	e00b      	b.n	800efcc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800efb4:	8afb      	ldrh	r3, [r7, #22]
 800efb6:	68fa      	ldr	r2, [r7, #12]
 800efb8:	4413      	add	r3, r2
 800efba:	781a      	ldrb	r2, [r3, #0]
 800efbc:	68bb      	ldr	r3, [r7, #8]
 800efbe:	701a      	strb	r2, [r3, #0]
      pdest++;
 800efc0:	68bb      	ldr	r3, [r7, #8]
 800efc2:	3301      	adds	r3, #1
 800efc4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800efc6:	8afb      	ldrh	r3, [r7, #22]
 800efc8:	3302      	adds	r3, #2
 800efca:	82fb      	strh	r3, [r7, #22]
 800efcc:	8afa      	ldrh	r2, [r7, #22]
 800efce:	8abb      	ldrh	r3, [r7, #20]
 800efd0:	429a      	cmp	r2, r3
 800efd2:	d3ef      	bcc.n	800efb4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800efd4:	68bb      	ldr	r3, [r7, #8]
 800efd6:	2200      	movs	r2, #0
 800efd8:	701a      	strb	r2, [r3, #0]
  }
}
 800efda:	bf00      	nop
 800efdc:	371c      	adds	r7, #28
 800efde:	46bd      	mov	sp, r7
 800efe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe4:	4770      	bx	lr

0800efe6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800efe6:	b480      	push	{r7}
 800efe8:	b085      	sub	sp, #20
 800efea:	af00      	add	r7, sp, #0
 800efec:	6078      	str	r0, [r7, #4]
 800efee:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	881a      	ldrh	r2, [r3, #0]
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	781b      	ldrb	r3, [r3, #0]
 800eff8:	b29b      	uxth	r3, r3
 800effa:	4413      	add	r3, r2
 800effc:	b29a      	uxth	r2, r3
 800effe:	683b      	ldr	r3, [r7, #0]
 800f000:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	781b      	ldrb	r3, [r3, #0]
 800f006:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	4413      	add	r3, r2
 800f00c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f00e:	68fb      	ldr	r3, [r7, #12]
}
 800f010:	4618      	mov	r0, r3
 800f012:	3714      	adds	r7, #20
 800f014:	46bd      	mov	sp, r7
 800f016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01a:	4770      	bx	lr

0800f01c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b086      	sub	sp, #24
 800f020:	af00      	add	r7, sp, #0
 800f022:	60f8      	str	r0, [r7, #12]
 800f024:	60b9      	str	r1, [r7, #8]
 800f026:	4613      	mov	r3, r2
 800f028:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800f02a:	2301      	movs	r3, #1
 800f02c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	789b      	ldrb	r3, [r3, #2]
 800f032:	2b01      	cmp	r3, #1
 800f034:	d002      	beq.n	800f03c <USBH_CtlReq+0x20>
 800f036:	2b02      	cmp	r3, #2
 800f038:	d01d      	beq.n	800f076 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800f03a:	e043      	b.n	800f0c4 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	68ba      	ldr	r2, [r7, #8]
 800f040:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	88fa      	ldrh	r2, [r7, #6]
 800f046:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	2201      	movs	r2, #1
 800f04c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	2202      	movs	r2, #2
 800f052:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800f054:	2301      	movs	r3, #1
 800f056:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	2203      	movs	r2, #3
 800f05c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f06c:	2200      	movs	r2, #0
 800f06e:	4619      	mov	r1, r3
 800f070:	f000 fd22 	bl	800fab8 <osMessagePut>
      break;
 800f074:	e026      	b.n	800f0c4 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800f076:	68f8      	ldr	r0, [r7, #12]
 800f078:	f000 f82a 	bl	800f0d0 <USBH_HandleControl>
 800f07c:	4603      	mov	r3, r0
 800f07e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f080:	7dfb      	ldrb	r3, [r7, #23]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d002      	beq.n	800f08c <USBH_CtlReq+0x70>
 800f086:	7dfb      	ldrb	r3, [r7, #23]
 800f088:	2b03      	cmp	r3, #3
 800f08a:	d106      	bne.n	800f09a <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	2201      	movs	r2, #1
 800f090:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	2200      	movs	r2, #0
 800f096:	761a      	strb	r2, [r3, #24]
 800f098:	e005      	b.n	800f0a6 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800f09a:	7dfb      	ldrb	r3, [r7, #23]
 800f09c:	2b02      	cmp	r3, #2
 800f09e:	d102      	bne.n	800f0a6 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	2201      	movs	r2, #1
 800f0a4:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	2203      	movs	r2, #3
 800f0aa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	4619      	mov	r1, r3
 800f0be:	f000 fcfb 	bl	800fab8 <osMessagePut>
      break;
 800f0c2:	bf00      	nop
  }
  return status;
 800f0c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	3718      	adds	r7, #24
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	bd80      	pop	{r7, pc}
	...

0800f0d0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b086      	sub	sp, #24
 800f0d4:	af02      	add	r7, sp, #8
 800f0d6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800f0d8:	2301      	movs	r3, #1
 800f0da:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f0dc:	2300      	movs	r3, #0
 800f0de:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	7e1b      	ldrb	r3, [r3, #24]
 800f0e4:	3b01      	subs	r3, #1
 800f0e6:	2b0a      	cmp	r3, #10
 800f0e8:	f200 8229 	bhi.w	800f53e <USBH_HandleControl+0x46e>
 800f0ec:	a201      	add	r2, pc, #4	; (adr r2, 800f0f4 <USBH_HandleControl+0x24>)
 800f0ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0f2:	bf00      	nop
 800f0f4:	0800f121 	.word	0x0800f121
 800f0f8:	0800f13b 	.word	0x0800f13b
 800f0fc:	0800f1dd 	.word	0x0800f1dd
 800f100:	0800f203 	.word	0x0800f203
 800f104:	0800f28f 	.word	0x0800f28f
 800f108:	0800f2b9 	.word	0x0800f2b9
 800f10c:	0800f37b 	.word	0x0800f37b
 800f110:	0800f39d 	.word	0x0800f39d
 800f114:	0800f42f 	.word	0x0800f42f
 800f118:	0800f455 	.word	0x0800f455
 800f11c:	0800f4e7 	.word	0x0800f4e7
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	f103 0110 	add.w	r1, r3, #16
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	795b      	ldrb	r3, [r3, #5]
 800f12a:	461a      	mov	r2, r3
 800f12c:	6878      	ldr	r0, [r7, #4]
 800f12e:	f000 fa17 	bl	800f560 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	2202      	movs	r2, #2
 800f136:	761a      	strb	r2, [r3, #24]
      break;
 800f138:	e20c      	b.n	800f554 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	795b      	ldrb	r3, [r3, #5]
 800f13e:	4619      	mov	r1, r3
 800f140:	6878      	ldr	r0, [r7, #4]
 800f142:	f003 fd79 	bl	8012c38 <USBH_LL_GetURBState>
 800f146:	4603      	mov	r3, r0
 800f148:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800f14a:	7bbb      	ldrb	r3, [r7, #14]
 800f14c:	2b01      	cmp	r3, #1
 800f14e:	d12c      	bne.n	800f1aa <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	7c1b      	ldrb	r3, [r3, #16]
 800f154:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f158:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	8adb      	ldrh	r3, [r3, #22]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d00a      	beq.n	800f178 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800f162:	7b7b      	ldrb	r3, [r7, #13]
 800f164:	2b80      	cmp	r3, #128	; 0x80
 800f166:	d103      	bne.n	800f170 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	2203      	movs	r2, #3
 800f16c:	761a      	strb	r2, [r3, #24]
 800f16e:	e00d      	b.n	800f18c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	2205      	movs	r2, #5
 800f174:	761a      	strb	r2, [r3, #24]
 800f176:	e009      	b.n	800f18c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800f178:	7b7b      	ldrb	r3, [r7, #13]
 800f17a:	2b80      	cmp	r3, #128	; 0x80
 800f17c:	d103      	bne.n	800f186 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	2209      	movs	r2, #9
 800f182:	761a      	strb	r2, [r3, #24]
 800f184:	e002      	b.n	800f18c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	2207      	movs	r2, #7
 800f18a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	2203      	movs	r2, #3
 800f190:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	4619      	mov	r1, r3
 800f1a4:	f000 fc88 	bl	800fab8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f1a8:	e1cb      	b.n	800f542 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800f1aa:	7bbb      	ldrb	r3, [r7, #14]
 800f1ac:	2b04      	cmp	r3, #4
 800f1ae:	d003      	beq.n	800f1b8 <USBH_HandleControl+0xe8>
 800f1b0:	7bbb      	ldrb	r3, [r7, #14]
 800f1b2:	2b02      	cmp	r3, #2
 800f1b4:	f040 81c5 	bne.w	800f542 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	220b      	movs	r2, #11
 800f1bc:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	2203      	movs	r2, #3
 800f1c2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	4619      	mov	r1, r3
 800f1d6:	f000 fc6f 	bl	800fab8 <osMessagePut>
      break;
 800f1da:	e1b2      	b.n	800f542 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f1e2:	b29a      	uxth	r2, r3
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	6899      	ldr	r1, [r3, #8]
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	899a      	ldrh	r2, [r3, #12]
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	791b      	ldrb	r3, [r3, #4]
 800f1f4:	6878      	ldr	r0, [r7, #4]
 800f1f6:	f000 f9f2 	bl	800f5de <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	2204      	movs	r2, #4
 800f1fe:	761a      	strb	r2, [r3, #24]
      break;
 800f200:	e1a8      	b.n	800f554 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	791b      	ldrb	r3, [r3, #4]
 800f206:	4619      	mov	r1, r3
 800f208:	6878      	ldr	r0, [r7, #4]
 800f20a:	f003 fd15 	bl	8012c38 <USBH_LL_GetURBState>
 800f20e:	4603      	mov	r3, r0
 800f210:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800f212:	7bbb      	ldrb	r3, [r7, #14]
 800f214:	2b01      	cmp	r3, #1
 800f216:	d110      	bne.n	800f23a <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	2209      	movs	r2, #9
 800f21c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	2203      	movs	r2, #3
 800f222:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f232:	2200      	movs	r2, #0
 800f234:	4619      	mov	r1, r3
 800f236:	f000 fc3f 	bl	800fab8 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800f23a:	7bbb      	ldrb	r3, [r7, #14]
 800f23c:	2b05      	cmp	r3, #5
 800f23e:	d110      	bne.n	800f262 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800f240:	2303      	movs	r3, #3
 800f242:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	2203      	movs	r2, #3
 800f248:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f258:	2200      	movs	r2, #0
 800f25a:	4619      	mov	r1, r3
 800f25c:	f000 fc2c 	bl	800fab8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f260:	e171      	b.n	800f546 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800f262:	7bbb      	ldrb	r3, [r7, #14]
 800f264:	2b04      	cmp	r3, #4
 800f266:	f040 816e 	bne.w	800f546 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	220b      	movs	r2, #11
 800f26e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	2203      	movs	r2, #3
 800f274:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f284:	2200      	movs	r2, #0
 800f286:	4619      	mov	r1, r3
 800f288:	f000 fc16 	bl	800fab8 <osMessagePut>
      break;
 800f28c:	e15b      	b.n	800f546 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	6899      	ldr	r1, [r3, #8]
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	899a      	ldrh	r2, [r3, #12]
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	795b      	ldrb	r3, [r3, #5]
 800f29a:	2001      	movs	r0, #1
 800f29c:	9000      	str	r0, [sp, #0]
 800f29e:	6878      	ldr	r0, [r7, #4]
 800f2a0:	f000 f978 	bl	800f594 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f2aa:	b29a      	uxth	r2, r3
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	2206      	movs	r2, #6
 800f2b4:	761a      	strb	r2, [r3, #24]
      break;
 800f2b6:	e14d      	b.n	800f554 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	795b      	ldrb	r3, [r3, #5]
 800f2bc:	4619      	mov	r1, r3
 800f2be:	6878      	ldr	r0, [r7, #4]
 800f2c0:	f003 fcba 	bl	8012c38 <USBH_LL_GetURBState>
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f2c8:	7bbb      	ldrb	r3, [r7, #14]
 800f2ca:	2b01      	cmp	r3, #1
 800f2cc:	d111      	bne.n	800f2f2 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	2207      	movs	r2, #7
 800f2d2:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	2203      	movs	r2, #3
 800f2d8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	4619      	mov	r1, r3
 800f2ec:	f000 fbe4 	bl	800fab8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f2f0:	e12b      	b.n	800f54a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800f2f2:	7bbb      	ldrb	r3, [r7, #14]
 800f2f4:	2b05      	cmp	r3, #5
 800f2f6:	d113      	bne.n	800f320 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	220c      	movs	r2, #12
 800f2fc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800f2fe:	2303      	movs	r3, #3
 800f300:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	2203      	movs	r2, #3
 800f306:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f316:	2200      	movs	r2, #0
 800f318:	4619      	mov	r1, r3
 800f31a:	f000 fbcd 	bl	800fab8 <osMessagePut>
      break;
 800f31e:	e114      	b.n	800f54a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f320:	7bbb      	ldrb	r3, [r7, #14]
 800f322:	2b02      	cmp	r3, #2
 800f324:	d111      	bne.n	800f34a <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	2205      	movs	r2, #5
 800f32a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	2203      	movs	r2, #3
 800f330:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f340:	2200      	movs	r2, #0
 800f342:	4619      	mov	r1, r3
 800f344:	f000 fbb8 	bl	800fab8 <osMessagePut>
      break;
 800f348:	e0ff      	b.n	800f54a <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800f34a:	7bbb      	ldrb	r3, [r7, #14]
 800f34c:	2b04      	cmp	r3, #4
 800f34e:	f040 80fc 	bne.w	800f54a <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	220b      	movs	r2, #11
 800f356:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800f358:	2302      	movs	r3, #2
 800f35a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	2203      	movs	r2, #3
 800f360:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f370:	2200      	movs	r2, #0
 800f372:	4619      	mov	r1, r3
 800f374:	f000 fba0 	bl	800fab8 <osMessagePut>
      break;
 800f378:	e0e7      	b.n	800f54a <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	791b      	ldrb	r3, [r3, #4]
 800f37e:	2200      	movs	r2, #0
 800f380:	2100      	movs	r1, #0
 800f382:	6878      	ldr	r0, [r7, #4]
 800f384:	f000 f92b 	bl	800f5de <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f38e:	b29a      	uxth	r2, r3
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	2208      	movs	r2, #8
 800f398:	761a      	strb	r2, [r3, #24]

      break;
 800f39a:	e0db      	b.n	800f554 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	791b      	ldrb	r3, [r3, #4]
 800f3a0:	4619      	mov	r1, r3
 800f3a2:	6878      	ldr	r0, [r7, #4]
 800f3a4:	f003 fc48 	bl	8012c38 <USBH_LL_GetURBState>
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f3ac:	7bbb      	ldrb	r3, [r7, #14]
 800f3ae:	2b01      	cmp	r3, #1
 800f3b0:	d113      	bne.n	800f3da <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	220d      	movs	r2, #13
 800f3b6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	2203      	movs	r2, #3
 800f3c0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	4619      	mov	r1, r3
 800f3d4:	f000 fb70 	bl	800fab8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f3d8:	e0b9      	b.n	800f54e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800f3da:	7bbb      	ldrb	r3, [r7, #14]
 800f3dc:	2b04      	cmp	r3, #4
 800f3de:	d111      	bne.n	800f404 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	220b      	movs	r2, #11
 800f3e4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	2203      	movs	r2, #3
 800f3ea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	4619      	mov	r1, r3
 800f3fe:	f000 fb5b 	bl	800fab8 <osMessagePut>
      break;
 800f402:	e0a4      	b.n	800f54e <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800f404:	7bbb      	ldrb	r3, [r7, #14]
 800f406:	2b05      	cmp	r3, #5
 800f408:	f040 80a1 	bne.w	800f54e <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800f40c:	2303      	movs	r3, #3
 800f40e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	2203      	movs	r2, #3
 800f414:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f424:	2200      	movs	r2, #0
 800f426:	4619      	mov	r1, r3
 800f428:	f000 fb46 	bl	800fab8 <osMessagePut>
      break;
 800f42c:	e08f      	b.n	800f54e <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	795b      	ldrb	r3, [r3, #5]
 800f432:	2201      	movs	r2, #1
 800f434:	9200      	str	r2, [sp, #0]
 800f436:	2200      	movs	r2, #0
 800f438:	2100      	movs	r1, #0
 800f43a:	6878      	ldr	r0, [r7, #4]
 800f43c:	f000 f8aa 	bl	800f594 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f446:	b29a      	uxth	r2, r3
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	220a      	movs	r2, #10
 800f450:	761a      	strb	r2, [r3, #24]
      break;
 800f452:	e07f      	b.n	800f554 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	795b      	ldrb	r3, [r3, #5]
 800f458:	4619      	mov	r1, r3
 800f45a:	6878      	ldr	r0, [r7, #4]
 800f45c:	f003 fbec 	bl	8012c38 <USBH_LL_GetURBState>
 800f460:	4603      	mov	r3, r0
 800f462:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800f464:	7bbb      	ldrb	r3, [r7, #14]
 800f466:	2b01      	cmp	r3, #1
 800f468:	d113      	bne.n	800f492 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800f46a:	2300      	movs	r3, #0
 800f46c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	220d      	movs	r2, #13
 800f472:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	2203      	movs	r2, #3
 800f478:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f488:	2200      	movs	r2, #0
 800f48a:	4619      	mov	r1, r3
 800f48c:	f000 fb14 	bl	800fab8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f490:	e05f      	b.n	800f552 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f492:	7bbb      	ldrb	r3, [r7, #14]
 800f494:	2b02      	cmp	r3, #2
 800f496:	d111      	bne.n	800f4bc <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	2209      	movs	r2, #9
 800f49c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	2203      	movs	r2, #3
 800f4a2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f4b2:	2200      	movs	r2, #0
 800f4b4:	4619      	mov	r1, r3
 800f4b6:	f000 faff 	bl	800fab8 <osMessagePut>
      break;
 800f4ba:	e04a      	b.n	800f552 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800f4bc:	7bbb      	ldrb	r3, [r7, #14]
 800f4be:	2b04      	cmp	r3, #4
 800f4c0:	d147      	bne.n	800f552 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	220b      	movs	r2, #11
 800f4c6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	2203      	movs	r2, #3
 800f4cc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f4dc:	2200      	movs	r2, #0
 800f4de:	4619      	mov	r1, r3
 800f4e0:	f000 faea 	bl	800fab8 <osMessagePut>
      break;
 800f4e4:	e035      	b.n	800f552 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	7e5b      	ldrb	r3, [r3, #25]
 800f4ea:	3301      	adds	r3, #1
 800f4ec:	b2da      	uxtb	r2, r3
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	765a      	strb	r2, [r3, #25]
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	7e5b      	ldrb	r3, [r3, #25]
 800f4f6:	2b02      	cmp	r3, #2
 800f4f8:	d806      	bhi.n	800f508 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	2201      	movs	r2, #1
 800f4fe:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	2201      	movs	r2, #1
 800f504:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800f506:	e025      	b.n	800f554 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f50e:	2106      	movs	r1, #6
 800f510:	6878      	ldr	r0, [r7, #4]
 800f512:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	2200      	movs	r2, #0
 800f518:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	795b      	ldrb	r3, [r3, #5]
 800f51e:	4619      	mov	r1, r3
 800f520:	6878      	ldr	r0, [r7, #4]
 800f522:	f000 f90d 	bl	800f740 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	791b      	ldrb	r3, [r3, #4]
 800f52a:	4619      	mov	r1, r3
 800f52c:	6878      	ldr	r0, [r7, #4]
 800f52e:	f000 f907 	bl	800f740 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	2200      	movs	r2, #0
 800f536:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800f538:	2302      	movs	r3, #2
 800f53a:	73fb      	strb	r3, [r7, #15]
      break;
 800f53c:	e00a      	b.n	800f554 <USBH_HandleControl+0x484>

    default:
      break;
 800f53e:	bf00      	nop
 800f540:	e008      	b.n	800f554 <USBH_HandleControl+0x484>
      break;
 800f542:	bf00      	nop
 800f544:	e006      	b.n	800f554 <USBH_HandleControl+0x484>
      break;
 800f546:	bf00      	nop
 800f548:	e004      	b.n	800f554 <USBH_HandleControl+0x484>
      break;
 800f54a:	bf00      	nop
 800f54c:	e002      	b.n	800f554 <USBH_HandleControl+0x484>
      break;
 800f54e:	bf00      	nop
 800f550:	e000      	b.n	800f554 <USBH_HandleControl+0x484>
      break;
 800f552:	bf00      	nop
  }

  return status;
 800f554:	7bfb      	ldrb	r3, [r7, #15]
}
 800f556:	4618      	mov	r0, r3
 800f558:	3710      	adds	r7, #16
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd80      	pop	{r7, pc}
 800f55e:	bf00      	nop

0800f560 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800f560:	b580      	push	{r7, lr}
 800f562:	b088      	sub	sp, #32
 800f564:	af04      	add	r7, sp, #16
 800f566:	60f8      	str	r0, [r7, #12]
 800f568:	60b9      	str	r1, [r7, #8]
 800f56a:	4613      	mov	r3, r2
 800f56c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f56e:	79f9      	ldrb	r1, [r7, #7]
 800f570:	2300      	movs	r3, #0
 800f572:	9303      	str	r3, [sp, #12]
 800f574:	2308      	movs	r3, #8
 800f576:	9302      	str	r3, [sp, #8]
 800f578:	68bb      	ldr	r3, [r7, #8]
 800f57a:	9301      	str	r3, [sp, #4]
 800f57c:	2300      	movs	r3, #0
 800f57e:	9300      	str	r3, [sp, #0]
 800f580:	2300      	movs	r3, #0
 800f582:	2200      	movs	r2, #0
 800f584:	68f8      	ldr	r0, [r7, #12]
 800f586:	f003 fb26 	bl	8012bd6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800f58a:	2300      	movs	r3, #0
}
 800f58c:	4618      	mov	r0, r3
 800f58e:	3710      	adds	r7, #16
 800f590:	46bd      	mov	sp, r7
 800f592:	bd80      	pop	{r7, pc}

0800f594 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b088      	sub	sp, #32
 800f598:	af04      	add	r7, sp, #16
 800f59a:	60f8      	str	r0, [r7, #12]
 800f59c:	60b9      	str	r1, [r7, #8]
 800f59e:	4611      	mov	r1, r2
 800f5a0:	461a      	mov	r2, r3
 800f5a2:	460b      	mov	r3, r1
 800f5a4:	80fb      	strh	r3, [r7, #6]
 800f5a6:	4613      	mov	r3, r2
 800f5a8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d001      	beq.n	800f5b8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f5b8:	7979      	ldrb	r1, [r7, #5]
 800f5ba:	7e3b      	ldrb	r3, [r7, #24]
 800f5bc:	9303      	str	r3, [sp, #12]
 800f5be:	88fb      	ldrh	r3, [r7, #6]
 800f5c0:	9302      	str	r3, [sp, #8]
 800f5c2:	68bb      	ldr	r3, [r7, #8]
 800f5c4:	9301      	str	r3, [sp, #4]
 800f5c6:	2301      	movs	r3, #1
 800f5c8:	9300      	str	r3, [sp, #0]
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	68f8      	ldr	r0, [r7, #12]
 800f5d0:	f003 fb01 	bl	8012bd6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800f5d4:	2300      	movs	r3, #0
}
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	3710      	adds	r7, #16
 800f5da:	46bd      	mov	sp, r7
 800f5dc:	bd80      	pop	{r7, pc}

0800f5de <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800f5de:	b580      	push	{r7, lr}
 800f5e0:	b088      	sub	sp, #32
 800f5e2:	af04      	add	r7, sp, #16
 800f5e4:	60f8      	str	r0, [r7, #12]
 800f5e6:	60b9      	str	r1, [r7, #8]
 800f5e8:	4611      	mov	r1, r2
 800f5ea:	461a      	mov	r2, r3
 800f5ec:	460b      	mov	r3, r1
 800f5ee:	80fb      	strh	r3, [r7, #6]
 800f5f0:	4613      	mov	r3, r2
 800f5f2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f5f4:	7979      	ldrb	r1, [r7, #5]
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	9303      	str	r3, [sp, #12]
 800f5fa:	88fb      	ldrh	r3, [r7, #6]
 800f5fc:	9302      	str	r3, [sp, #8]
 800f5fe:	68bb      	ldr	r3, [r7, #8]
 800f600:	9301      	str	r3, [sp, #4]
 800f602:	2301      	movs	r3, #1
 800f604:	9300      	str	r3, [sp, #0]
 800f606:	2300      	movs	r3, #0
 800f608:	2201      	movs	r2, #1
 800f60a:	68f8      	ldr	r0, [r7, #12]
 800f60c:	f003 fae3 	bl	8012bd6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800f610:	2300      	movs	r3, #0

}
 800f612:	4618      	mov	r0, r3
 800f614:	3710      	adds	r7, #16
 800f616:	46bd      	mov	sp, r7
 800f618:	bd80      	pop	{r7, pc}

0800f61a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800f61a:	b580      	push	{r7, lr}
 800f61c:	b088      	sub	sp, #32
 800f61e:	af04      	add	r7, sp, #16
 800f620:	60f8      	str	r0, [r7, #12]
 800f622:	60b9      	str	r1, [r7, #8]
 800f624:	4611      	mov	r1, r2
 800f626:	461a      	mov	r2, r3
 800f628:	460b      	mov	r3, r1
 800f62a:	80fb      	strh	r3, [r7, #6]
 800f62c:	4613      	mov	r3, r2
 800f62e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f636:	2b00      	cmp	r3, #0
 800f638:	d001      	beq.n	800f63e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800f63a:	2300      	movs	r3, #0
 800f63c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f63e:	7979      	ldrb	r1, [r7, #5]
 800f640:	7e3b      	ldrb	r3, [r7, #24]
 800f642:	9303      	str	r3, [sp, #12]
 800f644:	88fb      	ldrh	r3, [r7, #6]
 800f646:	9302      	str	r3, [sp, #8]
 800f648:	68bb      	ldr	r3, [r7, #8]
 800f64a:	9301      	str	r3, [sp, #4]
 800f64c:	2301      	movs	r3, #1
 800f64e:	9300      	str	r3, [sp, #0]
 800f650:	2302      	movs	r3, #2
 800f652:	2200      	movs	r2, #0
 800f654:	68f8      	ldr	r0, [r7, #12]
 800f656:	f003 fabe 	bl	8012bd6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800f65a:	2300      	movs	r3, #0
}
 800f65c:	4618      	mov	r0, r3
 800f65e:	3710      	adds	r7, #16
 800f660:	46bd      	mov	sp, r7
 800f662:	bd80      	pop	{r7, pc}

0800f664 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800f664:	b580      	push	{r7, lr}
 800f666:	b088      	sub	sp, #32
 800f668:	af04      	add	r7, sp, #16
 800f66a:	60f8      	str	r0, [r7, #12]
 800f66c:	60b9      	str	r1, [r7, #8]
 800f66e:	4611      	mov	r1, r2
 800f670:	461a      	mov	r2, r3
 800f672:	460b      	mov	r3, r1
 800f674:	80fb      	strh	r3, [r7, #6]
 800f676:	4613      	mov	r3, r2
 800f678:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f67a:	7979      	ldrb	r1, [r7, #5]
 800f67c:	2300      	movs	r3, #0
 800f67e:	9303      	str	r3, [sp, #12]
 800f680:	88fb      	ldrh	r3, [r7, #6]
 800f682:	9302      	str	r3, [sp, #8]
 800f684:	68bb      	ldr	r3, [r7, #8]
 800f686:	9301      	str	r3, [sp, #4]
 800f688:	2301      	movs	r3, #1
 800f68a:	9300      	str	r3, [sp, #0]
 800f68c:	2302      	movs	r3, #2
 800f68e:	2201      	movs	r2, #1
 800f690:	68f8      	ldr	r0, [r7, #12]
 800f692:	f003 faa0 	bl	8012bd6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800f696:	2300      	movs	r3, #0
}
 800f698:	4618      	mov	r0, r3
 800f69a:	3710      	adds	r7, #16
 800f69c:	46bd      	mov	sp, r7
 800f69e:	bd80      	pop	{r7, pc}

0800f6a0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b086      	sub	sp, #24
 800f6a4:	af04      	add	r7, sp, #16
 800f6a6:	6078      	str	r0, [r7, #4]
 800f6a8:	4608      	mov	r0, r1
 800f6aa:	4611      	mov	r1, r2
 800f6ac:	461a      	mov	r2, r3
 800f6ae:	4603      	mov	r3, r0
 800f6b0:	70fb      	strb	r3, [r7, #3]
 800f6b2:	460b      	mov	r3, r1
 800f6b4:	70bb      	strb	r3, [r7, #2]
 800f6b6:	4613      	mov	r3, r2
 800f6b8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800f6ba:	7878      	ldrb	r0, [r7, #1]
 800f6bc:	78ba      	ldrb	r2, [r7, #2]
 800f6be:	78f9      	ldrb	r1, [r7, #3]
 800f6c0:	8b3b      	ldrh	r3, [r7, #24]
 800f6c2:	9302      	str	r3, [sp, #8]
 800f6c4:	7d3b      	ldrb	r3, [r7, #20]
 800f6c6:	9301      	str	r3, [sp, #4]
 800f6c8:	7c3b      	ldrb	r3, [r7, #16]
 800f6ca:	9300      	str	r3, [sp, #0]
 800f6cc:	4603      	mov	r3, r0
 800f6ce:	6878      	ldr	r0, [r7, #4]
 800f6d0:	f003 fa33 	bl	8012b3a <USBH_LL_OpenPipe>

  return USBH_OK;
 800f6d4:	2300      	movs	r3, #0
}
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	3708      	adds	r7, #8
 800f6da:	46bd      	mov	sp, r7
 800f6dc:	bd80      	pop	{r7, pc}

0800f6de <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800f6de:	b580      	push	{r7, lr}
 800f6e0:	b082      	sub	sp, #8
 800f6e2:	af00      	add	r7, sp, #0
 800f6e4:	6078      	str	r0, [r7, #4]
 800f6e6:	460b      	mov	r3, r1
 800f6e8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800f6ea:	78fb      	ldrb	r3, [r7, #3]
 800f6ec:	4619      	mov	r1, r3
 800f6ee:	6878      	ldr	r0, [r7, #4]
 800f6f0:	f003 fa52 	bl	8012b98 <USBH_LL_ClosePipe>

  return USBH_OK;
 800f6f4:	2300      	movs	r3, #0
}
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	3708      	adds	r7, #8
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	bd80      	pop	{r7, pc}

0800f6fe <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800f6fe:	b580      	push	{r7, lr}
 800f700:	b084      	sub	sp, #16
 800f702:	af00      	add	r7, sp, #0
 800f704:	6078      	str	r0, [r7, #4]
 800f706:	460b      	mov	r3, r1
 800f708:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800f70a:	6878      	ldr	r0, [r7, #4]
 800f70c:	f000 f836 	bl	800f77c <USBH_GetFreePipe>
 800f710:	4603      	mov	r3, r0
 800f712:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800f714:	89fb      	ldrh	r3, [r7, #14]
 800f716:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f71a:	4293      	cmp	r3, r2
 800f71c:	d00a      	beq.n	800f734 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800f71e:	78fa      	ldrb	r2, [r7, #3]
 800f720:	89fb      	ldrh	r3, [r7, #14]
 800f722:	f003 030f 	and.w	r3, r3, #15
 800f726:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f72a:	6879      	ldr	r1, [r7, #4]
 800f72c:	33e0      	adds	r3, #224	; 0xe0
 800f72e:	009b      	lsls	r3, r3, #2
 800f730:	440b      	add	r3, r1
 800f732:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800f734:	89fb      	ldrh	r3, [r7, #14]
 800f736:	b2db      	uxtb	r3, r3
}
 800f738:	4618      	mov	r0, r3
 800f73a:	3710      	adds	r7, #16
 800f73c:	46bd      	mov	sp, r7
 800f73e:	bd80      	pop	{r7, pc}

0800f740 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800f740:	b480      	push	{r7}
 800f742:	b083      	sub	sp, #12
 800f744:	af00      	add	r7, sp, #0
 800f746:	6078      	str	r0, [r7, #4]
 800f748:	460b      	mov	r3, r1
 800f74a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800f74c:	78fb      	ldrb	r3, [r7, #3]
 800f74e:	2b0f      	cmp	r3, #15
 800f750:	d80d      	bhi.n	800f76e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800f752:	78fb      	ldrb	r3, [r7, #3]
 800f754:	687a      	ldr	r2, [r7, #4]
 800f756:	33e0      	adds	r3, #224	; 0xe0
 800f758:	009b      	lsls	r3, r3, #2
 800f75a:	4413      	add	r3, r2
 800f75c:	685a      	ldr	r2, [r3, #4]
 800f75e:	78fb      	ldrb	r3, [r7, #3]
 800f760:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800f764:	6879      	ldr	r1, [r7, #4]
 800f766:	33e0      	adds	r3, #224	; 0xe0
 800f768:	009b      	lsls	r3, r3, #2
 800f76a:	440b      	add	r3, r1
 800f76c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800f76e:	2300      	movs	r3, #0
}
 800f770:	4618      	mov	r0, r3
 800f772:	370c      	adds	r7, #12
 800f774:	46bd      	mov	sp, r7
 800f776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77a:	4770      	bx	lr

0800f77c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800f77c:	b480      	push	{r7}
 800f77e:	b085      	sub	sp, #20
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800f784:	2300      	movs	r3, #0
 800f786:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800f788:	2300      	movs	r3, #0
 800f78a:	73fb      	strb	r3, [r7, #15]
 800f78c:	e00f      	b.n	800f7ae <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800f78e:	7bfb      	ldrb	r3, [r7, #15]
 800f790:	687a      	ldr	r2, [r7, #4]
 800f792:	33e0      	adds	r3, #224	; 0xe0
 800f794:	009b      	lsls	r3, r3, #2
 800f796:	4413      	add	r3, r2
 800f798:	685b      	ldr	r3, [r3, #4]
 800f79a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d102      	bne.n	800f7a8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800f7a2:	7bfb      	ldrb	r3, [r7, #15]
 800f7a4:	b29b      	uxth	r3, r3
 800f7a6:	e007      	b.n	800f7b8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800f7a8:	7bfb      	ldrb	r3, [r7, #15]
 800f7aa:	3301      	adds	r3, #1
 800f7ac:	73fb      	strb	r3, [r7, #15]
 800f7ae:	7bfb      	ldrb	r3, [r7, #15]
 800f7b0:	2b0f      	cmp	r3, #15
 800f7b2:	d9ec      	bls.n	800f78e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800f7b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	3714      	adds	r7, #20
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c2:	4770      	bx	lr

0800f7c4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f7c4:	b480      	push	{r7}
 800f7c6:	b087      	sub	sp, #28
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	60f8      	str	r0, [r7, #12]
 800f7cc:	60b9      	str	r1, [r7, #8]
 800f7ce:	4613      	mov	r3, r2
 800f7d0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f7d2:	2301      	movs	r3, #1
 800f7d4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f7da:	4b1f      	ldr	r3, [pc, #124]	; (800f858 <FATFS_LinkDriverEx+0x94>)
 800f7dc:	7a5b      	ldrb	r3, [r3, #9]
 800f7de:	b2db      	uxtb	r3, r3
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d131      	bne.n	800f848 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f7e4:	4b1c      	ldr	r3, [pc, #112]	; (800f858 <FATFS_LinkDriverEx+0x94>)
 800f7e6:	7a5b      	ldrb	r3, [r3, #9]
 800f7e8:	b2db      	uxtb	r3, r3
 800f7ea:	461a      	mov	r2, r3
 800f7ec:	4b1a      	ldr	r3, [pc, #104]	; (800f858 <FATFS_LinkDriverEx+0x94>)
 800f7ee:	2100      	movs	r1, #0
 800f7f0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f7f2:	4b19      	ldr	r3, [pc, #100]	; (800f858 <FATFS_LinkDriverEx+0x94>)
 800f7f4:	7a5b      	ldrb	r3, [r3, #9]
 800f7f6:	b2db      	uxtb	r3, r3
 800f7f8:	4a17      	ldr	r2, [pc, #92]	; (800f858 <FATFS_LinkDriverEx+0x94>)
 800f7fa:	009b      	lsls	r3, r3, #2
 800f7fc:	4413      	add	r3, r2
 800f7fe:	68fa      	ldr	r2, [r7, #12]
 800f800:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f802:	4b15      	ldr	r3, [pc, #84]	; (800f858 <FATFS_LinkDriverEx+0x94>)
 800f804:	7a5b      	ldrb	r3, [r3, #9]
 800f806:	b2db      	uxtb	r3, r3
 800f808:	461a      	mov	r2, r3
 800f80a:	4b13      	ldr	r3, [pc, #76]	; (800f858 <FATFS_LinkDriverEx+0x94>)
 800f80c:	4413      	add	r3, r2
 800f80e:	79fa      	ldrb	r2, [r7, #7]
 800f810:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f812:	4b11      	ldr	r3, [pc, #68]	; (800f858 <FATFS_LinkDriverEx+0x94>)
 800f814:	7a5b      	ldrb	r3, [r3, #9]
 800f816:	b2db      	uxtb	r3, r3
 800f818:	1c5a      	adds	r2, r3, #1
 800f81a:	b2d1      	uxtb	r1, r2
 800f81c:	4a0e      	ldr	r2, [pc, #56]	; (800f858 <FATFS_LinkDriverEx+0x94>)
 800f81e:	7251      	strb	r1, [r2, #9]
 800f820:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f822:	7dbb      	ldrb	r3, [r7, #22]
 800f824:	3330      	adds	r3, #48	; 0x30
 800f826:	b2da      	uxtb	r2, r3
 800f828:	68bb      	ldr	r3, [r7, #8]
 800f82a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f82c:	68bb      	ldr	r3, [r7, #8]
 800f82e:	3301      	adds	r3, #1
 800f830:	223a      	movs	r2, #58	; 0x3a
 800f832:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f834:	68bb      	ldr	r3, [r7, #8]
 800f836:	3302      	adds	r3, #2
 800f838:	222f      	movs	r2, #47	; 0x2f
 800f83a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f83c:	68bb      	ldr	r3, [r7, #8]
 800f83e:	3303      	adds	r3, #3
 800f840:	2200      	movs	r2, #0
 800f842:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f844:	2300      	movs	r3, #0
 800f846:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f848:	7dfb      	ldrb	r3, [r7, #23]
}
 800f84a:	4618      	mov	r0, r3
 800f84c:	371c      	adds	r7, #28
 800f84e:	46bd      	mov	sp, r7
 800f850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f854:	4770      	bx	lr
 800f856:	bf00      	nop
 800f858:	24000a14 	.word	0x24000a14

0800f85c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b082      	sub	sp, #8
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
 800f864:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f866:	2200      	movs	r2, #0
 800f868:	6839      	ldr	r1, [r7, #0]
 800f86a:	6878      	ldr	r0, [r7, #4]
 800f86c:	f7ff ffaa 	bl	800f7c4 <FATFS_LinkDriverEx>
 800f870:	4603      	mov	r3, r0
}
 800f872:	4618      	mov	r0, r3
 800f874:	3708      	adds	r7, #8
 800f876:	46bd      	mov	sp, r7
 800f878:	bd80      	pop	{r7, pc}

0800f87a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800f87a:	b480      	push	{r7}
 800f87c:	b085      	sub	sp, #20
 800f87e:	af00      	add	r7, sp, #0
 800f880:	4603      	mov	r3, r0
 800f882:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800f884:	2300      	movs	r3, #0
 800f886:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800f888:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f88c:	2b84      	cmp	r3, #132	; 0x84
 800f88e:	d005      	beq.n	800f89c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800f890:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	4413      	add	r3, r2
 800f898:	3303      	adds	r3, #3
 800f89a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800f89c:	68fb      	ldr	r3, [r7, #12]
}
 800f89e:	4618      	mov	r0, r3
 800f8a0:	3714      	adds	r7, #20
 800f8a2:	46bd      	mov	sp, r7
 800f8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a8:	4770      	bx	lr

0800f8aa <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800f8aa:	b480      	push	{r7}
 800f8ac:	b083      	sub	sp, #12
 800f8ae:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f8b0:	f3ef 8305 	mrs	r3, IPSR
 800f8b4:	607b      	str	r3, [r7, #4]
  return(result);
 800f8b6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	bf14      	ite	ne
 800f8bc:	2301      	movne	r3, #1
 800f8be:	2300      	moveq	r3, #0
 800f8c0:	b2db      	uxtb	r3, r3
}
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	370c      	adds	r7, #12
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8cc:	4770      	bx	lr

0800f8ce <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800f8ce:	b580      	push	{r7, lr}
 800f8d0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800f8d2:	f001 f9c3 	bl	8010c5c <vTaskStartScheduler>
  
  return osOK;
 800f8d6:	2300      	movs	r3, #0
}
 800f8d8:	4618      	mov	r0, r3
 800f8da:	bd80      	pop	{r7, pc}

0800f8dc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800f8dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8de:	b089      	sub	sp, #36	; 0x24
 800f8e0:	af04      	add	r7, sp, #16
 800f8e2:	6078      	str	r0, [r7, #4]
 800f8e4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	695b      	ldr	r3, [r3, #20]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d020      	beq.n	800f930 <osThreadCreate+0x54>
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	699b      	ldr	r3, [r3, #24]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d01c      	beq.n	800f930 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	685c      	ldr	r4, [r3, #4]
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	681d      	ldr	r5, [r3, #0]
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	691e      	ldr	r6, [r3, #16]
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f908:	4618      	mov	r0, r3
 800f90a:	f7ff ffb6 	bl	800f87a <makeFreeRtosPriority>
 800f90e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	695b      	ldr	r3, [r3, #20]
 800f914:	687a      	ldr	r2, [r7, #4]
 800f916:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f918:	9202      	str	r2, [sp, #8]
 800f91a:	9301      	str	r3, [sp, #4]
 800f91c:	9100      	str	r1, [sp, #0]
 800f91e:	683b      	ldr	r3, [r7, #0]
 800f920:	4632      	mov	r2, r6
 800f922:	4629      	mov	r1, r5
 800f924:	4620      	mov	r0, r4
 800f926:	f000 ffd1 	bl	80108cc <xTaskCreateStatic>
 800f92a:	4603      	mov	r3, r0
 800f92c:	60fb      	str	r3, [r7, #12]
 800f92e:	e01c      	b.n	800f96a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	685c      	ldr	r4, [r3, #4]
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f93c:	b29e      	uxth	r6, r3
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f944:	4618      	mov	r0, r3
 800f946:	f7ff ff98 	bl	800f87a <makeFreeRtosPriority>
 800f94a:	4602      	mov	r2, r0
 800f94c:	f107 030c 	add.w	r3, r7, #12
 800f950:	9301      	str	r3, [sp, #4]
 800f952:	9200      	str	r2, [sp, #0]
 800f954:	683b      	ldr	r3, [r7, #0]
 800f956:	4632      	mov	r2, r6
 800f958:	4629      	mov	r1, r5
 800f95a:	4620      	mov	r0, r4
 800f95c:	f001 f813 	bl	8010986 <xTaskCreate>
 800f960:	4603      	mov	r3, r0
 800f962:	2b01      	cmp	r3, #1
 800f964:	d001      	beq.n	800f96a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800f966:	2300      	movs	r3, #0
 800f968:	e000      	b.n	800f96c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800f96a:	68fb      	ldr	r3, [r7, #12]
}
 800f96c:	4618      	mov	r0, r3
 800f96e:	3714      	adds	r7, #20
 800f970:	46bd      	mov	sp, r7
 800f972:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f974 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800f974:	b580      	push	{r7, lr}
 800f976:	b084      	sub	sp, #16
 800f978:	af00      	add	r7, sp, #0
 800f97a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d001      	beq.n	800f98a <osDelay+0x16>
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	e000      	b.n	800f98c <osDelay+0x18>
 800f98a:	2301      	movs	r3, #1
 800f98c:	4618      	mov	r0, r3
 800f98e:	f001 f931 	bl	8010bf4 <vTaskDelay>
  
  return osOK;
 800f992:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800f994:	4618      	mov	r0, r3
 800f996:	3710      	adds	r7, #16
 800f998:	46bd      	mov	sp, r7
 800f99a:	bd80      	pop	{r7, pc}

0800f99c <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800f99c:	b580      	push	{r7, lr}
 800f99e:	b086      	sub	sp, #24
 800f9a0:	af02      	add	r7, sp, #8
 800f9a2:	60f8      	str	r0, [r7, #12]
 800f9a4:	460b      	mov	r3, r1
 800f9a6:	607a      	str	r2, [r7, #4]
 800f9a8:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	685b      	ldr	r3, [r3, #4]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d013      	beq.n	800f9da <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 800f9b2:	7afb      	ldrb	r3, [r7, #11]
 800f9b4:	2b01      	cmp	r3, #1
 800f9b6:	d101      	bne.n	800f9bc <osTimerCreate+0x20>
 800f9b8:	2101      	movs	r1, #1
 800f9ba:	e000      	b.n	800f9be <osTimerCreate+0x22>
 800f9bc:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 800f9c2:	68fa      	ldr	r2, [r7, #12]
 800f9c4:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 800f9c6:	9201      	str	r2, [sp, #4]
 800f9c8:	9300      	str	r3, [sp, #0]
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	460a      	mov	r2, r1
 800f9ce:	2101      	movs	r1, #1
 800f9d0:	480b      	ldr	r0, [pc, #44]	; (800fa00 <osTimerCreate+0x64>)
 800f9d2:	f001 fef6 	bl	80117c2 <xTimerCreateStatic>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	e00e      	b.n	800f9f8 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800f9da:	7afb      	ldrb	r3, [r7, #11]
 800f9dc:	2b01      	cmp	r3, #1
 800f9de:	d101      	bne.n	800f9e4 <osTimerCreate+0x48>
 800f9e0:	2201      	movs	r2, #1
 800f9e2:	e000      	b.n	800f9e6 <osTimerCreate+0x4a>
 800f9e4:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800f9ea:	9300      	str	r3, [sp, #0]
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	2101      	movs	r1, #1
 800f9f0:	4803      	ldr	r0, [pc, #12]	; (800fa00 <osTimerCreate+0x64>)
 800f9f2:	f001 fec5 	bl	8011780 <xTimerCreate>
 800f9f6:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	3710      	adds	r7, #16
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	bd80      	pop	{r7, pc}
 800fa00:	08013f84 	.word	0x08013f84

0800fa04 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b086      	sub	sp, #24
 800fa08:	af02      	add	r7, sp, #8
 800fa0a:	6078      	str	r0, [r7, #4]
 800fa0c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	685b      	ldr	r3, [r3, #4]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d00f      	beq.n	800fa36 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800fa16:	683b      	ldr	r3, [r7, #0]
 800fa18:	2b01      	cmp	r3, #1
 800fa1a:	d10a      	bne.n	800fa32 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	685b      	ldr	r3, [r3, #4]
 800fa20:	2203      	movs	r2, #3
 800fa22:	9200      	str	r2, [sp, #0]
 800fa24:	2200      	movs	r2, #0
 800fa26:	2100      	movs	r1, #0
 800fa28:	2001      	movs	r0, #1
 800fa2a:	f000 fa15 	bl	800fe58 <xQueueGenericCreateStatic>
 800fa2e:	4603      	mov	r3, r0
 800fa30:	e016      	b.n	800fa60 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800fa32:	2300      	movs	r3, #0
 800fa34:	e014      	b.n	800fa60 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800fa36:	683b      	ldr	r3, [r7, #0]
 800fa38:	2b01      	cmp	r3, #1
 800fa3a:	d110      	bne.n	800fa5e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800fa3c:	2203      	movs	r2, #3
 800fa3e:	2100      	movs	r1, #0
 800fa40:	2001      	movs	r0, #1
 800fa42:	f000 fa81 	bl	800ff48 <xQueueGenericCreate>
 800fa46:	60f8      	str	r0, [r7, #12]
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d005      	beq.n	800fa5a <osSemaphoreCreate+0x56>
 800fa4e:	2300      	movs	r3, #0
 800fa50:	2200      	movs	r2, #0
 800fa52:	2100      	movs	r1, #0
 800fa54:	68f8      	ldr	r0, [r7, #12]
 800fa56:	f000 fad1 	bl	800fffc <xQueueGenericSend>
      return sema;
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	e000      	b.n	800fa60 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800fa5e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800fa60:	4618      	mov	r0, r3
 800fa62:	3710      	adds	r7, #16
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bd80      	pop	{r7, pc}

0800fa68 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800fa68:	b590      	push	{r4, r7, lr}
 800fa6a:	b085      	sub	sp, #20
 800fa6c:	af02      	add	r7, sp, #8
 800fa6e:	6078      	str	r0, [r7, #4]
 800fa70:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	689b      	ldr	r3, [r3, #8]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d011      	beq.n	800fa9e <osMessageCreate+0x36>
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	68db      	ldr	r3, [r3, #12]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d00d      	beq.n	800fa9e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	6818      	ldr	r0, [r3, #0]
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	6859      	ldr	r1, [r3, #4]
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	689a      	ldr	r2, [r3, #8]
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	68db      	ldr	r3, [r3, #12]
 800fa92:	2400      	movs	r4, #0
 800fa94:	9400      	str	r4, [sp, #0]
 800fa96:	f000 f9df 	bl	800fe58 <xQueueGenericCreateStatic>
 800fa9a:	4603      	mov	r3, r0
 800fa9c:	e008      	b.n	800fab0 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	6818      	ldr	r0, [r3, #0]
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	685b      	ldr	r3, [r3, #4]
 800faa6:	2200      	movs	r2, #0
 800faa8:	4619      	mov	r1, r3
 800faaa:	f000 fa4d 	bl	800ff48 <xQueueGenericCreate>
 800faae:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800fab0:	4618      	mov	r0, r3
 800fab2:	370c      	adds	r7, #12
 800fab4:	46bd      	mov	sp, r7
 800fab6:	bd90      	pop	{r4, r7, pc}

0800fab8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800fab8:	b580      	push	{r7, lr}
 800faba:	b086      	sub	sp, #24
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	60f8      	str	r0, [r7, #12]
 800fac0:	60b9      	str	r1, [r7, #8]
 800fac2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800fac4:	2300      	movs	r3, #0
 800fac6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800facc:	697b      	ldr	r3, [r7, #20]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d101      	bne.n	800fad6 <osMessagePut+0x1e>
    ticks = 1;
 800fad2:	2301      	movs	r3, #1
 800fad4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800fad6:	f7ff fee8 	bl	800f8aa <inHandlerMode>
 800fada:	4603      	mov	r3, r0
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d018      	beq.n	800fb12 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800fae0:	f107 0210 	add.w	r2, r7, #16
 800fae4:	f107 0108 	add.w	r1, r7, #8
 800fae8:	2300      	movs	r3, #0
 800faea:	68f8      	ldr	r0, [r7, #12]
 800faec:	f000 fb84 	bl	80101f8 <xQueueGenericSendFromISR>
 800faf0:	4603      	mov	r3, r0
 800faf2:	2b01      	cmp	r3, #1
 800faf4:	d001      	beq.n	800fafa <osMessagePut+0x42>
      return osErrorOS;
 800faf6:	23ff      	movs	r3, #255	; 0xff
 800faf8:	e018      	b.n	800fb2c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fafa:	693b      	ldr	r3, [r7, #16]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d014      	beq.n	800fb2a <osMessagePut+0x72>
 800fb00:	4b0c      	ldr	r3, [pc, #48]	; (800fb34 <osMessagePut+0x7c>)
 800fb02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb06:	601a      	str	r2, [r3, #0]
 800fb08:	f3bf 8f4f 	dsb	sy
 800fb0c:	f3bf 8f6f 	isb	sy
 800fb10:	e00b      	b.n	800fb2a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800fb12:	f107 0108 	add.w	r1, r7, #8
 800fb16:	2300      	movs	r3, #0
 800fb18:	697a      	ldr	r2, [r7, #20]
 800fb1a:	68f8      	ldr	r0, [r7, #12]
 800fb1c:	f000 fa6e 	bl	800fffc <xQueueGenericSend>
 800fb20:	4603      	mov	r3, r0
 800fb22:	2b01      	cmp	r3, #1
 800fb24:	d001      	beq.n	800fb2a <osMessagePut+0x72>
      return osErrorOS;
 800fb26:	23ff      	movs	r3, #255	; 0xff
 800fb28:	e000      	b.n	800fb2c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800fb2a:	2300      	movs	r3, #0
}
 800fb2c:	4618      	mov	r0, r3
 800fb2e:	3718      	adds	r7, #24
 800fb30:	46bd      	mov	sp, r7
 800fb32:	bd80      	pop	{r7, pc}
 800fb34:	e000ed04 	.word	0xe000ed04

0800fb38 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800fb38:	b590      	push	{r4, r7, lr}
 800fb3a:	b08b      	sub	sp, #44	; 0x2c
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	60f8      	str	r0, [r7, #12]
 800fb40:	60b9      	str	r1, [r7, #8]
 800fb42:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800fb44:	68bb      	ldr	r3, [r7, #8]
 800fb46:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800fb48:	2300      	movs	r3, #0
 800fb4a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800fb4c:	68bb      	ldr	r3, [r7, #8]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d10a      	bne.n	800fb68 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800fb52:	2380      	movs	r3, #128	; 0x80
 800fb54:	617b      	str	r3, [r7, #20]
    return event;
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	461c      	mov	r4, r3
 800fb5a:	f107 0314 	add.w	r3, r7, #20
 800fb5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fb62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800fb66:	e054      	b.n	800fc12 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800fb68:	2300      	movs	r3, #0
 800fb6a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fb76:	d103      	bne.n	800fb80 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800fb78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fb7c:	627b      	str	r3, [r7, #36]	; 0x24
 800fb7e:	e009      	b.n	800fb94 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d006      	beq.n	800fb94 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800fb8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d101      	bne.n	800fb94 <osMessageGet+0x5c>
      ticks = 1;
 800fb90:	2301      	movs	r3, #1
 800fb92:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800fb94:	f7ff fe89 	bl	800f8aa <inHandlerMode>
 800fb98:	4603      	mov	r3, r0
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d01c      	beq.n	800fbd8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800fb9e:	f107 0220 	add.w	r2, r7, #32
 800fba2:	f107 0314 	add.w	r3, r7, #20
 800fba6:	3304      	adds	r3, #4
 800fba8:	4619      	mov	r1, r3
 800fbaa:	68b8      	ldr	r0, [r7, #8]
 800fbac:	f000 fca0 	bl	80104f0 <xQueueReceiveFromISR>
 800fbb0:	4603      	mov	r3, r0
 800fbb2:	2b01      	cmp	r3, #1
 800fbb4:	d102      	bne.n	800fbbc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800fbb6:	2310      	movs	r3, #16
 800fbb8:	617b      	str	r3, [r7, #20]
 800fbba:	e001      	b.n	800fbc0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800fbbc:	2300      	movs	r3, #0
 800fbbe:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fbc0:	6a3b      	ldr	r3, [r7, #32]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d01d      	beq.n	800fc02 <osMessageGet+0xca>
 800fbc6:	4b15      	ldr	r3, [pc, #84]	; (800fc1c <osMessageGet+0xe4>)
 800fbc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbcc:	601a      	str	r2, [r3, #0]
 800fbce:	f3bf 8f4f 	dsb	sy
 800fbd2:	f3bf 8f6f 	isb	sy
 800fbd6:	e014      	b.n	800fc02 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800fbd8:	f107 0314 	add.w	r3, r7, #20
 800fbdc:	3304      	adds	r3, #4
 800fbde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fbe0:	4619      	mov	r1, r3
 800fbe2:	68b8      	ldr	r0, [r7, #8]
 800fbe4:	f000 fba4 	bl	8010330 <xQueueReceive>
 800fbe8:	4603      	mov	r3, r0
 800fbea:	2b01      	cmp	r3, #1
 800fbec:	d102      	bne.n	800fbf4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800fbee:	2310      	movs	r3, #16
 800fbf0:	617b      	str	r3, [r7, #20]
 800fbf2:	e006      	b.n	800fc02 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800fbf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d101      	bne.n	800fbfe <osMessageGet+0xc6>
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	e000      	b.n	800fc00 <osMessageGet+0xc8>
 800fbfe:	2340      	movs	r3, #64	; 0x40
 800fc00:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	461c      	mov	r4, r3
 800fc06:	f107 0314 	add.w	r3, r7, #20
 800fc0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fc0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800fc12:	68f8      	ldr	r0, [r7, #12]
 800fc14:	372c      	adds	r7, #44	; 0x2c
 800fc16:	46bd      	mov	sp, r7
 800fc18:	bd90      	pop	{r4, r7, pc}
 800fc1a:	bf00      	nop
 800fc1c:	e000ed04 	.word	0xe000ed04

0800fc20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800fc20:	b480      	push	{r7}
 800fc22:	b083      	sub	sp, #12
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	f103 0208 	add.w	r2, r3, #8
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fc38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	f103 0208 	add.w	r2, r3, #8
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	f103 0208 	add.w	r2, r3, #8
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	2200      	movs	r2, #0
 800fc52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800fc54:	bf00      	nop
 800fc56:	370c      	adds	r7, #12
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5e:	4770      	bx	lr

0800fc60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800fc60:	b480      	push	{r7}
 800fc62:	b083      	sub	sp, #12
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800fc6e:	bf00      	nop
 800fc70:	370c      	adds	r7, #12
 800fc72:	46bd      	mov	sp, r7
 800fc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc78:	4770      	bx	lr

0800fc7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fc7a:	b480      	push	{r7}
 800fc7c:	b085      	sub	sp, #20
 800fc7e:	af00      	add	r7, sp, #0
 800fc80:	6078      	str	r0, [r7, #4]
 800fc82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	685b      	ldr	r3, [r3, #4]
 800fc88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800fc8a:	683b      	ldr	r3, [r7, #0]
 800fc8c:	68fa      	ldr	r2, [r7, #12]
 800fc8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	689a      	ldr	r2, [r3, #8]
 800fc94:	683b      	ldr	r3, [r7, #0]
 800fc96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	689b      	ldr	r3, [r3, #8]
 800fc9c:	683a      	ldr	r2, [r7, #0]
 800fc9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	683a      	ldr	r2, [r7, #0]
 800fca4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800fca6:	683b      	ldr	r3, [r7, #0]
 800fca8:	687a      	ldr	r2, [r7, #4]
 800fcaa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	1c5a      	adds	r2, r3, #1
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	601a      	str	r2, [r3, #0]
}
 800fcb6:	bf00      	nop
 800fcb8:	3714      	adds	r7, #20
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc0:	4770      	bx	lr

0800fcc2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fcc2:	b480      	push	{r7}
 800fcc4:	b085      	sub	sp, #20
 800fcc6:	af00      	add	r7, sp, #0
 800fcc8:	6078      	str	r0, [r7, #4]
 800fcca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800fccc:	683b      	ldr	r3, [r7, #0]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800fcd2:	68bb      	ldr	r3, [r7, #8]
 800fcd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fcd8:	d103      	bne.n	800fce2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	691b      	ldr	r3, [r3, #16]
 800fcde:	60fb      	str	r3, [r7, #12]
 800fce0:	e00c      	b.n	800fcfc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	3308      	adds	r3, #8
 800fce6:	60fb      	str	r3, [r7, #12]
 800fce8:	e002      	b.n	800fcf0 <vListInsert+0x2e>
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	685b      	ldr	r3, [r3, #4]
 800fcee:	60fb      	str	r3, [r7, #12]
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	685b      	ldr	r3, [r3, #4]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	68ba      	ldr	r2, [r7, #8]
 800fcf8:	429a      	cmp	r2, r3
 800fcfa:	d2f6      	bcs.n	800fcea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	685a      	ldr	r2, [r3, #4]
 800fd00:	683b      	ldr	r3, [r7, #0]
 800fd02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800fd04:	683b      	ldr	r3, [r7, #0]
 800fd06:	685b      	ldr	r3, [r3, #4]
 800fd08:	683a      	ldr	r2, [r7, #0]
 800fd0a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fd0c:	683b      	ldr	r3, [r7, #0]
 800fd0e:	68fa      	ldr	r2, [r7, #12]
 800fd10:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	683a      	ldr	r2, [r7, #0]
 800fd16:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800fd18:	683b      	ldr	r3, [r7, #0]
 800fd1a:	687a      	ldr	r2, [r7, #4]
 800fd1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	1c5a      	adds	r2, r3, #1
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	601a      	str	r2, [r3, #0]
}
 800fd28:	bf00      	nop
 800fd2a:	3714      	adds	r7, #20
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd32:	4770      	bx	lr

0800fd34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800fd34:	b480      	push	{r7}
 800fd36:	b085      	sub	sp, #20
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	691b      	ldr	r3, [r3, #16]
 800fd40:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	685b      	ldr	r3, [r3, #4]
 800fd46:	687a      	ldr	r2, [r7, #4]
 800fd48:	6892      	ldr	r2, [r2, #8]
 800fd4a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	689b      	ldr	r3, [r3, #8]
 800fd50:	687a      	ldr	r2, [r7, #4]
 800fd52:	6852      	ldr	r2, [r2, #4]
 800fd54:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	685b      	ldr	r3, [r3, #4]
 800fd5a:	687a      	ldr	r2, [r7, #4]
 800fd5c:	429a      	cmp	r2, r3
 800fd5e:	d103      	bne.n	800fd68 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	689a      	ldr	r2, [r3, #8]
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	2200      	movs	r2, #0
 800fd6c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	1e5a      	subs	r2, r3, #1
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	681b      	ldr	r3, [r3, #0]
}
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	3714      	adds	r7, #20
 800fd80:	46bd      	mov	sp, r7
 800fd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd86:	4770      	bx	lr

0800fd88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b084      	sub	sp, #16
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]
 800fd90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d10a      	bne.n	800fdb2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800fd9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fda0:	f383 8811 	msr	BASEPRI, r3
 800fda4:	f3bf 8f6f 	isb	sy
 800fda8:	f3bf 8f4f 	dsb	sy
 800fdac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800fdae:	bf00      	nop
 800fdb0:	e7fe      	b.n	800fdb0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800fdb2:	f002 f9af 	bl	8012114 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	681a      	ldr	r2, [r3, #0]
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fdbe:	68f9      	ldr	r1, [r7, #12]
 800fdc0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fdc2:	fb01 f303 	mul.w	r3, r1, r3
 800fdc6:	441a      	add	r2, r3
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	2200      	movs	r2, #0
 800fdd0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	681a      	ldr	r2, [r3, #0]
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	681a      	ldr	r2, [r3, #0]
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fde2:	3b01      	subs	r3, #1
 800fde4:	68f9      	ldr	r1, [r7, #12]
 800fde6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fde8:	fb01 f303 	mul.w	r3, r1, r3
 800fdec:	441a      	add	r2, r3
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	22ff      	movs	r2, #255	; 0xff
 800fdf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	22ff      	movs	r2, #255	; 0xff
 800fdfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800fe02:	683b      	ldr	r3, [r7, #0]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d114      	bne.n	800fe32 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	691b      	ldr	r3, [r3, #16]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d01a      	beq.n	800fe46 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	3310      	adds	r3, #16
 800fe14:	4618      	mov	r0, r3
 800fe16:	f001 f9a5 	bl	8011164 <xTaskRemoveFromEventList>
 800fe1a:	4603      	mov	r3, r0
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d012      	beq.n	800fe46 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800fe20:	4b0c      	ldr	r3, [pc, #48]	; (800fe54 <xQueueGenericReset+0xcc>)
 800fe22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe26:	601a      	str	r2, [r3, #0]
 800fe28:	f3bf 8f4f 	dsb	sy
 800fe2c:	f3bf 8f6f 	isb	sy
 800fe30:	e009      	b.n	800fe46 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	3310      	adds	r3, #16
 800fe36:	4618      	mov	r0, r3
 800fe38:	f7ff fef2 	bl	800fc20 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	3324      	adds	r3, #36	; 0x24
 800fe40:	4618      	mov	r0, r3
 800fe42:	f7ff feed 	bl	800fc20 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800fe46:	f002 f995 	bl	8012174 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800fe4a:	2301      	movs	r3, #1
}
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	3710      	adds	r7, #16
 800fe50:	46bd      	mov	sp, r7
 800fe52:	bd80      	pop	{r7, pc}
 800fe54:	e000ed04 	.word	0xe000ed04

0800fe58 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b08e      	sub	sp, #56	; 0x38
 800fe5c:	af02      	add	r7, sp, #8
 800fe5e:	60f8      	str	r0, [r7, #12]
 800fe60:	60b9      	str	r1, [r7, #8]
 800fe62:	607a      	str	r2, [r7, #4]
 800fe64:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d10a      	bne.n	800fe82 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800fe6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe70:	f383 8811 	msr	BASEPRI, r3
 800fe74:	f3bf 8f6f 	isb	sy
 800fe78:	f3bf 8f4f 	dsb	sy
 800fe7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fe7e:	bf00      	nop
 800fe80:	e7fe      	b.n	800fe80 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800fe82:	683b      	ldr	r3, [r7, #0]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d10a      	bne.n	800fe9e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800fe88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe8c:	f383 8811 	msr	BASEPRI, r3
 800fe90:	f3bf 8f6f 	isb	sy
 800fe94:	f3bf 8f4f 	dsb	sy
 800fe98:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fe9a:	bf00      	nop
 800fe9c:	e7fe      	b.n	800fe9c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d002      	beq.n	800feaa <xQueueGenericCreateStatic+0x52>
 800fea4:	68bb      	ldr	r3, [r7, #8]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d001      	beq.n	800feae <xQueueGenericCreateStatic+0x56>
 800feaa:	2301      	movs	r3, #1
 800feac:	e000      	b.n	800feb0 <xQueueGenericCreateStatic+0x58>
 800feae:	2300      	movs	r3, #0
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d10a      	bne.n	800feca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800feb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feb8:	f383 8811 	msr	BASEPRI, r3
 800febc:	f3bf 8f6f 	isb	sy
 800fec0:	f3bf 8f4f 	dsb	sy
 800fec4:	623b      	str	r3, [r7, #32]
}
 800fec6:	bf00      	nop
 800fec8:	e7fe      	b.n	800fec8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d102      	bne.n	800fed6 <xQueueGenericCreateStatic+0x7e>
 800fed0:	68bb      	ldr	r3, [r7, #8]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d101      	bne.n	800feda <xQueueGenericCreateStatic+0x82>
 800fed6:	2301      	movs	r3, #1
 800fed8:	e000      	b.n	800fedc <xQueueGenericCreateStatic+0x84>
 800feda:	2300      	movs	r3, #0
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d10a      	bne.n	800fef6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800fee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fee4:	f383 8811 	msr	BASEPRI, r3
 800fee8:	f3bf 8f6f 	isb	sy
 800feec:	f3bf 8f4f 	dsb	sy
 800fef0:	61fb      	str	r3, [r7, #28]
}
 800fef2:	bf00      	nop
 800fef4:	e7fe      	b.n	800fef4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800fef6:	2348      	movs	r3, #72	; 0x48
 800fef8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800fefa:	697b      	ldr	r3, [r7, #20]
 800fefc:	2b48      	cmp	r3, #72	; 0x48
 800fefe:	d00a      	beq.n	800ff16 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ff00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff04:	f383 8811 	msr	BASEPRI, r3
 800ff08:	f3bf 8f6f 	isb	sy
 800ff0c:	f3bf 8f4f 	dsb	sy
 800ff10:	61bb      	str	r3, [r7, #24]
}
 800ff12:	bf00      	nop
 800ff14:	e7fe      	b.n	800ff14 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ff16:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ff18:	683b      	ldr	r3, [r7, #0]
 800ff1a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ff1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d00d      	beq.n	800ff3e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ff22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff24:	2201      	movs	r2, #1
 800ff26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ff2a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ff2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff30:	9300      	str	r3, [sp, #0]
 800ff32:	4613      	mov	r3, r2
 800ff34:	687a      	ldr	r2, [r7, #4]
 800ff36:	68b9      	ldr	r1, [r7, #8]
 800ff38:	68f8      	ldr	r0, [r7, #12]
 800ff3a:	f000 f83f 	bl	800ffbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ff3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ff40:	4618      	mov	r0, r3
 800ff42:	3730      	adds	r7, #48	; 0x30
 800ff44:	46bd      	mov	sp, r7
 800ff46:	bd80      	pop	{r7, pc}

0800ff48 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b08a      	sub	sp, #40	; 0x28
 800ff4c:	af02      	add	r7, sp, #8
 800ff4e:	60f8      	str	r0, [r7, #12]
 800ff50:	60b9      	str	r1, [r7, #8]
 800ff52:	4613      	mov	r3, r2
 800ff54:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d10a      	bne.n	800ff72 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ff5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff60:	f383 8811 	msr	BASEPRI, r3
 800ff64:	f3bf 8f6f 	isb	sy
 800ff68:	f3bf 8f4f 	dsb	sy
 800ff6c:	613b      	str	r3, [r7, #16]
}
 800ff6e:	bf00      	nop
 800ff70:	e7fe      	b.n	800ff70 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	68ba      	ldr	r2, [r7, #8]
 800ff76:	fb02 f303 	mul.w	r3, r2, r3
 800ff7a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ff7c:	69fb      	ldr	r3, [r7, #28]
 800ff7e:	3348      	adds	r3, #72	; 0x48
 800ff80:	4618      	mov	r0, r3
 800ff82:	f002 f9e9 	bl	8012358 <pvPortMalloc>
 800ff86:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ff88:	69bb      	ldr	r3, [r7, #24]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d011      	beq.n	800ffb2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ff8e:	69bb      	ldr	r3, [r7, #24]
 800ff90:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ff92:	697b      	ldr	r3, [r7, #20]
 800ff94:	3348      	adds	r3, #72	; 0x48
 800ff96:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ff98:	69bb      	ldr	r3, [r7, #24]
 800ff9a:	2200      	movs	r2, #0
 800ff9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ffa0:	79fa      	ldrb	r2, [r7, #7]
 800ffa2:	69bb      	ldr	r3, [r7, #24]
 800ffa4:	9300      	str	r3, [sp, #0]
 800ffa6:	4613      	mov	r3, r2
 800ffa8:	697a      	ldr	r2, [r7, #20]
 800ffaa:	68b9      	ldr	r1, [r7, #8]
 800ffac:	68f8      	ldr	r0, [r7, #12]
 800ffae:	f000 f805 	bl	800ffbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ffb2:	69bb      	ldr	r3, [r7, #24]
	}
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	3720      	adds	r7, #32
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	bd80      	pop	{r7, pc}

0800ffbc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	b084      	sub	sp, #16
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	60f8      	str	r0, [r7, #12]
 800ffc4:	60b9      	str	r1, [r7, #8]
 800ffc6:	607a      	str	r2, [r7, #4]
 800ffc8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ffca:	68bb      	ldr	r3, [r7, #8]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d103      	bne.n	800ffd8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ffd0:	69bb      	ldr	r3, [r7, #24]
 800ffd2:	69ba      	ldr	r2, [r7, #24]
 800ffd4:	601a      	str	r2, [r3, #0]
 800ffd6:	e002      	b.n	800ffde <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ffd8:	69bb      	ldr	r3, [r7, #24]
 800ffda:	687a      	ldr	r2, [r7, #4]
 800ffdc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ffde:	69bb      	ldr	r3, [r7, #24]
 800ffe0:	68fa      	ldr	r2, [r7, #12]
 800ffe2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ffe4:	69bb      	ldr	r3, [r7, #24]
 800ffe6:	68ba      	ldr	r2, [r7, #8]
 800ffe8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ffea:	2101      	movs	r1, #1
 800ffec:	69b8      	ldr	r0, [r7, #24]
 800ffee:	f7ff fecb 	bl	800fd88 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800fff2:	bf00      	nop
 800fff4:	3710      	adds	r7, #16
 800fff6:	46bd      	mov	sp, r7
 800fff8:	bd80      	pop	{r7, pc}
	...

0800fffc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800fffc:	b580      	push	{r7, lr}
 800fffe:	b08e      	sub	sp, #56	; 0x38
 8010000:	af00      	add	r7, sp, #0
 8010002:	60f8      	str	r0, [r7, #12]
 8010004:	60b9      	str	r1, [r7, #8]
 8010006:	607a      	str	r2, [r7, #4]
 8010008:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801000a:	2300      	movs	r3, #0
 801000c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010014:	2b00      	cmp	r3, #0
 8010016:	d10a      	bne.n	801002e <xQueueGenericSend+0x32>
	__asm volatile
 8010018:	f04f 0350 	mov.w	r3, #80	; 0x50
 801001c:	f383 8811 	msr	BASEPRI, r3
 8010020:	f3bf 8f6f 	isb	sy
 8010024:	f3bf 8f4f 	dsb	sy
 8010028:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801002a:	bf00      	nop
 801002c:	e7fe      	b.n	801002c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801002e:	68bb      	ldr	r3, [r7, #8]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d103      	bne.n	801003c <xQueueGenericSend+0x40>
 8010034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010038:	2b00      	cmp	r3, #0
 801003a:	d101      	bne.n	8010040 <xQueueGenericSend+0x44>
 801003c:	2301      	movs	r3, #1
 801003e:	e000      	b.n	8010042 <xQueueGenericSend+0x46>
 8010040:	2300      	movs	r3, #0
 8010042:	2b00      	cmp	r3, #0
 8010044:	d10a      	bne.n	801005c <xQueueGenericSend+0x60>
	__asm volatile
 8010046:	f04f 0350 	mov.w	r3, #80	; 0x50
 801004a:	f383 8811 	msr	BASEPRI, r3
 801004e:	f3bf 8f6f 	isb	sy
 8010052:	f3bf 8f4f 	dsb	sy
 8010056:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010058:	bf00      	nop
 801005a:	e7fe      	b.n	801005a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801005c:	683b      	ldr	r3, [r7, #0]
 801005e:	2b02      	cmp	r3, #2
 8010060:	d103      	bne.n	801006a <xQueueGenericSend+0x6e>
 8010062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010066:	2b01      	cmp	r3, #1
 8010068:	d101      	bne.n	801006e <xQueueGenericSend+0x72>
 801006a:	2301      	movs	r3, #1
 801006c:	e000      	b.n	8010070 <xQueueGenericSend+0x74>
 801006e:	2300      	movs	r3, #0
 8010070:	2b00      	cmp	r3, #0
 8010072:	d10a      	bne.n	801008a <xQueueGenericSend+0x8e>
	__asm volatile
 8010074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010078:	f383 8811 	msr	BASEPRI, r3
 801007c:	f3bf 8f6f 	isb	sy
 8010080:	f3bf 8f4f 	dsb	sy
 8010084:	623b      	str	r3, [r7, #32]
}
 8010086:	bf00      	nop
 8010088:	e7fe      	b.n	8010088 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801008a:	f001 fa27 	bl	80114dc <xTaskGetSchedulerState>
 801008e:	4603      	mov	r3, r0
 8010090:	2b00      	cmp	r3, #0
 8010092:	d102      	bne.n	801009a <xQueueGenericSend+0x9e>
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d101      	bne.n	801009e <xQueueGenericSend+0xa2>
 801009a:	2301      	movs	r3, #1
 801009c:	e000      	b.n	80100a0 <xQueueGenericSend+0xa4>
 801009e:	2300      	movs	r3, #0
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d10a      	bne.n	80100ba <xQueueGenericSend+0xbe>
	__asm volatile
 80100a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100a8:	f383 8811 	msr	BASEPRI, r3
 80100ac:	f3bf 8f6f 	isb	sy
 80100b0:	f3bf 8f4f 	dsb	sy
 80100b4:	61fb      	str	r3, [r7, #28]
}
 80100b6:	bf00      	nop
 80100b8:	e7fe      	b.n	80100b8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80100ba:	f002 f82b 	bl	8012114 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80100be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80100c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100c6:	429a      	cmp	r2, r3
 80100c8:	d302      	bcc.n	80100d0 <xQueueGenericSend+0xd4>
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	2b02      	cmp	r3, #2
 80100ce:	d129      	bne.n	8010124 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80100d0:	683a      	ldr	r2, [r7, #0]
 80100d2:	68b9      	ldr	r1, [r7, #8]
 80100d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80100d6:	f000 fa8b 	bl	80105f0 <prvCopyDataToQueue>
 80100da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80100dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d010      	beq.n	8010106 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80100e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100e6:	3324      	adds	r3, #36	; 0x24
 80100e8:	4618      	mov	r0, r3
 80100ea:	f001 f83b 	bl	8011164 <xTaskRemoveFromEventList>
 80100ee:	4603      	mov	r3, r0
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d013      	beq.n	801011c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80100f4:	4b3f      	ldr	r3, [pc, #252]	; (80101f4 <xQueueGenericSend+0x1f8>)
 80100f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100fa:	601a      	str	r2, [r3, #0]
 80100fc:	f3bf 8f4f 	dsb	sy
 8010100:	f3bf 8f6f 	isb	sy
 8010104:	e00a      	b.n	801011c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010108:	2b00      	cmp	r3, #0
 801010a:	d007      	beq.n	801011c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801010c:	4b39      	ldr	r3, [pc, #228]	; (80101f4 <xQueueGenericSend+0x1f8>)
 801010e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010112:	601a      	str	r2, [r3, #0]
 8010114:	f3bf 8f4f 	dsb	sy
 8010118:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801011c:	f002 f82a 	bl	8012174 <vPortExitCritical>
				return pdPASS;
 8010120:	2301      	movs	r3, #1
 8010122:	e063      	b.n	80101ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d103      	bne.n	8010132 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801012a:	f002 f823 	bl	8012174 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801012e:	2300      	movs	r3, #0
 8010130:	e05c      	b.n	80101ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010134:	2b00      	cmp	r3, #0
 8010136:	d106      	bne.n	8010146 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010138:	f107 0314 	add.w	r3, r7, #20
 801013c:	4618      	mov	r0, r3
 801013e:	f001 f873 	bl	8011228 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010142:	2301      	movs	r3, #1
 8010144:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010146:	f002 f815 	bl	8012174 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801014a:	f000 fded 	bl	8010d28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801014e:	f001 ffe1 	bl	8012114 <vPortEnterCritical>
 8010152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010154:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010158:	b25b      	sxtb	r3, r3
 801015a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801015e:	d103      	bne.n	8010168 <xQueueGenericSend+0x16c>
 8010160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010162:	2200      	movs	r2, #0
 8010164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801016a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801016e:	b25b      	sxtb	r3, r3
 8010170:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010174:	d103      	bne.n	801017e <xQueueGenericSend+0x182>
 8010176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010178:	2200      	movs	r2, #0
 801017a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801017e:	f001 fff9 	bl	8012174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010182:	1d3a      	adds	r2, r7, #4
 8010184:	f107 0314 	add.w	r3, r7, #20
 8010188:	4611      	mov	r1, r2
 801018a:	4618      	mov	r0, r3
 801018c:	f001 f862 	bl	8011254 <xTaskCheckForTimeOut>
 8010190:	4603      	mov	r3, r0
 8010192:	2b00      	cmp	r3, #0
 8010194:	d124      	bne.n	80101e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010196:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010198:	f000 fb22 	bl	80107e0 <prvIsQueueFull>
 801019c:	4603      	mov	r3, r0
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d018      	beq.n	80101d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80101a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101a4:	3310      	adds	r3, #16
 80101a6:	687a      	ldr	r2, [r7, #4]
 80101a8:	4611      	mov	r1, r2
 80101aa:	4618      	mov	r0, r3
 80101ac:	f000 ff8a 	bl	80110c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80101b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80101b2:	f000 faad 	bl	8010710 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80101b6:	f000 fdc5 	bl	8010d44 <xTaskResumeAll>
 80101ba:	4603      	mov	r3, r0
 80101bc:	2b00      	cmp	r3, #0
 80101be:	f47f af7c 	bne.w	80100ba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80101c2:	4b0c      	ldr	r3, [pc, #48]	; (80101f4 <xQueueGenericSend+0x1f8>)
 80101c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80101c8:	601a      	str	r2, [r3, #0]
 80101ca:	f3bf 8f4f 	dsb	sy
 80101ce:	f3bf 8f6f 	isb	sy
 80101d2:	e772      	b.n	80100ba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80101d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80101d6:	f000 fa9b 	bl	8010710 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80101da:	f000 fdb3 	bl	8010d44 <xTaskResumeAll>
 80101de:	e76c      	b.n	80100ba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80101e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80101e2:	f000 fa95 	bl	8010710 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80101e6:	f000 fdad 	bl	8010d44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80101ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80101ec:	4618      	mov	r0, r3
 80101ee:	3738      	adds	r7, #56	; 0x38
 80101f0:	46bd      	mov	sp, r7
 80101f2:	bd80      	pop	{r7, pc}
 80101f4:	e000ed04 	.word	0xe000ed04

080101f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b090      	sub	sp, #64	; 0x40
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	60f8      	str	r0, [r7, #12]
 8010200:	60b9      	str	r1, [r7, #8]
 8010202:	607a      	str	r2, [r7, #4]
 8010204:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801020a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801020c:	2b00      	cmp	r3, #0
 801020e:	d10a      	bne.n	8010226 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8010210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010214:	f383 8811 	msr	BASEPRI, r3
 8010218:	f3bf 8f6f 	isb	sy
 801021c:	f3bf 8f4f 	dsb	sy
 8010220:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010222:	bf00      	nop
 8010224:	e7fe      	b.n	8010224 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010226:	68bb      	ldr	r3, [r7, #8]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d103      	bne.n	8010234 <xQueueGenericSendFromISR+0x3c>
 801022c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801022e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010230:	2b00      	cmp	r3, #0
 8010232:	d101      	bne.n	8010238 <xQueueGenericSendFromISR+0x40>
 8010234:	2301      	movs	r3, #1
 8010236:	e000      	b.n	801023a <xQueueGenericSendFromISR+0x42>
 8010238:	2300      	movs	r3, #0
 801023a:	2b00      	cmp	r3, #0
 801023c:	d10a      	bne.n	8010254 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801023e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010242:	f383 8811 	msr	BASEPRI, r3
 8010246:	f3bf 8f6f 	isb	sy
 801024a:	f3bf 8f4f 	dsb	sy
 801024e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010250:	bf00      	nop
 8010252:	e7fe      	b.n	8010252 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010254:	683b      	ldr	r3, [r7, #0]
 8010256:	2b02      	cmp	r3, #2
 8010258:	d103      	bne.n	8010262 <xQueueGenericSendFromISR+0x6a>
 801025a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801025c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801025e:	2b01      	cmp	r3, #1
 8010260:	d101      	bne.n	8010266 <xQueueGenericSendFromISR+0x6e>
 8010262:	2301      	movs	r3, #1
 8010264:	e000      	b.n	8010268 <xQueueGenericSendFromISR+0x70>
 8010266:	2300      	movs	r3, #0
 8010268:	2b00      	cmp	r3, #0
 801026a:	d10a      	bne.n	8010282 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801026c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010270:	f383 8811 	msr	BASEPRI, r3
 8010274:	f3bf 8f6f 	isb	sy
 8010278:	f3bf 8f4f 	dsb	sy
 801027c:	623b      	str	r3, [r7, #32]
}
 801027e:	bf00      	nop
 8010280:	e7fe      	b.n	8010280 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010282:	f002 f829 	bl	80122d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010286:	f3ef 8211 	mrs	r2, BASEPRI
 801028a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801028e:	f383 8811 	msr	BASEPRI, r3
 8010292:	f3bf 8f6f 	isb	sy
 8010296:	f3bf 8f4f 	dsb	sy
 801029a:	61fa      	str	r2, [r7, #28]
 801029c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801029e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80102a0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80102a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80102a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80102aa:	429a      	cmp	r2, r3
 80102ac:	d302      	bcc.n	80102b4 <xQueueGenericSendFromISR+0xbc>
 80102ae:	683b      	ldr	r3, [r7, #0]
 80102b0:	2b02      	cmp	r3, #2
 80102b2:	d12f      	bne.n	8010314 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80102b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80102ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80102be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102c2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80102c4:	683a      	ldr	r2, [r7, #0]
 80102c6:	68b9      	ldr	r1, [r7, #8]
 80102c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80102ca:	f000 f991 	bl	80105f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80102ce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80102d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80102d6:	d112      	bne.n	80102fe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80102d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d016      	beq.n	801030e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80102e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102e2:	3324      	adds	r3, #36	; 0x24
 80102e4:	4618      	mov	r0, r3
 80102e6:	f000 ff3d 	bl	8011164 <xTaskRemoveFromEventList>
 80102ea:	4603      	mov	r3, r0
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d00e      	beq.n	801030e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d00b      	beq.n	801030e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	2201      	movs	r2, #1
 80102fa:	601a      	str	r2, [r3, #0]
 80102fc:	e007      	b.n	801030e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80102fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010302:	3301      	adds	r3, #1
 8010304:	b2db      	uxtb	r3, r3
 8010306:	b25a      	sxtb	r2, r3
 8010308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801030a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801030e:	2301      	movs	r3, #1
 8010310:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8010312:	e001      	b.n	8010318 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010314:	2300      	movs	r3, #0
 8010316:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801031a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801031c:	697b      	ldr	r3, [r7, #20]
 801031e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010322:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010326:	4618      	mov	r0, r3
 8010328:	3740      	adds	r7, #64	; 0x40
 801032a:	46bd      	mov	sp, r7
 801032c:	bd80      	pop	{r7, pc}
	...

08010330 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010330:	b580      	push	{r7, lr}
 8010332:	b08c      	sub	sp, #48	; 0x30
 8010334:	af00      	add	r7, sp, #0
 8010336:	60f8      	str	r0, [r7, #12]
 8010338:	60b9      	str	r1, [r7, #8]
 801033a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801033c:	2300      	movs	r3, #0
 801033e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010346:	2b00      	cmp	r3, #0
 8010348:	d10a      	bne.n	8010360 <xQueueReceive+0x30>
	__asm volatile
 801034a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801034e:	f383 8811 	msr	BASEPRI, r3
 8010352:	f3bf 8f6f 	isb	sy
 8010356:	f3bf 8f4f 	dsb	sy
 801035a:	623b      	str	r3, [r7, #32]
}
 801035c:	bf00      	nop
 801035e:	e7fe      	b.n	801035e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010360:	68bb      	ldr	r3, [r7, #8]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d103      	bne.n	801036e <xQueueReceive+0x3e>
 8010366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801036a:	2b00      	cmp	r3, #0
 801036c:	d101      	bne.n	8010372 <xQueueReceive+0x42>
 801036e:	2301      	movs	r3, #1
 8010370:	e000      	b.n	8010374 <xQueueReceive+0x44>
 8010372:	2300      	movs	r3, #0
 8010374:	2b00      	cmp	r3, #0
 8010376:	d10a      	bne.n	801038e <xQueueReceive+0x5e>
	__asm volatile
 8010378:	f04f 0350 	mov.w	r3, #80	; 0x50
 801037c:	f383 8811 	msr	BASEPRI, r3
 8010380:	f3bf 8f6f 	isb	sy
 8010384:	f3bf 8f4f 	dsb	sy
 8010388:	61fb      	str	r3, [r7, #28]
}
 801038a:	bf00      	nop
 801038c:	e7fe      	b.n	801038c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801038e:	f001 f8a5 	bl	80114dc <xTaskGetSchedulerState>
 8010392:	4603      	mov	r3, r0
 8010394:	2b00      	cmp	r3, #0
 8010396:	d102      	bne.n	801039e <xQueueReceive+0x6e>
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d101      	bne.n	80103a2 <xQueueReceive+0x72>
 801039e:	2301      	movs	r3, #1
 80103a0:	e000      	b.n	80103a4 <xQueueReceive+0x74>
 80103a2:	2300      	movs	r3, #0
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d10a      	bne.n	80103be <xQueueReceive+0x8e>
	__asm volatile
 80103a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103ac:	f383 8811 	msr	BASEPRI, r3
 80103b0:	f3bf 8f6f 	isb	sy
 80103b4:	f3bf 8f4f 	dsb	sy
 80103b8:	61bb      	str	r3, [r7, #24]
}
 80103ba:	bf00      	nop
 80103bc:	e7fe      	b.n	80103bc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80103be:	f001 fea9 	bl	8012114 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80103c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103c6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80103c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d01f      	beq.n	801040e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80103ce:	68b9      	ldr	r1, [r7, #8]
 80103d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80103d2:	f000 f977 	bl	80106c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80103d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103d8:	1e5a      	subs	r2, r3, #1
 80103da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103dc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80103de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103e0:	691b      	ldr	r3, [r3, #16]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d00f      	beq.n	8010406 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80103e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103e8:	3310      	adds	r3, #16
 80103ea:	4618      	mov	r0, r3
 80103ec:	f000 feba 	bl	8011164 <xTaskRemoveFromEventList>
 80103f0:	4603      	mov	r3, r0
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d007      	beq.n	8010406 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80103f6:	4b3d      	ldr	r3, [pc, #244]	; (80104ec <xQueueReceive+0x1bc>)
 80103f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103fc:	601a      	str	r2, [r3, #0]
 80103fe:	f3bf 8f4f 	dsb	sy
 8010402:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010406:	f001 feb5 	bl	8012174 <vPortExitCritical>
				return pdPASS;
 801040a:	2301      	movs	r3, #1
 801040c:	e069      	b.n	80104e2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d103      	bne.n	801041c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010414:	f001 feae 	bl	8012174 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010418:	2300      	movs	r3, #0
 801041a:	e062      	b.n	80104e2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801041c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801041e:	2b00      	cmp	r3, #0
 8010420:	d106      	bne.n	8010430 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010422:	f107 0310 	add.w	r3, r7, #16
 8010426:	4618      	mov	r0, r3
 8010428:	f000 fefe 	bl	8011228 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801042c:	2301      	movs	r3, #1
 801042e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010430:	f001 fea0 	bl	8012174 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010434:	f000 fc78 	bl	8010d28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010438:	f001 fe6c 	bl	8012114 <vPortEnterCritical>
 801043c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801043e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010442:	b25b      	sxtb	r3, r3
 8010444:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010448:	d103      	bne.n	8010452 <xQueueReceive+0x122>
 801044a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801044c:	2200      	movs	r2, #0
 801044e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010454:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010458:	b25b      	sxtb	r3, r3
 801045a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801045e:	d103      	bne.n	8010468 <xQueueReceive+0x138>
 8010460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010462:	2200      	movs	r2, #0
 8010464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010468:	f001 fe84 	bl	8012174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801046c:	1d3a      	adds	r2, r7, #4
 801046e:	f107 0310 	add.w	r3, r7, #16
 8010472:	4611      	mov	r1, r2
 8010474:	4618      	mov	r0, r3
 8010476:	f000 feed 	bl	8011254 <xTaskCheckForTimeOut>
 801047a:	4603      	mov	r3, r0
 801047c:	2b00      	cmp	r3, #0
 801047e:	d123      	bne.n	80104c8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010480:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010482:	f000 f997 	bl	80107b4 <prvIsQueueEmpty>
 8010486:	4603      	mov	r3, r0
 8010488:	2b00      	cmp	r3, #0
 801048a:	d017      	beq.n	80104bc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801048c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801048e:	3324      	adds	r3, #36	; 0x24
 8010490:	687a      	ldr	r2, [r7, #4]
 8010492:	4611      	mov	r1, r2
 8010494:	4618      	mov	r0, r3
 8010496:	f000 fe15 	bl	80110c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801049a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801049c:	f000 f938 	bl	8010710 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80104a0:	f000 fc50 	bl	8010d44 <xTaskResumeAll>
 80104a4:	4603      	mov	r3, r0
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d189      	bne.n	80103be <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80104aa:	4b10      	ldr	r3, [pc, #64]	; (80104ec <xQueueReceive+0x1bc>)
 80104ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104b0:	601a      	str	r2, [r3, #0]
 80104b2:	f3bf 8f4f 	dsb	sy
 80104b6:	f3bf 8f6f 	isb	sy
 80104ba:	e780      	b.n	80103be <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80104bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80104be:	f000 f927 	bl	8010710 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80104c2:	f000 fc3f 	bl	8010d44 <xTaskResumeAll>
 80104c6:	e77a      	b.n	80103be <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80104c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80104ca:	f000 f921 	bl	8010710 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80104ce:	f000 fc39 	bl	8010d44 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80104d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80104d4:	f000 f96e 	bl	80107b4 <prvIsQueueEmpty>
 80104d8:	4603      	mov	r3, r0
 80104da:	2b00      	cmp	r3, #0
 80104dc:	f43f af6f 	beq.w	80103be <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80104e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80104e2:	4618      	mov	r0, r3
 80104e4:	3730      	adds	r7, #48	; 0x30
 80104e6:	46bd      	mov	sp, r7
 80104e8:	bd80      	pop	{r7, pc}
 80104ea:	bf00      	nop
 80104ec:	e000ed04 	.word	0xe000ed04

080104f0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b08e      	sub	sp, #56	; 0x38
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	60f8      	str	r0, [r7, #12]
 80104f8:	60b9      	str	r1, [r7, #8]
 80104fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010502:	2b00      	cmp	r3, #0
 8010504:	d10a      	bne.n	801051c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8010506:	f04f 0350 	mov.w	r3, #80	; 0x50
 801050a:	f383 8811 	msr	BASEPRI, r3
 801050e:	f3bf 8f6f 	isb	sy
 8010512:	f3bf 8f4f 	dsb	sy
 8010516:	623b      	str	r3, [r7, #32]
}
 8010518:	bf00      	nop
 801051a:	e7fe      	b.n	801051a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801051c:	68bb      	ldr	r3, [r7, #8]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d103      	bne.n	801052a <xQueueReceiveFromISR+0x3a>
 8010522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010526:	2b00      	cmp	r3, #0
 8010528:	d101      	bne.n	801052e <xQueueReceiveFromISR+0x3e>
 801052a:	2301      	movs	r3, #1
 801052c:	e000      	b.n	8010530 <xQueueReceiveFromISR+0x40>
 801052e:	2300      	movs	r3, #0
 8010530:	2b00      	cmp	r3, #0
 8010532:	d10a      	bne.n	801054a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8010534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010538:	f383 8811 	msr	BASEPRI, r3
 801053c:	f3bf 8f6f 	isb	sy
 8010540:	f3bf 8f4f 	dsb	sy
 8010544:	61fb      	str	r3, [r7, #28]
}
 8010546:	bf00      	nop
 8010548:	e7fe      	b.n	8010548 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801054a:	f001 fec5 	bl	80122d8 <vPortValidateInterruptPriority>
	__asm volatile
 801054e:	f3ef 8211 	mrs	r2, BASEPRI
 8010552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010556:	f383 8811 	msr	BASEPRI, r3
 801055a:	f3bf 8f6f 	isb	sy
 801055e:	f3bf 8f4f 	dsb	sy
 8010562:	61ba      	str	r2, [r7, #24]
 8010564:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010566:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010568:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801056a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801056c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801056e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010572:	2b00      	cmp	r3, #0
 8010574:	d02f      	beq.n	80105d6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010578:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801057c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010580:	68b9      	ldr	r1, [r7, #8]
 8010582:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010584:	f000 f89e 	bl	80106c4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801058a:	1e5a      	subs	r2, r3, #1
 801058c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801058e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010590:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010594:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010598:	d112      	bne.n	80105c0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801059a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801059c:	691b      	ldr	r3, [r3, #16]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d016      	beq.n	80105d0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80105a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105a4:	3310      	adds	r3, #16
 80105a6:	4618      	mov	r0, r3
 80105a8:	f000 fddc 	bl	8011164 <xTaskRemoveFromEventList>
 80105ac:	4603      	mov	r3, r0
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d00e      	beq.n	80105d0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d00b      	beq.n	80105d0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	2201      	movs	r2, #1
 80105bc:	601a      	str	r2, [r3, #0]
 80105be:	e007      	b.n	80105d0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80105c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80105c4:	3301      	adds	r3, #1
 80105c6:	b2db      	uxtb	r3, r3
 80105c8:	b25a      	sxtb	r2, r3
 80105ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80105d0:	2301      	movs	r3, #1
 80105d2:	637b      	str	r3, [r7, #52]	; 0x34
 80105d4:	e001      	b.n	80105da <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80105d6:	2300      	movs	r3, #0
 80105d8:	637b      	str	r3, [r7, #52]	; 0x34
 80105da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105dc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80105de:	693b      	ldr	r3, [r7, #16]
 80105e0:	f383 8811 	msr	BASEPRI, r3
}
 80105e4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80105e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80105e8:	4618      	mov	r0, r3
 80105ea:	3738      	adds	r7, #56	; 0x38
 80105ec:	46bd      	mov	sp, r7
 80105ee:	bd80      	pop	{r7, pc}

080105f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80105f0:	b580      	push	{r7, lr}
 80105f2:	b086      	sub	sp, #24
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	60f8      	str	r0, [r7, #12]
 80105f8:	60b9      	str	r1, [r7, #8]
 80105fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80105fc:	2300      	movs	r3, #0
 80105fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010604:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801060a:	2b00      	cmp	r3, #0
 801060c:	d10d      	bne.n	801062a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d14d      	bne.n	80106b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	689b      	ldr	r3, [r3, #8]
 801061a:	4618      	mov	r0, r3
 801061c:	f000 ff7c 	bl	8011518 <xTaskPriorityDisinherit>
 8010620:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	2200      	movs	r2, #0
 8010626:	609a      	str	r2, [r3, #8]
 8010628:	e043      	b.n	80106b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d119      	bne.n	8010664 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	6858      	ldr	r0, [r3, #4]
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010638:	461a      	mov	r2, r3
 801063a:	68b9      	ldr	r1, [r7, #8]
 801063c:	f002 fc14 	bl	8012e68 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	685a      	ldr	r2, [r3, #4]
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010648:	441a      	add	r2, r3
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	685a      	ldr	r2, [r3, #4]
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	689b      	ldr	r3, [r3, #8]
 8010656:	429a      	cmp	r2, r3
 8010658:	d32b      	bcc.n	80106b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	681a      	ldr	r2, [r3, #0]
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	605a      	str	r2, [r3, #4]
 8010662:	e026      	b.n	80106b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	68d8      	ldr	r0, [r3, #12]
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801066c:	461a      	mov	r2, r3
 801066e:	68b9      	ldr	r1, [r7, #8]
 8010670:	f002 fbfa 	bl	8012e68 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	68da      	ldr	r2, [r3, #12]
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801067c:	425b      	negs	r3, r3
 801067e:	441a      	add	r2, r3
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	68da      	ldr	r2, [r3, #12]
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	429a      	cmp	r2, r3
 801068e:	d207      	bcs.n	80106a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	689a      	ldr	r2, [r3, #8]
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010698:	425b      	negs	r3, r3
 801069a:	441a      	add	r2, r3
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	2b02      	cmp	r3, #2
 80106a4:	d105      	bne.n	80106b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80106a6:	693b      	ldr	r3, [r7, #16]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d002      	beq.n	80106b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80106ac:	693b      	ldr	r3, [r7, #16]
 80106ae:	3b01      	subs	r3, #1
 80106b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80106b2:	693b      	ldr	r3, [r7, #16]
 80106b4:	1c5a      	adds	r2, r3, #1
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80106ba:	697b      	ldr	r3, [r7, #20]
}
 80106bc:	4618      	mov	r0, r3
 80106be:	3718      	adds	r7, #24
 80106c0:	46bd      	mov	sp, r7
 80106c2:	bd80      	pop	{r7, pc}

080106c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80106c4:	b580      	push	{r7, lr}
 80106c6:	b082      	sub	sp, #8
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	6078      	str	r0, [r7, #4]
 80106cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d018      	beq.n	8010708 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	68da      	ldr	r2, [r3, #12]
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106de:	441a      	add	r2, r3
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	68da      	ldr	r2, [r3, #12]
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	689b      	ldr	r3, [r3, #8]
 80106ec:	429a      	cmp	r2, r3
 80106ee:	d303      	bcc.n	80106f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	681a      	ldr	r2, [r3, #0]
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	68d9      	ldr	r1, [r3, #12]
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010700:	461a      	mov	r2, r3
 8010702:	6838      	ldr	r0, [r7, #0]
 8010704:	f002 fbb0 	bl	8012e68 <memcpy>
	}
}
 8010708:	bf00      	nop
 801070a:	3708      	adds	r7, #8
 801070c:	46bd      	mov	sp, r7
 801070e:	bd80      	pop	{r7, pc}

08010710 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b084      	sub	sp, #16
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010718:	f001 fcfc 	bl	8012114 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010722:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010724:	e011      	b.n	801074a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801072a:	2b00      	cmp	r3, #0
 801072c:	d012      	beq.n	8010754 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	3324      	adds	r3, #36	; 0x24
 8010732:	4618      	mov	r0, r3
 8010734:	f000 fd16 	bl	8011164 <xTaskRemoveFromEventList>
 8010738:	4603      	mov	r3, r0
 801073a:	2b00      	cmp	r3, #0
 801073c:	d001      	beq.n	8010742 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801073e:	f000 fdeb 	bl	8011318 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010742:	7bfb      	ldrb	r3, [r7, #15]
 8010744:	3b01      	subs	r3, #1
 8010746:	b2db      	uxtb	r3, r3
 8010748:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801074a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801074e:	2b00      	cmp	r3, #0
 8010750:	dce9      	bgt.n	8010726 <prvUnlockQueue+0x16>
 8010752:	e000      	b.n	8010756 <prvUnlockQueue+0x46>
					break;
 8010754:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	22ff      	movs	r2, #255	; 0xff
 801075a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801075e:	f001 fd09 	bl	8012174 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010762:	f001 fcd7 	bl	8012114 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801076c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801076e:	e011      	b.n	8010794 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	691b      	ldr	r3, [r3, #16]
 8010774:	2b00      	cmp	r3, #0
 8010776:	d012      	beq.n	801079e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	3310      	adds	r3, #16
 801077c:	4618      	mov	r0, r3
 801077e:	f000 fcf1 	bl	8011164 <xTaskRemoveFromEventList>
 8010782:	4603      	mov	r3, r0
 8010784:	2b00      	cmp	r3, #0
 8010786:	d001      	beq.n	801078c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010788:	f000 fdc6 	bl	8011318 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801078c:	7bbb      	ldrb	r3, [r7, #14]
 801078e:	3b01      	subs	r3, #1
 8010790:	b2db      	uxtb	r3, r3
 8010792:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010794:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010798:	2b00      	cmp	r3, #0
 801079a:	dce9      	bgt.n	8010770 <prvUnlockQueue+0x60>
 801079c:	e000      	b.n	80107a0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801079e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	22ff      	movs	r2, #255	; 0xff
 80107a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80107a8:	f001 fce4 	bl	8012174 <vPortExitCritical>
}
 80107ac:	bf00      	nop
 80107ae:	3710      	adds	r7, #16
 80107b0:	46bd      	mov	sp, r7
 80107b2:	bd80      	pop	{r7, pc}

080107b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b084      	sub	sp, #16
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80107bc:	f001 fcaa 	bl	8012114 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d102      	bne.n	80107ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80107c8:	2301      	movs	r3, #1
 80107ca:	60fb      	str	r3, [r7, #12]
 80107cc:	e001      	b.n	80107d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80107ce:	2300      	movs	r3, #0
 80107d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80107d2:	f001 fccf 	bl	8012174 <vPortExitCritical>

	return xReturn;
 80107d6:	68fb      	ldr	r3, [r7, #12]
}
 80107d8:	4618      	mov	r0, r3
 80107da:	3710      	adds	r7, #16
 80107dc:	46bd      	mov	sp, r7
 80107de:	bd80      	pop	{r7, pc}

080107e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b084      	sub	sp, #16
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80107e8:	f001 fc94 	bl	8012114 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107f4:	429a      	cmp	r2, r3
 80107f6:	d102      	bne.n	80107fe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80107f8:	2301      	movs	r3, #1
 80107fa:	60fb      	str	r3, [r7, #12]
 80107fc:	e001      	b.n	8010802 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80107fe:	2300      	movs	r3, #0
 8010800:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010802:	f001 fcb7 	bl	8012174 <vPortExitCritical>

	return xReturn;
 8010806:	68fb      	ldr	r3, [r7, #12]
}
 8010808:	4618      	mov	r0, r3
 801080a:	3710      	adds	r7, #16
 801080c:	46bd      	mov	sp, r7
 801080e:	bd80      	pop	{r7, pc}

08010810 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010810:	b480      	push	{r7}
 8010812:	b085      	sub	sp, #20
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
 8010818:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801081a:	2300      	movs	r3, #0
 801081c:	60fb      	str	r3, [r7, #12]
 801081e:	e014      	b.n	801084a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010820:	4a0f      	ldr	r2, [pc, #60]	; (8010860 <vQueueAddToRegistry+0x50>)
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010828:	2b00      	cmp	r3, #0
 801082a:	d10b      	bne.n	8010844 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801082c:	490c      	ldr	r1, [pc, #48]	; (8010860 <vQueueAddToRegistry+0x50>)
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	683a      	ldr	r2, [r7, #0]
 8010832:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010836:	4a0a      	ldr	r2, [pc, #40]	; (8010860 <vQueueAddToRegistry+0x50>)
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	00db      	lsls	r3, r3, #3
 801083c:	4413      	add	r3, r2
 801083e:	687a      	ldr	r2, [r7, #4]
 8010840:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010842:	e006      	b.n	8010852 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	3301      	adds	r3, #1
 8010848:	60fb      	str	r3, [r7, #12]
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	2b07      	cmp	r3, #7
 801084e:	d9e7      	bls.n	8010820 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010850:	bf00      	nop
 8010852:	bf00      	nop
 8010854:	3714      	adds	r7, #20
 8010856:	46bd      	mov	sp, r7
 8010858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085c:	4770      	bx	lr
 801085e:	bf00      	nop
 8010860:	24000a20 	.word	0x24000a20

08010864 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010864:	b580      	push	{r7, lr}
 8010866:	b086      	sub	sp, #24
 8010868:	af00      	add	r7, sp, #0
 801086a:	60f8      	str	r0, [r7, #12]
 801086c:	60b9      	str	r1, [r7, #8]
 801086e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010874:	f001 fc4e 	bl	8012114 <vPortEnterCritical>
 8010878:	697b      	ldr	r3, [r7, #20]
 801087a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801087e:	b25b      	sxtb	r3, r3
 8010880:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010884:	d103      	bne.n	801088e <vQueueWaitForMessageRestricted+0x2a>
 8010886:	697b      	ldr	r3, [r7, #20]
 8010888:	2200      	movs	r2, #0
 801088a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801088e:	697b      	ldr	r3, [r7, #20]
 8010890:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010894:	b25b      	sxtb	r3, r3
 8010896:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801089a:	d103      	bne.n	80108a4 <vQueueWaitForMessageRestricted+0x40>
 801089c:	697b      	ldr	r3, [r7, #20]
 801089e:	2200      	movs	r2, #0
 80108a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80108a4:	f001 fc66 	bl	8012174 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80108a8:	697b      	ldr	r3, [r7, #20]
 80108aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d106      	bne.n	80108be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80108b0:	697b      	ldr	r3, [r7, #20]
 80108b2:	3324      	adds	r3, #36	; 0x24
 80108b4:	687a      	ldr	r2, [r7, #4]
 80108b6:	68b9      	ldr	r1, [r7, #8]
 80108b8:	4618      	mov	r0, r3
 80108ba:	f000 fc27 	bl	801110c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80108be:	6978      	ldr	r0, [r7, #20]
 80108c0:	f7ff ff26 	bl	8010710 <prvUnlockQueue>
	}
 80108c4:	bf00      	nop
 80108c6:	3718      	adds	r7, #24
 80108c8:	46bd      	mov	sp, r7
 80108ca:	bd80      	pop	{r7, pc}

080108cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80108cc:	b580      	push	{r7, lr}
 80108ce:	b08e      	sub	sp, #56	; 0x38
 80108d0:	af04      	add	r7, sp, #16
 80108d2:	60f8      	str	r0, [r7, #12]
 80108d4:	60b9      	str	r1, [r7, #8]
 80108d6:	607a      	str	r2, [r7, #4]
 80108d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80108da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d10a      	bne.n	80108f6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80108e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108e4:	f383 8811 	msr	BASEPRI, r3
 80108e8:	f3bf 8f6f 	isb	sy
 80108ec:	f3bf 8f4f 	dsb	sy
 80108f0:	623b      	str	r3, [r7, #32]
}
 80108f2:	bf00      	nop
 80108f4:	e7fe      	b.n	80108f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80108f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d10a      	bne.n	8010912 <xTaskCreateStatic+0x46>
	__asm volatile
 80108fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010900:	f383 8811 	msr	BASEPRI, r3
 8010904:	f3bf 8f6f 	isb	sy
 8010908:	f3bf 8f4f 	dsb	sy
 801090c:	61fb      	str	r3, [r7, #28]
}
 801090e:	bf00      	nop
 8010910:	e7fe      	b.n	8010910 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010912:	2354      	movs	r3, #84	; 0x54
 8010914:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010916:	693b      	ldr	r3, [r7, #16]
 8010918:	2b54      	cmp	r3, #84	; 0x54
 801091a:	d00a      	beq.n	8010932 <xTaskCreateStatic+0x66>
	__asm volatile
 801091c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010920:	f383 8811 	msr	BASEPRI, r3
 8010924:	f3bf 8f6f 	isb	sy
 8010928:	f3bf 8f4f 	dsb	sy
 801092c:	61bb      	str	r3, [r7, #24]
}
 801092e:	bf00      	nop
 8010930:	e7fe      	b.n	8010930 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010932:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010936:	2b00      	cmp	r3, #0
 8010938:	d01e      	beq.n	8010978 <xTaskCreateStatic+0xac>
 801093a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801093c:	2b00      	cmp	r3, #0
 801093e:	d01b      	beq.n	8010978 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010942:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010946:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010948:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801094a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801094c:	2202      	movs	r2, #2
 801094e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010952:	2300      	movs	r3, #0
 8010954:	9303      	str	r3, [sp, #12]
 8010956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010958:	9302      	str	r3, [sp, #8]
 801095a:	f107 0314 	add.w	r3, r7, #20
 801095e:	9301      	str	r3, [sp, #4]
 8010960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010962:	9300      	str	r3, [sp, #0]
 8010964:	683b      	ldr	r3, [r7, #0]
 8010966:	687a      	ldr	r2, [r7, #4]
 8010968:	68b9      	ldr	r1, [r7, #8]
 801096a:	68f8      	ldr	r0, [r7, #12]
 801096c:	f000 f850 	bl	8010a10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010970:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010972:	f000 f8d5 	bl	8010b20 <prvAddNewTaskToReadyList>
 8010976:	e001      	b.n	801097c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8010978:	2300      	movs	r3, #0
 801097a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801097c:	697b      	ldr	r3, [r7, #20]
	}
 801097e:	4618      	mov	r0, r3
 8010980:	3728      	adds	r7, #40	; 0x28
 8010982:	46bd      	mov	sp, r7
 8010984:	bd80      	pop	{r7, pc}

08010986 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010986:	b580      	push	{r7, lr}
 8010988:	b08c      	sub	sp, #48	; 0x30
 801098a:	af04      	add	r7, sp, #16
 801098c:	60f8      	str	r0, [r7, #12]
 801098e:	60b9      	str	r1, [r7, #8]
 8010990:	603b      	str	r3, [r7, #0]
 8010992:	4613      	mov	r3, r2
 8010994:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010996:	88fb      	ldrh	r3, [r7, #6]
 8010998:	009b      	lsls	r3, r3, #2
 801099a:	4618      	mov	r0, r3
 801099c:	f001 fcdc 	bl	8012358 <pvPortMalloc>
 80109a0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80109a2:	697b      	ldr	r3, [r7, #20]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d00e      	beq.n	80109c6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80109a8:	2054      	movs	r0, #84	; 0x54
 80109aa:	f001 fcd5 	bl	8012358 <pvPortMalloc>
 80109ae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80109b0:	69fb      	ldr	r3, [r7, #28]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d003      	beq.n	80109be <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80109b6:	69fb      	ldr	r3, [r7, #28]
 80109b8:	697a      	ldr	r2, [r7, #20]
 80109ba:	631a      	str	r2, [r3, #48]	; 0x30
 80109bc:	e005      	b.n	80109ca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80109be:	6978      	ldr	r0, [r7, #20]
 80109c0:	f001 fd96 	bl	80124f0 <vPortFree>
 80109c4:	e001      	b.n	80109ca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80109c6:	2300      	movs	r3, #0
 80109c8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80109ca:	69fb      	ldr	r3, [r7, #28]
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d017      	beq.n	8010a00 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80109d0:	69fb      	ldr	r3, [r7, #28]
 80109d2:	2200      	movs	r2, #0
 80109d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80109d8:	88fa      	ldrh	r2, [r7, #6]
 80109da:	2300      	movs	r3, #0
 80109dc:	9303      	str	r3, [sp, #12]
 80109de:	69fb      	ldr	r3, [r7, #28]
 80109e0:	9302      	str	r3, [sp, #8]
 80109e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109e4:	9301      	str	r3, [sp, #4]
 80109e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109e8:	9300      	str	r3, [sp, #0]
 80109ea:	683b      	ldr	r3, [r7, #0]
 80109ec:	68b9      	ldr	r1, [r7, #8]
 80109ee:	68f8      	ldr	r0, [r7, #12]
 80109f0:	f000 f80e 	bl	8010a10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80109f4:	69f8      	ldr	r0, [r7, #28]
 80109f6:	f000 f893 	bl	8010b20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80109fa:	2301      	movs	r3, #1
 80109fc:	61bb      	str	r3, [r7, #24]
 80109fe:	e002      	b.n	8010a06 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010a00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010a04:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010a06:	69bb      	ldr	r3, [r7, #24]
	}
 8010a08:	4618      	mov	r0, r3
 8010a0a:	3720      	adds	r7, #32
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	bd80      	pop	{r7, pc}

08010a10 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b088      	sub	sp, #32
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	60f8      	str	r0, [r7, #12]
 8010a18:	60b9      	str	r1, [r7, #8]
 8010a1a:	607a      	str	r2, [r7, #4]
 8010a1c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010a22:	6879      	ldr	r1, [r7, #4]
 8010a24:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8010a28:	440b      	add	r3, r1
 8010a2a:	009b      	lsls	r3, r3, #2
 8010a2c:	4413      	add	r3, r2
 8010a2e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010a30:	69bb      	ldr	r3, [r7, #24]
 8010a32:	f023 0307 	bic.w	r3, r3, #7
 8010a36:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010a38:	69bb      	ldr	r3, [r7, #24]
 8010a3a:	f003 0307 	and.w	r3, r3, #7
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d00a      	beq.n	8010a58 <prvInitialiseNewTask+0x48>
	__asm volatile
 8010a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a46:	f383 8811 	msr	BASEPRI, r3
 8010a4a:	f3bf 8f6f 	isb	sy
 8010a4e:	f3bf 8f4f 	dsb	sy
 8010a52:	617b      	str	r3, [r7, #20]
}
 8010a54:	bf00      	nop
 8010a56:	e7fe      	b.n	8010a56 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010a58:	68bb      	ldr	r3, [r7, #8]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d01f      	beq.n	8010a9e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010a5e:	2300      	movs	r3, #0
 8010a60:	61fb      	str	r3, [r7, #28]
 8010a62:	e012      	b.n	8010a8a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010a64:	68ba      	ldr	r2, [r7, #8]
 8010a66:	69fb      	ldr	r3, [r7, #28]
 8010a68:	4413      	add	r3, r2
 8010a6a:	7819      	ldrb	r1, [r3, #0]
 8010a6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a6e:	69fb      	ldr	r3, [r7, #28]
 8010a70:	4413      	add	r3, r2
 8010a72:	3334      	adds	r3, #52	; 0x34
 8010a74:	460a      	mov	r2, r1
 8010a76:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010a78:	68ba      	ldr	r2, [r7, #8]
 8010a7a:	69fb      	ldr	r3, [r7, #28]
 8010a7c:	4413      	add	r3, r2
 8010a7e:	781b      	ldrb	r3, [r3, #0]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d006      	beq.n	8010a92 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010a84:	69fb      	ldr	r3, [r7, #28]
 8010a86:	3301      	adds	r3, #1
 8010a88:	61fb      	str	r3, [r7, #28]
 8010a8a:	69fb      	ldr	r3, [r7, #28]
 8010a8c:	2b0f      	cmp	r3, #15
 8010a8e:	d9e9      	bls.n	8010a64 <prvInitialiseNewTask+0x54>
 8010a90:	e000      	b.n	8010a94 <prvInitialiseNewTask+0x84>
			{
				break;
 8010a92:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a96:	2200      	movs	r2, #0
 8010a98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010a9c:	e003      	b.n	8010aa6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aa0:	2200      	movs	r2, #0
 8010aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aa8:	2b06      	cmp	r3, #6
 8010aaa:	d901      	bls.n	8010ab0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010aac:	2306      	movs	r3, #6
 8010aae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ab2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010ab4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ab8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010aba:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8010abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010abe:	2200      	movs	r2, #0
 8010ac0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ac4:	3304      	adds	r3, #4
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	f7ff f8ca 	bl	800fc60 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ace:	3318      	adds	r3, #24
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	f7ff f8c5 	bl	800fc60 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ada:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ade:	f1c3 0207 	rsb	r2, r3, #7
 8010ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ae4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010aea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aee:	2200      	movs	r2, #0
 8010af0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010af4:	2200      	movs	r2, #0
 8010af6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010afa:	683a      	ldr	r2, [r7, #0]
 8010afc:	68f9      	ldr	r1, [r7, #12]
 8010afe:	69b8      	ldr	r0, [r7, #24]
 8010b00:	f001 f9de 	bl	8011ec0 <pxPortInitialiseStack>
 8010b04:	4602      	mov	r2, r0
 8010b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b08:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d002      	beq.n	8010b16 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010b16:	bf00      	nop
 8010b18:	3720      	adds	r7, #32
 8010b1a:	46bd      	mov	sp, r7
 8010b1c:	bd80      	pop	{r7, pc}
	...

08010b20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b082      	sub	sp, #8
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010b28:	f001 faf4 	bl	8012114 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010b2c:	4b2a      	ldr	r3, [pc, #168]	; (8010bd8 <prvAddNewTaskToReadyList+0xb8>)
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	3301      	adds	r3, #1
 8010b32:	4a29      	ldr	r2, [pc, #164]	; (8010bd8 <prvAddNewTaskToReadyList+0xb8>)
 8010b34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010b36:	4b29      	ldr	r3, [pc, #164]	; (8010bdc <prvAddNewTaskToReadyList+0xbc>)
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d109      	bne.n	8010b52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010b3e:	4a27      	ldr	r2, [pc, #156]	; (8010bdc <prvAddNewTaskToReadyList+0xbc>)
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010b44:	4b24      	ldr	r3, [pc, #144]	; (8010bd8 <prvAddNewTaskToReadyList+0xb8>)
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	2b01      	cmp	r3, #1
 8010b4a:	d110      	bne.n	8010b6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010b4c:	f000 fc08 	bl	8011360 <prvInitialiseTaskLists>
 8010b50:	e00d      	b.n	8010b6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010b52:	4b23      	ldr	r3, [pc, #140]	; (8010be0 <prvAddNewTaskToReadyList+0xc0>)
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d109      	bne.n	8010b6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010b5a:	4b20      	ldr	r3, [pc, #128]	; (8010bdc <prvAddNewTaskToReadyList+0xbc>)
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b64:	429a      	cmp	r2, r3
 8010b66:	d802      	bhi.n	8010b6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010b68:	4a1c      	ldr	r2, [pc, #112]	; (8010bdc <prvAddNewTaskToReadyList+0xbc>)
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010b6e:	4b1d      	ldr	r3, [pc, #116]	; (8010be4 <prvAddNewTaskToReadyList+0xc4>)
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	3301      	adds	r3, #1
 8010b74:	4a1b      	ldr	r2, [pc, #108]	; (8010be4 <prvAddNewTaskToReadyList+0xc4>)
 8010b76:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b7c:	2201      	movs	r2, #1
 8010b7e:	409a      	lsls	r2, r3
 8010b80:	4b19      	ldr	r3, [pc, #100]	; (8010be8 <prvAddNewTaskToReadyList+0xc8>)
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	4313      	orrs	r3, r2
 8010b86:	4a18      	ldr	r2, [pc, #96]	; (8010be8 <prvAddNewTaskToReadyList+0xc8>)
 8010b88:	6013      	str	r3, [r2, #0]
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b8e:	4613      	mov	r3, r2
 8010b90:	009b      	lsls	r3, r3, #2
 8010b92:	4413      	add	r3, r2
 8010b94:	009b      	lsls	r3, r3, #2
 8010b96:	4a15      	ldr	r2, [pc, #84]	; (8010bec <prvAddNewTaskToReadyList+0xcc>)
 8010b98:	441a      	add	r2, r3
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	3304      	adds	r3, #4
 8010b9e:	4619      	mov	r1, r3
 8010ba0:	4610      	mov	r0, r2
 8010ba2:	f7ff f86a 	bl	800fc7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010ba6:	f001 fae5 	bl	8012174 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010baa:	4b0d      	ldr	r3, [pc, #52]	; (8010be0 <prvAddNewTaskToReadyList+0xc0>)
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d00e      	beq.n	8010bd0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010bb2:	4b0a      	ldr	r3, [pc, #40]	; (8010bdc <prvAddNewTaskToReadyList+0xbc>)
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bbc:	429a      	cmp	r2, r3
 8010bbe:	d207      	bcs.n	8010bd0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010bc0:	4b0b      	ldr	r3, [pc, #44]	; (8010bf0 <prvAddNewTaskToReadyList+0xd0>)
 8010bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010bc6:	601a      	str	r2, [r3, #0]
 8010bc8:	f3bf 8f4f 	dsb	sy
 8010bcc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010bd0:	bf00      	nop
 8010bd2:	3708      	adds	r7, #8
 8010bd4:	46bd      	mov	sp, r7
 8010bd6:	bd80      	pop	{r7, pc}
 8010bd8:	24000b60 	.word	0x24000b60
 8010bdc:	24000a60 	.word	0x24000a60
 8010be0:	24000b6c 	.word	0x24000b6c
 8010be4:	24000b7c 	.word	0x24000b7c
 8010be8:	24000b68 	.word	0x24000b68
 8010bec:	24000a64 	.word	0x24000a64
 8010bf0:	e000ed04 	.word	0xe000ed04

08010bf4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010bf4:	b580      	push	{r7, lr}
 8010bf6:	b084      	sub	sp, #16
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010bfc:	2300      	movs	r3, #0
 8010bfe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d017      	beq.n	8010c36 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010c06:	4b13      	ldr	r3, [pc, #76]	; (8010c54 <vTaskDelay+0x60>)
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d00a      	beq.n	8010c24 <vTaskDelay+0x30>
	__asm volatile
 8010c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c12:	f383 8811 	msr	BASEPRI, r3
 8010c16:	f3bf 8f6f 	isb	sy
 8010c1a:	f3bf 8f4f 	dsb	sy
 8010c1e:	60bb      	str	r3, [r7, #8]
}
 8010c20:	bf00      	nop
 8010c22:	e7fe      	b.n	8010c22 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010c24:	f000 f880 	bl	8010d28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010c28:	2100      	movs	r1, #0
 8010c2a:	6878      	ldr	r0, [r7, #4]
 8010c2c:	f000 fcfa 	bl	8011624 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010c30:	f000 f888 	bl	8010d44 <xTaskResumeAll>
 8010c34:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d107      	bne.n	8010c4c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8010c3c:	4b06      	ldr	r3, [pc, #24]	; (8010c58 <vTaskDelay+0x64>)
 8010c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c42:	601a      	str	r2, [r3, #0]
 8010c44:	f3bf 8f4f 	dsb	sy
 8010c48:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010c4c:	bf00      	nop
 8010c4e:	3710      	adds	r7, #16
 8010c50:	46bd      	mov	sp, r7
 8010c52:	bd80      	pop	{r7, pc}
 8010c54:	24000b88 	.word	0x24000b88
 8010c58:	e000ed04 	.word	0xe000ed04

08010c5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	b08a      	sub	sp, #40	; 0x28
 8010c60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010c62:	2300      	movs	r3, #0
 8010c64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010c66:	2300      	movs	r3, #0
 8010c68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010c6a:	463a      	mov	r2, r7
 8010c6c:	1d39      	adds	r1, r7, #4
 8010c6e:	f107 0308 	add.w	r3, r7, #8
 8010c72:	4618      	mov	r0, r3
 8010c74:	f7ef fd1e 	bl	80006b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010c78:	6839      	ldr	r1, [r7, #0]
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	68ba      	ldr	r2, [r7, #8]
 8010c7e:	9202      	str	r2, [sp, #8]
 8010c80:	9301      	str	r3, [sp, #4]
 8010c82:	2300      	movs	r3, #0
 8010c84:	9300      	str	r3, [sp, #0]
 8010c86:	2300      	movs	r3, #0
 8010c88:	460a      	mov	r2, r1
 8010c8a:	4921      	ldr	r1, [pc, #132]	; (8010d10 <vTaskStartScheduler+0xb4>)
 8010c8c:	4821      	ldr	r0, [pc, #132]	; (8010d14 <vTaskStartScheduler+0xb8>)
 8010c8e:	f7ff fe1d 	bl	80108cc <xTaskCreateStatic>
 8010c92:	4603      	mov	r3, r0
 8010c94:	4a20      	ldr	r2, [pc, #128]	; (8010d18 <vTaskStartScheduler+0xbc>)
 8010c96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010c98:	4b1f      	ldr	r3, [pc, #124]	; (8010d18 <vTaskStartScheduler+0xbc>)
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d002      	beq.n	8010ca6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010ca0:	2301      	movs	r3, #1
 8010ca2:	617b      	str	r3, [r7, #20]
 8010ca4:	e001      	b.n	8010caa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010caa:	697b      	ldr	r3, [r7, #20]
 8010cac:	2b01      	cmp	r3, #1
 8010cae:	d102      	bne.n	8010cb6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8010cb0:	f000 fd1e 	bl	80116f0 <xTimerCreateTimerTask>
 8010cb4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010cb6:	697b      	ldr	r3, [r7, #20]
 8010cb8:	2b01      	cmp	r3, #1
 8010cba:	d116      	bne.n	8010cea <vTaskStartScheduler+0x8e>
	__asm volatile
 8010cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cc0:	f383 8811 	msr	BASEPRI, r3
 8010cc4:	f3bf 8f6f 	isb	sy
 8010cc8:	f3bf 8f4f 	dsb	sy
 8010ccc:	613b      	str	r3, [r7, #16]
}
 8010cce:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010cd0:	4b12      	ldr	r3, [pc, #72]	; (8010d1c <vTaskStartScheduler+0xc0>)
 8010cd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010cd6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010cd8:	4b11      	ldr	r3, [pc, #68]	; (8010d20 <vTaskStartScheduler+0xc4>)
 8010cda:	2201      	movs	r2, #1
 8010cdc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010cde:	4b11      	ldr	r3, [pc, #68]	; (8010d24 <vTaskStartScheduler+0xc8>)
 8010ce0:	2200      	movs	r2, #0
 8010ce2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010ce4:	f001 f974 	bl	8011fd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010ce8:	e00e      	b.n	8010d08 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010cea:	697b      	ldr	r3, [r7, #20]
 8010cec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010cf0:	d10a      	bne.n	8010d08 <vTaskStartScheduler+0xac>
	__asm volatile
 8010cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cf6:	f383 8811 	msr	BASEPRI, r3
 8010cfa:	f3bf 8f6f 	isb	sy
 8010cfe:	f3bf 8f4f 	dsb	sy
 8010d02:	60fb      	str	r3, [r7, #12]
}
 8010d04:	bf00      	nop
 8010d06:	e7fe      	b.n	8010d06 <vTaskStartScheduler+0xaa>
}
 8010d08:	bf00      	nop
 8010d0a:	3718      	adds	r7, #24
 8010d0c:	46bd      	mov	sp, r7
 8010d0e:	bd80      	pop	{r7, pc}
 8010d10:	08013f88 	.word	0x08013f88
 8010d14:	08011331 	.word	0x08011331
 8010d18:	24000b84 	.word	0x24000b84
 8010d1c:	24000b80 	.word	0x24000b80
 8010d20:	24000b6c 	.word	0x24000b6c
 8010d24:	24000b64 	.word	0x24000b64

08010d28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010d28:	b480      	push	{r7}
 8010d2a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010d2c:	4b04      	ldr	r3, [pc, #16]	; (8010d40 <vTaskSuspendAll+0x18>)
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	3301      	adds	r3, #1
 8010d32:	4a03      	ldr	r2, [pc, #12]	; (8010d40 <vTaskSuspendAll+0x18>)
 8010d34:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010d36:	bf00      	nop
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3e:	4770      	bx	lr
 8010d40:	24000b88 	.word	0x24000b88

08010d44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010d44:	b580      	push	{r7, lr}
 8010d46:	b084      	sub	sp, #16
 8010d48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010d4e:	2300      	movs	r3, #0
 8010d50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010d52:	4b41      	ldr	r3, [pc, #260]	; (8010e58 <xTaskResumeAll+0x114>)
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d10a      	bne.n	8010d70 <xTaskResumeAll+0x2c>
	__asm volatile
 8010d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d5e:	f383 8811 	msr	BASEPRI, r3
 8010d62:	f3bf 8f6f 	isb	sy
 8010d66:	f3bf 8f4f 	dsb	sy
 8010d6a:	603b      	str	r3, [r7, #0]
}
 8010d6c:	bf00      	nop
 8010d6e:	e7fe      	b.n	8010d6e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010d70:	f001 f9d0 	bl	8012114 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010d74:	4b38      	ldr	r3, [pc, #224]	; (8010e58 <xTaskResumeAll+0x114>)
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	3b01      	subs	r3, #1
 8010d7a:	4a37      	ldr	r2, [pc, #220]	; (8010e58 <xTaskResumeAll+0x114>)
 8010d7c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010d7e:	4b36      	ldr	r3, [pc, #216]	; (8010e58 <xTaskResumeAll+0x114>)
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d161      	bne.n	8010e4a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010d86:	4b35      	ldr	r3, [pc, #212]	; (8010e5c <xTaskResumeAll+0x118>)
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d05d      	beq.n	8010e4a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010d8e:	e02e      	b.n	8010dee <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010d90:	4b33      	ldr	r3, [pc, #204]	; (8010e60 <xTaskResumeAll+0x11c>)
 8010d92:	68db      	ldr	r3, [r3, #12]
 8010d94:	68db      	ldr	r3, [r3, #12]
 8010d96:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	3318      	adds	r3, #24
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	f7fe ffc9 	bl	800fd34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	3304      	adds	r3, #4
 8010da6:	4618      	mov	r0, r3
 8010da8:	f7fe ffc4 	bl	800fd34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010db0:	2201      	movs	r2, #1
 8010db2:	409a      	lsls	r2, r3
 8010db4:	4b2b      	ldr	r3, [pc, #172]	; (8010e64 <xTaskResumeAll+0x120>)
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	4313      	orrs	r3, r2
 8010dba:	4a2a      	ldr	r2, [pc, #168]	; (8010e64 <xTaskResumeAll+0x120>)
 8010dbc:	6013      	str	r3, [r2, #0]
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010dc2:	4613      	mov	r3, r2
 8010dc4:	009b      	lsls	r3, r3, #2
 8010dc6:	4413      	add	r3, r2
 8010dc8:	009b      	lsls	r3, r3, #2
 8010dca:	4a27      	ldr	r2, [pc, #156]	; (8010e68 <xTaskResumeAll+0x124>)
 8010dcc:	441a      	add	r2, r3
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	3304      	adds	r3, #4
 8010dd2:	4619      	mov	r1, r3
 8010dd4:	4610      	mov	r0, r2
 8010dd6:	f7fe ff50 	bl	800fc7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010dde:	4b23      	ldr	r3, [pc, #140]	; (8010e6c <xTaskResumeAll+0x128>)
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010de4:	429a      	cmp	r2, r3
 8010de6:	d302      	bcc.n	8010dee <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8010de8:	4b21      	ldr	r3, [pc, #132]	; (8010e70 <xTaskResumeAll+0x12c>)
 8010dea:	2201      	movs	r2, #1
 8010dec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010dee:	4b1c      	ldr	r3, [pc, #112]	; (8010e60 <xTaskResumeAll+0x11c>)
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d1cc      	bne.n	8010d90 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d001      	beq.n	8010e00 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010dfc:	f000 fb4e 	bl	801149c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010e00:	4b1c      	ldr	r3, [pc, #112]	; (8010e74 <xTaskResumeAll+0x130>)
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d010      	beq.n	8010e2e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010e0c:	f000 f846 	bl	8010e9c <xTaskIncrementTick>
 8010e10:	4603      	mov	r3, r0
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d002      	beq.n	8010e1c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8010e16:	4b16      	ldr	r3, [pc, #88]	; (8010e70 <xTaskResumeAll+0x12c>)
 8010e18:	2201      	movs	r2, #1
 8010e1a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	3b01      	subs	r3, #1
 8010e20:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d1f1      	bne.n	8010e0c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8010e28:	4b12      	ldr	r3, [pc, #72]	; (8010e74 <xTaskResumeAll+0x130>)
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010e2e:	4b10      	ldr	r3, [pc, #64]	; (8010e70 <xTaskResumeAll+0x12c>)
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d009      	beq.n	8010e4a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010e36:	2301      	movs	r3, #1
 8010e38:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010e3a:	4b0f      	ldr	r3, [pc, #60]	; (8010e78 <xTaskResumeAll+0x134>)
 8010e3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e40:	601a      	str	r2, [r3, #0]
 8010e42:	f3bf 8f4f 	dsb	sy
 8010e46:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010e4a:	f001 f993 	bl	8012174 <vPortExitCritical>

	return xAlreadyYielded;
 8010e4e:	68bb      	ldr	r3, [r7, #8]
}
 8010e50:	4618      	mov	r0, r3
 8010e52:	3710      	adds	r7, #16
 8010e54:	46bd      	mov	sp, r7
 8010e56:	bd80      	pop	{r7, pc}
 8010e58:	24000b88 	.word	0x24000b88
 8010e5c:	24000b60 	.word	0x24000b60
 8010e60:	24000b20 	.word	0x24000b20
 8010e64:	24000b68 	.word	0x24000b68
 8010e68:	24000a64 	.word	0x24000a64
 8010e6c:	24000a60 	.word	0x24000a60
 8010e70:	24000b74 	.word	0x24000b74
 8010e74:	24000b70 	.word	0x24000b70
 8010e78:	e000ed04 	.word	0xe000ed04

08010e7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010e7c:	b480      	push	{r7}
 8010e7e:	b083      	sub	sp, #12
 8010e80:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010e82:	4b05      	ldr	r3, [pc, #20]	; (8010e98 <xTaskGetTickCount+0x1c>)
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010e88:	687b      	ldr	r3, [r7, #4]
}
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	370c      	adds	r7, #12
 8010e8e:	46bd      	mov	sp, r7
 8010e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e94:	4770      	bx	lr
 8010e96:	bf00      	nop
 8010e98:	24000b64 	.word	0x24000b64

08010e9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010e9c:	b580      	push	{r7, lr}
 8010e9e:	b086      	sub	sp, #24
 8010ea0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010ea6:	4b4e      	ldr	r3, [pc, #312]	; (8010fe0 <xTaskIncrementTick+0x144>)
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	f040 808e 	bne.w	8010fcc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010eb0:	4b4c      	ldr	r3, [pc, #304]	; (8010fe4 <xTaskIncrementTick+0x148>)
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	3301      	adds	r3, #1
 8010eb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010eb8:	4a4a      	ldr	r2, [pc, #296]	; (8010fe4 <xTaskIncrementTick+0x148>)
 8010eba:	693b      	ldr	r3, [r7, #16]
 8010ebc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010ebe:	693b      	ldr	r3, [r7, #16]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d120      	bne.n	8010f06 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8010ec4:	4b48      	ldr	r3, [pc, #288]	; (8010fe8 <xTaskIncrementTick+0x14c>)
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d00a      	beq.n	8010ee4 <xTaskIncrementTick+0x48>
	__asm volatile
 8010ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ed2:	f383 8811 	msr	BASEPRI, r3
 8010ed6:	f3bf 8f6f 	isb	sy
 8010eda:	f3bf 8f4f 	dsb	sy
 8010ede:	603b      	str	r3, [r7, #0]
}
 8010ee0:	bf00      	nop
 8010ee2:	e7fe      	b.n	8010ee2 <xTaskIncrementTick+0x46>
 8010ee4:	4b40      	ldr	r3, [pc, #256]	; (8010fe8 <xTaskIncrementTick+0x14c>)
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	60fb      	str	r3, [r7, #12]
 8010eea:	4b40      	ldr	r3, [pc, #256]	; (8010fec <xTaskIncrementTick+0x150>)
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	4a3e      	ldr	r2, [pc, #248]	; (8010fe8 <xTaskIncrementTick+0x14c>)
 8010ef0:	6013      	str	r3, [r2, #0]
 8010ef2:	4a3e      	ldr	r2, [pc, #248]	; (8010fec <xTaskIncrementTick+0x150>)
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	6013      	str	r3, [r2, #0]
 8010ef8:	4b3d      	ldr	r3, [pc, #244]	; (8010ff0 <xTaskIncrementTick+0x154>)
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	3301      	adds	r3, #1
 8010efe:	4a3c      	ldr	r2, [pc, #240]	; (8010ff0 <xTaskIncrementTick+0x154>)
 8010f00:	6013      	str	r3, [r2, #0]
 8010f02:	f000 facb 	bl	801149c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010f06:	4b3b      	ldr	r3, [pc, #236]	; (8010ff4 <xTaskIncrementTick+0x158>)
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	693a      	ldr	r2, [r7, #16]
 8010f0c:	429a      	cmp	r2, r3
 8010f0e:	d348      	bcc.n	8010fa2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010f10:	4b35      	ldr	r3, [pc, #212]	; (8010fe8 <xTaskIncrementTick+0x14c>)
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d104      	bne.n	8010f24 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010f1a:	4b36      	ldr	r3, [pc, #216]	; (8010ff4 <xTaskIncrementTick+0x158>)
 8010f1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010f20:	601a      	str	r2, [r3, #0]
					break;
 8010f22:	e03e      	b.n	8010fa2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f24:	4b30      	ldr	r3, [pc, #192]	; (8010fe8 <xTaskIncrementTick+0x14c>)
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	68db      	ldr	r3, [r3, #12]
 8010f2a:	68db      	ldr	r3, [r3, #12]
 8010f2c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010f2e:	68bb      	ldr	r3, [r7, #8]
 8010f30:	685b      	ldr	r3, [r3, #4]
 8010f32:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010f34:	693a      	ldr	r2, [r7, #16]
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	429a      	cmp	r2, r3
 8010f3a:	d203      	bcs.n	8010f44 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010f3c:	4a2d      	ldr	r2, [pc, #180]	; (8010ff4 <xTaskIncrementTick+0x158>)
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010f42:	e02e      	b.n	8010fa2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010f44:	68bb      	ldr	r3, [r7, #8]
 8010f46:	3304      	adds	r3, #4
 8010f48:	4618      	mov	r0, r3
 8010f4a:	f7fe fef3 	bl	800fd34 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010f4e:	68bb      	ldr	r3, [r7, #8]
 8010f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d004      	beq.n	8010f60 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010f56:	68bb      	ldr	r3, [r7, #8]
 8010f58:	3318      	adds	r3, #24
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	f7fe feea 	bl	800fd34 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010f60:	68bb      	ldr	r3, [r7, #8]
 8010f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f64:	2201      	movs	r2, #1
 8010f66:	409a      	lsls	r2, r3
 8010f68:	4b23      	ldr	r3, [pc, #140]	; (8010ff8 <xTaskIncrementTick+0x15c>)
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	4313      	orrs	r3, r2
 8010f6e:	4a22      	ldr	r2, [pc, #136]	; (8010ff8 <xTaskIncrementTick+0x15c>)
 8010f70:	6013      	str	r3, [r2, #0]
 8010f72:	68bb      	ldr	r3, [r7, #8]
 8010f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f76:	4613      	mov	r3, r2
 8010f78:	009b      	lsls	r3, r3, #2
 8010f7a:	4413      	add	r3, r2
 8010f7c:	009b      	lsls	r3, r3, #2
 8010f7e:	4a1f      	ldr	r2, [pc, #124]	; (8010ffc <xTaskIncrementTick+0x160>)
 8010f80:	441a      	add	r2, r3
 8010f82:	68bb      	ldr	r3, [r7, #8]
 8010f84:	3304      	adds	r3, #4
 8010f86:	4619      	mov	r1, r3
 8010f88:	4610      	mov	r0, r2
 8010f8a:	f7fe fe76 	bl	800fc7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010f8e:	68bb      	ldr	r3, [r7, #8]
 8010f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f92:	4b1b      	ldr	r3, [pc, #108]	; (8011000 <xTaskIncrementTick+0x164>)
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f98:	429a      	cmp	r2, r3
 8010f9a:	d3b9      	bcc.n	8010f10 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8010f9c:	2301      	movs	r3, #1
 8010f9e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010fa0:	e7b6      	b.n	8010f10 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010fa2:	4b17      	ldr	r3, [pc, #92]	; (8011000 <xTaskIncrementTick+0x164>)
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fa8:	4914      	ldr	r1, [pc, #80]	; (8010ffc <xTaskIncrementTick+0x160>)
 8010faa:	4613      	mov	r3, r2
 8010fac:	009b      	lsls	r3, r3, #2
 8010fae:	4413      	add	r3, r2
 8010fb0:	009b      	lsls	r3, r3, #2
 8010fb2:	440b      	add	r3, r1
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	2b01      	cmp	r3, #1
 8010fb8:	d901      	bls.n	8010fbe <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8010fba:	2301      	movs	r3, #1
 8010fbc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010fbe:	4b11      	ldr	r3, [pc, #68]	; (8011004 <xTaskIncrementTick+0x168>)
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d007      	beq.n	8010fd6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8010fc6:	2301      	movs	r3, #1
 8010fc8:	617b      	str	r3, [r7, #20]
 8010fca:	e004      	b.n	8010fd6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010fcc:	4b0e      	ldr	r3, [pc, #56]	; (8011008 <xTaskIncrementTick+0x16c>)
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	3301      	adds	r3, #1
 8010fd2:	4a0d      	ldr	r2, [pc, #52]	; (8011008 <xTaskIncrementTick+0x16c>)
 8010fd4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010fd6:	697b      	ldr	r3, [r7, #20]
}
 8010fd8:	4618      	mov	r0, r3
 8010fda:	3718      	adds	r7, #24
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	bd80      	pop	{r7, pc}
 8010fe0:	24000b88 	.word	0x24000b88
 8010fe4:	24000b64 	.word	0x24000b64
 8010fe8:	24000b18 	.word	0x24000b18
 8010fec:	24000b1c 	.word	0x24000b1c
 8010ff0:	24000b78 	.word	0x24000b78
 8010ff4:	24000b80 	.word	0x24000b80
 8010ff8:	24000b68 	.word	0x24000b68
 8010ffc:	24000a64 	.word	0x24000a64
 8011000:	24000a60 	.word	0x24000a60
 8011004:	24000b74 	.word	0x24000b74
 8011008:	24000b70 	.word	0x24000b70

0801100c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801100c:	b480      	push	{r7}
 801100e:	b087      	sub	sp, #28
 8011010:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011012:	4b27      	ldr	r3, [pc, #156]	; (80110b0 <vTaskSwitchContext+0xa4>)
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d003      	beq.n	8011022 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801101a:	4b26      	ldr	r3, [pc, #152]	; (80110b4 <vTaskSwitchContext+0xa8>)
 801101c:	2201      	movs	r2, #1
 801101e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011020:	e03f      	b.n	80110a2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8011022:	4b24      	ldr	r3, [pc, #144]	; (80110b4 <vTaskSwitchContext+0xa8>)
 8011024:	2200      	movs	r2, #0
 8011026:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011028:	4b23      	ldr	r3, [pc, #140]	; (80110b8 <vTaskSwitchContext+0xac>)
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	fab3 f383 	clz	r3, r3
 8011034:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8011036:	7afb      	ldrb	r3, [r7, #11]
 8011038:	f1c3 031f 	rsb	r3, r3, #31
 801103c:	617b      	str	r3, [r7, #20]
 801103e:	491f      	ldr	r1, [pc, #124]	; (80110bc <vTaskSwitchContext+0xb0>)
 8011040:	697a      	ldr	r2, [r7, #20]
 8011042:	4613      	mov	r3, r2
 8011044:	009b      	lsls	r3, r3, #2
 8011046:	4413      	add	r3, r2
 8011048:	009b      	lsls	r3, r3, #2
 801104a:	440b      	add	r3, r1
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	2b00      	cmp	r3, #0
 8011050:	d10a      	bne.n	8011068 <vTaskSwitchContext+0x5c>
	__asm volatile
 8011052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011056:	f383 8811 	msr	BASEPRI, r3
 801105a:	f3bf 8f6f 	isb	sy
 801105e:	f3bf 8f4f 	dsb	sy
 8011062:	607b      	str	r3, [r7, #4]
}
 8011064:	bf00      	nop
 8011066:	e7fe      	b.n	8011066 <vTaskSwitchContext+0x5a>
 8011068:	697a      	ldr	r2, [r7, #20]
 801106a:	4613      	mov	r3, r2
 801106c:	009b      	lsls	r3, r3, #2
 801106e:	4413      	add	r3, r2
 8011070:	009b      	lsls	r3, r3, #2
 8011072:	4a12      	ldr	r2, [pc, #72]	; (80110bc <vTaskSwitchContext+0xb0>)
 8011074:	4413      	add	r3, r2
 8011076:	613b      	str	r3, [r7, #16]
 8011078:	693b      	ldr	r3, [r7, #16]
 801107a:	685b      	ldr	r3, [r3, #4]
 801107c:	685a      	ldr	r2, [r3, #4]
 801107e:	693b      	ldr	r3, [r7, #16]
 8011080:	605a      	str	r2, [r3, #4]
 8011082:	693b      	ldr	r3, [r7, #16]
 8011084:	685a      	ldr	r2, [r3, #4]
 8011086:	693b      	ldr	r3, [r7, #16]
 8011088:	3308      	adds	r3, #8
 801108a:	429a      	cmp	r2, r3
 801108c:	d104      	bne.n	8011098 <vTaskSwitchContext+0x8c>
 801108e:	693b      	ldr	r3, [r7, #16]
 8011090:	685b      	ldr	r3, [r3, #4]
 8011092:	685a      	ldr	r2, [r3, #4]
 8011094:	693b      	ldr	r3, [r7, #16]
 8011096:	605a      	str	r2, [r3, #4]
 8011098:	693b      	ldr	r3, [r7, #16]
 801109a:	685b      	ldr	r3, [r3, #4]
 801109c:	68db      	ldr	r3, [r3, #12]
 801109e:	4a08      	ldr	r2, [pc, #32]	; (80110c0 <vTaskSwitchContext+0xb4>)
 80110a0:	6013      	str	r3, [r2, #0]
}
 80110a2:	bf00      	nop
 80110a4:	371c      	adds	r7, #28
 80110a6:	46bd      	mov	sp, r7
 80110a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ac:	4770      	bx	lr
 80110ae:	bf00      	nop
 80110b0:	24000b88 	.word	0x24000b88
 80110b4:	24000b74 	.word	0x24000b74
 80110b8:	24000b68 	.word	0x24000b68
 80110bc:	24000a64 	.word	0x24000a64
 80110c0:	24000a60 	.word	0x24000a60

080110c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80110c4:	b580      	push	{r7, lr}
 80110c6:	b084      	sub	sp, #16
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	6078      	str	r0, [r7, #4]
 80110cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d10a      	bne.n	80110ea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80110d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110d8:	f383 8811 	msr	BASEPRI, r3
 80110dc:	f3bf 8f6f 	isb	sy
 80110e0:	f3bf 8f4f 	dsb	sy
 80110e4:	60fb      	str	r3, [r7, #12]
}
 80110e6:	bf00      	nop
 80110e8:	e7fe      	b.n	80110e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80110ea:	4b07      	ldr	r3, [pc, #28]	; (8011108 <vTaskPlaceOnEventList+0x44>)
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	3318      	adds	r3, #24
 80110f0:	4619      	mov	r1, r3
 80110f2:	6878      	ldr	r0, [r7, #4]
 80110f4:	f7fe fde5 	bl	800fcc2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80110f8:	2101      	movs	r1, #1
 80110fa:	6838      	ldr	r0, [r7, #0]
 80110fc:	f000 fa92 	bl	8011624 <prvAddCurrentTaskToDelayedList>
}
 8011100:	bf00      	nop
 8011102:	3710      	adds	r7, #16
 8011104:	46bd      	mov	sp, r7
 8011106:	bd80      	pop	{r7, pc}
 8011108:	24000a60 	.word	0x24000a60

0801110c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801110c:	b580      	push	{r7, lr}
 801110e:	b086      	sub	sp, #24
 8011110:	af00      	add	r7, sp, #0
 8011112:	60f8      	str	r0, [r7, #12]
 8011114:	60b9      	str	r1, [r7, #8]
 8011116:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	2b00      	cmp	r3, #0
 801111c:	d10a      	bne.n	8011134 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801111e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011122:	f383 8811 	msr	BASEPRI, r3
 8011126:	f3bf 8f6f 	isb	sy
 801112a:	f3bf 8f4f 	dsb	sy
 801112e:	617b      	str	r3, [r7, #20]
}
 8011130:	bf00      	nop
 8011132:	e7fe      	b.n	8011132 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011134:	4b0a      	ldr	r3, [pc, #40]	; (8011160 <vTaskPlaceOnEventListRestricted+0x54>)
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	3318      	adds	r3, #24
 801113a:	4619      	mov	r1, r3
 801113c:	68f8      	ldr	r0, [r7, #12]
 801113e:	f7fe fd9c 	bl	800fc7a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	2b00      	cmp	r3, #0
 8011146:	d002      	beq.n	801114e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8011148:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801114c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801114e:	6879      	ldr	r1, [r7, #4]
 8011150:	68b8      	ldr	r0, [r7, #8]
 8011152:	f000 fa67 	bl	8011624 <prvAddCurrentTaskToDelayedList>
	}
 8011156:	bf00      	nop
 8011158:	3718      	adds	r7, #24
 801115a:	46bd      	mov	sp, r7
 801115c:	bd80      	pop	{r7, pc}
 801115e:	bf00      	nop
 8011160:	24000a60 	.word	0x24000a60

08011164 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011164:	b580      	push	{r7, lr}
 8011166:	b086      	sub	sp, #24
 8011168:	af00      	add	r7, sp, #0
 801116a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	68db      	ldr	r3, [r3, #12]
 8011170:	68db      	ldr	r3, [r3, #12]
 8011172:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011174:	693b      	ldr	r3, [r7, #16]
 8011176:	2b00      	cmp	r3, #0
 8011178:	d10a      	bne.n	8011190 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801117a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801117e:	f383 8811 	msr	BASEPRI, r3
 8011182:	f3bf 8f6f 	isb	sy
 8011186:	f3bf 8f4f 	dsb	sy
 801118a:	60fb      	str	r3, [r7, #12]
}
 801118c:	bf00      	nop
 801118e:	e7fe      	b.n	801118e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011190:	693b      	ldr	r3, [r7, #16]
 8011192:	3318      	adds	r3, #24
 8011194:	4618      	mov	r0, r3
 8011196:	f7fe fdcd 	bl	800fd34 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801119a:	4b1d      	ldr	r3, [pc, #116]	; (8011210 <xTaskRemoveFromEventList+0xac>)
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d11c      	bne.n	80111dc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80111a2:	693b      	ldr	r3, [r7, #16]
 80111a4:	3304      	adds	r3, #4
 80111a6:	4618      	mov	r0, r3
 80111a8:	f7fe fdc4 	bl	800fd34 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80111ac:	693b      	ldr	r3, [r7, #16]
 80111ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111b0:	2201      	movs	r2, #1
 80111b2:	409a      	lsls	r2, r3
 80111b4:	4b17      	ldr	r3, [pc, #92]	; (8011214 <xTaskRemoveFromEventList+0xb0>)
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	4313      	orrs	r3, r2
 80111ba:	4a16      	ldr	r2, [pc, #88]	; (8011214 <xTaskRemoveFromEventList+0xb0>)
 80111bc:	6013      	str	r3, [r2, #0]
 80111be:	693b      	ldr	r3, [r7, #16]
 80111c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111c2:	4613      	mov	r3, r2
 80111c4:	009b      	lsls	r3, r3, #2
 80111c6:	4413      	add	r3, r2
 80111c8:	009b      	lsls	r3, r3, #2
 80111ca:	4a13      	ldr	r2, [pc, #76]	; (8011218 <xTaskRemoveFromEventList+0xb4>)
 80111cc:	441a      	add	r2, r3
 80111ce:	693b      	ldr	r3, [r7, #16]
 80111d0:	3304      	adds	r3, #4
 80111d2:	4619      	mov	r1, r3
 80111d4:	4610      	mov	r0, r2
 80111d6:	f7fe fd50 	bl	800fc7a <vListInsertEnd>
 80111da:	e005      	b.n	80111e8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80111dc:	693b      	ldr	r3, [r7, #16]
 80111de:	3318      	adds	r3, #24
 80111e0:	4619      	mov	r1, r3
 80111e2:	480e      	ldr	r0, [pc, #56]	; (801121c <xTaskRemoveFromEventList+0xb8>)
 80111e4:	f7fe fd49 	bl	800fc7a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80111e8:	693b      	ldr	r3, [r7, #16]
 80111ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111ec:	4b0c      	ldr	r3, [pc, #48]	; (8011220 <xTaskRemoveFromEventList+0xbc>)
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111f2:	429a      	cmp	r2, r3
 80111f4:	d905      	bls.n	8011202 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80111f6:	2301      	movs	r3, #1
 80111f8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80111fa:	4b0a      	ldr	r3, [pc, #40]	; (8011224 <xTaskRemoveFromEventList+0xc0>)
 80111fc:	2201      	movs	r2, #1
 80111fe:	601a      	str	r2, [r3, #0]
 8011200:	e001      	b.n	8011206 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8011202:	2300      	movs	r3, #0
 8011204:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011206:	697b      	ldr	r3, [r7, #20]
}
 8011208:	4618      	mov	r0, r3
 801120a:	3718      	adds	r7, #24
 801120c:	46bd      	mov	sp, r7
 801120e:	bd80      	pop	{r7, pc}
 8011210:	24000b88 	.word	0x24000b88
 8011214:	24000b68 	.word	0x24000b68
 8011218:	24000a64 	.word	0x24000a64
 801121c:	24000b20 	.word	0x24000b20
 8011220:	24000a60 	.word	0x24000a60
 8011224:	24000b74 	.word	0x24000b74

08011228 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011228:	b480      	push	{r7}
 801122a:	b083      	sub	sp, #12
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011230:	4b06      	ldr	r3, [pc, #24]	; (801124c <vTaskInternalSetTimeOutState+0x24>)
 8011232:	681a      	ldr	r2, [r3, #0]
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011238:	4b05      	ldr	r3, [pc, #20]	; (8011250 <vTaskInternalSetTimeOutState+0x28>)
 801123a:	681a      	ldr	r2, [r3, #0]
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	605a      	str	r2, [r3, #4]
}
 8011240:	bf00      	nop
 8011242:	370c      	adds	r7, #12
 8011244:	46bd      	mov	sp, r7
 8011246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801124a:	4770      	bx	lr
 801124c:	24000b78 	.word	0x24000b78
 8011250:	24000b64 	.word	0x24000b64

08011254 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011254:	b580      	push	{r7, lr}
 8011256:	b088      	sub	sp, #32
 8011258:	af00      	add	r7, sp, #0
 801125a:	6078      	str	r0, [r7, #4]
 801125c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	2b00      	cmp	r3, #0
 8011262:	d10a      	bne.n	801127a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8011264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011268:	f383 8811 	msr	BASEPRI, r3
 801126c:	f3bf 8f6f 	isb	sy
 8011270:	f3bf 8f4f 	dsb	sy
 8011274:	613b      	str	r3, [r7, #16]
}
 8011276:	bf00      	nop
 8011278:	e7fe      	b.n	8011278 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801127a:	683b      	ldr	r3, [r7, #0]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d10a      	bne.n	8011296 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011284:	f383 8811 	msr	BASEPRI, r3
 8011288:	f3bf 8f6f 	isb	sy
 801128c:	f3bf 8f4f 	dsb	sy
 8011290:	60fb      	str	r3, [r7, #12]
}
 8011292:	bf00      	nop
 8011294:	e7fe      	b.n	8011294 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8011296:	f000 ff3d 	bl	8012114 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801129a:	4b1d      	ldr	r3, [pc, #116]	; (8011310 <xTaskCheckForTimeOut+0xbc>)
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	685b      	ldr	r3, [r3, #4]
 80112a4:	69ba      	ldr	r2, [r7, #24]
 80112a6:	1ad3      	subs	r3, r2, r3
 80112a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80112aa:	683b      	ldr	r3, [r7, #0]
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80112b2:	d102      	bne.n	80112ba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80112b4:	2300      	movs	r3, #0
 80112b6:	61fb      	str	r3, [r7, #28]
 80112b8:	e023      	b.n	8011302 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	681a      	ldr	r2, [r3, #0]
 80112be:	4b15      	ldr	r3, [pc, #84]	; (8011314 <xTaskCheckForTimeOut+0xc0>)
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	429a      	cmp	r2, r3
 80112c4:	d007      	beq.n	80112d6 <xTaskCheckForTimeOut+0x82>
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	685b      	ldr	r3, [r3, #4]
 80112ca:	69ba      	ldr	r2, [r7, #24]
 80112cc:	429a      	cmp	r2, r3
 80112ce:	d302      	bcc.n	80112d6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80112d0:	2301      	movs	r3, #1
 80112d2:	61fb      	str	r3, [r7, #28]
 80112d4:	e015      	b.n	8011302 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80112d6:	683b      	ldr	r3, [r7, #0]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	697a      	ldr	r2, [r7, #20]
 80112dc:	429a      	cmp	r2, r3
 80112de:	d20b      	bcs.n	80112f8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80112e0:	683b      	ldr	r3, [r7, #0]
 80112e2:	681a      	ldr	r2, [r3, #0]
 80112e4:	697b      	ldr	r3, [r7, #20]
 80112e6:	1ad2      	subs	r2, r2, r3
 80112e8:	683b      	ldr	r3, [r7, #0]
 80112ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80112ec:	6878      	ldr	r0, [r7, #4]
 80112ee:	f7ff ff9b 	bl	8011228 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80112f2:	2300      	movs	r3, #0
 80112f4:	61fb      	str	r3, [r7, #28]
 80112f6:	e004      	b.n	8011302 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80112f8:	683b      	ldr	r3, [r7, #0]
 80112fa:	2200      	movs	r2, #0
 80112fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80112fe:	2301      	movs	r3, #1
 8011300:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011302:	f000 ff37 	bl	8012174 <vPortExitCritical>

	return xReturn;
 8011306:	69fb      	ldr	r3, [r7, #28]
}
 8011308:	4618      	mov	r0, r3
 801130a:	3720      	adds	r7, #32
 801130c:	46bd      	mov	sp, r7
 801130e:	bd80      	pop	{r7, pc}
 8011310:	24000b64 	.word	0x24000b64
 8011314:	24000b78 	.word	0x24000b78

08011318 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011318:	b480      	push	{r7}
 801131a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801131c:	4b03      	ldr	r3, [pc, #12]	; (801132c <vTaskMissedYield+0x14>)
 801131e:	2201      	movs	r2, #1
 8011320:	601a      	str	r2, [r3, #0]
}
 8011322:	bf00      	nop
 8011324:	46bd      	mov	sp, r7
 8011326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801132a:	4770      	bx	lr
 801132c:	24000b74 	.word	0x24000b74

08011330 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011330:	b580      	push	{r7, lr}
 8011332:	b082      	sub	sp, #8
 8011334:	af00      	add	r7, sp, #0
 8011336:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011338:	f000 f852 	bl	80113e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801133c:	4b06      	ldr	r3, [pc, #24]	; (8011358 <prvIdleTask+0x28>)
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	2b01      	cmp	r3, #1
 8011342:	d9f9      	bls.n	8011338 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011344:	4b05      	ldr	r3, [pc, #20]	; (801135c <prvIdleTask+0x2c>)
 8011346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801134a:	601a      	str	r2, [r3, #0]
 801134c:	f3bf 8f4f 	dsb	sy
 8011350:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011354:	e7f0      	b.n	8011338 <prvIdleTask+0x8>
 8011356:	bf00      	nop
 8011358:	24000a64 	.word	0x24000a64
 801135c:	e000ed04 	.word	0xe000ed04

08011360 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011360:	b580      	push	{r7, lr}
 8011362:	b082      	sub	sp, #8
 8011364:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011366:	2300      	movs	r3, #0
 8011368:	607b      	str	r3, [r7, #4]
 801136a:	e00c      	b.n	8011386 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801136c:	687a      	ldr	r2, [r7, #4]
 801136e:	4613      	mov	r3, r2
 8011370:	009b      	lsls	r3, r3, #2
 8011372:	4413      	add	r3, r2
 8011374:	009b      	lsls	r3, r3, #2
 8011376:	4a12      	ldr	r2, [pc, #72]	; (80113c0 <prvInitialiseTaskLists+0x60>)
 8011378:	4413      	add	r3, r2
 801137a:	4618      	mov	r0, r3
 801137c:	f7fe fc50 	bl	800fc20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	3301      	adds	r3, #1
 8011384:	607b      	str	r3, [r7, #4]
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	2b06      	cmp	r3, #6
 801138a:	d9ef      	bls.n	801136c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801138c:	480d      	ldr	r0, [pc, #52]	; (80113c4 <prvInitialiseTaskLists+0x64>)
 801138e:	f7fe fc47 	bl	800fc20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011392:	480d      	ldr	r0, [pc, #52]	; (80113c8 <prvInitialiseTaskLists+0x68>)
 8011394:	f7fe fc44 	bl	800fc20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011398:	480c      	ldr	r0, [pc, #48]	; (80113cc <prvInitialiseTaskLists+0x6c>)
 801139a:	f7fe fc41 	bl	800fc20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801139e:	480c      	ldr	r0, [pc, #48]	; (80113d0 <prvInitialiseTaskLists+0x70>)
 80113a0:	f7fe fc3e 	bl	800fc20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80113a4:	480b      	ldr	r0, [pc, #44]	; (80113d4 <prvInitialiseTaskLists+0x74>)
 80113a6:	f7fe fc3b 	bl	800fc20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80113aa:	4b0b      	ldr	r3, [pc, #44]	; (80113d8 <prvInitialiseTaskLists+0x78>)
 80113ac:	4a05      	ldr	r2, [pc, #20]	; (80113c4 <prvInitialiseTaskLists+0x64>)
 80113ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80113b0:	4b0a      	ldr	r3, [pc, #40]	; (80113dc <prvInitialiseTaskLists+0x7c>)
 80113b2:	4a05      	ldr	r2, [pc, #20]	; (80113c8 <prvInitialiseTaskLists+0x68>)
 80113b4:	601a      	str	r2, [r3, #0]
}
 80113b6:	bf00      	nop
 80113b8:	3708      	adds	r7, #8
 80113ba:	46bd      	mov	sp, r7
 80113bc:	bd80      	pop	{r7, pc}
 80113be:	bf00      	nop
 80113c0:	24000a64 	.word	0x24000a64
 80113c4:	24000af0 	.word	0x24000af0
 80113c8:	24000b04 	.word	0x24000b04
 80113cc:	24000b20 	.word	0x24000b20
 80113d0:	24000b34 	.word	0x24000b34
 80113d4:	24000b4c 	.word	0x24000b4c
 80113d8:	24000b18 	.word	0x24000b18
 80113dc:	24000b1c 	.word	0x24000b1c

080113e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b082      	sub	sp, #8
 80113e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80113e6:	e019      	b.n	801141c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80113e8:	f000 fe94 	bl	8012114 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80113ec:	4b10      	ldr	r3, [pc, #64]	; (8011430 <prvCheckTasksWaitingTermination+0x50>)
 80113ee:	68db      	ldr	r3, [r3, #12]
 80113f0:	68db      	ldr	r3, [r3, #12]
 80113f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	3304      	adds	r3, #4
 80113f8:	4618      	mov	r0, r3
 80113fa:	f7fe fc9b 	bl	800fd34 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80113fe:	4b0d      	ldr	r3, [pc, #52]	; (8011434 <prvCheckTasksWaitingTermination+0x54>)
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	3b01      	subs	r3, #1
 8011404:	4a0b      	ldr	r2, [pc, #44]	; (8011434 <prvCheckTasksWaitingTermination+0x54>)
 8011406:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011408:	4b0b      	ldr	r3, [pc, #44]	; (8011438 <prvCheckTasksWaitingTermination+0x58>)
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	3b01      	subs	r3, #1
 801140e:	4a0a      	ldr	r2, [pc, #40]	; (8011438 <prvCheckTasksWaitingTermination+0x58>)
 8011410:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011412:	f000 feaf 	bl	8012174 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011416:	6878      	ldr	r0, [r7, #4]
 8011418:	f000 f810 	bl	801143c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801141c:	4b06      	ldr	r3, [pc, #24]	; (8011438 <prvCheckTasksWaitingTermination+0x58>)
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d1e1      	bne.n	80113e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011424:	bf00      	nop
 8011426:	bf00      	nop
 8011428:	3708      	adds	r7, #8
 801142a:	46bd      	mov	sp, r7
 801142c:	bd80      	pop	{r7, pc}
 801142e:	bf00      	nop
 8011430:	24000b34 	.word	0x24000b34
 8011434:	24000b60 	.word	0x24000b60
 8011438:	24000b48 	.word	0x24000b48

0801143c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801143c:	b580      	push	{r7, lr}
 801143e:	b084      	sub	sp, #16
 8011440:	af00      	add	r7, sp, #0
 8011442:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801144a:	2b00      	cmp	r3, #0
 801144c:	d108      	bne.n	8011460 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011452:	4618      	mov	r0, r3
 8011454:	f001 f84c 	bl	80124f0 <vPortFree>
				vPortFree( pxTCB );
 8011458:	6878      	ldr	r0, [r7, #4]
 801145a:	f001 f849 	bl	80124f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801145e:	e018      	b.n	8011492 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011466:	2b01      	cmp	r3, #1
 8011468:	d103      	bne.n	8011472 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801146a:	6878      	ldr	r0, [r7, #4]
 801146c:	f001 f840 	bl	80124f0 <vPortFree>
	}
 8011470:	e00f      	b.n	8011492 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011478:	2b02      	cmp	r3, #2
 801147a:	d00a      	beq.n	8011492 <prvDeleteTCB+0x56>
	__asm volatile
 801147c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011480:	f383 8811 	msr	BASEPRI, r3
 8011484:	f3bf 8f6f 	isb	sy
 8011488:	f3bf 8f4f 	dsb	sy
 801148c:	60fb      	str	r3, [r7, #12]
}
 801148e:	bf00      	nop
 8011490:	e7fe      	b.n	8011490 <prvDeleteTCB+0x54>
	}
 8011492:	bf00      	nop
 8011494:	3710      	adds	r7, #16
 8011496:	46bd      	mov	sp, r7
 8011498:	bd80      	pop	{r7, pc}
	...

0801149c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801149c:	b480      	push	{r7}
 801149e:	b083      	sub	sp, #12
 80114a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80114a2:	4b0c      	ldr	r3, [pc, #48]	; (80114d4 <prvResetNextTaskUnblockTime+0x38>)
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d104      	bne.n	80114b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80114ac:	4b0a      	ldr	r3, [pc, #40]	; (80114d8 <prvResetNextTaskUnblockTime+0x3c>)
 80114ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80114b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80114b4:	e008      	b.n	80114c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80114b6:	4b07      	ldr	r3, [pc, #28]	; (80114d4 <prvResetNextTaskUnblockTime+0x38>)
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	68db      	ldr	r3, [r3, #12]
 80114bc:	68db      	ldr	r3, [r3, #12]
 80114be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	685b      	ldr	r3, [r3, #4]
 80114c4:	4a04      	ldr	r2, [pc, #16]	; (80114d8 <prvResetNextTaskUnblockTime+0x3c>)
 80114c6:	6013      	str	r3, [r2, #0]
}
 80114c8:	bf00      	nop
 80114ca:	370c      	adds	r7, #12
 80114cc:	46bd      	mov	sp, r7
 80114ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d2:	4770      	bx	lr
 80114d4:	24000b18 	.word	0x24000b18
 80114d8:	24000b80 	.word	0x24000b80

080114dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80114dc:	b480      	push	{r7}
 80114de:	b083      	sub	sp, #12
 80114e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80114e2:	4b0b      	ldr	r3, [pc, #44]	; (8011510 <xTaskGetSchedulerState+0x34>)
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d102      	bne.n	80114f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80114ea:	2301      	movs	r3, #1
 80114ec:	607b      	str	r3, [r7, #4]
 80114ee:	e008      	b.n	8011502 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80114f0:	4b08      	ldr	r3, [pc, #32]	; (8011514 <xTaskGetSchedulerState+0x38>)
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d102      	bne.n	80114fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80114f8:	2302      	movs	r3, #2
 80114fa:	607b      	str	r3, [r7, #4]
 80114fc:	e001      	b.n	8011502 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80114fe:	2300      	movs	r3, #0
 8011500:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011502:	687b      	ldr	r3, [r7, #4]
	}
 8011504:	4618      	mov	r0, r3
 8011506:	370c      	adds	r7, #12
 8011508:	46bd      	mov	sp, r7
 801150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150e:	4770      	bx	lr
 8011510:	24000b6c 	.word	0x24000b6c
 8011514:	24000b88 	.word	0x24000b88

08011518 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011518:	b580      	push	{r7, lr}
 801151a:	b086      	sub	sp, #24
 801151c:	af00      	add	r7, sp, #0
 801151e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011524:	2300      	movs	r3, #0
 8011526:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d06e      	beq.n	801160c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801152e:	4b3a      	ldr	r3, [pc, #232]	; (8011618 <xTaskPriorityDisinherit+0x100>)
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	693a      	ldr	r2, [r7, #16]
 8011534:	429a      	cmp	r2, r3
 8011536:	d00a      	beq.n	801154e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011538:	f04f 0350 	mov.w	r3, #80	; 0x50
 801153c:	f383 8811 	msr	BASEPRI, r3
 8011540:	f3bf 8f6f 	isb	sy
 8011544:	f3bf 8f4f 	dsb	sy
 8011548:	60fb      	str	r3, [r7, #12]
}
 801154a:	bf00      	nop
 801154c:	e7fe      	b.n	801154c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801154e:	693b      	ldr	r3, [r7, #16]
 8011550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011552:	2b00      	cmp	r3, #0
 8011554:	d10a      	bne.n	801156c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8011556:	f04f 0350 	mov.w	r3, #80	; 0x50
 801155a:	f383 8811 	msr	BASEPRI, r3
 801155e:	f3bf 8f6f 	isb	sy
 8011562:	f3bf 8f4f 	dsb	sy
 8011566:	60bb      	str	r3, [r7, #8]
}
 8011568:	bf00      	nop
 801156a:	e7fe      	b.n	801156a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801156c:	693b      	ldr	r3, [r7, #16]
 801156e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011570:	1e5a      	subs	r2, r3, #1
 8011572:	693b      	ldr	r3, [r7, #16]
 8011574:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011576:	693b      	ldr	r3, [r7, #16]
 8011578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801157a:	693b      	ldr	r3, [r7, #16]
 801157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801157e:	429a      	cmp	r2, r3
 8011580:	d044      	beq.n	801160c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011582:	693b      	ldr	r3, [r7, #16]
 8011584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011586:	2b00      	cmp	r3, #0
 8011588:	d140      	bne.n	801160c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801158a:	693b      	ldr	r3, [r7, #16]
 801158c:	3304      	adds	r3, #4
 801158e:	4618      	mov	r0, r3
 8011590:	f7fe fbd0 	bl	800fd34 <uxListRemove>
 8011594:	4603      	mov	r3, r0
 8011596:	2b00      	cmp	r3, #0
 8011598:	d115      	bne.n	80115c6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801159a:	693b      	ldr	r3, [r7, #16]
 801159c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801159e:	491f      	ldr	r1, [pc, #124]	; (801161c <xTaskPriorityDisinherit+0x104>)
 80115a0:	4613      	mov	r3, r2
 80115a2:	009b      	lsls	r3, r3, #2
 80115a4:	4413      	add	r3, r2
 80115a6:	009b      	lsls	r3, r3, #2
 80115a8:	440b      	add	r3, r1
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d10a      	bne.n	80115c6 <xTaskPriorityDisinherit+0xae>
 80115b0:	693b      	ldr	r3, [r7, #16]
 80115b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115b4:	2201      	movs	r2, #1
 80115b6:	fa02 f303 	lsl.w	r3, r2, r3
 80115ba:	43da      	mvns	r2, r3
 80115bc:	4b18      	ldr	r3, [pc, #96]	; (8011620 <xTaskPriorityDisinherit+0x108>)
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	4013      	ands	r3, r2
 80115c2:	4a17      	ldr	r2, [pc, #92]	; (8011620 <xTaskPriorityDisinherit+0x108>)
 80115c4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80115c6:	693b      	ldr	r3, [r7, #16]
 80115c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80115ca:	693b      	ldr	r3, [r7, #16]
 80115cc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80115ce:	693b      	ldr	r3, [r7, #16]
 80115d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115d2:	f1c3 0207 	rsb	r2, r3, #7
 80115d6:	693b      	ldr	r3, [r7, #16]
 80115d8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80115da:	693b      	ldr	r3, [r7, #16]
 80115dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115de:	2201      	movs	r2, #1
 80115e0:	409a      	lsls	r2, r3
 80115e2:	4b0f      	ldr	r3, [pc, #60]	; (8011620 <xTaskPriorityDisinherit+0x108>)
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	4313      	orrs	r3, r2
 80115e8:	4a0d      	ldr	r2, [pc, #52]	; (8011620 <xTaskPriorityDisinherit+0x108>)
 80115ea:	6013      	str	r3, [r2, #0]
 80115ec:	693b      	ldr	r3, [r7, #16]
 80115ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115f0:	4613      	mov	r3, r2
 80115f2:	009b      	lsls	r3, r3, #2
 80115f4:	4413      	add	r3, r2
 80115f6:	009b      	lsls	r3, r3, #2
 80115f8:	4a08      	ldr	r2, [pc, #32]	; (801161c <xTaskPriorityDisinherit+0x104>)
 80115fa:	441a      	add	r2, r3
 80115fc:	693b      	ldr	r3, [r7, #16]
 80115fe:	3304      	adds	r3, #4
 8011600:	4619      	mov	r1, r3
 8011602:	4610      	mov	r0, r2
 8011604:	f7fe fb39 	bl	800fc7a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011608:	2301      	movs	r3, #1
 801160a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801160c:	697b      	ldr	r3, [r7, #20]
	}
 801160e:	4618      	mov	r0, r3
 8011610:	3718      	adds	r7, #24
 8011612:	46bd      	mov	sp, r7
 8011614:	bd80      	pop	{r7, pc}
 8011616:	bf00      	nop
 8011618:	24000a60 	.word	0x24000a60
 801161c:	24000a64 	.word	0x24000a64
 8011620:	24000b68 	.word	0x24000b68

08011624 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011624:	b580      	push	{r7, lr}
 8011626:	b084      	sub	sp, #16
 8011628:	af00      	add	r7, sp, #0
 801162a:	6078      	str	r0, [r7, #4]
 801162c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801162e:	4b29      	ldr	r3, [pc, #164]	; (80116d4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011634:	4b28      	ldr	r3, [pc, #160]	; (80116d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	3304      	adds	r3, #4
 801163a:	4618      	mov	r0, r3
 801163c:	f7fe fb7a 	bl	800fd34 <uxListRemove>
 8011640:	4603      	mov	r3, r0
 8011642:	2b00      	cmp	r3, #0
 8011644:	d10b      	bne.n	801165e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8011646:	4b24      	ldr	r3, [pc, #144]	; (80116d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801164c:	2201      	movs	r2, #1
 801164e:	fa02 f303 	lsl.w	r3, r2, r3
 8011652:	43da      	mvns	r2, r3
 8011654:	4b21      	ldr	r3, [pc, #132]	; (80116dc <prvAddCurrentTaskToDelayedList+0xb8>)
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	4013      	ands	r3, r2
 801165a:	4a20      	ldr	r2, [pc, #128]	; (80116dc <prvAddCurrentTaskToDelayedList+0xb8>)
 801165c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011664:	d10a      	bne.n	801167c <prvAddCurrentTaskToDelayedList+0x58>
 8011666:	683b      	ldr	r3, [r7, #0]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d007      	beq.n	801167c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801166c:	4b1a      	ldr	r3, [pc, #104]	; (80116d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	3304      	adds	r3, #4
 8011672:	4619      	mov	r1, r3
 8011674:	481a      	ldr	r0, [pc, #104]	; (80116e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8011676:	f7fe fb00 	bl	800fc7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801167a:	e026      	b.n	80116ca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801167c:	68fa      	ldr	r2, [r7, #12]
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	4413      	add	r3, r2
 8011682:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011684:	4b14      	ldr	r3, [pc, #80]	; (80116d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	68ba      	ldr	r2, [r7, #8]
 801168a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801168c:	68ba      	ldr	r2, [r7, #8]
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	429a      	cmp	r2, r3
 8011692:	d209      	bcs.n	80116a8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011694:	4b13      	ldr	r3, [pc, #76]	; (80116e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8011696:	681a      	ldr	r2, [r3, #0]
 8011698:	4b0f      	ldr	r3, [pc, #60]	; (80116d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	3304      	adds	r3, #4
 801169e:	4619      	mov	r1, r3
 80116a0:	4610      	mov	r0, r2
 80116a2:	f7fe fb0e 	bl	800fcc2 <vListInsert>
}
 80116a6:	e010      	b.n	80116ca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80116a8:	4b0f      	ldr	r3, [pc, #60]	; (80116e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80116aa:	681a      	ldr	r2, [r3, #0]
 80116ac:	4b0a      	ldr	r3, [pc, #40]	; (80116d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	3304      	adds	r3, #4
 80116b2:	4619      	mov	r1, r3
 80116b4:	4610      	mov	r0, r2
 80116b6:	f7fe fb04 	bl	800fcc2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80116ba:	4b0c      	ldr	r3, [pc, #48]	; (80116ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	68ba      	ldr	r2, [r7, #8]
 80116c0:	429a      	cmp	r2, r3
 80116c2:	d202      	bcs.n	80116ca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80116c4:	4a09      	ldr	r2, [pc, #36]	; (80116ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80116c6:	68bb      	ldr	r3, [r7, #8]
 80116c8:	6013      	str	r3, [r2, #0]
}
 80116ca:	bf00      	nop
 80116cc:	3710      	adds	r7, #16
 80116ce:	46bd      	mov	sp, r7
 80116d0:	bd80      	pop	{r7, pc}
 80116d2:	bf00      	nop
 80116d4:	24000b64 	.word	0x24000b64
 80116d8:	24000a60 	.word	0x24000a60
 80116dc:	24000b68 	.word	0x24000b68
 80116e0:	24000b4c 	.word	0x24000b4c
 80116e4:	24000b1c 	.word	0x24000b1c
 80116e8:	24000b18 	.word	0x24000b18
 80116ec:	24000b80 	.word	0x24000b80

080116f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80116f0:	b580      	push	{r7, lr}
 80116f2:	b08a      	sub	sp, #40	; 0x28
 80116f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80116f6:	2300      	movs	r3, #0
 80116f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80116fa:	f000 fba1 	bl	8011e40 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80116fe:	4b1c      	ldr	r3, [pc, #112]	; (8011770 <xTimerCreateTimerTask+0x80>)
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	2b00      	cmp	r3, #0
 8011704:	d021      	beq.n	801174a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011706:	2300      	movs	r3, #0
 8011708:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801170a:	2300      	movs	r3, #0
 801170c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801170e:	1d3a      	adds	r2, r7, #4
 8011710:	f107 0108 	add.w	r1, r7, #8
 8011714:	f107 030c 	add.w	r3, r7, #12
 8011718:	4618      	mov	r0, r3
 801171a:	f7ee ffe5 	bl	80006e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801171e:	6879      	ldr	r1, [r7, #4]
 8011720:	68bb      	ldr	r3, [r7, #8]
 8011722:	68fa      	ldr	r2, [r7, #12]
 8011724:	9202      	str	r2, [sp, #8]
 8011726:	9301      	str	r3, [sp, #4]
 8011728:	2302      	movs	r3, #2
 801172a:	9300      	str	r3, [sp, #0]
 801172c:	2300      	movs	r3, #0
 801172e:	460a      	mov	r2, r1
 8011730:	4910      	ldr	r1, [pc, #64]	; (8011774 <xTimerCreateTimerTask+0x84>)
 8011732:	4811      	ldr	r0, [pc, #68]	; (8011778 <xTimerCreateTimerTask+0x88>)
 8011734:	f7ff f8ca 	bl	80108cc <xTaskCreateStatic>
 8011738:	4603      	mov	r3, r0
 801173a:	4a10      	ldr	r2, [pc, #64]	; (801177c <xTimerCreateTimerTask+0x8c>)
 801173c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801173e:	4b0f      	ldr	r3, [pc, #60]	; (801177c <xTimerCreateTimerTask+0x8c>)
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	2b00      	cmp	r3, #0
 8011744:	d001      	beq.n	801174a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011746:	2301      	movs	r3, #1
 8011748:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801174a:	697b      	ldr	r3, [r7, #20]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d10a      	bne.n	8011766 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8011750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011754:	f383 8811 	msr	BASEPRI, r3
 8011758:	f3bf 8f6f 	isb	sy
 801175c:	f3bf 8f4f 	dsb	sy
 8011760:	613b      	str	r3, [r7, #16]
}
 8011762:	bf00      	nop
 8011764:	e7fe      	b.n	8011764 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8011766:	697b      	ldr	r3, [r7, #20]
}
 8011768:	4618      	mov	r0, r3
 801176a:	3718      	adds	r7, #24
 801176c:	46bd      	mov	sp, r7
 801176e:	bd80      	pop	{r7, pc}
 8011770:	24000bbc 	.word	0x24000bbc
 8011774:	08013f90 	.word	0x08013f90
 8011778:	080119e9 	.word	0x080119e9
 801177c:	24000bc0 	.word	0x24000bc0

08011780 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8011780:	b580      	push	{r7, lr}
 8011782:	b088      	sub	sp, #32
 8011784:	af02      	add	r7, sp, #8
 8011786:	60f8      	str	r0, [r7, #12]
 8011788:	60b9      	str	r1, [r7, #8]
 801178a:	607a      	str	r2, [r7, #4]
 801178c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 801178e:	2028      	movs	r0, #40	; 0x28
 8011790:	f000 fde2 	bl	8012358 <pvPortMalloc>
 8011794:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8011796:	697b      	ldr	r3, [r7, #20]
 8011798:	2b00      	cmp	r3, #0
 801179a:	d00d      	beq.n	80117b8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 801179c:	697b      	ldr	r3, [r7, #20]
 801179e:	2200      	movs	r2, #0
 80117a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80117a4:	697b      	ldr	r3, [r7, #20]
 80117a6:	9301      	str	r3, [sp, #4]
 80117a8:	6a3b      	ldr	r3, [r7, #32]
 80117aa:	9300      	str	r3, [sp, #0]
 80117ac:	683b      	ldr	r3, [r7, #0]
 80117ae:	687a      	ldr	r2, [r7, #4]
 80117b0:	68b9      	ldr	r1, [r7, #8]
 80117b2:	68f8      	ldr	r0, [r7, #12]
 80117b4:	f000 f843 	bl	801183e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80117b8:	697b      	ldr	r3, [r7, #20]
	}
 80117ba:	4618      	mov	r0, r3
 80117bc:	3718      	adds	r7, #24
 80117be:	46bd      	mov	sp, r7
 80117c0:	bd80      	pop	{r7, pc}

080117c2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80117c2:	b580      	push	{r7, lr}
 80117c4:	b08a      	sub	sp, #40	; 0x28
 80117c6:	af02      	add	r7, sp, #8
 80117c8:	60f8      	str	r0, [r7, #12]
 80117ca:	60b9      	str	r1, [r7, #8]
 80117cc:	607a      	str	r2, [r7, #4]
 80117ce:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80117d0:	2328      	movs	r3, #40	; 0x28
 80117d2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80117d4:	693b      	ldr	r3, [r7, #16]
 80117d6:	2b28      	cmp	r3, #40	; 0x28
 80117d8:	d00a      	beq.n	80117f0 <xTimerCreateStatic+0x2e>
	__asm volatile
 80117da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117de:	f383 8811 	msr	BASEPRI, r3
 80117e2:	f3bf 8f6f 	isb	sy
 80117e6:	f3bf 8f4f 	dsb	sy
 80117ea:	61bb      	str	r3, [r7, #24]
}
 80117ec:	bf00      	nop
 80117ee:	e7fe      	b.n	80117ee <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80117f0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80117f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d10a      	bne.n	801180e <xTimerCreateStatic+0x4c>
	__asm volatile
 80117f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117fc:	f383 8811 	msr	BASEPRI, r3
 8011800:	f3bf 8f6f 	isb	sy
 8011804:	f3bf 8f4f 	dsb	sy
 8011808:	617b      	str	r3, [r7, #20]
}
 801180a:	bf00      	nop
 801180c:	e7fe      	b.n	801180c <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 801180e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011810:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8011812:	69fb      	ldr	r3, [r7, #28]
 8011814:	2b00      	cmp	r3, #0
 8011816:	d00d      	beq.n	8011834 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8011818:	69fb      	ldr	r3, [r7, #28]
 801181a:	2202      	movs	r2, #2
 801181c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8011820:	69fb      	ldr	r3, [r7, #28]
 8011822:	9301      	str	r3, [sp, #4]
 8011824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011826:	9300      	str	r3, [sp, #0]
 8011828:	683b      	ldr	r3, [r7, #0]
 801182a:	687a      	ldr	r2, [r7, #4]
 801182c:	68b9      	ldr	r1, [r7, #8]
 801182e:	68f8      	ldr	r0, [r7, #12]
 8011830:	f000 f805 	bl	801183e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8011834:	69fb      	ldr	r3, [r7, #28]
	}
 8011836:	4618      	mov	r0, r3
 8011838:	3720      	adds	r7, #32
 801183a:	46bd      	mov	sp, r7
 801183c:	bd80      	pop	{r7, pc}

0801183e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 801183e:	b580      	push	{r7, lr}
 8011840:	b086      	sub	sp, #24
 8011842:	af00      	add	r7, sp, #0
 8011844:	60f8      	str	r0, [r7, #12]
 8011846:	60b9      	str	r1, [r7, #8]
 8011848:	607a      	str	r2, [r7, #4]
 801184a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 801184c:	68bb      	ldr	r3, [r7, #8]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d10a      	bne.n	8011868 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8011852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011856:	f383 8811 	msr	BASEPRI, r3
 801185a:	f3bf 8f6f 	isb	sy
 801185e:	f3bf 8f4f 	dsb	sy
 8011862:	617b      	str	r3, [r7, #20]
}
 8011864:	bf00      	nop
 8011866:	e7fe      	b.n	8011866 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8011868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801186a:	2b00      	cmp	r3, #0
 801186c:	d01e      	beq.n	80118ac <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 801186e:	f000 fae7 	bl	8011e40 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8011872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011874:	68fa      	ldr	r2, [r7, #12]
 8011876:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8011878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801187a:	68ba      	ldr	r2, [r7, #8]
 801187c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 801187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011880:	683a      	ldr	r2, [r7, #0]
 8011882:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8011884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011886:	6a3a      	ldr	r2, [r7, #32]
 8011888:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 801188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801188c:	3304      	adds	r3, #4
 801188e:	4618      	mov	r0, r3
 8011890:	f7fe f9e6 	bl	800fc60 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	2b00      	cmp	r3, #0
 8011898:	d008      	beq.n	80118ac <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 801189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801189c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80118a0:	f043 0304 	orr.w	r3, r3, #4
 80118a4:	b2da      	uxtb	r2, r3
 80118a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80118ac:	bf00      	nop
 80118ae:	3718      	adds	r7, #24
 80118b0:	46bd      	mov	sp, r7
 80118b2:	bd80      	pop	{r7, pc}

080118b4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80118b4:	b580      	push	{r7, lr}
 80118b6:	b08a      	sub	sp, #40	; 0x28
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	60f8      	str	r0, [r7, #12]
 80118bc:	60b9      	str	r1, [r7, #8]
 80118be:	607a      	str	r2, [r7, #4]
 80118c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80118c2:	2300      	movs	r3, #0
 80118c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d10a      	bne.n	80118e2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80118cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118d0:	f383 8811 	msr	BASEPRI, r3
 80118d4:	f3bf 8f6f 	isb	sy
 80118d8:	f3bf 8f4f 	dsb	sy
 80118dc:	623b      	str	r3, [r7, #32]
}
 80118de:	bf00      	nop
 80118e0:	e7fe      	b.n	80118e0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80118e2:	4b1a      	ldr	r3, [pc, #104]	; (801194c <xTimerGenericCommand+0x98>)
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d02a      	beq.n	8011940 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80118ea:	68bb      	ldr	r3, [r7, #8]
 80118ec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80118f6:	68bb      	ldr	r3, [r7, #8]
 80118f8:	2b05      	cmp	r3, #5
 80118fa:	dc18      	bgt.n	801192e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80118fc:	f7ff fdee 	bl	80114dc <xTaskGetSchedulerState>
 8011900:	4603      	mov	r3, r0
 8011902:	2b02      	cmp	r3, #2
 8011904:	d109      	bne.n	801191a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011906:	4b11      	ldr	r3, [pc, #68]	; (801194c <xTimerGenericCommand+0x98>)
 8011908:	6818      	ldr	r0, [r3, #0]
 801190a:	f107 0110 	add.w	r1, r7, #16
 801190e:	2300      	movs	r3, #0
 8011910:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011912:	f7fe fb73 	bl	800fffc <xQueueGenericSend>
 8011916:	6278      	str	r0, [r7, #36]	; 0x24
 8011918:	e012      	b.n	8011940 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801191a:	4b0c      	ldr	r3, [pc, #48]	; (801194c <xTimerGenericCommand+0x98>)
 801191c:	6818      	ldr	r0, [r3, #0]
 801191e:	f107 0110 	add.w	r1, r7, #16
 8011922:	2300      	movs	r3, #0
 8011924:	2200      	movs	r2, #0
 8011926:	f7fe fb69 	bl	800fffc <xQueueGenericSend>
 801192a:	6278      	str	r0, [r7, #36]	; 0x24
 801192c:	e008      	b.n	8011940 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801192e:	4b07      	ldr	r3, [pc, #28]	; (801194c <xTimerGenericCommand+0x98>)
 8011930:	6818      	ldr	r0, [r3, #0]
 8011932:	f107 0110 	add.w	r1, r7, #16
 8011936:	2300      	movs	r3, #0
 8011938:	683a      	ldr	r2, [r7, #0]
 801193a:	f7fe fc5d 	bl	80101f8 <xQueueGenericSendFromISR>
 801193e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011942:	4618      	mov	r0, r3
 8011944:	3728      	adds	r7, #40	; 0x28
 8011946:	46bd      	mov	sp, r7
 8011948:	bd80      	pop	{r7, pc}
 801194a:	bf00      	nop
 801194c:	24000bbc 	.word	0x24000bbc

08011950 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011950:	b580      	push	{r7, lr}
 8011952:	b088      	sub	sp, #32
 8011954:	af02      	add	r7, sp, #8
 8011956:	6078      	str	r0, [r7, #4]
 8011958:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801195a:	4b22      	ldr	r3, [pc, #136]	; (80119e4 <prvProcessExpiredTimer+0x94>)
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	68db      	ldr	r3, [r3, #12]
 8011960:	68db      	ldr	r3, [r3, #12]
 8011962:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011964:	697b      	ldr	r3, [r7, #20]
 8011966:	3304      	adds	r3, #4
 8011968:	4618      	mov	r0, r3
 801196a:	f7fe f9e3 	bl	800fd34 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801196e:	697b      	ldr	r3, [r7, #20]
 8011970:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011974:	f003 0304 	and.w	r3, r3, #4
 8011978:	2b00      	cmp	r3, #0
 801197a:	d022      	beq.n	80119c2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801197c:	697b      	ldr	r3, [r7, #20]
 801197e:	699a      	ldr	r2, [r3, #24]
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	18d1      	adds	r1, r2, r3
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	683a      	ldr	r2, [r7, #0]
 8011988:	6978      	ldr	r0, [r7, #20]
 801198a:	f000 f8d1 	bl	8011b30 <prvInsertTimerInActiveList>
 801198e:	4603      	mov	r3, r0
 8011990:	2b00      	cmp	r3, #0
 8011992:	d01f      	beq.n	80119d4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011994:	2300      	movs	r3, #0
 8011996:	9300      	str	r3, [sp, #0]
 8011998:	2300      	movs	r3, #0
 801199a:	687a      	ldr	r2, [r7, #4]
 801199c:	2100      	movs	r1, #0
 801199e:	6978      	ldr	r0, [r7, #20]
 80119a0:	f7ff ff88 	bl	80118b4 <xTimerGenericCommand>
 80119a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80119a6:	693b      	ldr	r3, [r7, #16]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d113      	bne.n	80119d4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80119ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119b0:	f383 8811 	msr	BASEPRI, r3
 80119b4:	f3bf 8f6f 	isb	sy
 80119b8:	f3bf 8f4f 	dsb	sy
 80119bc:	60fb      	str	r3, [r7, #12]
}
 80119be:	bf00      	nop
 80119c0:	e7fe      	b.n	80119c0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80119c2:	697b      	ldr	r3, [r7, #20]
 80119c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80119c8:	f023 0301 	bic.w	r3, r3, #1
 80119cc:	b2da      	uxtb	r2, r3
 80119ce:	697b      	ldr	r3, [r7, #20]
 80119d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80119d4:	697b      	ldr	r3, [r7, #20]
 80119d6:	6a1b      	ldr	r3, [r3, #32]
 80119d8:	6978      	ldr	r0, [r7, #20]
 80119da:	4798      	blx	r3
}
 80119dc:	bf00      	nop
 80119de:	3718      	adds	r7, #24
 80119e0:	46bd      	mov	sp, r7
 80119e2:	bd80      	pop	{r7, pc}
 80119e4:	24000bb4 	.word	0x24000bb4

080119e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80119e8:	b580      	push	{r7, lr}
 80119ea:	b084      	sub	sp, #16
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80119f0:	f107 0308 	add.w	r3, r7, #8
 80119f4:	4618      	mov	r0, r3
 80119f6:	f000 f857 	bl	8011aa8 <prvGetNextExpireTime>
 80119fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80119fc:	68bb      	ldr	r3, [r7, #8]
 80119fe:	4619      	mov	r1, r3
 8011a00:	68f8      	ldr	r0, [r7, #12]
 8011a02:	f000 f803 	bl	8011a0c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8011a06:	f000 f8d5 	bl	8011bb4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011a0a:	e7f1      	b.n	80119f0 <prvTimerTask+0x8>

08011a0c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011a0c:	b580      	push	{r7, lr}
 8011a0e:	b084      	sub	sp, #16
 8011a10:	af00      	add	r7, sp, #0
 8011a12:	6078      	str	r0, [r7, #4]
 8011a14:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011a16:	f7ff f987 	bl	8010d28 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011a1a:	f107 0308 	add.w	r3, r7, #8
 8011a1e:	4618      	mov	r0, r3
 8011a20:	f000 f866 	bl	8011af0 <prvSampleTimeNow>
 8011a24:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011a26:	68bb      	ldr	r3, [r7, #8]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d130      	bne.n	8011a8e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011a2c:	683b      	ldr	r3, [r7, #0]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d10a      	bne.n	8011a48 <prvProcessTimerOrBlockTask+0x3c>
 8011a32:	687a      	ldr	r2, [r7, #4]
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	429a      	cmp	r2, r3
 8011a38:	d806      	bhi.n	8011a48 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011a3a:	f7ff f983 	bl	8010d44 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011a3e:	68f9      	ldr	r1, [r7, #12]
 8011a40:	6878      	ldr	r0, [r7, #4]
 8011a42:	f7ff ff85 	bl	8011950 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011a46:	e024      	b.n	8011a92 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011a48:	683b      	ldr	r3, [r7, #0]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d008      	beq.n	8011a60 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011a4e:	4b13      	ldr	r3, [pc, #76]	; (8011a9c <prvProcessTimerOrBlockTask+0x90>)
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d101      	bne.n	8011a5c <prvProcessTimerOrBlockTask+0x50>
 8011a58:	2301      	movs	r3, #1
 8011a5a:	e000      	b.n	8011a5e <prvProcessTimerOrBlockTask+0x52>
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011a60:	4b0f      	ldr	r3, [pc, #60]	; (8011aa0 <prvProcessTimerOrBlockTask+0x94>)
 8011a62:	6818      	ldr	r0, [r3, #0]
 8011a64:	687a      	ldr	r2, [r7, #4]
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	1ad3      	subs	r3, r2, r3
 8011a6a:	683a      	ldr	r2, [r7, #0]
 8011a6c:	4619      	mov	r1, r3
 8011a6e:	f7fe fef9 	bl	8010864 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011a72:	f7ff f967 	bl	8010d44 <xTaskResumeAll>
 8011a76:	4603      	mov	r3, r0
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d10a      	bne.n	8011a92 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011a7c:	4b09      	ldr	r3, [pc, #36]	; (8011aa4 <prvProcessTimerOrBlockTask+0x98>)
 8011a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a82:	601a      	str	r2, [r3, #0]
 8011a84:	f3bf 8f4f 	dsb	sy
 8011a88:	f3bf 8f6f 	isb	sy
}
 8011a8c:	e001      	b.n	8011a92 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011a8e:	f7ff f959 	bl	8010d44 <xTaskResumeAll>
}
 8011a92:	bf00      	nop
 8011a94:	3710      	adds	r7, #16
 8011a96:	46bd      	mov	sp, r7
 8011a98:	bd80      	pop	{r7, pc}
 8011a9a:	bf00      	nop
 8011a9c:	24000bb8 	.word	0x24000bb8
 8011aa0:	24000bbc 	.word	0x24000bbc
 8011aa4:	e000ed04 	.word	0xe000ed04

08011aa8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011aa8:	b480      	push	{r7}
 8011aaa:	b085      	sub	sp, #20
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011ab0:	4b0e      	ldr	r3, [pc, #56]	; (8011aec <prvGetNextExpireTime+0x44>)
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d101      	bne.n	8011abe <prvGetNextExpireTime+0x16>
 8011aba:	2201      	movs	r2, #1
 8011abc:	e000      	b.n	8011ac0 <prvGetNextExpireTime+0x18>
 8011abe:	2200      	movs	r2, #0
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d105      	bne.n	8011ad8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011acc:	4b07      	ldr	r3, [pc, #28]	; (8011aec <prvGetNextExpireTime+0x44>)
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	68db      	ldr	r3, [r3, #12]
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	60fb      	str	r3, [r7, #12]
 8011ad6:	e001      	b.n	8011adc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011ad8:	2300      	movs	r3, #0
 8011ada:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011adc:	68fb      	ldr	r3, [r7, #12]
}
 8011ade:	4618      	mov	r0, r3
 8011ae0:	3714      	adds	r7, #20
 8011ae2:	46bd      	mov	sp, r7
 8011ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae8:	4770      	bx	lr
 8011aea:	bf00      	nop
 8011aec:	24000bb4 	.word	0x24000bb4

08011af0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011af0:	b580      	push	{r7, lr}
 8011af2:	b084      	sub	sp, #16
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011af8:	f7ff f9c0 	bl	8010e7c <xTaskGetTickCount>
 8011afc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8011afe:	4b0b      	ldr	r3, [pc, #44]	; (8011b2c <prvSampleTimeNow+0x3c>)
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	68fa      	ldr	r2, [r7, #12]
 8011b04:	429a      	cmp	r2, r3
 8011b06:	d205      	bcs.n	8011b14 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011b08:	f000 f936 	bl	8011d78 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	2201      	movs	r2, #1
 8011b10:	601a      	str	r2, [r3, #0]
 8011b12:	e002      	b.n	8011b1a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	2200      	movs	r2, #0
 8011b18:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8011b1a:	4a04      	ldr	r2, [pc, #16]	; (8011b2c <prvSampleTimeNow+0x3c>)
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011b20:	68fb      	ldr	r3, [r7, #12]
}
 8011b22:	4618      	mov	r0, r3
 8011b24:	3710      	adds	r7, #16
 8011b26:	46bd      	mov	sp, r7
 8011b28:	bd80      	pop	{r7, pc}
 8011b2a:	bf00      	nop
 8011b2c:	24000bc4 	.word	0x24000bc4

08011b30 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011b30:	b580      	push	{r7, lr}
 8011b32:	b086      	sub	sp, #24
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	60f8      	str	r0, [r7, #12]
 8011b38:	60b9      	str	r1, [r7, #8]
 8011b3a:	607a      	str	r2, [r7, #4]
 8011b3c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011b3e:	2300      	movs	r3, #0
 8011b40:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	68ba      	ldr	r2, [r7, #8]
 8011b46:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	68fa      	ldr	r2, [r7, #12]
 8011b4c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011b4e:	68ba      	ldr	r2, [r7, #8]
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	429a      	cmp	r2, r3
 8011b54:	d812      	bhi.n	8011b7c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011b56:	687a      	ldr	r2, [r7, #4]
 8011b58:	683b      	ldr	r3, [r7, #0]
 8011b5a:	1ad2      	subs	r2, r2, r3
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	699b      	ldr	r3, [r3, #24]
 8011b60:	429a      	cmp	r2, r3
 8011b62:	d302      	bcc.n	8011b6a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011b64:	2301      	movs	r3, #1
 8011b66:	617b      	str	r3, [r7, #20]
 8011b68:	e01b      	b.n	8011ba2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011b6a:	4b10      	ldr	r3, [pc, #64]	; (8011bac <prvInsertTimerInActiveList+0x7c>)
 8011b6c:	681a      	ldr	r2, [r3, #0]
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	3304      	adds	r3, #4
 8011b72:	4619      	mov	r1, r3
 8011b74:	4610      	mov	r0, r2
 8011b76:	f7fe f8a4 	bl	800fcc2 <vListInsert>
 8011b7a:	e012      	b.n	8011ba2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011b7c:	687a      	ldr	r2, [r7, #4]
 8011b7e:	683b      	ldr	r3, [r7, #0]
 8011b80:	429a      	cmp	r2, r3
 8011b82:	d206      	bcs.n	8011b92 <prvInsertTimerInActiveList+0x62>
 8011b84:	68ba      	ldr	r2, [r7, #8]
 8011b86:	683b      	ldr	r3, [r7, #0]
 8011b88:	429a      	cmp	r2, r3
 8011b8a:	d302      	bcc.n	8011b92 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011b8c:	2301      	movs	r3, #1
 8011b8e:	617b      	str	r3, [r7, #20]
 8011b90:	e007      	b.n	8011ba2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011b92:	4b07      	ldr	r3, [pc, #28]	; (8011bb0 <prvInsertTimerInActiveList+0x80>)
 8011b94:	681a      	ldr	r2, [r3, #0]
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	3304      	adds	r3, #4
 8011b9a:	4619      	mov	r1, r3
 8011b9c:	4610      	mov	r0, r2
 8011b9e:	f7fe f890 	bl	800fcc2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011ba2:	697b      	ldr	r3, [r7, #20]
}
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	3718      	adds	r7, #24
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	bd80      	pop	{r7, pc}
 8011bac:	24000bb8 	.word	0x24000bb8
 8011bb0:	24000bb4 	.word	0x24000bb4

08011bb4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011bb4:	b580      	push	{r7, lr}
 8011bb6:	b08e      	sub	sp, #56	; 0x38
 8011bb8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011bba:	e0ca      	b.n	8011d52 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	da18      	bge.n	8011bf4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8011bc2:	1d3b      	adds	r3, r7, #4
 8011bc4:	3304      	adds	r3, #4
 8011bc6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d10a      	bne.n	8011be4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8011bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bd2:	f383 8811 	msr	BASEPRI, r3
 8011bd6:	f3bf 8f6f 	isb	sy
 8011bda:	f3bf 8f4f 	dsb	sy
 8011bde:	61fb      	str	r3, [r7, #28]
}
 8011be0:	bf00      	nop
 8011be2:	e7fe      	b.n	8011be2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011bea:	6850      	ldr	r0, [r2, #4]
 8011bec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011bee:	6892      	ldr	r2, [r2, #8]
 8011bf0:	4611      	mov	r1, r2
 8011bf2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	f2c0 80aa 	blt.w	8011d50 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c02:	695b      	ldr	r3, [r3, #20]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d004      	beq.n	8011c12 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c0a:	3304      	adds	r3, #4
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	f7fe f891 	bl	800fd34 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011c12:	463b      	mov	r3, r7
 8011c14:	4618      	mov	r0, r3
 8011c16:	f7ff ff6b 	bl	8011af0 <prvSampleTimeNow>
 8011c1a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	2b09      	cmp	r3, #9
 8011c20:	f200 8097 	bhi.w	8011d52 <prvProcessReceivedCommands+0x19e>
 8011c24:	a201      	add	r2, pc, #4	; (adr r2, 8011c2c <prvProcessReceivedCommands+0x78>)
 8011c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c2a:	bf00      	nop
 8011c2c:	08011c55 	.word	0x08011c55
 8011c30:	08011c55 	.word	0x08011c55
 8011c34:	08011c55 	.word	0x08011c55
 8011c38:	08011cc9 	.word	0x08011cc9
 8011c3c:	08011cdd 	.word	0x08011cdd
 8011c40:	08011d27 	.word	0x08011d27
 8011c44:	08011c55 	.word	0x08011c55
 8011c48:	08011c55 	.word	0x08011c55
 8011c4c:	08011cc9 	.word	0x08011cc9
 8011c50:	08011cdd 	.word	0x08011cdd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011c5a:	f043 0301 	orr.w	r3, r3, #1
 8011c5e:	b2da      	uxtb	r2, r3
 8011c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011c66:	68ba      	ldr	r2, [r7, #8]
 8011c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c6a:	699b      	ldr	r3, [r3, #24]
 8011c6c:	18d1      	adds	r1, r2, r3
 8011c6e:	68bb      	ldr	r3, [r7, #8]
 8011c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011c74:	f7ff ff5c 	bl	8011b30 <prvInsertTimerInActiveList>
 8011c78:	4603      	mov	r3, r0
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d069      	beq.n	8011d52 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c80:	6a1b      	ldr	r3, [r3, #32]
 8011c82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011c84:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011c8c:	f003 0304 	and.w	r3, r3, #4
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d05e      	beq.n	8011d52 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011c94:	68ba      	ldr	r2, [r7, #8]
 8011c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c98:	699b      	ldr	r3, [r3, #24]
 8011c9a:	441a      	add	r2, r3
 8011c9c:	2300      	movs	r3, #0
 8011c9e:	9300      	str	r3, [sp, #0]
 8011ca0:	2300      	movs	r3, #0
 8011ca2:	2100      	movs	r1, #0
 8011ca4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011ca6:	f7ff fe05 	bl	80118b4 <xTimerGenericCommand>
 8011caa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011cac:	6a3b      	ldr	r3, [r7, #32]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d14f      	bne.n	8011d52 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8011cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cb6:	f383 8811 	msr	BASEPRI, r3
 8011cba:	f3bf 8f6f 	isb	sy
 8011cbe:	f3bf 8f4f 	dsb	sy
 8011cc2:	61bb      	str	r3, [r7, #24]
}
 8011cc4:	bf00      	nop
 8011cc6:	e7fe      	b.n	8011cc6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011cce:	f023 0301 	bic.w	r3, r3, #1
 8011cd2:	b2da      	uxtb	r2, r3
 8011cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8011cda:	e03a      	b.n	8011d52 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011ce2:	f043 0301 	orr.w	r3, r3, #1
 8011ce6:	b2da      	uxtb	r2, r3
 8011ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011cee:	68ba      	ldr	r2, [r7, #8]
 8011cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cf2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cf6:	699b      	ldr	r3, [r3, #24]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d10a      	bne.n	8011d12 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8011cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d00:	f383 8811 	msr	BASEPRI, r3
 8011d04:	f3bf 8f6f 	isb	sy
 8011d08:	f3bf 8f4f 	dsb	sy
 8011d0c:	617b      	str	r3, [r7, #20]
}
 8011d0e:	bf00      	nop
 8011d10:	e7fe      	b.n	8011d10 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d14:	699a      	ldr	r2, [r3, #24]
 8011d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d18:	18d1      	adds	r1, r2, r3
 8011d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011d20:	f7ff ff06 	bl	8011b30 <prvInsertTimerInActiveList>
					break;
 8011d24:	e015      	b.n	8011d52 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011d2c:	f003 0302 	and.w	r3, r3, #2
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d103      	bne.n	8011d3c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8011d34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011d36:	f000 fbdb 	bl	80124f0 <vPortFree>
 8011d3a:	e00a      	b.n	8011d52 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011d42:	f023 0301 	bic.w	r3, r3, #1
 8011d46:	b2da      	uxtb	r2, r3
 8011d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011d4e:	e000      	b.n	8011d52 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8011d50:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011d52:	4b08      	ldr	r3, [pc, #32]	; (8011d74 <prvProcessReceivedCommands+0x1c0>)
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	1d39      	adds	r1, r7, #4
 8011d58:	2200      	movs	r2, #0
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	f7fe fae8 	bl	8010330 <xQueueReceive>
 8011d60:	4603      	mov	r3, r0
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	f47f af2a 	bne.w	8011bbc <prvProcessReceivedCommands+0x8>
	}
}
 8011d68:	bf00      	nop
 8011d6a:	bf00      	nop
 8011d6c:	3730      	adds	r7, #48	; 0x30
 8011d6e:	46bd      	mov	sp, r7
 8011d70:	bd80      	pop	{r7, pc}
 8011d72:	bf00      	nop
 8011d74:	24000bbc 	.word	0x24000bbc

08011d78 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011d78:	b580      	push	{r7, lr}
 8011d7a:	b088      	sub	sp, #32
 8011d7c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011d7e:	e048      	b.n	8011e12 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011d80:	4b2d      	ldr	r3, [pc, #180]	; (8011e38 <prvSwitchTimerLists+0xc0>)
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	68db      	ldr	r3, [r3, #12]
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011d8a:	4b2b      	ldr	r3, [pc, #172]	; (8011e38 <prvSwitchTimerLists+0xc0>)
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	68db      	ldr	r3, [r3, #12]
 8011d90:	68db      	ldr	r3, [r3, #12]
 8011d92:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	3304      	adds	r3, #4
 8011d98:	4618      	mov	r0, r3
 8011d9a:	f7fd ffcb 	bl	800fd34 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	6a1b      	ldr	r3, [r3, #32]
 8011da2:	68f8      	ldr	r0, [r7, #12]
 8011da4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011dac:	f003 0304 	and.w	r3, r3, #4
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d02e      	beq.n	8011e12 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	699b      	ldr	r3, [r3, #24]
 8011db8:	693a      	ldr	r2, [r7, #16]
 8011dba:	4413      	add	r3, r2
 8011dbc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011dbe:	68ba      	ldr	r2, [r7, #8]
 8011dc0:	693b      	ldr	r3, [r7, #16]
 8011dc2:	429a      	cmp	r2, r3
 8011dc4:	d90e      	bls.n	8011de4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	68ba      	ldr	r2, [r7, #8]
 8011dca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	68fa      	ldr	r2, [r7, #12]
 8011dd0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011dd2:	4b19      	ldr	r3, [pc, #100]	; (8011e38 <prvSwitchTimerLists+0xc0>)
 8011dd4:	681a      	ldr	r2, [r3, #0]
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	3304      	adds	r3, #4
 8011dda:	4619      	mov	r1, r3
 8011ddc:	4610      	mov	r0, r2
 8011dde:	f7fd ff70 	bl	800fcc2 <vListInsert>
 8011de2:	e016      	b.n	8011e12 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011de4:	2300      	movs	r3, #0
 8011de6:	9300      	str	r3, [sp, #0]
 8011de8:	2300      	movs	r3, #0
 8011dea:	693a      	ldr	r2, [r7, #16]
 8011dec:	2100      	movs	r1, #0
 8011dee:	68f8      	ldr	r0, [r7, #12]
 8011df0:	f7ff fd60 	bl	80118b4 <xTimerGenericCommand>
 8011df4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d10a      	bne.n	8011e12 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8011dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e00:	f383 8811 	msr	BASEPRI, r3
 8011e04:	f3bf 8f6f 	isb	sy
 8011e08:	f3bf 8f4f 	dsb	sy
 8011e0c:	603b      	str	r3, [r7, #0]
}
 8011e0e:	bf00      	nop
 8011e10:	e7fe      	b.n	8011e10 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011e12:	4b09      	ldr	r3, [pc, #36]	; (8011e38 <prvSwitchTimerLists+0xc0>)
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d1b1      	bne.n	8011d80 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011e1c:	4b06      	ldr	r3, [pc, #24]	; (8011e38 <prvSwitchTimerLists+0xc0>)
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011e22:	4b06      	ldr	r3, [pc, #24]	; (8011e3c <prvSwitchTimerLists+0xc4>)
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	4a04      	ldr	r2, [pc, #16]	; (8011e38 <prvSwitchTimerLists+0xc0>)
 8011e28:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011e2a:	4a04      	ldr	r2, [pc, #16]	; (8011e3c <prvSwitchTimerLists+0xc4>)
 8011e2c:	697b      	ldr	r3, [r7, #20]
 8011e2e:	6013      	str	r3, [r2, #0]
}
 8011e30:	bf00      	nop
 8011e32:	3718      	adds	r7, #24
 8011e34:	46bd      	mov	sp, r7
 8011e36:	bd80      	pop	{r7, pc}
 8011e38:	24000bb4 	.word	0x24000bb4
 8011e3c:	24000bb8 	.word	0x24000bb8

08011e40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011e40:	b580      	push	{r7, lr}
 8011e42:	b082      	sub	sp, #8
 8011e44:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011e46:	f000 f965 	bl	8012114 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011e4a:	4b15      	ldr	r3, [pc, #84]	; (8011ea0 <prvCheckForValidListAndQueue+0x60>)
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d120      	bne.n	8011e94 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011e52:	4814      	ldr	r0, [pc, #80]	; (8011ea4 <prvCheckForValidListAndQueue+0x64>)
 8011e54:	f7fd fee4 	bl	800fc20 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011e58:	4813      	ldr	r0, [pc, #76]	; (8011ea8 <prvCheckForValidListAndQueue+0x68>)
 8011e5a:	f7fd fee1 	bl	800fc20 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011e5e:	4b13      	ldr	r3, [pc, #76]	; (8011eac <prvCheckForValidListAndQueue+0x6c>)
 8011e60:	4a10      	ldr	r2, [pc, #64]	; (8011ea4 <prvCheckForValidListAndQueue+0x64>)
 8011e62:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011e64:	4b12      	ldr	r3, [pc, #72]	; (8011eb0 <prvCheckForValidListAndQueue+0x70>)
 8011e66:	4a10      	ldr	r2, [pc, #64]	; (8011ea8 <prvCheckForValidListAndQueue+0x68>)
 8011e68:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	9300      	str	r3, [sp, #0]
 8011e6e:	4b11      	ldr	r3, [pc, #68]	; (8011eb4 <prvCheckForValidListAndQueue+0x74>)
 8011e70:	4a11      	ldr	r2, [pc, #68]	; (8011eb8 <prvCheckForValidListAndQueue+0x78>)
 8011e72:	2110      	movs	r1, #16
 8011e74:	200a      	movs	r0, #10
 8011e76:	f7fd ffef 	bl	800fe58 <xQueueGenericCreateStatic>
 8011e7a:	4603      	mov	r3, r0
 8011e7c:	4a08      	ldr	r2, [pc, #32]	; (8011ea0 <prvCheckForValidListAndQueue+0x60>)
 8011e7e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011e80:	4b07      	ldr	r3, [pc, #28]	; (8011ea0 <prvCheckForValidListAndQueue+0x60>)
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d005      	beq.n	8011e94 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011e88:	4b05      	ldr	r3, [pc, #20]	; (8011ea0 <prvCheckForValidListAndQueue+0x60>)
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	490b      	ldr	r1, [pc, #44]	; (8011ebc <prvCheckForValidListAndQueue+0x7c>)
 8011e8e:	4618      	mov	r0, r3
 8011e90:	f7fe fcbe 	bl	8010810 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011e94:	f000 f96e 	bl	8012174 <vPortExitCritical>
}
 8011e98:	bf00      	nop
 8011e9a:	46bd      	mov	sp, r7
 8011e9c:	bd80      	pop	{r7, pc}
 8011e9e:	bf00      	nop
 8011ea0:	24000bbc 	.word	0x24000bbc
 8011ea4:	24000b8c 	.word	0x24000b8c
 8011ea8:	24000ba0 	.word	0x24000ba0
 8011eac:	24000bb4 	.word	0x24000bb4
 8011eb0:	24000bb8 	.word	0x24000bb8
 8011eb4:	24000c68 	.word	0x24000c68
 8011eb8:	24000bc8 	.word	0x24000bc8
 8011ebc:	08013f98 	.word	0x08013f98

08011ec0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011ec0:	b480      	push	{r7}
 8011ec2:	b085      	sub	sp, #20
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	60f8      	str	r0, [r7, #12]
 8011ec8:	60b9      	str	r1, [r7, #8]
 8011eca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	3b04      	subs	r3, #4
 8011ed0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011ed8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	3b04      	subs	r3, #4
 8011ede:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011ee0:	68bb      	ldr	r3, [r7, #8]
 8011ee2:	f023 0201 	bic.w	r2, r3, #1
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	3b04      	subs	r3, #4
 8011eee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011ef0:	4a0c      	ldr	r2, [pc, #48]	; (8011f24 <pxPortInitialiseStack+0x64>)
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	3b14      	subs	r3, #20
 8011efa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011efc:	687a      	ldr	r2, [r7, #4]
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	3b04      	subs	r3, #4
 8011f06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	f06f 0202 	mvn.w	r2, #2
 8011f0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	3b20      	subs	r3, #32
 8011f14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011f16:	68fb      	ldr	r3, [r7, #12]
}
 8011f18:	4618      	mov	r0, r3
 8011f1a:	3714      	adds	r7, #20
 8011f1c:	46bd      	mov	sp, r7
 8011f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f22:	4770      	bx	lr
 8011f24:	08011f29 	.word	0x08011f29

08011f28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011f28:	b480      	push	{r7}
 8011f2a:	b085      	sub	sp, #20
 8011f2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011f2e:	2300      	movs	r3, #0
 8011f30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011f32:	4b12      	ldr	r3, [pc, #72]	; (8011f7c <prvTaskExitError+0x54>)
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011f3a:	d00a      	beq.n	8011f52 <prvTaskExitError+0x2a>
	__asm volatile
 8011f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f40:	f383 8811 	msr	BASEPRI, r3
 8011f44:	f3bf 8f6f 	isb	sy
 8011f48:	f3bf 8f4f 	dsb	sy
 8011f4c:	60fb      	str	r3, [r7, #12]
}
 8011f4e:	bf00      	nop
 8011f50:	e7fe      	b.n	8011f50 <prvTaskExitError+0x28>
	__asm volatile
 8011f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f56:	f383 8811 	msr	BASEPRI, r3
 8011f5a:	f3bf 8f6f 	isb	sy
 8011f5e:	f3bf 8f4f 	dsb	sy
 8011f62:	60bb      	str	r3, [r7, #8]
}
 8011f64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011f66:	bf00      	nop
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d0fc      	beq.n	8011f68 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011f6e:	bf00      	nop
 8011f70:	bf00      	nop
 8011f72:	3714      	adds	r7, #20
 8011f74:	46bd      	mov	sp, r7
 8011f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f7a:	4770      	bx	lr
 8011f7c:	24000030 	.word	0x24000030

08011f80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011f80:	4b07      	ldr	r3, [pc, #28]	; (8011fa0 <pxCurrentTCBConst2>)
 8011f82:	6819      	ldr	r1, [r3, #0]
 8011f84:	6808      	ldr	r0, [r1, #0]
 8011f86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f8a:	f380 8809 	msr	PSP, r0
 8011f8e:	f3bf 8f6f 	isb	sy
 8011f92:	f04f 0000 	mov.w	r0, #0
 8011f96:	f380 8811 	msr	BASEPRI, r0
 8011f9a:	4770      	bx	lr
 8011f9c:	f3af 8000 	nop.w

08011fa0 <pxCurrentTCBConst2>:
 8011fa0:	24000a60 	.word	0x24000a60
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011fa4:	bf00      	nop
 8011fa6:	bf00      	nop

08011fa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011fa8:	4808      	ldr	r0, [pc, #32]	; (8011fcc <prvPortStartFirstTask+0x24>)
 8011faa:	6800      	ldr	r0, [r0, #0]
 8011fac:	6800      	ldr	r0, [r0, #0]
 8011fae:	f380 8808 	msr	MSP, r0
 8011fb2:	f04f 0000 	mov.w	r0, #0
 8011fb6:	f380 8814 	msr	CONTROL, r0
 8011fba:	b662      	cpsie	i
 8011fbc:	b661      	cpsie	f
 8011fbe:	f3bf 8f4f 	dsb	sy
 8011fc2:	f3bf 8f6f 	isb	sy
 8011fc6:	df00      	svc	0
 8011fc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8011fca:	bf00      	nop
 8011fcc:	e000ed08 	.word	0xe000ed08

08011fd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011fd0:	b580      	push	{r7, lr}
 8011fd2:	b086      	sub	sp, #24
 8011fd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011fd6:	4b46      	ldr	r3, [pc, #280]	; (80120f0 <xPortStartScheduler+0x120>)
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	4a46      	ldr	r2, [pc, #280]	; (80120f4 <xPortStartScheduler+0x124>)
 8011fdc:	4293      	cmp	r3, r2
 8011fde:	d10a      	bne.n	8011ff6 <xPortStartScheduler+0x26>
	__asm volatile
 8011fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fe4:	f383 8811 	msr	BASEPRI, r3
 8011fe8:	f3bf 8f6f 	isb	sy
 8011fec:	f3bf 8f4f 	dsb	sy
 8011ff0:	613b      	str	r3, [r7, #16]
}
 8011ff2:	bf00      	nop
 8011ff4:	e7fe      	b.n	8011ff4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011ff6:	4b3e      	ldr	r3, [pc, #248]	; (80120f0 <xPortStartScheduler+0x120>)
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	4a3f      	ldr	r2, [pc, #252]	; (80120f8 <xPortStartScheduler+0x128>)
 8011ffc:	4293      	cmp	r3, r2
 8011ffe:	d10a      	bne.n	8012016 <xPortStartScheduler+0x46>
	__asm volatile
 8012000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012004:	f383 8811 	msr	BASEPRI, r3
 8012008:	f3bf 8f6f 	isb	sy
 801200c:	f3bf 8f4f 	dsb	sy
 8012010:	60fb      	str	r3, [r7, #12]
}
 8012012:	bf00      	nop
 8012014:	e7fe      	b.n	8012014 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012016:	4b39      	ldr	r3, [pc, #228]	; (80120fc <xPortStartScheduler+0x12c>)
 8012018:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801201a:	697b      	ldr	r3, [r7, #20]
 801201c:	781b      	ldrb	r3, [r3, #0]
 801201e:	b2db      	uxtb	r3, r3
 8012020:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012022:	697b      	ldr	r3, [r7, #20]
 8012024:	22ff      	movs	r2, #255	; 0xff
 8012026:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012028:	697b      	ldr	r3, [r7, #20]
 801202a:	781b      	ldrb	r3, [r3, #0]
 801202c:	b2db      	uxtb	r3, r3
 801202e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012030:	78fb      	ldrb	r3, [r7, #3]
 8012032:	b2db      	uxtb	r3, r3
 8012034:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012038:	b2da      	uxtb	r2, r3
 801203a:	4b31      	ldr	r3, [pc, #196]	; (8012100 <xPortStartScheduler+0x130>)
 801203c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801203e:	4b31      	ldr	r3, [pc, #196]	; (8012104 <xPortStartScheduler+0x134>)
 8012040:	2207      	movs	r2, #7
 8012042:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012044:	e009      	b.n	801205a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8012046:	4b2f      	ldr	r3, [pc, #188]	; (8012104 <xPortStartScheduler+0x134>)
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	3b01      	subs	r3, #1
 801204c:	4a2d      	ldr	r2, [pc, #180]	; (8012104 <xPortStartScheduler+0x134>)
 801204e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012050:	78fb      	ldrb	r3, [r7, #3]
 8012052:	b2db      	uxtb	r3, r3
 8012054:	005b      	lsls	r3, r3, #1
 8012056:	b2db      	uxtb	r3, r3
 8012058:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801205a:	78fb      	ldrb	r3, [r7, #3]
 801205c:	b2db      	uxtb	r3, r3
 801205e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012062:	2b80      	cmp	r3, #128	; 0x80
 8012064:	d0ef      	beq.n	8012046 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012066:	4b27      	ldr	r3, [pc, #156]	; (8012104 <xPortStartScheduler+0x134>)
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	f1c3 0307 	rsb	r3, r3, #7
 801206e:	2b04      	cmp	r3, #4
 8012070:	d00a      	beq.n	8012088 <xPortStartScheduler+0xb8>
	__asm volatile
 8012072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012076:	f383 8811 	msr	BASEPRI, r3
 801207a:	f3bf 8f6f 	isb	sy
 801207e:	f3bf 8f4f 	dsb	sy
 8012082:	60bb      	str	r3, [r7, #8]
}
 8012084:	bf00      	nop
 8012086:	e7fe      	b.n	8012086 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012088:	4b1e      	ldr	r3, [pc, #120]	; (8012104 <xPortStartScheduler+0x134>)
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	021b      	lsls	r3, r3, #8
 801208e:	4a1d      	ldr	r2, [pc, #116]	; (8012104 <xPortStartScheduler+0x134>)
 8012090:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012092:	4b1c      	ldr	r3, [pc, #112]	; (8012104 <xPortStartScheduler+0x134>)
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801209a:	4a1a      	ldr	r2, [pc, #104]	; (8012104 <xPortStartScheduler+0x134>)
 801209c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	b2da      	uxtb	r2, r3
 80120a2:	697b      	ldr	r3, [r7, #20]
 80120a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80120a6:	4b18      	ldr	r3, [pc, #96]	; (8012108 <xPortStartScheduler+0x138>)
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	4a17      	ldr	r2, [pc, #92]	; (8012108 <xPortStartScheduler+0x138>)
 80120ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80120b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80120b2:	4b15      	ldr	r3, [pc, #84]	; (8012108 <xPortStartScheduler+0x138>)
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	4a14      	ldr	r2, [pc, #80]	; (8012108 <xPortStartScheduler+0x138>)
 80120b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80120bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80120be:	f000 f8dd 	bl	801227c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80120c2:	4b12      	ldr	r3, [pc, #72]	; (801210c <xPortStartScheduler+0x13c>)
 80120c4:	2200      	movs	r2, #0
 80120c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80120c8:	f000 f8fc 	bl	80122c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80120cc:	4b10      	ldr	r3, [pc, #64]	; (8012110 <xPortStartScheduler+0x140>)
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	4a0f      	ldr	r2, [pc, #60]	; (8012110 <xPortStartScheduler+0x140>)
 80120d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80120d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80120d8:	f7ff ff66 	bl	8011fa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80120dc:	f7fe ff96 	bl	801100c <vTaskSwitchContext>
	prvTaskExitError();
 80120e0:	f7ff ff22 	bl	8011f28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80120e4:	2300      	movs	r3, #0
}
 80120e6:	4618      	mov	r0, r3
 80120e8:	3718      	adds	r7, #24
 80120ea:	46bd      	mov	sp, r7
 80120ec:	bd80      	pop	{r7, pc}
 80120ee:	bf00      	nop
 80120f0:	e000ed00 	.word	0xe000ed00
 80120f4:	410fc271 	.word	0x410fc271
 80120f8:	410fc270 	.word	0x410fc270
 80120fc:	e000e400 	.word	0xe000e400
 8012100:	24000cb0 	.word	0x24000cb0
 8012104:	24000cb4 	.word	0x24000cb4
 8012108:	e000ed20 	.word	0xe000ed20
 801210c:	24000030 	.word	0x24000030
 8012110:	e000ef34 	.word	0xe000ef34

08012114 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012114:	b480      	push	{r7}
 8012116:	b083      	sub	sp, #12
 8012118:	af00      	add	r7, sp, #0
	__asm volatile
 801211a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801211e:	f383 8811 	msr	BASEPRI, r3
 8012122:	f3bf 8f6f 	isb	sy
 8012126:	f3bf 8f4f 	dsb	sy
 801212a:	607b      	str	r3, [r7, #4]
}
 801212c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801212e:	4b0f      	ldr	r3, [pc, #60]	; (801216c <vPortEnterCritical+0x58>)
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	3301      	adds	r3, #1
 8012134:	4a0d      	ldr	r2, [pc, #52]	; (801216c <vPortEnterCritical+0x58>)
 8012136:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012138:	4b0c      	ldr	r3, [pc, #48]	; (801216c <vPortEnterCritical+0x58>)
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	2b01      	cmp	r3, #1
 801213e:	d10f      	bne.n	8012160 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012140:	4b0b      	ldr	r3, [pc, #44]	; (8012170 <vPortEnterCritical+0x5c>)
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	b2db      	uxtb	r3, r3
 8012146:	2b00      	cmp	r3, #0
 8012148:	d00a      	beq.n	8012160 <vPortEnterCritical+0x4c>
	__asm volatile
 801214a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801214e:	f383 8811 	msr	BASEPRI, r3
 8012152:	f3bf 8f6f 	isb	sy
 8012156:	f3bf 8f4f 	dsb	sy
 801215a:	603b      	str	r3, [r7, #0]
}
 801215c:	bf00      	nop
 801215e:	e7fe      	b.n	801215e <vPortEnterCritical+0x4a>
	}
}
 8012160:	bf00      	nop
 8012162:	370c      	adds	r7, #12
 8012164:	46bd      	mov	sp, r7
 8012166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801216a:	4770      	bx	lr
 801216c:	24000030 	.word	0x24000030
 8012170:	e000ed04 	.word	0xe000ed04

08012174 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012174:	b480      	push	{r7}
 8012176:	b083      	sub	sp, #12
 8012178:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801217a:	4b12      	ldr	r3, [pc, #72]	; (80121c4 <vPortExitCritical+0x50>)
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d10a      	bne.n	8012198 <vPortExitCritical+0x24>
	__asm volatile
 8012182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012186:	f383 8811 	msr	BASEPRI, r3
 801218a:	f3bf 8f6f 	isb	sy
 801218e:	f3bf 8f4f 	dsb	sy
 8012192:	607b      	str	r3, [r7, #4]
}
 8012194:	bf00      	nop
 8012196:	e7fe      	b.n	8012196 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012198:	4b0a      	ldr	r3, [pc, #40]	; (80121c4 <vPortExitCritical+0x50>)
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	3b01      	subs	r3, #1
 801219e:	4a09      	ldr	r2, [pc, #36]	; (80121c4 <vPortExitCritical+0x50>)
 80121a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80121a2:	4b08      	ldr	r3, [pc, #32]	; (80121c4 <vPortExitCritical+0x50>)
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d105      	bne.n	80121b6 <vPortExitCritical+0x42>
 80121aa:	2300      	movs	r3, #0
 80121ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80121ae:	683b      	ldr	r3, [r7, #0]
 80121b0:	f383 8811 	msr	BASEPRI, r3
}
 80121b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80121b6:	bf00      	nop
 80121b8:	370c      	adds	r7, #12
 80121ba:	46bd      	mov	sp, r7
 80121bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c0:	4770      	bx	lr
 80121c2:	bf00      	nop
 80121c4:	24000030 	.word	0x24000030
	...

080121d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80121d0:	f3ef 8009 	mrs	r0, PSP
 80121d4:	f3bf 8f6f 	isb	sy
 80121d8:	4b15      	ldr	r3, [pc, #84]	; (8012230 <pxCurrentTCBConst>)
 80121da:	681a      	ldr	r2, [r3, #0]
 80121dc:	f01e 0f10 	tst.w	lr, #16
 80121e0:	bf08      	it	eq
 80121e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80121e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121ea:	6010      	str	r0, [r2, #0]
 80121ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80121f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80121f4:	f380 8811 	msr	BASEPRI, r0
 80121f8:	f3bf 8f4f 	dsb	sy
 80121fc:	f3bf 8f6f 	isb	sy
 8012200:	f7fe ff04 	bl	801100c <vTaskSwitchContext>
 8012204:	f04f 0000 	mov.w	r0, #0
 8012208:	f380 8811 	msr	BASEPRI, r0
 801220c:	bc09      	pop	{r0, r3}
 801220e:	6819      	ldr	r1, [r3, #0]
 8012210:	6808      	ldr	r0, [r1, #0]
 8012212:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012216:	f01e 0f10 	tst.w	lr, #16
 801221a:	bf08      	it	eq
 801221c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012220:	f380 8809 	msr	PSP, r0
 8012224:	f3bf 8f6f 	isb	sy
 8012228:	4770      	bx	lr
 801222a:	bf00      	nop
 801222c:	f3af 8000 	nop.w

08012230 <pxCurrentTCBConst>:
 8012230:	24000a60 	.word	0x24000a60
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012234:	bf00      	nop
 8012236:	bf00      	nop

08012238 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012238:	b580      	push	{r7, lr}
 801223a:	b082      	sub	sp, #8
 801223c:	af00      	add	r7, sp, #0
	__asm volatile
 801223e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012242:	f383 8811 	msr	BASEPRI, r3
 8012246:	f3bf 8f6f 	isb	sy
 801224a:	f3bf 8f4f 	dsb	sy
 801224e:	607b      	str	r3, [r7, #4]
}
 8012250:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012252:	f7fe fe23 	bl	8010e9c <xTaskIncrementTick>
 8012256:	4603      	mov	r3, r0
 8012258:	2b00      	cmp	r3, #0
 801225a:	d003      	beq.n	8012264 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801225c:	4b06      	ldr	r3, [pc, #24]	; (8012278 <SysTick_Handler+0x40>)
 801225e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012262:	601a      	str	r2, [r3, #0]
 8012264:	2300      	movs	r3, #0
 8012266:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012268:	683b      	ldr	r3, [r7, #0]
 801226a:	f383 8811 	msr	BASEPRI, r3
}
 801226e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012270:	bf00      	nop
 8012272:	3708      	adds	r7, #8
 8012274:	46bd      	mov	sp, r7
 8012276:	bd80      	pop	{r7, pc}
 8012278:	e000ed04 	.word	0xe000ed04

0801227c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801227c:	b480      	push	{r7}
 801227e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012280:	4b0b      	ldr	r3, [pc, #44]	; (80122b0 <vPortSetupTimerInterrupt+0x34>)
 8012282:	2200      	movs	r2, #0
 8012284:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012286:	4b0b      	ldr	r3, [pc, #44]	; (80122b4 <vPortSetupTimerInterrupt+0x38>)
 8012288:	2200      	movs	r2, #0
 801228a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801228c:	4b0a      	ldr	r3, [pc, #40]	; (80122b8 <vPortSetupTimerInterrupt+0x3c>)
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	4a0a      	ldr	r2, [pc, #40]	; (80122bc <vPortSetupTimerInterrupt+0x40>)
 8012292:	fba2 2303 	umull	r2, r3, r2, r3
 8012296:	099b      	lsrs	r3, r3, #6
 8012298:	4a09      	ldr	r2, [pc, #36]	; (80122c0 <vPortSetupTimerInterrupt+0x44>)
 801229a:	3b01      	subs	r3, #1
 801229c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801229e:	4b04      	ldr	r3, [pc, #16]	; (80122b0 <vPortSetupTimerInterrupt+0x34>)
 80122a0:	2207      	movs	r2, #7
 80122a2:	601a      	str	r2, [r3, #0]
}
 80122a4:	bf00      	nop
 80122a6:	46bd      	mov	sp, r7
 80122a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ac:	4770      	bx	lr
 80122ae:	bf00      	nop
 80122b0:	e000e010 	.word	0xe000e010
 80122b4:	e000e018 	.word	0xe000e018
 80122b8:	24000000 	.word	0x24000000
 80122bc:	10624dd3 	.word	0x10624dd3
 80122c0:	e000e014 	.word	0xe000e014

080122c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80122c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80122d4 <vPortEnableVFP+0x10>
 80122c8:	6801      	ldr	r1, [r0, #0]
 80122ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80122ce:	6001      	str	r1, [r0, #0]
 80122d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80122d2:	bf00      	nop
 80122d4:	e000ed88 	.word	0xe000ed88

080122d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80122d8:	b480      	push	{r7}
 80122da:	b085      	sub	sp, #20
 80122dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80122de:	f3ef 8305 	mrs	r3, IPSR
 80122e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	2b0f      	cmp	r3, #15
 80122e8:	d914      	bls.n	8012314 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80122ea:	4a17      	ldr	r2, [pc, #92]	; (8012348 <vPortValidateInterruptPriority+0x70>)
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	4413      	add	r3, r2
 80122f0:	781b      	ldrb	r3, [r3, #0]
 80122f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80122f4:	4b15      	ldr	r3, [pc, #84]	; (801234c <vPortValidateInterruptPriority+0x74>)
 80122f6:	781b      	ldrb	r3, [r3, #0]
 80122f8:	7afa      	ldrb	r2, [r7, #11]
 80122fa:	429a      	cmp	r2, r3
 80122fc:	d20a      	bcs.n	8012314 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80122fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012302:	f383 8811 	msr	BASEPRI, r3
 8012306:	f3bf 8f6f 	isb	sy
 801230a:	f3bf 8f4f 	dsb	sy
 801230e:	607b      	str	r3, [r7, #4]
}
 8012310:	bf00      	nop
 8012312:	e7fe      	b.n	8012312 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012314:	4b0e      	ldr	r3, [pc, #56]	; (8012350 <vPortValidateInterruptPriority+0x78>)
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801231c:	4b0d      	ldr	r3, [pc, #52]	; (8012354 <vPortValidateInterruptPriority+0x7c>)
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	429a      	cmp	r2, r3
 8012322:	d90a      	bls.n	801233a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012328:	f383 8811 	msr	BASEPRI, r3
 801232c:	f3bf 8f6f 	isb	sy
 8012330:	f3bf 8f4f 	dsb	sy
 8012334:	603b      	str	r3, [r7, #0]
}
 8012336:	bf00      	nop
 8012338:	e7fe      	b.n	8012338 <vPortValidateInterruptPriority+0x60>
	}
 801233a:	bf00      	nop
 801233c:	3714      	adds	r7, #20
 801233e:	46bd      	mov	sp, r7
 8012340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012344:	4770      	bx	lr
 8012346:	bf00      	nop
 8012348:	e000e3f0 	.word	0xe000e3f0
 801234c:	24000cb0 	.word	0x24000cb0
 8012350:	e000ed0c 	.word	0xe000ed0c
 8012354:	24000cb4 	.word	0x24000cb4

08012358 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012358:	b580      	push	{r7, lr}
 801235a:	b08a      	sub	sp, #40	; 0x28
 801235c:	af00      	add	r7, sp, #0
 801235e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012360:	2300      	movs	r3, #0
 8012362:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012364:	f7fe fce0 	bl	8010d28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012368:	4b5b      	ldr	r3, [pc, #364]	; (80124d8 <pvPortMalloc+0x180>)
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	2b00      	cmp	r3, #0
 801236e:	d101      	bne.n	8012374 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012370:	f000 f920 	bl	80125b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012374:	4b59      	ldr	r3, [pc, #356]	; (80124dc <pvPortMalloc+0x184>)
 8012376:	681a      	ldr	r2, [r3, #0]
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	4013      	ands	r3, r2
 801237c:	2b00      	cmp	r3, #0
 801237e:	f040 8093 	bne.w	80124a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	2b00      	cmp	r3, #0
 8012386:	d01d      	beq.n	80123c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8012388:	2208      	movs	r2, #8
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	4413      	add	r3, r2
 801238e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	f003 0307 	and.w	r3, r3, #7
 8012396:	2b00      	cmp	r3, #0
 8012398:	d014      	beq.n	80123c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	f023 0307 	bic.w	r3, r3, #7
 80123a0:	3308      	adds	r3, #8
 80123a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	f003 0307 	and.w	r3, r3, #7
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d00a      	beq.n	80123c4 <pvPortMalloc+0x6c>
	__asm volatile
 80123ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123b2:	f383 8811 	msr	BASEPRI, r3
 80123b6:	f3bf 8f6f 	isb	sy
 80123ba:	f3bf 8f4f 	dsb	sy
 80123be:	617b      	str	r3, [r7, #20]
}
 80123c0:	bf00      	nop
 80123c2:	e7fe      	b.n	80123c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d06e      	beq.n	80124a8 <pvPortMalloc+0x150>
 80123ca:	4b45      	ldr	r3, [pc, #276]	; (80124e0 <pvPortMalloc+0x188>)
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	687a      	ldr	r2, [r7, #4]
 80123d0:	429a      	cmp	r2, r3
 80123d2:	d869      	bhi.n	80124a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80123d4:	4b43      	ldr	r3, [pc, #268]	; (80124e4 <pvPortMalloc+0x18c>)
 80123d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80123d8:	4b42      	ldr	r3, [pc, #264]	; (80124e4 <pvPortMalloc+0x18c>)
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80123de:	e004      	b.n	80123ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80123e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80123e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80123ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ec:	685b      	ldr	r3, [r3, #4]
 80123ee:	687a      	ldr	r2, [r7, #4]
 80123f0:	429a      	cmp	r2, r3
 80123f2:	d903      	bls.n	80123fc <pvPortMalloc+0xa4>
 80123f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d1f1      	bne.n	80123e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80123fc:	4b36      	ldr	r3, [pc, #216]	; (80124d8 <pvPortMalloc+0x180>)
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012402:	429a      	cmp	r2, r3
 8012404:	d050      	beq.n	80124a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012406:	6a3b      	ldr	r3, [r7, #32]
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	2208      	movs	r2, #8
 801240c:	4413      	add	r3, r2
 801240e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012412:	681a      	ldr	r2, [r3, #0]
 8012414:	6a3b      	ldr	r3, [r7, #32]
 8012416:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801241a:	685a      	ldr	r2, [r3, #4]
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	1ad2      	subs	r2, r2, r3
 8012420:	2308      	movs	r3, #8
 8012422:	005b      	lsls	r3, r3, #1
 8012424:	429a      	cmp	r2, r3
 8012426:	d91f      	bls.n	8012468 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	4413      	add	r3, r2
 801242e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012430:	69bb      	ldr	r3, [r7, #24]
 8012432:	f003 0307 	and.w	r3, r3, #7
 8012436:	2b00      	cmp	r3, #0
 8012438:	d00a      	beq.n	8012450 <pvPortMalloc+0xf8>
	__asm volatile
 801243a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801243e:	f383 8811 	msr	BASEPRI, r3
 8012442:	f3bf 8f6f 	isb	sy
 8012446:	f3bf 8f4f 	dsb	sy
 801244a:	613b      	str	r3, [r7, #16]
}
 801244c:	bf00      	nop
 801244e:	e7fe      	b.n	801244e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012452:	685a      	ldr	r2, [r3, #4]
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	1ad2      	subs	r2, r2, r3
 8012458:	69bb      	ldr	r3, [r7, #24]
 801245a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801245e:	687a      	ldr	r2, [r7, #4]
 8012460:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012462:	69b8      	ldr	r0, [r7, #24]
 8012464:	f000 f908 	bl	8012678 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012468:	4b1d      	ldr	r3, [pc, #116]	; (80124e0 <pvPortMalloc+0x188>)
 801246a:	681a      	ldr	r2, [r3, #0]
 801246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801246e:	685b      	ldr	r3, [r3, #4]
 8012470:	1ad3      	subs	r3, r2, r3
 8012472:	4a1b      	ldr	r2, [pc, #108]	; (80124e0 <pvPortMalloc+0x188>)
 8012474:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012476:	4b1a      	ldr	r3, [pc, #104]	; (80124e0 <pvPortMalloc+0x188>)
 8012478:	681a      	ldr	r2, [r3, #0]
 801247a:	4b1b      	ldr	r3, [pc, #108]	; (80124e8 <pvPortMalloc+0x190>)
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	429a      	cmp	r2, r3
 8012480:	d203      	bcs.n	801248a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012482:	4b17      	ldr	r3, [pc, #92]	; (80124e0 <pvPortMalloc+0x188>)
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	4a18      	ldr	r2, [pc, #96]	; (80124e8 <pvPortMalloc+0x190>)
 8012488:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801248c:	685a      	ldr	r2, [r3, #4]
 801248e:	4b13      	ldr	r3, [pc, #76]	; (80124dc <pvPortMalloc+0x184>)
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	431a      	orrs	r2, r3
 8012494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012496:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801249a:	2200      	movs	r2, #0
 801249c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801249e:	4b13      	ldr	r3, [pc, #76]	; (80124ec <pvPortMalloc+0x194>)
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	3301      	adds	r3, #1
 80124a4:	4a11      	ldr	r2, [pc, #68]	; (80124ec <pvPortMalloc+0x194>)
 80124a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80124a8:	f7fe fc4c 	bl	8010d44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80124ac:	69fb      	ldr	r3, [r7, #28]
 80124ae:	f003 0307 	and.w	r3, r3, #7
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d00a      	beq.n	80124cc <pvPortMalloc+0x174>
	__asm volatile
 80124b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124ba:	f383 8811 	msr	BASEPRI, r3
 80124be:	f3bf 8f6f 	isb	sy
 80124c2:	f3bf 8f4f 	dsb	sy
 80124c6:	60fb      	str	r3, [r7, #12]
}
 80124c8:	bf00      	nop
 80124ca:	e7fe      	b.n	80124ca <pvPortMalloc+0x172>
	return pvReturn;
 80124cc:	69fb      	ldr	r3, [r7, #28]
}
 80124ce:	4618      	mov	r0, r3
 80124d0:	3728      	adds	r7, #40	; 0x28
 80124d2:	46bd      	mov	sp, r7
 80124d4:	bd80      	pop	{r7, pc}
 80124d6:	bf00      	nop
 80124d8:	240048c0 	.word	0x240048c0
 80124dc:	240048d4 	.word	0x240048d4
 80124e0:	240048c4 	.word	0x240048c4
 80124e4:	240048b8 	.word	0x240048b8
 80124e8:	240048c8 	.word	0x240048c8
 80124ec:	240048cc 	.word	0x240048cc

080124f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80124f0:	b580      	push	{r7, lr}
 80124f2:	b086      	sub	sp, #24
 80124f4:	af00      	add	r7, sp, #0
 80124f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d04d      	beq.n	801259e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012502:	2308      	movs	r3, #8
 8012504:	425b      	negs	r3, r3
 8012506:	697a      	ldr	r2, [r7, #20]
 8012508:	4413      	add	r3, r2
 801250a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801250c:	697b      	ldr	r3, [r7, #20]
 801250e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012510:	693b      	ldr	r3, [r7, #16]
 8012512:	685a      	ldr	r2, [r3, #4]
 8012514:	4b24      	ldr	r3, [pc, #144]	; (80125a8 <vPortFree+0xb8>)
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	4013      	ands	r3, r2
 801251a:	2b00      	cmp	r3, #0
 801251c:	d10a      	bne.n	8012534 <vPortFree+0x44>
	__asm volatile
 801251e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012522:	f383 8811 	msr	BASEPRI, r3
 8012526:	f3bf 8f6f 	isb	sy
 801252a:	f3bf 8f4f 	dsb	sy
 801252e:	60fb      	str	r3, [r7, #12]
}
 8012530:	bf00      	nop
 8012532:	e7fe      	b.n	8012532 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012534:	693b      	ldr	r3, [r7, #16]
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	2b00      	cmp	r3, #0
 801253a:	d00a      	beq.n	8012552 <vPortFree+0x62>
	__asm volatile
 801253c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012540:	f383 8811 	msr	BASEPRI, r3
 8012544:	f3bf 8f6f 	isb	sy
 8012548:	f3bf 8f4f 	dsb	sy
 801254c:	60bb      	str	r3, [r7, #8]
}
 801254e:	bf00      	nop
 8012550:	e7fe      	b.n	8012550 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012552:	693b      	ldr	r3, [r7, #16]
 8012554:	685a      	ldr	r2, [r3, #4]
 8012556:	4b14      	ldr	r3, [pc, #80]	; (80125a8 <vPortFree+0xb8>)
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	4013      	ands	r3, r2
 801255c:	2b00      	cmp	r3, #0
 801255e:	d01e      	beq.n	801259e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012560:	693b      	ldr	r3, [r7, #16]
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d11a      	bne.n	801259e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012568:	693b      	ldr	r3, [r7, #16]
 801256a:	685a      	ldr	r2, [r3, #4]
 801256c:	4b0e      	ldr	r3, [pc, #56]	; (80125a8 <vPortFree+0xb8>)
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	43db      	mvns	r3, r3
 8012572:	401a      	ands	r2, r3
 8012574:	693b      	ldr	r3, [r7, #16]
 8012576:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012578:	f7fe fbd6 	bl	8010d28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801257c:	693b      	ldr	r3, [r7, #16]
 801257e:	685a      	ldr	r2, [r3, #4]
 8012580:	4b0a      	ldr	r3, [pc, #40]	; (80125ac <vPortFree+0xbc>)
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	4413      	add	r3, r2
 8012586:	4a09      	ldr	r2, [pc, #36]	; (80125ac <vPortFree+0xbc>)
 8012588:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801258a:	6938      	ldr	r0, [r7, #16]
 801258c:	f000 f874 	bl	8012678 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012590:	4b07      	ldr	r3, [pc, #28]	; (80125b0 <vPortFree+0xc0>)
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	3301      	adds	r3, #1
 8012596:	4a06      	ldr	r2, [pc, #24]	; (80125b0 <vPortFree+0xc0>)
 8012598:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801259a:	f7fe fbd3 	bl	8010d44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801259e:	bf00      	nop
 80125a0:	3718      	adds	r7, #24
 80125a2:	46bd      	mov	sp, r7
 80125a4:	bd80      	pop	{r7, pc}
 80125a6:	bf00      	nop
 80125a8:	240048d4 	.word	0x240048d4
 80125ac:	240048c4 	.word	0x240048c4
 80125b0:	240048d0 	.word	0x240048d0

080125b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80125b4:	b480      	push	{r7}
 80125b6:	b085      	sub	sp, #20
 80125b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80125ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80125be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80125c0:	4b27      	ldr	r3, [pc, #156]	; (8012660 <prvHeapInit+0xac>)
 80125c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	f003 0307 	and.w	r3, r3, #7
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d00c      	beq.n	80125e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	3307      	adds	r3, #7
 80125d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	f023 0307 	bic.w	r3, r3, #7
 80125da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80125dc:	68ba      	ldr	r2, [r7, #8]
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	1ad3      	subs	r3, r2, r3
 80125e2:	4a1f      	ldr	r2, [pc, #124]	; (8012660 <prvHeapInit+0xac>)
 80125e4:	4413      	add	r3, r2
 80125e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80125ec:	4a1d      	ldr	r2, [pc, #116]	; (8012664 <prvHeapInit+0xb0>)
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80125f2:	4b1c      	ldr	r3, [pc, #112]	; (8012664 <prvHeapInit+0xb0>)
 80125f4:	2200      	movs	r2, #0
 80125f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	68ba      	ldr	r2, [r7, #8]
 80125fc:	4413      	add	r3, r2
 80125fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012600:	2208      	movs	r2, #8
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	1a9b      	subs	r3, r3, r2
 8012606:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	f023 0307 	bic.w	r3, r3, #7
 801260e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	4a15      	ldr	r2, [pc, #84]	; (8012668 <prvHeapInit+0xb4>)
 8012614:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012616:	4b14      	ldr	r3, [pc, #80]	; (8012668 <prvHeapInit+0xb4>)
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	2200      	movs	r2, #0
 801261c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801261e:	4b12      	ldr	r3, [pc, #72]	; (8012668 <prvHeapInit+0xb4>)
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	2200      	movs	r2, #0
 8012624:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801262a:	683b      	ldr	r3, [r7, #0]
 801262c:	68fa      	ldr	r2, [r7, #12]
 801262e:	1ad2      	subs	r2, r2, r3
 8012630:	683b      	ldr	r3, [r7, #0]
 8012632:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012634:	4b0c      	ldr	r3, [pc, #48]	; (8012668 <prvHeapInit+0xb4>)
 8012636:	681a      	ldr	r2, [r3, #0]
 8012638:	683b      	ldr	r3, [r7, #0]
 801263a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801263c:	683b      	ldr	r3, [r7, #0]
 801263e:	685b      	ldr	r3, [r3, #4]
 8012640:	4a0a      	ldr	r2, [pc, #40]	; (801266c <prvHeapInit+0xb8>)
 8012642:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012644:	683b      	ldr	r3, [r7, #0]
 8012646:	685b      	ldr	r3, [r3, #4]
 8012648:	4a09      	ldr	r2, [pc, #36]	; (8012670 <prvHeapInit+0xbc>)
 801264a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801264c:	4b09      	ldr	r3, [pc, #36]	; (8012674 <prvHeapInit+0xc0>)
 801264e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012652:	601a      	str	r2, [r3, #0]
}
 8012654:	bf00      	nop
 8012656:	3714      	adds	r7, #20
 8012658:	46bd      	mov	sp, r7
 801265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801265e:	4770      	bx	lr
 8012660:	24000cb8 	.word	0x24000cb8
 8012664:	240048b8 	.word	0x240048b8
 8012668:	240048c0 	.word	0x240048c0
 801266c:	240048c8 	.word	0x240048c8
 8012670:	240048c4 	.word	0x240048c4
 8012674:	240048d4 	.word	0x240048d4

08012678 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012678:	b480      	push	{r7}
 801267a:	b085      	sub	sp, #20
 801267c:	af00      	add	r7, sp, #0
 801267e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012680:	4b28      	ldr	r3, [pc, #160]	; (8012724 <prvInsertBlockIntoFreeList+0xac>)
 8012682:	60fb      	str	r3, [r7, #12]
 8012684:	e002      	b.n	801268c <prvInsertBlockIntoFreeList+0x14>
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	60fb      	str	r3, [r7, #12]
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	687a      	ldr	r2, [r7, #4]
 8012692:	429a      	cmp	r2, r3
 8012694:	d8f7      	bhi.n	8012686 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	685b      	ldr	r3, [r3, #4]
 801269e:	68ba      	ldr	r2, [r7, #8]
 80126a0:	4413      	add	r3, r2
 80126a2:	687a      	ldr	r2, [r7, #4]
 80126a4:	429a      	cmp	r2, r3
 80126a6:	d108      	bne.n	80126ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	685a      	ldr	r2, [r3, #4]
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	685b      	ldr	r3, [r3, #4]
 80126b0:	441a      	add	r2, r3
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	685b      	ldr	r3, [r3, #4]
 80126c2:	68ba      	ldr	r2, [r7, #8]
 80126c4:	441a      	add	r2, r3
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	429a      	cmp	r2, r3
 80126cc:	d118      	bne.n	8012700 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	681a      	ldr	r2, [r3, #0]
 80126d2:	4b15      	ldr	r3, [pc, #84]	; (8012728 <prvInsertBlockIntoFreeList+0xb0>)
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	429a      	cmp	r2, r3
 80126d8:	d00d      	beq.n	80126f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	685a      	ldr	r2, [r3, #4]
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	685b      	ldr	r3, [r3, #4]
 80126e4:	441a      	add	r2, r3
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	681a      	ldr	r2, [r3, #0]
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	601a      	str	r2, [r3, #0]
 80126f4:	e008      	b.n	8012708 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80126f6:	4b0c      	ldr	r3, [pc, #48]	; (8012728 <prvInsertBlockIntoFreeList+0xb0>)
 80126f8:	681a      	ldr	r2, [r3, #0]
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	601a      	str	r2, [r3, #0]
 80126fe:	e003      	b.n	8012708 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	681a      	ldr	r2, [r3, #0]
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012708:	68fa      	ldr	r2, [r7, #12]
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	429a      	cmp	r2, r3
 801270e:	d002      	beq.n	8012716 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	687a      	ldr	r2, [r7, #4]
 8012714:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012716:	bf00      	nop
 8012718:	3714      	adds	r7, #20
 801271a:	46bd      	mov	sp, r7
 801271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012720:	4770      	bx	lr
 8012722:	bf00      	nop
 8012724:	240048b8 	.word	0x240048b8
 8012728:	240048c0 	.word	0x240048c0

0801272c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801272c:	b580      	push	{r7, lr}
 801272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 8012730:	2200      	movs	r2, #0
 8012732:	490e      	ldr	r1, [pc, #56]	; (801276c <MX_USB_HOST_Init+0x40>)
 8012734:	480e      	ldr	r0, [pc, #56]	; (8012770 <MX_USB_HOST_Init+0x44>)
 8012736:	f7fb f9bf 	bl	800dab8 <USBH_Init>
 801273a:	4603      	mov	r3, r0
 801273c:	2b00      	cmp	r3, #0
 801273e:	d001      	beq.n	8012744 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8012740:	f7ee fcfe 	bl	8001140 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_MSC_CLASS) != USBH_OK)
 8012744:	490b      	ldr	r1, [pc, #44]	; (8012774 <MX_USB_HOST_Init+0x48>)
 8012746:	480a      	ldr	r0, [pc, #40]	; (8012770 <MX_USB_HOST_Init+0x44>)
 8012748:	f7fb fa6c 	bl	800dc24 <USBH_RegisterClass>
 801274c:	4603      	mov	r3, r0
 801274e:	2b00      	cmp	r3, #0
 8012750:	d001      	beq.n	8012756 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8012752:	f7ee fcf5 	bl	8001140 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 8012756:	4806      	ldr	r0, [pc, #24]	; (8012770 <MX_USB_HOST_Init+0x44>)
 8012758:	f7fb faf0 	bl	800dd3c <USBH_Start>
 801275c:	4603      	mov	r3, r0
 801275e:	2b00      	cmp	r3, #0
 8012760:	d001      	beq.n	8012766 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8012762:	f7ee fced 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8012766:	bf00      	nop
 8012768:	bd80      	pop	{r7, pc}
 801276a:	bf00      	nop
 801276c:	08012779 	.word	0x08012779
 8012770:	240048d8 	.word	0x240048d8
 8012774:	24000010 	.word	0x24000010

08012778 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8012778:	b580      	push	{r7, lr}
 801277a:	b082      	sub	sp, #8
 801277c:	af00      	add	r7, sp, #0
 801277e:	6078      	str	r0, [r7, #4]
 8012780:	460b      	mov	r3, r1
 8012782:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8012784:	78fb      	ldrb	r3, [r7, #3]
 8012786:	3b01      	subs	r3, #1
 8012788:	2b04      	cmp	r3, #4
 801278a:	d822      	bhi.n	80127d2 <USBH_UserProcess+0x5a>
 801278c:	a201      	add	r2, pc, #4	; (adr r2, 8012794 <USBH_UserProcess+0x1c>)
 801278e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012792:	bf00      	nop
 8012794:	080127d3 	.word	0x080127d3
 8012798:	080127b7 	.word	0x080127b7
 801279c:	080127d3 	.word	0x080127d3
 80127a0:	080127c5 	.word	0x080127c5
 80127a4:	080127a9 	.word	0x080127a9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80127a8:	4b0c      	ldr	r3, [pc, #48]	; (80127dc <USBH_UserProcess+0x64>)
 80127aa:	2203      	movs	r2, #3
 80127ac:	701a      	strb	r2, [r3, #0]
  printf("USB is disconnected!\r\n");
 80127ae:	480c      	ldr	r0, [pc, #48]	; (80127e0 <USBH_UserProcess+0x68>)
 80127b0:	f000 fcd6 	bl	8013160 <puts>
  break;
 80127b4:	e00e      	b.n	80127d4 <USBH_UserProcess+0x5c>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80127b6:	4b09      	ldr	r3, [pc, #36]	; (80127dc <USBH_UserProcess+0x64>)
 80127b8:	2202      	movs	r2, #2
 80127ba:	701a      	strb	r2, [r3, #0]
  printf("USB is ready to use!\r\n");
 80127bc:	4809      	ldr	r0, [pc, #36]	; (80127e4 <USBH_UserProcess+0x6c>)
 80127be:	f000 fccf 	bl	8013160 <puts>
  break;
 80127c2:	e007      	b.n	80127d4 <USBH_UserProcess+0x5c>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80127c4:	4b05      	ldr	r3, [pc, #20]	; (80127dc <USBH_UserProcess+0x64>)
 80127c6:	2201      	movs	r2, #1
 80127c8:	701a      	strb	r2, [r3, #0]
  printf("USB is connected!\r\n");
 80127ca:	4807      	ldr	r0, [pc, #28]	; (80127e8 <USBH_UserProcess+0x70>)
 80127cc:	f000 fcc8 	bl	8013160 <puts>
  break;
 80127d0:	e000      	b.n	80127d4 <USBH_UserProcess+0x5c>

  default:
  break;
 80127d2:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80127d4:	bf00      	nop
 80127d6:	3708      	adds	r7, #8
 80127d8:	46bd      	mov	sp, r7
 80127da:	bd80      	pop	{r7, pc}
 80127dc:	24004cbc 	.word	0x24004cbc
 80127e0:	08013fa0 	.word	0x08013fa0
 80127e4:	08013fb8 	.word	0x08013fb8
 80127e8:	08013fd0 	.word	0x08013fd0

080127ec <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80127ec:	b580      	push	{r7, lr}
 80127ee:	b0b6      	sub	sp, #216	; 0xd8
 80127f0:	af00      	add	r7, sp, #0
 80127f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80127f4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80127f8:	2200      	movs	r2, #0
 80127fa:	601a      	str	r2, [r3, #0]
 80127fc:	605a      	str	r2, [r3, #4]
 80127fe:	609a      	str	r2, [r3, #8]
 8012800:	60da      	str	r2, [r3, #12]
 8012802:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8012804:	f107 0310 	add.w	r3, r7, #16
 8012808:	22b4      	movs	r2, #180	; 0xb4
 801280a:	2100      	movs	r1, #0
 801280c:	4618      	mov	r0, r3
 801280e:	f000 fb39 	bl	8012e84 <memset>
  if(hcdHandle->Instance==USB_OTG_HS)
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	4a33      	ldr	r2, [pc, #204]	; (80128e4 <HAL_HCD_MspInit+0xf8>)
 8012818:	4293      	cmp	r3, r2
 801281a:	d15e      	bne.n	80128da <HAL_HCD_MspInit+0xee>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801281c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012820:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8012822:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8012826:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801282a:	f107 0310 	add.w	r3, r7, #16
 801282e:	4618      	mov	r0, r3
 8012830:	f7f4 fc96 	bl	8007160 <HAL_RCCEx_PeriphCLKConfig>
 8012834:	4603      	mov	r3, r0
 8012836:	2b00      	cmp	r3, #0
 8012838:	d001      	beq.n	801283e <HAL_HCD_MspInit+0x52>
    {
      Error_Handler();
 801283a:	f7ee fc81 	bl	8001140 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801283e:	f7f3 fd03 	bl	8006248 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012842:	4b29      	ldr	r3, [pc, #164]	; (80128e8 <HAL_HCD_MspInit+0xfc>)
 8012844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012848:	4a27      	ldr	r2, [pc, #156]	; (80128e8 <HAL_HCD_MspInit+0xfc>)
 801284a:	f043 0301 	orr.w	r3, r3, #1
 801284e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012852:	4b25      	ldr	r3, [pc, #148]	; (80128e8 <HAL_HCD_MspInit+0xfc>)
 8012854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012858:	f003 0301 	and.w	r3, r3, #1
 801285c:	60fb      	str	r3, [r7, #12]
 801285e:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA9     ------> USB_OTG_HS_VBUS
    PA10     ------> USB_OTG_HS_ID
    */
    GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8012860:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012864:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012868:	2300      	movs	r3, #0
 801286a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801286e:	2300      	movs	r3, #0
 8012870:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8012874:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8012878:	4619      	mov	r1, r3
 801287a:	481c      	ldr	r0, [pc, #112]	; (80128ec <HAL_HCD_MspInit+0x100>)
 801287c:	f7f1 fec4 	bl	8004608 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8012880:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012884:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012888:	2302      	movs	r3, #2
 801288a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801288e:	2300      	movs	r3, #0
 8012890:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012894:	2300      	movs	r3, #0
 8012896:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 801289a:	230a      	movs	r3, #10
 801289c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80128a0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80128a4:	4619      	mov	r1, r3
 80128a6:	4811      	ldr	r0, [pc, #68]	; (80128ec <HAL_HCD_MspInit+0x100>)
 80128a8:	f7f1 feae 	bl	8004608 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80128ac:	4b0e      	ldr	r3, [pc, #56]	; (80128e8 <HAL_HCD_MspInit+0xfc>)
 80128ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80128b2:	4a0d      	ldr	r2, [pc, #52]	; (80128e8 <HAL_HCD_MspInit+0xfc>)
 80128b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80128b8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80128bc:	4b0a      	ldr	r3, [pc, #40]	; (80128e8 <HAL_HCD_MspInit+0xfc>)
 80128be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80128c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80128c6:	60bb      	str	r3, [r7, #8]
 80128c8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 80128ca:	2200      	movs	r2, #0
 80128cc:	2105      	movs	r1, #5
 80128ce:	204d      	movs	r0, #77	; 0x4d
 80128d0:	f7ef f838 	bl	8001944 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80128d4:	204d      	movs	r0, #77	; 0x4d
 80128d6:	f7ef f84f 	bl	8001978 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80128da:	bf00      	nop
 80128dc:	37d8      	adds	r7, #216	; 0xd8
 80128de:	46bd      	mov	sp, r7
 80128e0:	bd80      	pop	{r7, pc}
 80128e2:	bf00      	nop
 80128e4:	40040000 	.word	0x40040000
 80128e8:	58024400 	.word	0x58024400
 80128ec:	58020000 	.word	0x58020000

080128f0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80128f0:	b580      	push	{r7, lr}
 80128f2:	b082      	sub	sp, #8
 80128f4:	af00      	add	r7, sp, #0
 80128f6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80128fe:	4618      	mov	r0, r3
 8012900:	f7fb fed3 	bl	800e6aa <USBH_LL_IncTimer>
}
 8012904:	bf00      	nop
 8012906:	3708      	adds	r7, #8
 8012908:	46bd      	mov	sp, r7
 801290a:	bd80      	pop	{r7, pc}

0801290c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801290c:	b580      	push	{r7, lr}
 801290e:	b082      	sub	sp, #8
 8012910:	af00      	add	r7, sp, #0
 8012912:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801291a:	4618      	mov	r0, r3
 801291c:	f7fb ff17 	bl	800e74e <USBH_LL_Connect>
}
 8012920:	bf00      	nop
 8012922:	3708      	adds	r7, #8
 8012924:	46bd      	mov	sp, r7
 8012926:	bd80      	pop	{r7, pc}

08012928 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8012928:	b580      	push	{r7, lr}
 801292a:	b082      	sub	sp, #8
 801292c:	af00      	add	r7, sp, #0
 801292e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8012936:	4618      	mov	r0, r3
 8012938:	f7fb ff2c 	bl	800e794 <USBH_LL_Disconnect>
}
 801293c:	bf00      	nop
 801293e:	3708      	adds	r7, #8
 8012940:	46bd      	mov	sp, r7
 8012942:	bd80      	pop	{r7, pc}

08012944 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8012944:	b580      	push	{r7, lr}
 8012946:	b082      	sub	sp, #8
 8012948:	af00      	add	r7, sp, #0
 801294a:	6078      	str	r0, [r7, #4]
 801294c:	460b      	mov	r3, r1
 801294e:	70fb      	strb	r3, [r7, #3]
 8012950:	4613      	mov	r3, r2
 8012952:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801295a:	4618      	mov	r0, r3
 801295c:	f7fb ff61 	bl	800e822 <USBH_LL_NotifyURBChange>
#endif
}
 8012960:	bf00      	nop
 8012962:	3708      	adds	r7, #8
 8012964:	46bd      	mov	sp, r7
 8012966:	bd80      	pop	{r7, pc}

08012968 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8012968:	b580      	push	{r7, lr}
 801296a:	b082      	sub	sp, #8
 801296c:	af00      	add	r7, sp, #0
 801296e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8012976:	4618      	mov	r0, r3
 8012978:	f7fb fec1 	bl	800e6fe <USBH_LL_PortEnabled>
}
 801297c:	bf00      	nop
 801297e:	3708      	adds	r7, #8
 8012980:	46bd      	mov	sp, r7
 8012982:	bd80      	pop	{r7, pc}

08012984 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8012984:	b580      	push	{r7, lr}
 8012986:	b082      	sub	sp, #8
 8012988:	af00      	add	r7, sp, #0
 801298a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8012992:	4618      	mov	r0, r3
 8012994:	f7fb fecd 	bl	800e732 <USBH_LL_PortDisabled>
}
 8012998:	bf00      	nop
 801299a:	3708      	adds	r7, #8
 801299c:	46bd      	mov	sp, r7
 801299e:	bd80      	pop	{r7, pc}

080129a0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80129a0:	b580      	push	{r7, lr}
 80129a2:	b082      	sub	sp, #8
 80129a4:	af00      	add	r7, sp, #0
 80129a6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d12f      	bne.n	8012a12 <USBH_LL_Init+0x72>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 80129b2:	4a1a      	ldr	r2, [pc, #104]	; (8012a1c <USBH_LL_Init+0x7c>)
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	4a17      	ldr	r2, [pc, #92]	; (8012a1c <USBH_LL_Init+0x7c>)
 80129be:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80129c2:	4b16      	ldr	r3, [pc, #88]	; (8012a1c <USBH_LL_Init+0x7c>)
 80129c4:	4a16      	ldr	r2, [pc, #88]	; (8012a20 <USBH_LL_Init+0x80>)
 80129c6:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 16;
 80129c8:	4b14      	ldr	r3, [pc, #80]	; (8012a1c <USBH_LL_Init+0x7c>)
 80129ca:	2210      	movs	r2, #16
 80129cc:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 80129ce:	4b13      	ldr	r3, [pc, #76]	; (8012a1c <USBH_LL_Init+0x7c>)
 80129d0:	2201      	movs	r2, #1
 80129d2:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80129d4:	4b11      	ldr	r3, [pc, #68]	; (8012a1c <USBH_LL_Init+0x7c>)
 80129d6:	2200      	movs	r2, #0
 80129d8:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80129da:	4b10      	ldr	r3, [pc, #64]	; (8012a1c <USBH_LL_Init+0x7c>)
 80129dc:	2202      	movs	r2, #2
 80129de:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80129e0:	4b0e      	ldr	r3, [pc, #56]	; (8012a1c <USBH_LL_Init+0x7c>)
 80129e2:	2200      	movs	r2, #0
 80129e4:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80129e6:	4b0d      	ldr	r3, [pc, #52]	; (8012a1c <USBH_LL_Init+0x7c>)
 80129e8:	2200      	movs	r2, #0
 80129ea:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80129ec:	4b0b      	ldr	r3, [pc, #44]	; (8012a1c <USBH_LL_Init+0x7c>)
 80129ee:	2200      	movs	r2, #0
 80129f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 80129f2:	480a      	ldr	r0, [pc, #40]	; (8012a1c <USBH_LL_Init+0x7c>)
 80129f4:	f7f1 ffe3 	bl	80049be <HAL_HCD_Init>
 80129f8:	4603      	mov	r3, r0
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d001      	beq.n	8012a02 <USBH_LL_Init+0x62>
  {
    Error_Handler( );
 80129fe:	f7ee fb9f 	bl	8001140 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 8012a02:	4806      	ldr	r0, [pc, #24]	; (8012a1c <USBH_LL_Init+0x7c>)
 8012a04:	f7f2 fbc7 	bl	8005196 <HAL_HCD_GetCurrentFrame>
 8012a08:	4603      	mov	r3, r0
 8012a0a:	4619      	mov	r1, r3
 8012a0c:	6878      	ldr	r0, [r7, #4]
 8012a0e:	f7fb fe3d 	bl	800e68c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8012a12:	2300      	movs	r3, #0
}
 8012a14:	4618      	mov	r0, r3
 8012a16:	3708      	adds	r7, #8
 8012a18:	46bd      	mov	sp, r7
 8012a1a:	bd80      	pop	{r7, pc}
 8012a1c:	24004cc0 	.word	0x24004cc0
 8012a20:	40040000 	.word	0x40040000

08012a24 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8012a24:	b580      	push	{r7, lr}
 8012a26:	b084      	sub	sp, #16
 8012a28:	af00      	add	r7, sp, #0
 8012a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012a2c:	2300      	movs	r3, #0
 8012a2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012a30:	2300      	movs	r3, #0
 8012a32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	f7f2 fb35 	bl	80050aa <HAL_HCD_Start>
 8012a40:	4603      	mov	r3, r0
 8012a42:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012a44:	7bfb      	ldrb	r3, [r7, #15]
 8012a46:	4618      	mov	r0, r3
 8012a48:	f000 f98c 	bl	8012d64 <USBH_Get_USB_Status>
 8012a4c:	4603      	mov	r3, r0
 8012a4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012a50:	7bbb      	ldrb	r3, [r7, #14]
}
 8012a52:	4618      	mov	r0, r3
 8012a54:	3710      	adds	r7, #16
 8012a56:	46bd      	mov	sp, r7
 8012a58:	bd80      	pop	{r7, pc}

08012a5a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8012a5a:	b580      	push	{r7, lr}
 8012a5c:	b084      	sub	sp, #16
 8012a5e:	af00      	add	r7, sp, #0
 8012a60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012a62:	2300      	movs	r3, #0
 8012a64:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012a66:	2300      	movs	r3, #0
 8012a68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012a70:	4618      	mov	r0, r3
 8012a72:	f7f2 fb3d 	bl	80050f0 <HAL_HCD_Stop>
 8012a76:	4603      	mov	r3, r0
 8012a78:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012a7a:	7bfb      	ldrb	r3, [r7, #15]
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	f000 f971 	bl	8012d64 <USBH_Get_USB_Status>
 8012a82:	4603      	mov	r3, r0
 8012a84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012a86:	7bbb      	ldrb	r3, [r7, #14]
}
 8012a88:	4618      	mov	r0, r3
 8012a8a:	3710      	adds	r7, #16
 8012a8c:	46bd      	mov	sp, r7
 8012a8e:	bd80      	pop	{r7, pc}

08012a90 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8012a90:	b580      	push	{r7, lr}
 8012a92:	b084      	sub	sp, #16
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8012a98:	2301      	movs	r3, #1
 8012a9a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012aa2:	4618      	mov	r0, r3
 8012aa4:	f7f2 fb85 	bl	80051b2 <HAL_HCD_GetCurrentSpeed>
 8012aa8:	4603      	mov	r3, r0
 8012aaa:	2b02      	cmp	r3, #2
 8012aac:	d00c      	beq.n	8012ac8 <USBH_LL_GetSpeed+0x38>
 8012aae:	2b02      	cmp	r3, #2
 8012ab0:	d80d      	bhi.n	8012ace <USBH_LL_GetSpeed+0x3e>
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d002      	beq.n	8012abc <USBH_LL_GetSpeed+0x2c>
 8012ab6:	2b01      	cmp	r3, #1
 8012ab8:	d003      	beq.n	8012ac2 <USBH_LL_GetSpeed+0x32>
 8012aba:	e008      	b.n	8012ace <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8012abc:	2300      	movs	r3, #0
 8012abe:	73fb      	strb	r3, [r7, #15]
    break;
 8012ac0:	e008      	b.n	8012ad4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8012ac2:	2301      	movs	r3, #1
 8012ac4:	73fb      	strb	r3, [r7, #15]
    break;
 8012ac6:	e005      	b.n	8012ad4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8012ac8:	2302      	movs	r3, #2
 8012aca:	73fb      	strb	r3, [r7, #15]
    break;
 8012acc:	e002      	b.n	8012ad4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8012ace:	2301      	movs	r3, #1
 8012ad0:	73fb      	strb	r3, [r7, #15]
    break;
 8012ad2:	bf00      	nop
  }
  return  speed;
 8012ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ad6:	4618      	mov	r0, r3
 8012ad8:	3710      	adds	r7, #16
 8012ada:	46bd      	mov	sp, r7
 8012adc:	bd80      	pop	{r7, pc}

08012ade <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8012ade:	b580      	push	{r7, lr}
 8012ae0:	b084      	sub	sp, #16
 8012ae2:	af00      	add	r7, sp, #0
 8012ae4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012ae6:	2300      	movs	r3, #0
 8012ae8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012aea:	2300      	movs	r3, #0
 8012aec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012af4:	4618      	mov	r0, r3
 8012af6:	f7f2 fb18 	bl	800512a <HAL_HCD_ResetPort>
 8012afa:	4603      	mov	r3, r0
 8012afc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012afe:	7bfb      	ldrb	r3, [r7, #15]
 8012b00:	4618      	mov	r0, r3
 8012b02:	f000 f92f 	bl	8012d64 <USBH_Get_USB_Status>
 8012b06:	4603      	mov	r3, r0
 8012b08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012b0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8012b0c:	4618      	mov	r0, r3
 8012b0e:	3710      	adds	r7, #16
 8012b10:	46bd      	mov	sp, r7
 8012b12:	bd80      	pop	{r7, pc}

08012b14 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012b14:	b580      	push	{r7, lr}
 8012b16:	b082      	sub	sp, #8
 8012b18:	af00      	add	r7, sp, #0
 8012b1a:	6078      	str	r0, [r7, #4]
 8012b1c:	460b      	mov	r3, r1
 8012b1e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012b26:	78fa      	ldrb	r2, [r7, #3]
 8012b28:	4611      	mov	r1, r2
 8012b2a:	4618      	mov	r0, r3
 8012b2c:	f7f2 fb1f 	bl	800516e <HAL_HCD_HC_GetXferCount>
 8012b30:	4603      	mov	r3, r0
}
 8012b32:	4618      	mov	r0, r3
 8012b34:	3708      	adds	r7, #8
 8012b36:	46bd      	mov	sp, r7
 8012b38:	bd80      	pop	{r7, pc}

08012b3a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8012b3a:	b590      	push	{r4, r7, lr}
 8012b3c:	b089      	sub	sp, #36	; 0x24
 8012b3e:	af04      	add	r7, sp, #16
 8012b40:	6078      	str	r0, [r7, #4]
 8012b42:	4608      	mov	r0, r1
 8012b44:	4611      	mov	r1, r2
 8012b46:	461a      	mov	r2, r3
 8012b48:	4603      	mov	r3, r0
 8012b4a:	70fb      	strb	r3, [r7, #3]
 8012b4c:	460b      	mov	r3, r1
 8012b4e:	70bb      	strb	r3, [r7, #2]
 8012b50:	4613      	mov	r3, r2
 8012b52:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012b54:	2300      	movs	r3, #0
 8012b56:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012b58:	2300      	movs	r3, #0
 8012b5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8012b62:	787c      	ldrb	r4, [r7, #1]
 8012b64:	78ba      	ldrb	r2, [r7, #2]
 8012b66:	78f9      	ldrb	r1, [r7, #3]
 8012b68:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012b6a:	9302      	str	r3, [sp, #8]
 8012b6c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012b70:	9301      	str	r3, [sp, #4]
 8012b72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012b76:	9300      	str	r3, [sp, #0]
 8012b78:	4623      	mov	r3, r4
 8012b7a:	f7f1 ff82 	bl	8004a82 <HAL_HCD_HC_Init>
 8012b7e:	4603      	mov	r3, r0
 8012b80:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8012b82:	7bfb      	ldrb	r3, [r7, #15]
 8012b84:	4618      	mov	r0, r3
 8012b86:	f000 f8ed 	bl	8012d64 <USBH_Get_USB_Status>
 8012b8a:	4603      	mov	r3, r0
 8012b8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012b8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8012b90:	4618      	mov	r0, r3
 8012b92:	3714      	adds	r7, #20
 8012b94:	46bd      	mov	sp, r7
 8012b96:	bd90      	pop	{r4, r7, pc}

08012b98 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012b98:	b580      	push	{r7, lr}
 8012b9a:	b084      	sub	sp, #16
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	6078      	str	r0, [r7, #4]
 8012ba0:	460b      	mov	r3, r1
 8012ba2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012ba4:	2300      	movs	r3, #0
 8012ba6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012ba8:	2300      	movs	r3, #0
 8012baa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012bb2:	78fa      	ldrb	r2, [r7, #3]
 8012bb4:	4611      	mov	r1, r2
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	f7f1 fff2 	bl	8004ba0 <HAL_HCD_HC_Halt>
 8012bbc:	4603      	mov	r3, r0
 8012bbe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012bc0:	7bfb      	ldrb	r3, [r7, #15]
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	f000 f8ce 	bl	8012d64 <USBH_Get_USB_Status>
 8012bc8:	4603      	mov	r3, r0
 8012bca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012bcc:	7bbb      	ldrb	r3, [r7, #14]
}
 8012bce:	4618      	mov	r0, r3
 8012bd0:	3710      	adds	r7, #16
 8012bd2:	46bd      	mov	sp, r7
 8012bd4:	bd80      	pop	{r7, pc}

08012bd6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8012bd6:	b590      	push	{r4, r7, lr}
 8012bd8:	b089      	sub	sp, #36	; 0x24
 8012bda:	af04      	add	r7, sp, #16
 8012bdc:	6078      	str	r0, [r7, #4]
 8012bde:	4608      	mov	r0, r1
 8012be0:	4611      	mov	r1, r2
 8012be2:	461a      	mov	r2, r3
 8012be4:	4603      	mov	r3, r0
 8012be6:	70fb      	strb	r3, [r7, #3]
 8012be8:	460b      	mov	r3, r1
 8012bea:	70bb      	strb	r3, [r7, #2]
 8012bec:	4613      	mov	r3, r2
 8012bee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012bf0:	2300      	movs	r3, #0
 8012bf2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012bf4:	2300      	movs	r3, #0
 8012bf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8012bfe:	787c      	ldrb	r4, [r7, #1]
 8012c00:	78ba      	ldrb	r2, [r7, #2]
 8012c02:	78f9      	ldrb	r1, [r7, #3]
 8012c04:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012c08:	9303      	str	r3, [sp, #12]
 8012c0a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012c0c:	9302      	str	r3, [sp, #8]
 8012c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c10:	9301      	str	r3, [sp, #4]
 8012c12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012c16:	9300      	str	r3, [sp, #0]
 8012c18:	4623      	mov	r3, r4
 8012c1a:	f7f1 ffe5 	bl	8004be8 <HAL_HCD_HC_SubmitRequest>
 8012c1e:	4603      	mov	r3, r0
 8012c20:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8012c22:	7bfb      	ldrb	r3, [r7, #15]
 8012c24:	4618      	mov	r0, r3
 8012c26:	f000 f89d 	bl	8012d64 <USBH_Get_USB_Status>
 8012c2a:	4603      	mov	r3, r0
 8012c2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012c2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8012c30:	4618      	mov	r0, r3
 8012c32:	3714      	adds	r7, #20
 8012c34:	46bd      	mov	sp, r7
 8012c36:	bd90      	pop	{r4, r7, pc}

08012c38 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012c38:	b580      	push	{r7, lr}
 8012c3a:	b082      	sub	sp, #8
 8012c3c:	af00      	add	r7, sp, #0
 8012c3e:	6078      	str	r0, [r7, #4]
 8012c40:	460b      	mov	r3, r1
 8012c42:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012c4a:	78fa      	ldrb	r2, [r7, #3]
 8012c4c:	4611      	mov	r1, r2
 8012c4e:	4618      	mov	r0, r3
 8012c50:	f7f2 fa79 	bl	8005146 <HAL_HCD_HC_GetURBState>
 8012c54:	4603      	mov	r3, r0
}
 8012c56:	4618      	mov	r0, r3
 8012c58:	3708      	adds	r7, #8
 8012c5a:	46bd      	mov	sp, r7
 8012c5c:	bd80      	pop	{r7, pc}

08012c5e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8012c5e:	b580      	push	{r7, lr}
 8012c60:	b082      	sub	sp, #8
 8012c62:	af00      	add	r7, sp, #0
 8012c64:	6078      	str	r0, [r7, #4]
 8012c66:	460b      	mov	r3, r1
 8012c68:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d103      	bne.n	8012c7c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 8012c74:	78fb      	ldrb	r3, [r7, #3]
 8012c76:	4618      	mov	r0, r3
 8012c78:	f000 f8a0 	bl	8012dbc <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8012c7c:	20c8      	movs	r0, #200	; 0xc8
 8012c7e:	f7ee fd85 	bl	800178c <HAL_Delay>
  return USBH_OK;
 8012c82:	2300      	movs	r3, #0
}
 8012c84:	4618      	mov	r0, r3
 8012c86:	3708      	adds	r7, #8
 8012c88:	46bd      	mov	sp, r7
 8012c8a:	bd80      	pop	{r7, pc}

08012c8c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8012c8c:	b480      	push	{r7}
 8012c8e:	b085      	sub	sp, #20
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	6078      	str	r0, [r7, #4]
 8012c94:	460b      	mov	r3, r1
 8012c96:	70fb      	strb	r3, [r7, #3]
 8012c98:	4613      	mov	r3, r2
 8012c9a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012ca2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8012ca4:	78fb      	ldrb	r3, [r7, #3]
 8012ca6:	68fa      	ldr	r2, [r7, #12]
 8012ca8:	212c      	movs	r1, #44	; 0x2c
 8012caa:	fb01 f303 	mul.w	r3, r1, r3
 8012cae:	4413      	add	r3, r2
 8012cb0:	333b      	adds	r3, #59	; 0x3b
 8012cb2:	781b      	ldrb	r3, [r3, #0]
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d009      	beq.n	8012ccc <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8012cb8:	78fb      	ldrb	r3, [r7, #3]
 8012cba:	68fa      	ldr	r2, [r7, #12]
 8012cbc:	212c      	movs	r1, #44	; 0x2c
 8012cbe:	fb01 f303 	mul.w	r3, r1, r3
 8012cc2:	4413      	add	r3, r2
 8012cc4:	3354      	adds	r3, #84	; 0x54
 8012cc6:	78ba      	ldrb	r2, [r7, #2]
 8012cc8:	701a      	strb	r2, [r3, #0]
 8012cca:	e008      	b.n	8012cde <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8012ccc:	78fb      	ldrb	r3, [r7, #3]
 8012cce:	68fa      	ldr	r2, [r7, #12]
 8012cd0:	212c      	movs	r1, #44	; 0x2c
 8012cd2:	fb01 f303 	mul.w	r3, r1, r3
 8012cd6:	4413      	add	r3, r2
 8012cd8:	3355      	adds	r3, #85	; 0x55
 8012cda:	78ba      	ldrb	r2, [r7, #2]
 8012cdc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8012cde:	2300      	movs	r3, #0
}
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	3714      	adds	r7, #20
 8012ce4:	46bd      	mov	sp, r7
 8012ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cea:	4770      	bx	lr

08012cec <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012cec:	b480      	push	{r7}
 8012cee:	b085      	sub	sp, #20
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	6078      	str	r0, [r7, #4]
 8012cf4:	460b      	mov	r3, r1
 8012cf6:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8012cf8:	2300      	movs	r3, #0
 8012cfa:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012d02:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8012d04:	78fb      	ldrb	r3, [r7, #3]
 8012d06:	68ba      	ldr	r2, [r7, #8]
 8012d08:	212c      	movs	r1, #44	; 0x2c
 8012d0a:	fb01 f303 	mul.w	r3, r1, r3
 8012d0e:	4413      	add	r3, r2
 8012d10:	333b      	adds	r3, #59	; 0x3b
 8012d12:	781b      	ldrb	r3, [r3, #0]
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d009      	beq.n	8012d2c <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8012d18:	78fb      	ldrb	r3, [r7, #3]
 8012d1a:	68ba      	ldr	r2, [r7, #8]
 8012d1c:	212c      	movs	r1, #44	; 0x2c
 8012d1e:	fb01 f303 	mul.w	r3, r1, r3
 8012d22:	4413      	add	r3, r2
 8012d24:	3354      	adds	r3, #84	; 0x54
 8012d26:	781b      	ldrb	r3, [r3, #0]
 8012d28:	73fb      	strb	r3, [r7, #15]
 8012d2a:	e008      	b.n	8012d3e <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8012d2c:	78fb      	ldrb	r3, [r7, #3]
 8012d2e:	68ba      	ldr	r2, [r7, #8]
 8012d30:	212c      	movs	r1, #44	; 0x2c
 8012d32:	fb01 f303 	mul.w	r3, r1, r3
 8012d36:	4413      	add	r3, r2
 8012d38:	3355      	adds	r3, #85	; 0x55
 8012d3a:	781b      	ldrb	r3, [r3, #0]
 8012d3c:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8012d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d40:	4618      	mov	r0, r3
 8012d42:	3714      	adds	r7, #20
 8012d44:	46bd      	mov	sp, r7
 8012d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d4a:	4770      	bx	lr

08012d4c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8012d4c:	b580      	push	{r7, lr}
 8012d4e:	b082      	sub	sp, #8
 8012d50:	af00      	add	r7, sp, #0
 8012d52:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8012d54:	6878      	ldr	r0, [r7, #4]
 8012d56:	f7ee fd19 	bl	800178c <HAL_Delay>
}
 8012d5a:	bf00      	nop
 8012d5c:	3708      	adds	r7, #8
 8012d5e:	46bd      	mov	sp, r7
 8012d60:	bd80      	pop	{r7, pc}
	...

08012d64 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012d64:	b480      	push	{r7}
 8012d66:	b085      	sub	sp, #20
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	4603      	mov	r3, r0
 8012d6c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012d6e:	2300      	movs	r3, #0
 8012d70:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012d72:	79fb      	ldrb	r3, [r7, #7]
 8012d74:	2b03      	cmp	r3, #3
 8012d76:	d817      	bhi.n	8012da8 <USBH_Get_USB_Status+0x44>
 8012d78:	a201      	add	r2, pc, #4	; (adr r2, 8012d80 <USBH_Get_USB_Status+0x1c>)
 8012d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d7e:	bf00      	nop
 8012d80:	08012d91 	.word	0x08012d91
 8012d84:	08012d97 	.word	0x08012d97
 8012d88:	08012d9d 	.word	0x08012d9d
 8012d8c:	08012da3 	.word	0x08012da3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8012d90:	2300      	movs	r3, #0
 8012d92:	73fb      	strb	r3, [r7, #15]
    break;
 8012d94:	e00b      	b.n	8012dae <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8012d96:	2302      	movs	r3, #2
 8012d98:	73fb      	strb	r3, [r7, #15]
    break;
 8012d9a:	e008      	b.n	8012dae <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8012d9c:	2301      	movs	r3, #1
 8012d9e:	73fb      	strb	r3, [r7, #15]
    break;
 8012da0:	e005      	b.n	8012dae <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8012da2:	2302      	movs	r3, #2
 8012da4:	73fb      	strb	r3, [r7, #15]
    break;
 8012da6:	e002      	b.n	8012dae <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8012da8:	2302      	movs	r3, #2
 8012daa:	73fb      	strb	r3, [r7, #15]
    break;
 8012dac:	bf00      	nop
  }
  return usb_status;
 8012dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8012db0:	4618      	mov	r0, r3
 8012db2:	3714      	adds	r7, #20
 8012db4:	46bd      	mov	sp, r7
 8012db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dba:	4770      	bx	lr

08012dbc <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 8012dbc:	b580      	push	{r7, lr}
 8012dbe:	b084      	sub	sp, #16
 8012dc0:	af00      	add	r7, sp, #0
 8012dc2:	4603      	mov	r3, r0
 8012dc4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8012dc6:	79fb      	ldrb	r3, [r7, #7]
 8012dc8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 8012dca:	79fb      	ldrb	r3, [r7, #7]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d102      	bne.n	8012dd6 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8012dd0:	2301      	movs	r3, #1
 8012dd2:	73fb      	strb	r3, [r7, #15]
 8012dd4:	e001      	b.n	8012dda <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8012dd6:	2300      	movs	r3, #0
 8012dd8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_0,(GPIO_PinState)data);
 8012dda:	7bfb      	ldrb	r3, [r7, #15]
 8012ddc:	461a      	mov	r2, r3
 8012dde:	2101      	movs	r1, #1
 8012de0:	4803      	ldr	r0, [pc, #12]	; (8012df0 <MX_DriverVbusHS+0x34>)
 8012de2:	f7f1 fdb9 	bl	8004958 <HAL_GPIO_WritePin>
}
 8012de6:	bf00      	nop
 8012de8:	3710      	adds	r7, #16
 8012dea:	46bd      	mov	sp, r7
 8012dec:	bd80      	pop	{r7, pc}
 8012dee:	bf00      	nop
 8012df0:	58021000 	.word	0x58021000

08012df4 <__errno>:
 8012df4:	4b01      	ldr	r3, [pc, #4]	; (8012dfc <__errno+0x8>)
 8012df6:	6818      	ldr	r0, [r3, #0]
 8012df8:	4770      	bx	lr
 8012dfa:	bf00      	nop
 8012dfc:	24000034 	.word	0x24000034

08012e00 <__libc_init_array>:
 8012e00:	b570      	push	{r4, r5, r6, lr}
 8012e02:	4d0d      	ldr	r5, [pc, #52]	; (8012e38 <__libc_init_array+0x38>)
 8012e04:	4c0d      	ldr	r4, [pc, #52]	; (8012e3c <__libc_init_array+0x3c>)
 8012e06:	1b64      	subs	r4, r4, r5
 8012e08:	10a4      	asrs	r4, r4, #2
 8012e0a:	2600      	movs	r6, #0
 8012e0c:	42a6      	cmp	r6, r4
 8012e0e:	d109      	bne.n	8012e24 <__libc_init_array+0x24>
 8012e10:	4d0b      	ldr	r5, [pc, #44]	; (8012e40 <__libc_init_array+0x40>)
 8012e12:	4c0c      	ldr	r4, [pc, #48]	; (8012e44 <__libc_init_array+0x44>)
 8012e14:	f001 f842 	bl	8013e9c <_init>
 8012e18:	1b64      	subs	r4, r4, r5
 8012e1a:	10a4      	asrs	r4, r4, #2
 8012e1c:	2600      	movs	r6, #0
 8012e1e:	42a6      	cmp	r6, r4
 8012e20:	d105      	bne.n	8012e2e <__libc_init_array+0x2e>
 8012e22:	bd70      	pop	{r4, r5, r6, pc}
 8012e24:	f855 3b04 	ldr.w	r3, [r5], #4
 8012e28:	4798      	blx	r3
 8012e2a:	3601      	adds	r6, #1
 8012e2c:	e7ee      	b.n	8012e0c <__libc_init_array+0xc>
 8012e2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012e32:	4798      	blx	r3
 8012e34:	3601      	adds	r6, #1
 8012e36:	e7f2      	b.n	8012e1e <__libc_init_array+0x1e>
 8012e38:	080140d8 	.word	0x080140d8
 8012e3c:	080140d8 	.word	0x080140d8
 8012e40:	080140d8 	.word	0x080140d8
 8012e44:	080140dc 	.word	0x080140dc

08012e48 <malloc>:
 8012e48:	4b02      	ldr	r3, [pc, #8]	; (8012e54 <malloc+0xc>)
 8012e4a:	4601      	mov	r1, r0
 8012e4c:	6818      	ldr	r0, [r3, #0]
 8012e4e:	f000 b88d 	b.w	8012f6c <_malloc_r>
 8012e52:	bf00      	nop
 8012e54:	24000034 	.word	0x24000034

08012e58 <free>:
 8012e58:	4b02      	ldr	r3, [pc, #8]	; (8012e64 <free+0xc>)
 8012e5a:	4601      	mov	r1, r0
 8012e5c:	6818      	ldr	r0, [r3, #0]
 8012e5e:	f000 b819 	b.w	8012e94 <_free_r>
 8012e62:	bf00      	nop
 8012e64:	24000034 	.word	0x24000034

08012e68 <memcpy>:
 8012e68:	440a      	add	r2, r1
 8012e6a:	4291      	cmp	r1, r2
 8012e6c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8012e70:	d100      	bne.n	8012e74 <memcpy+0xc>
 8012e72:	4770      	bx	lr
 8012e74:	b510      	push	{r4, lr}
 8012e76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012e7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012e7e:	4291      	cmp	r1, r2
 8012e80:	d1f9      	bne.n	8012e76 <memcpy+0xe>
 8012e82:	bd10      	pop	{r4, pc}

08012e84 <memset>:
 8012e84:	4402      	add	r2, r0
 8012e86:	4603      	mov	r3, r0
 8012e88:	4293      	cmp	r3, r2
 8012e8a:	d100      	bne.n	8012e8e <memset+0xa>
 8012e8c:	4770      	bx	lr
 8012e8e:	f803 1b01 	strb.w	r1, [r3], #1
 8012e92:	e7f9      	b.n	8012e88 <memset+0x4>

08012e94 <_free_r>:
 8012e94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012e96:	2900      	cmp	r1, #0
 8012e98:	d044      	beq.n	8012f24 <_free_r+0x90>
 8012e9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012e9e:	9001      	str	r0, [sp, #4]
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	f1a1 0404 	sub.w	r4, r1, #4
 8012ea6:	bfb8      	it	lt
 8012ea8:	18e4      	addlt	r4, r4, r3
 8012eaa:	f000 fc51 	bl	8013750 <__malloc_lock>
 8012eae:	4a1e      	ldr	r2, [pc, #120]	; (8012f28 <_free_r+0x94>)
 8012eb0:	9801      	ldr	r0, [sp, #4]
 8012eb2:	6813      	ldr	r3, [r2, #0]
 8012eb4:	b933      	cbnz	r3, 8012ec4 <_free_r+0x30>
 8012eb6:	6063      	str	r3, [r4, #4]
 8012eb8:	6014      	str	r4, [r2, #0]
 8012eba:	b003      	add	sp, #12
 8012ebc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012ec0:	f000 bc4c 	b.w	801375c <__malloc_unlock>
 8012ec4:	42a3      	cmp	r3, r4
 8012ec6:	d908      	bls.n	8012eda <_free_r+0x46>
 8012ec8:	6825      	ldr	r5, [r4, #0]
 8012eca:	1961      	adds	r1, r4, r5
 8012ecc:	428b      	cmp	r3, r1
 8012ece:	bf01      	itttt	eq
 8012ed0:	6819      	ldreq	r1, [r3, #0]
 8012ed2:	685b      	ldreq	r3, [r3, #4]
 8012ed4:	1949      	addeq	r1, r1, r5
 8012ed6:	6021      	streq	r1, [r4, #0]
 8012ed8:	e7ed      	b.n	8012eb6 <_free_r+0x22>
 8012eda:	461a      	mov	r2, r3
 8012edc:	685b      	ldr	r3, [r3, #4]
 8012ede:	b10b      	cbz	r3, 8012ee4 <_free_r+0x50>
 8012ee0:	42a3      	cmp	r3, r4
 8012ee2:	d9fa      	bls.n	8012eda <_free_r+0x46>
 8012ee4:	6811      	ldr	r1, [r2, #0]
 8012ee6:	1855      	adds	r5, r2, r1
 8012ee8:	42a5      	cmp	r5, r4
 8012eea:	d10b      	bne.n	8012f04 <_free_r+0x70>
 8012eec:	6824      	ldr	r4, [r4, #0]
 8012eee:	4421      	add	r1, r4
 8012ef0:	1854      	adds	r4, r2, r1
 8012ef2:	42a3      	cmp	r3, r4
 8012ef4:	6011      	str	r1, [r2, #0]
 8012ef6:	d1e0      	bne.n	8012eba <_free_r+0x26>
 8012ef8:	681c      	ldr	r4, [r3, #0]
 8012efa:	685b      	ldr	r3, [r3, #4]
 8012efc:	6053      	str	r3, [r2, #4]
 8012efe:	4421      	add	r1, r4
 8012f00:	6011      	str	r1, [r2, #0]
 8012f02:	e7da      	b.n	8012eba <_free_r+0x26>
 8012f04:	d902      	bls.n	8012f0c <_free_r+0x78>
 8012f06:	230c      	movs	r3, #12
 8012f08:	6003      	str	r3, [r0, #0]
 8012f0a:	e7d6      	b.n	8012eba <_free_r+0x26>
 8012f0c:	6825      	ldr	r5, [r4, #0]
 8012f0e:	1961      	adds	r1, r4, r5
 8012f10:	428b      	cmp	r3, r1
 8012f12:	bf04      	itt	eq
 8012f14:	6819      	ldreq	r1, [r3, #0]
 8012f16:	685b      	ldreq	r3, [r3, #4]
 8012f18:	6063      	str	r3, [r4, #4]
 8012f1a:	bf04      	itt	eq
 8012f1c:	1949      	addeq	r1, r1, r5
 8012f1e:	6021      	streq	r1, [r4, #0]
 8012f20:	6054      	str	r4, [r2, #4]
 8012f22:	e7ca      	b.n	8012eba <_free_r+0x26>
 8012f24:	b003      	add	sp, #12
 8012f26:	bd30      	pop	{r4, r5, pc}
 8012f28:	24004fc4 	.word	0x24004fc4

08012f2c <sbrk_aligned>:
 8012f2c:	b570      	push	{r4, r5, r6, lr}
 8012f2e:	4e0e      	ldr	r6, [pc, #56]	; (8012f68 <sbrk_aligned+0x3c>)
 8012f30:	460c      	mov	r4, r1
 8012f32:	6831      	ldr	r1, [r6, #0]
 8012f34:	4605      	mov	r5, r0
 8012f36:	b911      	cbnz	r1, 8012f3e <sbrk_aligned+0x12>
 8012f38:	f000 f91a 	bl	8013170 <_sbrk_r>
 8012f3c:	6030      	str	r0, [r6, #0]
 8012f3e:	4621      	mov	r1, r4
 8012f40:	4628      	mov	r0, r5
 8012f42:	f000 f915 	bl	8013170 <_sbrk_r>
 8012f46:	1c43      	adds	r3, r0, #1
 8012f48:	d00a      	beq.n	8012f60 <sbrk_aligned+0x34>
 8012f4a:	1cc4      	adds	r4, r0, #3
 8012f4c:	f024 0403 	bic.w	r4, r4, #3
 8012f50:	42a0      	cmp	r0, r4
 8012f52:	d007      	beq.n	8012f64 <sbrk_aligned+0x38>
 8012f54:	1a21      	subs	r1, r4, r0
 8012f56:	4628      	mov	r0, r5
 8012f58:	f000 f90a 	bl	8013170 <_sbrk_r>
 8012f5c:	3001      	adds	r0, #1
 8012f5e:	d101      	bne.n	8012f64 <sbrk_aligned+0x38>
 8012f60:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8012f64:	4620      	mov	r0, r4
 8012f66:	bd70      	pop	{r4, r5, r6, pc}
 8012f68:	24004fc8 	.word	0x24004fc8

08012f6c <_malloc_r>:
 8012f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f70:	1ccd      	adds	r5, r1, #3
 8012f72:	f025 0503 	bic.w	r5, r5, #3
 8012f76:	3508      	adds	r5, #8
 8012f78:	2d0c      	cmp	r5, #12
 8012f7a:	bf38      	it	cc
 8012f7c:	250c      	movcc	r5, #12
 8012f7e:	2d00      	cmp	r5, #0
 8012f80:	4607      	mov	r7, r0
 8012f82:	db01      	blt.n	8012f88 <_malloc_r+0x1c>
 8012f84:	42a9      	cmp	r1, r5
 8012f86:	d905      	bls.n	8012f94 <_malloc_r+0x28>
 8012f88:	230c      	movs	r3, #12
 8012f8a:	603b      	str	r3, [r7, #0]
 8012f8c:	2600      	movs	r6, #0
 8012f8e:	4630      	mov	r0, r6
 8012f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f94:	4e2e      	ldr	r6, [pc, #184]	; (8013050 <_malloc_r+0xe4>)
 8012f96:	f000 fbdb 	bl	8013750 <__malloc_lock>
 8012f9a:	6833      	ldr	r3, [r6, #0]
 8012f9c:	461c      	mov	r4, r3
 8012f9e:	bb34      	cbnz	r4, 8012fee <_malloc_r+0x82>
 8012fa0:	4629      	mov	r1, r5
 8012fa2:	4638      	mov	r0, r7
 8012fa4:	f7ff ffc2 	bl	8012f2c <sbrk_aligned>
 8012fa8:	1c43      	adds	r3, r0, #1
 8012faa:	4604      	mov	r4, r0
 8012fac:	d14d      	bne.n	801304a <_malloc_r+0xde>
 8012fae:	6834      	ldr	r4, [r6, #0]
 8012fb0:	4626      	mov	r6, r4
 8012fb2:	2e00      	cmp	r6, #0
 8012fb4:	d140      	bne.n	8013038 <_malloc_r+0xcc>
 8012fb6:	6823      	ldr	r3, [r4, #0]
 8012fb8:	4631      	mov	r1, r6
 8012fba:	4638      	mov	r0, r7
 8012fbc:	eb04 0803 	add.w	r8, r4, r3
 8012fc0:	f000 f8d6 	bl	8013170 <_sbrk_r>
 8012fc4:	4580      	cmp	r8, r0
 8012fc6:	d13a      	bne.n	801303e <_malloc_r+0xd2>
 8012fc8:	6821      	ldr	r1, [r4, #0]
 8012fca:	3503      	adds	r5, #3
 8012fcc:	1a6d      	subs	r5, r5, r1
 8012fce:	f025 0503 	bic.w	r5, r5, #3
 8012fd2:	3508      	adds	r5, #8
 8012fd4:	2d0c      	cmp	r5, #12
 8012fd6:	bf38      	it	cc
 8012fd8:	250c      	movcc	r5, #12
 8012fda:	4629      	mov	r1, r5
 8012fdc:	4638      	mov	r0, r7
 8012fde:	f7ff ffa5 	bl	8012f2c <sbrk_aligned>
 8012fe2:	3001      	adds	r0, #1
 8012fe4:	d02b      	beq.n	801303e <_malloc_r+0xd2>
 8012fe6:	6823      	ldr	r3, [r4, #0]
 8012fe8:	442b      	add	r3, r5
 8012fea:	6023      	str	r3, [r4, #0]
 8012fec:	e00e      	b.n	801300c <_malloc_r+0xa0>
 8012fee:	6822      	ldr	r2, [r4, #0]
 8012ff0:	1b52      	subs	r2, r2, r5
 8012ff2:	d41e      	bmi.n	8013032 <_malloc_r+0xc6>
 8012ff4:	2a0b      	cmp	r2, #11
 8012ff6:	d916      	bls.n	8013026 <_malloc_r+0xba>
 8012ff8:	1961      	adds	r1, r4, r5
 8012ffa:	42a3      	cmp	r3, r4
 8012ffc:	6025      	str	r5, [r4, #0]
 8012ffe:	bf18      	it	ne
 8013000:	6059      	strne	r1, [r3, #4]
 8013002:	6863      	ldr	r3, [r4, #4]
 8013004:	bf08      	it	eq
 8013006:	6031      	streq	r1, [r6, #0]
 8013008:	5162      	str	r2, [r4, r5]
 801300a:	604b      	str	r3, [r1, #4]
 801300c:	4638      	mov	r0, r7
 801300e:	f104 060b 	add.w	r6, r4, #11
 8013012:	f000 fba3 	bl	801375c <__malloc_unlock>
 8013016:	f026 0607 	bic.w	r6, r6, #7
 801301a:	1d23      	adds	r3, r4, #4
 801301c:	1af2      	subs	r2, r6, r3
 801301e:	d0b6      	beq.n	8012f8e <_malloc_r+0x22>
 8013020:	1b9b      	subs	r3, r3, r6
 8013022:	50a3      	str	r3, [r4, r2]
 8013024:	e7b3      	b.n	8012f8e <_malloc_r+0x22>
 8013026:	6862      	ldr	r2, [r4, #4]
 8013028:	42a3      	cmp	r3, r4
 801302a:	bf0c      	ite	eq
 801302c:	6032      	streq	r2, [r6, #0]
 801302e:	605a      	strne	r2, [r3, #4]
 8013030:	e7ec      	b.n	801300c <_malloc_r+0xa0>
 8013032:	4623      	mov	r3, r4
 8013034:	6864      	ldr	r4, [r4, #4]
 8013036:	e7b2      	b.n	8012f9e <_malloc_r+0x32>
 8013038:	4634      	mov	r4, r6
 801303a:	6876      	ldr	r6, [r6, #4]
 801303c:	e7b9      	b.n	8012fb2 <_malloc_r+0x46>
 801303e:	230c      	movs	r3, #12
 8013040:	603b      	str	r3, [r7, #0]
 8013042:	4638      	mov	r0, r7
 8013044:	f000 fb8a 	bl	801375c <__malloc_unlock>
 8013048:	e7a1      	b.n	8012f8e <_malloc_r+0x22>
 801304a:	6025      	str	r5, [r4, #0]
 801304c:	e7de      	b.n	801300c <_malloc_r+0xa0>
 801304e:	bf00      	nop
 8013050:	24004fc4 	.word	0x24004fc4

08013054 <iprintf>:
 8013054:	b40f      	push	{r0, r1, r2, r3}
 8013056:	4b0a      	ldr	r3, [pc, #40]	; (8013080 <iprintf+0x2c>)
 8013058:	b513      	push	{r0, r1, r4, lr}
 801305a:	681c      	ldr	r4, [r3, #0]
 801305c:	b124      	cbz	r4, 8013068 <iprintf+0x14>
 801305e:	69a3      	ldr	r3, [r4, #24]
 8013060:	b913      	cbnz	r3, 8013068 <iprintf+0x14>
 8013062:	4620      	mov	r0, r4
 8013064:	f000 fa6e 	bl	8013544 <__sinit>
 8013068:	ab05      	add	r3, sp, #20
 801306a:	9a04      	ldr	r2, [sp, #16]
 801306c:	68a1      	ldr	r1, [r4, #8]
 801306e:	9301      	str	r3, [sp, #4]
 8013070:	4620      	mov	r0, r4
 8013072:	f000 fba3 	bl	80137bc <_vfiprintf_r>
 8013076:	b002      	add	sp, #8
 8013078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801307c:	b004      	add	sp, #16
 801307e:	4770      	bx	lr
 8013080:	24000034 	.word	0x24000034

08013084 <_puts_r>:
 8013084:	b570      	push	{r4, r5, r6, lr}
 8013086:	460e      	mov	r6, r1
 8013088:	4605      	mov	r5, r0
 801308a:	b118      	cbz	r0, 8013094 <_puts_r+0x10>
 801308c:	6983      	ldr	r3, [r0, #24]
 801308e:	b90b      	cbnz	r3, 8013094 <_puts_r+0x10>
 8013090:	f000 fa58 	bl	8013544 <__sinit>
 8013094:	69ab      	ldr	r3, [r5, #24]
 8013096:	68ac      	ldr	r4, [r5, #8]
 8013098:	b913      	cbnz	r3, 80130a0 <_puts_r+0x1c>
 801309a:	4628      	mov	r0, r5
 801309c:	f000 fa52 	bl	8013544 <__sinit>
 80130a0:	4b2c      	ldr	r3, [pc, #176]	; (8013154 <_puts_r+0xd0>)
 80130a2:	429c      	cmp	r4, r3
 80130a4:	d120      	bne.n	80130e8 <_puts_r+0x64>
 80130a6:	686c      	ldr	r4, [r5, #4]
 80130a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80130aa:	07db      	lsls	r3, r3, #31
 80130ac:	d405      	bmi.n	80130ba <_puts_r+0x36>
 80130ae:	89a3      	ldrh	r3, [r4, #12]
 80130b0:	0598      	lsls	r0, r3, #22
 80130b2:	d402      	bmi.n	80130ba <_puts_r+0x36>
 80130b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80130b6:	f000 fae3 	bl	8013680 <__retarget_lock_acquire_recursive>
 80130ba:	89a3      	ldrh	r3, [r4, #12]
 80130bc:	0719      	lsls	r1, r3, #28
 80130be:	d51d      	bpl.n	80130fc <_puts_r+0x78>
 80130c0:	6923      	ldr	r3, [r4, #16]
 80130c2:	b1db      	cbz	r3, 80130fc <_puts_r+0x78>
 80130c4:	3e01      	subs	r6, #1
 80130c6:	68a3      	ldr	r3, [r4, #8]
 80130c8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80130cc:	3b01      	subs	r3, #1
 80130ce:	60a3      	str	r3, [r4, #8]
 80130d0:	bb39      	cbnz	r1, 8013122 <_puts_r+0x9e>
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	da38      	bge.n	8013148 <_puts_r+0xc4>
 80130d6:	4622      	mov	r2, r4
 80130d8:	210a      	movs	r1, #10
 80130da:	4628      	mov	r0, r5
 80130dc:	f000 f858 	bl	8013190 <__swbuf_r>
 80130e0:	3001      	adds	r0, #1
 80130e2:	d011      	beq.n	8013108 <_puts_r+0x84>
 80130e4:	250a      	movs	r5, #10
 80130e6:	e011      	b.n	801310c <_puts_r+0x88>
 80130e8:	4b1b      	ldr	r3, [pc, #108]	; (8013158 <_puts_r+0xd4>)
 80130ea:	429c      	cmp	r4, r3
 80130ec:	d101      	bne.n	80130f2 <_puts_r+0x6e>
 80130ee:	68ac      	ldr	r4, [r5, #8]
 80130f0:	e7da      	b.n	80130a8 <_puts_r+0x24>
 80130f2:	4b1a      	ldr	r3, [pc, #104]	; (801315c <_puts_r+0xd8>)
 80130f4:	429c      	cmp	r4, r3
 80130f6:	bf08      	it	eq
 80130f8:	68ec      	ldreq	r4, [r5, #12]
 80130fa:	e7d5      	b.n	80130a8 <_puts_r+0x24>
 80130fc:	4621      	mov	r1, r4
 80130fe:	4628      	mov	r0, r5
 8013100:	f000 f898 	bl	8013234 <__swsetup_r>
 8013104:	2800      	cmp	r0, #0
 8013106:	d0dd      	beq.n	80130c4 <_puts_r+0x40>
 8013108:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801310c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801310e:	07da      	lsls	r2, r3, #31
 8013110:	d405      	bmi.n	801311e <_puts_r+0x9a>
 8013112:	89a3      	ldrh	r3, [r4, #12]
 8013114:	059b      	lsls	r3, r3, #22
 8013116:	d402      	bmi.n	801311e <_puts_r+0x9a>
 8013118:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801311a:	f000 fab2 	bl	8013682 <__retarget_lock_release_recursive>
 801311e:	4628      	mov	r0, r5
 8013120:	bd70      	pop	{r4, r5, r6, pc}
 8013122:	2b00      	cmp	r3, #0
 8013124:	da04      	bge.n	8013130 <_puts_r+0xac>
 8013126:	69a2      	ldr	r2, [r4, #24]
 8013128:	429a      	cmp	r2, r3
 801312a:	dc06      	bgt.n	801313a <_puts_r+0xb6>
 801312c:	290a      	cmp	r1, #10
 801312e:	d004      	beq.n	801313a <_puts_r+0xb6>
 8013130:	6823      	ldr	r3, [r4, #0]
 8013132:	1c5a      	adds	r2, r3, #1
 8013134:	6022      	str	r2, [r4, #0]
 8013136:	7019      	strb	r1, [r3, #0]
 8013138:	e7c5      	b.n	80130c6 <_puts_r+0x42>
 801313a:	4622      	mov	r2, r4
 801313c:	4628      	mov	r0, r5
 801313e:	f000 f827 	bl	8013190 <__swbuf_r>
 8013142:	3001      	adds	r0, #1
 8013144:	d1bf      	bne.n	80130c6 <_puts_r+0x42>
 8013146:	e7df      	b.n	8013108 <_puts_r+0x84>
 8013148:	6823      	ldr	r3, [r4, #0]
 801314a:	250a      	movs	r5, #10
 801314c:	1c5a      	adds	r2, r3, #1
 801314e:	6022      	str	r2, [r4, #0]
 8013150:	701d      	strb	r5, [r3, #0]
 8013152:	e7db      	b.n	801310c <_puts_r+0x88>
 8013154:	0801405c 	.word	0x0801405c
 8013158:	0801407c 	.word	0x0801407c
 801315c:	0801403c 	.word	0x0801403c

08013160 <puts>:
 8013160:	4b02      	ldr	r3, [pc, #8]	; (801316c <puts+0xc>)
 8013162:	4601      	mov	r1, r0
 8013164:	6818      	ldr	r0, [r3, #0]
 8013166:	f7ff bf8d 	b.w	8013084 <_puts_r>
 801316a:	bf00      	nop
 801316c:	24000034 	.word	0x24000034

08013170 <_sbrk_r>:
 8013170:	b538      	push	{r3, r4, r5, lr}
 8013172:	4d06      	ldr	r5, [pc, #24]	; (801318c <_sbrk_r+0x1c>)
 8013174:	2300      	movs	r3, #0
 8013176:	4604      	mov	r4, r0
 8013178:	4608      	mov	r0, r1
 801317a:	602b      	str	r3, [r5, #0]
 801317c:	f7ee f9d2 	bl	8001524 <_sbrk>
 8013180:	1c43      	adds	r3, r0, #1
 8013182:	d102      	bne.n	801318a <_sbrk_r+0x1a>
 8013184:	682b      	ldr	r3, [r5, #0]
 8013186:	b103      	cbz	r3, 801318a <_sbrk_r+0x1a>
 8013188:	6023      	str	r3, [r4, #0]
 801318a:	bd38      	pop	{r3, r4, r5, pc}
 801318c:	24004fd0 	.word	0x24004fd0

08013190 <__swbuf_r>:
 8013190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013192:	460e      	mov	r6, r1
 8013194:	4614      	mov	r4, r2
 8013196:	4605      	mov	r5, r0
 8013198:	b118      	cbz	r0, 80131a2 <__swbuf_r+0x12>
 801319a:	6983      	ldr	r3, [r0, #24]
 801319c:	b90b      	cbnz	r3, 80131a2 <__swbuf_r+0x12>
 801319e:	f000 f9d1 	bl	8013544 <__sinit>
 80131a2:	4b21      	ldr	r3, [pc, #132]	; (8013228 <__swbuf_r+0x98>)
 80131a4:	429c      	cmp	r4, r3
 80131a6:	d12b      	bne.n	8013200 <__swbuf_r+0x70>
 80131a8:	686c      	ldr	r4, [r5, #4]
 80131aa:	69a3      	ldr	r3, [r4, #24]
 80131ac:	60a3      	str	r3, [r4, #8]
 80131ae:	89a3      	ldrh	r3, [r4, #12]
 80131b0:	071a      	lsls	r2, r3, #28
 80131b2:	d52f      	bpl.n	8013214 <__swbuf_r+0x84>
 80131b4:	6923      	ldr	r3, [r4, #16]
 80131b6:	b36b      	cbz	r3, 8013214 <__swbuf_r+0x84>
 80131b8:	6923      	ldr	r3, [r4, #16]
 80131ba:	6820      	ldr	r0, [r4, #0]
 80131bc:	1ac0      	subs	r0, r0, r3
 80131be:	6963      	ldr	r3, [r4, #20]
 80131c0:	b2f6      	uxtb	r6, r6
 80131c2:	4283      	cmp	r3, r0
 80131c4:	4637      	mov	r7, r6
 80131c6:	dc04      	bgt.n	80131d2 <__swbuf_r+0x42>
 80131c8:	4621      	mov	r1, r4
 80131ca:	4628      	mov	r0, r5
 80131cc:	f000 f926 	bl	801341c <_fflush_r>
 80131d0:	bb30      	cbnz	r0, 8013220 <__swbuf_r+0x90>
 80131d2:	68a3      	ldr	r3, [r4, #8]
 80131d4:	3b01      	subs	r3, #1
 80131d6:	60a3      	str	r3, [r4, #8]
 80131d8:	6823      	ldr	r3, [r4, #0]
 80131da:	1c5a      	adds	r2, r3, #1
 80131dc:	6022      	str	r2, [r4, #0]
 80131de:	701e      	strb	r6, [r3, #0]
 80131e0:	6963      	ldr	r3, [r4, #20]
 80131e2:	3001      	adds	r0, #1
 80131e4:	4283      	cmp	r3, r0
 80131e6:	d004      	beq.n	80131f2 <__swbuf_r+0x62>
 80131e8:	89a3      	ldrh	r3, [r4, #12]
 80131ea:	07db      	lsls	r3, r3, #31
 80131ec:	d506      	bpl.n	80131fc <__swbuf_r+0x6c>
 80131ee:	2e0a      	cmp	r6, #10
 80131f0:	d104      	bne.n	80131fc <__swbuf_r+0x6c>
 80131f2:	4621      	mov	r1, r4
 80131f4:	4628      	mov	r0, r5
 80131f6:	f000 f911 	bl	801341c <_fflush_r>
 80131fa:	b988      	cbnz	r0, 8013220 <__swbuf_r+0x90>
 80131fc:	4638      	mov	r0, r7
 80131fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013200:	4b0a      	ldr	r3, [pc, #40]	; (801322c <__swbuf_r+0x9c>)
 8013202:	429c      	cmp	r4, r3
 8013204:	d101      	bne.n	801320a <__swbuf_r+0x7a>
 8013206:	68ac      	ldr	r4, [r5, #8]
 8013208:	e7cf      	b.n	80131aa <__swbuf_r+0x1a>
 801320a:	4b09      	ldr	r3, [pc, #36]	; (8013230 <__swbuf_r+0xa0>)
 801320c:	429c      	cmp	r4, r3
 801320e:	bf08      	it	eq
 8013210:	68ec      	ldreq	r4, [r5, #12]
 8013212:	e7ca      	b.n	80131aa <__swbuf_r+0x1a>
 8013214:	4621      	mov	r1, r4
 8013216:	4628      	mov	r0, r5
 8013218:	f000 f80c 	bl	8013234 <__swsetup_r>
 801321c:	2800      	cmp	r0, #0
 801321e:	d0cb      	beq.n	80131b8 <__swbuf_r+0x28>
 8013220:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013224:	e7ea      	b.n	80131fc <__swbuf_r+0x6c>
 8013226:	bf00      	nop
 8013228:	0801405c 	.word	0x0801405c
 801322c:	0801407c 	.word	0x0801407c
 8013230:	0801403c 	.word	0x0801403c

08013234 <__swsetup_r>:
 8013234:	4b32      	ldr	r3, [pc, #200]	; (8013300 <__swsetup_r+0xcc>)
 8013236:	b570      	push	{r4, r5, r6, lr}
 8013238:	681d      	ldr	r5, [r3, #0]
 801323a:	4606      	mov	r6, r0
 801323c:	460c      	mov	r4, r1
 801323e:	b125      	cbz	r5, 801324a <__swsetup_r+0x16>
 8013240:	69ab      	ldr	r3, [r5, #24]
 8013242:	b913      	cbnz	r3, 801324a <__swsetup_r+0x16>
 8013244:	4628      	mov	r0, r5
 8013246:	f000 f97d 	bl	8013544 <__sinit>
 801324a:	4b2e      	ldr	r3, [pc, #184]	; (8013304 <__swsetup_r+0xd0>)
 801324c:	429c      	cmp	r4, r3
 801324e:	d10f      	bne.n	8013270 <__swsetup_r+0x3c>
 8013250:	686c      	ldr	r4, [r5, #4]
 8013252:	89a3      	ldrh	r3, [r4, #12]
 8013254:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013258:	0719      	lsls	r1, r3, #28
 801325a:	d42c      	bmi.n	80132b6 <__swsetup_r+0x82>
 801325c:	06dd      	lsls	r5, r3, #27
 801325e:	d411      	bmi.n	8013284 <__swsetup_r+0x50>
 8013260:	2309      	movs	r3, #9
 8013262:	6033      	str	r3, [r6, #0]
 8013264:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013268:	81a3      	strh	r3, [r4, #12]
 801326a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801326e:	e03e      	b.n	80132ee <__swsetup_r+0xba>
 8013270:	4b25      	ldr	r3, [pc, #148]	; (8013308 <__swsetup_r+0xd4>)
 8013272:	429c      	cmp	r4, r3
 8013274:	d101      	bne.n	801327a <__swsetup_r+0x46>
 8013276:	68ac      	ldr	r4, [r5, #8]
 8013278:	e7eb      	b.n	8013252 <__swsetup_r+0x1e>
 801327a:	4b24      	ldr	r3, [pc, #144]	; (801330c <__swsetup_r+0xd8>)
 801327c:	429c      	cmp	r4, r3
 801327e:	bf08      	it	eq
 8013280:	68ec      	ldreq	r4, [r5, #12]
 8013282:	e7e6      	b.n	8013252 <__swsetup_r+0x1e>
 8013284:	0758      	lsls	r0, r3, #29
 8013286:	d512      	bpl.n	80132ae <__swsetup_r+0x7a>
 8013288:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801328a:	b141      	cbz	r1, 801329e <__swsetup_r+0x6a>
 801328c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013290:	4299      	cmp	r1, r3
 8013292:	d002      	beq.n	801329a <__swsetup_r+0x66>
 8013294:	4630      	mov	r0, r6
 8013296:	f7ff fdfd 	bl	8012e94 <_free_r>
 801329a:	2300      	movs	r3, #0
 801329c:	6363      	str	r3, [r4, #52]	; 0x34
 801329e:	89a3      	ldrh	r3, [r4, #12]
 80132a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80132a4:	81a3      	strh	r3, [r4, #12]
 80132a6:	2300      	movs	r3, #0
 80132a8:	6063      	str	r3, [r4, #4]
 80132aa:	6923      	ldr	r3, [r4, #16]
 80132ac:	6023      	str	r3, [r4, #0]
 80132ae:	89a3      	ldrh	r3, [r4, #12]
 80132b0:	f043 0308 	orr.w	r3, r3, #8
 80132b4:	81a3      	strh	r3, [r4, #12]
 80132b6:	6923      	ldr	r3, [r4, #16]
 80132b8:	b94b      	cbnz	r3, 80132ce <__swsetup_r+0x9a>
 80132ba:	89a3      	ldrh	r3, [r4, #12]
 80132bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80132c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80132c4:	d003      	beq.n	80132ce <__swsetup_r+0x9a>
 80132c6:	4621      	mov	r1, r4
 80132c8:	4630      	mov	r0, r6
 80132ca:	f000 fa01 	bl	80136d0 <__smakebuf_r>
 80132ce:	89a0      	ldrh	r0, [r4, #12]
 80132d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80132d4:	f010 0301 	ands.w	r3, r0, #1
 80132d8:	d00a      	beq.n	80132f0 <__swsetup_r+0xbc>
 80132da:	2300      	movs	r3, #0
 80132dc:	60a3      	str	r3, [r4, #8]
 80132de:	6963      	ldr	r3, [r4, #20]
 80132e0:	425b      	negs	r3, r3
 80132e2:	61a3      	str	r3, [r4, #24]
 80132e4:	6923      	ldr	r3, [r4, #16]
 80132e6:	b943      	cbnz	r3, 80132fa <__swsetup_r+0xc6>
 80132e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80132ec:	d1ba      	bne.n	8013264 <__swsetup_r+0x30>
 80132ee:	bd70      	pop	{r4, r5, r6, pc}
 80132f0:	0781      	lsls	r1, r0, #30
 80132f2:	bf58      	it	pl
 80132f4:	6963      	ldrpl	r3, [r4, #20]
 80132f6:	60a3      	str	r3, [r4, #8]
 80132f8:	e7f4      	b.n	80132e4 <__swsetup_r+0xb0>
 80132fa:	2000      	movs	r0, #0
 80132fc:	e7f7      	b.n	80132ee <__swsetup_r+0xba>
 80132fe:	bf00      	nop
 8013300:	24000034 	.word	0x24000034
 8013304:	0801405c 	.word	0x0801405c
 8013308:	0801407c 	.word	0x0801407c
 801330c:	0801403c 	.word	0x0801403c

08013310 <__sflush_r>:
 8013310:	898a      	ldrh	r2, [r1, #12]
 8013312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013316:	4605      	mov	r5, r0
 8013318:	0710      	lsls	r0, r2, #28
 801331a:	460c      	mov	r4, r1
 801331c:	d458      	bmi.n	80133d0 <__sflush_r+0xc0>
 801331e:	684b      	ldr	r3, [r1, #4]
 8013320:	2b00      	cmp	r3, #0
 8013322:	dc05      	bgt.n	8013330 <__sflush_r+0x20>
 8013324:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013326:	2b00      	cmp	r3, #0
 8013328:	dc02      	bgt.n	8013330 <__sflush_r+0x20>
 801332a:	2000      	movs	r0, #0
 801332c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013330:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013332:	2e00      	cmp	r6, #0
 8013334:	d0f9      	beq.n	801332a <__sflush_r+0x1a>
 8013336:	2300      	movs	r3, #0
 8013338:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801333c:	682f      	ldr	r7, [r5, #0]
 801333e:	602b      	str	r3, [r5, #0]
 8013340:	d032      	beq.n	80133a8 <__sflush_r+0x98>
 8013342:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013344:	89a3      	ldrh	r3, [r4, #12]
 8013346:	075a      	lsls	r2, r3, #29
 8013348:	d505      	bpl.n	8013356 <__sflush_r+0x46>
 801334a:	6863      	ldr	r3, [r4, #4]
 801334c:	1ac0      	subs	r0, r0, r3
 801334e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013350:	b10b      	cbz	r3, 8013356 <__sflush_r+0x46>
 8013352:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013354:	1ac0      	subs	r0, r0, r3
 8013356:	2300      	movs	r3, #0
 8013358:	4602      	mov	r2, r0
 801335a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801335c:	6a21      	ldr	r1, [r4, #32]
 801335e:	4628      	mov	r0, r5
 8013360:	47b0      	blx	r6
 8013362:	1c43      	adds	r3, r0, #1
 8013364:	89a3      	ldrh	r3, [r4, #12]
 8013366:	d106      	bne.n	8013376 <__sflush_r+0x66>
 8013368:	6829      	ldr	r1, [r5, #0]
 801336a:	291d      	cmp	r1, #29
 801336c:	d82c      	bhi.n	80133c8 <__sflush_r+0xb8>
 801336e:	4a2a      	ldr	r2, [pc, #168]	; (8013418 <__sflush_r+0x108>)
 8013370:	40ca      	lsrs	r2, r1
 8013372:	07d6      	lsls	r6, r2, #31
 8013374:	d528      	bpl.n	80133c8 <__sflush_r+0xb8>
 8013376:	2200      	movs	r2, #0
 8013378:	6062      	str	r2, [r4, #4]
 801337a:	04d9      	lsls	r1, r3, #19
 801337c:	6922      	ldr	r2, [r4, #16]
 801337e:	6022      	str	r2, [r4, #0]
 8013380:	d504      	bpl.n	801338c <__sflush_r+0x7c>
 8013382:	1c42      	adds	r2, r0, #1
 8013384:	d101      	bne.n	801338a <__sflush_r+0x7a>
 8013386:	682b      	ldr	r3, [r5, #0]
 8013388:	b903      	cbnz	r3, 801338c <__sflush_r+0x7c>
 801338a:	6560      	str	r0, [r4, #84]	; 0x54
 801338c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801338e:	602f      	str	r7, [r5, #0]
 8013390:	2900      	cmp	r1, #0
 8013392:	d0ca      	beq.n	801332a <__sflush_r+0x1a>
 8013394:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013398:	4299      	cmp	r1, r3
 801339a:	d002      	beq.n	80133a2 <__sflush_r+0x92>
 801339c:	4628      	mov	r0, r5
 801339e:	f7ff fd79 	bl	8012e94 <_free_r>
 80133a2:	2000      	movs	r0, #0
 80133a4:	6360      	str	r0, [r4, #52]	; 0x34
 80133a6:	e7c1      	b.n	801332c <__sflush_r+0x1c>
 80133a8:	6a21      	ldr	r1, [r4, #32]
 80133aa:	2301      	movs	r3, #1
 80133ac:	4628      	mov	r0, r5
 80133ae:	47b0      	blx	r6
 80133b0:	1c41      	adds	r1, r0, #1
 80133b2:	d1c7      	bne.n	8013344 <__sflush_r+0x34>
 80133b4:	682b      	ldr	r3, [r5, #0]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d0c4      	beq.n	8013344 <__sflush_r+0x34>
 80133ba:	2b1d      	cmp	r3, #29
 80133bc:	d001      	beq.n	80133c2 <__sflush_r+0xb2>
 80133be:	2b16      	cmp	r3, #22
 80133c0:	d101      	bne.n	80133c6 <__sflush_r+0xb6>
 80133c2:	602f      	str	r7, [r5, #0]
 80133c4:	e7b1      	b.n	801332a <__sflush_r+0x1a>
 80133c6:	89a3      	ldrh	r3, [r4, #12]
 80133c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80133cc:	81a3      	strh	r3, [r4, #12]
 80133ce:	e7ad      	b.n	801332c <__sflush_r+0x1c>
 80133d0:	690f      	ldr	r7, [r1, #16]
 80133d2:	2f00      	cmp	r7, #0
 80133d4:	d0a9      	beq.n	801332a <__sflush_r+0x1a>
 80133d6:	0793      	lsls	r3, r2, #30
 80133d8:	680e      	ldr	r6, [r1, #0]
 80133da:	bf08      	it	eq
 80133dc:	694b      	ldreq	r3, [r1, #20]
 80133de:	600f      	str	r7, [r1, #0]
 80133e0:	bf18      	it	ne
 80133e2:	2300      	movne	r3, #0
 80133e4:	eba6 0807 	sub.w	r8, r6, r7
 80133e8:	608b      	str	r3, [r1, #8]
 80133ea:	f1b8 0f00 	cmp.w	r8, #0
 80133ee:	dd9c      	ble.n	801332a <__sflush_r+0x1a>
 80133f0:	6a21      	ldr	r1, [r4, #32]
 80133f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80133f4:	4643      	mov	r3, r8
 80133f6:	463a      	mov	r2, r7
 80133f8:	4628      	mov	r0, r5
 80133fa:	47b0      	blx	r6
 80133fc:	2800      	cmp	r0, #0
 80133fe:	dc06      	bgt.n	801340e <__sflush_r+0xfe>
 8013400:	89a3      	ldrh	r3, [r4, #12]
 8013402:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013406:	81a3      	strh	r3, [r4, #12]
 8013408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801340c:	e78e      	b.n	801332c <__sflush_r+0x1c>
 801340e:	4407      	add	r7, r0
 8013410:	eba8 0800 	sub.w	r8, r8, r0
 8013414:	e7e9      	b.n	80133ea <__sflush_r+0xda>
 8013416:	bf00      	nop
 8013418:	20400001 	.word	0x20400001

0801341c <_fflush_r>:
 801341c:	b538      	push	{r3, r4, r5, lr}
 801341e:	690b      	ldr	r3, [r1, #16]
 8013420:	4605      	mov	r5, r0
 8013422:	460c      	mov	r4, r1
 8013424:	b913      	cbnz	r3, 801342c <_fflush_r+0x10>
 8013426:	2500      	movs	r5, #0
 8013428:	4628      	mov	r0, r5
 801342a:	bd38      	pop	{r3, r4, r5, pc}
 801342c:	b118      	cbz	r0, 8013436 <_fflush_r+0x1a>
 801342e:	6983      	ldr	r3, [r0, #24]
 8013430:	b90b      	cbnz	r3, 8013436 <_fflush_r+0x1a>
 8013432:	f000 f887 	bl	8013544 <__sinit>
 8013436:	4b14      	ldr	r3, [pc, #80]	; (8013488 <_fflush_r+0x6c>)
 8013438:	429c      	cmp	r4, r3
 801343a:	d11b      	bne.n	8013474 <_fflush_r+0x58>
 801343c:	686c      	ldr	r4, [r5, #4]
 801343e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013442:	2b00      	cmp	r3, #0
 8013444:	d0ef      	beq.n	8013426 <_fflush_r+0xa>
 8013446:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013448:	07d0      	lsls	r0, r2, #31
 801344a:	d404      	bmi.n	8013456 <_fflush_r+0x3a>
 801344c:	0599      	lsls	r1, r3, #22
 801344e:	d402      	bmi.n	8013456 <_fflush_r+0x3a>
 8013450:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013452:	f000 f915 	bl	8013680 <__retarget_lock_acquire_recursive>
 8013456:	4628      	mov	r0, r5
 8013458:	4621      	mov	r1, r4
 801345a:	f7ff ff59 	bl	8013310 <__sflush_r>
 801345e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013460:	07da      	lsls	r2, r3, #31
 8013462:	4605      	mov	r5, r0
 8013464:	d4e0      	bmi.n	8013428 <_fflush_r+0xc>
 8013466:	89a3      	ldrh	r3, [r4, #12]
 8013468:	059b      	lsls	r3, r3, #22
 801346a:	d4dd      	bmi.n	8013428 <_fflush_r+0xc>
 801346c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801346e:	f000 f908 	bl	8013682 <__retarget_lock_release_recursive>
 8013472:	e7d9      	b.n	8013428 <_fflush_r+0xc>
 8013474:	4b05      	ldr	r3, [pc, #20]	; (801348c <_fflush_r+0x70>)
 8013476:	429c      	cmp	r4, r3
 8013478:	d101      	bne.n	801347e <_fflush_r+0x62>
 801347a:	68ac      	ldr	r4, [r5, #8]
 801347c:	e7df      	b.n	801343e <_fflush_r+0x22>
 801347e:	4b04      	ldr	r3, [pc, #16]	; (8013490 <_fflush_r+0x74>)
 8013480:	429c      	cmp	r4, r3
 8013482:	bf08      	it	eq
 8013484:	68ec      	ldreq	r4, [r5, #12]
 8013486:	e7da      	b.n	801343e <_fflush_r+0x22>
 8013488:	0801405c 	.word	0x0801405c
 801348c:	0801407c 	.word	0x0801407c
 8013490:	0801403c 	.word	0x0801403c

08013494 <std>:
 8013494:	2300      	movs	r3, #0
 8013496:	b510      	push	{r4, lr}
 8013498:	4604      	mov	r4, r0
 801349a:	e9c0 3300 	strd	r3, r3, [r0]
 801349e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80134a2:	6083      	str	r3, [r0, #8]
 80134a4:	8181      	strh	r1, [r0, #12]
 80134a6:	6643      	str	r3, [r0, #100]	; 0x64
 80134a8:	81c2      	strh	r2, [r0, #14]
 80134aa:	6183      	str	r3, [r0, #24]
 80134ac:	4619      	mov	r1, r3
 80134ae:	2208      	movs	r2, #8
 80134b0:	305c      	adds	r0, #92	; 0x5c
 80134b2:	f7ff fce7 	bl	8012e84 <memset>
 80134b6:	4b05      	ldr	r3, [pc, #20]	; (80134cc <std+0x38>)
 80134b8:	6263      	str	r3, [r4, #36]	; 0x24
 80134ba:	4b05      	ldr	r3, [pc, #20]	; (80134d0 <std+0x3c>)
 80134bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80134be:	4b05      	ldr	r3, [pc, #20]	; (80134d4 <std+0x40>)
 80134c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80134c2:	4b05      	ldr	r3, [pc, #20]	; (80134d8 <std+0x44>)
 80134c4:	6224      	str	r4, [r4, #32]
 80134c6:	6323      	str	r3, [r4, #48]	; 0x30
 80134c8:	bd10      	pop	{r4, pc}
 80134ca:	bf00      	nop
 80134cc:	08013d45 	.word	0x08013d45
 80134d0:	08013d67 	.word	0x08013d67
 80134d4:	08013d9f 	.word	0x08013d9f
 80134d8:	08013dc3 	.word	0x08013dc3

080134dc <_cleanup_r>:
 80134dc:	4901      	ldr	r1, [pc, #4]	; (80134e4 <_cleanup_r+0x8>)
 80134de:	f000 b8af 	b.w	8013640 <_fwalk_reent>
 80134e2:	bf00      	nop
 80134e4:	0801341d 	.word	0x0801341d

080134e8 <__sfmoreglue>:
 80134e8:	b570      	push	{r4, r5, r6, lr}
 80134ea:	2268      	movs	r2, #104	; 0x68
 80134ec:	1e4d      	subs	r5, r1, #1
 80134ee:	4355      	muls	r5, r2
 80134f0:	460e      	mov	r6, r1
 80134f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80134f6:	f7ff fd39 	bl	8012f6c <_malloc_r>
 80134fa:	4604      	mov	r4, r0
 80134fc:	b140      	cbz	r0, 8013510 <__sfmoreglue+0x28>
 80134fe:	2100      	movs	r1, #0
 8013500:	e9c0 1600 	strd	r1, r6, [r0]
 8013504:	300c      	adds	r0, #12
 8013506:	60a0      	str	r0, [r4, #8]
 8013508:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801350c:	f7ff fcba 	bl	8012e84 <memset>
 8013510:	4620      	mov	r0, r4
 8013512:	bd70      	pop	{r4, r5, r6, pc}

08013514 <__sfp_lock_acquire>:
 8013514:	4801      	ldr	r0, [pc, #4]	; (801351c <__sfp_lock_acquire+0x8>)
 8013516:	f000 b8b3 	b.w	8013680 <__retarget_lock_acquire_recursive>
 801351a:	bf00      	nop
 801351c:	24004fcd 	.word	0x24004fcd

08013520 <__sfp_lock_release>:
 8013520:	4801      	ldr	r0, [pc, #4]	; (8013528 <__sfp_lock_release+0x8>)
 8013522:	f000 b8ae 	b.w	8013682 <__retarget_lock_release_recursive>
 8013526:	bf00      	nop
 8013528:	24004fcd 	.word	0x24004fcd

0801352c <__sinit_lock_acquire>:
 801352c:	4801      	ldr	r0, [pc, #4]	; (8013534 <__sinit_lock_acquire+0x8>)
 801352e:	f000 b8a7 	b.w	8013680 <__retarget_lock_acquire_recursive>
 8013532:	bf00      	nop
 8013534:	24004fce 	.word	0x24004fce

08013538 <__sinit_lock_release>:
 8013538:	4801      	ldr	r0, [pc, #4]	; (8013540 <__sinit_lock_release+0x8>)
 801353a:	f000 b8a2 	b.w	8013682 <__retarget_lock_release_recursive>
 801353e:	bf00      	nop
 8013540:	24004fce 	.word	0x24004fce

08013544 <__sinit>:
 8013544:	b510      	push	{r4, lr}
 8013546:	4604      	mov	r4, r0
 8013548:	f7ff fff0 	bl	801352c <__sinit_lock_acquire>
 801354c:	69a3      	ldr	r3, [r4, #24]
 801354e:	b11b      	cbz	r3, 8013558 <__sinit+0x14>
 8013550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013554:	f7ff bff0 	b.w	8013538 <__sinit_lock_release>
 8013558:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801355c:	6523      	str	r3, [r4, #80]	; 0x50
 801355e:	4b13      	ldr	r3, [pc, #76]	; (80135ac <__sinit+0x68>)
 8013560:	4a13      	ldr	r2, [pc, #76]	; (80135b0 <__sinit+0x6c>)
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	62a2      	str	r2, [r4, #40]	; 0x28
 8013566:	42a3      	cmp	r3, r4
 8013568:	bf04      	itt	eq
 801356a:	2301      	moveq	r3, #1
 801356c:	61a3      	streq	r3, [r4, #24]
 801356e:	4620      	mov	r0, r4
 8013570:	f000 f820 	bl	80135b4 <__sfp>
 8013574:	6060      	str	r0, [r4, #4]
 8013576:	4620      	mov	r0, r4
 8013578:	f000 f81c 	bl	80135b4 <__sfp>
 801357c:	60a0      	str	r0, [r4, #8]
 801357e:	4620      	mov	r0, r4
 8013580:	f000 f818 	bl	80135b4 <__sfp>
 8013584:	2200      	movs	r2, #0
 8013586:	60e0      	str	r0, [r4, #12]
 8013588:	2104      	movs	r1, #4
 801358a:	6860      	ldr	r0, [r4, #4]
 801358c:	f7ff ff82 	bl	8013494 <std>
 8013590:	68a0      	ldr	r0, [r4, #8]
 8013592:	2201      	movs	r2, #1
 8013594:	2109      	movs	r1, #9
 8013596:	f7ff ff7d 	bl	8013494 <std>
 801359a:	68e0      	ldr	r0, [r4, #12]
 801359c:	2202      	movs	r2, #2
 801359e:	2112      	movs	r1, #18
 80135a0:	f7ff ff78 	bl	8013494 <std>
 80135a4:	2301      	movs	r3, #1
 80135a6:	61a3      	str	r3, [r4, #24]
 80135a8:	e7d2      	b.n	8013550 <__sinit+0xc>
 80135aa:	bf00      	nop
 80135ac:	08014038 	.word	0x08014038
 80135b0:	080134dd 	.word	0x080134dd

080135b4 <__sfp>:
 80135b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135b6:	4607      	mov	r7, r0
 80135b8:	f7ff ffac 	bl	8013514 <__sfp_lock_acquire>
 80135bc:	4b1e      	ldr	r3, [pc, #120]	; (8013638 <__sfp+0x84>)
 80135be:	681e      	ldr	r6, [r3, #0]
 80135c0:	69b3      	ldr	r3, [r6, #24]
 80135c2:	b913      	cbnz	r3, 80135ca <__sfp+0x16>
 80135c4:	4630      	mov	r0, r6
 80135c6:	f7ff ffbd 	bl	8013544 <__sinit>
 80135ca:	3648      	adds	r6, #72	; 0x48
 80135cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80135d0:	3b01      	subs	r3, #1
 80135d2:	d503      	bpl.n	80135dc <__sfp+0x28>
 80135d4:	6833      	ldr	r3, [r6, #0]
 80135d6:	b30b      	cbz	r3, 801361c <__sfp+0x68>
 80135d8:	6836      	ldr	r6, [r6, #0]
 80135da:	e7f7      	b.n	80135cc <__sfp+0x18>
 80135dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80135e0:	b9d5      	cbnz	r5, 8013618 <__sfp+0x64>
 80135e2:	4b16      	ldr	r3, [pc, #88]	; (801363c <__sfp+0x88>)
 80135e4:	60e3      	str	r3, [r4, #12]
 80135e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80135ea:	6665      	str	r5, [r4, #100]	; 0x64
 80135ec:	f000 f847 	bl	801367e <__retarget_lock_init_recursive>
 80135f0:	f7ff ff96 	bl	8013520 <__sfp_lock_release>
 80135f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80135f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80135fc:	6025      	str	r5, [r4, #0]
 80135fe:	61a5      	str	r5, [r4, #24]
 8013600:	2208      	movs	r2, #8
 8013602:	4629      	mov	r1, r5
 8013604:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013608:	f7ff fc3c 	bl	8012e84 <memset>
 801360c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013610:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013614:	4620      	mov	r0, r4
 8013616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013618:	3468      	adds	r4, #104	; 0x68
 801361a:	e7d9      	b.n	80135d0 <__sfp+0x1c>
 801361c:	2104      	movs	r1, #4
 801361e:	4638      	mov	r0, r7
 8013620:	f7ff ff62 	bl	80134e8 <__sfmoreglue>
 8013624:	4604      	mov	r4, r0
 8013626:	6030      	str	r0, [r6, #0]
 8013628:	2800      	cmp	r0, #0
 801362a:	d1d5      	bne.n	80135d8 <__sfp+0x24>
 801362c:	f7ff ff78 	bl	8013520 <__sfp_lock_release>
 8013630:	230c      	movs	r3, #12
 8013632:	603b      	str	r3, [r7, #0]
 8013634:	e7ee      	b.n	8013614 <__sfp+0x60>
 8013636:	bf00      	nop
 8013638:	08014038 	.word	0x08014038
 801363c:	ffff0001 	.word	0xffff0001

08013640 <_fwalk_reent>:
 8013640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013644:	4606      	mov	r6, r0
 8013646:	4688      	mov	r8, r1
 8013648:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801364c:	2700      	movs	r7, #0
 801364e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013652:	f1b9 0901 	subs.w	r9, r9, #1
 8013656:	d505      	bpl.n	8013664 <_fwalk_reent+0x24>
 8013658:	6824      	ldr	r4, [r4, #0]
 801365a:	2c00      	cmp	r4, #0
 801365c:	d1f7      	bne.n	801364e <_fwalk_reent+0xe>
 801365e:	4638      	mov	r0, r7
 8013660:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013664:	89ab      	ldrh	r3, [r5, #12]
 8013666:	2b01      	cmp	r3, #1
 8013668:	d907      	bls.n	801367a <_fwalk_reent+0x3a>
 801366a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801366e:	3301      	adds	r3, #1
 8013670:	d003      	beq.n	801367a <_fwalk_reent+0x3a>
 8013672:	4629      	mov	r1, r5
 8013674:	4630      	mov	r0, r6
 8013676:	47c0      	blx	r8
 8013678:	4307      	orrs	r7, r0
 801367a:	3568      	adds	r5, #104	; 0x68
 801367c:	e7e9      	b.n	8013652 <_fwalk_reent+0x12>

0801367e <__retarget_lock_init_recursive>:
 801367e:	4770      	bx	lr

08013680 <__retarget_lock_acquire_recursive>:
 8013680:	4770      	bx	lr

08013682 <__retarget_lock_release_recursive>:
 8013682:	4770      	bx	lr

08013684 <__swhatbuf_r>:
 8013684:	b570      	push	{r4, r5, r6, lr}
 8013686:	460e      	mov	r6, r1
 8013688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801368c:	2900      	cmp	r1, #0
 801368e:	b096      	sub	sp, #88	; 0x58
 8013690:	4614      	mov	r4, r2
 8013692:	461d      	mov	r5, r3
 8013694:	da08      	bge.n	80136a8 <__swhatbuf_r+0x24>
 8013696:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801369a:	2200      	movs	r2, #0
 801369c:	602a      	str	r2, [r5, #0]
 801369e:	061a      	lsls	r2, r3, #24
 80136a0:	d410      	bmi.n	80136c4 <__swhatbuf_r+0x40>
 80136a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80136a6:	e00e      	b.n	80136c6 <__swhatbuf_r+0x42>
 80136a8:	466a      	mov	r2, sp
 80136aa:	f000 fbb1 	bl	8013e10 <_fstat_r>
 80136ae:	2800      	cmp	r0, #0
 80136b0:	dbf1      	blt.n	8013696 <__swhatbuf_r+0x12>
 80136b2:	9a01      	ldr	r2, [sp, #4]
 80136b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80136b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80136bc:	425a      	negs	r2, r3
 80136be:	415a      	adcs	r2, r3
 80136c0:	602a      	str	r2, [r5, #0]
 80136c2:	e7ee      	b.n	80136a2 <__swhatbuf_r+0x1e>
 80136c4:	2340      	movs	r3, #64	; 0x40
 80136c6:	2000      	movs	r0, #0
 80136c8:	6023      	str	r3, [r4, #0]
 80136ca:	b016      	add	sp, #88	; 0x58
 80136cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080136d0 <__smakebuf_r>:
 80136d0:	898b      	ldrh	r3, [r1, #12]
 80136d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80136d4:	079d      	lsls	r5, r3, #30
 80136d6:	4606      	mov	r6, r0
 80136d8:	460c      	mov	r4, r1
 80136da:	d507      	bpl.n	80136ec <__smakebuf_r+0x1c>
 80136dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80136e0:	6023      	str	r3, [r4, #0]
 80136e2:	6123      	str	r3, [r4, #16]
 80136e4:	2301      	movs	r3, #1
 80136e6:	6163      	str	r3, [r4, #20]
 80136e8:	b002      	add	sp, #8
 80136ea:	bd70      	pop	{r4, r5, r6, pc}
 80136ec:	ab01      	add	r3, sp, #4
 80136ee:	466a      	mov	r2, sp
 80136f0:	f7ff ffc8 	bl	8013684 <__swhatbuf_r>
 80136f4:	9900      	ldr	r1, [sp, #0]
 80136f6:	4605      	mov	r5, r0
 80136f8:	4630      	mov	r0, r6
 80136fa:	f7ff fc37 	bl	8012f6c <_malloc_r>
 80136fe:	b948      	cbnz	r0, 8013714 <__smakebuf_r+0x44>
 8013700:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013704:	059a      	lsls	r2, r3, #22
 8013706:	d4ef      	bmi.n	80136e8 <__smakebuf_r+0x18>
 8013708:	f023 0303 	bic.w	r3, r3, #3
 801370c:	f043 0302 	orr.w	r3, r3, #2
 8013710:	81a3      	strh	r3, [r4, #12]
 8013712:	e7e3      	b.n	80136dc <__smakebuf_r+0xc>
 8013714:	4b0d      	ldr	r3, [pc, #52]	; (801374c <__smakebuf_r+0x7c>)
 8013716:	62b3      	str	r3, [r6, #40]	; 0x28
 8013718:	89a3      	ldrh	r3, [r4, #12]
 801371a:	6020      	str	r0, [r4, #0]
 801371c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013720:	81a3      	strh	r3, [r4, #12]
 8013722:	9b00      	ldr	r3, [sp, #0]
 8013724:	6163      	str	r3, [r4, #20]
 8013726:	9b01      	ldr	r3, [sp, #4]
 8013728:	6120      	str	r0, [r4, #16]
 801372a:	b15b      	cbz	r3, 8013744 <__smakebuf_r+0x74>
 801372c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013730:	4630      	mov	r0, r6
 8013732:	f000 fb7f 	bl	8013e34 <_isatty_r>
 8013736:	b128      	cbz	r0, 8013744 <__smakebuf_r+0x74>
 8013738:	89a3      	ldrh	r3, [r4, #12]
 801373a:	f023 0303 	bic.w	r3, r3, #3
 801373e:	f043 0301 	orr.w	r3, r3, #1
 8013742:	81a3      	strh	r3, [r4, #12]
 8013744:	89a0      	ldrh	r0, [r4, #12]
 8013746:	4305      	orrs	r5, r0
 8013748:	81a5      	strh	r5, [r4, #12]
 801374a:	e7cd      	b.n	80136e8 <__smakebuf_r+0x18>
 801374c:	080134dd 	.word	0x080134dd

08013750 <__malloc_lock>:
 8013750:	4801      	ldr	r0, [pc, #4]	; (8013758 <__malloc_lock+0x8>)
 8013752:	f7ff bf95 	b.w	8013680 <__retarget_lock_acquire_recursive>
 8013756:	bf00      	nop
 8013758:	24004fcc 	.word	0x24004fcc

0801375c <__malloc_unlock>:
 801375c:	4801      	ldr	r0, [pc, #4]	; (8013764 <__malloc_unlock+0x8>)
 801375e:	f7ff bf90 	b.w	8013682 <__retarget_lock_release_recursive>
 8013762:	bf00      	nop
 8013764:	24004fcc 	.word	0x24004fcc

08013768 <__sfputc_r>:
 8013768:	6893      	ldr	r3, [r2, #8]
 801376a:	3b01      	subs	r3, #1
 801376c:	2b00      	cmp	r3, #0
 801376e:	b410      	push	{r4}
 8013770:	6093      	str	r3, [r2, #8]
 8013772:	da08      	bge.n	8013786 <__sfputc_r+0x1e>
 8013774:	6994      	ldr	r4, [r2, #24]
 8013776:	42a3      	cmp	r3, r4
 8013778:	db01      	blt.n	801377e <__sfputc_r+0x16>
 801377a:	290a      	cmp	r1, #10
 801377c:	d103      	bne.n	8013786 <__sfputc_r+0x1e>
 801377e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013782:	f7ff bd05 	b.w	8013190 <__swbuf_r>
 8013786:	6813      	ldr	r3, [r2, #0]
 8013788:	1c58      	adds	r0, r3, #1
 801378a:	6010      	str	r0, [r2, #0]
 801378c:	7019      	strb	r1, [r3, #0]
 801378e:	4608      	mov	r0, r1
 8013790:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013794:	4770      	bx	lr

08013796 <__sfputs_r>:
 8013796:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013798:	4606      	mov	r6, r0
 801379a:	460f      	mov	r7, r1
 801379c:	4614      	mov	r4, r2
 801379e:	18d5      	adds	r5, r2, r3
 80137a0:	42ac      	cmp	r4, r5
 80137a2:	d101      	bne.n	80137a8 <__sfputs_r+0x12>
 80137a4:	2000      	movs	r0, #0
 80137a6:	e007      	b.n	80137b8 <__sfputs_r+0x22>
 80137a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80137ac:	463a      	mov	r2, r7
 80137ae:	4630      	mov	r0, r6
 80137b0:	f7ff ffda 	bl	8013768 <__sfputc_r>
 80137b4:	1c43      	adds	r3, r0, #1
 80137b6:	d1f3      	bne.n	80137a0 <__sfputs_r+0xa>
 80137b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080137bc <_vfiprintf_r>:
 80137bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137c0:	460d      	mov	r5, r1
 80137c2:	b09d      	sub	sp, #116	; 0x74
 80137c4:	4614      	mov	r4, r2
 80137c6:	4698      	mov	r8, r3
 80137c8:	4606      	mov	r6, r0
 80137ca:	b118      	cbz	r0, 80137d4 <_vfiprintf_r+0x18>
 80137cc:	6983      	ldr	r3, [r0, #24]
 80137ce:	b90b      	cbnz	r3, 80137d4 <_vfiprintf_r+0x18>
 80137d0:	f7ff feb8 	bl	8013544 <__sinit>
 80137d4:	4b89      	ldr	r3, [pc, #548]	; (80139fc <_vfiprintf_r+0x240>)
 80137d6:	429d      	cmp	r5, r3
 80137d8:	d11b      	bne.n	8013812 <_vfiprintf_r+0x56>
 80137da:	6875      	ldr	r5, [r6, #4]
 80137dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80137de:	07d9      	lsls	r1, r3, #31
 80137e0:	d405      	bmi.n	80137ee <_vfiprintf_r+0x32>
 80137e2:	89ab      	ldrh	r3, [r5, #12]
 80137e4:	059a      	lsls	r2, r3, #22
 80137e6:	d402      	bmi.n	80137ee <_vfiprintf_r+0x32>
 80137e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80137ea:	f7ff ff49 	bl	8013680 <__retarget_lock_acquire_recursive>
 80137ee:	89ab      	ldrh	r3, [r5, #12]
 80137f0:	071b      	lsls	r3, r3, #28
 80137f2:	d501      	bpl.n	80137f8 <_vfiprintf_r+0x3c>
 80137f4:	692b      	ldr	r3, [r5, #16]
 80137f6:	b9eb      	cbnz	r3, 8013834 <_vfiprintf_r+0x78>
 80137f8:	4629      	mov	r1, r5
 80137fa:	4630      	mov	r0, r6
 80137fc:	f7ff fd1a 	bl	8013234 <__swsetup_r>
 8013800:	b1c0      	cbz	r0, 8013834 <_vfiprintf_r+0x78>
 8013802:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013804:	07dc      	lsls	r4, r3, #31
 8013806:	d50e      	bpl.n	8013826 <_vfiprintf_r+0x6a>
 8013808:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801380c:	b01d      	add	sp, #116	; 0x74
 801380e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013812:	4b7b      	ldr	r3, [pc, #492]	; (8013a00 <_vfiprintf_r+0x244>)
 8013814:	429d      	cmp	r5, r3
 8013816:	d101      	bne.n	801381c <_vfiprintf_r+0x60>
 8013818:	68b5      	ldr	r5, [r6, #8]
 801381a:	e7df      	b.n	80137dc <_vfiprintf_r+0x20>
 801381c:	4b79      	ldr	r3, [pc, #484]	; (8013a04 <_vfiprintf_r+0x248>)
 801381e:	429d      	cmp	r5, r3
 8013820:	bf08      	it	eq
 8013822:	68f5      	ldreq	r5, [r6, #12]
 8013824:	e7da      	b.n	80137dc <_vfiprintf_r+0x20>
 8013826:	89ab      	ldrh	r3, [r5, #12]
 8013828:	0598      	lsls	r0, r3, #22
 801382a:	d4ed      	bmi.n	8013808 <_vfiprintf_r+0x4c>
 801382c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801382e:	f7ff ff28 	bl	8013682 <__retarget_lock_release_recursive>
 8013832:	e7e9      	b.n	8013808 <_vfiprintf_r+0x4c>
 8013834:	2300      	movs	r3, #0
 8013836:	9309      	str	r3, [sp, #36]	; 0x24
 8013838:	2320      	movs	r3, #32
 801383a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801383e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013842:	2330      	movs	r3, #48	; 0x30
 8013844:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013a08 <_vfiprintf_r+0x24c>
 8013848:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801384c:	f04f 0901 	mov.w	r9, #1
 8013850:	4623      	mov	r3, r4
 8013852:	469a      	mov	sl, r3
 8013854:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013858:	b10a      	cbz	r2, 801385e <_vfiprintf_r+0xa2>
 801385a:	2a25      	cmp	r2, #37	; 0x25
 801385c:	d1f9      	bne.n	8013852 <_vfiprintf_r+0x96>
 801385e:	ebba 0b04 	subs.w	fp, sl, r4
 8013862:	d00b      	beq.n	801387c <_vfiprintf_r+0xc0>
 8013864:	465b      	mov	r3, fp
 8013866:	4622      	mov	r2, r4
 8013868:	4629      	mov	r1, r5
 801386a:	4630      	mov	r0, r6
 801386c:	f7ff ff93 	bl	8013796 <__sfputs_r>
 8013870:	3001      	adds	r0, #1
 8013872:	f000 80aa 	beq.w	80139ca <_vfiprintf_r+0x20e>
 8013876:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013878:	445a      	add	r2, fp
 801387a:	9209      	str	r2, [sp, #36]	; 0x24
 801387c:	f89a 3000 	ldrb.w	r3, [sl]
 8013880:	2b00      	cmp	r3, #0
 8013882:	f000 80a2 	beq.w	80139ca <_vfiprintf_r+0x20e>
 8013886:	2300      	movs	r3, #0
 8013888:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801388c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013890:	f10a 0a01 	add.w	sl, sl, #1
 8013894:	9304      	str	r3, [sp, #16]
 8013896:	9307      	str	r3, [sp, #28]
 8013898:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801389c:	931a      	str	r3, [sp, #104]	; 0x68
 801389e:	4654      	mov	r4, sl
 80138a0:	2205      	movs	r2, #5
 80138a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80138a6:	4858      	ldr	r0, [pc, #352]	; (8013a08 <_vfiprintf_r+0x24c>)
 80138a8:	f7ec fd32 	bl	8000310 <memchr>
 80138ac:	9a04      	ldr	r2, [sp, #16]
 80138ae:	b9d8      	cbnz	r0, 80138e8 <_vfiprintf_r+0x12c>
 80138b0:	06d1      	lsls	r1, r2, #27
 80138b2:	bf44      	itt	mi
 80138b4:	2320      	movmi	r3, #32
 80138b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80138ba:	0713      	lsls	r3, r2, #28
 80138bc:	bf44      	itt	mi
 80138be:	232b      	movmi	r3, #43	; 0x2b
 80138c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80138c4:	f89a 3000 	ldrb.w	r3, [sl]
 80138c8:	2b2a      	cmp	r3, #42	; 0x2a
 80138ca:	d015      	beq.n	80138f8 <_vfiprintf_r+0x13c>
 80138cc:	9a07      	ldr	r2, [sp, #28]
 80138ce:	4654      	mov	r4, sl
 80138d0:	2000      	movs	r0, #0
 80138d2:	f04f 0c0a 	mov.w	ip, #10
 80138d6:	4621      	mov	r1, r4
 80138d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80138dc:	3b30      	subs	r3, #48	; 0x30
 80138de:	2b09      	cmp	r3, #9
 80138e0:	d94e      	bls.n	8013980 <_vfiprintf_r+0x1c4>
 80138e2:	b1b0      	cbz	r0, 8013912 <_vfiprintf_r+0x156>
 80138e4:	9207      	str	r2, [sp, #28]
 80138e6:	e014      	b.n	8013912 <_vfiprintf_r+0x156>
 80138e8:	eba0 0308 	sub.w	r3, r0, r8
 80138ec:	fa09 f303 	lsl.w	r3, r9, r3
 80138f0:	4313      	orrs	r3, r2
 80138f2:	9304      	str	r3, [sp, #16]
 80138f4:	46a2      	mov	sl, r4
 80138f6:	e7d2      	b.n	801389e <_vfiprintf_r+0xe2>
 80138f8:	9b03      	ldr	r3, [sp, #12]
 80138fa:	1d19      	adds	r1, r3, #4
 80138fc:	681b      	ldr	r3, [r3, #0]
 80138fe:	9103      	str	r1, [sp, #12]
 8013900:	2b00      	cmp	r3, #0
 8013902:	bfbb      	ittet	lt
 8013904:	425b      	neglt	r3, r3
 8013906:	f042 0202 	orrlt.w	r2, r2, #2
 801390a:	9307      	strge	r3, [sp, #28]
 801390c:	9307      	strlt	r3, [sp, #28]
 801390e:	bfb8      	it	lt
 8013910:	9204      	strlt	r2, [sp, #16]
 8013912:	7823      	ldrb	r3, [r4, #0]
 8013914:	2b2e      	cmp	r3, #46	; 0x2e
 8013916:	d10c      	bne.n	8013932 <_vfiprintf_r+0x176>
 8013918:	7863      	ldrb	r3, [r4, #1]
 801391a:	2b2a      	cmp	r3, #42	; 0x2a
 801391c:	d135      	bne.n	801398a <_vfiprintf_r+0x1ce>
 801391e:	9b03      	ldr	r3, [sp, #12]
 8013920:	1d1a      	adds	r2, r3, #4
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	9203      	str	r2, [sp, #12]
 8013926:	2b00      	cmp	r3, #0
 8013928:	bfb8      	it	lt
 801392a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801392e:	3402      	adds	r4, #2
 8013930:	9305      	str	r3, [sp, #20]
 8013932:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013a18 <_vfiprintf_r+0x25c>
 8013936:	7821      	ldrb	r1, [r4, #0]
 8013938:	2203      	movs	r2, #3
 801393a:	4650      	mov	r0, sl
 801393c:	f7ec fce8 	bl	8000310 <memchr>
 8013940:	b140      	cbz	r0, 8013954 <_vfiprintf_r+0x198>
 8013942:	2340      	movs	r3, #64	; 0x40
 8013944:	eba0 000a 	sub.w	r0, r0, sl
 8013948:	fa03 f000 	lsl.w	r0, r3, r0
 801394c:	9b04      	ldr	r3, [sp, #16]
 801394e:	4303      	orrs	r3, r0
 8013950:	3401      	adds	r4, #1
 8013952:	9304      	str	r3, [sp, #16]
 8013954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013958:	482c      	ldr	r0, [pc, #176]	; (8013a0c <_vfiprintf_r+0x250>)
 801395a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801395e:	2206      	movs	r2, #6
 8013960:	f7ec fcd6 	bl	8000310 <memchr>
 8013964:	2800      	cmp	r0, #0
 8013966:	d03f      	beq.n	80139e8 <_vfiprintf_r+0x22c>
 8013968:	4b29      	ldr	r3, [pc, #164]	; (8013a10 <_vfiprintf_r+0x254>)
 801396a:	bb1b      	cbnz	r3, 80139b4 <_vfiprintf_r+0x1f8>
 801396c:	9b03      	ldr	r3, [sp, #12]
 801396e:	3307      	adds	r3, #7
 8013970:	f023 0307 	bic.w	r3, r3, #7
 8013974:	3308      	adds	r3, #8
 8013976:	9303      	str	r3, [sp, #12]
 8013978:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801397a:	443b      	add	r3, r7
 801397c:	9309      	str	r3, [sp, #36]	; 0x24
 801397e:	e767      	b.n	8013850 <_vfiprintf_r+0x94>
 8013980:	fb0c 3202 	mla	r2, ip, r2, r3
 8013984:	460c      	mov	r4, r1
 8013986:	2001      	movs	r0, #1
 8013988:	e7a5      	b.n	80138d6 <_vfiprintf_r+0x11a>
 801398a:	2300      	movs	r3, #0
 801398c:	3401      	adds	r4, #1
 801398e:	9305      	str	r3, [sp, #20]
 8013990:	4619      	mov	r1, r3
 8013992:	f04f 0c0a 	mov.w	ip, #10
 8013996:	4620      	mov	r0, r4
 8013998:	f810 2b01 	ldrb.w	r2, [r0], #1
 801399c:	3a30      	subs	r2, #48	; 0x30
 801399e:	2a09      	cmp	r2, #9
 80139a0:	d903      	bls.n	80139aa <_vfiprintf_r+0x1ee>
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d0c5      	beq.n	8013932 <_vfiprintf_r+0x176>
 80139a6:	9105      	str	r1, [sp, #20]
 80139a8:	e7c3      	b.n	8013932 <_vfiprintf_r+0x176>
 80139aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80139ae:	4604      	mov	r4, r0
 80139b0:	2301      	movs	r3, #1
 80139b2:	e7f0      	b.n	8013996 <_vfiprintf_r+0x1da>
 80139b4:	ab03      	add	r3, sp, #12
 80139b6:	9300      	str	r3, [sp, #0]
 80139b8:	462a      	mov	r2, r5
 80139ba:	4b16      	ldr	r3, [pc, #88]	; (8013a14 <_vfiprintf_r+0x258>)
 80139bc:	a904      	add	r1, sp, #16
 80139be:	4630      	mov	r0, r6
 80139c0:	f3af 8000 	nop.w
 80139c4:	4607      	mov	r7, r0
 80139c6:	1c78      	adds	r0, r7, #1
 80139c8:	d1d6      	bne.n	8013978 <_vfiprintf_r+0x1bc>
 80139ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80139cc:	07d9      	lsls	r1, r3, #31
 80139ce:	d405      	bmi.n	80139dc <_vfiprintf_r+0x220>
 80139d0:	89ab      	ldrh	r3, [r5, #12]
 80139d2:	059a      	lsls	r2, r3, #22
 80139d4:	d402      	bmi.n	80139dc <_vfiprintf_r+0x220>
 80139d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80139d8:	f7ff fe53 	bl	8013682 <__retarget_lock_release_recursive>
 80139dc:	89ab      	ldrh	r3, [r5, #12]
 80139de:	065b      	lsls	r3, r3, #25
 80139e0:	f53f af12 	bmi.w	8013808 <_vfiprintf_r+0x4c>
 80139e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80139e6:	e711      	b.n	801380c <_vfiprintf_r+0x50>
 80139e8:	ab03      	add	r3, sp, #12
 80139ea:	9300      	str	r3, [sp, #0]
 80139ec:	462a      	mov	r2, r5
 80139ee:	4b09      	ldr	r3, [pc, #36]	; (8013a14 <_vfiprintf_r+0x258>)
 80139f0:	a904      	add	r1, sp, #16
 80139f2:	4630      	mov	r0, r6
 80139f4:	f000 f880 	bl	8013af8 <_printf_i>
 80139f8:	e7e4      	b.n	80139c4 <_vfiprintf_r+0x208>
 80139fa:	bf00      	nop
 80139fc:	0801405c 	.word	0x0801405c
 8013a00:	0801407c 	.word	0x0801407c
 8013a04:	0801403c 	.word	0x0801403c
 8013a08:	0801409c 	.word	0x0801409c
 8013a0c:	080140a6 	.word	0x080140a6
 8013a10:	00000000 	.word	0x00000000
 8013a14:	08013797 	.word	0x08013797
 8013a18:	080140a2 	.word	0x080140a2

08013a1c <_printf_common>:
 8013a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a20:	4616      	mov	r6, r2
 8013a22:	4699      	mov	r9, r3
 8013a24:	688a      	ldr	r2, [r1, #8]
 8013a26:	690b      	ldr	r3, [r1, #16]
 8013a28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013a2c:	4293      	cmp	r3, r2
 8013a2e:	bfb8      	it	lt
 8013a30:	4613      	movlt	r3, r2
 8013a32:	6033      	str	r3, [r6, #0]
 8013a34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013a38:	4607      	mov	r7, r0
 8013a3a:	460c      	mov	r4, r1
 8013a3c:	b10a      	cbz	r2, 8013a42 <_printf_common+0x26>
 8013a3e:	3301      	adds	r3, #1
 8013a40:	6033      	str	r3, [r6, #0]
 8013a42:	6823      	ldr	r3, [r4, #0]
 8013a44:	0699      	lsls	r1, r3, #26
 8013a46:	bf42      	ittt	mi
 8013a48:	6833      	ldrmi	r3, [r6, #0]
 8013a4a:	3302      	addmi	r3, #2
 8013a4c:	6033      	strmi	r3, [r6, #0]
 8013a4e:	6825      	ldr	r5, [r4, #0]
 8013a50:	f015 0506 	ands.w	r5, r5, #6
 8013a54:	d106      	bne.n	8013a64 <_printf_common+0x48>
 8013a56:	f104 0a19 	add.w	sl, r4, #25
 8013a5a:	68e3      	ldr	r3, [r4, #12]
 8013a5c:	6832      	ldr	r2, [r6, #0]
 8013a5e:	1a9b      	subs	r3, r3, r2
 8013a60:	42ab      	cmp	r3, r5
 8013a62:	dc26      	bgt.n	8013ab2 <_printf_common+0x96>
 8013a64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013a68:	1e13      	subs	r3, r2, #0
 8013a6a:	6822      	ldr	r2, [r4, #0]
 8013a6c:	bf18      	it	ne
 8013a6e:	2301      	movne	r3, #1
 8013a70:	0692      	lsls	r2, r2, #26
 8013a72:	d42b      	bmi.n	8013acc <_printf_common+0xb0>
 8013a74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013a78:	4649      	mov	r1, r9
 8013a7a:	4638      	mov	r0, r7
 8013a7c:	47c0      	blx	r8
 8013a7e:	3001      	adds	r0, #1
 8013a80:	d01e      	beq.n	8013ac0 <_printf_common+0xa4>
 8013a82:	6823      	ldr	r3, [r4, #0]
 8013a84:	68e5      	ldr	r5, [r4, #12]
 8013a86:	6832      	ldr	r2, [r6, #0]
 8013a88:	f003 0306 	and.w	r3, r3, #6
 8013a8c:	2b04      	cmp	r3, #4
 8013a8e:	bf08      	it	eq
 8013a90:	1aad      	subeq	r5, r5, r2
 8013a92:	68a3      	ldr	r3, [r4, #8]
 8013a94:	6922      	ldr	r2, [r4, #16]
 8013a96:	bf0c      	ite	eq
 8013a98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013a9c:	2500      	movne	r5, #0
 8013a9e:	4293      	cmp	r3, r2
 8013aa0:	bfc4      	itt	gt
 8013aa2:	1a9b      	subgt	r3, r3, r2
 8013aa4:	18ed      	addgt	r5, r5, r3
 8013aa6:	2600      	movs	r6, #0
 8013aa8:	341a      	adds	r4, #26
 8013aaa:	42b5      	cmp	r5, r6
 8013aac:	d11a      	bne.n	8013ae4 <_printf_common+0xc8>
 8013aae:	2000      	movs	r0, #0
 8013ab0:	e008      	b.n	8013ac4 <_printf_common+0xa8>
 8013ab2:	2301      	movs	r3, #1
 8013ab4:	4652      	mov	r2, sl
 8013ab6:	4649      	mov	r1, r9
 8013ab8:	4638      	mov	r0, r7
 8013aba:	47c0      	blx	r8
 8013abc:	3001      	adds	r0, #1
 8013abe:	d103      	bne.n	8013ac8 <_printf_common+0xac>
 8013ac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ac8:	3501      	adds	r5, #1
 8013aca:	e7c6      	b.n	8013a5a <_printf_common+0x3e>
 8013acc:	18e1      	adds	r1, r4, r3
 8013ace:	1c5a      	adds	r2, r3, #1
 8013ad0:	2030      	movs	r0, #48	; 0x30
 8013ad2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013ad6:	4422      	add	r2, r4
 8013ad8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013adc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013ae0:	3302      	adds	r3, #2
 8013ae2:	e7c7      	b.n	8013a74 <_printf_common+0x58>
 8013ae4:	2301      	movs	r3, #1
 8013ae6:	4622      	mov	r2, r4
 8013ae8:	4649      	mov	r1, r9
 8013aea:	4638      	mov	r0, r7
 8013aec:	47c0      	blx	r8
 8013aee:	3001      	adds	r0, #1
 8013af0:	d0e6      	beq.n	8013ac0 <_printf_common+0xa4>
 8013af2:	3601      	adds	r6, #1
 8013af4:	e7d9      	b.n	8013aaa <_printf_common+0x8e>
	...

08013af8 <_printf_i>:
 8013af8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013afc:	7e0f      	ldrb	r7, [r1, #24]
 8013afe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013b00:	2f78      	cmp	r7, #120	; 0x78
 8013b02:	4691      	mov	r9, r2
 8013b04:	4680      	mov	r8, r0
 8013b06:	460c      	mov	r4, r1
 8013b08:	469a      	mov	sl, r3
 8013b0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013b0e:	d807      	bhi.n	8013b20 <_printf_i+0x28>
 8013b10:	2f62      	cmp	r7, #98	; 0x62
 8013b12:	d80a      	bhi.n	8013b2a <_printf_i+0x32>
 8013b14:	2f00      	cmp	r7, #0
 8013b16:	f000 80d8 	beq.w	8013cca <_printf_i+0x1d2>
 8013b1a:	2f58      	cmp	r7, #88	; 0x58
 8013b1c:	f000 80a3 	beq.w	8013c66 <_printf_i+0x16e>
 8013b20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013b24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013b28:	e03a      	b.n	8013ba0 <_printf_i+0xa8>
 8013b2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013b2e:	2b15      	cmp	r3, #21
 8013b30:	d8f6      	bhi.n	8013b20 <_printf_i+0x28>
 8013b32:	a101      	add	r1, pc, #4	; (adr r1, 8013b38 <_printf_i+0x40>)
 8013b34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013b38:	08013b91 	.word	0x08013b91
 8013b3c:	08013ba5 	.word	0x08013ba5
 8013b40:	08013b21 	.word	0x08013b21
 8013b44:	08013b21 	.word	0x08013b21
 8013b48:	08013b21 	.word	0x08013b21
 8013b4c:	08013b21 	.word	0x08013b21
 8013b50:	08013ba5 	.word	0x08013ba5
 8013b54:	08013b21 	.word	0x08013b21
 8013b58:	08013b21 	.word	0x08013b21
 8013b5c:	08013b21 	.word	0x08013b21
 8013b60:	08013b21 	.word	0x08013b21
 8013b64:	08013cb1 	.word	0x08013cb1
 8013b68:	08013bd5 	.word	0x08013bd5
 8013b6c:	08013c93 	.word	0x08013c93
 8013b70:	08013b21 	.word	0x08013b21
 8013b74:	08013b21 	.word	0x08013b21
 8013b78:	08013cd3 	.word	0x08013cd3
 8013b7c:	08013b21 	.word	0x08013b21
 8013b80:	08013bd5 	.word	0x08013bd5
 8013b84:	08013b21 	.word	0x08013b21
 8013b88:	08013b21 	.word	0x08013b21
 8013b8c:	08013c9b 	.word	0x08013c9b
 8013b90:	682b      	ldr	r3, [r5, #0]
 8013b92:	1d1a      	adds	r2, r3, #4
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	602a      	str	r2, [r5, #0]
 8013b98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013b9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013ba0:	2301      	movs	r3, #1
 8013ba2:	e0a3      	b.n	8013cec <_printf_i+0x1f4>
 8013ba4:	6820      	ldr	r0, [r4, #0]
 8013ba6:	6829      	ldr	r1, [r5, #0]
 8013ba8:	0606      	lsls	r6, r0, #24
 8013baa:	f101 0304 	add.w	r3, r1, #4
 8013bae:	d50a      	bpl.n	8013bc6 <_printf_i+0xce>
 8013bb0:	680e      	ldr	r6, [r1, #0]
 8013bb2:	602b      	str	r3, [r5, #0]
 8013bb4:	2e00      	cmp	r6, #0
 8013bb6:	da03      	bge.n	8013bc0 <_printf_i+0xc8>
 8013bb8:	232d      	movs	r3, #45	; 0x2d
 8013bba:	4276      	negs	r6, r6
 8013bbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013bc0:	485e      	ldr	r0, [pc, #376]	; (8013d3c <_printf_i+0x244>)
 8013bc2:	230a      	movs	r3, #10
 8013bc4:	e019      	b.n	8013bfa <_printf_i+0x102>
 8013bc6:	680e      	ldr	r6, [r1, #0]
 8013bc8:	602b      	str	r3, [r5, #0]
 8013bca:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013bce:	bf18      	it	ne
 8013bd0:	b236      	sxthne	r6, r6
 8013bd2:	e7ef      	b.n	8013bb4 <_printf_i+0xbc>
 8013bd4:	682b      	ldr	r3, [r5, #0]
 8013bd6:	6820      	ldr	r0, [r4, #0]
 8013bd8:	1d19      	adds	r1, r3, #4
 8013bda:	6029      	str	r1, [r5, #0]
 8013bdc:	0601      	lsls	r1, r0, #24
 8013bde:	d501      	bpl.n	8013be4 <_printf_i+0xec>
 8013be0:	681e      	ldr	r6, [r3, #0]
 8013be2:	e002      	b.n	8013bea <_printf_i+0xf2>
 8013be4:	0646      	lsls	r6, r0, #25
 8013be6:	d5fb      	bpl.n	8013be0 <_printf_i+0xe8>
 8013be8:	881e      	ldrh	r6, [r3, #0]
 8013bea:	4854      	ldr	r0, [pc, #336]	; (8013d3c <_printf_i+0x244>)
 8013bec:	2f6f      	cmp	r7, #111	; 0x6f
 8013bee:	bf0c      	ite	eq
 8013bf0:	2308      	moveq	r3, #8
 8013bf2:	230a      	movne	r3, #10
 8013bf4:	2100      	movs	r1, #0
 8013bf6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013bfa:	6865      	ldr	r5, [r4, #4]
 8013bfc:	60a5      	str	r5, [r4, #8]
 8013bfe:	2d00      	cmp	r5, #0
 8013c00:	bfa2      	ittt	ge
 8013c02:	6821      	ldrge	r1, [r4, #0]
 8013c04:	f021 0104 	bicge.w	r1, r1, #4
 8013c08:	6021      	strge	r1, [r4, #0]
 8013c0a:	b90e      	cbnz	r6, 8013c10 <_printf_i+0x118>
 8013c0c:	2d00      	cmp	r5, #0
 8013c0e:	d04d      	beq.n	8013cac <_printf_i+0x1b4>
 8013c10:	4615      	mov	r5, r2
 8013c12:	fbb6 f1f3 	udiv	r1, r6, r3
 8013c16:	fb03 6711 	mls	r7, r3, r1, r6
 8013c1a:	5dc7      	ldrb	r7, [r0, r7]
 8013c1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013c20:	4637      	mov	r7, r6
 8013c22:	42bb      	cmp	r3, r7
 8013c24:	460e      	mov	r6, r1
 8013c26:	d9f4      	bls.n	8013c12 <_printf_i+0x11a>
 8013c28:	2b08      	cmp	r3, #8
 8013c2a:	d10b      	bne.n	8013c44 <_printf_i+0x14c>
 8013c2c:	6823      	ldr	r3, [r4, #0]
 8013c2e:	07de      	lsls	r6, r3, #31
 8013c30:	d508      	bpl.n	8013c44 <_printf_i+0x14c>
 8013c32:	6923      	ldr	r3, [r4, #16]
 8013c34:	6861      	ldr	r1, [r4, #4]
 8013c36:	4299      	cmp	r1, r3
 8013c38:	bfde      	ittt	le
 8013c3a:	2330      	movle	r3, #48	; 0x30
 8013c3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013c40:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8013c44:	1b52      	subs	r2, r2, r5
 8013c46:	6122      	str	r2, [r4, #16]
 8013c48:	f8cd a000 	str.w	sl, [sp]
 8013c4c:	464b      	mov	r3, r9
 8013c4e:	aa03      	add	r2, sp, #12
 8013c50:	4621      	mov	r1, r4
 8013c52:	4640      	mov	r0, r8
 8013c54:	f7ff fee2 	bl	8013a1c <_printf_common>
 8013c58:	3001      	adds	r0, #1
 8013c5a:	d14c      	bne.n	8013cf6 <_printf_i+0x1fe>
 8013c5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013c60:	b004      	add	sp, #16
 8013c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c66:	4835      	ldr	r0, [pc, #212]	; (8013d3c <_printf_i+0x244>)
 8013c68:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013c6c:	6829      	ldr	r1, [r5, #0]
 8013c6e:	6823      	ldr	r3, [r4, #0]
 8013c70:	f851 6b04 	ldr.w	r6, [r1], #4
 8013c74:	6029      	str	r1, [r5, #0]
 8013c76:	061d      	lsls	r5, r3, #24
 8013c78:	d514      	bpl.n	8013ca4 <_printf_i+0x1ac>
 8013c7a:	07df      	lsls	r7, r3, #31
 8013c7c:	bf44      	itt	mi
 8013c7e:	f043 0320 	orrmi.w	r3, r3, #32
 8013c82:	6023      	strmi	r3, [r4, #0]
 8013c84:	b91e      	cbnz	r6, 8013c8e <_printf_i+0x196>
 8013c86:	6823      	ldr	r3, [r4, #0]
 8013c88:	f023 0320 	bic.w	r3, r3, #32
 8013c8c:	6023      	str	r3, [r4, #0]
 8013c8e:	2310      	movs	r3, #16
 8013c90:	e7b0      	b.n	8013bf4 <_printf_i+0xfc>
 8013c92:	6823      	ldr	r3, [r4, #0]
 8013c94:	f043 0320 	orr.w	r3, r3, #32
 8013c98:	6023      	str	r3, [r4, #0]
 8013c9a:	2378      	movs	r3, #120	; 0x78
 8013c9c:	4828      	ldr	r0, [pc, #160]	; (8013d40 <_printf_i+0x248>)
 8013c9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013ca2:	e7e3      	b.n	8013c6c <_printf_i+0x174>
 8013ca4:	0659      	lsls	r1, r3, #25
 8013ca6:	bf48      	it	mi
 8013ca8:	b2b6      	uxthmi	r6, r6
 8013caa:	e7e6      	b.n	8013c7a <_printf_i+0x182>
 8013cac:	4615      	mov	r5, r2
 8013cae:	e7bb      	b.n	8013c28 <_printf_i+0x130>
 8013cb0:	682b      	ldr	r3, [r5, #0]
 8013cb2:	6826      	ldr	r6, [r4, #0]
 8013cb4:	6961      	ldr	r1, [r4, #20]
 8013cb6:	1d18      	adds	r0, r3, #4
 8013cb8:	6028      	str	r0, [r5, #0]
 8013cba:	0635      	lsls	r5, r6, #24
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	d501      	bpl.n	8013cc4 <_printf_i+0x1cc>
 8013cc0:	6019      	str	r1, [r3, #0]
 8013cc2:	e002      	b.n	8013cca <_printf_i+0x1d2>
 8013cc4:	0670      	lsls	r0, r6, #25
 8013cc6:	d5fb      	bpl.n	8013cc0 <_printf_i+0x1c8>
 8013cc8:	8019      	strh	r1, [r3, #0]
 8013cca:	2300      	movs	r3, #0
 8013ccc:	6123      	str	r3, [r4, #16]
 8013cce:	4615      	mov	r5, r2
 8013cd0:	e7ba      	b.n	8013c48 <_printf_i+0x150>
 8013cd2:	682b      	ldr	r3, [r5, #0]
 8013cd4:	1d1a      	adds	r2, r3, #4
 8013cd6:	602a      	str	r2, [r5, #0]
 8013cd8:	681d      	ldr	r5, [r3, #0]
 8013cda:	6862      	ldr	r2, [r4, #4]
 8013cdc:	2100      	movs	r1, #0
 8013cde:	4628      	mov	r0, r5
 8013ce0:	f7ec fb16 	bl	8000310 <memchr>
 8013ce4:	b108      	cbz	r0, 8013cea <_printf_i+0x1f2>
 8013ce6:	1b40      	subs	r0, r0, r5
 8013ce8:	6060      	str	r0, [r4, #4]
 8013cea:	6863      	ldr	r3, [r4, #4]
 8013cec:	6123      	str	r3, [r4, #16]
 8013cee:	2300      	movs	r3, #0
 8013cf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013cf4:	e7a8      	b.n	8013c48 <_printf_i+0x150>
 8013cf6:	6923      	ldr	r3, [r4, #16]
 8013cf8:	462a      	mov	r2, r5
 8013cfa:	4649      	mov	r1, r9
 8013cfc:	4640      	mov	r0, r8
 8013cfe:	47d0      	blx	sl
 8013d00:	3001      	adds	r0, #1
 8013d02:	d0ab      	beq.n	8013c5c <_printf_i+0x164>
 8013d04:	6823      	ldr	r3, [r4, #0]
 8013d06:	079b      	lsls	r3, r3, #30
 8013d08:	d413      	bmi.n	8013d32 <_printf_i+0x23a>
 8013d0a:	68e0      	ldr	r0, [r4, #12]
 8013d0c:	9b03      	ldr	r3, [sp, #12]
 8013d0e:	4298      	cmp	r0, r3
 8013d10:	bfb8      	it	lt
 8013d12:	4618      	movlt	r0, r3
 8013d14:	e7a4      	b.n	8013c60 <_printf_i+0x168>
 8013d16:	2301      	movs	r3, #1
 8013d18:	4632      	mov	r2, r6
 8013d1a:	4649      	mov	r1, r9
 8013d1c:	4640      	mov	r0, r8
 8013d1e:	47d0      	blx	sl
 8013d20:	3001      	adds	r0, #1
 8013d22:	d09b      	beq.n	8013c5c <_printf_i+0x164>
 8013d24:	3501      	adds	r5, #1
 8013d26:	68e3      	ldr	r3, [r4, #12]
 8013d28:	9903      	ldr	r1, [sp, #12]
 8013d2a:	1a5b      	subs	r3, r3, r1
 8013d2c:	42ab      	cmp	r3, r5
 8013d2e:	dcf2      	bgt.n	8013d16 <_printf_i+0x21e>
 8013d30:	e7eb      	b.n	8013d0a <_printf_i+0x212>
 8013d32:	2500      	movs	r5, #0
 8013d34:	f104 0619 	add.w	r6, r4, #25
 8013d38:	e7f5      	b.n	8013d26 <_printf_i+0x22e>
 8013d3a:	bf00      	nop
 8013d3c:	080140ad 	.word	0x080140ad
 8013d40:	080140be 	.word	0x080140be

08013d44 <__sread>:
 8013d44:	b510      	push	{r4, lr}
 8013d46:	460c      	mov	r4, r1
 8013d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d4c:	f000 f894 	bl	8013e78 <_read_r>
 8013d50:	2800      	cmp	r0, #0
 8013d52:	bfab      	itete	ge
 8013d54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013d56:	89a3      	ldrhlt	r3, [r4, #12]
 8013d58:	181b      	addge	r3, r3, r0
 8013d5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013d5e:	bfac      	ite	ge
 8013d60:	6563      	strge	r3, [r4, #84]	; 0x54
 8013d62:	81a3      	strhlt	r3, [r4, #12]
 8013d64:	bd10      	pop	{r4, pc}

08013d66 <__swrite>:
 8013d66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d6a:	461f      	mov	r7, r3
 8013d6c:	898b      	ldrh	r3, [r1, #12]
 8013d6e:	05db      	lsls	r3, r3, #23
 8013d70:	4605      	mov	r5, r0
 8013d72:	460c      	mov	r4, r1
 8013d74:	4616      	mov	r6, r2
 8013d76:	d505      	bpl.n	8013d84 <__swrite+0x1e>
 8013d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d7c:	2302      	movs	r3, #2
 8013d7e:	2200      	movs	r2, #0
 8013d80:	f000 f868 	bl	8013e54 <_lseek_r>
 8013d84:	89a3      	ldrh	r3, [r4, #12]
 8013d86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013d8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013d8e:	81a3      	strh	r3, [r4, #12]
 8013d90:	4632      	mov	r2, r6
 8013d92:	463b      	mov	r3, r7
 8013d94:	4628      	mov	r0, r5
 8013d96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013d9a:	f000 b817 	b.w	8013dcc <_write_r>

08013d9e <__sseek>:
 8013d9e:	b510      	push	{r4, lr}
 8013da0:	460c      	mov	r4, r1
 8013da2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013da6:	f000 f855 	bl	8013e54 <_lseek_r>
 8013daa:	1c43      	adds	r3, r0, #1
 8013dac:	89a3      	ldrh	r3, [r4, #12]
 8013dae:	bf15      	itete	ne
 8013db0:	6560      	strne	r0, [r4, #84]	; 0x54
 8013db2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013db6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013dba:	81a3      	strheq	r3, [r4, #12]
 8013dbc:	bf18      	it	ne
 8013dbe:	81a3      	strhne	r3, [r4, #12]
 8013dc0:	bd10      	pop	{r4, pc}

08013dc2 <__sclose>:
 8013dc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013dc6:	f000 b813 	b.w	8013df0 <_close_r>
	...

08013dcc <_write_r>:
 8013dcc:	b538      	push	{r3, r4, r5, lr}
 8013dce:	4d07      	ldr	r5, [pc, #28]	; (8013dec <_write_r+0x20>)
 8013dd0:	4604      	mov	r4, r0
 8013dd2:	4608      	mov	r0, r1
 8013dd4:	4611      	mov	r1, r2
 8013dd6:	2200      	movs	r2, #0
 8013dd8:	602a      	str	r2, [r5, #0]
 8013dda:	461a      	mov	r2, r3
 8013ddc:	f7ec fc9e 	bl	800071c <_write>
 8013de0:	1c43      	adds	r3, r0, #1
 8013de2:	d102      	bne.n	8013dea <_write_r+0x1e>
 8013de4:	682b      	ldr	r3, [r5, #0]
 8013de6:	b103      	cbz	r3, 8013dea <_write_r+0x1e>
 8013de8:	6023      	str	r3, [r4, #0]
 8013dea:	bd38      	pop	{r3, r4, r5, pc}
 8013dec:	24004fd0 	.word	0x24004fd0

08013df0 <_close_r>:
 8013df0:	b538      	push	{r3, r4, r5, lr}
 8013df2:	4d06      	ldr	r5, [pc, #24]	; (8013e0c <_close_r+0x1c>)
 8013df4:	2300      	movs	r3, #0
 8013df6:	4604      	mov	r4, r0
 8013df8:	4608      	mov	r0, r1
 8013dfa:	602b      	str	r3, [r5, #0]
 8013dfc:	f7ed fb5d 	bl	80014ba <_close>
 8013e00:	1c43      	adds	r3, r0, #1
 8013e02:	d102      	bne.n	8013e0a <_close_r+0x1a>
 8013e04:	682b      	ldr	r3, [r5, #0]
 8013e06:	b103      	cbz	r3, 8013e0a <_close_r+0x1a>
 8013e08:	6023      	str	r3, [r4, #0]
 8013e0a:	bd38      	pop	{r3, r4, r5, pc}
 8013e0c:	24004fd0 	.word	0x24004fd0

08013e10 <_fstat_r>:
 8013e10:	b538      	push	{r3, r4, r5, lr}
 8013e12:	4d07      	ldr	r5, [pc, #28]	; (8013e30 <_fstat_r+0x20>)
 8013e14:	2300      	movs	r3, #0
 8013e16:	4604      	mov	r4, r0
 8013e18:	4608      	mov	r0, r1
 8013e1a:	4611      	mov	r1, r2
 8013e1c:	602b      	str	r3, [r5, #0]
 8013e1e:	f7ed fb58 	bl	80014d2 <_fstat>
 8013e22:	1c43      	adds	r3, r0, #1
 8013e24:	d102      	bne.n	8013e2c <_fstat_r+0x1c>
 8013e26:	682b      	ldr	r3, [r5, #0]
 8013e28:	b103      	cbz	r3, 8013e2c <_fstat_r+0x1c>
 8013e2a:	6023      	str	r3, [r4, #0]
 8013e2c:	bd38      	pop	{r3, r4, r5, pc}
 8013e2e:	bf00      	nop
 8013e30:	24004fd0 	.word	0x24004fd0

08013e34 <_isatty_r>:
 8013e34:	b538      	push	{r3, r4, r5, lr}
 8013e36:	4d06      	ldr	r5, [pc, #24]	; (8013e50 <_isatty_r+0x1c>)
 8013e38:	2300      	movs	r3, #0
 8013e3a:	4604      	mov	r4, r0
 8013e3c:	4608      	mov	r0, r1
 8013e3e:	602b      	str	r3, [r5, #0]
 8013e40:	f7ed fb57 	bl	80014f2 <_isatty>
 8013e44:	1c43      	adds	r3, r0, #1
 8013e46:	d102      	bne.n	8013e4e <_isatty_r+0x1a>
 8013e48:	682b      	ldr	r3, [r5, #0]
 8013e4a:	b103      	cbz	r3, 8013e4e <_isatty_r+0x1a>
 8013e4c:	6023      	str	r3, [r4, #0]
 8013e4e:	bd38      	pop	{r3, r4, r5, pc}
 8013e50:	24004fd0 	.word	0x24004fd0

08013e54 <_lseek_r>:
 8013e54:	b538      	push	{r3, r4, r5, lr}
 8013e56:	4d07      	ldr	r5, [pc, #28]	; (8013e74 <_lseek_r+0x20>)
 8013e58:	4604      	mov	r4, r0
 8013e5a:	4608      	mov	r0, r1
 8013e5c:	4611      	mov	r1, r2
 8013e5e:	2200      	movs	r2, #0
 8013e60:	602a      	str	r2, [r5, #0]
 8013e62:	461a      	mov	r2, r3
 8013e64:	f7ed fb50 	bl	8001508 <_lseek>
 8013e68:	1c43      	adds	r3, r0, #1
 8013e6a:	d102      	bne.n	8013e72 <_lseek_r+0x1e>
 8013e6c:	682b      	ldr	r3, [r5, #0]
 8013e6e:	b103      	cbz	r3, 8013e72 <_lseek_r+0x1e>
 8013e70:	6023      	str	r3, [r4, #0]
 8013e72:	bd38      	pop	{r3, r4, r5, pc}
 8013e74:	24004fd0 	.word	0x24004fd0

08013e78 <_read_r>:
 8013e78:	b538      	push	{r3, r4, r5, lr}
 8013e7a:	4d07      	ldr	r5, [pc, #28]	; (8013e98 <_read_r+0x20>)
 8013e7c:	4604      	mov	r4, r0
 8013e7e:	4608      	mov	r0, r1
 8013e80:	4611      	mov	r1, r2
 8013e82:	2200      	movs	r2, #0
 8013e84:	602a      	str	r2, [r5, #0]
 8013e86:	461a      	mov	r2, r3
 8013e88:	f7ed fafa 	bl	8001480 <_read>
 8013e8c:	1c43      	adds	r3, r0, #1
 8013e8e:	d102      	bne.n	8013e96 <_read_r+0x1e>
 8013e90:	682b      	ldr	r3, [r5, #0]
 8013e92:	b103      	cbz	r3, 8013e96 <_read_r+0x1e>
 8013e94:	6023      	str	r3, [r4, #0]
 8013e96:	bd38      	pop	{r3, r4, r5, pc}
 8013e98:	24004fd0 	.word	0x24004fd0

08013e9c <_init>:
 8013e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e9e:	bf00      	nop
 8013ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013ea2:	bc08      	pop	{r3}
 8013ea4:	469e      	mov	lr, r3
 8013ea6:	4770      	bx	lr

08013ea8 <_fini>:
 8013ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013eaa:	bf00      	nop
 8013eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013eae:	bc08      	pop	{r3}
 8013eb0:	469e      	mov	lr, r3
 8013eb2:	4770      	bx	lr
